// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.UsageProxy.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSubscriptionRewardItem {
    /**
     * @return The number of rewards available for a specific usage period.
     * 
     */
    private Double availableRewards;
    /**
     * @return The number of rewards earned for the specific usage period.
     * 
     */
    private Double earnedRewards;
    /**
     * @return The eligible usage amount for the usage period.
     * 
     */
    private Double eligibleUsageAmount;
    /**
     * @return The ineligible usage amount for the usage period.
     * 
     */
    private Double ineligibleUsageAmount;
    /**
     * @return The boolean parameter to indicate whether or not the available rewards are manually posted.
     * 
     */
    private Boolean isManual;
    /**
     * @return The number of rewards redeemed for a specific month.
     * 
     */
    private Double redeemedRewards;
    /**
     * @return The date and time when rewards accrue.
     * 
     */
    private String timeRewardsEarned;
    /**
     * @return The date and time when rewards expire.
     * 
     */
    private String timeRewardsExpired;
    /**
     * @return The end date and time for the usage period.
     * 
     */
    private String timeUsageEnded;
    /**
     * @return The start date and time for the usage period.
     * 
     */
    private String timeUsageStarted;
    /**
     * @return The usage amount for the usage period.
     * 
     */
    private Double usageAmount;
    /**
     * @return The usage period ID.
     * 
     */
    private String usagePeriodKey;

    private GetSubscriptionRewardItem() {}
    /**
     * @return The number of rewards available for a specific usage period.
     * 
     */
    public Double availableRewards() {
        return this.availableRewards;
    }
    /**
     * @return The number of rewards earned for the specific usage period.
     * 
     */
    public Double earnedRewards() {
        return this.earnedRewards;
    }
    /**
     * @return The eligible usage amount for the usage period.
     * 
     */
    public Double eligibleUsageAmount() {
        return this.eligibleUsageAmount;
    }
    /**
     * @return The ineligible usage amount for the usage period.
     * 
     */
    public Double ineligibleUsageAmount() {
        return this.ineligibleUsageAmount;
    }
    /**
     * @return The boolean parameter to indicate whether or not the available rewards are manually posted.
     * 
     */
    public Boolean isManual() {
        return this.isManual;
    }
    /**
     * @return The number of rewards redeemed for a specific month.
     * 
     */
    public Double redeemedRewards() {
        return this.redeemedRewards;
    }
    /**
     * @return The date and time when rewards accrue.
     * 
     */
    public String timeRewardsEarned() {
        return this.timeRewardsEarned;
    }
    /**
     * @return The date and time when rewards expire.
     * 
     */
    public String timeRewardsExpired() {
        return this.timeRewardsExpired;
    }
    /**
     * @return The end date and time for the usage period.
     * 
     */
    public String timeUsageEnded() {
        return this.timeUsageEnded;
    }
    /**
     * @return The start date and time for the usage period.
     * 
     */
    public String timeUsageStarted() {
        return this.timeUsageStarted;
    }
    /**
     * @return The usage amount for the usage period.
     * 
     */
    public Double usageAmount() {
        return this.usageAmount;
    }
    /**
     * @return The usage period ID.
     * 
     */
    public String usagePeriodKey() {
        return this.usagePeriodKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscriptionRewardItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double availableRewards;
        private Double earnedRewards;
        private Double eligibleUsageAmount;
        private Double ineligibleUsageAmount;
        private Boolean isManual;
        private Double redeemedRewards;
        private String timeRewardsEarned;
        private String timeRewardsExpired;
        private String timeUsageEnded;
        private String timeUsageStarted;
        private Double usageAmount;
        private String usagePeriodKey;
        public Builder() {}
        public Builder(GetSubscriptionRewardItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableRewards = defaults.availableRewards;
    	      this.earnedRewards = defaults.earnedRewards;
    	      this.eligibleUsageAmount = defaults.eligibleUsageAmount;
    	      this.ineligibleUsageAmount = defaults.ineligibleUsageAmount;
    	      this.isManual = defaults.isManual;
    	      this.redeemedRewards = defaults.redeemedRewards;
    	      this.timeRewardsEarned = defaults.timeRewardsEarned;
    	      this.timeRewardsExpired = defaults.timeRewardsExpired;
    	      this.timeUsageEnded = defaults.timeUsageEnded;
    	      this.timeUsageStarted = defaults.timeUsageStarted;
    	      this.usageAmount = defaults.usageAmount;
    	      this.usagePeriodKey = defaults.usagePeriodKey;
        }

        @CustomType.Setter
        public Builder availableRewards(Double availableRewards) {
            this.availableRewards = Objects.requireNonNull(availableRewards);
            return this;
        }
        @CustomType.Setter
        public Builder earnedRewards(Double earnedRewards) {
            this.earnedRewards = Objects.requireNonNull(earnedRewards);
            return this;
        }
        @CustomType.Setter
        public Builder eligibleUsageAmount(Double eligibleUsageAmount) {
            this.eligibleUsageAmount = Objects.requireNonNull(eligibleUsageAmount);
            return this;
        }
        @CustomType.Setter
        public Builder ineligibleUsageAmount(Double ineligibleUsageAmount) {
            this.ineligibleUsageAmount = Objects.requireNonNull(ineligibleUsageAmount);
            return this;
        }
        @CustomType.Setter
        public Builder isManual(Boolean isManual) {
            this.isManual = Objects.requireNonNull(isManual);
            return this;
        }
        @CustomType.Setter
        public Builder redeemedRewards(Double redeemedRewards) {
            this.redeemedRewards = Objects.requireNonNull(redeemedRewards);
            return this;
        }
        @CustomType.Setter
        public Builder timeRewardsEarned(String timeRewardsEarned) {
            this.timeRewardsEarned = Objects.requireNonNull(timeRewardsEarned);
            return this;
        }
        @CustomType.Setter
        public Builder timeRewardsExpired(String timeRewardsExpired) {
            this.timeRewardsExpired = Objects.requireNonNull(timeRewardsExpired);
            return this;
        }
        @CustomType.Setter
        public Builder timeUsageEnded(String timeUsageEnded) {
            this.timeUsageEnded = Objects.requireNonNull(timeUsageEnded);
            return this;
        }
        @CustomType.Setter
        public Builder timeUsageStarted(String timeUsageStarted) {
            this.timeUsageStarted = Objects.requireNonNull(timeUsageStarted);
            return this;
        }
        @CustomType.Setter
        public Builder usageAmount(Double usageAmount) {
            this.usageAmount = Objects.requireNonNull(usageAmount);
            return this;
        }
        @CustomType.Setter
        public Builder usagePeriodKey(String usagePeriodKey) {
            this.usagePeriodKey = Objects.requireNonNull(usagePeriodKey);
            return this;
        }
        public GetSubscriptionRewardItem build() {
            final var o = new GetSubscriptionRewardItem();
            o.availableRewards = availableRewards;
            o.earnedRewards = earnedRewards;
            o.eligibleUsageAmount = eligibleUsageAmount;
            o.ineligibleUsageAmount = ineligibleUsageAmount;
            o.isManual = isManual;
            o.redeemedRewards = redeemedRewards;
            o.timeRewardsEarned = timeRewardsEarned;
            o.timeRewardsExpired = timeRewardsExpired;
            o.timeUsageEnded = timeUsageEnded;
            o.timeUsageStarted = timeUsageStarted;
            o.usageAmount = usageAmount;
            o.usagePeriodKey = usagePeriodKey;
            return o;
        }
    }
}
