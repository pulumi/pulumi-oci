// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.UsageProxy.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSubscriptionRewardsRewardCollectionItemItem {
    /**
     * @return The number of rewards available for a specific usage period.
     * 
     */
    private @Nullable Double availableRewards;
    /**
     * @return The number of rewards earned for the specific usage period.
     * 
     */
    private @Nullable Double earnedRewards;
    /**
     * @return The eligible usage amount for the usage period.
     * 
     */
    private @Nullable Double eligibleUsageAmount;
    /**
     * @return The ineligible usage amount for the usage period.
     * 
     */
    private @Nullable Double ineligibleUsageAmount;
    /**
     * @return The boolean parameter to indicate whether or not the available rewards are manually posted.
     * 
     */
    private @Nullable Boolean isManual;
    /**
     * @return The number of rewards redeemed for a specific month.
     * 
     */
    private @Nullable Double redeemedRewards;
    /**
     * @return The date and time when rewards accrue.
     * 
     */
    private @Nullable String timeRewardsEarned;
    /**
     * @return The date and time when rewards expire.
     * 
     */
    private @Nullable String timeRewardsExpired;
    /**
     * @return The end date and time for the usage period.
     * 
     */
    private @Nullable String timeUsageEnded;
    /**
     * @return The start date and time for the usage period.
     * 
     */
    private @Nullable String timeUsageStarted;
    /**
     * @return The usage amount for the usage period.
     * 
     */
    private @Nullable Double usageAmount;
    /**
     * @return The usage period ID.
     * 
     */
    private @Nullable String usagePeriodKey;

    private GetSubscriptionRewardsRewardCollectionItemItem() {}
    /**
     * @return The number of rewards available for a specific usage period.
     * 
     */
    public Optional<Double> availableRewards() {
        return Optional.ofNullable(this.availableRewards);
    }
    /**
     * @return The number of rewards earned for the specific usage period.
     * 
     */
    public Optional<Double> earnedRewards() {
        return Optional.ofNullable(this.earnedRewards);
    }
    /**
     * @return The eligible usage amount for the usage period.
     * 
     */
    public Optional<Double> eligibleUsageAmount() {
        return Optional.ofNullable(this.eligibleUsageAmount);
    }
    /**
     * @return The ineligible usage amount for the usage period.
     * 
     */
    public Optional<Double> ineligibleUsageAmount() {
        return Optional.ofNullable(this.ineligibleUsageAmount);
    }
    /**
     * @return The boolean parameter to indicate whether or not the available rewards are manually posted.
     * 
     */
    public Optional<Boolean> isManual() {
        return Optional.ofNullable(this.isManual);
    }
    /**
     * @return The number of rewards redeemed for a specific month.
     * 
     */
    public Optional<Double> redeemedRewards() {
        return Optional.ofNullable(this.redeemedRewards);
    }
    /**
     * @return The date and time when rewards accrue.
     * 
     */
    public Optional<String> timeRewardsEarned() {
        return Optional.ofNullable(this.timeRewardsEarned);
    }
    /**
     * @return The date and time when rewards expire.
     * 
     */
    public Optional<String> timeRewardsExpired() {
        return Optional.ofNullable(this.timeRewardsExpired);
    }
    /**
     * @return The end date and time for the usage period.
     * 
     */
    public Optional<String> timeUsageEnded() {
        return Optional.ofNullable(this.timeUsageEnded);
    }
    /**
     * @return The start date and time for the usage period.
     * 
     */
    public Optional<String> timeUsageStarted() {
        return Optional.ofNullable(this.timeUsageStarted);
    }
    /**
     * @return The usage amount for the usage period.
     * 
     */
    public Optional<Double> usageAmount() {
        return Optional.ofNullable(this.usageAmount);
    }
    /**
     * @return The usage period ID.
     * 
     */
    public Optional<String> usagePeriodKey() {
        return Optional.ofNullable(this.usagePeriodKey);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubscriptionRewardsRewardCollectionItemItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double availableRewards;
        private @Nullable Double earnedRewards;
        private @Nullable Double eligibleUsageAmount;
        private @Nullable Double ineligibleUsageAmount;
        private @Nullable Boolean isManual;
        private @Nullable Double redeemedRewards;
        private @Nullable String timeRewardsEarned;
        private @Nullable String timeRewardsExpired;
        private @Nullable String timeUsageEnded;
        private @Nullable String timeUsageStarted;
        private @Nullable Double usageAmount;
        private @Nullable String usagePeriodKey;
        public Builder() {}
        public Builder(GetSubscriptionRewardsRewardCollectionItemItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableRewards = defaults.availableRewards;
    	      this.earnedRewards = defaults.earnedRewards;
    	      this.eligibleUsageAmount = defaults.eligibleUsageAmount;
    	      this.ineligibleUsageAmount = defaults.ineligibleUsageAmount;
    	      this.isManual = defaults.isManual;
    	      this.redeemedRewards = defaults.redeemedRewards;
    	      this.timeRewardsEarned = defaults.timeRewardsEarned;
    	      this.timeRewardsExpired = defaults.timeRewardsExpired;
    	      this.timeUsageEnded = defaults.timeUsageEnded;
    	      this.timeUsageStarted = defaults.timeUsageStarted;
    	      this.usageAmount = defaults.usageAmount;
    	      this.usagePeriodKey = defaults.usagePeriodKey;
        }

        @CustomType.Setter
        public Builder availableRewards(@Nullable Double availableRewards) {
            this.availableRewards = availableRewards;
            return this;
        }
        @CustomType.Setter
        public Builder earnedRewards(@Nullable Double earnedRewards) {
            this.earnedRewards = earnedRewards;
            return this;
        }
        @CustomType.Setter
        public Builder eligibleUsageAmount(@Nullable Double eligibleUsageAmount) {
            this.eligibleUsageAmount = eligibleUsageAmount;
            return this;
        }
        @CustomType.Setter
        public Builder ineligibleUsageAmount(@Nullable Double ineligibleUsageAmount) {
            this.ineligibleUsageAmount = ineligibleUsageAmount;
            return this;
        }
        @CustomType.Setter
        public Builder isManual(@Nullable Boolean isManual) {
            this.isManual = isManual;
            return this;
        }
        @CustomType.Setter
        public Builder redeemedRewards(@Nullable Double redeemedRewards) {
            this.redeemedRewards = redeemedRewards;
            return this;
        }
        @CustomType.Setter
        public Builder timeRewardsEarned(@Nullable String timeRewardsEarned) {
            this.timeRewardsEarned = timeRewardsEarned;
            return this;
        }
        @CustomType.Setter
        public Builder timeRewardsExpired(@Nullable String timeRewardsExpired) {
            this.timeRewardsExpired = timeRewardsExpired;
            return this;
        }
        @CustomType.Setter
        public Builder timeUsageEnded(@Nullable String timeUsageEnded) {
            this.timeUsageEnded = timeUsageEnded;
            return this;
        }
        @CustomType.Setter
        public Builder timeUsageStarted(@Nullable String timeUsageStarted) {
            this.timeUsageStarted = timeUsageStarted;
            return this;
        }
        @CustomType.Setter
        public Builder usageAmount(@Nullable Double usageAmount) {
            this.usageAmount = usageAmount;
            return this;
        }
        @CustomType.Setter
        public Builder usagePeriodKey(@Nullable String usagePeriodKey) {
            this.usagePeriodKey = usagePeriodKey;
            return this;
        }
        public GetSubscriptionRewardsRewardCollectionItemItem build() {
            final var o = new GetSubscriptionRewardsRewardCollectionItemItem();
            o.availableRewards = availableRewards;
            o.earnedRewards = earnedRewards;
            o.eligibleUsageAmount = eligibleUsageAmount;
            o.ineligibleUsageAmount = ineligibleUsageAmount;
            o.isManual = isManual;
            o.redeemedRewards = redeemedRewards;
            o.timeRewardsEarned = timeRewardsEarned;
            o.timeRewardsExpired = timeRewardsExpired;
            o.timeUsageEnded = timeUsageEnded;
            o.timeUsageStarted = timeUsageStarted;
            o.usageAmount = usageAmount;
            o.usagePeriodKey = usagePeriodKey;
            return o;
        }
    }
}
