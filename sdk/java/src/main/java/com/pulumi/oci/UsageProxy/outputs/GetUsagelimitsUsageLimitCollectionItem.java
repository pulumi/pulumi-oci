// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.UsageProxy.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetUsagelimitsUsageLimitCollectionItem {
    /**
     * @return The action when usage limit is hit
     * 
     */
    private String action;
    /**
     * @return The alert level of the usage limit
     * 
     */
    private Double alertLevel;
    /**
     * @return The user who created the limit
     * 
     */
    private String createdBy;
    /**
     * @return Entitlement ID of the usage limit
     * 
     */
    private String entitlementId;
    /**
     * @return The usage limit ID
     * 
     */
    private String id;
    private String limit;
    /**
     * @return Hard or soft limit. Hard limits lead to breaches, soft to alerts.
     * 
     */
    private String limitType;
    /**
     * @return The maximum hard limit set for the usage limit
     * 
     */
    private String maxHardLimit;
    /**
     * @return The user who modified the limit
     * 
     */
    private String modifiedBy;
    /**
     * @return The resource for which the limit is defined
     * 
     */
    private String resourceName;
    /**
     * @return The service for which the limit is defined
     * 
     */
    private String serviceName;
    /**
     * @return The SKU for which the usage limit is set
     * 
     */
    private String skuPartId;
    /**
     * @return The usage limit lifecycle state.
     * 
     */
    private String state;
    /**
     * @return Time when the usage limit was created
     * 
     */
    private String timeCreated;
    /**
     * @return Time when the usage limit was modified
     * 
     */
    private String timeModified;
    /**
     * @return The value type of the usage limit
     * 
     */
    private String valueType;

    private GetUsagelimitsUsageLimitCollectionItem() {}
    /**
     * @return The action when usage limit is hit
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return The alert level of the usage limit
     * 
     */
    public Double alertLevel() {
        return this.alertLevel;
    }
    /**
     * @return The user who created the limit
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return Entitlement ID of the usage limit
     * 
     */
    public String entitlementId() {
        return this.entitlementId;
    }
    /**
     * @return The usage limit ID
     * 
     */
    public String id() {
        return this.id;
    }
    public String limit() {
        return this.limit;
    }
    /**
     * @return Hard or soft limit. Hard limits lead to breaches, soft to alerts.
     * 
     */
    public String limitType() {
        return this.limitType;
    }
    /**
     * @return The maximum hard limit set for the usage limit
     * 
     */
    public String maxHardLimit() {
        return this.maxHardLimit;
    }
    /**
     * @return The user who modified the limit
     * 
     */
    public String modifiedBy() {
        return this.modifiedBy;
    }
    /**
     * @return The resource for which the limit is defined
     * 
     */
    public String resourceName() {
        return this.resourceName;
    }
    /**
     * @return The service for which the limit is defined
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return The SKU for which the usage limit is set
     * 
     */
    public String skuPartId() {
        return this.skuPartId;
    }
    /**
     * @return The usage limit lifecycle state.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Time when the usage limit was created
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Time when the usage limit was modified
     * 
     */
    public String timeModified() {
        return this.timeModified;
    }
    /**
     * @return The value type of the usage limit
     * 
     */
    public String valueType() {
        return this.valueType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsagelimitsUsageLimitCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private Double alertLevel;
        private String createdBy;
        private String entitlementId;
        private String id;
        private String limit;
        private String limitType;
        private String maxHardLimit;
        private String modifiedBy;
        private String resourceName;
        private String serviceName;
        private String skuPartId;
        private String state;
        private String timeCreated;
        private String timeModified;
        private String valueType;
        public Builder() {}
        public Builder(GetUsagelimitsUsageLimitCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.alertLevel = defaults.alertLevel;
    	      this.createdBy = defaults.createdBy;
    	      this.entitlementId = defaults.entitlementId;
    	      this.id = defaults.id;
    	      this.limit = defaults.limit;
    	      this.limitType = defaults.limitType;
    	      this.maxHardLimit = defaults.maxHardLimit;
    	      this.modifiedBy = defaults.modifiedBy;
    	      this.resourceName = defaults.resourceName;
    	      this.serviceName = defaults.serviceName;
    	      this.skuPartId = defaults.skuPartId;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeModified = defaults.timeModified;
    	      this.valueType = defaults.valueType;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder alertLevel(Double alertLevel) {
            if (alertLevel == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "alertLevel");
            }
            this.alertLevel = alertLevel;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder entitlementId(String entitlementId) {
            if (entitlementId == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "entitlementId");
            }
            this.entitlementId = entitlementId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder limit(String limit) {
            if (limit == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "limit");
            }
            this.limit = limit;
            return this;
        }
        @CustomType.Setter
        public Builder limitType(String limitType) {
            if (limitType == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "limitType");
            }
            this.limitType = limitType;
            return this;
        }
        @CustomType.Setter
        public Builder maxHardLimit(String maxHardLimit) {
            if (maxHardLimit == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "maxHardLimit");
            }
            this.maxHardLimit = maxHardLimit;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedBy(String modifiedBy) {
            if (modifiedBy == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "modifiedBy");
            }
            this.modifiedBy = modifiedBy;
            return this;
        }
        @CustomType.Setter
        public Builder resourceName(String resourceName) {
            if (resourceName == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "resourceName");
            }
            this.resourceName = resourceName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder skuPartId(String skuPartId) {
            if (skuPartId == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "skuPartId");
            }
            this.skuPartId = skuPartId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeModified(String timeModified) {
            if (timeModified == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "timeModified");
            }
            this.timeModified = timeModified;
            return this;
        }
        @CustomType.Setter
        public Builder valueType(String valueType) {
            if (valueType == null) {
              throw new MissingRequiredPropertyException("GetUsagelimitsUsageLimitCollectionItem", "valueType");
            }
            this.valueType = valueType;
            return this;
        }
        public GetUsagelimitsUsageLimitCollectionItem build() {
            final var _resultValue = new GetUsagelimitsUsageLimitCollectionItem();
            _resultValue.action = action;
            _resultValue.alertLevel = alertLevel;
            _resultValue.createdBy = createdBy;
            _resultValue.entitlementId = entitlementId;
            _resultValue.id = id;
            _resultValue.limit = limit;
            _resultValue.limitType = limitType;
            _resultValue.maxHardLimit = maxHardLimit;
            _resultValue.modifiedBy = modifiedBy;
            _resultValue.resourceName = resourceName;
            _resultValue.serviceName = serviceName;
            _resultValue.skuPartId = skuPartId;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeModified = timeModified;
            _resultValue.valueType = valueType;
            return _resultValue;
        }
    }
}
