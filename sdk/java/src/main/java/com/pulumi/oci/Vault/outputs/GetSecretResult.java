// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Vault.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Vault.outputs.GetSecretSecretContent;
import com.pulumi.oci.Vault.outputs.GetSecretSecretRule;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSecretResult {
    /**
     * @return The OCID of the compartment where you want to create the secret.
     * 
     */
    private @Nullable String compartmentId;
    /**
     * @return The version number of the secret version that&#39;s currently in use.
     * 
     */
    private @Nullable String currentVersionNumber;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private @Nullable Map<String,Object> definedTags;
    /**
     * @return A brief description of the secret. Avoid entering confidential information.
     * 
     */
    private @Nullable String description;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private @Nullable Map<String,Object> freeformTags;
    /**
     * @return The OCID of the secret.
     * 
     */
    private @Nullable String id;
    /**
     * @return The OCID of the master encryption key that is used to encrypt the secret.
     * 
     */
    private @Nullable String keyId;
    /**
     * @return Additional information about the current lifecycle state of the secret.
     * 
     */
    private @Nullable String lifecycleDetails;
    /**
     * @return Additional metadata that you can use to provide context about how to use the secret or during rotation or other administrative tasks. For example, for a secret that you use to connect to a database, the additional metadata might specify the connection endpoint and the connection string. Provide additional metadata as key-value pairs.
     * 
     */
    private @Nullable Map<String,Object> metadata;
    private @Nullable List<GetSecretSecretContent> secretContents;
    private String secretId;
    /**
     * @return The user-friendly name of the secret. Avoid entering confidential information.
     * 
     */
    private @Nullable String secretName;
    /**
     * @return A list of rules that control how the secret is used and managed.
     * 
     */
    private @Nullable List<GetSecretSecretRule> secretRules;
    /**
     * @return The current lifecycle state of the secret.
     * 
     */
    private @Nullable String state;
    /**
     * @return A property indicating when the secret was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private @Nullable String timeCreated;
    /**
     * @return An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private @Nullable String timeOfCurrentVersionExpiry;
    /**
     * @return An optional property indicating when to delete the secret, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private @Nullable String timeOfDeletion;
    /**
     * @return The OCID of the Vault in which the secret exists
     * 
     */
    private @Nullable String vaultId;

    private GetSecretResult() {}
    /**
     * @return The OCID of the compartment where you want to create the secret.
     * 
     */
    public Optional<String> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }
    /**
     * @return The version number of the secret version that&#39;s currently in use.
     * 
     */
    public Optional<String> currentVersionNumber() {
        return Optional.ofNullable(this.currentVersionNumber);
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags == null ? Map.of() : this.definedTags;
    }
    /**
     * @return A brief description of the secret. Avoid entering confidential information.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags == null ? Map.of() : this.freeformTags;
    }
    /**
     * @return The OCID of the secret.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The OCID of the master encryption key that is used to encrypt the secret.
     * 
     */
    public Optional<String> keyId() {
        return Optional.ofNullable(this.keyId);
    }
    /**
     * @return Additional information about the current lifecycle state of the secret.
     * 
     */
    public Optional<String> lifecycleDetails() {
        return Optional.ofNullable(this.lifecycleDetails);
    }
    /**
     * @return Additional metadata that you can use to provide context about how to use the secret or during rotation or other administrative tasks. For example, for a secret that you use to connect to a database, the additional metadata might specify the connection endpoint and the connection string. Provide additional metadata as key-value pairs.
     * 
     */
    public Map<String,Object> metadata() {
        return this.metadata == null ? Map.of() : this.metadata;
    }
    public List<GetSecretSecretContent> secretContents() {
        return this.secretContents == null ? List.of() : this.secretContents;
    }
    public String secretId() {
        return this.secretId;
    }
    /**
     * @return The user-friendly name of the secret. Avoid entering confidential information.
     * 
     */
    public Optional<String> secretName() {
        return Optional.ofNullable(this.secretName);
    }
    /**
     * @return A list of rules that control how the secret is used and managed.
     * 
     */
    public List<GetSecretSecretRule> secretRules() {
        return this.secretRules == null ? List.of() : this.secretRules;
    }
    /**
     * @return The current lifecycle state of the secret.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return A property indicating when the secret was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public Optional<String> timeCreated() {
        return Optional.ofNullable(this.timeCreated);
    }
    /**
     * @return An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public Optional<String> timeOfCurrentVersionExpiry() {
        return Optional.ofNullable(this.timeOfCurrentVersionExpiry);
    }
    /**
     * @return An optional property indicating when to delete the secret, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public Optional<String> timeOfDeletion() {
        return Optional.ofNullable(this.timeOfDeletion);
    }
    /**
     * @return The OCID of the Vault in which the secret exists
     * 
     */
    public Optional<String> vaultId() {
        return Optional.ofNullable(this.vaultId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecretResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String compartmentId;
        private @Nullable String currentVersionNumber;
        private @Nullable Map<String,Object> definedTags;
        private @Nullable String description;
        private @Nullable Map<String,Object> freeformTags;
        private @Nullable String id;
        private @Nullable String keyId;
        private @Nullable String lifecycleDetails;
        private @Nullable Map<String,Object> metadata;
        private @Nullable List<GetSecretSecretContent> secretContents;
        private String secretId;
        private @Nullable String secretName;
        private @Nullable List<GetSecretSecretRule> secretRules;
        private @Nullable String state;
        private @Nullable String timeCreated;
        private @Nullable String timeOfCurrentVersionExpiry;
        private @Nullable String timeOfDeletion;
        private @Nullable String vaultId;
        public Builder() {}
        public Builder(GetSecretResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.currentVersionNumber = defaults.currentVersionNumber;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.keyId = defaults.keyId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.metadata = defaults.metadata;
    	      this.secretContents = defaults.secretContents;
    	      this.secretId = defaults.secretId;
    	      this.secretName = defaults.secretName;
    	      this.secretRules = defaults.secretRules;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeOfCurrentVersionExpiry = defaults.timeOfCurrentVersionExpiry;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
    	      this.vaultId = defaults.vaultId;
        }

        @CustomType.Setter
        public Builder compartmentId(@Nullable String compartmentId) {
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder currentVersionNumber(@Nullable String currentVersionNumber) {
            this.currentVersionNumber = currentVersionNumber;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(@Nullable Map<String,Object> definedTags) {
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(@Nullable Map<String,Object> freeformTags) {
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(@Nullable String keyId) {
            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(@Nullable String lifecycleDetails) {
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(@Nullable Map<String,Object> metadata) {
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder secretContents(@Nullable List<GetSecretSecretContent> secretContents) {
            this.secretContents = secretContents;
            return this;
        }
        public Builder secretContents(GetSecretSecretContent... secretContents) {
            return secretContents(List.of(secretContents));
        }
        @CustomType.Setter
        public Builder secretId(String secretId) {
            this.secretId = Objects.requireNonNull(secretId);
            return this;
        }
        @CustomType.Setter
        public Builder secretName(@Nullable String secretName) {
            this.secretName = secretName;
            return this;
        }
        @CustomType.Setter
        public Builder secretRules(@Nullable List<GetSecretSecretRule> secretRules) {
            this.secretRules = secretRules;
            return this;
        }
        public Builder secretRules(GetSecretSecretRule... secretRules) {
            return secretRules(List.of(secretRules));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(@Nullable String timeCreated) {
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfCurrentVersionExpiry(@Nullable String timeOfCurrentVersionExpiry) {
            this.timeOfCurrentVersionExpiry = timeOfCurrentVersionExpiry;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfDeletion(@Nullable String timeOfDeletion) {
            this.timeOfDeletion = timeOfDeletion;
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(@Nullable String vaultId) {
            this.vaultId = vaultId;
            return this;
        }
        public GetSecretResult build() {
            final var o = new GetSecretResult();
            o.compartmentId = compartmentId;
            o.currentVersionNumber = currentVersionNumber;
            o.definedTags = definedTags;
            o.description = description;
            o.freeformTags = freeformTags;
            o.id = id;
            o.keyId = keyId;
            o.lifecycleDetails = lifecycleDetails;
            o.metadata = metadata;
            o.secretContents = secretContents;
            o.secretId = secretId;
            o.secretName = secretName;
            o.secretRules = secretRules;
            o.state = state;
            o.timeCreated = timeCreated;
            o.timeOfCurrentVersionExpiry = timeOfCurrentVersionExpiry;
            o.timeOfDeletion = timeOfDeletion;
            o.vaultId = vaultId;
            return o;
        }
    }
}
