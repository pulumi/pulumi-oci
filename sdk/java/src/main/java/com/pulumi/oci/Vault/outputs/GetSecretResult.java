// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Vault.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Vault.outputs.GetSecretSecretContent;
import com.pulumi.oci.Vault.outputs.GetSecretSecretRule;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSecretResult {
    /**
     * @return The OCID of the compartment where you want to create the secret.
     * 
     */
    private String compartmentId;
    /**
     * @return The version number of the secret version that&#39;s currently in use.
     * 
     */
    private String currentVersionNumber;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return A brief description of the secret. Avoid entering confidential information.
     * 
     */
    private String description;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return The OCID of the secret.
     * 
     */
    private String id;
    /**
     * @return The OCID of the master encryption key that is used to encrypt the secret.
     * 
     */
    private String keyId;
    /**
     * @return Additional information about the current lifecycle state of the secret.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return Additional metadata that you can use to provide context about how to use the secret or during rotation or other administrative tasks. For example, for a secret that you use to connect to a database, the additional metadata might specify the connection endpoint and the connection string. Provide additional metadata as key-value pairs.
     * 
     */
    private Map<String,Object> metadata;
    private List<GetSecretSecretContent> secretContents;
    private String secretId;
    /**
     * @return The user-friendly name of the secret. Avoid entering confidential information.
     * 
     */
    private String secretName;
    /**
     * @return A list of rules that control how the secret is used and managed.
     * 
     */
    private List<GetSecretSecretRule> secretRules;
    /**
     * @return The current lifecycle state of the secret.
     * 
     */
    private String state;
    /**
     * @return A property indicating when the secret was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private String timeOfCurrentVersionExpiry;
    /**
     * @return An optional property indicating when to delete the secret, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    private String timeOfDeletion;
    /**
     * @return The OCID of the Vault in which the secret exists
     * 
     */
    private String vaultId;

    private GetSecretResult() {}
    /**
     * @return The OCID of the compartment where you want to create the secret.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The version number of the secret version that&#39;s currently in use.
     * 
     */
    public String currentVersionNumber() {
        return this.currentVersionNumber;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A brief description of the secret. Avoid entering confidential information.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The OCID of the secret.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The OCID of the master encryption key that is used to encrypt the secret.
     * 
     */
    public String keyId() {
        return this.keyId;
    }
    /**
     * @return Additional information about the current lifecycle state of the secret.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return Additional metadata that you can use to provide context about how to use the secret or during rotation or other administrative tasks. For example, for a secret that you use to connect to a database, the additional metadata might specify the connection endpoint and the connection string. Provide additional metadata as key-value pairs.
     * 
     */
    public Map<String,Object> metadata() {
        return this.metadata;
    }
    public List<GetSecretSecretContent> secretContents() {
        return this.secretContents;
    }
    public String secretId() {
        return this.secretId;
    }
    /**
     * @return The user-friendly name of the secret. Avoid entering confidential information.
     * 
     */
    public String secretName() {
        return this.secretName;
    }
    /**
     * @return A list of rules that control how the secret is used and managed.
     * 
     */
    public List<GetSecretSecretRule> secretRules() {
        return this.secretRules;
    }
    /**
     * @return The current lifecycle state of the secret.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return A property indicating when the secret was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeOfCurrentVersionExpiry() {
        return this.timeOfCurrentVersionExpiry;
    }
    /**
     * @return An optional property indicating when to delete the secret, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     * 
     */
    public String timeOfDeletion() {
        return this.timeOfDeletion;
    }
    /**
     * @return The OCID of the Vault in which the secret exists
     * 
     */
    public String vaultId() {
        return this.vaultId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecretResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private String currentVersionNumber;
        private Map<String,Object> definedTags;
        private String description;
        private Map<String,Object> freeformTags;
        private String id;
        private String keyId;
        private String lifecycleDetails;
        private Map<String,Object> metadata;
        private List<GetSecretSecretContent> secretContents;
        private String secretId;
        private String secretName;
        private List<GetSecretSecretRule> secretRules;
        private String state;
        private String timeCreated;
        private String timeOfCurrentVersionExpiry;
        private String timeOfDeletion;
        private String vaultId;
        public Builder() {}
        public Builder(GetSecretResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.currentVersionNumber = defaults.currentVersionNumber;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.keyId = defaults.keyId;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.metadata = defaults.metadata;
    	      this.secretContents = defaults.secretContents;
    	      this.secretId = defaults.secretId;
    	      this.secretName = defaults.secretName;
    	      this.secretRules = defaults.secretRules;
    	      this.state = defaults.state;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeOfCurrentVersionExpiry = defaults.timeOfCurrentVersionExpiry;
    	      this.timeOfDeletion = defaults.timeOfDeletion;
    	      this.vaultId = defaults.vaultId;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder currentVersionNumber(String currentVersionNumber) {
            if (currentVersionNumber == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "currentVersionNumber");
            }
            this.currentVersionNumber = currentVersionNumber;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(String keyId) {
            if (keyId == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "keyId");
            }
            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(Map<String,Object> metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder secretContents(List<GetSecretSecretContent> secretContents) {
            if (secretContents == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "secretContents");
            }
            this.secretContents = secretContents;
            return this;
        }
        public Builder secretContents(GetSecretSecretContent... secretContents) {
            return secretContents(List.of(secretContents));
        }
        @CustomType.Setter
        public Builder secretId(String secretId) {
            if (secretId == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "secretId");
            }
            this.secretId = secretId;
            return this;
        }
        @CustomType.Setter
        public Builder secretName(String secretName) {
            if (secretName == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "secretName");
            }
            this.secretName = secretName;
            return this;
        }
        @CustomType.Setter
        public Builder secretRules(List<GetSecretSecretRule> secretRules) {
            if (secretRules == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "secretRules");
            }
            this.secretRules = secretRules;
            return this;
        }
        public Builder secretRules(GetSecretSecretRule... secretRules) {
            return secretRules(List.of(secretRules));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfCurrentVersionExpiry(String timeOfCurrentVersionExpiry) {
            if (timeOfCurrentVersionExpiry == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "timeOfCurrentVersionExpiry");
            }
            this.timeOfCurrentVersionExpiry = timeOfCurrentVersionExpiry;
            return this;
        }
        @CustomType.Setter
        public Builder timeOfDeletion(String timeOfDeletion) {
            if (timeOfDeletion == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "timeOfDeletion");
            }
            this.timeOfDeletion = timeOfDeletion;
            return this;
        }
        @CustomType.Setter
        public Builder vaultId(String vaultId) {
            if (vaultId == null) {
              throw new MissingRequiredPropertyException("GetSecretResult", "vaultId");
            }
            this.vaultId = vaultId;
            return this;
        }
        public GetSecretResult build() {
            final var _resultValue = new GetSecretResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.currentVersionNumber = currentVersionNumber;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.keyId = keyId;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.metadata = metadata;
            _resultValue.secretContents = secretContents;
            _resultValue.secretId = secretId;
            _resultValue.secretName = secretName;
            _resultValue.secretRules = secretRules;
            _resultValue.state = state;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeOfCurrentVersionExpiry = timeOfCurrentVersionExpiry;
            _resultValue.timeOfDeletion = timeOfDeletion;
            _resultValue.vaultId = vaultId;
            return _resultValue;
        }
    }
}
