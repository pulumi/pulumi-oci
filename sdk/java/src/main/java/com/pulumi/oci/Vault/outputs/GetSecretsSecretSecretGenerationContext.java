// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Vault.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSecretsSecretSecretGenerationContext {
    /**
     * @return Name of random bytes generation template for generating random byte type secret.
     * 
     */
    private String generationTemplate;
    /**
     * @return Name of the predefined secret generation type.
     * 
     */
    private String generationType;
    /**
     * @return Length of the passphrase to be generated
     * 
     */
    private Integer passphraseLength;
    /**
     * @return SecretTemplate captures structure in which customer wants to store secrets. This is optional and a default structure is available for each secret type.  The template can have any structure with static values that are not generated. Within the template, you can insert predefined placeholders to store secrets.  These placeholders are later replaced with the generated content and saved as a Base64 encoded content.
     * 
     */
    private String secretTemplate;

    private GetSecretsSecretSecretGenerationContext() {}
    /**
     * @return Name of random bytes generation template for generating random byte type secret.
     * 
     */
    public String generationTemplate() {
        return this.generationTemplate;
    }
    /**
     * @return Name of the predefined secret generation type.
     * 
     */
    public String generationType() {
        return this.generationType;
    }
    /**
     * @return Length of the passphrase to be generated
     * 
     */
    public Integer passphraseLength() {
        return this.passphraseLength;
    }
    /**
     * @return SecretTemplate captures structure in which customer wants to store secrets. This is optional and a default structure is available for each secret type.  The template can have any structure with static values that are not generated. Within the template, you can insert predefined placeholders to store secrets.  These placeholders are later replaced with the generated content and saved as a Base64 encoded content.
     * 
     */
    public String secretTemplate() {
        return this.secretTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecretsSecretSecretGenerationContext defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String generationTemplate;
        private String generationType;
        private Integer passphraseLength;
        private String secretTemplate;
        public Builder() {}
        public Builder(GetSecretsSecretSecretGenerationContext defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.generationTemplate = defaults.generationTemplate;
    	      this.generationType = defaults.generationType;
    	      this.passphraseLength = defaults.passphraseLength;
    	      this.secretTemplate = defaults.secretTemplate;
        }

        @CustomType.Setter
        public Builder generationTemplate(String generationTemplate) {
            if (generationTemplate == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecretSecretGenerationContext", "generationTemplate");
            }
            this.generationTemplate = generationTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder generationType(String generationType) {
            if (generationType == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecretSecretGenerationContext", "generationType");
            }
            this.generationType = generationType;
            return this;
        }
        @CustomType.Setter
        public Builder passphraseLength(Integer passphraseLength) {
            if (passphraseLength == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecretSecretGenerationContext", "passphraseLength");
            }
            this.passphraseLength = passphraseLength;
            return this;
        }
        @CustomType.Setter
        public Builder secretTemplate(String secretTemplate) {
            if (secretTemplate == null) {
              throw new MissingRequiredPropertyException("GetSecretsSecretSecretGenerationContext", "secretTemplate");
            }
            this.secretTemplate = secretTemplate;
            return this;
        }
        public GetSecretsSecretSecretGenerationContext build() {
            final var _resultValue = new GetSecretsSecretSecretGenerationContext();
            _resultValue.generationTemplate = generationTemplate;
            _resultValue.generationType = generationType;
            _resultValue.passphraseLength = passphraseLength;
            _resultValue.secretTemplate = secretTemplate;
            return _resultValue;
        }
    }
}
