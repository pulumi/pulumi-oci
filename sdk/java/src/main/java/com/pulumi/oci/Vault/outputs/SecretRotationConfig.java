// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Vault.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.Vault.outputs.SecretRotationConfigTargetSystemDetails;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecretRotationConfig {
    /**
     * @return (Updatable) Enables auto rotation, when set to true rotationInterval must be set.
     * 
     */
    private @Nullable Boolean isScheduledRotationEnabled;
    /**
     * @return (Updatable) The time interval that indicates the frequency for rotating secret data, as described in ISO 8601 format. The minimum value is 1 day and maximum value is 360 days. For example, if you want to set the time interval for rotating a secret data as 30 days, the duration is expressed as &#34;P30D.&#34;
     * 
     */
    private @Nullable String rotationInterval;
    /**
     * @return (Updatable) The TargetSystemDetails provides the targetSystem type and type-specific connection metadata
     * 
     */
    private SecretRotationConfigTargetSystemDetails targetSystemDetails;

    private SecretRotationConfig() {}
    /**
     * @return (Updatable) Enables auto rotation, when set to true rotationInterval must be set.
     * 
     */
    public Optional<Boolean> isScheduledRotationEnabled() {
        return Optional.ofNullable(this.isScheduledRotationEnabled);
    }
    /**
     * @return (Updatable) The time interval that indicates the frequency for rotating secret data, as described in ISO 8601 format. The minimum value is 1 day and maximum value is 360 days. For example, if you want to set the time interval for rotating a secret data as 30 days, the duration is expressed as &#34;P30D.&#34;
     * 
     */
    public Optional<String> rotationInterval() {
        return Optional.ofNullable(this.rotationInterval);
    }
    /**
     * @return (Updatable) The TargetSystemDetails provides the targetSystem type and type-specific connection metadata
     * 
     */
    public SecretRotationConfigTargetSystemDetails targetSystemDetails() {
        return this.targetSystemDetails;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretRotationConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean isScheduledRotationEnabled;
        private @Nullable String rotationInterval;
        private SecretRotationConfigTargetSystemDetails targetSystemDetails;
        public Builder() {}
        public Builder(SecretRotationConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isScheduledRotationEnabled = defaults.isScheduledRotationEnabled;
    	      this.rotationInterval = defaults.rotationInterval;
    	      this.targetSystemDetails = defaults.targetSystemDetails;
        }

        @CustomType.Setter
        public Builder isScheduledRotationEnabled(@Nullable Boolean isScheduledRotationEnabled) {

            this.isScheduledRotationEnabled = isScheduledRotationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder rotationInterval(@Nullable String rotationInterval) {

            this.rotationInterval = rotationInterval;
            return this;
        }
        @CustomType.Setter
        public Builder targetSystemDetails(SecretRotationConfigTargetSystemDetails targetSystemDetails) {
            if (targetSystemDetails == null) {
              throw new MissingRequiredPropertyException("SecretRotationConfig", "targetSystemDetails");
            }
            this.targetSystemDetails = targetSystemDetails;
            return this;
        }
        public SecretRotationConfig build() {
            final var _resultValue = new SecretRotationConfig();
            _resultValue.isScheduledRotationEnabled = isScheduledRotationEnabled;
            _resultValue.rotationInterval = rotationInterval;
            _resultValue.targetSystemDetails = targetSystemDetails;
            return _resultValue;
        }
    }
}
