// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Vault.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecretSecretContent {
    /**
     * @return (Updatable) The base64-encoded content of the secret.
     * 
     */
    private String content;
    /**
     * @return (Updatable) content type . Example `BASE64` .
     * 
     */
    private String contentType;
    /**
     * @return (Updatable) Names should be unique within a secret. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     * 
     */
    private @Nullable String name;
    /**
     * @return (Updatable) The rotation state of the secret content. The default is `CURRENT`, meaning that the secret is currently in use. A secret version that you mark as `PENDING` is staged and available for use, but you don&#39;t yet want to rotate it into current, active use. For example, you might create or update a secret and mark its rotation state as `PENDING` if you haven&#39;t yet updated the secret on the target system. When creating a secret, only the value `CURRENT` is applicable, although the value `LATEST` is also automatically applied. When updating  a secret, you can specify a version&#39;s rotation state as either `CURRENT` or `PENDING`.
     * 
     */
    private @Nullable String stage;

    private SecretSecretContent() {}
    /**
     * @return (Updatable) The base64-encoded content of the secret.
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return (Updatable) content type . Example `BASE64` .
     * 
     */
    public String contentType() {
        return this.contentType;
    }
    /**
     * @return (Updatable) Names should be unique within a secret. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return (Updatable) The rotation state of the secret content. The default is `CURRENT`, meaning that the secret is currently in use. A secret version that you mark as `PENDING` is staged and available for use, but you don&#39;t yet want to rotate it into current, active use. For example, you might create or update a secret and mark its rotation state as `PENDING` if you haven&#39;t yet updated the secret on the target system. When creating a secret, only the value `CURRENT` is applicable, although the value `LATEST` is also automatically applied. When updating  a secret, you can specify a version&#39;s rotation state as either `CURRENT` or `PENDING`.
     * 
     */
    public Optional<String> stage() {
        return Optional.ofNullable(this.stage);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretSecretContent defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String content;
        private String contentType;
        private @Nullable String name;
        private @Nullable String stage;
        public Builder() {}
        public Builder(SecretSecretContent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.contentType = defaults.contentType;
    	      this.name = defaults.name;
    	      this.stage = defaults.stage;
        }

        @CustomType.Setter
        public Builder content(String content) {
            if (content == null) {
              throw new MissingRequiredPropertyException("SecretSecretContent", "content");
            }
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder contentType(String contentType) {
            if (contentType == null) {
              throw new MissingRequiredPropertyException("SecretSecretContent", "contentType");
            }
            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder stage(@Nullable String stage) {

            this.stage = stage;
            return this;
        }
        public SecretSecretContent build() {
            final var _resultValue = new SecretSecretContent();
            _resultValue.content = content;
            _resultValue.contentType = contentType;
            _resultValue.name = name;
            _resultValue.stage = stage;
            return _resultValue;
        }
    }
}
