// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VisualBuilder.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.VisualBuilder.outputs.GetVbInstanceAlternateCustomEndpoint;
import com.pulumi.oci.VisualBuilder.outputs.GetVbInstanceAttachment;
import com.pulumi.oci.VisualBuilder.outputs.GetVbInstanceCustomEndpoint;
import com.pulumi.oci.VisualBuilder.outputs.GetVbInstanceIdcsInfo;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetVbInstanceResult {
    /**
     * @return A list of alternate custom endpoints used for the vb instance URL.
     * 
     */
    private List<GetVbInstanceAlternateCustomEndpoint> alternateCustomEndpoints;
    /**
     * @return A list of associated attachments to other services
     * 
     */
    private List<GetVbInstanceAttachment> attachments;
    /**
     * @return Compartment Identifier.
     * 
     */
    private String compartmentId;
    /**
     * @return The entitlement used for billing purposes.
     * 
     */
    private String consumptionModel;
    /**
     * @return Details for a custom endpoint for the vb instance.
     * 
     */
    private List<GetVbInstanceCustomEndpoint> customEndpoints;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Vb Instance Identifier, can be renamed.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    private String id;
    /**
     * @return Information for IDCS access
     * 
     */
    private List<GetVbInstanceIdcsInfo> idcsInfos;
    private String idcsOpenId;
    /**
     * @return The Vb Instance URL.
     * 
     */
    private String instanceUrl;
    /**
     * @return Visual Builder is enabled or not.
     * 
     */
    private Boolean isVisualBuilderEnabled;
    /**
     * @return The NAT gateway IP address for the VB management VCN
     * 
     */
    private String managementNatGatewayIp;
    /**
     * @return The Oracle Cloud ID (OCID) of the Visual Builder management VCN
     * 
     */
    private String managementVcnId;
    /**
     * @return The number of Nodes
     * 
     */
    private Integer nodeCount;
    /**
     * @return The NAT gateway IP address for the VB service VCN
     * 
     */
    private String serviceNatGatewayIp;
    /**
     * @return The Oracle Cloud ID (OCID) of the Visual Builder service VCN
     * 
     */
    private String serviceVcnId;
    /**
     * @return The current state of the vb instance.
     * 
     */
    private String state;
    /**
     * @return An message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    private String stateMessage;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return The time the the VbInstance was created. An RFC3339 formatted datetime string.
     * 
     */
    private String timeCreated;
    /**
     * @return The time the VbInstance was updated. An RFC3339 formatted datetime string.
     * 
     */
    private String timeUpdated;
    private String vbInstanceId;

    private GetVbInstanceResult() {}
    /**
     * @return A list of alternate custom endpoints used for the vb instance URL.
     * 
     */
    public List<GetVbInstanceAlternateCustomEndpoint> alternateCustomEndpoints() {
        return this.alternateCustomEndpoints;
    }
    /**
     * @return A list of associated attachments to other services
     * 
     */
    public List<GetVbInstanceAttachment> attachments() {
        return this.attachments;
    }
    /**
     * @return Compartment Identifier.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The entitlement used for billing purposes.
     * 
     */
    public String consumptionModel() {
        return this.consumptionModel;
    }
    /**
     * @return Details for a custom endpoint for the vb instance.
     * 
     */
    public List<GetVbInstanceCustomEndpoint> customEndpoints() {
        return this.customEndpoints;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Vb Instance Identifier, can be renamed.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return Unique identifier that is immutable on creation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Information for IDCS access
     * 
     */
    public List<GetVbInstanceIdcsInfo> idcsInfos() {
        return this.idcsInfos;
    }
    public String idcsOpenId() {
        return this.idcsOpenId;
    }
    /**
     * @return The Vb Instance URL.
     * 
     */
    public String instanceUrl() {
        return this.instanceUrl;
    }
    /**
     * @return Visual Builder is enabled or not.
     * 
     */
    public Boolean isVisualBuilderEnabled() {
        return this.isVisualBuilderEnabled;
    }
    /**
     * @return The NAT gateway IP address for the VB management VCN
     * 
     */
    public String managementNatGatewayIp() {
        return this.managementNatGatewayIp;
    }
    /**
     * @return The Oracle Cloud ID (OCID) of the Visual Builder management VCN
     * 
     */
    public String managementVcnId() {
        return this.managementVcnId;
    }
    /**
     * @return The number of Nodes
     * 
     */
    public Integer nodeCount() {
        return this.nodeCount;
    }
    /**
     * @return The NAT gateway IP address for the VB service VCN
     * 
     */
    public String serviceNatGatewayIp() {
        return this.serviceNatGatewayIp;
    }
    /**
     * @return The Oracle Cloud ID (OCID) of the Visual Builder service VCN
     * 
     */
    public String serviceVcnId() {
        return this.serviceVcnId;
    }
    /**
     * @return The current state of the vb instance.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return An message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     * 
     */
    public String stateMessage() {
        return this.stateMessage;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The time the the VbInstance was created. An RFC3339 formatted datetime string.
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The time the VbInstance was updated. An RFC3339 formatted datetime string.
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    public String vbInstanceId() {
        return this.vbInstanceId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVbInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetVbInstanceAlternateCustomEndpoint> alternateCustomEndpoints;
        private List<GetVbInstanceAttachment> attachments;
        private String compartmentId;
        private String consumptionModel;
        private List<GetVbInstanceCustomEndpoint> customEndpoints;
        private Map<String,Object> definedTags;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String id;
        private List<GetVbInstanceIdcsInfo> idcsInfos;
        private String idcsOpenId;
        private String instanceUrl;
        private Boolean isVisualBuilderEnabled;
        private String managementNatGatewayIp;
        private String managementVcnId;
        private Integer nodeCount;
        private String serviceNatGatewayIp;
        private String serviceVcnId;
        private String state;
        private String stateMessage;
        private Map<String,Object> systemTags;
        private String timeCreated;
        private String timeUpdated;
        private String vbInstanceId;
        public Builder() {}
        public Builder(GetVbInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternateCustomEndpoints = defaults.alternateCustomEndpoints;
    	      this.attachments = defaults.attachments;
    	      this.compartmentId = defaults.compartmentId;
    	      this.consumptionModel = defaults.consumptionModel;
    	      this.customEndpoints = defaults.customEndpoints;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.idcsInfos = defaults.idcsInfos;
    	      this.idcsOpenId = defaults.idcsOpenId;
    	      this.instanceUrl = defaults.instanceUrl;
    	      this.isVisualBuilderEnabled = defaults.isVisualBuilderEnabled;
    	      this.managementNatGatewayIp = defaults.managementNatGatewayIp;
    	      this.managementVcnId = defaults.managementVcnId;
    	      this.nodeCount = defaults.nodeCount;
    	      this.serviceNatGatewayIp = defaults.serviceNatGatewayIp;
    	      this.serviceVcnId = defaults.serviceVcnId;
    	      this.state = defaults.state;
    	      this.stateMessage = defaults.stateMessage;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.vbInstanceId = defaults.vbInstanceId;
        }

        @CustomType.Setter
        public Builder alternateCustomEndpoints(List<GetVbInstanceAlternateCustomEndpoint> alternateCustomEndpoints) {
            this.alternateCustomEndpoints = Objects.requireNonNull(alternateCustomEndpoints);
            return this;
        }
        public Builder alternateCustomEndpoints(GetVbInstanceAlternateCustomEndpoint... alternateCustomEndpoints) {
            return alternateCustomEndpoints(List.of(alternateCustomEndpoints));
        }
        @CustomType.Setter
        public Builder attachments(List<GetVbInstanceAttachment> attachments) {
            this.attachments = Objects.requireNonNull(attachments);
            return this;
        }
        public Builder attachments(GetVbInstanceAttachment... attachments) {
            return attachments(List.of(attachments));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            this.compartmentId = Objects.requireNonNull(compartmentId);
            return this;
        }
        @CustomType.Setter
        public Builder consumptionModel(String consumptionModel) {
            this.consumptionModel = Objects.requireNonNull(consumptionModel);
            return this;
        }
        @CustomType.Setter
        public Builder customEndpoints(List<GetVbInstanceCustomEndpoint> customEndpoints) {
            this.customEndpoints = Objects.requireNonNull(customEndpoints);
            return this;
        }
        public Builder customEndpoints(GetVbInstanceCustomEndpoint... customEndpoints) {
            return customEndpoints(List.of(customEndpoints));
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            this.definedTags = Objects.requireNonNull(definedTags);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            this.freeformTags = Objects.requireNonNull(freeformTags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder idcsInfos(List<GetVbInstanceIdcsInfo> idcsInfos) {
            this.idcsInfos = Objects.requireNonNull(idcsInfos);
            return this;
        }
        public Builder idcsInfos(GetVbInstanceIdcsInfo... idcsInfos) {
            return idcsInfos(List.of(idcsInfos));
        }
        @CustomType.Setter
        public Builder idcsOpenId(String idcsOpenId) {
            this.idcsOpenId = Objects.requireNonNull(idcsOpenId);
            return this;
        }
        @CustomType.Setter
        public Builder instanceUrl(String instanceUrl) {
            this.instanceUrl = Objects.requireNonNull(instanceUrl);
            return this;
        }
        @CustomType.Setter
        public Builder isVisualBuilderEnabled(Boolean isVisualBuilderEnabled) {
            this.isVisualBuilderEnabled = Objects.requireNonNull(isVisualBuilderEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder managementNatGatewayIp(String managementNatGatewayIp) {
            this.managementNatGatewayIp = Objects.requireNonNull(managementNatGatewayIp);
            return this;
        }
        @CustomType.Setter
        public Builder managementVcnId(String managementVcnId) {
            this.managementVcnId = Objects.requireNonNull(managementVcnId);
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(Integer nodeCount) {
            this.nodeCount = Objects.requireNonNull(nodeCount);
            return this;
        }
        @CustomType.Setter
        public Builder serviceNatGatewayIp(String serviceNatGatewayIp) {
            this.serviceNatGatewayIp = Objects.requireNonNull(serviceNatGatewayIp);
            return this;
        }
        @CustomType.Setter
        public Builder serviceVcnId(String serviceVcnId) {
            this.serviceVcnId = Objects.requireNonNull(serviceVcnId);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder stateMessage(String stateMessage) {
            this.stateMessage = Objects.requireNonNull(stateMessage);
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            this.systemTags = Objects.requireNonNull(systemTags);
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            this.timeCreated = Objects.requireNonNull(timeCreated);
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            this.timeUpdated = Objects.requireNonNull(timeUpdated);
            return this;
        }
        @CustomType.Setter
        public Builder vbInstanceId(String vbInstanceId) {
            this.vbInstanceId = Objects.requireNonNull(vbInstanceId);
            return this;
        }
        public GetVbInstanceResult build() {
            final var _resultValue = new GetVbInstanceResult();
            _resultValue.alternateCustomEndpoints = alternateCustomEndpoints;
            _resultValue.attachments = attachments;
            _resultValue.compartmentId = compartmentId;
            _resultValue.consumptionModel = consumptionModel;
            _resultValue.customEndpoints = customEndpoints;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.idcsInfos = idcsInfos;
            _resultValue.idcsOpenId = idcsOpenId;
            _resultValue.instanceUrl = instanceUrl;
            _resultValue.isVisualBuilderEnabled = isVisualBuilderEnabled;
            _resultValue.managementNatGatewayIp = managementNatGatewayIp;
            _resultValue.managementVcnId = managementVcnId;
            _resultValue.nodeCount = nodeCount;
            _resultValue.serviceNatGatewayIp = serviceNatGatewayIp;
            _resultValue.serviceVcnId = serviceVcnId;
            _resultValue.state = state;
            _resultValue.stateMessage = stateMessage;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.vbInstanceId = vbInstanceId;
            return _resultValue;
        }
    }
}
