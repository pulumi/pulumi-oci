// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VnMonitoring;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Utilities;
import com.pulumi.oci.VnMonitoring.PathAnalysiArgs;
import com.pulumi.oci.VnMonitoring.inputs.PathAnalysiState;
import com.pulumi.oci.VnMonitoring.outputs.PathAnalysiDestinationEndpoint;
import com.pulumi.oci.VnMonitoring.outputs.PathAnalysiProtocolParameters;
import com.pulumi.oci.VnMonitoring.outputs.PathAnalysiQueryOptions;
import com.pulumi.oci.VnMonitoring.outputs.PathAnalysiSourceEndpoint;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * This resource provides the Path Analysi resource in Oracle Cloud Infrastructure Vn Monitoring service.
 * 
 * Use this method to initiate a [Network Path Analyzer](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/path_analyzer.htm) analysis. This method returns
 * an opc-work-request-id, and you can poll the status of the work request until it either fails or succeeds.
 * 
 * If the work request status is successful, use [ListWorkRequestResults](https://docs.cloud.oracle.com/iaas/api/#/en/VnConfigAdvisor/latest/WorkRequestResult/ListWorkRequestResults)
 * with the work request ID to ask for the successful analysis results. If the work request status is failed, use
 * [ListWorkRequestErrors](https://docs.cloud.oracle.com/iaas/api/#/en/VnConfigAdvisor/latest/WorkRequestError/ListWorkRequestErrors)
 * with the work request ID to ask for the analysis failure information. The information
 * returned from either of these methods can be used to build a final report.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.VnMonitoring.PathAnalysi;
 * import com.pulumi.oci.VnMonitoring.PathAnalysiArgs;
 * import com.pulumi.oci.VnMonitoring.inputs.PathAnalysiDestinationEndpointArgs;
 * import com.pulumi.oci.VnMonitoring.inputs.PathAnalysiProtocolParametersArgs;
 * import com.pulumi.oci.VnMonitoring.inputs.PathAnalysiQueryOptionsArgs;
 * import com.pulumi.oci.VnMonitoring.inputs.PathAnalysiSourceEndpointArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testPathAnalysi = new PathAnalysi("testPathAnalysi", PathAnalysiArgs.builder()        
 *             .type(pathAnalysiType)
 *             .cacheControl(pathAnalysiCacheControl)
 *             .compartmentId(compartmentId)
 *             .destinationEndpoint(PathAnalysiDestinationEndpointArgs.builder()
 *                 .type(pathAnalysiDestinationEndpointType)
 *                 .address(pathAnalysiDestinationEndpointAddress)
 *                 .instanceId(testInstance.id())
 *                 .listenerId(testListener.id())
 *                 .loadBalancerId(testLoadBalancer.id())
 *                 .networkLoadBalancerId(testNetworkLoadBalancer.id())
 *                 .subnetId(testSubnet.id())
 *                 .vlanId(testVlan.id())
 *                 .vnicId(testVnicAttachment.id())
 *                 .build())
 *             .pathAnalyzerTestId(testPathAnalyzerTest.id())
 *             .protocol(pathAnalysiProtocol)
 *             .protocolParameters(PathAnalysiProtocolParametersArgs.builder()
 *                 .type(pathAnalysiProtocolParametersType)
 *                 .destinationPort(pathAnalysiProtocolParametersDestinationPort)
 *                 .icmpCode(pathAnalysiProtocolParametersIcmpCode)
 *                 .icmpType(pathAnalysiProtocolParametersIcmpType)
 *                 .sourcePort(pathAnalysiProtocolParametersSourcePort)
 *                 .build())
 *             .queryOptions(PathAnalysiQueryOptionsArgs.builder()
 *                 .isBiDirectionalAnalysis(pathAnalysiQueryOptionsIsBiDirectionalAnalysis)
 *                 .build())
 *             .sourceEndpoint(PathAnalysiSourceEndpointArgs.builder()
 *                 .type(pathAnalysiSourceEndpointType)
 *                 .address(pathAnalysiSourceEndpointAddress)
 *                 .instanceId(testInstance.id())
 *                 .listenerId(testListener.id())
 *                 .loadBalancerId(testLoadBalancer.id())
 *                 .networkLoadBalancerId(testNetworkLoadBalancer.id())
 *                 .subnetId(testSubnet.id())
 *                 .vlanId(testVlan.id())
 *                 .vnicId(testVnicAttachment.id())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * PathAnalysis can be imported using the `id`, e.g.
 * 
 * ```sh
 * $ pulumi import oci:VnMonitoring/pathAnalysi:PathAnalysi test_path_analysi &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:VnMonitoring/pathAnalysi:PathAnalysi")
public class PathAnalysi extends com.pulumi.resources.CustomResource {
    /**
     * The Cache-Control HTTP header holds directives (instructions) for caching in both requests and responses.
     * 
     */
    @Export(name="cacheControl", refs={String.class}, tree="[0]")
    private Output<String> cacheControl;

    /**
     * @return The Cache-Control HTTP header holds directives (instructions) for caching in both requests and responses.
     * 
     */
    public Output<String> cacheControl() {
        return this.cacheControl;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment.
     * 
     */
    @Export(name="compartmentId", refs={String.class}, tree="[0]")
    private Output<String> compartmentId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    @Export(name="destinationEndpoint", refs={PathAnalysiDestinationEndpoint.class}, tree="[0]")
    private Output<PathAnalysiDestinationEndpoint> destinationEndpoint;

    /**
     * @return Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    public Output<PathAnalysiDestinationEndpoint> destinationEndpoint() {
        return this.destinationEndpoint;
    }
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
     * 
     */
    @Export(name="pathAnalyzerTestId", refs={String.class}, tree="[0]")
    private Output<String> pathAnalyzerTestId;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
     * 
     */
    public Output<String> pathAnalyzerTestId() {
        return this.pathAnalyzerTestId;
    }
    /**
     * The IP protocol to used for the path analysis.
     * 
     */
    @Export(name="protocol", refs={Integer.class}, tree="[0]")
    private Output<Integer> protocol;

    /**
     * @return The IP protocol to used for the path analysis.
     * 
     */
    public Output<Integer> protocol() {
        return this.protocol;
    }
    /**
     * Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
     * 
     */
    @Export(name="protocolParameters", refs={PathAnalysiProtocolParameters.class}, tree="[0]")
    private Output<PathAnalysiProtocolParameters> protocolParameters;

    /**
     * @return Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
     * 
     */
    public Output<PathAnalysiProtocolParameters> protocolParameters() {
        return this.protocolParameters;
    }
    /**
     * Defines the query options required for a `PathAnalyzerTest` resource.
     * 
     */
    @Export(name="queryOptions", refs={PathAnalysiQueryOptions.class}, tree="[0]")
    private Output<PathAnalysiQueryOptions> queryOptions;

    /**
     * @return Defines the query options required for a `PathAnalyzerTest` resource.
     * 
     */
    public Output<PathAnalysiQueryOptions> queryOptions() {
        return this.queryOptions;
    }
    /**
     * Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    @Export(name="sourceEndpoint", refs={PathAnalysiSourceEndpoint.class}, tree="[0]")
    private Output<PathAnalysiSourceEndpoint> sourceEndpoint;

    /**
     * @return Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    public Output<PathAnalysiSourceEndpoint> sourceEndpoint() {
        return this.sourceEndpoint;
    }
    /**
     * The type of the `PathAnalysis` query.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of the `PathAnalysis` query.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PathAnalysi(String name) {
        this(name, PathAnalysiArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PathAnalysi(String name, PathAnalysiArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PathAnalysi(String name, PathAnalysiArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:VnMonitoring/pathAnalysi:PathAnalysi", name, args == null ? PathAnalysiArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private PathAnalysi(String name, Output<String> id, @Nullable PathAnalysiState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:VnMonitoring/pathAnalysi:PathAnalysi", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PathAnalysi get(String name, Output<String> id, @Nullable PathAnalysiState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PathAnalysi(name, id, state, options);
    }
}
