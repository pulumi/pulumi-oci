// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VnMonitoring;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.oci.Utilities;
import com.pulumi.oci.VnMonitoring.PathAnalyzerTestArgs;
import com.pulumi.oci.VnMonitoring.inputs.PathAnalyzerTestState;
import com.pulumi.oci.VnMonitoring.outputs.PathAnalyzerTestDestinationEndpoint;
import com.pulumi.oci.VnMonitoring.outputs.PathAnalyzerTestProtocolParameters;
import com.pulumi.oci.VnMonitoring.outputs.PathAnalyzerTestQueryOptions;
import com.pulumi.oci.VnMonitoring.outputs.PathAnalyzerTestSourceEndpoint;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * This resource provides the Path Analyzer Test resource in Oracle Cloud Infrastructure Vn Monitoring service.
 * 
 * Creates a new `PathAnalyzerTest` resource.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.oci.VnMonitoring.PathAnalyzerTest;
 * import com.pulumi.oci.VnMonitoring.PathAnalyzerTestArgs;
 * import com.pulumi.oci.VnMonitoring.inputs.PathAnalyzerTestDestinationEndpointArgs;
 * import com.pulumi.oci.VnMonitoring.inputs.PathAnalyzerTestSourceEndpointArgs;
 * import com.pulumi.oci.VnMonitoring.inputs.PathAnalyzerTestProtocolParametersArgs;
 * import com.pulumi.oci.VnMonitoring.inputs.PathAnalyzerTestQueryOptionsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testPathAnalyzerTest = new PathAnalyzerTest("testPathAnalyzerTest", PathAnalyzerTestArgs.builder()
 *             .compartmentId(compartmentId)
 *             .destinationEndpoint(PathAnalyzerTestDestinationEndpointArgs.builder()
 *                 .type(pathAnalyzerTestDestinationEndpointType)
 *                 .address(pathAnalyzerTestDestinationEndpointAddress)
 *                 .instanceId(testInstance.id())
 *                 .listenerId(testListener.id())
 *                 .loadBalancerId(testLoadBalancer.id())
 *                 .networkLoadBalancerId(testNetworkLoadBalancer.id())
 *                 .subnetId(testSubnet.id())
 *                 .vlanId(testVlan.id())
 *                 .vnicId(testVnicAttachment.id())
 *                 .build())
 *             .protocol(pathAnalyzerTestProtocol)
 *             .sourceEndpoint(PathAnalyzerTestSourceEndpointArgs.builder()
 *                 .type(pathAnalyzerTestSourceEndpointType)
 *                 .address(pathAnalyzerTestSourceEndpointAddress)
 *                 .instanceId(testInstance.id())
 *                 .listenerId(testListener.id())
 *                 .loadBalancerId(testLoadBalancer.id())
 *                 .networkLoadBalancerId(testNetworkLoadBalancer.id())
 *                 .subnetId(testSubnet.id())
 *                 .vlanId(testVlan.id())
 *                 .vnicId(testVnicAttachment.id())
 *                 .build())
 *             .definedTags(Map.of("foo-namespace.bar-key", "value"))
 *             .displayName(pathAnalyzerTestDisplayName)
 *             .freeformTags(Map.of("bar-key", "value"))
 *             .protocolParameters(PathAnalyzerTestProtocolParametersArgs.builder()
 *                 .type(pathAnalyzerTestProtocolParametersType)
 *                 .destinationPort(pathAnalyzerTestProtocolParametersDestinationPort)
 *                 .icmpCode(pathAnalyzerTestProtocolParametersIcmpCode)
 *                 .icmpType(pathAnalyzerTestProtocolParametersIcmpType)
 *                 .sourcePort(pathAnalyzerTestProtocolParametersSourcePort)
 *                 .build())
 *             .queryOptions(PathAnalyzerTestQueryOptionsArgs.builder()
 *                 .isBiDirectionalAnalysis(pathAnalyzerTestQueryOptionsIsBiDirectionalAnalysis)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * PathAnalyzerTests can be imported using the `id`, e.g.
 * 
 * ```sh
 * $ pulumi import oci:VnMonitoring/pathAnalyzerTest:PathAnalyzerTest test_path_analyzer_test &#34;id&#34;
 * ```
 * 
 */
@ResourceType(type="oci:VnMonitoring/pathAnalyzerTest:PathAnalyzerTest")
public class PathAnalyzerTest extends com.pulumi.resources.CustomResource {
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the `PathAnalyzerTest` resource&#39;s compartment.
     * 
     */
    @Export(name="compartmentId", refs={String.class}, tree="[0]")
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the `PathAnalyzerTest` resource&#39;s compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="definedTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Map<String,Object>> definedTags() {
        return this.definedTags;
    }
    /**
     * (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    @Export(name="destinationEndpoint", refs={PathAnalyzerTestDestinationEndpoint.class}, tree="[0]")
    private Output<PathAnalyzerTestDestinationEndpoint> destinationEndpoint;

    /**
     * @return (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    public Output<PathAnalyzerTestDestinationEndpoint> destinationEndpoint() {
        return this.destinationEndpoint;
    }
    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Export(name="freeformTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Output<Map<String,Object>> freeformTags() {
        return this.freeformTags;
    }
    /**
     * (Updatable) The IP protocol to use in the `PathAnalyzerTest` resource.
     * 
     */
    @Export(name="protocol", refs={Integer.class}, tree="[0]")
    private Output<Integer> protocol;

    /**
     * @return (Updatable) The IP protocol to use in the `PathAnalyzerTest` resource.
     * 
     */
    public Output<Integer> protocol() {
        return this.protocol;
    }
    /**
     * (Updatable) Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
     * 
     */
    @Export(name="protocolParameters", refs={PathAnalyzerTestProtocolParameters.class}, tree="[0]")
    private Output<PathAnalyzerTestProtocolParameters> protocolParameters;

    /**
     * @return (Updatable) Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
     * 
     */
    public Output<PathAnalyzerTestProtocolParameters> protocolParameters() {
        return this.protocolParameters;
    }
    /**
     * (Updatable) Defines the query options required for a `PathAnalyzerTest` resource.
     * 
     */
    @Export(name="queryOptions", refs={PathAnalyzerTestQueryOptions.class}, tree="[0]")
    private Output<PathAnalyzerTestQueryOptions> queryOptions;

    /**
     * @return (Updatable) Defines the query options required for a `PathAnalyzerTest` resource.
     * 
     */
    public Output<PathAnalyzerTestQueryOptions> queryOptions() {
        return this.queryOptions;
    }
    /**
     * (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    @Export(name="sourceEndpoint", refs={PathAnalyzerTestSourceEndpoint.class}, tree="[0]")
    private Output<PathAnalyzerTestSourceEndpoint> sourceEndpoint;

    /**
     * @return (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    public Output<PathAnalyzerTestSourceEndpoint> sourceEndpoint() {
        return this.sourceEndpoint;
    }
    /**
     * The current state of the `PathAnalyzerTest` resource.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current state of the `PathAnalyzerTest` resource.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    @Export(name="systemTags", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> systemTags;

    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Output<Map<String,Object>> systemTags() {
        return this.systemTags;
    }
    /**
     * The date and time the `PathAnalyzerTest` resource was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Export(name="timeCreated", refs={String.class}, tree="[0]")
    private Output<String> timeCreated;

    /**
     * @return The date and time the `PathAnalyzerTest` resource was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Output<String> timeCreated() {
        return this.timeCreated;
    }
    /**
     * The date and time the `PathAnalyzerTest` resource was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    @Export(name="timeUpdated", refs={String.class}, tree="[0]")
    private Output<String> timeUpdated;

    /**
     * @return The date and time the `PathAnalyzerTest` resource was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public Output<String> timeUpdated() {
        return this.timeUpdated;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PathAnalyzerTest(String name) {
        this(name, PathAnalyzerTestArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PathAnalyzerTest(String name, PathAnalyzerTestArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PathAnalyzerTest(String name, PathAnalyzerTestArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:VnMonitoring/pathAnalyzerTest:PathAnalyzerTest", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private PathAnalyzerTest(String name, Output<String> id, @Nullable PathAnalyzerTestState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("oci:VnMonitoring/pathAnalyzerTest:PathAnalyzerTest", name, state, makeResourceOptions(options, id));
    }

    private static PathAnalyzerTestArgs makeArgs(PathAnalyzerTestArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? PathAnalyzerTestArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PathAnalyzerTest get(String name, Output<String> id, @Nullable PathAnalyzerTestState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PathAnalyzerTest(name, id, state, options);
    }
}
