// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VnMonitoring;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.VnMonitoring.inputs.PathAnalyzerTestDestinationEndpointArgs;
import com.pulumi.oci.VnMonitoring.inputs.PathAnalyzerTestProtocolParametersArgs;
import com.pulumi.oci.VnMonitoring.inputs.PathAnalyzerTestQueryOptionsArgs;
import com.pulumi.oci.VnMonitoring.inputs.PathAnalyzerTestSourceEndpointArgs;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PathAnalyzerTestArgs extends com.pulumi.resources.ResourceArgs {

    public static final PathAnalyzerTestArgs Empty = new PathAnalyzerTestArgs();

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the `PathAnalyzerTest` resource&#39;s compartment.
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the `PathAnalyzerTest` resource&#39;s compartment.
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="definedTags")
    private @Nullable Output<Map<String,Object>> definedTags;

    /**
     * @return (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> definedTags() {
        return Optional.ofNullable(this.definedTags);
    }

    /**
     * (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    @Import(name="destinationEndpoint", required=true)
    private Output<PathAnalyzerTestDestinationEndpointArgs> destinationEndpoint;

    /**
     * @return (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    public Output<PathAnalyzerTestDestinationEndpointArgs> destinationEndpoint() {
        return this.destinationEndpoint;
    }

    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    @Import(name="freeformTags")
    private @Nullable Output<Map<String,Object>> freeformTags;

    /**
     * @return (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Optional<Output<Map<String,Object>>> freeformTags() {
        return Optional.ofNullable(this.freeformTags);
    }

    /**
     * (Updatable) The IP protocol to use in the `PathAnalyzerTest` resource.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<Integer> protocol;

    /**
     * @return (Updatable) The IP protocol to use in the `PathAnalyzerTest` resource.
     * 
     */
    public Output<Integer> protocol() {
        return this.protocol;
    }

    /**
     * (Updatable) Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
     * 
     */
    @Import(name="protocolParameters")
    private @Nullable Output<PathAnalyzerTestProtocolParametersArgs> protocolParameters;

    /**
     * @return (Updatable) Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
     * 
     */
    public Optional<Output<PathAnalyzerTestProtocolParametersArgs>> protocolParameters() {
        return Optional.ofNullable(this.protocolParameters);
    }

    /**
     * (Updatable) Defines the query options required for a `PathAnalyzerTest` resource.
     * 
     */
    @Import(name="queryOptions")
    private @Nullable Output<PathAnalyzerTestQueryOptionsArgs> queryOptions;

    /**
     * @return (Updatable) Defines the query options required for a `PathAnalyzerTest` resource.
     * 
     */
    public Optional<Output<PathAnalyzerTestQueryOptionsArgs>> queryOptions() {
        return Optional.ofNullable(this.queryOptions);
    }

    /**
     * (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    @Import(name="sourceEndpoint", required=true)
    private Output<PathAnalyzerTestSourceEndpointArgs> sourceEndpoint;

    /**
     * @return (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    public Output<PathAnalyzerTestSourceEndpointArgs> sourceEndpoint() {
        return this.sourceEndpoint;
    }

    private PathAnalyzerTestArgs() {}

    private PathAnalyzerTestArgs(PathAnalyzerTestArgs $) {
        this.compartmentId = $.compartmentId;
        this.definedTags = $.definedTags;
        this.destinationEndpoint = $.destinationEndpoint;
        this.displayName = $.displayName;
        this.freeformTags = $.freeformTags;
        this.protocol = $.protocol;
        this.protocolParameters = $.protocolParameters;
        this.queryOptions = $.queryOptions;
        this.sourceEndpoint = $.sourceEndpoint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PathAnalyzerTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PathAnalyzerTestArgs $;

        public Builder() {
            $ = new PathAnalyzerTestArgs();
        }

        public Builder(PathAnalyzerTestArgs defaults) {
            $ = new PathAnalyzerTestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the `PathAnalyzerTest` resource&#39;s compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the `PathAnalyzerTest` resource&#39;s compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(@Nullable Output<Map<String,Object>> definedTags) {
            $.definedTags = definedTags;
            return this;
        }

        /**
         * @param definedTags (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder definedTags(Map<String,Object> definedTags) {
            return definedTags(Output.of(definedTags));
        }

        /**
         * @param destinationEndpoint (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
         * 
         * @return builder
         * 
         */
        public Builder destinationEndpoint(Output<PathAnalyzerTestDestinationEndpointArgs> destinationEndpoint) {
            $.destinationEndpoint = destinationEndpoint;
            return this;
        }

        /**
         * @param destinationEndpoint (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
         * 
         * @return builder
         * 
         */
        public Builder destinationEndpoint(PathAnalyzerTestDestinationEndpointArgs destinationEndpoint) {
            return destinationEndpoint(Output.of(destinationEndpoint));
        }

        /**
         * @param displayName (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName (Updatable) A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(@Nullable Output<Map<String,Object>> freeformTags) {
            $.freeformTags = freeformTags;
            return this;
        }

        /**
         * @param freeformTags (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
         * 
         * @return builder
         * 
         */
        public Builder freeformTags(Map<String,Object> freeformTags) {
            return freeformTags(Output.of(freeformTags));
        }

        /**
         * @param protocol (Updatable) The IP protocol to use in the `PathAnalyzerTest` resource.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<Integer> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol (Updatable) The IP protocol to use in the `PathAnalyzerTest` resource.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Integer protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param protocolParameters (Updatable) Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
         * 
         * @return builder
         * 
         */
        public Builder protocolParameters(@Nullable Output<PathAnalyzerTestProtocolParametersArgs> protocolParameters) {
            $.protocolParameters = protocolParameters;
            return this;
        }

        /**
         * @param protocolParameters (Updatable) Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
         * 
         * @return builder
         * 
         */
        public Builder protocolParameters(PathAnalyzerTestProtocolParametersArgs protocolParameters) {
            return protocolParameters(Output.of(protocolParameters));
        }

        /**
         * @param queryOptions (Updatable) Defines the query options required for a `PathAnalyzerTest` resource.
         * 
         * @return builder
         * 
         */
        public Builder queryOptions(@Nullable Output<PathAnalyzerTestQueryOptionsArgs> queryOptions) {
            $.queryOptions = queryOptions;
            return this;
        }

        /**
         * @param queryOptions (Updatable) Defines the query options required for a `PathAnalyzerTest` resource.
         * 
         * @return builder
         * 
         */
        public Builder queryOptions(PathAnalyzerTestQueryOptionsArgs queryOptions) {
            return queryOptions(Output.of(queryOptions));
        }

        /**
         * @param sourceEndpoint (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpoint(Output<PathAnalyzerTestSourceEndpointArgs> sourceEndpoint) {
            $.sourceEndpoint = sourceEndpoint;
            return this;
        }

        /**
         * @param sourceEndpoint (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
         * 
         * @return builder
         * 
         */
        public Builder sourceEndpoint(PathAnalyzerTestSourceEndpointArgs sourceEndpoint) {
            return sourceEndpoint(Output.of(sourceEndpoint));
        }

        public PathAnalyzerTestArgs build() {
            $.compartmentId = Objects.requireNonNull($.compartmentId, "expected parameter 'compartmentId' to be non-null");
            $.destinationEndpoint = Objects.requireNonNull($.destinationEndpoint, "expected parameter 'destinationEndpoint' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            $.sourceEndpoint = Objects.requireNonNull($.sourceEndpoint, "expected parameter 'sourceEndpoint' to be non-null");
            return $;
        }
    }

}
