// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VnMonitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PathAnalysiQueryOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PathAnalysiQueryOptionsArgs Empty = new PathAnalysiQueryOptionsArgs();

    /**
     * If true, a path analysis is done for both the forward and reverse routes.
     * 
     */
    @Import(name="isBiDirectionalAnalysis")
    private @Nullable Output<Boolean> isBiDirectionalAnalysis;

    /**
     * @return If true, a path analysis is done for both the forward and reverse routes.
     * 
     */
    public Optional<Output<Boolean>> isBiDirectionalAnalysis() {
        return Optional.ofNullable(this.isBiDirectionalAnalysis);
    }

    private PathAnalysiQueryOptionsArgs() {}

    private PathAnalysiQueryOptionsArgs(PathAnalysiQueryOptionsArgs $) {
        this.isBiDirectionalAnalysis = $.isBiDirectionalAnalysis;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PathAnalysiQueryOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PathAnalysiQueryOptionsArgs $;

        public Builder() {
            $ = new PathAnalysiQueryOptionsArgs();
        }

        public Builder(PathAnalysiQueryOptionsArgs defaults) {
            $ = new PathAnalysiQueryOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isBiDirectionalAnalysis If true, a path analysis is done for both the forward and reverse routes.
         * 
         * @return builder
         * 
         */
        public Builder isBiDirectionalAnalysis(@Nullable Output<Boolean> isBiDirectionalAnalysis) {
            $.isBiDirectionalAnalysis = isBiDirectionalAnalysis;
            return this;
        }

        /**
         * @param isBiDirectionalAnalysis If true, a path analysis is done for both the forward and reverse routes.
         * 
         * @return builder
         * 
         */
        public Builder isBiDirectionalAnalysis(Boolean isBiDirectionalAnalysis) {
            return isBiDirectionalAnalysis(Output.of(isBiDirectionalAnalysis));
        }

        public PathAnalysiQueryOptionsArgs build() {
            return $;
        }
    }

}
