// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VnMonitoring.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PathAnalyzerTestProtocolParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final PathAnalyzerTestProtocolParametersArgs Empty = new PathAnalyzerTestProtocolParametersArgs();

    /**
     * (Updatable) The destination port to use in a `PathAnalyzerTest` resource.
     * 
     */
    @Import(name="destinationPort")
    private @Nullable Output<Integer> destinationPort;

    /**
     * @return (Updatable) The destination port to use in a `PathAnalyzerTest` resource.
     * 
     */
    public Optional<Output<Integer>> destinationPort() {
        return Optional.ofNullable(this.destinationPort);
    }

    /**
     * (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
     * 
     */
    @Import(name="icmpCode")
    private @Nullable Output<Integer> icmpCode;

    /**
     * @return (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
     * 
     */
    public Optional<Output<Integer>> icmpCode() {
        return Optional.ofNullable(this.icmpCode);
    }

    /**
     * (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
     * 
     */
    @Import(name="icmpType")
    private @Nullable Output<Integer> icmpType;

    /**
     * @return (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
     * 
     */
    public Optional<Output<Integer>> icmpType() {
        return Optional.ofNullable(this.icmpType);
    }

    /**
     * (Updatable) The source port to use in a `PathAnalyzerTest` resource.
     * 
     */
    @Import(name="sourcePort")
    private @Nullable Output<Integer> sourcePort;

    /**
     * @return (Updatable) The source port to use in a `PathAnalyzerTest` resource.
     * 
     */
    public Optional<Output<Integer>> sourcePort() {
        return Optional.ofNullable(this.sourcePort);
    }

    /**
     * (Updatable) The type of the `Endpoint`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Updatable) The type of the `Endpoint`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private PathAnalyzerTestProtocolParametersArgs() {}

    private PathAnalyzerTestProtocolParametersArgs(PathAnalyzerTestProtocolParametersArgs $) {
        this.destinationPort = $.destinationPort;
        this.icmpCode = $.icmpCode;
        this.icmpType = $.icmpType;
        this.sourcePort = $.sourcePort;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PathAnalyzerTestProtocolParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PathAnalyzerTestProtocolParametersArgs $;

        public Builder() {
            $ = new PathAnalyzerTestProtocolParametersArgs();
        }

        public Builder(PathAnalyzerTestProtocolParametersArgs defaults) {
            $ = new PathAnalyzerTestProtocolParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationPort (Updatable) The destination port to use in a `PathAnalyzerTest` resource.
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(@Nullable Output<Integer> destinationPort) {
            $.destinationPort = destinationPort;
            return this;
        }

        /**
         * @param destinationPort (Updatable) The destination port to use in a `PathAnalyzerTest` resource.
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(Integer destinationPort) {
            return destinationPort(Output.of(destinationPort));
        }

        /**
         * @param icmpCode (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
         * 
         * @return builder
         * 
         */
        public Builder icmpCode(@Nullable Output<Integer> icmpCode) {
            $.icmpCode = icmpCode;
            return this;
        }

        /**
         * @param icmpCode (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
         * 
         * @return builder
         * 
         */
        public Builder icmpCode(Integer icmpCode) {
            return icmpCode(Output.of(icmpCode));
        }

        /**
         * @param icmpType (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
         * 
         * @return builder
         * 
         */
        public Builder icmpType(@Nullable Output<Integer> icmpType) {
            $.icmpType = icmpType;
            return this;
        }

        /**
         * @param icmpType (Updatable) The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
         * 
         * @return builder
         * 
         */
        public Builder icmpType(Integer icmpType) {
            return icmpType(Output.of(icmpType));
        }

        /**
         * @param sourcePort (Updatable) The source port to use in a `PathAnalyzerTest` resource.
         * 
         * @return builder
         * 
         */
        public Builder sourcePort(@Nullable Output<Integer> sourcePort) {
            $.sourcePort = sourcePort;
            return this;
        }

        /**
         * @param sourcePort (Updatable) The source port to use in a `PathAnalyzerTest` resource.
         * 
         * @return builder
         * 
         */
        public Builder sourcePort(Integer sourcePort) {
            return sourcePort(Output.of(sourcePort));
        }

        /**
         * @param type (Updatable) The type of the `Endpoint`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Updatable) The type of the `Endpoint`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public PathAnalyzerTestProtocolParametersArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("PathAnalyzerTestProtocolParametersArgs", "type");
            }
            return $;
        }
    }

}
