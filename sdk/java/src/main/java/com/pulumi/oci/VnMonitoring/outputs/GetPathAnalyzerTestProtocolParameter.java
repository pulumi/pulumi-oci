// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VnMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPathAnalyzerTestProtocolParameter {
    /**
     * @return The destination port to use in a `PathAnalyzerTest` resource.
     * 
     */
    private @Nullable Integer destinationPort;
    /**
     * @return The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
     * 
     */
    private @Nullable Integer icmpCode;
    /**
     * @return The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
     * 
     */
    private @Nullable Integer icmpType;
    /**
     * @return The source port to use in a `PathAnalyzerTest` resource.
     * 
     */
    private @Nullable Integer sourcePort;
    /**
     * @return The type of the `Endpoint`.
     * 
     */
    private @Nullable String type;

    private GetPathAnalyzerTestProtocolParameter() {}
    /**
     * @return The destination port to use in a `PathAnalyzerTest` resource.
     * 
     */
    public Optional<Integer> destinationPort() {
        return Optional.ofNullable(this.destinationPort);
    }
    /**
     * @return The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) code.
     * 
     */
    public Optional<Integer> icmpCode() {
        return Optional.ofNullable(this.icmpCode);
    }
    /**
     * @return The [ICMP](https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml) type.
     * 
     */
    public Optional<Integer> icmpType() {
        return Optional.ofNullable(this.icmpType);
    }
    /**
     * @return The source port to use in a `PathAnalyzerTest` resource.
     * 
     */
    public Optional<Integer> sourcePort() {
        return Optional.ofNullable(this.sourcePort);
    }
    /**
     * @return The type of the `Endpoint`.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPathAnalyzerTestProtocolParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer destinationPort;
        private @Nullable Integer icmpCode;
        private @Nullable Integer icmpType;
        private @Nullable Integer sourcePort;
        private @Nullable String type;
        public Builder() {}
        public Builder(GetPathAnalyzerTestProtocolParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationPort = defaults.destinationPort;
    	      this.icmpCode = defaults.icmpCode;
    	      this.icmpType = defaults.icmpType;
    	      this.sourcePort = defaults.sourcePort;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder destinationPort(@Nullable Integer destinationPort) {
            this.destinationPort = destinationPort;
            return this;
        }
        @CustomType.Setter
        public Builder icmpCode(@Nullable Integer icmpCode) {
            this.icmpCode = icmpCode;
            return this;
        }
        @CustomType.Setter
        public Builder icmpType(@Nullable Integer icmpType) {
            this.icmpType = icmpType;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePort(@Nullable Integer sourcePort) {
            this.sourcePort = sourcePort;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        public GetPathAnalyzerTestProtocolParameter build() {
            final var o = new GetPathAnalyzerTestProtocolParameter();
            o.destinationPort = destinationPort;
            o.icmpCode = icmpCode;
            o.icmpType = icmpType;
            o.sourcePort = sourcePort;
            o.type = type;
            return o;
        }
    }
}
