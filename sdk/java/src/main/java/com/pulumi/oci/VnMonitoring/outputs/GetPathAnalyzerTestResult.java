// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VnMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.VnMonitoring.outputs.GetPathAnalyzerTestDestinationEndpoint;
import com.pulumi.oci.VnMonitoring.outputs.GetPathAnalyzerTestProtocolParameter;
import com.pulumi.oci.VnMonitoring.outputs.GetPathAnalyzerTestQueryOption;
import com.pulumi.oci.VnMonitoring.outputs.GetPathAnalyzerTestSourceEndpoint;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetPathAnalyzerTestResult {
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource&#39;s compartment.
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    private List<GetPathAnalyzerTestDestinationEndpoint> destinationEndpoints;
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return A unique identifier established when the resource is created. The identifier can&#39;t be changed later.
     * 
     */
    private String id;
    private String pathAnalyzerTestId;
    /**
     * @return The IP protocol to use for the `PathAnalyzerTest` resource.
     * 
     */
    private Integer protocol;
    /**
     * @return Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
     * 
     */
    private List<GetPathAnalyzerTestProtocolParameter> protocolParameters;
    /**
     * @return Defines the query options required for a `PathAnalyzerTest` resource.
     * 
     */
    private List<GetPathAnalyzerTestQueryOption> queryOptions;
    /**
     * @return Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    private List<GetPathAnalyzerTestSourceEndpoint> sourceEndpoints;
    /**
     * @return The current state of the `PathAnalyzerTest` resource.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The date and time the `PathAnalyzerTest` resource was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the `PathAnalyzerTest` resource was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    private String timeUpdated;

    private GetPathAnalyzerTestResult() {}
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource&#39;s compartment.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    public List<GetPathAnalyzerTestDestinationEndpoint> destinationEndpoints() {
        return this.destinationEndpoints;
    }
    /**
     * @return A user-friendly name. Does not have to be unique, and it&#39;s changeable. Avoid entering confidential information.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return A unique identifier established when the resource is created. The identifier can&#39;t be changed later.
     * 
     */
    public String id() {
        return this.id;
    }
    public String pathAnalyzerTestId() {
        return this.pathAnalyzerTestId;
    }
    /**
     * @return The IP protocol to use for the `PathAnalyzerTest` resource.
     * 
     */
    public Integer protocol() {
        return this.protocol;
    }
    /**
     * @return Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
     * 
     */
    public List<GetPathAnalyzerTestProtocolParameter> protocolParameters() {
        return this.protocolParameters;
    }
    /**
     * @return Defines the query options required for a `PathAnalyzerTest` resource.
     * 
     */
    public List<GetPathAnalyzerTestQueryOption> queryOptions() {
        return this.queryOptions;
    }
    /**
     * @return Information describing a source or destination in a `PathAnalyzerTest` resource.
     * 
     */
    public List<GetPathAnalyzerTestSourceEndpoint> sourceEndpoints() {
        return this.sourceEndpoints;
    }
    /**
     * @return The current state of the `PathAnalyzerTest` resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The date and time the `PathAnalyzerTest` resource was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the `PathAnalyzerTest` resource was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPathAnalyzerTestResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,String> definedTags;
        private List<GetPathAnalyzerTestDestinationEndpoint> destinationEndpoints;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private String pathAnalyzerTestId;
        private Integer protocol;
        private List<GetPathAnalyzerTestProtocolParameter> protocolParameters;
        private List<GetPathAnalyzerTestQueryOption> queryOptions;
        private List<GetPathAnalyzerTestSourceEndpoint> sourceEndpoints;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetPathAnalyzerTestResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.destinationEndpoints = defaults.destinationEndpoints;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.pathAnalyzerTestId = defaults.pathAnalyzerTestId;
    	      this.protocol = defaults.protocol;
    	      this.protocolParameters = defaults.protocolParameters;
    	      this.queryOptions = defaults.queryOptions;
    	      this.sourceEndpoints = defaults.sourceEndpoints;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder destinationEndpoints(List<GetPathAnalyzerTestDestinationEndpoint> destinationEndpoints) {
            if (destinationEndpoints == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestResult", "destinationEndpoints");
            }
            this.destinationEndpoints = destinationEndpoints;
            return this;
        }
        public Builder destinationEndpoints(GetPathAnalyzerTestDestinationEndpoint... destinationEndpoints) {
            return destinationEndpoints(List.of(destinationEndpoints));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder pathAnalyzerTestId(String pathAnalyzerTestId) {
            if (pathAnalyzerTestId == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestResult", "pathAnalyzerTestId");
            }
            this.pathAnalyzerTestId = pathAnalyzerTestId;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(Integer protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder protocolParameters(List<GetPathAnalyzerTestProtocolParameter> protocolParameters) {
            if (protocolParameters == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestResult", "protocolParameters");
            }
            this.protocolParameters = protocolParameters;
            return this;
        }
        public Builder protocolParameters(GetPathAnalyzerTestProtocolParameter... protocolParameters) {
            return protocolParameters(List.of(protocolParameters));
        }
        @CustomType.Setter
        public Builder queryOptions(List<GetPathAnalyzerTestQueryOption> queryOptions) {
            if (queryOptions == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestResult", "queryOptions");
            }
            this.queryOptions = queryOptions;
            return this;
        }
        public Builder queryOptions(GetPathAnalyzerTestQueryOption... queryOptions) {
            return queryOptions(List.of(queryOptions));
        }
        @CustomType.Setter
        public Builder sourceEndpoints(List<GetPathAnalyzerTestSourceEndpoint> sourceEndpoints) {
            if (sourceEndpoints == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestResult", "sourceEndpoints");
            }
            this.sourceEndpoints = sourceEndpoints;
            return this;
        }
        public Builder sourceEndpoints(GetPathAnalyzerTestSourceEndpoint... sourceEndpoints) {
            return sourceEndpoints(List.of(sourceEndpoints));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetPathAnalyzerTestResult build() {
            final var _resultValue = new GetPathAnalyzerTestResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.destinationEndpoints = destinationEndpoints;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.pathAnalyzerTestId = pathAnalyzerTestId;
            _resultValue.protocol = protocol;
            _resultValue.protocolParameters = protocolParameters;
            _resultValue.queryOptions = queryOptions;
            _resultValue.sourceEndpoints = sourceEndpoints;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
