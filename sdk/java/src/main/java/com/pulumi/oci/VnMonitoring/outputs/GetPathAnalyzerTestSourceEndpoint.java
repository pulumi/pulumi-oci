// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VnMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPathAnalyzerTestSourceEndpoint {
    /**
     * @return The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
     * 
     */
    private String address;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
     * 
     */
    private String instanceId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
     * 
     */
    private String listenerId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener&#39;s load balancer.
     * 
     */
    private String loadBalancerId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener&#39;s network load balancer.
     * 
     */
    private String networkLoadBalancerId;
    /**
     * @return The current state of the `PathAnalyzerTest` resource.
     * 
     */
    private String state;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
     * 
     */
    private String subnetId;
    /**
     * @return The type of the `Endpoint`.
     * 
     */
    private String type;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
     * 
     */
    private String vlanId;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
     * 
     */
    private String vnicId;

    private GetPathAnalyzerTestSourceEndpoint() {}
    /**
     * @return The IPv4 address of the COMPUTE_INSTANCE-type `Endpoint` object.
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance.
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer listener.
     * 
     */
    public String listenerId() {
        return this.listenerId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener&#39;s load balancer.
     * 
     */
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the listener&#39;s network load balancer.
     * 
     */
    public String networkLoadBalancerId() {
        return this.networkLoadBalancerId;
    }
    /**
     * @return The current state of the `PathAnalyzerTest` resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet containing the IP address. This can be used to disambiguate which subnet is intended, in case the IP address is used in more than one subnet (when there are subnets with overlapping IP ranges).
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return The type of the `Endpoint`.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN containing the IP address. This can be used to disambiguate which VLAN is queried, in case the endpoint IP address belongs to more than one VLAN (when there are VLANs with overlapping IP ranges).
     * 
     */
    public String vlanId() {
        return this.vlanId;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VNIC attached to the compute instance.
     * 
     */
    public String vnicId() {
        return this.vnicId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPathAnalyzerTestSourceEndpoint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private String instanceId;
        private String listenerId;
        private String loadBalancerId;
        private String networkLoadBalancerId;
        private String state;
        private String subnetId;
        private String type;
        private String vlanId;
        private String vnicId;
        public Builder() {}
        public Builder(GetPathAnalyzerTestSourceEndpoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.instanceId = defaults.instanceId;
    	      this.listenerId = defaults.listenerId;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.networkLoadBalancerId = defaults.networkLoadBalancerId;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.type = defaults.type;
    	      this.vlanId = defaults.vlanId;
    	      this.vnicId = defaults.vnicId;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestSourceEndpoint", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestSourceEndpoint", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder listenerId(String listenerId) {
            if (listenerId == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestSourceEndpoint", "listenerId");
            }
            this.listenerId = listenerId;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerId(String loadBalancerId) {
            if (loadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestSourceEndpoint", "loadBalancerId");
            }
            this.loadBalancerId = loadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder networkLoadBalancerId(String networkLoadBalancerId) {
            if (networkLoadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestSourceEndpoint", "networkLoadBalancerId");
            }
            this.networkLoadBalancerId = networkLoadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestSourceEndpoint", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestSourceEndpoint", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestSourceEndpoint", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vlanId(String vlanId) {
            if (vlanId == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestSourceEndpoint", "vlanId");
            }
            this.vlanId = vlanId;
            return this;
        }
        @CustomType.Setter
        public Builder vnicId(String vnicId) {
            if (vnicId == null) {
              throw new MissingRequiredPropertyException("GetPathAnalyzerTestSourceEndpoint", "vnicId");
            }
            this.vnicId = vnicId;
            return this;
        }
        public GetPathAnalyzerTestSourceEndpoint build() {
            final var _resultValue = new GetPathAnalyzerTestSourceEndpoint();
            _resultValue.address = address;
            _resultValue.instanceId = instanceId;
            _resultValue.listenerId = listenerId;
            _resultValue.loadBalancerId = loadBalancerId;
            _resultValue.networkLoadBalancerId = networkLoadBalancerId;
            _resultValue.state = state;
            _resultValue.subnetId = subnetId;
            _resultValue.type = type;
            _resultValue.vlanId = vlanId;
            _resultValue.vnicId = vnicId;
            return _resultValue;
        }
    }
}
