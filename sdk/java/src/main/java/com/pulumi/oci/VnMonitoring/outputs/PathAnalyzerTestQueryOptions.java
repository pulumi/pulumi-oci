// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VnMonitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PathAnalyzerTestQueryOptions {
    /**
     * @return (Updatable) If true, a path analysis is done for both the forward and reverse routes.
     * 
     */
    private final @Nullable Boolean isBiDirectionalAnalysis;

    @CustomType.Constructor
    private PathAnalyzerTestQueryOptions(@CustomType.Parameter("isBiDirectionalAnalysis") @Nullable Boolean isBiDirectionalAnalysis) {
        this.isBiDirectionalAnalysis = isBiDirectionalAnalysis;
    }

    /**
     * @return (Updatable) If true, a path analysis is done for both the forward and reverse routes.
     * 
     */
    public Optional<Boolean> isBiDirectionalAnalysis() {
        return Optional.ofNullable(this.isBiDirectionalAnalysis);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PathAnalyzerTestQueryOptions defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean isBiDirectionalAnalysis;

        public Builder() {
    	      // Empty
        }

        public Builder(PathAnalyzerTestQueryOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isBiDirectionalAnalysis = defaults.isBiDirectionalAnalysis;
        }

        public Builder isBiDirectionalAnalysis(@Nullable Boolean isBiDirectionalAnalysis) {
            this.isBiDirectionalAnalysis = isBiDirectionalAnalysis;
            return this;
        }        public PathAnalyzerTestQueryOptions build() {
            return new PathAnalyzerTestQueryOptions(isBiDirectionalAnalysis);
        }
    }
}
