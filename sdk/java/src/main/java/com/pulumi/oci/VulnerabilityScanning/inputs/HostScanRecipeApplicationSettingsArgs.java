// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VulnerabilityScanning.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.VulnerabilityScanning.inputs.HostScanRecipeApplicationSettingsFoldersToScanArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class HostScanRecipeApplicationSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostScanRecipeApplicationSettingsArgs Empty = new HostScanRecipeApplicationSettingsArgs();

    /**
     * (Updatable) Scan recurrences in RFC-5545 section 3.3.10 format. Only supported input are weekly, biweekly, monthly listed below FREQ=WEEKLY;WKST=&lt;weekday&gt;;INTERVAL=1 - This weekly scan on the specified weekday (e.g. SU for Sunday) FREQ=WEEKLY;WKST=&lt;weekday&gt;;INTERVAL=2 - This bi-weekly scan on the specified weekday (e.g. SU for Sunday) FREQ=MONTHLY;WKST=&lt;weekday&gt;;INTERVAL=1 - This monthly scan on the specified weekday (e.g. SU for Sunday, starting from the next such weekday based on the time of setting creation)
     * 
     */
    @Import(name="applicationScanRecurrence", required=true)
    private Output<String> applicationScanRecurrence;

    /**
     * @return (Updatable) Scan recurrences in RFC-5545 section 3.3.10 format. Only supported input are weekly, biweekly, monthly listed below FREQ=WEEKLY;WKST=&lt;weekday&gt;;INTERVAL=1 - This weekly scan on the specified weekday (e.g. SU for Sunday) FREQ=WEEKLY;WKST=&lt;weekday&gt;;INTERVAL=2 - This bi-weekly scan on the specified weekday (e.g. SU for Sunday) FREQ=MONTHLY;WKST=&lt;weekday&gt;;INTERVAL=1 - This monthly scan on the specified weekday (e.g. SU for Sunday, starting from the next such weekday based on the time of setting creation)
     * 
     */
    public Output<String> applicationScanRecurrence() {
        return this.applicationScanRecurrence;
    }

    /**
     * (Updatable) List of folders selected for scanning
     * 
     */
    @Import(name="foldersToScans", required=true)
    private Output<List<HostScanRecipeApplicationSettingsFoldersToScanArgs>> foldersToScans;

    /**
     * @return (Updatable) List of folders selected for scanning
     * 
     */
    public Output<List<HostScanRecipeApplicationSettingsFoldersToScanArgs>> foldersToScans() {
        return this.foldersToScans;
    }

    /**
     * (Updatable) Enable or disable application scan
     * 
     */
    @Import(name="isEnabled", required=true)
    private Output<Boolean> isEnabled;

    /**
     * @return (Updatable) Enable or disable application scan
     * 
     */
    public Output<Boolean> isEnabled() {
        return this.isEnabled;
    }

    private HostScanRecipeApplicationSettingsArgs() {}

    private HostScanRecipeApplicationSettingsArgs(HostScanRecipeApplicationSettingsArgs $) {
        this.applicationScanRecurrence = $.applicationScanRecurrence;
        this.foldersToScans = $.foldersToScans;
        this.isEnabled = $.isEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostScanRecipeApplicationSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostScanRecipeApplicationSettingsArgs $;

        public Builder() {
            $ = new HostScanRecipeApplicationSettingsArgs();
        }

        public Builder(HostScanRecipeApplicationSettingsArgs defaults) {
            $ = new HostScanRecipeApplicationSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationScanRecurrence (Updatable) Scan recurrences in RFC-5545 section 3.3.10 format. Only supported input are weekly, biweekly, monthly listed below FREQ=WEEKLY;WKST=&lt;weekday&gt;;INTERVAL=1 - This weekly scan on the specified weekday (e.g. SU for Sunday) FREQ=WEEKLY;WKST=&lt;weekday&gt;;INTERVAL=2 - This bi-weekly scan on the specified weekday (e.g. SU for Sunday) FREQ=MONTHLY;WKST=&lt;weekday&gt;;INTERVAL=1 - This monthly scan on the specified weekday (e.g. SU for Sunday, starting from the next such weekday based on the time of setting creation)
         * 
         * @return builder
         * 
         */
        public Builder applicationScanRecurrence(Output<String> applicationScanRecurrence) {
            $.applicationScanRecurrence = applicationScanRecurrence;
            return this;
        }

        /**
         * @param applicationScanRecurrence (Updatable) Scan recurrences in RFC-5545 section 3.3.10 format. Only supported input are weekly, biweekly, monthly listed below FREQ=WEEKLY;WKST=&lt;weekday&gt;;INTERVAL=1 - This weekly scan on the specified weekday (e.g. SU for Sunday) FREQ=WEEKLY;WKST=&lt;weekday&gt;;INTERVAL=2 - This bi-weekly scan on the specified weekday (e.g. SU for Sunday) FREQ=MONTHLY;WKST=&lt;weekday&gt;;INTERVAL=1 - This monthly scan on the specified weekday (e.g. SU for Sunday, starting from the next such weekday based on the time of setting creation)
         * 
         * @return builder
         * 
         */
        public Builder applicationScanRecurrence(String applicationScanRecurrence) {
            return applicationScanRecurrence(Output.of(applicationScanRecurrence));
        }

        /**
         * @param foldersToScans (Updatable) List of folders selected for scanning
         * 
         * @return builder
         * 
         */
        public Builder foldersToScans(Output<List<HostScanRecipeApplicationSettingsFoldersToScanArgs>> foldersToScans) {
            $.foldersToScans = foldersToScans;
            return this;
        }

        /**
         * @param foldersToScans (Updatable) List of folders selected for scanning
         * 
         * @return builder
         * 
         */
        public Builder foldersToScans(List<HostScanRecipeApplicationSettingsFoldersToScanArgs> foldersToScans) {
            return foldersToScans(Output.of(foldersToScans));
        }

        /**
         * @param foldersToScans (Updatable) List of folders selected for scanning
         * 
         * @return builder
         * 
         */
        public Builder foldersToScans(HostScanRecipeApplicationSettingsFoldersToScanArgs... foldersToScans) {
            return foldersToScans(List.of(foldersToScans));
        }

        /**
         * @param isEnabled (Updatable) Enable or disable application scan
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled (Updatable) Enable or disable application scan
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        public HostScanRecipeApplicationSettingsArgs build() {
            if ($.applicationScanRecurrence == null) {
                throw new MissingRequiredPropertyException("HostScanRecipeApplicationSettingsArgs", "applicationScanRecurrence");
            }
            if ($.foldersToScans == null) {
                throw new MissingRequiredPropertyException("HostScanRecipeApplicationSettingsArgs", "foldersToScans");
            }
            if ($.isEnabled == null) {
                throw new MissingRequiredPropertyException("HostScanRecipeApplicationSettingsArgs", "isEnabled");
            }
            return $;
        }
    }

}
