// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VulnerabilityScanning.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistry {
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return List of repositories to scan images in. If left empty, the target defaults to scanning all repos in the compartmentId
     * 
     */
    private List<String> repositories;
    /**
     * @return The scan level
     * 
     */
    private String type;
    /**
     * @return URL of the registry.
     * 
     */
    private String url;

    private GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistry() {}
    /**
     * @return The ID of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return List of repositories to scan images in. If left empty, the target defaults to scanning all repos in the compartmentId
     * 
     */
    public List<String> repositories() {
        return this.repositories;
    }
    /**
     * @return The scan level
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return URL of the registry.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private List<String> repositories;
        private String type;
        private String url;
        public Builder() {}
        public Builder(GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.repositories = defaults.repositories;
    	      this.type = defaults.type;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistry", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder repositories(List<String> repositories) {
            if (repositories == null) {
              throw new MissingRequiredPropertyException("GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistry", "repositories");
            }
            this.repositories = repositories;
            return this;
        }
        public Builder repositories(String... repositories) {
            return repositories(List.of(repositories));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistry", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistry", "url");
            }
            this.url = url;
            return this;
        }
        public GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistry build() {
            final var _resultValue = new GetContainerScanTargetsContainerScanTargetSummaryCollectionItemTargetRegistry();
            _resultValue.compartmentId = compartmentId;
            _resultValue.repositories = repositories;
            _resultValue.type = type;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
