// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VulnerabilityScanning.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.VulnerabilityScanning.outputs.GetHostScanRecipeAgentSetting;
import com.pulumi.oci.VulnerabilityScanning.outputs.GetHostScanRecipeApplicationSetting;
import com.pulumi.oci.VulnerabilityScanning.outputs.GetHostScanRecipePortSetting;
import com.pulumi.oci.VulnerabilityScanning.outputs.GetHostScanRecipeSchedule;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetHostScanRecipeResult {
    /**
     * @return Agent scan settings for a host scan
     * 
     */
    private List<GetHostScanRecipeAgentSetting> agentSettings;
    /**
     * @return Agent scan settings for an application scan (as a part of a host scan)
     * 
     */
    private List<GetHostScanRecipeApplicationSetting> applicationSettings;
    /**
     * @return Compartment ID of the scan recipe
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return Recipe identifier, which can be renamed
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    private String hostScanRecipeId;
    /**
     * @return Unique identifier of the config that is immutable on creation
     * 
     */
    private String id;
    /**
     * @return Port scan settings for a host scan
     * 
     */
    private List<GetHostScanRecipePortSetting> portSettings;
    /**
     * @return A scanning schedule
     * 
     */
    private List<GetHostScanRecipeSchedule> schedules;
    /**
     * @return The current state of the config.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return Date and time the recipe was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    private String timeCreated;
    /**
     * @return Date and time the recipe was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    private String timeUpdated;

    private GetHostScanRecipeResult() {}
    /**
     * @return Agent scan settings for a host scan
     * 
     */
    public List<GetHostScanRecipeAgentSetting> agentSettings() {
        return this.agentSettings;
    }
    /**
     * @return Agent scan settings for an application scan (as a part of a host scan)
     * 
     */
    public List<GetHostScanRecipeApplicationSetting> applicationSettings() {
        return this.applicationSettings;
    }
    /**
     * @return Compartment ID of the scan recipe
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Recipe identifier, which can be renamed
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    public String hostScanRecipeId() {
        return this.hostScanRecipeId;
    }
    /**
     * @return Unique identifier of the config that is immutable on creation
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Port scan settings for a host scan
     * 
     */
    public List<GetHostScanRecipePortSetting> portSettings() {
        return this.portSettings;
    }
    /**
     * @return A scanning schedule
     * 
     */
    public List<GetHostScanRecipeSchedule> schedules() {
        return this.schedules;
    }
    /**
     * @return The current state of the config.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return Date and time the recipe was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Date and time the recipe was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHostScanRecipeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetHostScanRecipeAgentSetting> agentSettings;
        private List<GetHostScanRecipeApplicationSetting> applicationSettings;
        private String compartmentId;
        private Map<String,String> definedTags;
        private String displayName;
        private Map<String,String> freeformTags;
        private String hostScanRecipeId;
        private String id;
        private List<GetHostScanRecipePortSetting> portSettings;
        private List<GetHostScanRecipeSchedule> schedules;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetHostScanRecipeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentSettings = defaults.agentSettings;
    	      this.applicationSettings = defaults.applicationSettings;
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.hostScanRecipeId = defaults.hostScanRecipeId;
    	      this.id = defaults.id;
    	      this.portSettings = defaults.portSettings;
    	      this.schedules = defaults.schedules;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder agentSettings(List<GetHostScanRecipeAgentSetting> agentSettings) {
            if (agentSettings == null) {
              throw new MissingRequiredPropertyException("GetHostScanRecipeResult", "agentSettings");
            }
            this.agentSettings = agentSettings;
            return this;
        }
        public Builder agentSettings(GetHostScanRecipeAgentSetting... agentSettings) {
            return agentSettings(List.of(agentSettings));
        }
        @CustomType.Setter
        public Builder applicationSettings(List<GetHostScanRecipeApplicationSetting> applicationSettings) {
            if (applicationSettings == null) {
              throw new MissingRequiredPropertyException("GetHostScanRecipeResult", "applicationSettings");
            }
            this.applicationSettings = applicationSettings;
            return this;
        }
        public Builder applicationSettings(GetHostScanRecipeApplicationSetting... applicationSettings) {
            return applicationSettings(List.of(applicationSettings));
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetHostScanRecipeResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetHostScanRecipeResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetHostScanRecipeResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetHostScanRecipeResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder hostScanRecipeId(String hostScanRecipeId) {
            if (hostScanRecipeId == null) {
              throw new MissingRequiredPropertyException("GetHostScanRecipeResult", "hostScanRecipeId");
            }
            this.hostScanRecipeId = hostScanRecipeId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetHostScanRecipeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder portSettings(List<GetHostScanRecipePortSetting> portSettings) {
            if (portSettings == null) {
              throw new MissingRequiredPropertyException("GetHostScanRecipeResult", "portSettings");
            }
            this.portSettings = portSettings;
            return this;
        }
        public Builder portSettings(GetHostScanRecipePortSetting... portSettings) {
            return portSettings(List.of(portSettings));
        }
        @CustomType.Setter
        public Builder schedules(List<GetHostScanRecipeSchedule> schedules) {
            if (schedules == null) {
              throw new MissingRequiredPropertyException("GetHostScanRecipeResult", "schedules");
            }
            this.schedules = schedules;
            return this;
        }
        public Builder schedules(GetHostScanRecipeSchedule... schedules) {
            return schedules(List.of(schedules));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetHostScanRecipeResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetHostScanRecipeResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetHostScanRecipeResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetHostScanRecipeResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetHostScanRecipeResult build() {
            final var _resultValue = new GetHostScanRecipeResult();
            _resultValue.agentSettings = agentSettings;
            _resultValue.applicationSettings = applicationSettings;
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.hostScanRecipeId = hostScanRecipeId;
            _resultValue.id = id;
            _resultValue.portSettings = portSettings;
            _resultValue.schedules = schedules;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
