// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.VulnerabilityScanning.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetHostScanTargetResult {
    /**
     * @return Compartment ID of the object (this).
     * 
     */
    private String compartmentId;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> definedTags;
    /**
     * @return Target description.
     * 
     */
    private String description;
    /**
     * @return Target identifier, which can be renamed.
     * 
     */
    private String displayName;
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    private Map<String,Object> freeformTags;
    /**
     * @return ID of the host scan recipe this target applies.
     * 
     */
    private String hostScanRecipeId;
    private String hostScanTargetId;
    /**
     * @return Unique identifier of the config that is immutable on creation
     * 
     */
    private String id;
    /**
     * @return List of compute instance IDs to target (optional). If empty, targets the entire targetCompartmentId.
     * 
     */
    private List<String> instanceIds;
    /**
     * @return The current state of the config.
     * 
     */
    private String state;
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,Object> systemTags;
    /**
     * @return Compartment ID to target. If a list of hosts is provided, all hosts must be in this compartment.
     * 
     */
    private String targetCompartmentId;
    /**
     * @return Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    private String timeCreated;
    /**
     * @return Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    private String timeUpdated;

    private GetHostScanTargetResult() {}
    /**
     * @return Compartment ID of the object (this).
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{&#34;foo-namespace.bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> definedTags() {
        return this.definedTags;
    }
    /**
     * @return Target description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Target identifier, which can be renamed.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{&#34;bar-key&#34;: &#34;value&#34;}`
     * 
     */
    public Map<String,Object> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return ID of the host scan recipe this target applies.
     * 
     */
    public String hostScanRecipeId() {
        return this.hostScanRecipeId;
    }
    public String hostScanTargetId() {
        return this.hostScanTargetId;
    }
    /**
     * @return Unique identifier of the config that is immutable on creation
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of compute instance IDs to target (optional). If empty, targets the entire targetCompartmentId.
     * 
     */
    public List<String> instanceIds() {
        return this.instanceIds;
    }
    /**
     * @return The current state of the config.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,Object> systemTags() {
        return this.systemTags;
    }
    /**
     * @return Compartment ID to target. If a list of hosts is provided, all hosts must be in this compartment.
     * 
     */
    public String targetCompartmentId() {
        return this.targetCompartmentId;
    }
    /**
     * @return Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHostScanTargetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String compartmentId;
        private Map<String,Object> definedTags;
        private String description;
        private String displayName;
        private Map<String,Object> freeformTags;
        private String hostScanRecipeId;
        private String hostScanTargetId;
        private String id;
        private List<String> instanceIds;
        private String state;
        private Map<String,Object> systemTags;
        private String targetCompartmentId;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetHostScanTargetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compartmentId = defaults.compartmentId;
    	      this.definedTags = defaults.definedTags;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.hostScanRecipeId = defaults.hostScanRecipeId;
    	      this.hostScanTargetId = defaults.hostScanTargetId;
    	      this.id = defaults.id;
    	      this.instanceIds = defaults.instanceIds;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.targetCompartmentId = defaults.targetCompartmentId;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetHostScanTargetResult", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,Object> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetHostScanTargetResult", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetHostScanTargetResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetHostScanTargetResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,Object> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetHostScanTargetResult", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder hostScanRecipeId(String hostScanRecipeId) {
            if (hostScanRecipeId == null) {
              throw new MissingRequiredPropertyException("GetHostScanTargetResult", "hostScanRecipeId");
            }
            this.hostScanRecipeId = hostScanRecipeId;
            return this;
        }
        @CustomType.Setter
        public Builder hostScanTargetId(String hostScanTargetId) {
            if (hostScanTargetId == null) {
              throw new MissingRequiredPropertyException("GetHostScanTargetResult", "hostScanTargetId");
            }
            this.hostScanTargetId = hostScanTargetId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetHostScanTargetResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceIds(List<String> instanceIds) {
            if (instanceIds == null) {
              throw new MissingRequiredPropertyException("GetHostScanTargetResult", "instanceIds");
            }
            this.instanceIds = instanceIds;
            return this;
        }
        public Builder instanceIds(String... instanceIds) {
            return instanceIds(List.of(instanceIds));
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetHostScanTargetResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,Object> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetHostScanTargetResult", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder targetCompartmentId(String targetCompartmentId) {
            if (targetCompartmentId == null) {
              throw new MissingRequiredPropertyException("GetHostScanTargetResult", "targetCompartmentId");
            }
            this.targetCompartmentId = targetCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetHostScanTargetResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetHostScanTargetResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetHostScanTargetResult build() {
            final var _resultValue = new GetHostScanTargetResult();
            _resultValue.compartmentId = compartmentId;
            _resultValue.definedTags = definedTags;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.hostScanRecipeId = hostScanRecipeId;
            _resultValue.hostScanTargetId = hostScanTargetId;
            _resultValue.id = id;
            _resultValue.instanceIds = instanceIds;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.targetCompartmentId = targetCompartmentId;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
