// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waa.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AppAccelerationPolicyResponseCachingPolicy {
    /**
     * @return (Updatable) When false, responses will not be cached by the backend based on response headers.
     * 
     * When true, responses that contain one of the supported cache control headers will be cached according to the values specified in the cache control headers.
     * 
     * The &#34;X-Accel-Expires&#34; header field sets caching time of a response in seconds. The zero value disables caching for a response. If the value starts with the @ prefix, it sets an absolute time in seconds since Epoch, up to which the response may be cached.
     * 
     * If the header does not include the &#34;X-Accel-Expires&#34; field, parameters of caching may be set in the header fields &#34;Expires&#34; or &#34;Cache-Control&#34;.
     * 
     * If the header includes the &#34;Set-Cookie&#34; field, such a response will not be cached.
     * 
     * If the header includes the &#34;Vary&#34; field with the special value &#34;*&#34;, such a response will not be cached. If the header includes the &#34;Vary&#34; field with another value, such a response will be cached taking into account the corresponding request header fields.
     * 
     */
    private @Nullable Boolean isResponseHeaderBasedCachingEnabled;

    private AppAccelerationPolicyResponseCachingPolicy() {}
    /**
     * @return (Updatable) When false, responses will not be cached by the backend based on response headers.
     * 
     * When true, responses that contain one of the supported cache control headers will be cached according to the values specified in the cache control headers.
     * 
     * The &#34;X-Accel-Expires&#34; header field sets caching time of a response in seconds. The zero value disables caching for a response. If the value starts with the @ prefix, it sets an absolute time in seconds since Epoch, up to which the response may be cached.
     * 
     * If the header does not include the &#34;X-Accel-Expires&#34; field, parameters of caching may be set in the header fields &#34;Expires&#34; or &#34;Cache-Control&#34;.
     * 
     * If the header includes the &#34;Set-Cookie&#34; field, such a response will not be cached.
     * 
     * If the header includes the &#34;Vary&#34; field with the special value &#34;*&#34;, such a response will not be cached. If the header includes the &#34;Vary&#34; field with another value, such a response will be cached taking into account the corresponding request header fields.
     * 
     */
    public Optional<Boolean> isResponseHeaderBasedCachingEnabled() {
        return Optional.ofNullable(this.isResponseHeaderBasedCachingEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AppAccelerationPolicyResponseCachingPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean isResponseHeaderBasedCachingEnabled;
        public Builder() {}
        public Builder(AppAccelerationPolicyResponseCachingPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isResponseHeaderBasedCachingEnabled = defaults.isResponseHeaderBasedCachingEnabled;
        }

        @CustomType.Setter
        public Builder isResponseHeaderBasedCachingEnabled(@Nullable Boolean isResponseHeaderBasedCachingEnabled) {
            this.isResponseHeaderBasedCachingEnabled = isResponseHeaderBasedCachingEnabled;
            return this;
        }
        public AppAccelerationPolicyResponseCachingPolicy build() {
            final var o = new AppAccelerationPolicyResponseCachingPolicy();
            o.isResponseHeaderBasedCachingEnabled = isResponseHeaderBasedCachingEnabled;
            return o;
        }
    }
}
