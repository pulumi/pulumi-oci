// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCertificateIssuerName {
    /**
     * @return The fully qualified domain name used for DNS lookups of the server.
     * 
     */
    private String commonName;
    /**
     * @return ISO 3166-1 alpha-2 code of the country where the organization is located. For a list of codes, see [ISO&#39;s website](https://www.iso.org/obp/ui/#search/code/).
     * 
     */
    private String country;
    /**
     * @return The email address of the server&#39;s administrator.
     * 
     */
    private String emailAddress;
    /**
     * @return The city in which the organization is located.
     * 
     */
    private String locality;
    /**
     * @return The organization name.
     * 
     */
    private String organization;
    /**
     * @return The field to differentiate between divisions within an organization.
     * 
     */
    private String organizationalUnit;
    /**
     * @return The province where the organization is located.
     * 
     */
    private String stateProvince;

    private GetCertificateIssuerName() {}
    /**
     * @return The fully qualified domain name used for DNS lookups of the server.
     * 
     */
    public String commonName() {
        return this.commonName;
    }
    /**
     * @return ISO 3166-1 alpha-2 code of the country where the organization is located. For a list of codes, see [ISO&#39;s website](https://www.iso.org/obp/ui/#search/code/).
     * 
     */
    public String country() {
        return this.country;
    }
    /**
     * @return The email address of the server&#39;s administrator.
     * 
     */
    public String emailAddress() {
        return this.emailAddress;
    }
    /**
     * @return The city in which the organization is located.
     * 
     */
    public String locality() {
        return this.locality;
    }
    /**
     * @return The organization name.
     * 
     */
    public String organization() {
        return this.organization;
    }
    /**
     * @return The field to differentiate between divisions within an organization.
     * 
     */
    public String organizationalUnit() {
        return this.organizationalUnit;
    }
    /**
     * @return The province where the organization is located.
     * 
     */
    public String stateProvince() {
        return this.stateProvince;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateIssuerName defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String commonName;
        private String country;
        private String emailAddress;
        private String locality;
        private String organization;
        private String organizationalUnit;
        private String stateProvince;
        public Builder() {}
        public Builder(GetCertificateIssuerName defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commonName = defaults.commonName;
    	      this.country = defaults.country;
    	      this.emailAddress = defaults.emailAddress;
    	      this.locality = defaults.locality;
    	      this.organization = defaults.organization;
    	      this.organizationalUnit = defaults.organizationalUnit;
    	      this.stateProvince = defaults.stateProvince;
        }

        @CustomType.Setter
        public Builder commonName(String commonName) {
            if (commonName == null) {
              throw new MissingRequiredPropertyException("GetCertificateIssuerName", "commonName");
            }
            this.commonName = commonName;
            return this;
        }
        @CustomType.Setter
        public Builder country(String country) {
            if (country == null) {
              throw new MissingRequiredPropertyException("GetCertificateIssuerName", "country");
            }
            this.country = country;
            return this;
        }
        @CustomType.Setter
        public Builder emailAddress(String emailAddress) {
            if (emailAddress == null) {
              throw new MissingRequiredPropertyException("GetCertificateIssuerName", "emailAddress");
            }
            this.emailAddress = emailAddress;
            return this;
        }
        @CustomType.Setter
        public Builder locality(String locality) {
            if (locality == null) {
              throw new MissingRequiredPropertyException("GetCertificateIssuerName", "locality");
            }
            this.locality = locality;
            return this;
        }
        @CustomType.Setter
        public Builder organization(String organization) {
            if (organization == null) {
              throw new MissingRequiredPropertyException("GetCertificateIssuerName", "organization");
            }
            this.organization = organization;
            return this;
        }
        @CustomType.Setter
        public Builder organizationalUnit(String organizationalUnit) {
            if (organizationalUnit == null) {
              throw new MissingRequiredPropertyException("GetCertificateIssuerName", "organizationalUnit");
            }
            this.organizationalUnit = organizationalUnit;
            return this;
        }
        @CustomType.Setter
        public Builder stateProvince(String stateProvince) {
            if (stateProvince == null) {
              throw new MissingRequiredPropertyException("GetCertificateIssuerName", "stateProvince");
            }
            this.stateProvince = stateProvince;
            return this;
        }
        public GetCertificateIssuerName build() {
            final var _resultValue = new GetCertificateIssuerName();
            _resultValue.commonName = commonName;
            _resultValue.country = country;
            _resultValue.emailAddress = emailAddress;
            _resultValue.locality = locality;
            _resultValue.organization = organization;
            _resultValue.organizationalUnit = organizationalUnit;
            _resultValue.stateProvince = stateProvince;
            return _resultValue;
        }
    }
}
