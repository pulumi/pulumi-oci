// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waas.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetWaasPoliciesWaasPolicyPolicyConfigHealthCheck {
    /**
     * @return The HTTP response codes that signify a healthy state.
     * * **2XX:** Success response code group.
     * * **3XX:** Redirection response code group.
     * * **4XX:** Client errors response code group.
     * * **5XX:** Server errors response code group.
     * 
     */
    private List<String> expectedResponseCodeGroups;
    /**
     * @return Health check will search for the given text in a case-sensitive manner within the response body and will fail if the text is not found.
     * 
     */
    private String expectedResponseText;
    /**
     * @return HTTP header fields to include in health check requests, expressed as `&#34;name&#34;: &#34;value&#34;` properties. Because HTTP header field names are case-insensitive, any use of names that are case-insensitive equal to other names will be rejected. If Host is not specified, requests will include a Host header field with value matching the policy&#39;s protected domain. If User-Agent is not specified, requests will include a User-Agent header field with value &#34;waf health checks&#34;.
     * 
     */
    private Map<String,Object> headers;
    /**
     * @return Number of successful health checks after which the server is marked up.
     * 
     */
    private Integer healthyThreshold;
    /**
     * @return Time between health checks of an individual origin server, in seconds.
     * 
     */
    private Integer intervalInSeconds;
    /**
     * @return Enables or disables the JavaScript challenge Web Application Firewall feature.
     * 
     */
    private Boolean isEnabled;
    /**
     * @return Enables or disables additional check for predefined text in addition to response code.
     * 
     */
    private Boolean isResponseTextCheckEnabled;
    /**
     * @return Load balancing methods are algorithms used to efficiently distribute traffic among origin servers.
     * * **[IP_HASH](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/IPHashLoadBalancingMethod):** All the incoming requests from the same client IP address should go to the same content origination server. IP_HASH load balancing method uses origin weights when choosing which origin should the hash be assigned to initially.
     * * **[ROUND_ROBIN](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/RoundRobinLoadBalancingMethod):** Forwards requests sequentially to the available origin servers. The first request - to the first origin server, the second request - to the next origin server, and so on. After it sends a request to the last origin server, it starts again with the first origin server. When using weights on origins, Weighted Round Robin assigns more requests to origins with a greater weight. Over a period of time, origins will receive a number of requests in proportion to their weight.
     * * **[STICKY_COOKIE](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/StickyCookieLoadBalancingMethod):** Adds a session cookie to the first response from the origin server and identifies the server that sent the response. The client&#39;s next request contains the cookie value, and nginx routes the request to the origin server that responded to the first request. STICKY_COOKIE load balancing method falls back to Round Robin for the first request.
     * 
     */
    private String method;
    /**
     * @return Path to visit on your origins when performing the health check.
     * 
     */
    private String path;
    /**
     * @return Response timeout represents wait time until request is considered failed, in seconds.
     * 
     */
    private Integer timeoutInSeconds;
    /**
     * @return Number of failed health checks after which the server is marked down.
     * 
     */
    private Integer unhealthyThreshold;

    private GetWaasPoliciesWaasPolicyPolicyConfigHealthCheck() {}
    /**
     * @return The HTTP response codes that signify a healthy state.
     * * **2XX:** Success response code group.
     * * **3XX:** Redirection response code group.
     * * **4XX:** Client errors response code group.
     * * **5XX:** Server errors response code group.
     * 
     */
    public List<String> expectedResponseCodeGroups() {
        return this.expectedResponseCodeGroups;
    }
    /**
     * @return Health check will search for the given text in a case-sensitive manner within the response body and will fail if the text is not found.
     * 
     */
    public String expectedResponseText() {
        return this.expectedResponseText;
    }
    /**
     * @return HTTP header fields to include in health check requests, expressed as `&#34;name&#34;: &#34;value&#34;` properties. Because HTTP header field names are case-insensitive, any use of names that are case-insensitive equal to other names will be rejected. If Host is not specified, requests will include a Host header field with value matching the policy&#39;s protected domain. If User-Agent is not specified, requests will include a User-Agent header field with value &#34;waf health checks&#34;.
     * 
     */
    public Map<String,Object> headers() {
        return this.headers;
    }
    /**
     * @return Number of successful health checks after which the server is marked up.
     * 
     */
    public Integer healthyThreshold() {
        return this.healthyThreshold;
    }
    /**
     * @return Time between health checks of an individual origin server, in seconds.
     * 
     */
    public Integer intervalInSeconds() {
        return this.intervalInSeconds;
    }
    /**
     * @return Enables or disables the JavaScript challenge Web Application Firewall feature.
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }
    /**
     * @return Enables or disables additional check for predefined text in addition to response code.
     * 
     */
    public Boolean isResponseTextCheckEnabled() {
        return this.isResponseTextCheckEnabled;
    }
    /**
     * @return Load balancing methods are algorithms used to efficiently distribute traffic among origin servers.
     * * **[IP_HASH](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/IPHashLoadBalancingMethod):** All the incoming requests from the same client IP address should go to the same content origination server. IP_HASH load balancing method uses origin weights when choosing which origin should the hash be assigned to initially.
     * * **[ROUND_ROBIN](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/RoundRobinLoadBalancingMethod):** Forwards requests sequentially to the available origin servers. The first request - to the first origin server, the second request - to the next origin server, and so on. After it sends a request to the last origin server, it starts again with the first origin server. When using weights on origins, Weighted Round Robin assigns more requests to origins with a greater weight. Over a period of time, origins will receive a number of requests in proportion to their weight.
     * * **[STICKY_COOKIE](https://www.terraform.io/iaas/api/#/en/waas/latest/datatypes/StickyCookieLoadBalancingMethod):** Adds a session cookie to the first response from the origin server and identifies the server that sent the response. The client&#39;s next request contains the cookie value, and nginx routes the request to the origin server that responded to the first request. STICKY_COOKIE load balancing method falls back to Round Robin for the first request.
     * 
     */
    public String method() {
        return this.method;
    }
    /**
     * @return Path to visit on your origins when performing the health check.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Response timeout represents wait time until request is considered failed, in seconds.
     * 
     */
    public Integer timeoutInSeconds() {
        return this.timeoutInSeconds;
    }
    /**
     * @return Number of failed health checks after which the server is marked down.
     * 
     */
    public Integer unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWaasPoliciesWaasPolicyPolicyConfigHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> expectedResponseCodeGroups;
        private String expectedResponseText;
        private Map<String,Object> headers;
        private Integer healthyThreshold;
        private Integer intervalInSeconds;
        private Boolean isEnabled;
        private Boolean isResponseTextCheckEnabled;
        private String method;
        private String path;
        private Integer timeoutInSeconds;
        private Integer unhealthyThreshold;
        public Builder() {}
        public Builder(GetWaasPoliciesWaasPolicyPolicyConfigHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expectedResponseCodeGroups = defaults.expectedResponseCodeGroups;
    	      this.expectedResponseText = defaults.expectedResponseText;
    	      this.headers = defaults.headers;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.intervalInSeconds = defaults.intervalInSeconds;
    	      this.isEnabled = defaults.isEnabled;
    	      this.isResponseTextCheckEnabled = defaults.isResponseTextCheckEnabled;
    	      this.method = defaults.method;
    	      this.path = defaults.path;
    	      this.timeoutInSeconds = defaults.timeoutInSeconds;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        @CustomType.Setter
        public Builder expectedResponseCodeGroups(List<String> expectedResponseCodeGroups) {
            this.expectedResponseCodeGroups = Objects.requireNonNull(expectedResponseCodeGroups);
            return this;
        }
        public Builder expectedResponseCodeGroups(String... expectedResponseCodeGroups) {
            return expectedResponseCodeGroups(List.of(expectedResponseCodeGroups));
        }
        @CustomType.Setter
        public Builder expectedResponseText(String expectedResponseText) {
            this.expectedResponseText = Objects.requireNonNull(expectedResponseText);
            return this;
        }
        @CustomType.Setter
        public Builder headers(Map<String,Object> headers) {
            this.headers = Objects.requireNonNull(headers);
            return this;
        }
        @CustomType.Setter
        public Builder healthyThreshold(Integer healthyThreshold) {
            this.healthyThreshold = Objects.requireNonNull(healthyThreshold);
            return this;
        }
        @CustomType.Setter
        public Builder intervalInSeconds(Integer intervalInSeconds) {
            this.intervalInSeconds = Objects.requireNonNull(intervalInSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder isEnabled(Boolean isEnabled) {
            this.isEnabled = Objects.requireNonNull(isEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder isResponseTextCheckEnabled(Boolean isResponseTextCheckEnabled) {
            this.isResponseTextCheckEnabled = Objects.requireNonNull(isResponseTextCheckEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder method(String method) {
            this.method = Objects.requireNonNull(method);
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            this.timeoutInSeconds = Objects.requireNonNull(timeoutInSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            this.unhealthyThreshold = Objects.requireNonNull(unhealthyThreshold);
            return this;
        }
        public GetWaasPoliciesWaasPolicyPolicyConfigHealthCheck build() {
            final var o = new GetWaasPoliciesWaasPolicyPolicyConfigHealthCheck();
            o.expectedResponseCodeGroups = expectedResponseCodeGroups;
            o.expectedResponseText = expectedResponseText;
            o.headers = headers;
            o.healthyThreshold = healthyThreshold;
            o.intervalInSeconds = intervalInSeconds;
            o.isEnabled = isEnabled;
            o.isResponseTextCheckEnabled = isResponseTextCheckEnabled;
            o.method = method;
            o.path = path;
            o.timeoutInSeconds = timeoutInSeconds;
            o.unhealthyThreshold = unhealthyThreshold;
            return o;
        }
    }
}
