// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.oci.Waas.outputs.PolicyWafConfigCachingRuleCriteria;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PolicyWafConfigCachingRule {
    /**
     * @return (Updatable) The action to take against requests from detected bots. If unspecified, defaults to `DETECT`.
     * 
     */
    private String action;
    /**
     * @return (Updatable) The duration to cache content for the caching rule, specified in ISO 8601 extended format. Supported units: seconds, minutes, hours, days, weeks, months. The maximum value that can be set for any unit is `99`. Mixing of multiple units is not supported. Only applies when the `action` is set to `CACHE`. Example: `PT1H`
     * 
     */
    private @Nullable String cachingDuration;
    /**
     * @return (Updatable) The duration to cache content in the user&#39;s browser, specified in ISO 8601 extended format. Supported units: seconds, minutes, hours, days, weeks, months. The maximum value that can be set for any unit is `99`. Mixing of multiple units is not supported. Only applies when the `action` is set to `CACHE`. Example: `PT1H`
     * 
     */
    private @Nullable String clientCachingDuration;
    /**
     * @return (Updatable) When defined, the JavaScript Challenge would be applied only for the requests that matched all the listed conditions.
     * 
     */
    private List<PolicyWafConfigCachingRuleCriteria> criterias;
    /**
     * @return (Updatable) Enables or disables client caching. Browsers use the `Cache-Control` header value for caching content locally in the browser. This setting overrides the addition of a `Cache-Control` header in responses.
     * 
     */
    private @Nullable Boolean isClientCachingEnabled;
    /**
     * @return (Updatable) The unique key for the caching rule.
     * 
     */
    private @Nullable String key;
    /**
     * @return (Updatable) The unique name of the whitelist.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    private String name;

    private PolicyWafConfigCachingRule() {}
    /**
     * @return (Updatable) The action to take against requests from detected bots. If unspecified, defaults to `DETECT`.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return (Updatable) The duration to cache content for the caching rule, specified in ISO 8601 extended format. Supported units: seconds, minutes, hours, days, weeks, months. The maximum value that can be set for any unit is `99`. Mixing of multiple units is not supported. Only applies when the `action` is set to `CACHE`. Example: `PT1H`
     * 
     */
    public Optional<String> cachingDuration() {
        return Optional.ofNullable(this.cachingDuration);
    }
    /**
     * @return (Updatable) The duration to cache content in the user&#39;s browser, specified in ISO 8601 extended format. Supported units: seconds, minutes, hours, days, weeks, months. The maximum value that can be set for any unit is `99`. Mixing of multiple units is not supported. Only applies when the `action` is set to `CACHE`. Example: `PT1H`
     * 
     */
    public Optional<String> clientCachingDuration() {
        return Optional.ofNullable(this.clientCachingDuration);
    }
    /**
     * @return (Updatable) When defined, the JavaScript Challenge would be applied only for the requests that matched all the listed conditions.
     * 
     */
    public List<PolicyWafConfigCachingRuleCriteria> criterias() {
        return this.criterias;
    }
    /**
     * @return (Updatable) Enables or disables client caching. Browsers use the `Cache-Control` header value for caching content locally in the browser. This setting overrides the addition of a `Cache-Control` header in responses.
     * 
     */
    public Optional<Boolean> isClientCachingEnabled() {
        return Optional.ofNullable(this.isClientCachingEnabled);
    }
    /**
     * @return (Updatable) The unique key for the caching rule.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return (Updatable) The unique name of the whitelist.
     * 
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyWafConfigCachingRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private @Nullable String cachingDuration;
        private @Nullable String clientCachingDuration;
        private List<PolicyWafConfigCachingRuleCriteria> criterias;
        private @Nullable Boolean isClientCachingEnabled;
        private @Nullable String key;
        private String name;
        public Builder() {}
        public Builder(PolicyWafConfigCachingRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.cachingDuration = defaults.cachingDuration;
    	      this.clientCachingDuration = defaults.clientCachingDuration;
    	      this.criterias = defaults.criterias;
    	      this.isClientCachingEnabled = defaults.isClientCachingEnabled;
    	      this.key = defaults.key;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        @CustomType.Setter
        public Builder cachingDuration(@Nullable String cachingDuration) {
            this.cachingDuration = cachingDuration;
            return this;
        }
        @CustomType.Setter
        public Builder clientCachingDuration(@Nullable String clientCachingDuration) {
            this.clientCachingDuration = clientCachingDuration;
            return this;
        }
        @CustomType.Setter
        public Builder criterias(List<PolicyWafConfigCachingRuleCriteria> criterias) {
            this.criterias = Objects.requireNonNull(criterias);
            return this;
        }
        public Builder criterias(PolicyWafConfigCachingRuleCriteria... criterias) {
            return criterias(List.of(criterias));
        }
        @CustomType.Setter
        public Builder isClientCachingEnabled(@Nullable Boolean isClientCachingEnabled) {
            this.isClientCachingEnabled = isClientCachingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public PolicyWafConfigCachingRule build() {
            final var _resultValue = new PolicyWafConfigCachingRule();
            _resultValue.action = action;
            _resultValue.cachingDuration = cachingDuration;
            _resultValue.clientCachingDuration = clientCachingDuration;
            _resultValue.criterias = criterias;
            _resultValue.isClientCachingEnabled = isClientCachingEnabled;
            _resultValue.key = key;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
