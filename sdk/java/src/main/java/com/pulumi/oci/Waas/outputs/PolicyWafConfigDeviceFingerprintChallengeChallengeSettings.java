// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.Waas.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PolicyWafConfigDeviceFingerprintChallengeChallengeSettings {
    /**
     * @return (Updatable) If `action` is set to `BLOCK`, this specifies how the traffic is blocked when detected as malicious by a protection rule. If unspecified, defaults to `SET_RESPONSE_CODE`.
     * 
     */
    private @Nullable String blockAction;
    /**
     * @return (Updatable) The error code to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`.
     * 
     */
    private @Nullable String blockErrorPageCode;
    /**
     * @return (Updatable) The description text to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `Access blocked by website owner. Please contact support.`
     * 
     */
    private @Nullable String blockErrorPageDescription;
    /**
     * @return (Updatable) The message to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to &#39;Access to the website is blocked.&#39;
     * 
     */
    private @Nullable String blockErrorPageMessage;
    /**
     * @return (Updatable) The response code returned when `action` is set to `BLOCK`, `blockAction` is set to `SET_RESPONSE_CODE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`. The list of available response codes: `400`, `401`, `403`, `405`, `409`, `411`, `412`, `413`, `414`, `415`, `416`, `500`, `501`, `502`, `503`, `504`, `507`.
     * 
     */
    private @Nullable Integer blockResponseCode;
    /**
     * @return (Updatable) The text to show in the footer when showing a CAPTCHA challenge when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_CAPTCHA`, and the request is blocked. If unspecified, default to `Enter the letters and numbers as they are shown in image above`.
     * 
     */
    private @Nullable String captchaFooter;
    /**
     * @return (Updatable) The text to show in the header when showing a CAPTCHA challenge when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_CAPTCHA`, and the request is blocked. If unspecified, defaults to `We have detected an increased number of attempts to access this webapp. To help us keep this webapp secure, please let us know that you are not a robot by entering the text from captcha below.`
     * 
     */
    private @Nullable String captchaHeader;
    /**
     * @return (Updatable) The text to show on the label of the CAPTCHA challenge submit button when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_CAPTCHA`, and the request is blocked. If unspecified, defaults to `Yes, I am human`.
     * 
     */
    private @Nullable String captchaSubmitLabel;
    /**
     * @return (Updatable) The title used when showing a CAPTCHA challenge when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_CAPTCHA`, and the request is blocked. If unspecified, defaults to `Are you human?`
     * 
     */
    private @Nullable String captchaTitle;

    private PolicyWafConfigDeviceFingerprintChallengeChallengeSettings() {}
    /**
     * @return (Updatable) If `action` is set to `BLOCK`, this specifies how the traffic is blocked when detected as malicious by a protection rule. If unspecified, defaults to `SET_RESPONSE_CODE`.
     * 
     */
    public Optional<String> blockAction() {
        return Optional.ofNullable(this.blockAction);
    }
    /**
     * @return (Updatable) The error code to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`.
     * 
     */
    public Optional<String> blockErrorPageCode() {
        return Optional.ofNullable(this.blockErrorPageCode);
    }
    /**
     * @return (Updatable) The description text to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `Access blocked by website owner. Please contact support.`
     * 
     */
    public Optional<String> blockErrorPageDescription() {
        return Optional.ofNullable(this.blockErrorPageDescription);
    }
    /**
     * @return (Updatable) The message to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to &#39;Access to the website is blocked.&#39;
     * 
     */
    public Optional<String> blockErrorPageMessage() {
        return Optional.ofNullable(this.blockErrorPageMessage);
    }
    /**
     * @return (Updatable) The response code returned when `action` is set to `BLOCK`, `blockAction` is set to `SET_RESPONSE_CODE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`. The list of available response codes: `400`, `401`, `403`, `405`, `409`, `411`, `412`, `413`, `414`, `415`, `416`, `500`, `501`, `502`, `503`, `504`, `507`.
     * 
     */
    public Optional<Integer> blockResponseCode() {
        return Optional.ofNullable(this.blockResponseCode);
    }
    /**
     * @return (Updatable) The text to show in the footer when showing a CAPTCHA challenge when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_CAPTCHA`, and the request is blocked. If unspecified, default to `Enter the letters and numbers as they are shown in image above`.
     * 
     */
    public Optional<String> captchaFooter() {
        return Optional.ofNullable(this.captchaFooter);
    }
    /**
     * @return (Updatable) The text to show in the header when showing a CAPTCHA challenge when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_CAPTCHA`, and the request is blocked. If unspecified, defaults to `We have detected an increased number of attempts to access this webapp. To help us keep this webapp secure, please let us know that you are not a robot by entering the text from captcha below.`
     * 
     */
    public Optional<String> captchaHeader() {
        return Optional.ofNullable(this.captchaHeader);
    }
    /**
     * @return (Updatable) The text to show on the label of the CAPTCHA challenge submit button when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_CAPTCHA`, and the request is blocked. If unspecified, defaults to `Yes, I am human`.
     * 
     */
    public Optional<String> captchaSubmitLabel() {
        return Optional.ofNullable(this.captchaSubmitLabel);
    }
    /**
     * @return (Updatable) The title used when showing a CAPTCHA challenge when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_CAPTCHA`, and the request is blocked. If unspecified, defaults to `Are you human?`
     * 
     */
    public Optional<String> captchaTitle() {
        return Optional.ofNullable(this.captchaTitle);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyWafConfigDeviceFingerprintChallengeChallengeSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String blockAction;
        private @Nullable String blockErrorPageCode;
        private @Nullable String blockErrorPageDescription;
        private @Nullable String blockErrorPageMessage;
        private @Nullable Integer blockResponseCode;
        private @Nullable String captchaFooter;
        private @Nullable String captchaHeader;
        private @Nullable String captchaSubmitLabel;
        private @Nullable String captchaTitle;
        public Builder() {}
        public Builder(PolicyWafConfigDeviceFingerprintChallengeChallengeSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blockAction = defaults.blockAction;
    	      this.blockErrorPageCode = defaults.blockErrorPageCode;
    	      this.blockErrorPageDescription = defaults.blockErrorPageDescription;
    	      this.blockErrorPageMessage = defaults.blockErrorPageMessage;
    	      this.blockResponseCode = defaults.blockResponseCode;
    	      this.captchaFooter = defaults.captchaFooter;
    	      this.captchaHeader = defaults.captchaHeader;
    	      this.captchaSubmitLabel = defaults.captchaSubmitLabel;
    	      this.captchaTitle = defaults.captchaTitle;
        }

        @CustomType.Setter
        public Builder blockAction(@Nullable String blockAction) {
            this.blockAction = blockAction;
            return this;
        }
        @CustomType.Setter
        public Builder blockErrorPageCode(@Nullable String blockErrorPageCode) {
            this.blockErrorPageCode = blockErrorPageCode;
            return this;
        }
        @CustomType.Setter
        public Builder blockErrorPageDescription(@Nullable String blockErrorPageDescription) {
            this.blockErrorPageDescription = blockErrorPageDescription;
            return this;
        }
        @CustomType.Setter
        public Builder blockErrorPageMessage(@Nullable String blockErrorPageMessage) {
            this.blockErrorPageMessage = blockErrorPageMessage;
            return this;
        }
        @CustomType.Setter
        public Builder blockResponseCode(@Nullable Integer blockResponseCode) {
            this.blockResponseCode = blockResponseCode;
            return this;
        }
        @CustomType.Setter
        public Builder captchaFooter(@Nullable String captchaFooter) {
            this.captchaFooter = captchaFooter;
            return this;
        }
        @CustomType.Setter
        public Builder captchaHeader(@Nullable String captchaHeader) {
            this.captchaHeader = captchaHeader;
            return this;
        }
        @CustomType.Setter
        public Builder captchaSubmitLabel(@Nullable String captchaSubmitLabel) {
            this.captchaSubmitLabel = captchaSubmitLabel;
            return this;
        }
        @CustomType.Setter
        public Builder captchaTitle(@Nullable String captchaTitle) {
            this.captchaTitle = captchaTitle;
            return this;
        }
        public PolicyWafConfigDeviceFingerprintChallengeChallengeSettings build() {
            final var _resultValue = new PolicyWafConfigDeviceFingerprintChallengeChallengeSettings();
            _resultValue.blockAction = blockAction;
            _resultValue.blockErrorPageCode = blockErrorPageCode;
            _resultValue.blockErrorPageDescription = blockErrorPageDescription;
            _resultValue.blockErrorPageMessage = blockErrorPageMessage;
            _resultValue.blockResponseCode = blockResponseCode;
            _resultValue.captchaFooter = captchaFooter;
            _resultValue.captchaHeader = captchaHeader;
            _resultValue.captchaSubmitLabel = captchaSubmitLabel;
            _resultValue.captchaTitle = captchaTitle;
            return _resultValue;
        }
    }
}
