// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.oci.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.oci.oci.inputs.GetWlmsWlsDomainsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetWlmsWlsDomainsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetWlmsWlsDomainsArgs Empty = new GetWlmsWlsDomainsArgs();

    /**
     * The OCID of the compartment that contains the resources to list. This filter returns  only resources contained within the specified compartment.
     * 
     */
    @Import(name="compartmentId")
    private @Nullable Output<String> compartmentId;

    /**
     * @return The OCID of the compartment that contains the resources to list. This filter returns  only resources contained within the specified compartment.
     * 
     */
    public Optional<Output<String>> compartmentId() {
        return Optional.ofNullable(this.compartmentId);
    }

    /**
     * The display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="filters")
    private @Nullable Output<List<GetWlmsWlsDomainsFilterArgs>> filters;

    public Optional<Output<List<GetWlmsWlsDomainsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the WebLogic domain.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the WebLogic domain.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * A filter to return WebLogic domains based on the type of middleware of the WebLogic domain.
     * 
     */
    @Import(name="middlewareType")
    private @Nullable Output<String> middlewareType;

    /**
     * @return A filter to return WebLogic domains based on the type of middleware of the WebLogic domain.
     * 
     */
    public Optional<Output<String>> middlewareType() {
        return Optional.ofNullable(this.middlewareType);
    }

    /**
     * A filter to return domains based on the patch readiness status.
     * 
     */
    @Import(name="patchReadinessStatus")
    private @Nullable Output<String> patchReadinessStatus;

    /**
     * @return A filter to return domains based on the patch readiness status.
     * 
     */
    public Optional<Output<String>> patchReadinessStatus() {
        return Optional.ofNullable(this.patchReadinessStatus);
    }

    /**
     * A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A filter to return WebLogic domains based on the WebLogic version.
     * 
     */
    @Import(name="weblogicVersion")
    private @Nullable Output<String> weblogicVersion;

    /**
     * @return A filter to return WebLogic domains based on the WebLogic version.
     * 
     */
    public Optional<Output<String>> weblogicVersion() {
        return Optional.ofNullable(this.weblogicVersion);
    }

    private GetWlmsWlsDomainsArgs() {}

    private GetWlmsWlsDomainsArgs(GetWlmsWlsDomainsArgs $) {
        this.compartmentId = $.compartmentId;
        this.displayName = $.displayName;
        this.filters = $.filters;
        this.id = $.id;
        this.middlewareType = $.middlewareType;
        this.patchReadinessStatus = $.patchReadinessStatus;
        this.state = $.state;
        this.weblogicVersion = $.weblogicVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetWlmsWlsDomainsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetWlmsWlsDomainsArgs $;

        public Builder() {
            $ = new GetWlmsWlsDomainsArgs();
        }

        public Builder(GetWlmsWlsDomainsArgs defaults) {
            $ = new GetWlmsWlsDomainsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the resources to list. This filter returns  only resources contained within the specified compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(@Nullable Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment that contains the resources to list. This filter returns  only resources contained within the specified compartment.
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param displayName The display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder filters(@Nullable Output<List<GetWlmsWlsDomainsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<GetWlmsWlsDomainsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(GetWlmsWlsDomainsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the WebLogic domain.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the WebLogic domain.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param middlewareType A filter to return WebLogic domains based on the type of middleware of the WebLogic domain.
         * 
         * @return builder
         * 
         */
        public Builder middlewareType(@Nullable Output<String> middlewareType) {
            $.middlewareType = middlewareType;
            return this;
        }

        /**
         * @param middlewareType A filter to return WebLogic domains based on the type of middleware of the WebLogic domain.
         * 
         * @return builder
         * 
         */
        public Builder middlewareType(String middlewareType) {
            return middlewareType(Output.of(middlewareType));
        }

        /**
         * @param patchReadinessStatus A filter to return domains based on the patch readiness status.
         * 
         * @return builder
         * 
         */
        public Builder patchReadinessStatus(@Nullable Output<String> patchReadinessStatus) {
            $.patchReadinessStatus = patchReadinessStatus;
            return this;
        }

        /**
         * @param patchReadinessStatus A filter to return domains based on the patch readiness status.
         * 
         * @return builder
         * 
         */
        public Builder patchReadinessStatus(String patchReadinessStatus) {
            return patchReadinessStatus(Output.of(patchReadinessStatus));
        }

        /**
         * @param state A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param weblogicVersion A filter to return WebLogic domains based on the WebLogic version.
         * 
         * @return builder
         * 
         */
        public Builder weblogicVersion(@Nullable Output<String> weblogicVersion) {
            $.weblogicVersion = weblogicVersion;
            return this;
        }

        /**
         * @param weblogicVersion A filter to return WebLogic domains based on the WebLogic version.
         * 
         * @return builder
         * 
         */
        public Builder weblogicVersion(String weblogicVersion) {
            return weblogicVersion(Output.of(weblogicVersion));
        }

        public GetWlmsWlsDomainsArgs build() {
            return $;
        }
    }

}
