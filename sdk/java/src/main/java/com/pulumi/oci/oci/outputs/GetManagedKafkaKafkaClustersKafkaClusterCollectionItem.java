// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.oci.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.oci.oci.outputs.GetManagedKafkaKafkaClustersKafkaClusterCollectionItemAccessSubnet;
import com.pulumi.oci.oci.outputs.GetManagedKafkaKafkaClustersKafkaClusterCollectionItemBrokerShape;
import com.pulumi.oci.oci.outputs.GetManagedKafkaKafkaClustersKafkaClusterCollectionItemKafkaBootstrapUrl;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetManagedKafkaKafkaClustersKafkaClusterCollectionItem {
    /**
     * @return Subnets where broker/coordinator VNICs will be created.
     * 
     */
    private List<GetManagedKafkaKafkaClustersKafkaClusterCollectionItemAccessSubnet> accessSubnets;
    /**
     * @return Configuration of the broker node.
     * 
     */
    private List<GetManagedKafkaKafkaClustersKafkaClusterCollectionItemBrokerShape> brokerShapes;
    /**
     * @return CA certificate bundle for mTLS broker authentication.
     * 
     */
    private String clientCertificateBundle;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of Kafka Cluster configuration object
     * 
     */
    private String clusterConfigId;
    /**
     * @return The version of configuration object
     * 
     */
    private Integer clusterConfigVersion;
    /**
     * @return Type of the cluster to spin up.  DEVELOPMENT - setting that allows to sacrifice HA and spin up cluster on a single node PRODUCTION - Minimum allowed broker count is 3
     * 
     */
    private String clusterType;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
     * 
     */
    private String compartmentId;
    /**
     * @return Kafka coordination type. Set of available types depends on Kafka version
     * 
     */
    private String coordinationType;
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    private Map<String,String> definedTags;
    /**
     * @return A filter to return only resources that match the given display name exactly.
     * 
     */
    private String displayName;
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    private Map<String,String> freeformTags;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the KafkaCluster.
     * 
     */
    private String id;
    /**
     * @return Bootstrap URL that can be used to connect to Kafka
     * 
     */
    private List<GetManagedKafkaKafkaClustersKafkaClusterCollectionItemKafkaBootstrapUrl> kafkaBootstrapUrls;
    /**
     * @return Version of Kafka to use to spin up the cluster
     * 
     */
    private String kafkaVersion;
    /**
     * @return A message that describes the current state of the KafkaCluster in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
     * 
     */
    private String lifecycleDetails;
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret that contains superuser password.
     * 
     */
    private String secretId;
    /**
     * @return A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
     * 
     */
    private String state;
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    private Map<String,String> systemTags;
    /**
     * @return The date and time the KafkaCluster was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the KafkaCluster was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeUpdated;

    private GetManagedKafkaKafkaClustersKafkaClusterCollectionItem() {}
    /**
     * @return Subnets where broker/coordinator VNICs will be created.
     * 
     */
    public List<GetManagedKafkaKafkaClustersKafkaClusterCollectionItemAccessSubnet> accessSubnets() {
        return this.accessSubnets;
    }
    /**
     * @return Configuration of the broker node.
     * 
     */
    public List<GetManagedKafkaKafkaClustersKafkaClusterCollectionItemBrokerShape> brokerShapes() {
        return this.brokerShapes;
    }
    /**
     * @return CA certificate bundle for mTLS broker authentication.
     * 
     */
    public String clientCertificateBundle() {
        return this.clientCertificateBundle;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of Kafka Cluster configuration object
     * 
     */
    public String clusterConfigId() {
        return this.clusterConfigId;
    }
    /**
     * @return The version of configuration object
     * 
     */
    public Integer clusterConfigVersion() {
        return this.clusterConfigVersion;
    }
    /**
     * @return Type of the cluster to spin up.  DEVELOPMENT - setting that allows to sacrifice HA and spin up cluster on a single node PRODUCTION - Minimum allowed broker count is 3
     * 
     */
    public String clusterType() {
        return this.clusterType;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return Kafka coordination type. Set of available types depends on Kafka version
     * 
     */
    public String coordinationType() {
        return this.coordinationType;
    }
    /**
     * @return Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Operations.CostCenter&#34;: &#34;42&#34;}`
     * 
     */
    public Map<String,String> definedTags() {
        return this.definedTags;
    }
    /**
     * @return A filter to return only resources that match the given display name exactly.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{&#34;Department&#34;: &#34;Finance&#34;}`
     * 
     */
    public Map<String,String> freeformTags() {
        return this.freeformTags;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the KafkaCluster.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Bootstrap URL that can be used to connect to Kafka
     * 
     */
    public List<GetManagedKafkaKafkaClustersKafkaClusterCollectionItemKafkaBootstrapUrl> kafkaBootstrapUrls() {
        return this.kafkaBootstrapUrls;
    }
    /**
     * @return Version of Kafka to use to spin up the cluster
     * 
     */
    public String kafkaVersion() {
        return this.kafkaVersion;
    }
    /**
     * @return A message that describes the current state of the KafkaCluster in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
     * 
     */
    public String lifecycleDetails() {
        return this.lifecycleDetails;
    }
    /**
     * @return The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret that contains superuser password.
     * 
     */
    public String secretId() {
        return this.secretId;
    }
    /**
     * @return A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{&#34;orcl-cloud.free-tier-retained&#34;: &#34;true&#34;}`
     * 
     */
    public Map<String,String> systemTags() {
        return this.systemTags;
    }
    /**
     * @return The date and time the KafkaCluster was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the KafkaCluster was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagedKafkaKafkaClustersKafkaClusterCollectionItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetManagedKafkaKafkaClustersKafkaClusterCollectionItemAccessSubnet> accessSubnets;
        private List<GetManagedKafkaKafkaClustersKafkaClusterCollectionItemBrokerShape> brokerShapes;
        private String clientCertificateBundle;
        private String clusterConfigId;
        private Integer clusterConfigVersion;
        private String clusterType;
        private String compartmentId;
        private String coordinationType;
        private Map<String,String> definedTags;
        private String displayName;
        private Map<String,String> freeformTags;
        private String id;
        private List<GetManagedKafkaKafkaClustersKafkaClusterCollectionItemKafkaBootstrapUrl> kafkaBootstrapUrls;
        private String kafkaVersion;
        private String lifecycleDetails;
        private String secretId;
        private String state;
        private Map<String,String> systemTags;
        private String timeCreated;
        private String timeUpdated;
        public Builder() {}
        public Builder(GetManagedKafkaKafkaClustersKafkaClusterCollectionItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessSubnets = defaults.accessSubnets;
    	      this.brokerShapes = defaults.brokerShapes;
    	      this.clientCertificateBundle = defaults.clientCertificateBundle;
    	      this.clusterConfigId = defaults.clusterConfigId;
    	      this.clusterConfigVersion = defaults.clusterConfigVersion;
    	      this.clusterType = defaults.clusterType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.coordinationType = defaults.coordinationType;
    	      this.definedTags = defaults.definedTags;
    	      this.displayName = defaults.displayName;
    	      this.freeformTags = defaults.freeformTags;
    	      this.id = defaults.id;
    	      this.kafkaBootstrapUrls = defaults.kafkaBootstrapUrls;
    	      this.kafkaVersion = defaults.kafkaVersion;
    	      this.lifecycleDetails = defaults.lifecycleDetails;
    	      this.secretId = defaults.secretId;
    	      this.state = defaults.state;
    	      this.systemTags = defaults.systemTags;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
        }

        @CustomType.Setter
        public Builder accessSubnets(List<GetManagedKafkaKafkaClustersKafkaClusterCollectionItemAccessSubnet> accessSubnets) {
            if (accessSubnets == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "accessSubnets");
            }
            this.accessSubnets = accessSubnets;
            return this;
        }
        public Builder accessSubnets(GetManagedKafkaKafkaClustersKafkaClusterCollectionItemAccessSubnet... accessSubnets) {
            return accessSubnets(List.of(accessSubnets));
        }
        @CustomType.Setter
        public Builder brokerShapes(List<GetManagedKafkaKafkaClustersKafkaClusterCollectionItemBrokerShape> brokerShapes) {
            if (brokerShapes == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "brokerShapes");
            }
            this.brokerShapes = brokerShapes;
            return this;
        }
        public Builder brokerShapes(GetManagedKafkaKafkaClustersKafkaClusterCollectionItemBrokerShape... brokerShapes) {
            return brokerShapes(List.of(brokerShapes));
        }
        @CustomType.Setter
        public Builder clientCertificateBundle(String clientCertificateBundle) {
            if (clientCertificateBundle == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "clientCertificateBundle");
            }
            this.clientCertificateBundle = clientCertificateBundle;
            return this;
        }
        @CustomType.Setter
        public Builder clusterConfigId(String clusterConfigId) {
            if (clusterConfigId == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "clusterConfigId");
            }
            this.clusterConfigId = clusterConfigId;
            return this;
        }
        @CustomType.Setter
        public Builder clusterConfigVersion(Integer clusterConfigVersion) {
            if (clusterConfigVersion == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "clusterConfigVersion");
            }
            this.clusterConfigVersion = clusterConfigVersion;
            return this;
        }
        @CustomType.Setter
        public Builder clusterType(String clusterType) {
            if (clusterType == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "clusterType");
            }
            this.clusterType = clusterType;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder coordinationType(String coordinationType) {
            if (coordinationType == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "coordinationType");
            }
            this.coordinationType = coordinationType;
            return this;
        }
        @CustomType.Setter
        public Builder definedTags(Map<String,String> definedTags) {
            if (definedTags == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "definedTags");
            }
            this.definedTags = definedTags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder freeformTags(Map<String,String> freeformTags) {
            if (freeformTags == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "freeformTags");
            }
            this.freeformTags = freeformTags;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaBootstrapUrls(List<GetManagedKafkaKafkaClustersKafkaClusterCollectionItemKafkaBootstrapUrl> kafkaBootstrapUrls) {
            if (kafkaBootstrapUrls == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "kafkaBootstrapUrls");
            }
            this.kafkaBootstrapUrls = kafkaBootstrapUrls;
            return this;
        }
        public Builder kafkaBootstrapUrls(GetManagedKafkaKafkaClustersKafkaClusterCollectionItemKafkaBootstrapUrl... kafkaBootstrapUrls) {
            return kafkaBootstrapUrls(List.of(kafkaBootstrapUrls));
        }
        @CustomType.Setter
        public Builder kafkaVersion(String kafkaVersion) {
            if (kafkaVersion == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "kafkaVersion");
            }
            this.kafkaVersion = kafkaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleDetails(String lifecycleDetails) {
            if (lifecycleDetails == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "lifecycleDetails");
            }
            this.lifecycleDetails = lifecycleDetails;
            return this;
        }
        @CustomType.Setter
        public Builder secretId(String secretId) {
            if (secretId == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "secretId");
            }
            this.secretId = secretId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder systemTags(Map<String,String> systemTags) {
            if (systemTags == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "systemTags");
            }
            this.systemTags = systemTags;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetManagedKafkaKafkaClustersKafkaClusterCollectionItem", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        public GetManagedKafkaKafkaClustersKafkaClusterCollectionItem build() {
            final var _resultValue = new GetManagedKafkaKafkaClustersKafkaClusterCollectionItem();
            _resultValue.accessSubnets = accessSubnets;
            _resultValue.brokerShapes = brokerShapes;
            _resultValue.clientCertificateBundle = clientCertificateBundle;
            _resultValue.clusterConfigId = clusterConfigId;
            _resultValue.clusterConfigVersion = clusterConfigVersion;
            _resultValue.clusterType = clusterType;
            _resultValue.compartmentId = compartmentId;
            _resultValue.coordinationType = coordinationType;
            _resultValue.definedTags = definedTags;
            _resultValue.displayName = displayName;
            _resultValue.freeformTags = freeformTags;
            _resultValue.id = id;
            _resultValue.kafkaBootstrapUrls = kafkaBootstrapUrls;
            _resultValue.kafkaVersion = kafkaVersion;
            _resultValue.lifecycleDetails = lifecycleDetails;
            _resultValue.secretId = secretId;
            _resultValue.state = state;
            _resultValue.systemTags = systemTags;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            return _resultValue;
        }
    }
}
