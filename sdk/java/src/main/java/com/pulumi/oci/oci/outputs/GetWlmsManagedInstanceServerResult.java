// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.oci.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetWlmsManagedInstanceServerResult {
    /**
     * @return The name of the server.
     * 
     */
    private String hostName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Whether or not the server is an admin node.
     * 
     */
    private Boolean isAdmin;
    /**
     * @return The JDK path on the server.
     * 
     */
    private String jdkPath;
    /**
     * @return The JDK version on the server.
     * 
     */
    private String jdkVersion;
    /**
     * @return Whether or not the server has installed the latest patches.
     * 
     */
    private String latestPatchesStatus;
    /**
     * @return The managed instance ID of the server.
     * 
     */
    private String managedInstanceId;
    /**
     * @return The middleware path on the server.
     * 
     */
    private String middlewarePath;
    /**
     * @return The middleware type on the server.
     * 
     */
    private String middlewareType;
    /**
     * @return The name of the server.
     * 
     */
    private String name;
    /**
     * @return The patch readiness status of the server.
     * 
     */
    private String patchReadinessStatus;
    /**
     * @return The restart order assigned to the server.
     * 
     */
    private Integer restartOrder;
    private String serverId;
    /**
     * @return The status of the server.
     * 
     */
    private String status;
    /**
     * @return The date and time the server was first reported (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeCreated;
    /**
     * @return The date and time the server was last reported (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    private String timeUpdated;
    /**
     * @return The version of the WebLogic domain of the server
     * 
     */
    private String weblogicVersion;
    /**
     * @return The ID of the WebLogic domain to which the server belongs.
     * 
     */
    private String wlsDomainId;
    /**
     * @return The name of the WebLogic domain to which the server belongs.
     * 
     */
    private String wlsDomainName;
    /**
     * @return The path of the WebLogic domain to which the server belongs.
     * 
     */
    private String wlsDomainPath;

    private GetWlmsManagedInstanceServerResult() {}
    /**
     * @return The name of the server.
     * 
     */
    public String hostName() {
        return this.hostName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether or not the server is an admin node.
     * 
     */
    public Boolean isAdmin() {
        return this.isAdmin;
    }
    /**
     * @return The JDK path on the server.
     * 
     */
    public String jdkPath() {
        return this.jdkPath;
    }
    /**
     * @return The JDK version on the server.
     * 
     */
    public String jdkVersion() {
        return this.jdkVersion;
    }
    /**
     * @return Whether or not the server has installed the latest patches.
     * 
     */
    public String latestPatchesStatus() {
        return this.latestPatchesStatus;
    }
    /**
     * @return The managed instance ID of the server.
     * 
     */
    public String managedInstanceId() {
        return this.managedInstanceId;
    }
    /**
     * @return The middleware path on the server.
     * 
     */
    public String middlewarePath() {
        return this.middlewarePath;
    }
    /**
     * @return The middleware type on the server.
     * 
     */
    public String middlewareType() {
        return this.middlewareType;
    }
    /**
     * @return The name of the server.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The patch readiness status of the server.
     * 
     */
    public String patchReadinessStatus() {
        return this.patchReadinessStatus;
    }
    /**
     * @return The restart order assigned to the server.
     * 
     */
    public Integer restartOrder() {
        return this.restartOrder;
    }
    public String serverId() {
        return this.serverId;
    }
    /**
     * @return The status of the server.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The date and time the server was first reported (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeCreated() {
        return this.timeCreated;
    }
    /**
     * @return The date and time the server was last reported (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).  Example: `2016-08-25T21:10:29.600Z`
     * 
     */
    public String timeUpdated() {
        return this.timeUpdated;
    }
    /**
     * @return The version of the WebLogic domain of the server
     * 
     */
    public String weblogicVersion() {
        return this.weblogicVersion;
    }
    /**
     * @return The ID of the WebLogic domain to which the server belongs.
     * 
     */
    public String wlsDomainId() {
        return this.wlsDomainId;
    }
    /**
     * @return The name of the WebLogic domain to which the server belongs.
     * 
     */
    public String wlsDomainName() {
        return this.wlsDomainName;
    }
    /**
     * @return The path of the WebLogic domain to which the server belongs.
     * 
     */
    public String wlsDomainPath() {
        return this.wlsDomainPath;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWlmsManagedInstanceServerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String hostName;
        private String id;
        private Boolean isAdmin;
        private String jdkPath;
        private String jdkVersion;
        private String latestPatchesStatus;
        private String managedInstanceId;
        private String middlewarePath;
        private String middlewareType;
        private String name;
        private String patchReadinessStatus;
        private Integer restartOrder;
        private String serverId;
        private String status;
        private String timeCreated;
        private String timeUpdated;
        private String weblogicVersion;
        private String wlsDomainId;
        private String wlsDomainName;
        private String wlsDomainPath;
        public Builder() {}
        public Builder(GetWlmsManagedInstanceServerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostName = defaults.hostName;
    	      this.id = defaults.id;
    	      this.isAdmin = defaults.isAdmin;
    	      this.jdkPath = defaults.jdkPath;
    	      this.jdkVersion = defaults.jdkVersion;
    	      this.latestPatchesStatus = defaults.latestPatchesStatus;
    	      this.managedInstanceId = defaults.managedInstanceId;
    	      this.middlewarePath = defaults.middlewarePath;
    	      this.middlewareType = defaults.middlewareType;
    	      this.name = defaults.name;
    	      this.patchReadinessStatus = defaults.patchReadinessStatus;
    	      this.restartOrder = defaults.restartOrder;
    	      this.serverId = defaults.serverId;
    	      this.status = defaults.status;
    	      this.timeCreated = defaults.timeCreated;
    	      this.timeUpdated = defaults.timeUpdated;
    	      this.weblogicVersion = defaults.weblogicVersion;
    	      this.wlsDomainId = defaults.wlsDomainId;
    	      this.wlsDomainName = defaults.wlsDomainName;
    	      this.wlsDomainPath = defaults.wlsDomainPath;
        }

        @CustomType.Setter
        public Builder hostName(String hostName) {
            if (hostName == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "hostName");
            }
            this.hostName = hostName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isAdmin(Boolean isAdmin) {
            if (isAdmin == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "isAdmin");
            }
            this.isAdmin = isAdmin;
            return this;
        }
        @CustomType.Setter
        public Builder jdkPath(String jdkPath) {
            if (jdkPath == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "jdkPath");
            }
            this.jdkPath = jdkPath;
            return this;
        }
        @CustomType.Setter
        public Builder jdkVersion(String jdkVersion) {
            if (jdkVersion == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "jdkVersion");
            }
            this.jdkVersion = jdkVersion;
            return this;
        }
        @CustomType.Setter
        public Builder latestPatchesStatus(String latestPatchesStatus) {
            if (latestPatchesStatus == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "latestPatchesStatus");
            }
            this.latestPatchesStatus = latestPatchesStatus;
            return this;
        }
        @CustomType.Setter
        public Builder managedInstanceId(String managedInstanceId) {
            if (managedInstanceId == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "managedInstanceId");
            }
            this.managedInstanceId = managedInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder middlewarePath(String middlewarePath) {
            if (middlewarePath == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "middlewarePath");
            }
            this.middlewarePath = middlewarePath;
            return this;
        }
        @CustomType.Setter
        public Builder middlewareType(String middlewareType) {
            if (middlewareType == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "middlewareType");
            }
            this.middlewareType = middlewareType;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder patchReadinessStatus(String patchReadinessStatus) {
            if (patchReadinessStatus == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "patchReadinessStatus");
            }
            this.patchReadinessStatus = patchReadinessStatus;
            return this;
        }
        @CustomType.Setter
        public Builder restartOrder(Integer restartOrder) {
            if (restartOrder == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "restartOrder");
            }
            this.restartOrder = restartOrder;
            return this;
        }
        @CustomType.Setter
        public Builder serverId(String serverId) {
            if (serverId == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "serverId");
            }
            this.serverId = serverId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder timeCreated(String timeCreated) {
            if (timeCreated == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "timeCreated");
            }
            this.timeCreated = timeCreated;
            return this;
        }
        @CustomType.Setter
        public Builder timeUpdated(String timeUpdated) {
            if (timeUpdated == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "timeUpdated");
            }
            this.timeUpdated = timeUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder weblogicVersion(String weblogicVersion) {
            if (weblogicVersion == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "weblogicVersion");
            }
            this.weblogicVersion = weblogicVersion;
            return this;
        }
        @CustomType.Setter
        public Builder wlsDomainId(String wlsDomainId) {
            if (wlsDomainId == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "wlsDomainId");
            }
            this.wlsDomainId = wlsDomainId;
            return this;
        }
        @CustomType.Setter
        public Builder wlsDomainName(String wlsDomainName) {
            if (wlsDomainName == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "wlsDomainName");
            }
            this.wlsDomainName = wlsDomainName;
            return this;
        }
        @CustomType.Setter
        public Builder wlsDomainPath(String wlsDomainPath) {
            if (wlsDomainPath == null) {
              throw new MissingRequiredPropertyException("GetWlmsManagedInstanceServerResult", "wlsDomainPath");
            }
            this.wlsDomainPath = wlsDomainPath;
            return this;
        }
        public GetWlmsManagedInstanceServerResult build() {
            final var _resultValue = new GetWlmsManagedInstanceServerResult();
            _resultValue.hostName = hostName;
            _resultValue.id = id;
            _resultValue.isAdmin = isAdmin;
            _resultValue.jdkPath = jdkPath;
            _resultValue.jdkVersion = jdkVersion;
            _resultValue.latestPatchesStatus = latestPatchesStatus;
            _resultValue.managedInstanceId = managedInstanceId;
            _resultValue.middlewarePath = middlewarePath;
            _resultValue.middlewareType = middlewareType;
            _resultValue.name = name;
            _resultValue.patchReadinessStatus = patchReadinessStatus;
            _resultValue.restartOrder = restartOrder;
            _resultValue.serverId = serverId;
            _resultValue.status = status;
            _resultValue.timeCreated = timeCreated;
            _resultValue.timeUpdated = timeUpdated;
            _resultValue.weblogicVersion = weblogicVersion;
            _resultValue.wlsDomainId = wlsDomainId;
            _resultValue.wlsDomainName = wlsDomainName;
            _resultValue.wlsDomainPath = wlsDomainPath;
            return _resultValue;
        }
    }
}
