// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.oci.oci.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetWlmsWlsDomainsWlsDomainCollectionItemConfiguration {
    /**
     * @return Whether to manage the admin server using Node Manager or scripts.
     * 
     */
    private String adminServerControlMode;
    /**
     * @return Path to admin server start script.
     * 
     */
    private String adminServerStartScriptPath;
    /**
     * @return Path to admin server stop script.
     * 
     */
    private String adminServerStopScriptPath;
    /**
     * @return Whether or not the WebLogic domain is enabled for patching.
     * 
     */
    private Boolean isPatchEnabled;
    /**
     * @return Whether or not to rollback on failure during patching of WebLogic domain.
     * 
     */
    private Boolean isRollbackOnFailure;
    /**
     * @return Whether to manage the managed server using Node Manager or scripts.
     * 
     */
    private String managedServerControlMode;
    /**
     * @return Path to managed server start script.
     * 
     */
    private String managedServerStartScriptPath;
    /**
     * @return Path to managed server stop script.
     * 
     */
    private String managedServerStopScriptPath;
    /**
     * @return Servers shutdown timeout.
     * 
     */
    private Integer serversShutdownTimeout;

    private GetWlmsWlsDomainsWlsDomainCollectionItemConfiguration() {}
    /**
     * @return Whether to manage the admin server using Node Manager or scripts.
     * 
     */
    public String adminServerControlMode() {
        return this.adminServerControlMode;
    }
    /**
     * @return Path to admin server start script.
     * 
     */
    public String adminServerStartScriptPath() {
        return this.adminServerStartScriptPath;
    }
    /**
     * @return Path to admin server stop script.
     * 
     */
    public String adminServerStopScriptPath() {
        return this.adminServerStopScriptPath;
    }
    /**
     * @return Whether or not the WebLogic domain is enabled for patching.
     * 
     */
    public Boolean isPatchEnabled() {
        return this.isPatchEnabled;
    }
    /**
     * @return Whether or not to rollback on failure during patching of WebLogic domain.
     * 
     */
    public Boolean isRollbackOnFailure() {
        return this.isRollbackOnFailure;
    }
    /**
     * @return Whether to manage the managed server using Node Manager or scripts.
     * 
     */
    public String managedServerControlMode() {
        return this.managedServerControlMode;
    }
    /**
     * @return Path to managed server start script.
     * 
     */
    public String managedServerStartScriptPath() {
        return this.managedServerStartScriptPath;
    }
    /**
     * @return Path to managed server stop script.
     * 
     */
    public String managedServerStopScriptPath() {
        return this.managedServerStopScriptPath;
    }
    /**
     * @return Servers shutdown timeout.
     * 
     */
    public Integer serversShutdownTimeout() {
        return this.serversShutdownTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWlmsWlsDomainsWlsDomainCollectionItemConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adminServerControlMode;
        private String adminServerStartScriptPath;
        private String adminServerStopScriptPath;
        private Boolean isPatchEnabled;
        private Boolean isRollbackOnFailure;
        private String managedServerControlMode;
        private String managedServerStartScriptPath;
        private String managedServerStopScriptPath;
        private Integer serversShutdownTimeout;
        public Builder() {}
        public Builder(GetWlmsWlsDomainsWlsDomainCollectionItemConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminServerControlMode = defaults.adminServerControlMode;
    	      this.adminServerStartScriptPath = defaults.adminServerStartScriptPath;
    	      this.adminServerStopScriptPath = defaults.adminServerStopScriptPath;
    	      this.isPatchEnabled = defaults.isPatchEnabled;
    	      this.isRollbackOnFailure = defaults.isRollbackOnFailure;
    	      this.managedServerControlMode = defaults.managedServerControlMode;
    	      this.managedServerStartScriptPath = defaults.managedServerStartScriptPath;
    	      this.managedServerStopScriptPath = defaults.managedServerStopScriptPath;
    	      this.serversShutdownTimeout = defaults.serversShutdownTimeout;
        }

        @CustomType.Setter
        public Builder adminServerControlMode(String adminServerControlMode) {
            if (adminServerControlMode == null) {
              throw new MissingRequiredPropertyException("GetWlmsWlsDomainsWlsDomainCollectionItemConfiguration", "adminServerControlMode");
            }
            this.adminServerControlMode = adminServerControlMode;
            return this;
        }
        @CustomType.Setter
        public Builder adminServerStartScriptPath(String adminServerStartScriptPath) {
            if (adminServerStartScriptPath == null) {
              throw new MissingRequiredPropertyException("GetWlmsWlsDomainsWlsDomainCollectionItemConfiguration", "adminServerStartScriptPath");
            }
            this.adminServerStartScriptPath = adminServerStartScriptPath;
            return this;
        }
        @CustomType.Setter
        public Builder adminServerStopScriptPath(String adminServerStopScriptPath) {
            if (adminServerStopScriptPath == null) {
              throw new MissingRequiredPropertyException("GetWlmsWlsDomainsWlsDomainCollectionItemConfiguration", "adminServerStopScriptPath");
            }
            this.adminServerStopScriptPath = adminServerStopScriptPath;
            return this;
        }
        @CustomType.Setter
        public Builder isPatchEnabled(Boolean isPatchEnabled) {
            if (isPatchEnabled == null) {
              throw new MissingRequiredPropertyException("GetWlmsWlsDomainsWlsDomainCollectionItemConfiguration", "isPatchEnabled");
            }
            this.isPatchEnabled = isPatchEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRollbackOnFailure(Boolean isRollbackOnFailure) {
            if (isRollbackOnFailure == null) {
              throw new MissingRequiredPropertyException("GetWlmsWlsDomainsWlsDomainCollectionItemConfiguration", "isRollbackOnFailure");
            }
            this.isRollbackOnFailure = isRollbackOnFailure;
            return this;
        }
        @CustomType.Setter
        public Builder managedServerControlMode(String managedServerControlMode) {
            if (managedServerControlMode == null) {
              throw new MissingRequiredPropertyException("GetWlmsWlsDomainsWlsDomainCollectionItemConfiguration", "managedServerControlMode");
            }
            this.managedServerControlMode = managedServerControlMode;
            return this;
        }
        @CustomType.Setter
        public Builder managedServerStartScriptPath(String managedServerStartScriptPath) {
            if (managedServerStartScriptPath == null) {
              throw new MissingRequiredPropertyException("GetWlmsWlsDomainsWlsDomainCollectionItemConfiguration", "managedServerStartScriptPath");
            }
            this.managedServerStartScriptPath = managedServerStartScriptPath;
            return this;
        }
        @CustomType.Setter
        public Builder managedServerStopScriptPath(String managedServerStopScriptPath) {
            if (managedServerStopScriptPath == null) {
              throw new MissingRequiredPropertyException("GetWlmsWlsDomainsWlsDomainCollectionItemConfiguration", "managedServerStopScriptPath");
            }
            this.managedServerStopScriptPath = managedServerStopScriptPath;
            return this;
        }
        @CustomType.Setter
        public Builder serversShutdownTimeout(Integer serversShutdownTimeout) {
            if (serversShutdownTimeout == null) {
              throw new MissingRequiredPropertyException("GetWlmsWlsDomainsWlsDomainCollectionItemConfiguration", "serversShutdownTimeout");
            }
            this.serversShutdownTimeout = serversShutdownTimeout;
            return this;
        }
        public GetWlmsWlsDomainsWlsDomainCollectionItemConfiguration build() {
            final var _resultValue = new GetWlmsWlsDomainsWlsDomainCollectionItemConfiguration();
            _resultValue.adminServerControlMode = adminServerControlMode;
            _resultValue.adminServerStartScriptPath = adminServerStartScriptPath;
            _resultValue.adminServerStopScriptPath = adminServerStopScriptPath;
            _resultValue.isPatchEnabled = isPatchEnabled;
            _resultValue.isRollbackOnFailure = isRollbackOnFailure;
            _resultValue.managedServerControlMode = managedServerControlMode;
            _resultValue.managedServerStartScriptPath = managedServerStartScriptPath;
            _resultValue.managedServerStopScriptPath = managedServerStopScriptPath;
            _resultValue.serversShutdownTimeout = serversShutdownTimeout;
            return _resultValue;
        }
    }
}
