// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Detect Anomaly Job resource in Oracle Cloud Infrastructure Ai Anomaly Detection service.
 *
 * Gets a detect anomaly asynchronous job by identifier.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDetectAnomalyJob = oci.AiAnomalyDetection.getDetectAnomalyJob({
 *     detectAnomalyJobId: testDetectAnomalyJobOciAiAnomalyDetectionDetectAnomalyJob.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getDetectAnomalyJob(args: GetDetectAnomalyJobArgs, opts?: pulumi.InvokeOptions): Promise<GetDetectAnomalyJobResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:AiAnomalyDetection/getDetectAnomalyJob:getDetectAnomalyJob", {
        "detectAnomalyJobId": args.detectAnomalyJobId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDetectAnomalyJob.
 */
export interface GetDetectAnomalyJobArgs {
    /**
     * Unique asynchronous job identifier.
     */
    detectAnomalyJobId: string;
}

/**
 * A collection of values returned by getDetectAnomalyJob.
 */
export interface GetDetectAnomalyJobResult {
    /**
     * The OCID of the compartment that starts the job.
     */
    readonly compartmentId: string;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    readonly definedTags: {[key: string]: any};
    /**
     * Detect anomaly job description.
     */
    readonly description: string;
    readonly detectAnomalyJobId: string;
    /**
     * Detect anomaly job display name.
     */
    readonly displayName: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    readonly freeformTags: {[key: string]: any};
    /**
     * Id of the job.
     */
    readonly id: string;
    /**
     * Input details for detect anomaly job.
     */
    readonly inputDetails: outputs.AiAnomalyDetection.GetDetectAnomalyJobInputDetail[];
    /**
     * The current state details of the batch document job.
     */
    readonly lifecycleStateDetails: string;
    /**
     * The OCID of the trained model.
     */
    readonly modelId: string;
    /**
     * Output details for detect anomaly job.
     */
    readonly outputDetails: outputs.AiAnomalyDetection.GetDetectAnomalyJobOutputDetail[];
    /**
     * The OCID of the project.
     */
    readonly projectId: string;
    /**
     * The value that customer can adjust to control the sensitivity of anomaly detection
     */
    readonly sensitivity: number;
    /**
     * The current state of the batch document job.
     */
    readonly state: string;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    readonly systemTags: {[key: string]: any};
    /**
     * Job accepted time
     */
    readonly timeAccepted: string;
    /**
     * Job finished time
     */
    readonly timeFinished: string;
    /**
     * Job started time
     */
    readonly timeStarted: string;
}
/**
 * This data source provides details about a specific Detect Anomaly Job resource in Oracle Cloud Infrastructure Ai Anomaly Detection service.
 *
 * Gets a detect anomaly asynchronous job by identifier.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDetectAnomalyJob = oci.AiAnomalyDetection.getDetectAnomalyJob({
 *     detectAnomalyJobId: testDetectAnomalyJobOciAiAnomalyDetectionDetectAnomalyJob.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getDetectAnomalyJobOutput(args: GetDetectAnomalyJobOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDetectAnomalyJobResult> {
    return pulumi.output(args).apply((a: any) => getDetectAnomalyJob(a, opts))
}

/**
 * A collection of arguments for invoking getDetectAnomalyJob.
 */
export interface GetDetectAnomalyJobOutputArgs {
    /**
     * Unique asynchronous job identifier.
     */
    detectAnomalyJobId: pulumi.Input<string>;
}
