// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Processor Job resource in Oracle Cloud Infrastructure Ai Document service.
 *
 * Create a processor job for document analysis.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testProcessorJob = new oci.aidocument.ProcessorJob("testProcessorJob", {
 *     compartmentId: _var.compartment_id,
 *     inputLocation: {
 *         sourceType: _var.processor_job_input_location_source_type,
 *         data: _var.processor_job_input_location_data,
 *         objectLocations: [{
 *             bucket: _var.processor_job_input_location_object_locations_bucket,
 *             namespace: _var.processor_job_input_location_object_locations_namespace,
 *             object: _var.processor_job_input_location_object_locations_object,
 *         }],
 *     },
 *     outputLocation: {
 *         bucket: _var.processor_job_output_location_bucket,
 *         namespace: _var.processor_job_output_location_namespace,
 *         prefix: _var.processor_job_output_location_prefix,
 *     },
 *     processorConfig: {
 *         features: [{
 *             featureType: _var.processor_job_processor_config_features_feature_type,
 *             generateSearchablePdf: _var.processor_job_processor_config_features_generate_searchable_pdf,
 *             maxResults: _var.processor_job_processor_config_features_max_results,
 *             modelId: oci_ai_document_model.test_model.id,
 *             tenancyId: oci_identity_tenancy.test_tenancy.id,
 *         }],
 *         processorType: _var.processor_job_processor_config_processor_type,
 *         documentType: _var.processor_job_processor_config_document_type,
 *         isZipOutputEnabled: _var.processor_job_processor_config_is_zip_output_enabled,
 *         language: _var.processor_job_processor_config_language,
 *     },
 *     displayName: _var.processor_job_display_name,
 * });
 * ```
 *
 * ## Import
 *
 * ProcessorJobs can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:AiDocument/processorJob:ProcessorJob test_processor_job "id"
 * ```
 */
export class ProcessorJob extends pulumi.CustomResource {
    /**
     * Get an existing ProcessorJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProcessorJobState, opts?: pulumi.CustomResourceOptions): ProcessorJob {
        return new ProcessorJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:AiDocument/processorJob:ProcessorJob';

    /**
     * Returns true if the given object is an instance of ProcessorJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProcessorJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProcessorJob.__pulumiType;
    }

    /**
     * The compartment identifier.
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * The display name of the processor job.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * The location of the inputs.
     */
    public readonly inputLocation!: pulumi.Output<outputs.AiDocument.ProcessorJobInputLocation>;
    /**
     * The detailed status of FAILED state.
     */
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string | undefined>;
    /**
     * The object storage location where to store analysis results.
     */
    public readonly outputLocation!: pulumi.Output<outputs.AiDocument.ProcessorJobOutputLocation>;
    /**
     * How much progress the operation has made, compared to the total amount of work to be performed.
     */
    public /*out*/ readonly percentComplete!: pulumi.Output<number | undefined>;
    /**
     * The configuration of a processor.
     */
    public readonly processorConfig!: pulumi.Output<outputs.AiDocument.ProcessorJobProcessorConfig>;
    /**
     * The current state of the processor job.
     */
    public /*out*/ readonly state!: pulumi.Output<string | undefined>;
    /**
     * The job acceptance time.
     */
    public /*out*/ readonly timeAccepted!: pulumi.Output<string | undefined>;
    /**
     * The job finish time.
     */
    public /*out*/ readonly timeFinished!: pulumi.Output<string | undefined>;
    /**
     * The job start time.
     */
    public /*out*/ readonly timeStarted!: pulumi.Output<string | undefined>;

    /**
     * Create a ProcessorJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProcessorJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProcessorJobArgs | ProcessorJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProcessorJobState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["inputLocation"] = state ? state.inputLocation : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["outputLocation"] = state ? state.outputLocation : undefined;
            resourceInputs["percentComplete"] = state ? state.percentComplete : undefined;
            resourceInputs["processorConfig"] = state ? state.processorConfig : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeAccepted"] = state ? state.timeAccepted : undefined;
            resourceInputs["timeFinished"] = state ? state.timeFinished : undefined;
            resourceInputs["timeStarted"] = state ? state.timeStarted : undefined;
        } else {
            const args = argsOrState as ProcessorJobArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.inputLocation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputLocation'");
            }
            if ((!args || args.outputLocation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'outputLocation'");
            }
            if ((!args || args.processorConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processorConfig'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["inputLocation"] = args ? args.inputLocation : undefined;
            resourceInputs["outputLocation"] = args ? args.outputLocation : undefined;
            resourceInputs["processorConfig"] = args ? args.processorConfig : undefined;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["percentComplete"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeAccepted"] = undefined /*out*/;
            resourceInputs["timeFinished"] = undefined /*out*/;
            resourceInputs["timeStarted"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProcessorJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProcessorJob resources.
 */
export interface ProcessorJobState {
    /**
     * The compartment identifier.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * The display name of the processor job.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The location of the inputs.
     */
    inputLocation?: pulumi.Input<inputs.AiDocument.ProcessorJobInputLocation>;
    /**
     * The detailed status of FAILED state.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * The object storage location where to store analysis results.
     */
    outputLocation?: pulumi.Input<inputs.AiDocument.ProcessorJobOutputLocation>;
    /**
     * How much progress the operation has made, compared to the total amount of work to be performed.
     */
    percentComplete?: pulumi.Input<number>;
    /**
     * The configuration of a processor.
     */
    processorConfig?: pulumi.Input<inputs.AiDocument.ProcessorJobProcessorConfig>;
    /**
     * The current state of the processor job.
     */
    state?: pulumi.Input<string>;
    /**
     * The job acceptance time.
     */
    timeAccepted?: pulumi.Input<string>;
    /**
     * The job finish time.
     */
    timeFinished?: pulumi.Input<string>;
    /**
     * The job start time.
     */
    timeStarted?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProcessorJob resource.
 */
export interface ProcessorJobArgs {
    /**
     * The compartment identifier.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * The display name of the processor job.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The location of the inputs.
     */
    inputLocation: pulumi.Input<inputs.AiDocument.ProcessorJobInputLocation>;
    /**
     * The object storage location where to store analysis results.
     */
    outputLocation: pulumi.Input<inputs.AiDocument.ProcessorJobOutputLocation>;
    /**
     * The configuration of a processor.
     */
    processorConfig: pulumi.Input<inputs.AiDocument.ProcessorJobProcessorConfig>;
}
