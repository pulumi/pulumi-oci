// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Processor Job resource in Oracle Cloud Infrastructure Ai Document service.
 *
 * Create a processor job for document analysis.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testProcessorJob = new oci.aidocument.ProcessorJob("test_processor_job", {
 *     compartmentId: compartmentId,
 *     inputLocation: {
 *         sourceType: processorJobInputLocationSourceType,
 *         data: processorJobInputLocationData,
 *         objectLocations: [{
 *             bucket: processorJobInputLocationObjectLocationsBucket,
 *             namespace: processorJobInputLocationObjectLocationsNamespace,
 *             object: processorJobInputLocationObjectLocationsObject,
 *             pageRanges: processorJobInputLocationObjectLocationsPageRange,
 *         }],
 *         pageRanges: processorJobInputLocationPageRange,
 *     },
 *     outputLocation: {
 *         bucket: processorJobOutputLocationBucket,
 *         namespace: processorJobOutputLocationNamespace,
 *         prefix: processorJobOutputLocationPrefix,
 *     },
 *     processorConfig: {
 *         processorType: processorJobProcessorConfigProcessorType,
 *         documentType: processorJobProcessorConfigDocumentType,
 *         features: [{
 *             featureType: processorJobProcessorConfigFeaturesFeatureType,
 *             generateSearchablePdf: processorJobProcessorConfigFeaturesGenerateSearchablePdf,
 *             maxResults: processorJobProcessorConfigFeaturesMaxResults,
 *             modelId: testModel.id,
 *             selectionMarkDetection: processorJobProcessorConfigFeaturesSelectionMarkDetection,
 *             tenancyId: testTenancy.id,
 *         }],
 *         isZipOutputEnabled: processorJobProcessorConfigIsZipOutputEnabled,
 *         language: processorJobProcessorConfigLanguage,
 *         modelId: testModel.id,
 *         normalizationFields: [{
 *             maps: [{
 *                 normalizationType: processorJobProcessorConfigNormalizationFieldsMapNormalizationType,
 *             }],
 *         }],
 *     },
 *     displayName: processorJobDisplayName,
 * });
 * ```
 *
 * ## Import
 *
 * ProcessorJobs can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:AiDocument/processorJob:ProcessorJob test_processor_job "id"
 * ```
 */
export class ProcessorJob extends pulumi.CustomResource {
    /**
     * Get an existing ProcessorJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProcessorJobState, opts?: pulumi.CustomResourceOptions): ProcessorJob {
        return new ProcessorJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:AiDocument/processorJob:ProcessorJob';

    /**
     * Returns true if the given object is an instance of ProcessorJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProcessorJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProcessorJob.__pulumiType;
    }

    /**
     * The compartment identifier.
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * The display name of the processor job.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * The location of the inputs.
     */
    declare public readonly inputLocation: pulumi.Output<outputs.AiDocument.ProcessorJobInputLocation>;
    /**
     * The detailed status of FAILED state.
     */
    declare public /*out*/ readonly lifecycleDetails: pulumi.Output<string>;
    /**
     * The object storage location where to store analysis results.
     */
    declare public readonly outputLocation: pulumi.Output<outputs.AiDocument.ProcessorJobOutputLocation>;
    /**
     * How much progress the operation has made, compared to the total amount of work to be performed.
     */
    declare public /*out*/ readonly percentComplete: pulumi.Output<number>;
    /**
     * The configuration of a processor.
     */
    declare public readonly processorConfig: pulumi.Output<outputs.AiDocument.ProcessorJobProcessorConfig>;
    /**
     * The current state of the processor job.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The job acceptance time.
     */
    declare public /*out*/ readonly timeAccepted: pulumi.Output<string>;
    /**
     * The job finish time.
     */
    declare public /*out*/ readonly timeFinished: pulumi.Output<string>;
    /**
     * The job start time.
     */
    declare public /*out*/ readonly timeStarted: pulumi.Output<string>;

    /**
     * Create a ProcessorJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProcessorJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProcessorJobArgs | ProcessorJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProcessorJobState | undefined;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["inputLocation"] = state?.inputLocation;
            resourceInputs["lifecycleDetails"] = state?.lifecycleDetails;
            resourceInputs["outputLocation"] = state?.outputLocation;
            resourceInputs["percentComplete"] = state?.percentComplete;
            resourceInputs["processorConfig"] = state?.processorConfig;
            resourceInputs["state"] = state?.state;
            resourceInputs["timeAccepted"] = state?.timeAccepted;
            resourceInputs["timeFinished"] = state?.timeFinished;
            resourceInputs["timeStarted"] = state?.timeStarted;
        } else {
            const args = argsOrState as ProcessorJobArgs | undefined;
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.inputLocation === undefined && !opts.urn) {
                throw new Error("Missing required property 'inputLocation'");
            }
            if (args?.outputLocation === undefined && !opts.urn) {
                throw new Error("Missing required property 'outputLocation'");
            }
            if (args?.processorConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'processorConfig'");
            }
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["inputLocation"] = args?.inputLocation;
            resourceInputs["outputLocation"] = args?.outputLocation;
            resourceInputs["processorConfig"] = args?.processorConfig;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["percentComplete"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeAccepted"] = undefined /*out*/;
            resourceInputs["timeFinished"] = undefined /*out*/;
            resourceInputs["timeStarted"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProcessorJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProcessorJob resources.
 */
export interface ProcessorJobState {
    /**
     * The compartment identifier.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * The display name of the processor job.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The location of the inputs.
     */
    inputLocation?: pulumi.Input<inputs.AiDocument.ProcessorJobInputLocation>;
    /**
     * The detailed status of FAILED state.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * The object storage location where to store analysis results.
     */
    outputLocation?: pulumi.Input<inputs.AiDocument.ProcessorJobOutputLocation>;
    /**
     * How much progress the operation has made, compared to the total amount of work to be performed.
     */
    percentComplete?: pulumi.Input<number>;
    /**
     * The configuration of a processor.
     */
    processorConfig?: pulumi.Input<inputs.AiDocument.ProcessorJobProcessorConfig>;
    /**
     * The current state of the processor job.
     */
    state?: pulumi.Input<string>;
    /**
     * The job acceptance time.
     */
    timeAccepted?: pulumi.Input<string>;
    /**
     * The job finish time.
     */
    timeFinished?: pulumi.Input<string>;
    /**
     * The job start time.
     */
    timeStarted?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProcessorJob resource.
 */
export interface ProcessorJobArgs {
    /**
     * The compartment identifier.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * The display name of the processor job.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The location of the inputs.
     */
    inputLocation: pulumi.Input<inputs.AiDocument.ProcessorJobInputLocation>;
    /**
     * The object storage location where to store analysis results.
     */
    outputLocation: pulumi.Input<inputs.AiDocument.ProcessorJobOutputLocation>;
    /**
     * The configuration of a processor.
     */
    processorConfig: pulumi.Input<inputs.AiDocument.ProcessorJobProcessorConfig>;
}
