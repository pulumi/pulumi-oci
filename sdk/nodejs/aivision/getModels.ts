// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Models in Oracle Cloud Infrastructure Ai Vision service.
 *
 * Returns a list of Models.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testModels = oci.AiVision.getModels({
 *     compartmentId: _var.compartment_id,
 *     displayName: _var.model_display_name,
 *     id: _var.model_id,
 *     projectId: oci_ai_vision_project.test_project.id,
 *     state: _var.model_state,
 * });
 * ```
 */
export function getModels(args?: GetModelsArgs, opts?: pulumi.InvokeOptions): Promise<GetModelsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:AiVision/getModels:getModels", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "projectId": args.projectId,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getModels.
 */
export interface GetModelsArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.AiVision.GetModelsFilter[];
    /**
     * unique Model identifier
     */
    id?: string;
    /**
     * The ID of the project for which to list the objects.
     */
    projectId?: string;
    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     */
    state?: string;
}

/**
 * A collection of values returned by getModels.
 */
export interface GetModelsResult {
    /**
     * Compartment Identifier
     */
    readonly compartmentId?: string;
    /**
     * Model Identifier, can be renamed
     */
    readonly displayName?: string;
    readonly filters?: outputs.AiVision.GetModelsFilter[];
    /**
     * Unique identifier that is immutable on creation
     */
    readonly id?: string;
    /**
     * The list of model_collection.
     */
    readonly modelCollections?: outputs.AiVision.GetModelsModelCollection[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate with the model.
     */
    readonly projectId?: string;
    /**
     * The current state of the Model.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Models in Oracle Cloud Infrastructure Ai Vision service.
 *
 * Returns a list of Models.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testModels = oci.AiVision.getModels({
 *     compartmentId: _var.compartment_id,
 *     displayName: _var.model_display_name,
 *     id: _var.model_id,
 *     projectId: oci_ai_vision_project.test_project.id,
 *     state: _var.model_state,
 * });
 * ```
 */
export function getModelsOutput(args?: GetModelsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetModelsResult> {
    return pulumi.output(args).apply((a: any) => getModels(a, opts))
}

/**
 * A collection of arguments for invoking getModels.
 */
export interface GetModelsOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.AiVision.GetModelsFilterArgs>[]>;
    /**
     * unique Model identifier
     */
    id?: pulumi.Input<string>;
    /**
     * The ID of the project for which to list the objects.
     */
    projectId?: pulumi.Input<string>;
    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     */
    state?: pulumi.Input<string>;
}
