// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Vision Private Endpoints in Oracle Cloud Infrastructure Ai Vision service.
 *
 * Returns a list of visionPrivateEndpoints.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testVisionPrivateEndpoints = oci.AiVision.getVisionPrivateEndpoints({
 *     compartmentId: compartmentId,
 *     displayName: visionPrivateEndpointDisplayName,
 *     id: visionPrivateEndpointId,
 *     state: visionPrivateEndpointState,
 * });
 * ```
 */
export function getVisionPrivateEndpoints(args?: GetVisionPrivateEndpointsArgs, opts?: pulumi.InvokeOptions): Promise<GetVisionPrivateEndpointsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:AiVision/getVisionPrivateEndpoints:getVisionPrivateEndpoints", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getVisionPrivateEndpoints.
 */
export interface GetVisionPrivateEndpointsArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.AiVision.GetVisionPrivateEndpointsFilter[];
    /**
     * The filter to find the device with the given identifier.
     */
    id?: string;
    /**
     * The filter to match projects with the given lifecycleState.
     */
    state?: string;
}

/**
 * A collection of values returned by getVisionPrivateEndpoints.
 */
export interface GetVisionPrivateEndpointsResult {
    /**
     * A compartment identifier.
     */
    readonly compartmentId?: string;
    /**
     * A human-friendly name for the visionPrivateEndpoint, which can be changed.
     */
    readonly displayName?: string;
    readonly filters?: outputs.AiVision.GetVisionPrivateEndpointsFilter[];
    /**
     * [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of private endpoint
     */
    readonly id?: string;
    /**
     * The current state of the visionPrivateEndpoint.
     */
    readonly state?: string;
    /**
     * The list of vision_private_endpoint_collection.
     */
    readonly visionPrivateEndpointCollections: outputs.AiVision.GetVisionPrivateEndpointsVisionPrivateEndpointCollection[];
}
/**
 * This data source provides the list of Vision Private Endpoints in Oracle Cloud Infrastructure Ai Vision service.
 *
 * Returns a list of visionPrivateEndpoints.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testVisionPrivateEndpoints = oci.AiVision.getVisionPrivateEndpoints({
 *     compartmentId: compartmentId,
 *     displayName: visionPrivateEndpointDisplayName,
 *     id: visionPrivateEndpointId,
 *     state: visionPrivateEndpointState,
 * });
 * ```
 */
export function getVisionPrivateEndpointsOutput(args?: GetVisionPrivateEndpointsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVisionPrivateEndpointsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:AiVision/getVisionPrivateEndpoints:getVisionPrivateEndpoints", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getVisionPrivateEndpoints.
 */
export interface GetVisionPrivateEndpointsOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.AiVision.GetVisionPrivateEndpointsFilterArgs>[]>;
    /**
     * The filter to find the device with the given identifier.
     */
    id?: pulumi.Input<string>;
    /**
     * The filter to match projects with the given lifecycleState.
     */
    state?: pulumi.Input<string>;
}
