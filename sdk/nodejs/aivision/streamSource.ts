// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Stream Source resource in Oracle Cloud Infrastructure Ai Vision service.
 *
 * Registration of new streamSource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testStreamSource = new oci.aivision.StreamSource("test_stream_source", {
 *     compartmentId: compartmentId,
 *     streamSourceDetails: {
 *         cameraUrl: streamSourceStreamSourceDetailsCameraUrl,
 *         sourceType: streamSourceStreamSourceDetailsSourceType,
 *         streamNetworkAccessDetails: {
 *             privateEndpointId: testPrivateEndpoint.id,
 *             streamAccessType: streamSourceStreamSourceDetailsStreamNetworkAccessDetailsStreamAccessType,
 *         },
 *         secretId: testSecret.id,
 *     },
 *     definedTags: streamSourceDefinedTags,
 *     displayName: streamSourceDisplayName,
 *     freeformTags: streamSourceFreeformTags,
 * });
 * ```
 *
 * ## Import
 *
 * StreamSources can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:AiVision/streamSource:StreamSource test_stream_source "id"
 * ```
 */
export class StreamSource extends pulumi.CustomResource {
    /**
     * Get an existing StreamSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamSourceState, opts?: pulumi.CustomResourceOptions): StreamSource {
        return new StreamSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:AiVision/streamSource:StreamSource';

    /**
     * Returns true if the given object is an instance of StreamSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamSource.__pulumiType;
    }

    /**
     * (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
     */
    declare public readonly definedTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) A human-friendly name for the streamSource.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
     */
    declare public readonly freeformTags: pulumi.Output<{[key: string]: string}>;
    /**
     * The current state of the streamSource.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * (Updatable) Details about a stream source
     */
    declare public readonly streamSourceDetails: pulumi.Output<outputs.AiVision.StreamSourceStreamSourceDetails>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
     */
    declare public /*out*/ readonly systemTags: pulumi.Output<{[key: string]: string}>;
    /**
     * When the streamSource was created, as an RFC3339 datetime string.
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * When the streamSource was updated, as an RFC3339 datetime string.
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;

    /**
     * Create a StreamSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamSourceArgs | StreamSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamSourceState | undefined;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["definedTags"] = state?.definedTags;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["freeformTags"] = state?.freeformTags;
            resourceInputs["state"] = state?.state;
            resourceInputs["streamSourceDetails"] = state?.streamSourceDetails;
            resourceInputs["systemTags"] = state?.systemTags;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
        } else {
            const args = argsOrState as StreamSourceArgs | undefined;
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.streamSourceDetails === undefined && !opts.urn) {
                throw new Error("Missing required property 'streamSourceDetails'");
            }
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["definedTags"] = args?.definedTags;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["freeformTags"] = args?.freeformTags;
            resourceInputs["streamSourceDetails"] = args?.streamSourceDetails;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamSource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StreamSource resources.
 */
export interface StreamSourceState {
    /**
     * (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A human-friendly name for the streamSource.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The current state of the streamSource.
     */
    state?: pulumi.Input<string>;
    /**
     * (Updatable) Details about a stream source
     */
    streamSourceDetails?: pulumi.Input<inputs.AiVision.StreamSourceStreamSourceDetails>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
     */
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * When the streamSource was created, as an RFC3339 datetime string.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * When the streamSource was updated, as an RFC3339 datetime string.
     */
    timeUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StreamSource resource.
 */
export interface StreamSourceArgs {
    /**
     * (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A human-friendly name for the streamSource.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Details about a stream source
     */
    streamSourceDetails: pulumi.Input<inputs.AiVision.StreamSourceStreamSourceDetails>;
}
