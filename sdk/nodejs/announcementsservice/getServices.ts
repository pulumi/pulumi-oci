// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Services in Oracle Cloud Infrastructure.
 *
 * List all OCI services
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testServices = oci.AnnouncementsService.getServices({
 *     compartmentId: compartmentId,
 *     commsManagerName: serviceCommsManagerName,
 *     platformType: servicePlatformType,
 * });
 * ```
 */
export function getServices(args: GetServicesArgs, opts?: pulumi.InvokeOptions): Promise<GetServicesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:AnnouncementsService/getServices:getServices", {
        "commsManagerName": args.commsManagerName,
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "platformType": args.platformType,
    }, opts);
}

/**
 * A collection of arguments for invoking getServices.
 */
export interface GetServicesArgs {
    /**
     * Filter by comms manager name
     */
    commsManagerName?: string;
    /**
     * The OCID of the root compartment/tenancy.
     */
    compartmentId: string;
    filters?: inputs.AnnouncementsService.GetServicesFilter[];
    /**
     * A filter to return only services underlying a specific platform.
     */
    platformType?: string;
}

/**
 * A collection of values returned by getServices.
 */
export interface GetServicesResult {
    /**
     * Name of the comms manager team that manages Notifications to this service.
     */
    readonly commsManagerName?: string;
    readonly compartmentId: string;
    readonly filters?: outputs.AnnouncementsService.GetServicesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The platform type this service object is related to.
     */
    readonly platformType?: string;
    /**
     * The list of services_collection.
     */
    readonly servicesCollections: outputs.AnnouncementsService.GetServicesServicesCollection[];
}
/**
 * This data source provides the list of Services in Oracle Cloud Infrastructure.
 *
 * List all OCI services
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testServices = oci.AnnouncementsService.getServices({
 *     compartmentId: compartmentId,
 *     commsManagerName: serviceCommsManagerName,
 *     platformType: servicePlatformType,
 * });
 * ```
 */
export function getServicesOutput(args: GetServicesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServicesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:AnnouncementsService/getServices:getServices", {
        "commsManagerName": args.commsManagerName,
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "platformType": args.platformType,
    }, opts);
}

/**
 * A collection of arguments for invoking getServices.
 */
export interface GetServicesOutputArgs {
    /**
     * Filter by comms manager name
     */
    commsManagerName?: pulumi.Input<string>;
    /**
     * The OCID of the root compartment/tenancy.
     */
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.AnnouncementsService.GetServicesFilterArgs>[]>;
    /**
     * A filter to return only services underlying a specific platform.
     */
    platformType?: pulumi.Input<string>;
}
