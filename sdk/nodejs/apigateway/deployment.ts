// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Deployment resource in Oracle Cloud Infrastructure API Gateway service.
 *
 * Creates a new deployment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDeployment = new oci.apigateway.Deployment("test_deployment", {
 *     compartmentId: compartmentId,
 *     gatewayId: testGateway.id,
 *     pathPrefix: deploymentPathPrefix,
 *     specification: {
 *         loggingPolicies: {
 *             accessLog: {
 *                 isEnabled: deploymentSpecificationLoggingPoliciesAccessLogIsEnabled,
 *             },
 *             executionLog: {
 *                 isEnabled: deploymentSpecificationLoggingPoliciesExecutionLogIsEnabled,
 *                 logLevel: deploymentSpecificationLoggingPoliciesExecutionLogLogLevel,
 *             },
 *         },
 *         requestPolicies: {
 *             authentication: {
 *                 type: deploymentSpecificationRequestPoliciesAuthenticationType,
 *                 audiences: deploymentSpecificationRequestPoliciesAuthenticationAudiences,
 *                 cacheKeys: deploymentSpecificationRequestPoliciesAuthenticationCacheKey,
 *                 functionId: testFunction.id,
 *                 isAnonymousAccessAllowed: deploymentSpecificationRequestPoliciesAuthenticationIsAnonymousAccessAllowed,
 *                 issuers: deploymentSpecificationRequestPoliciesAuthenticationIssuers,
 *                 maxClockSkewInSeconds: deploymentSpecificationRequestPoliciesAuthenticationMaxClockSkewInSeconds,
 *                 parameters: deploymentSpecificationRequestPoliciesAuthenticationParameters,
 *                 publicKeys: {
 *                     type: deploymentSpecificationRequestPoliciesAuthenticationPublicKeysType,
 *                     isSslVerifyDisabled: deploymentSpecificationRequestPoliciesAuthenticationPublicKeysIsSslVerifyDisabled,
 *                     keys: [{
 *                         format: deploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeysFormat,
 *                         alg: deploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeysAlg,
 *                         e: deploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeysE,
 *                         key: deploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeysKey,
 *                         keyOps: deploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeysKeyOps,
 *                         kid: deploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeysKid,
 *                         kty: deploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeysKty,
 *                         n: deploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeysN,
 *                         use: deploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeysUse,
 *                     }],
 *                     maxCacheDurationInHours: deploymentSpecificationRequestPoliciesAuthenticationPublicKeysMaxCacheDurationInHours,
 *                     uri: deploymentSpecificationRequestPoliciesAuthenticationPublicKeysUri,
 *                 },
 *                 tokenAuthScheme: deploymentSpecificationRequestPoliciesAuthenticationTokenAuthScheme,
 *                 tokenHeader: deploymentSpecificationRequestPoliciesAuthenticationTokenHeader,
 *                 tokenQueryParam: deploymentSpecificationRequestPoliciesAuthenticationTokenQueryParam,
 *                 validationFailurePolicy: {
 *                     type: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyType,
 *                     clientDetails: {
 *                         type: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetailsType,
 *                         clientId: testClient.id,
 *                         clientSecretId: testSecret.id,
 *                         clientSecretVersionNumber: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetailsClientSecretVersionNumber,
 *                     },
 *                     fallbackRedirectPath: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyFallbackRedirectPath,
 *                     logoutPath: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyLogoutPath,
 *                     maxExpiryDurationInHours: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyMaxExpiryDurationInHours,
 *                     responseCode: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseCode,
 *                     responseHeaderTransformations: {
 *                         filterHeaders: {
 *                             items: [{
 *                                 name: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemsName,
 *                             }],
 *                             type: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersType,
 *                         },
 *                         renameHeaders: {
 *                             items: [{
 *                                 from: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemsFrom,
 *                                 to: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemsTo,
 *                             }],
 *                         },
 *                         setHeaders: {
 *                             items: [{
 *                                 ifExists: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemsIfExists,
 *                                 name: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemsName,
 *                                 values: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemsValues,
 *                             }],
 *                         },
 *                     },
 *                     responseMessage: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseMessage,
 *                     responseType: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseType,
 *                     scopes: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyScopes,
 *                     sourceUriDetails: {
 *                         type: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetailsType,
 *                         uri: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetailsUri,
 *                     },
 *                     useCookiesForIntermediateSteps: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyUseCookiesForIntermediateSteps,
 *                     useCookiesForSession: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyUseCookiesForSession,
 *                     usePkce: deploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyUsePkce,
 *                 },
 *                 validationPolicy: {
 *                     type: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyType,
 *                     additionalValidationPolicy: {
 *                         audiences: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyAudiences,
 *                         issuers: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyIssuers,
 *                         verifyClaims: [{
 *                             isRequired: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimsIsRequired,
 *                             key: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimsKey,
 *                             values: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimsValues,
 *                         }],
 *                     },
 *                     clientDetails: {
 *                         type: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetailsType,
 *                         clientId: testClient.id,
 *                         clientSecretId: testSecret.id,
 *                         clientSecretVersionNumber: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetailsClientSecretVersionNumber,
 *                     },
 *                     isSslVerifyDisabled: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyIsSslVerifyDisabled,
 *                     keys: [{
 *                         format: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeysFormat,
 *                         alg: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeysAlg,
 *                         e: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeysE,
 *                         key: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeysKey,
 *                         keyOps: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeysKeyOps,
 *                         kid: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeysKid,
 *                         kty: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeysKty,
 *                         n: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeysN,
 *                         use: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeysUse,
 *                     }],
 *                     maxCacheDurationInHours: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyMaxCacheDurationInHours,
 *                     sourceUriDetails: {
 *                         type: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetailsType,
 *                         uri: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetailsUri,
 *                     },
 *                     uri: deploymentSpecificationRequestPoliciesAuthenticationValidationPolicyUri,
 *                 },
 *                 verifyClaims: [{
 *                     isRequired: deploymentSpecificationRequestPoliciesAuthenticationVerifyClaimsIsRequired,
 *                     key: deploymentSpecificationRequestPoliciesAuthenticationVerifyClaimsKey,
 *                     values: deploymentSpecificationRequestPoliciesAuthenticationVerifyClaimsValues,
 *                 }],
 *             },
 *             cors: {
 *                 allowedOrigins: deploymentSpecificationRequestPoliciesCorsAllowedOrigins,
 *                 allowedHeaders: deploymentSpecificationRequestPoliciesCorsAllowedHeaders,
 *                 allowedMethods: deploymentSpecificationRequestPoliciesCorsAllowedMethods,
 *                 exposedHeaders: deploymentSpecificationRequestPoliciesCorsExposedHeaders,
 *                 isAllowCredentialsEnabled: deploymentSpecificationRequestPoliciesCorsIsAllowCredentialsEnabled,
 *                 maxAgeInSeconds: deploymentSpecificationRequestPoliciesCorsMaxAgeInSeconds,
 *             },
 *             dynamicAuthentication: {
 *                 authenticationServers: [{
 *                     authenticationServerDetail: {
 *                         type: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailType,
 *                         audiences: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailAudiences,
 *                         functionId: testFunction.id,
 *                         isAnonymousAccessAllowed: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailIsAnonymousAccessAllowed,
 *                         issuers: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailIssuers,
 *                         maxClockSkewInSeconds: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailMaxClockSkewInSeconds,
 *                         publicKeys: {
 *                             type: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailPublicKeysType,
 *                             isSslVerifyDisabled: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailPublicKeysIsSslVerifyDisabled,
 *                             keys: [{
 *                                 format: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailPublicKeysKeysFormat,
 *                                 alg: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailPublicKeysKeysAlg,
 *                                 e: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailPublicKeysKeysE,
 *                                 key: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailPublicKeysKeysKey,
 *                                 keyOps: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailPublicKeysKeysKeyOps,
 *                                 kid: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailPublicKeysKeysKid,
 *                                 kty: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailPublicKeysKeysKty,
 *                                 n: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailPublicKeysKeysN,
 *                                 use: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailPublicKeysKeysUse,
 *                             }],
 *                             maxCacheDurationInHours: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailPublicKeysMaxCacheDurationInHours,
 *                             uri: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailPublicKeysUri,
 *                         },
 *                         tokenAuthScheme: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailTokenAuthScheme,
 *                         tokenHeader: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailTokenHeader,
 *                         tokenQueryParam: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailTokenQueryParam,
 *                         validationFailurePolicy: {
 *                             type: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyType,
 *                             clientDetails: {
 *                                 type: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyClientDetailsType,
 *                                 clientId: testClient.id,
 *                                 clientSecretId: testSecret.id,
 *                                 clientSecretVersionNumber: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyClientDetailsClientSecretVersionNumber,
 *                             },
 *                             fallbackRedirectPath: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyFallbackRedirectPath,
 *                             logoutPath: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyLogoutPath,
 *                             maxExpiryDurationInHours: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyMaxExpiryDurationInHours,
 *                             responseCode: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyResponseCode,
 *                             responseHeaderTransformations: {
 *                                 filterHeaders: {
 *                                     items: [{
 *                                         name: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemsName,
 *                                     }],
 *                                     type: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersType,
 *                                 },
 *                                 renameHeaders: {
 *                                     items: [{
 *                                         from: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemsFrom,
 *                                         to: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemsTo,
 *                                     }],
 *                                 },
 *                                 setHeaders: {
 *                                     items: [{
 *                                         ifExists: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemsIfExists,
 *                                         name: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemsName,
 *                                         values: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemsValues,
 *                                     }],
 *                                 },
 *                             },
 *                             responseMessage: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyResponseMessage,
 *                             responseType: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyResponseType,
 *                             scopes: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyScopes,
 *                             sourceUriDetails: {
 *                                 type: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicySourceUriDetailsType,
 *                                 uri: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicySourceUriDetailsUri,
 *                             },
 *                             useCookiesForIntermediateSteps: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyUseCookiesForIntermediateSteps,
 *                             useCookiesForSession: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyUseCookiesForSession,
 *                             usePkce: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationFailurePolicyUsePkce,
 *                         },
 *                         validationPolicy: {
 *                             type: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyType,
 *                             additionalValidationPolicy: {
 *                                 audiences: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyAudiences,
 *                                 issuers: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyIssuers,
 *                                 verifyClaims: [{
 *                                     isRequired: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimsIsRequired,
 *                                     key: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimsKey,
 *                                     values: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimsValues,
 *                                 }],
 *                             },
 *                             clientDetails: {
 *                                 type: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyClientDetailsType,
 *                                 clientId: testClient.id,
 *                                 clientSecretId: testSecret.id,
 *                                 clientSecretVersionNumber: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyClientDetailsClientSecretVersionNumber,
 *                             },
 *                             isSslVerifyDisabled: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyIsSslVerifyDisabled,
 *                             keys: [{
 *                                 format: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyKeysFormat,
 *                                 alg: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyKeysAlg,
 *                                 e: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyKeysE,
 *                                 key: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyKeysKey,
 *                                 keyOps: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyKeysKeyOps,
 *                                 kid: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyKeysKid,
 *                                 kty: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyKeysKty,
 *                                 n: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyKeysN,
 *                                 use: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyKeysUse,
 *                             }],
 *                             maxCacheDurationInHours: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyMaxCacheDurationInHours,
 *                             sourceUriDetails: {
 *                                 type: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicySourceUriDetailsType,
 *                                 uri: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicySourceUriDetailsUri,
 *                             },
 *                             uri: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailValidationPolicyUri,
 *                         },
 *                         verifyClaims: [{
 *                             isRequired: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailVerifyClaimsIsRequired,
 *                             key: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailVerifyClaimsKey,
 *                             values: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersAuthenticationServerDetailVerifyClaimsValues,
 *                         }],
 *                     },
 *                     key: {
 *                         name: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersKeyName,
 *                         expression: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersKeyExpression,
 *                         isDefault: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersKeyIsDefault,
 *                         type: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersKeyType,
 *                         values: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersKeyValues,
 *                     },
 *                 }],
 *                 selectionSource: {
 *                     selector: deploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSourceSelector,
 *                     type: deploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSourceType,
 *                 },
 *             },
 *             mutualTls: {
 *                 allowedSans: deploymentSpecificationRequestPoliciesMutualTlsAllowedSans,
 *                 isVerifiedCertificateRequired: deploymentSpecificationRequestPoliciesMutualTlsIsVerifiedCertificateRequired,
 *             },
 *             rateLimiting: {
 *                 rateInRequestsPerSecond: deploymentSpecificationRequestPoliciesRateLimitingRateInRequestsPerSecond,
 *                 rateKey: deploymentSpecificationRequestPoliciesRateLimitingRateKey,
 *             },
 *             usagePlans: {
 *                 tokenLocations: deploymentSpecificationRequestPoliciesUsagePlansTokenLocations,
 *             },
 *         },
 *         routes: [{
 *             backend: {
 *                 type: deploymentSpecificationRoutesBackendType,
 *                 allowedPostLogoutUris: deploymentSpecificationRoutesBackendAllowedPostLogoutUris,
 *                 body: deploymentSpecificationRoutesBackendBody,
 *                 connectTimeoutInSeconds: deploymentSpecificationRoutesBackendConnectTimeoutInSeconds,
 *                 functionId: testFunction.id,
 *                 headers: [{
 *                     name: deploymentSpecificationRoutesBackendHeadersName,
 *                     value: deploymentSpecificationRoutesBackendHeadersValue,
 *                 }],
 *                 isSslVerifyDisabled: deploymentSpecificationRoutesBackendIsSslVerifyDisabled,
 *                 postLogoutState: deploymentSpecificationRoutesBackendPostLogoutState,
 *                 readTimeoutInSeconds: deploymentSpecificationRoutesBackendReadTimeoutInSeconds,
 *                 routingBackends: [{
 *                     backend: {
 *                         type: deploymentSpecificationRoutesBackendRoutingBackendsBackendType,
 *                         body: deploymentSpecificationRoutesBackendRoutingBackendsBackendBody,
 *                         connectTimeoutInSeconds: deploymentSpecificationRoutesBackendRoutingBackendsBackendConnectTimeoutInSeconds,
 *                         functionId: testFunction.id,
 *                         headers: [{
 *                             name: deploymentSpecificationRoutesBackendRoutingBackendsBackendHeadersName,
 *                             value: deploymentSpecificationRoutesBackendRoutingBackendsBackendHeadersValue,
 *                         }],
 *                         isSslVerifyDisabled: deploymentSpecificationRoutesBackendRoutingBackendsBackendIsSslVerifyDisabled,
 *                         readTimeoutInSeconds: deploymentSpecificationRoutesBackendRoutingBackendsBackendReadTimeoutInSeconds,
 *                         sendTimeoutInSeconds: deploymentSpecificationRoutesBackendRoutingBackendsBackendSendTimeoutInSeconds,
 *                         status: deploymentSpecificationRoutesBackendRoutingBackendsBackendStatus,
 *                         url: deploymentSpecificationRoutesBackendRoutingBackendsBackendUrl,
 *                     },
 *                     key: {
 *                         name: deploymentSpecificationRoutesBackendRoutingBackendsKeyName,
 *                         type: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersKeyType,
 *                         expression: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersKeyExpression,
 *                         isDefault: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersKeyIsDefault,
 *                         values: deploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServersKeyValues,
 *                     },
 *                 }],
 *                 selectionSource: {
 *                     selector: deploymentSpecificationRoutesBackendSelectionSourceSelector,
 *                     type: deploymentSpecificationRoutesBackendSelectionSourceType,
 *                 },
 *                 sendTimeoutInSeconds: deploymentSpecificationRoutesBackendSendTimeoutInSeconds,
 *                 status: deploymentSpecificationRoutesBackendStatus,
 *                 url: deploymentSpecificationRoutesBackendUrl,
 *             },
 *             path: deploymentSpecificationRoutesPath,
 *             loggingPolicies: {
 *                 accessLog: {
 *                     isEnabled: deploymentSpecificationRoutesLoggingPoliciesAccessLogIsEnabled,
 *                 },
 *                 executionLog: {
 *                     isEnabled: deploymentSpecificationRoutesLoggingPoliciesExecutionLogIsEnabled,
 *                     logLevel: deploymentSpecificationRoutesLoggingPoliciesExecutionLogLogLevel,
 *                 },
 *             },
 *             methods: deploymentSpecificationRoutesMethods,
 *             requestPolicies: {
 *                 authorization: {
 *                     allowedScopes: deploymentSpecificationRoutesRequestPoliciesAuthorizationAllowedScope,
 *                     type: deploymentSpecificationRoutesRequestPoliciesAuthorizationType,
 *                 },
 *                 bodyValidation: {
 *                     contents: [{
 *                         mediaType: deploymentSpecificationRoutesRequestPoliciesBodyValidationContentMediaType,
 *                         validationType: deploymentSpecificationRoutesRequestPoliciesBodyValidationContentValidationType,
 *                     }],
 *                     required: deploymentSpecificationRoutesRequestPoliciesBodyValidationRequired,
 *                     validationMode: deploymentSpecificationRoutesRequestPoliciesBodyValidationValidationMode,
 *                 },
 *                 cors: {
 *                     allowedOrigins: deploymentSpecificationRoutesRequestPoliciesCorsAllowedOrigins,
 *                     allowedHeaders: deploymentSpecificationRoutesRequestPoliciesCorsAllowedHeaders,
 *                     allowedMethods: deploymentSpecificationRoutesRequestPoliciesCorsAllowedMethods,
 *                     exposedHeaders: deploymentSpecificationRoutesRequestPoliciesCorsExposedHeaders,
 *                     isAllowCredentialsEnabled: deploymentSpecificationRoutesRequestPoliciesCorsIsAllowCredentialsEnabled,
 *                     maxAgeInSeconds: deploymentSpecificationRoutesRequestPoliciesCorsMaxAgeInSeconds,
 *                 },
 *                 headerTransformations: {
 *                     filterHeaders: {
 *                         items: [{
 *                             name: deploymentSpecificationRoutesRequestPoliciesHeaderTransformationsFilterHeadersItemsName,
 *                         }],
 *                         type: deploymentSpecificationRoutesRequestPoliciesHeaderTransformationsFilterHeadersType,
 *                     },
 *                     renameHeaders: {
 *                         items: [{
 *                             from: deploymentSpecificationRoutesRequestPoliciesHeaderTransformationsRenameHeadersItemsFrom,
 *                             to: deploymentSpecificationRoutesRequestPoliciesHeaderTransformationsRenameHeadersItemsTo,
 *                         }],
 *                     },
 *                     setHeaders: {
 *                         items: [{
 *                             name: deploymentSpecificationRoutesRequestPoliciesHeaderTransformationsSetHeadersItemsName,
 *                             values: deploymentSpecificationRoutesRequestPoliciesHeaderTransformationsSetHeadersItemsValues,
 *                             ifExists: deploymentSpecificationRoutesRequestPoliciesHeaderTransformationsSetHeadersItemsIfExists,
 *                         }],
 *                     },
 *                 },
 *                 headerValidations: {
 *                     headers: [{
 *                         name: deploymentSpecificationRoutesRequestPoliciesHeaderValidationsHeadersName,
 *                         required: deploymentSpecificationRoutesRequestPoliciesHeaderValidationsHeadersRequired,
 *                     }],
 *                     validationMode: deploymentSpecificationRoutesRequestPoliciesHeaderValidationsValidationMode,
 *                 },
 *                 queryParameterTransformations: {
 *                     filterQueryParameters: {
 *                         items: [{
 *                             name: deploymentSpecificationRoutesRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemsName,
 *                         }],
 *                         type: deploymentSpecificationRoutesRequestPoliciesQueryParameterTransformationsFilterQueryParametersType,
 *                     },
 *                     renameQueryParameters: {
 *                         items: [{
 *                             from: deploymentSpecificationRoutesRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemsFrom,
 *                             to: deploymentSpecificationRoutesRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemsTo,
 *                         }],
 *                     },
 *                     setQueryParameters: {
 *                         items: [{
 *                             name: deploymentSpecificationRoutesRequestPoliciesQueryParameterTransformationsSetQueryParametersItemsName,
 *                             values: deploymentSpecificationRoutesRequestPoliciesQueryParameterTransformationsSetQueryParametersItemsValues,
 *                             ifExists: deploymentSpecificationRoutesRequestPoliciesQueryParameterTransformationsSetQueryParametersItemsIfExists,
 *                         }],
 *                     },
 *                 },
 *                 queryParameterValidations: {
 *                     parameters: [{
 *                         name: deploymentSpecificationRoutesRequestPoliciesQueryParameterValidationsParametersName,
 *                         required: deploymentSpecificationRoutesRequestPoliciesQueryParameterValidationsParametersRequired,
 *                     }],
 *                     validationMode: deploymentSpecificationRoutesRequestPoliciesQueryParameterValidationsValidationMode,
 *                 },
 *                 responseCacheLookup: {
 *                     type: deploymentSpecificationRoutesRequestPoliciesResponseCacheLookupType,
 *                     cacheKeyAdditions: deploymentSpecificationRoutesRequestPoliciesResponseCacheLookupCacheKeyAdditions,
 *                     isEnabled: deploymentSpecificationRoutesRequestPoliciesResponseCacheLookupIsEnabled,
 *                     isPrivateCachingEnabled: deploymentSpecificationRoutesRequestPoliciesResponseCacheLookupIsPrivateCachingEnabled,
 *                 },
 *             },
 *             responsePolicies: {
 *                 headerTransformations: {
 *                     filterHeaders: {
 *                         items: [{
 *                             name: deploymentSpecificationRoutesResponsePoliciesHeaderTransformationsFilterHeadersItemsName,
 *                         }],
 *                         type: deploymentSpecificationRoutesResponsePoliciesHeaderTransformationsFilterHeadersType,
 *                     },
 *                     renameHeaders: {
 *                         items: [{
 *                             from: deploymentSpecificationRoutesResponsePoliciesHeaderTransformationsRenameHeadersItemsFrom,
 *                             to: deploymentSpecificationRoutesResponsePoliciesHeaderTransformationsRenameHeadersItemsTo,
 *                         }],
 *                     },
 *                     setHeaders: {
 *                         items: [{
 *                             name: deploymentSpecificationRoutesResponsePoliciesHeaderTransformationsSetHeadersItemsName,
 *                             values: deploymentSpecificationRoutesResponsePoliciesHeaderTransformationsSetHeadersItemsValues,
 *                             ifExists: deploymentSpecificationRoutesResponsePoliciesHeaderTransformationsSetHeadersItemsIfExists,
 *                         }],
 *                     },
 *                 },
 *                 responseCacheStore: {
 *                     timeToLiveInSeconds: deploymentSpecificationRoutesResponsePoliciesResponseCacheStoreTimeToLiveInSeconds,
 *                     type: deploymentSpecificationRoutesResponsePoliciesResponseCacheStoreType,
 *                 },
 *             },
 *         }],
 *     },
 *     definedTags: {
 *         "Operations.CostCenter": "42",
 *     },
 *     displayName: deploymentDisplayName,
 *     freeformTags: {
 *         Department: "Finance",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Deployments can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:ApiGateway/deployment:Deployment test_deployment "id"
 * ```
 */
export class Deployment extends pulumi.CustomResource {
    /**
     * Get an existing Deployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeploymentState, opts?: pulumi.CustomResourceOptions): Deployment {
        return new Deployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:ApiGateway/deployment:Deployment';

    /**
     * Returns true if the given object is an instance of Deployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Deployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Deployment.__pulumiType;
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the resource is created.
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
     */
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The endpoint to access this deployment on the gateway.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
     */
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
     */
    public readonly gatewayId!: pulumi.Output<string>;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed state.
     */
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    /**
     * A path on which to deploy all routes contained in the API deployment specification. For more information, see [Deploying an API on an API Gateway by Creating an API Deployment](https://docs.cloud.oracle.com/iaas/Content/APIGateway/Tasks/apigatewaycreatingdeployment.htm).
     */
    public readonly pathPrefix!: pulumi.Output<string>;
    /**
     * (Updatable) The logical configuration of the API exposed by a deployment.
     */
    public readonly specification!: pulumi.Output<outputs.ApiGateway.DeploymentSpecification>;
    /**
     * The current state of the deployment.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The time this resource was created. An RFC3339 formatted datetime string.
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The time this resource was last updated. An RFC3339 formatted datetime string.
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;

    /**
     * Create a Deployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeploymentArgs | DeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeploymentState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["pathPrefix"] = state ? state.pathPrefix : undefined;
            resourceInputs["specification"] = state ? state.specification : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
        } else {
            const args = argsOrState as DeploymentArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.gatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            if ((!args || args.pathPrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pathPrefix'");
            }
            if ((!args || args.specification === undefined) && !opts.urn) {
                throw new Error("Missing required property 'specification'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["gatewayId"] = args ? args.gatewayId : undefined;
            resourceInputs["pathPrefix"] = args ? args.pathPrefix : undefined;
            resourceInputs["specification"] = args ? args.specification : undefined;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Deployment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Deployment resources.
 */
export interface DeploymentState {
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the resource is created.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
     */
    displayName?: pulumi.Input<string>;
    /**
     * The endpoint to access this deployment on the gateway.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
     */
    gatewayId?: pulumi.Input<string>;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed state.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * A path on which to deploy all routes contained in the API deployment specification. For more information, see [Deploying an API on an API Gateway by Creating an API Deployment](https://docs.cloud.oracle.com/iaas/Content/APIGateway/Tasks/apigatewaycreatingdeployment.htm).
     */
    pathPrefix?: pulumi.Input<string>;
    /**
     * (Updatable) The logical configuration of the API exposed by a deployment.
     */
    specification?: pulumi.Input<inputs.ApiGateway.DeploymentSpecification>;
    /**
     * The current state of the deployment.
     */
    state?: pulumi.Input<string>;
    /**
     * The time this resource was created. An RFC3339 formatted datetime string.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time this resource was last updated. An RFC3339 formatted datetime string.
     */
    timeUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Deployment resource.
 */
export interface DeploymentArgs {
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the resource is created.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
     */
    gatewayId: pulumi.Input<string>;
    /**
     * A path on which to deploy all routes contained in the API deployment specification. For more information, see [Deploying an API on an API Gateway by Creating an API Deployment](https://docs.cloud.oracle.com/iaas/Content/APIGateway/Tasks/apigatewaycreatingdeployment.htm).
     */
    pathPrefix: pulumi.Input<string>;
    /**
     * (Updatable) The logical configuration of the API exposed by a deployment.
     */
    specification: pulumi.Input<inputs.ApiGateway.DeploymentSpecification>;
}
