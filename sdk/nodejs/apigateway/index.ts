// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApiArgs, ApiState } from "./api";
export type Api = import("./api").Api;
export const Api: typeof import("./api").Api = null as any;
utilities.lazyLoad(exports, ["Api"], () => require("./api"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { DeploymentArgs, DeploymentState } from "./deployment";
export type Deployment = import("./deployment").Deployment;
export const Deployment: typeof import("./deployment").Deployment = null as any;
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));

export { GatewayArgs, GatewayState } from "./gateway";
export type Gateway = import("./gateway").Gateway;
export const Gateway: typeof import("./gateway").Gateway = null as any;
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));

export { GetApiArgs, GetApiResult, GetApiOutputArgs } from "./getApi";
export const getApi: typeof import("./getApi").getApi = null as any;
export const getApiOutput: typeof import("./getApi").getApiOutput = null as any;
utilities.lazyLoad(exports, ["getApi","getApiOutput"], () => require("./getApi"));

export { GetApiContentArgs, GetApiContentResult, GetApiContentOutputArgs } from "./getApiContent";
export const getApiContent: typeof import("./getApiContent").getApiContent = null as any;
export const getApiContentOutput: typeof import("./getApiContent").getApiContentOutput = null as any;
utilities.lazyLoad(exports, ["getApiContent","getApiContentOutput"], () => require("./getApiContent"));

export { GetApiDeploymentSpecificationArgs, GetApiDeploymentSpecificationResult, GetApiDeploymentSpecificationOutputArgs } from "./getApiDeploymentSpecification";
export const getApiDeploymentSpecification: typeof import("./getApiDeploymentSpecification").getApiDeploymentSpecification = null as any;
export const getApiDeploymentSpecificationOutput: typeof import("./getApiDeploymentSpecification").getApiDeploymentSpecificationOutput = null as any;
utilities.lazyLoad(exports, ["getApiDeploymentSpecification","getApiDeploymentSpecificationOutput"], () => require("./getApiDeploymentSpecification"));

export { GetApiValidationArgs, GetApiValidationResult, GetApiValidationOutputArgs } from "./getApiValidation";
export const getApiValidation: typeof import("./getApiValidation").getApiValidation = null as any;
export const getApiValidationOutput: typeof import("./getApiValidation").getApiValidationOutput = null as any;
utilities.lazyLoad(exports, ["getApiValidation","getApiValidationOutput"], () => require("./getApiValidation"));

export { GetApisArgs, GetApisResult, GetApisOutputArgs } from "./getApis";
export const getApis: typeof import("./getApis").getApis = null as any;
export const getApisOutput: typeof import("./getApis").getApisOutput = null as any;
utilities.lazyLoad(exports, ["getApis","getApisOutput"], () => require("./getApis"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetCertificatesArgs, GetCertificatesResult, GetCertificatesOutputArgs } from "./getCertificates";
export const getCertificates: typeof import("./getCertificates").getCertificates = null as any;
export const getCertificatesOutput: typeof import("./getCertificates").getCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getCertificates","getCertificatesOutput"], () => require("./getCertificates"));

export { GetDeploymentArgs, GetDeploymentResult, GetDeploymentOutputArgs } from "./getDeployment";
export const getDeployment: typeof import("./getDeployment").getDeployment = null as any;
export const getDeploymentOutput: typeof import("./getDeployment").getDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getDeployment","getDeploymentOutput"], () => require("./getDeployment"));

export { GetDeploymentsArgs, GetDeploymentsResult, GetDeploymentsOutputArgs } from "./getDeployments";
export const getDeployments: typeof import("./getDeployments").getDeployments = null as any;
export const getDeploymentsOutput: typeof import("./getDeployments").getDeploymentsOutput = null as any;
utilities.lazyLoad(exports, ["getDeployments","getDeploymentsOutput"], () => require("./getDeployments"));

export { GetGatewayArgs, GetGatewayResult, GetGatewayOutputArgs } from "./getGateway";
export const getGateway: typeof import("./getGateway").getGateway = null as any;
export const getGatewayOutput: typeof import("./getGateway").getGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getGateway","getGatewayOutput"], () => require("./getGateway"));

export { GetGatewaysArgs, GetGatewaysResult, GetGatewaysOutputArgs } from "./getGateways";
export const getGateways: typeof import("./getGateways").getGateways = null as any;
export const getGatewaysOutput: typeof import("./getGateways").getGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getGateways","getGatewaysOutput"], () => require("./getGateways"));

export { GetSubscriberArgs, GetSubscriberResult, GetSubscriberOutputArgs } from "./getSubscriber";
export const getSubscriber: typeof import("./getSubscriber").getSubscriber = null as any;
export const getSubscriberOutput: typeof import("./getSubscriber").getSubscriberOutput = null as any;
utilities.lazyLoad(exports, ["getSubscriber","getSubscriberOutput"], () => require("./getSubscriber"));

export { GetSubscribersArgs, GetSubscribersResult, GetSubscribersOutputArgs } from "./getSubscribers";
export const getSubscribers: typeof import("./getSubscribers").getSubscribers = null as any;
export const getSubscribersOutput: typeof import("./getSubscribers").getSubscribersOutput = null as any;
utilities.lazyLoad(exports, ["getSubscribers","getSubscribersOutput"], () => require("./getSubscribers"));

export { GetUsagePlanArgs, GetUsagePlanResult, GetUsagePlanOutputArgs } from "./getUsagePlan";
export const getUsagePlan: typeof import("./getUsagePlan").getUsagePlan = null as any;
export const getUsagePlanOutput: typeof import("./getUsagePlan").getUsagePlanOutput = null as any;
utilities.lazyLoad(exports, ["getUsagePlan","getUsagePlanOutput"], () => require("./getUsagePlan"));

export { GetUsagePlansArgs, GetUsagePlansResult, GetUsagePlansOutputArgs } from "./getUsagePlans";
export const getUsagePlans: typeof import("./getUsagePlans").getUsagePlans = null as any;
export const getUsagePlansOutput: typeof import("./getUsagePlans").getUsagePlansOutput = null as any;
utilities.lazyLoad(exports, ["getUsagePlans","getUsagePlansOutput"], () => require("./getUsagePlans"));

export { SubscriberArgs, SubscriberState } from "./subscriber";
export type Subscriber = import("./subscriber").Subscriber;
export const Subscriber: typeof import("./subscriber").Subscriber = null as any;
utilities.lazyLoad(exports, ["Subscriber"], () => require("./subscriber"));

export { UsagePlanArgs, UsagePlanState } from "./usagePlan";
export type UsagePlan = import("./usagePlan").UsagePlan;
export const UsagePlan: typeof import("./usagePlan").UsagePlan = null as any;
utilities.lazyLoad(exports, ["UsagePlan"], () => require("./usagePlan"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:ApiGateway/api:Api":
                return new Api(name, <any>undefined, { urn })
            case "oci:ApiGateway/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "oci:ApiGateway/deployment:Deployment":
                return new Deployment(name, <any>undefined, { urn })
            case "oci:ApiGateway/gateway:Gateway":
                return new Gateway(name, <any>undefined, { urn })
            case "oci:ApiGateway/subscriber:Subscriber":
                return new Subscriber(name, <any>undefined, { urn })
            case "oci:ApiGateway/usagePlan:UsagePlan":
                return new UsagePlan(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "ApiGateway/api", _module)
pulumi.runtime.registerResourceModule("oci", "ApiGateway/certificate", _module)
pulumi.runtime.registerResourceModule("oci", "ApiGateway/deployment", _module)
pulumi.runtime.registerResourceModule("oci", "ApiGateway/gateway", _module)
pulumi.runtime.registerResourceModule("oci", "ApiGateway/subscriber", _module)
pulumi.runtime.registerResourceModule("oci", "ApiGateway/usagePlan", _module)
