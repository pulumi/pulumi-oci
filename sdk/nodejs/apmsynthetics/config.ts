// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This resource provides the Monitor resource in Oracle Cloud Infrastructure Apm Synthetics service.
 *
 * Creates a new monitor.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMonitor = new oci.apmsynthetics.Config("testMonitor", {
 *     apmDomainId: oci_apm_synthetics_apm_domain.test_apm_domain.id,
 *     displayName: _var.monitor_display_name,
 *     monitorType: _var.monitor_monitor_type,
 *     repeatIntervalInSeconds: _var.monitor_repeat_interval_in_seconds,
 *     vantagePoints: [],
 *     configuration: {
 *         configType: _var.monitor_configuration_config_type,
 *         isCertificateValidationEnabled: _var.monitor_configuration_is_certificate_validation_enabled,
 *         isFailureRetried: _var.monitor_configuration_is_failure_retried,
 *         isRedirectionEnabled: _var.monitor_configuration_is_redirection_enabled,
 *         networkConfiguration: {
 *             numberOfHops: _var.monitor_configuration_network_configuration_number_of_hops,
 *             probeMode: _var.monitor_configuration_network_configuration_probe_mode,
 *             probePerHop: _var.monitor_configuration_network_configuration_probe_per_hop,
 *             protocol: _var.monitor_configuration_network_configuration_protocol,
 *             transmissionRate: _var.monitor_configuration_network_configuration_transmission_rate,
 *         },
 *         reqAuthenticationDetails: {
 *             authHeaders: [{
 *                 headerName: _var.monitor_configuration_req_authentication_details_auth_headers_header_name,
 *                 headerValue: _var.monitor_configuration_req_authentication_details_auth_headers_header_value,
 *             }],
 *             authRequestMethod: _var.monitor_configuration_req_authentication_details_auth_request_method,
 *             authRequestPostBody: _var.monitor_configuration_req_authentication_details_auth_request_post_body,
 *             authToken: _var.monitor_configuration_req_authentication_details_auth_token,
 *             authUrl: _var.monitor_configuration_req_authentication_details_auth_url,
 *             authUserName: oci_identity_user.test_user.name,
 *             authUserPassword: _var.monitor_configuration_req_authentication_details_auth_user_password,
 *             oauthScheme: _var.monitor_configuration_req_authentication_details_oauth_scheme,
 *         },
 *         reqAuthenticationScheme: _var.monitor_configuration_req_authentication_scheme,
 *         requestHeaders: [{
 *             headerName: _var.monitor_configuration_request_headers_header_name,
 *             headerValue: _var.monitor_configuration_request_headers_header_value,
 *         }],
 *         requestMethod: _var.monitor_configuration_request_method,
 *         requestPostBody: _var.monitor_configuration_request_post_body,
 *         requestQueryParams: [{
 *             paramName: _var.monitor_configuration_request_query_params_param_name,
 *             paramValue: _var.monitor_configuration_request_query_params_param_value,
 *         }],
 *         verifyResponseCodes: _var.monitor_configuration_verify_response_codes,
 *         verifyResponseContent: _var.monitor_configuration_verify_response_content,
 *         verifyTexts: [{
 *             text: _var.monitor_configuration_verify_texts_text,
 *         }],
 *     },
 *     definedTags: {
 *         "foo-namespace.bar-key": "value",
 *     },
 *     freeformTags: {
 *         "bar-key": "value",
 *     },
 *     isRunOnce: _var.monitor_is_run_once,
 *     scriptId: oci_apm_synthetics_script.test_script.id,
 *     scriptParameters: [{
 *         paramName: _var.monitor_script_parameters_param_name,
 *         paramValue: _var.monitor_script_parameters_param_value,
 *     }],
 *     status: _var.monitor_status,
 *     target: _var.monitor_target,
 *     timeoutInSeconds: _var.monitor_timeout_in_seconds,
 * });
 * ```
 *
 * ## Import
 *
 * Monitors can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:ApmSynthetics/config:Config test_monitor "monitors/{monitorId}/apmDomainId/{apmDomainId}"
 * ```
 */
export class Config extends pulumi.CustomResource {
    /**
     * Get an existing Config resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigState, opts?: pulumi.CustomResourceOptions): Config {
        return new Config(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:ApmSynthetics/config:Config';

    /**
     * Returns true if the given object is an instance of Config.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Config {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Config.__pulumiType;
    }

    /**
     * (Updatable) The APM domain ID the request is intended for.
     */
    public readonly apmDomainId!: pulumi.Output<string>;
    /**
     * (Updatable) Details of monitor configuration.
     */
    public readonly configuration!: pulumi.Output<outputs.ApmSynthetics.ConfigConfiguration>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    public readonly definedTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * (Updatable) Unique name that can be edited. The name should not contain any confidential information.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    public readonly freeformTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * (Updatable) If runOnce is enabled, then the monitor will run once.
     */
    public readonly isRunOnce!: pulumi.Output<boolean>;
    /**
     * Type of monitor.
     */
    public readonly monitorType!: pulumi.Output<string>;
    /**
     * (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds.
     */
    public readonly repeatIntervalInSeconds!: pulumi.Output<number>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     */
    public readonly scriptId!: pulumi.Output<string>;
    /**
     * Name of the script.
     */
    public readonly scriptName!: pulumi.Output<string>;
    /**
     * (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{"paramName": "userid", "paramValue":"testuser"}]`
     */
    public readonly scriptParameters!: pulumi.Output<outputs.ApmSynthetics.ConfigScriptParameter[]>;
    /**
     * (Updatable) Enables or disables the monitor.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * (Updatable) Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is.
     */
    public readonly target!: pulumi.Output<string>;
    /**
     * The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    /**
     * (Updatable) Timeout in seconds. Timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
     */
    public readonly timeoutInSeconds!: pulumi.Output<number>;
    /**
     * Number of vantage points where monitor is running.
     */
    public /*out*/ readonly vantagePointCount!: pulumi.Output<number>;
    /**
     * (Updatable) A list of vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points.
     */
    public readonly vantagePoints!: pulumi.Output<string[]>;

    /**
     * Create a Config resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigArgs | ConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigState | undefined;
            resourceInputs["apmDomainId"] = state ? state.apmDomainId : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isRunOnce"] = state ? state.isRunOnce : undefined;
            resourceInputs["monitorType"] = state ? state.monitorType : undefined;
            resourceInputs["repeatIntervalInSeconds"] = state ? state.repeatIntervalInSeconds : undefined;
            resourceInputs["scriptId"] = state ? state.scriptId : undefined;
            resourceInputs["scriptName"] = state ? state.scriptName : undefined;
            resourceInputs["scriptParameters"] = state ? state.scriptParameters : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeoutInSeconds"] = state ? state.timeoutInSeconds : undefined;
            resourceInputs["vantagePointCount"] = state ? state.vantagePointCount : undefined;
            resourceInputs["vantagePoints"] = state ? state.vantagePoints : undefined;
        } else {
            const args = argsOrState as ConfigArgs | undefined;
            if ((!args || args.apmDomainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apmDomainId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.monitorType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorType'");
            }
            if ((!args || args.repeatIntervalInSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repeatIntervalInSeconds'");
            }
            if ((!args || args.vantagePoints === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vantagePoints'");
            }
            resourceInputs["apmDomainId"] = args ? args.apmDomainId : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isRunOnce"] = args ? args.isRunOnce : undefined;
            resourceInputs["monitorType"] = args ? args.monitorType : undefined;
            resourceInputs["repeatIntervalInSeconds"] = args ? args.repeatIntervalInSeconds : undefined;
            resourceInputs["scriptId"] = args ? args.scriptId : undefined;
            resourceInputs["scriptName"] = args ? args.scriptName : undefined;
            resourceInputs["scriptParameters"] = args ? args.scriptParameters : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["timeoutInSeconds"] = args ? args.timeoutInSeconds : undefined;
            resourceInputs["vantagePoints"] = args ? args.vantagePoints : undefined;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["vantagePointCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Config.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Config resources.
 */
export interface ConfigState {
    /**
     * (Updatable) The APM domain ID the request is intended for.
     */
    apmDomainId?: pulumi.Input<string>;
    /**
     * (Updatable) Details of monitor configuration.
     */
    configuration?: pulumi.Input<inputs.ApmSynthetics.ConfigConfiguration>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) Unique name that can be edited. The name should not contain any confidential information.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) If runOnce is enabled, then the monitor will run once.
     */
    isRunOnce?: pulumi.Input<boolean>;
    /**
     * Type of monitor.
     */
    monitorType?: pulumi.Input<string>;
    /**
     * (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds.
     */
    repeatIntervalInSeconds?: pulumi.Input<number>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     */
    scriptId?: pulumi.Input<string>;
    /**
     * Name of the script.
     */
    scriptName?: pulumi.Input<string>;
    /**
     * (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{"paramName": "userid", "paramValue":"testuser"}]`
     */
    scriptParameters?: pulumi.Input<pulumi.Input<inputs.ApmSynthetics.ConfigScriptParameter>[]>;
    /**
     * (Updatable) Enables or disables the monitor.
     */
    status?: pulumi.Input<string>;
    /**
     * (Updatable) Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is.
     */
    target?: pulumi.Input<string>;
    /**
     * The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * (Updatable) Timeout in seconds. Timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
     */
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * Number of vantage points where monitor is running.
     */
    vantagePointCount?: pulumi.Input<number>;
    /**
     * (Updatable) A list of vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points.
     */
    vantagePoints?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Config resource.
 */
export interface ConfigArgs {
    /**
     * (Updatable) The APM domain ID the request is intended for.
     */
    apmDomainId: pulumi.Input<string>;
    /**
     * (Updatable) Details of monitor configuration.
     */
    configuration?: pulumi.Input<inputs.ApmSynthetics.ConfigConfiguration>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) Unique name that can be edited. The name should not contain any confidential information.
     */
    displayName: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) If runOnce is enabled, then the monitor will run once.
     */
    isRunOnce?: pulumi.Input<boolean>;
    /**
     * Type of monitor.
     */
    monitorType: pulumi.Input<string>;
    /**
     * (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds.
     */
    repeatIntervalInSeconds: pulumi.Input<number>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     */
    scriptId?: pulumi.Input<string>;
    /**
     * Name of the script.
     */
    scriptName?: pulumi.Input<string>;
    /**
     * (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{"paramName": "userid", "paramValue":"testuser"}]`
     */
    scriptParameters?: pulumi.Input<pulumi.Input<inputs.ApmSynthetics.ConfigScriptParameter>[]>;
    /**
     * (Updatable) Enables or disables the monitor.
     */
    status?: pulumi.Input<string>;
    /**
     * (Updatable) Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is.
     */
    target?: pulumi.Input<string>;
    /**
     * (Updatable) Timeout in seconds. Timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
     */
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * (Updatable) A list of vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points.
     */
    vantagePoints: pulumi.Input<pulumi.Input<string>[]>;
}
