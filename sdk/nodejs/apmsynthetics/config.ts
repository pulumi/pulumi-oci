// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Monitor resource in Oracle Cloud Infrastructure APM Availability Monitoring service (aka APM Synthetics Service).
 *
 * Creates a new monitor.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMonitor = new oci.apmsynthetics.Config("test_monitor", {
 *     apmDomainId: testApmDomain.id,
 *     displayName: monitorDisplayName,
 *     monitorType: monitorMonitorType,
 *     repeatIntervalInSeconds: monitorRepeatIntervalInSeconds,
 *     vantagePoints: [{
 *         name: monitorVantagePointsName,
 *         displayName: monitorVantagePointsParamDisplayName,
 *     }],
 *     availabilityConfiguration: {
 *         maxAllowedFailuresPerInterval: monitorAvailabilityConfigurationMaxAllowedFailuresPerInterval,
 *         minAllowedRunsPerInterval: monitorAvailabilityConfigurationMinAllowedRunsPerInterval,
 *     },
 *     batchIntervalInSeconds: monitorBatchIntervalInSeconds,
 *     configuration: {
 *         clientCertificateDetails: {
 *             clientCertificate: {
 *                 content: monitorConfigurationClientCertificateDetailsClientCertificateContent,
 *                 fileName: monitorConfigurationClientCertificateDetailsClientCertificateFileName,
 *             },
 *             privateKey: {
 *                 content: monitorConfigurationClientCertificateDetailsPrivateKeyContent,
 *                 fileName: monitorConfigurationClientCertificateDetailsPrivateKeyFileName,
 *             },
 *         },
 *         configType: monitorConfigurationConfigType,
 *         connectionString: monitorConfigurationConnectionString,
 *         databaseAuthenticationDetails: {
 *             password: {
 *                 password: monitorConfigurationDatabaseAuthenticationDetailsPasswordPassword,
 *                 passwordType: monitorConfigurationDatabaseAuthenticationDetailsPasswordPasswordType,
 *                 vaultSecretId: testSecret.id,
 *             },
 *             username: monitorConfigurationDatabaseAuthenticationDetailsUsername,
 *         },
 *         databaseConnectionType: monitorConfigurationDatabaseConnectionType,
 *         databaseRole: monitorConfigurationDatabaseRole,
 *         databaseType: monitorConfigurationDatabaseType,
 *         databaseWalletDetails: {
 *             databaseWallet: monitorConfigurationDatabaseWalletDetailsDatabaseWallet,
 *             serviceName: testService.name,
 *         },
 *         dnsConfiguration: {
 *             isOverrideDns: monitorConfigurationDnsConfigurationIsOverrideDns,
 *             overrideDnsIp: monitorConfigurationDnsConfigurationOverrideDnsIp,
 *         },
 *         downloadSizeLimitInBytes: monitorConfigurationDownloadSizeLimitInBytes,
 *         ftpBasicAuthenticationDetails: {
 *             password: {
 *                 password: monitorConfigurationFtpBasicAuthenticationDetailsPasswordPassword,
 *                 passwordType: monitorConfigurationFtpBasicAuthenticationDetailsPasswordPasswordType,
 *                 vaultSecretId: testSecret.id,
 *             },
 *             username: monitorConfigurationFtpBasicAuthenticationDetailsUsername,
 *         },
 *         ftpProtocol: monitorConfigurationFtpProtocol,
 *         ftpRequestType: monitorConfigurationFtpRequestType,
 *         isActiveMode: monitorConfigurationIsActiveMode,
 *         isCertificateValidationEnabled: monitorConfigurationIsCertificateValidationEnabled,
 *         isDefaultSnapshotEnabled: monitorConfigurationIsDefaultSnapshotEnabled,
 *         isFailureRetried: monitorConfigurationIsFailureRetried,
 *         isQueryRecursive: monitorConfigurationIsQueryRecursive,
 *         isRedirectionEnabled: monitorConfigurationIsRedirectionEnabled,
 *         nameServer: monitorConfigurationNameServer,
 *         networkConfiguration: {
 *             numberOfHops: monitorConfigurationNetworkConfigurationNumberOfHops,
 *             probeMode: monitorConfigurationNetworkConfigurationProbeMode,
 *             probePerHop: monitorConfigurationNetworkConfigurationProbePerHop,
 *             protocol: monitorConfigurationNetworkConfigurationProtocol,
 *             transmissionRate: monitorConfigurationNetworkConfigurationTransmissionRate,
 *         },
 *         protocol: monitorConfigurationProtocol,
 *         query: monitorConfigurationQuery,
 *         recordType: monitorConfigurationRecordType,
 *         reqAuthenticationDetails: {
 *             authHeaders: [{
 *                 headerName: monitorConfigurationReqAuthenticationDetailsAuthHeadersHeaderName,
 *                 headerValue: monitorConfigurationReqAuthenticationDetailsAuthHeadersHeaderValue,
 *             }],
 *             authRequestMethod: monitorConfigurationReqAuthenticationDetailsAuthRequestMethod,
 *             authRequestPostBody: monitorConfigurationReqAuthenticationDetailsAuthRequestPostBody,
 *             authToken: monitorConfigurationReqAuthenticationDetailsAuthToken,
 *             authUrl: monitorConfigurationReqAuthenticationDetailsAuthUrl,
 *             authUserName: testUser.name,
 *             authUserPassword: monitorConfigurationReqAuthenticationDetailsAuthUserPassword,
 *             oauthScheme: monitorConfigurationReqAuthenticationDetailsOauthScheme,
 *         },
 *         reqAuthenticationScheme: monitorConfigurationReqAuthenticationScheme,
 *         requestHeaders: [{
 *             headerName: monitorConfigurationRequestHeadersHeaderName,
 *             headerValue: monitorConfigurationRequestHeadersHeaderValue,
 *         }],
 *         requestMethod: monitorConfigurationRequestMethod,
 *         requestPostBody: monitorConfigurationRequestPostBody,
 *         requestQueryParams: [{
 *             paramName: monitorConfigurationRequestQueryParamsParamName,
 *             paramValue: monitorConfigurationRequestQueryParamsParamValue,
 *         }],
 *         uploadFileSizeInBytes: monitorConfigurationUploadFileSizeInBytes,
 *         verifyResponseCodes: monitorConfigurationVerifyResponseCodes,
 *         verifyResponseContent: monitorConfigurationVerifyResponseContent,
 *         verifyTexts: [{
 *             text: monitorConfigurationVerifyTextsText,
 *         }],
 *     },
 *     definedTags: {
 *         "foo-namespace.bar-key": "value",
 *     },
 *     freeformTags: {
 *         "bar-key": "value",
 *     },
 *     isIpv6: monitorIsIpv6,
 *     isRunNow: monitorIsRunNow,
 *     isRunOnce: monitorIsRunOnce,
 *     maintenanceWindowSchedule: {
 *         timeEnded: monitorMaintenanceWindowScheduleTimeEnded,
 *         timeStarted: monitorMaintenanceWindowScheduleTimeStarted,
 *     },
 *     schedulingPolicy: monitorSchedulingPolicy,
 *     scriptId: testScript.id,
 *     scriptParameters: [{
 *         paramName: monitorScriptParametersParamName,
 *         paramValue: monitorScriptParametersParamValue,
 *     }],
 *     status: monitorStatus,
 *     target: monitorTarget,
 *     timeoutInSeconds: monitorTimeoutInSeconds,
 * });
 * ```
 *
 * ## Import
 *
 * Monitors can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:ApmSynthetics/config:Config test_monitor "monitors/{monitorId}/apmDomainId/{apmDomainId}"
 * ```
 */
export class Config extends pulumi.CustomResource {
    /**
     * Get an existing Config resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigState, opts?: pulumi.CustomResourceOptions): Config {
        return new Config(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:ApmSynthetics/config:Config';

    /**
     * Returns true if the given object is an instance of Config.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Config {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Config.__pulumiType;
    }

    /**
     * (Updatable) The APM domain ID the request is intended for.
     */
    declare public readonly apmDomainId: pulumi.Output<string>;
    /**
     * (Updatable) Monitor availability configuration details.
     */
    declare public readonly availabilityConfiguration: pulumi.Output<outputs.ApmSynthetics.ConfigAvailabilityConfiguration>;
    /**
     * (Updatable) Time interval between 2 runs in round robin batch mode (*SchedulingPolicy - BATCHED_ROUND_ROBIN).
     */
    declare public readonly batchIntervalInSeconds: pulumi.Output<number>;
    /**
     * (Updatable) Details of monitor configuration.
     */
    declare public readonly configuration: pulumi.Output<outputs.ApmSynthetics.ConfigConfiguration>;
    /**
     * Content type of the script.
     */
    declare public /*out*/ readonly contentType: pulumi.Output<string>;
    /**
     * Name of the user that created the monitor.
     */
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    declare public readonly definedTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) Unique name that can be edited. The name should not contain any confidential information.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    declare public readonly freeformTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) If enabled, domain name will resolve to an IPv6 address.
     */
    declare public readonly isIpv6: pulumi.Output<boolean>;
    /**
     * (Updatable) If isRunNow is enabled, then the monitor will run immediately.
     */
    declare public readonly isRunNow: pulumi.Output<boolean>;
    /**
     * (Updatable) If runOnce is enabled, then the monitor will run once.
     */
    declare public readonly isRunOnce: pulumi.Output<boolean>;
    /**
     * Name of the user that recently updated the monitor.
     */
    declare public /*out*/ readonly lastUpdatedBy: pulumi.Output<string>;
    /**
     * (Updatable) Details required to schedule maintenance window.
     */
    declare public readonly maintenanceWindowSchedule: pulumi.Output<outputs.ApmSynthetics.ConfigMaintenanceWindowSchedule>;
    /**
     * Type of monitor.
     */
    declare public readonly monitorType: pulumi.Output<string>;
    /**
     * (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds for Scripted REST, Scripted Browser and Browser monitors, and 60 seconds for REST monitor.
     */
    declare public readonly repeatIntervalInSeconds: pulumi.Output<number>;
    /**
     * (Updatable) Scheduling policy to decide the distribution of monitor executions on vantage points.
     */
    declare public readonly schedulingPolicy: pulumi.Output<string>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     */
    declare public readonly scriptId: pulumi.Output<string>;
    /**
     * Name of the script.
     */
    declare public readonly scriptName: pulumi.Output<string>;
    /**
     * (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{"paramName": "userid", "paramValue":"testuser"}]`
     */
    declare public readonly scriptParameters: pulumi.Output<outputs.ApmSynthetics.ConfigScriptParameter[]>;
    /**
     * (Updatable) Enables or disables the monitor.
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * (Updatable) Specify the endpoint on which to run the monitor. For BROWSER, REST, NETWORK, DNS and FTP monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is. For NETWORK monitor with TCP protocol, a port needs to be provided along with target. Example: 192.168.0.1:80.
     */
    declare public readonly target: pulumi.Output<string>;
    /**
     * The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;
    /**
     * (Updatable) Timeout in seconds. If isFailureRetried is true, then timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. If isFailureRetried is false, then timeout cannot be more than 50% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60 for Scripted REST, Scripted Browser and Browser monitors. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
     */
    declare public readonly timeoutInSeconds: pulumi.Output<number>;
    /**
     * Number of vantage points where monitor is running.
     */
    declare public /*out*/ readonly vantagePointCount: pulumi.Output<number>;
    /**
     * (Updatable) A list of public and dedicated vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points, and /dedicatedVantagePoints to fetch dedicated vantage points. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly vantagePoints: pulumi.Output<outputs.ApmSynthetics.ConfigVantagePoint[]>;

    /**
     * Create a Config resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigArgs | ConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigState | undefined;
            resourceInputs["apmDomainId"] = state?.apmDomainId;
            resourceInputs["availabilityConfiguration"] = state?.availabilityConfiguration;
            resourceInputs["batchIntervalInSeconds"] = state?.batchIntervalInSeconds;
            resourceInputs["configuration"] = state?.configuration;
            resourceInputs["contentType"] = state?.contentType;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["definedTags"] = state?.definedTags;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["freeformTags"] = state?.freeformTags;
            resourceInputs["isIpv6"] = state?.isIpv6;
            resourceInputs["isRunNow"] = state?.isRunNow;
            resourceInputs["isRunOnce"] = state?.isRunOnce;
            resourceInputs["lastUpdatedBy"] = state?.lastUpdatedBy;
            resourceInputs["maintenanceWindowSchedule"] = state?.maintenanceWindowSchedule;
            resourceInputs["monitorType"] = state?.monitorType;
            resourceInputs["repeatIntervalInSeconds"] = state?.repeatIntervalInSeconds;
            resourceInputs["schedulingPolicy"] = state?.schedulingPolicy;
            resourceInputs["scriptId"] = state?.scriptId;
            resourceInputs["scriptName"] = state?.scriptName;
            resourceInputs["scriptParameters"] = state?.scriptParameters;
            resourceInputs["status"] = state?.status;
            resourceInputs["target"] = state?.target;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
            resourceInputs["timeoutInSeconds"] = state?.timeoutInSeconds;
            resourceInputs["vantagePointCount"] = state?.vantagePointCount;
            resourceInputs["vantagePoints"] = state?.vantagePoints;
        } else {
            const args = argsOrState as ConfigArgs | undefined;
            if (args?.apmDomainId === undefined && !opts.urn) {
                throw new Error("Missing required property 'apmDomainId'");
            }
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.monitorType === undefined && !opts.urn) {
                throw new Error("Missing required property 'monitorType'");
            }
            if (args?.repeatIntervalInSeconds === undefined && !opts.urn) {
                throw new Error("Missing required property 'repeatIntervalInSeconds'");
            }
            if (args?.vantagePoints === undefined && !opts.urn) {
                throw new Error("Missing required property 'vantagePoints'");
            }
            resourceInputs["apmDomainId"] = args?.apmDomainId;
            resourceInputs["availabilityConfiguration"] = args?.availabilityConfiguration;
            resourceInputs["batchIntervalInSeconds"] = args?.batchIntervalInSeconds;
            resourceInputs["configuration"] = args?.configuration;
            resourceInputs["definedTags"] = args?.definedTags;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["freeformTags"] = args?.freeformTags;
            resourceInputs["isIpv6"] = args?.isIpv6;
            resourceInputs["isRunNow"] = args?.isRunNow;
            resourceInputs["isRunOnce"] = args?.isRunOnce;
            resourceInputs["maintenanceWindowSchedule"] = args?.maintenanceWindowSchedule;
            resourceInputs["monitorType"] = args?.monitorType;
            resourceInputs["repeatIntervalInSeconds"] = args?.repeatIntervalInSeconds;
            resourceInputs["schedulingPolicy"] = args?.schedulingPolicy;
            resourceInputs["scriptId"] = args?.scriptId;
            resourceInputs["scriptName"] = args?.scriptName;
            resourceInputs["scriptParameters"] = args?.scriptParameters;
            resourceInputs["status"] = args?.status;
            resourceInputs["target"] = args?.target;
            resourceInputs["timeoutInSeconds"] = args?.timeoutInSeconds;
            resourceInputs["vantagePoints"] = args?.vantagePoints;
            resourceInputs["contentType"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["lastUpdatedBy"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["vantagePointCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Config.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Config resources.
 */
export interface ConfigState {
    /**
     * (Updatable) The APM domain ID the request is intended for.
     */
    apmDomainId?: pulumi.Input<string>;
    /**
     * (Updatable) Monitor availability configuration details.
     */
    availabilityConfiguration?: pulumi.Input<inputs.ApmSynthetics.ConfigAvailabilityConfiguration>;
    /**
     * (Updatable) Time interval between 2 runs in round robin batch mode (*SchedulingPolicy - BATCHED_ROUND_ROBIN).
     */
    batchIntervalInSeconds?: pulumi.Input<number>;
    /**
     * (Updatable) Details of monitor configuration.
     */
    configuration?: pulumi.Input<inputs.ApmSynthetics.ConfigConfiguration>;
    /**
     * Content type of the script.
     */
    contentType?: pulumi.Input<string>;
    /**
     * Name of the user that created the monitor.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Unique name that can be edited. The name should not contain any confidential information.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) If enabled, domain name will resolve to an IPv6 address.
     */
    isIpv6?: pulumi.Input<boolean>;
    /**
     * (Updatable) If isRunNow is enabled, then the monitor will run immediately.
     */
    isRunNow?: pulumi.Input<boolean>;
    /**
     * (Updatable) If runOnce is enabled, then the monitor will run once.
     */
    isRunOnce?: pulumi.Input<boolean>;
    /**
     * Name of the user that recently updated the monitor.
     */
    lastUpdatedBy?: pulumi.Input<string>;
    /**
     * (Updatable) Details required to schedule maintenance window.
     */
    maintenanceWindowSchedule?: pulumi.Input<inputs.ApmSynthetics.ConfigMaintenanceWindowSchedule>;
    /**
     * Type of monitor.
     */
    monitorType?: pulumi.Input<string>;
    /**
     * (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds for Scripted REST, Scripted Browser and Browser monitors, and 60 seconds for REST monitor.
     */
    repeatIntervalInSeconds?: pulumi.Input<number>;
    /**
     * (Updatable) Scheduling policy to decide the distribution of monitor executions on vantage points.
     */
    schedulingPolicy?: pulumi.Input<string>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     */
    scriptId?: pulumi.Input<string>;
    /**
     * Name of the script.
     */
    scriptName?: pulumi.Input<string>;
    /**
     * (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{"paramName": "userid", "paramValue":"testuser"}]`
     */
    scriptParameters?: pulumi.Input<pulumi.Input<inputs.ApmSynthetics.ConfigScriptParameter>[]>;
    /**
     * (Updatable) Enables or disables the monitor.
     */
    status?: pulumi.Input<string>;
    /**
     * (Updatable) Specify the endpoint on which to run the monitor. For BROWSER, REST, NETWORK, DNS and FTP monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is. For NETWORK monitor with TCP protocol, a port needs to be provided along with target. Example: 192.168.0.1:80.
     */
    target?: pulumi.Input<string>;
    /**
     * The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * (Updatable) Timeout in seconds. If isFailureRetried is true, then timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. If isFailureRetried is false, then timeout cannot be more than 50% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60 for Scripted REST, Scripted Browser and Browser monitors. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
     */
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * Number of vantage points where monitor is running.
     */
    vantagePointCount?: pulumi.Input<number>;
    /**
     * (Updatable) A list of public and dedicated vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points, and /dedicatedVantagePoints to fetch dedicated vantage points. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    vantagePoints?: pulumi.Input<pulumi.Input<inputs.ApmSynthetics.ConfigVantagePoint>[]>;
}

/**
 * The set of arguments for constructing a Config resource.
 */
export interface ConfigArgs {
    /**
     * (Updatable) The APM domain ID the request is intended for.
     */
    apmDomainId: pulumi.Input<string>;
    /**
     * (Updatable) Monitor availability configuration details.
     */
    availabilityConfiguration?: pulumi.Input<inputs.ApmSynthetics.ConfigAvailabilityConfiguration>;
    /**
     * (Updatable) Time interval between 2 runs in round robin batch mode (*SchedulingPolicy - BATCHED_ROUND_ROBIN).
     */
    batchIntervalInSeconds?: pulumi.Input<number>;
    /**
     * (Updatable) Details of monitor configuration.
     */
    configuration?: pulumi.Input<inputs.ApmSynthetics.ConfigConfiguration>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Unique name that can be edited. The name should not contain any confidential information.
     */
    displayName: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) If enabled, domain name will resolve to an IPv6 address.
     */
    isIpv6?: pulumi.Input<boolean>;
    /**
     * (Updatable) If isRunNow is enabled, then the monitor will run immediately.
     */
    isRunNow?: pulumi.Input<boolean>;
    /**
     * (Updatable) If runOnce is enabled, then the monitor will run once.
     */
    isRunOnce?: pulumi.Input<boolean>;
    /**
     * (Updatable) Details required to schedule maintenance window.
     */
    maintenanceWindowSchedule?: pulumi.Input<inputs.ApmSynthetics.ConfigMaintenanceWindowSchedule>;
    /**
     * Type of monitor.
     */
    monitorType: pulumi.Input<string>;
    /**
     * (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds for Scripted REST, Scripted Browser and Browser monitors, and 60 seconds for REST monitor.
     */
    repeatIntervalInSeconds: pulumi.Input<number>;
    /**
     * (Updatable) Scheduling policy to decide the distribution of monitor executions on vantage points.
     */
    schedulingPolicy?: pulumi.Input<string>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     */
    scriptId?: pulumi.Input<string>;
    /**
     * Name of the script.
     */
    scriptName?: pulumi.Input<string>;
    /**
     * (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{"paramName": "userid", "paramValue":"testuser"}]`
     */
    scriptParameters?: pulumi.Input<pulumi.Input<inputs.ApmSynthetics.ConfigScriptParameter>[]>;
    /**
     * (Updatable) Enables or disables the monitor.
     */
    status?: pulumi.Input<string>;
    /**
     * (Updatable) Specify the endpoint on which to run the monitor. For BROWSER, REST, NETWORK, DNS and FTP monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is. For NETWORK monitor with TCP protocol, a port needs to be provided along with target. Example: 192.168.0.1:80.
     */
    target?: pulumi.Input<string>;
    /**
     * (Updatable) Timeout in seconds. If isFailureRetried is true, then timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. If isFailureRetried is false, then timeout cannot be more than 50% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60 for Scripted REST, Scripted Browser and Browser monitors. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
     */
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * (Updatable) A list of public and dedicated vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points, and /dedicatedVantagePoints to fetch dedicated vantage points. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    vantagePoints: pulumi.Input<pulumi.Input<inputs.ApmSynthetics.ConfigVantagePoint>[]>;
}
