// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Monitors in Oracle Cloud Infrastructure Apm Synthetics service.
 *
 * Returns a list of monitors.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMonitors = oci.ApmSynthetics.getMonitors({
 *     apmDomainId: testApmDomain.id,
 *     displayName: monitorDisplayName,
 *     isMaintenanceWindowActive: monitorIsMaintenanceWindowActive,
 *     isMaintenanceWindowSet: monitorIsMaintenanceWindowSet,
 *     monitorType: monitorMonitorType,
 *     scriptId: testScript.id,
 *     status: monitorStatus,
 *     vantagePoint: monitorVantagePoint,
 * });
 * ```
 */
export function getMonitors(args: GetMonitorsArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitorsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:ApmSynthetics/getMonitors:getMonitors", {
        "apmDomainId": args.apmDomainId,
        "displayName": args.displayName,
        "filters": args.filters,
        "isMaintenanceWindowActive": args.isMaintenanceWindowActive,
        "isMaintenanceWindowSet": args.isMaintenanceWindowSet,
        "monitorType": args.monitorType,
        "scriptId": args.scriptId,
        "status": args.status,
        "vantagePoint": args.vantagePoint,
    }, opts);
}

/**
 * A collection of arguments for invoking getMonitors.
 */
export interface GetMonitorsArgs {
    /**
     * The APM domain ID the request is intended for.
     */
    apmDomainId: string;
    /**
     * A filter to return only the resources that match the entire display name.
     */
    displayName?: string;
    filters?: inputs.ApmSynthetics.GetMonitorsFilter[];
    /**
     * A filter to return the monitors whose maintenance window is currently active.
     */
    isMaintenanceWindowActive?: boolean;
    /**
     * A filter to return the monitors whose maintenance window is set.
     */
    isMaintenanceWindowSet?: boolean;
    /**
     * A filter to return only monitors that match the given monitor type. Supported values are SCRIPTED_BROWSER, BROWSER, SCRIPTED_REST, REST, NETWORK, DNS, FTP and SQL.
     */
    monitorType?: string;
    /**
     * A filter to return only monitors using scriptId.
     */
    scriptId?: string;
    /**
     * A filter to return only monitors that match the status given.
     */
    status?: string;
    /**
     * The name of the public or dedicated vantage point.
     */
    vantagePoint?: string;
}

/**
 * A collection of values returned by getMonitors.
 */
export interface GetMonitorsResult {
    readonly apmDomainId: string;
    /**
     * Unique name that can be edited. The name should not contain any confidential information.
     */
    readonly displayName?: string;
    readonly filters?: outputs.ApmSynthetics.GetMonitorsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly isMaintenanceWindowActive?: boolean;
    readonly isMaintenanceWindowSet?: boolean;
    /**
     * The list of monitor_collection.
     */
    readonly monitorCollections: outputs.ApmSynthetics.GetMonitorsMonitorCollection[];
    /**
     * Type of monitor.
     */
    readonly monitorType?: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
     */
    readonly scriptId?: string;
    /**
     * Enables or disables the monitor.
     */
    readonly status?: string;
    readonly vantagePoint?: string;
}
/**
 * This data source provides the list of Monitors in Oracle Cloud Infrastructure Apm Synthetics service.
 *
 * Returns a list of monitors.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMonitors = oci.ApmSynthetics.getMonitors({
 *     apmDomainId: testApmDomain.id,
 *     displayName: monitorDisplayName,
 *     isMaintenanceWindowActive: monitorIsMaintenanceWindowActive,
 *     isMaintenanceWindowSet: monitorIsMaintenanceWindowSet,
 *     monitorType: monitorMonitorType,
 *     scriptId: testScript.id,
 *     status: monitorStatus,
 *     vantagePoint: monitorVantagePoint,
 * });
 * ```
 */
export function getMonitorsOutput(args: GetMonitorsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitorsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:ApmSynthetics/getMonitors:getMonitors", {
        "apmDomainId": args.apmDomainId,
        "displayName": args.displayName,
        "filters": args.filters,
        "isMaintenanceWindowActive": args.isMaintenanceWindowActive,
        "isMaintenanceWindowSet": args.isMaintenanceWindowSet,
        "monitorType": args.monitorType,
        "scriptId": args.scriptId,
        "status": args.status,
        "vantagePoint": args.vantagePoint,
    }, opts);
}

/**
 * A collection of arguments for invoking getMonitors.
 */
export interface GetMonitorsOutputArgs {
    /**
     * The APM domain ID the request is intended for.
     */
    apmDomainId: pulumi.Input<string>;
    /**
     * A filter to return only the resources that match the entire display name.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.ApmSynthetics.GetMonitorsFilterArgs>[]>;
    /**
     * A filter to return the monitors whose maintenance window is currently active.
     */
    isMaintenanceWindowActive?: pulumi.Input<boolean>;
    /**
     * A filter to return the monitors whose maintenance window is set.
     */
    isMaintenanceWindowSet?: pulumi.Input<boolean>;
    /**
     * A filter to return only monitors that match the given monitor type. Supported values are SCRIPTED_BROWSER, BROWSER, SCRIPTED_REST, REST, NETWORK, DNS, FTP and SQL.
     */
    monitorType?: pulumi.Input<string>;
    /**
     * A filter to return only monitors using scriptId.
     */
    scriptId?: pulumi.Input<string>;
    /**
     * A filter to return only monitors that match the status given.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the public or dedicated vantage point.
     */
    vantagePoint?: pulumi.Input<string>;
}
