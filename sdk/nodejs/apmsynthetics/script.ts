// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Script resource in Oracle Cloud Infrastructure APM Availability Monitoring service (aka APM Synthetics Service).
 *
 * Creates a new script.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testScript = new oci.apmsynthetics.Script("test_script", {
 *     apmDomainId: testApmDomain.id,
 *     content: scriptContent,
 *     contentType: scriptContentType,
 *     displayName: scriptDisplayName,
 *     contentFileName: scriptContentFileName,
 *     definedTags: {
 *         "foo-namespace.bar-key": "value",
 *     },
 *     freeformTags: {
 *         "bar-key": "value",
 *     },
 *     parameters: [{
 *         paramName: scriptParametersParamName,
 *         isSecret: scriptParametersIsSecret,
 *         paramValue: scriptParametersParamValue,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Scripts can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:ApmSynthetics/script:Script test_script "scripts/{scriptId}/apmDomainId/{apmDomainId}"
 * ```
 */
export class Script extends pulumi.CustomResource {
    /**
     * Get an existing Script resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScriptState, opts?: pulumi.CustomResourceOptions): Script {
        return new Script(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:ApmSynthetics/script:Script';

    /**
     * Returns true if the given object is an instance of Script.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Script {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Script.__pulumiType;
    }

    /**
     * (Updatable) The APM domain ID the request is intended for.
     */
    declare public readonly apmDomainId: pulumi.Output<string>;
    /**
     * (Updatable) The content of the script. It may contain custom-defined tags that can be used for setting dynamic parameters. The format to set dynamic parameters is: `<ORAP><ON>param name</ON><OV>param value</OV><OS>isParamValueSecret(true/false)</OS></ORAP>`. Param value and isParamValueSecret are optional, the default value for isParamValueSecret is false. Examples: With mandatory param name : `<ORAP><ON>param name</ON></ORAP>` With parameter name and value : `<ORAP><ON>param name</ON><OV>param value</OV></ORAP>` Note that the content is valid if it matches the given content type. For example, if the content type is SIDE, then the content should be in Side script format. If the content type is JS, then the content should be in JavaScript format. If the content type is PLAYWRIGHT_TS, then the content should be in TypeScript format.
     */
    declare public readonly content: pulumi.Output<string>;
    /**
     * (Updatable) File name of uploaded script content.
     */
    declare public readonly contentFileName: pulumi.Output<string>;
    /**
     * Size of the script content.
     */
    declare public /*out*/ readonly contentSizeInBytes: pulumi.Output<number>;
    /**
     * (Updatable) Content type of script.
     */
    declare public readonly contentType: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    declare public readonly definedTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) Unique name that can be edited. The name should not contain any confidential information.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    declare public readonly freeformTags: pulumi.Output<{[key: string]: string}>;
    /**
     * Details of the monitor count per state. Example: `{ "total" : 5, "enabled" : 3 , "disabled" : 2, "invalid" : 0 }`
     */
    declare public /*out*/ readonly monitorStatusCountMaps: pulumi.Output<outputs.ApmSynthetics.ScriptMonitorStatusCountMap[]>;
    /**
     * (Updatable) List of script parameters. Example: `[{"paramName": "userid", "paramValue":"testuser", "isSecret": false}]`
     */
    declare public readonly parameters: pulumi.Output<outputs.ApmSynthetics.ScriptParameter[]>;
    /**
     * The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;
    /**
     * The time the script was uploaded.
     */
    declare public /*out*/ readonly timeUploaded: pulumi.Output<string>;

    /**
     * Create a Script resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScriptArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScriptArgs | ScriptState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScriptState | undefined;
            resourceInputs["apmDomainId"] = state?.apmDomainId;
            resourceInputs["content"] = state?.content;
            resourceInputs["contentFileName"] = state?.contentFileName;
            resourceInputs["contentSizeInBytes"] = state?.contentSizeInBytes;
            resourceInputs["contentType"] = state?.contentType;
            resourceInputs["definedTags"] = state?.definedTags;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["freeformTags"] = state?.freeformTags;
            resourceInputs["monitorStatusCountMaps"] = state?.monitorStatusCountMaps;
            resourceInputs["parameters"] = state?.parameters;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
            resourceInputs["timeUploaded"] = state?.timeUploaded;
        } else {
            const args = argsOrState as ScriptArgs | undefined;
            if (args?.apmDomainId === undefined && !opts.urn) {
                throw new Error("Missing required property 'apmDomainId'");
            }
            if (args?.content === undefined && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if (args?.contentType === undefined && !opts.urn) {
                throw new Error("Missing required property 'contentType'");
            }
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["apmDomainId"] = args?.apmDomainId;
            resourceInputs["content"] = args?.content;
            resourceInputs["contentFileName"] = args?.contentFileName;
            resourceInputs["contentType"] = args?.contentType;
            resourceInputs["definedTags"] = args?.definedTags;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["freeformTags"] = args?.freeformTags;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["contentSizeInBytes"] = undefined /*out*/;
            resourceInputs["monitorStatusCountMaps"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["timeUploaded"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Script.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Script resources.
 */
export interface ScriptState {
    /**
     * (Updatable) The APM domain ID the request is intended for.
     */
    apmDomainId?: pulumi.Input<string>;
    /**
     * (Updatable) The content of the script. It may contain custom-defined tags that can be used for setting dynamic parameters. The format to set dynamic parameters is: `<ORAP><ON>param name</ON><OV>param value</OV><OS>isParamValueSecret(true/false)</OS></ORAP>`. Param value and isParamValueSecret are optional, the default value for isParamValueSecret is false. Examples: With mandatory param name : `<ORAP><ON>param name</ON></ORAP>` With parameter name and value : `<ORAP><ON>param name</ON><OV>param value</OV></ORAP>` Note that the content is valid if it matches the given content type. For example, if the content type is SIDE, then the content should be in Side script format. If the content type is JS, then the content should be in JavaScript format. If the content type is PLAYWRIGHT_TS, then the content should be in TypeScript format.
     */
    content?: pulumi.Input<string>;
    /**
     * (Updatable) File name of uploaded script content.
     */
    contentFileName?: pulumi.Input<string>;
    /**
     * Size of the script content.
     */
    contentSizeInBytes?: pulumi.Input<number>;
    /**
     * (Updatable) Content type of script.
     */
    contentType?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Unique name that can be edited. The name should not contain any confidential information.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Details of the monitor count per state. Example: `{ "total" : 5, "enabled" : 3 , "disabled" : 2, "invalid" : 0 }`
     */
    monitorStatusCountMaps?: pulumi.Input<pulumi.Input<inputs.ApmSynthetics.ScriptMonitorStatusCountMap>[]>;
    /**
     * (Updatable) List of script parameters. Example: `[{"paramName": "userid", "paramValue":"testuser", "isSecret": false}]`
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.ApmSynthetics.ScriptParameter>[]>;
    /**
     * The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * The time the script was uploaded.
     */
    timeUploaded?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Script resource.
 */
export interface ScriptArgs {
    /**
     * (Updatable) The APM domain ID the request is intended for.
     */
    apmDomainId: pulumi.Input<string>;
    /**
     * (Updatable) The content of the script. It may contain custom-defined tags that can be used for setting dynamic parameters. The format to set dynamic parameters is: `<ORAP><ON>param name</ON><OV>param value</OV><OS>isParamValueSecret(true/false)</OS></ORAP>`. Param value and isParamValueSecret are optional, the default value for isParamValueSecret is false. Examples: With mandatory param name : `<ORAP><ON>param name</ON></ORAP>` With parameter name and value : `<ORAP><ON>param name</ON><OV>param value</OV></ORAP>` Note that the content is valid if it matches the given content type. For example, if the content type is SIDE, then the content should be in Side script format. If the content type is JS, then the content should be in JavaScript format. If the content type is PLAYWRIGHT_TS, then the content should be in TypeScript format.
     */
    content: pulumi.Input<string>;
    /**
     * (Updatable) File name of uploaded script content.
     */
    contentFileName?: pulumi.Input<string>;
    /**
     * (Updatable) Content type of script.
     */
    contentType: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Unique name that can be edited. The name should not contain any confidential information.
     */
    displayName: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) List of script parameters. Example: `[{"paramName": "userid", "paramValue":"testuser", "isSecret": false}]`
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.ApmSynthetics.ScriptParameter>[]>;
}
