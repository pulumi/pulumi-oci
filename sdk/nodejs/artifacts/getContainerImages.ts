// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Container Images in Oracle Cloud Infrastructure Artifacts service.
 *
 * List container images in a compartment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testContainerImages = oci.Artifacts.getContainerImages({
 *     compartmentId: compartmentId,
 *     compartmentIdInSubtree: containerImageCompartmentIdInSubtree,
 *     displayName: containerImageDisplayName,
 *     imageId: testImage.id,
 *     isVersioned: containerImageIsVersioned,
 *     repositoryId: testRepository.id,
 *     repositoryName: testRepository.name,
 *     state: containerImageState,
 *     version: containerImageVersion,
 * });
 * ```
 */
export function getContainerImages(args: GetContainerImagesArgs, opts?: pulumi.InvokeOptions): Promise<GetContainerImagesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Artifacts/getContainerImages:getContainerImages", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "displayName": args.displayName,
        "filters": args.filters,
        "imageId": args.imageId,
        "isVersioned": args.isVersioned,
        "repositoryId": args.repositoryId,
        "repositoryName": args.repositoryName,
        "state": args.state,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getContainerImages.
 */
export interface GetContainerImagesArgs {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    compartmentId: string;
    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are inspected depending on the the setting of `accessLevel`. Default is false. Can only be set to true when calling the API on the tenancy (root compartment).
     */
    compartmentIdInSubtree?: boolean;
    /**
     * A filter to return only resources that match the given display name exactly.
     */
    displayName?: string;
    filters?: inputs.Artifacts.GetContainerImagesFilter[];
    /**
     * A filter to return a container image summary only for the specified container image OCID.
     */
    imageId?: string;
    /**
     * A filter to return container images based on whether there are any associated versions.
     */
    isVersioned?: boolean;
    /**
     * A filter to return container images only for the specified container repository OCID.
     */
    repositoryId?: string;
    /**
     * A filter to return container images or container image signatures that match the repository name.  Example: `foo` or `foo*`
     */
    repositoryName?: string;
    /**
     * A filter to return only resources that match the given lifecycle state name exactly.
     */
    state?: string;
    /**
     * A filter to return container images that match the version.  Example: `foo` or `foo*`
     */
    version?: string;
}

/**
 * A collection of values returned by getContainerImages.
 */
export interface GetContainerImagesResult {
    /**
     * The compartment OCID to which the container image belongs. Inferred from the container repository.
     */
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    /**
     * The list of container_image_collection.
     */
    readonly containerImageCollections: outputs.Artifacts.GetContainerImagesContainerImageCollection[];
    /**
     * The repository name and the most recent version associated with the image. If there are no versions associated with the image, then last known version and digest are used instead. If the last known version is unavailable, then 'unknown' is used instead of the version.  Example: `ubuntu:latest` or `ubuntu:latest@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2`
     */
    readonly displayName?: string;
    readonly filters?: outputs.Artifacts.GetContainerImagesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly imageId?: string;
    readonly isVersioned?: boolean;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.
     */
    readonly repositoryId?: string;
    /**
     * The container repository name.
     */
    readonly repositoryName?: string;
    /**
     * The current state of the container image.
     */
    readonly state?: string;
    /**
     * The version name.
     */
    readonly version?: string;
}
/**
 * This data source provides the list of Container Images in Oracle Cloud Infrastructure Artifacts service.
 *
 * List container images in a compartment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testContainerImages = oci.Artifacts.getContainerImages({
 *     compartmentId: compartmentId,
 *     compartmentIdInSubtree: containerImageCompartmentIdInSubtree,
 *     displayName: containerImageDisplayName,
 *     imageId: testImage.id,
 *     isVersioned: containerImageIsVersioned,
 *     repositoryId: testRepository.id,
 *     repositoryName: testRepository.name,
 *     state: containerImageState,
 *     version: containerImageVersion,
 * });
 * ```
 */
export function getContainerImagesOutput(args: GetContainerImagesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetContainerImagesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:Artifacts/getContainerImages:getContainerImages", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "displayName": args.displayName,
        "filters": args.filters,
        "imageId": args.imageId,
        "isVersioned": args.isVersioned,
        "repositoryId": args.repositoryId,
        "repositoryName": args.repositoryName,
        "state": args.state,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getContainerImages.
 */
export interface GetContainerImagesOutputArgs {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are inspected depending on the the setting of `accessLevel`. Default is false. Can only be set to true when calling the API on the tenancy (root compartment).
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    /**
     * A filter to return only resources that match the given display name exactly.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Artifacts.GetContainerImagesFilterArgs>[]>;
    /**
     * A filter to return a container image summary only for the specified container image OCID.
     */
    imageId?: pulumi.Input<string>;
    /**
     * A filter to return container images based on whether there are any associated versions.
     */
    isVersioned?: pulumi.Input<boolean>;
    /**
     * A filter to return container images only for the specified container repository OCID.
     */
    repositoryId?: pulumi.Input<string>;
    /**
     * A filter to return container images or container image signatures that match the repository name.  Example: `foo` or `foo*`
     */
    repositoryName?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the given lifecycle state name exactly.
     */
    state?: pulumi.Input<string>;
    /**
     * A filter to return container images that match the version.  Example: `foo` or `foo*`
     */
    version?: pulumi.Input<string>;
}
