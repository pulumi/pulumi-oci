// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Container Repositories in Oracle Cloud Infrastructure Artifacts service.
 *
 * List container repositories in a compartment.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testContainerRepositories = oci.Artifacts.getContainerRepositories({
 *     compartmentId: _var.compartment_id,
 *     compartmentIdInSubtree: _var.container_repository_compartment_id_in_subtree,
 *     displayName: _var.container_repository_display_name,
 *     isPublic: _var.container_repository_is_public,
 *     repositoryId: oci_artifacts_repository.test_repository.id,
 *     state: _var.container_repository_state,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getContainerRepositories(args: GetContainerRepositoriesArgs, opts?: pulumi.InvokeOptions): Promise<GetContainerRepositoriesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Artifacts/getContainerRepositories:getContainerRepositories", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "displayName": args.displayName,
        "filters": args.filters,
        "isPublic": args.isPublic,
        "repositoryId": args.repositoryId,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getContainerRepositories.
 */
export interface GetContainerRepositoriesArgs {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    compartmentId: string;
    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are inspected depending on the the setting of `accessLevel`. Default is false. Can only be set to true when calling the API on the tenancy (root compartment).
     */
    compartmentIdInSubtree?: boolean;
    /**
     * A filter to return only resources that match the given display name exactly.
     */
    displayName?: string;
    filters?: inputs.Artifacts.GetContainerRepositoriesFilter[];
    /**
     * A filter to return resources that match the isPublic value.
     */
    isPublic?: boolean;
    /**
     * A filter to return container images only for the specified container repository OCID.
     */
    repositoryId?: string;
    /**
     * A filter to return only resources that match the given lifecycle state name exactly.
     */
    state?: string;
}

/**
 * A collection of values returned by getContainerRepositories.
 */
export interface GetContainerRepositoriesResult {
    /**
     * The OCID of the compartment in which the container repository exists.
     */
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    /**
     * The list of container_repository_collection.
     */
    readonly containerRepositoryCollections: outputs.Artifacts.GetContainerRepositoriesContainerRepositoryCollection[];
    /**
     * The container repository name.
     */
    readonly displayName?: string;
    readonly filters?: outputs.Artifacts.GetContainerRepositoriesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Whether the repository is public. A public repository allows unauthenticated access.
     */
    readonly isPublic?: boolean;
    readonly repositoryId?: string;
    /**
     * The current state of the container repository.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Container Repositories in Oracle Cloud Infrastructure Artifacts service.
 *
 * List container repositories in a compartment.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testContainerRepositories = oci.Artifacts.getContainerRepositories({
 *     compartmentId: _var.compartment_id,
 *     compartmentIdInSubtree: _var.container_repository_compartment_id_in_subtree,
 *     displayName: _var.container_repository_display_name,
 *     isPublic: _var.container_repository_is_public,
 *     repositoryId: oci_artifacts_repository.test_repository.id,
 *     state: _var.container_repository_state,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getContainerRepositoriesOutput(args: GetContainerRepositoriesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetContainerRepositoriesResult> {
    return pulumi.output(args).apply((a: any) => getContainerRepositories(a, opts))
}

/**
 * A collection of arguments for invoking getContainerRepositories.
 */
export interface GetContainerRepositoriesOutputArgs {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are inspected depending on the the setting of `accessLevel`. Default is false. Can only be set to true when calling the API on the tenancy (root compartment).
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    /**
     * A filter to return only resources that match the given display name exactly.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Artifacts.GetContainerRepositoriesFilterArgs>[]>;
    /**
     * A filter to return resources that match the isPublic value.
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * A filter to return container images only for the specified container repository OCID.
     */
    repositoryId?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the given lifecycle state name exactly.
     */
    state?: pulumi.Input<string>;
}
