// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Audit Events in Oracle Cloud Infrastructure Audit service.
 *
 * Returns all the audit events processed for the specified compartment within the specified
 * time range.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testAuditEvents = oci.Audit.getEvents({
 *     compartmentId: _var.compartment_id,
 *     endTime: _var.audit_event_end_time,
 *     startTime: _var.audit_event_start_time,
 * });
 * ```
 */
export function getEvents(args: GetEventsArgs, opts?: pulumi.InvokeOptions): Promise<GetEventsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Audit/getEvents:getEvents", {
        "compartmentId": args.compartmentId,
        "endTime": args.endTime,
        "filters": args.filters,
        "startTime": args.startTime,
    }, opts);
}

/**
 * A collection of arguments for invoking getEvents.
 */
export interface GetEventsArgs {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    compartmentId: string;
    /**
     * Returns events that were processed before this end date and time, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
     */
    endTime: string;
    filters?: inputs.Audit.GetEventsFilter[];
    /**
     * Returns events that were processed at or after this start date and time, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
     */
    startTime: string;
}

/**
 * A collection of values returned by getEvents.
 */
export interface GetEventsResult {
    /**
     * The list of audit_events.
     */
    readonly auditEvents: outputs.Audit.GetEventsAuditEvent[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment of the resource  emitting the event.
     */
    readonly compartmentId: string;
    readonly endTime: string;
    readonly filters?: outputs.Audit.GetEventsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly startTime: string;
}
/**
 * This data source provides the list of Audit Events in Oracle Cloud Infrastructure Audit service.
 *
 * Returns all the audit events processed for the specified compartment within the specified
 * time range.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testAuditEvents = oci.Audit.getEvents({
 *     compartmentId: _var.compartment_id,
 *     endTime: _var.audit_event_end_time,
 *     startTime: _var.audit_event_start_time,
 * });
 * ```
 */
export function getEventsOutput(args: GetEventsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEventsResult> {
    return pulumi.output(args).apply((a: any) => getEvents(a, opts))
}

/**
 * A collection of arguments for invoking getEvents.
 */
export interface GetEventsOutputArgs {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * Returns events that were processed before this end date and time, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
     */
    endTime: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Audit.GetEventsFilterArgs>[]>;
    /**
     * Returns events that were processed at or after this start date and time, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
     */
    startTime: pulumi.Input<string>;
}
