// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Session resource in Oracle Cloud Infrastructure Bastion service.
 *
 * Creates a new session in a bastion. A bastion session lets authorized users connect to a target resource for a predetermined amount of time. The Bastion service recognizes two types of sessions, managed SSH sessions and SSH port forwarding sessions. Managed SSH sessions require that the target resource has an OpenSSH server and the Oracle Cloud Agent both running.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSession = new oci.bastion.Session("test_session", {
 *     bastionId: testBastion.id,
 *     keyDetails: {
 *         publicKeyContent: sessionKeyDetailsPublicKeyContent,
 *     },
 *     targetResourceDetails: {
 *         sessionType: sessionTargetResourceDetailsSessionType,
 *         targetResourceFqdn: sessionTargetResourceDetailsTargetResourceFqdn,
 *         targetResourceId: testTargetResource.id,
 *         targetResourceOperatingSystemUserName: testUser.name,
 *         targetResourcePort: sessionTargetResourceDetailsTargetResourcePort,
 *         targetResourcePrivateIpAddress: sessionTargetResourceDetailsTargetResourcePrivateIpAddress,
 *     },
 *     displayName: sessionDisplayName,
 *     keyType: sessionKeyType,
 *     sessionTtlInSeconds: sessionSessionTtlInSeconds,
 * });
 * ```
 *
 * ## Import
 *
 * Sessions can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:Bastion/session:Session test_session "id"
 * ```
 */
export class Session extends pulumi.CustomResource {
    /**
     * Get an existing Session resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SessionState, opts?: pulumi.CustomResourceOptions): Session {
        return new Session(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Bastion/session:Session';

    /**
     * Returns true if the given object is an instance of Session.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Session {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Session.__pulumiType;
    }

    /**
     * The unique identifier (OCID) of the bastion on which to create this session.
     */
    declare public readonly bastionId: pulumi.Output<string>;
    /**
     * The name of the bastion that is hosting this session.
     */
    declare public /*out*/ readonly bastionName: pulumi.Output<string>;
    /**
     * The public key of the bastion host. You can use this to verify that you're connecting to the correct bastion.
     */
    declare public /*out*/ readonly bastionPublicHostKeyInfo: pulumi.Output<string>;
    /**
     * The username that the session uses to connect to the target resource.
     */
    declare public /*out*/ readonly bastionUserName: pulumi.Output<string>;
    /**
     * (Updatable) The name of the session.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * Public key details for a bastion session.
     */
    declare public readonly keyDetails: pulumi.Output<outputs.Bastion.SessionKeyDetails>;
    /**
     * The type of the key used to connect to the session. PUB is a standard public key in OpenSSH format.
     */
    declare public readonly keyType: pulumi.Output<string>;
    /**
     * A message describing the current session state in more detail.
     */
    declare public /*out*/ readonly lifecycleDetails: pulumi.Output<string>;
    /**
     * The amount of time the session can remain active.
     */
    declare public readonly sessionTtlInSeconds: pulumi.Output<number>;
    /**
     * The connection message for the session.
     */
    declare public /*out*/ readonly sshMetadata: pulumi.Output<{[key: string]: string}>;
    /**
     * The current state of the session.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * Details about a bastion session's target resource.
     */
    declare public readonly targetResourceDetails: pulumi.Output<outputs.Bastion.SessionTargetResourceDetails>;
    /**
     * The time the session was created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * The time the session was updated. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;

    /**
     * Create a Session resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SessionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SessionArgs | SessionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SessionState | undefined;
            resourceInputs["bastionId"] = state?.bastionId;
            resourceInputs["bastionName"] = state?.bastionName;
            resourceInputs["bastionPublicHostKeyInfo"] = state?.bastionPublicHostKeyInfo;
            resourceInputs["bastionUserName"] = state?.bastionUserName;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["keyDetails"] = state?.keyDetails;
            resourceInputs["keyType"] = state?.keyType;
            resourceInputs["lifecycleDetails"] = state?.lifecycleDetails;
            resourceInputs["sessionTtlInSeconds"] = state?.sessionTtlInSeconds;
            resourceInputs["sshMetadata"] = state?.sshMetadata;
            resourceInputs["state"] = state?.state;
            resourceInputs["targetResourceDetails"] = state?.targetResourceDetails;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
        } else {
            const args = argsOrState as SessionArgs | undefined;
            if (args?.bastionId === undefined && !opts.urn) {
                throw new Error("Missing required property 'bastionId'");
            }
            if (args?.keyDetails === undefined && !opts.urn) {
                throw new Error("Missing required property 'keyDetails'");
            }
            if (args?.targetResourceDetails === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetResourceDetails'");
            }
            resourceInputs["bastionId"] = args?.bastionId;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["keyDetails"] = args?.keyDetails;
            resourceInputs["keyType"] = args?.keyType;
            resourceInputs["sessionTtlInSeconds"] = args?.sessionTtlInSeconds;
            resourceInputs["targetResourceDetails"] = args?.targetResourceDetails;
            resourceInputs["bastionName"] = undefined /*out*/;
            resourceInputs["bastionPublicHostKeyInfo"] = undefined /*out*/;
            resourceInputs["bastionUserName"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["sshMetadata"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Session.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Session resources.
 */
export interface SessionState {
    /**
     * The unique identifier (OCID) of the bastion on which to create this session.
     */
    bastionId?: pulumi.Input<string>;
    /**
     * The name of the bastion that is hosting this session.
     */
    bastionName?: pulumi.Input<string>;
    /**
     * The public key of the bastion host. You can use this to verify that you're connecting to the correct bastion.
     */
    bastionPublicHostKeyInfo?: pulumi.Input<string>;
    /**
     * The username that the session uses to connect to the target resource.
     */
    bastionUserName?: pulumi.Input<string>;
    /**
     * (Updatable) The name of the session.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Public key details for a bastion session.
     */
    keyDetails?: pulumi.Input<inputs.Bastion.SessionKeyDetails>;
    /**
     * The type of the key used to connect to the session. PUB is a standard public key in OpenSSH format.
     */
    keyType?: pulumi.Input<string>;
    /**
     * A message describing the current session state in more detail.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * The amount of time the session can remain active.
     */
    sessionTtlInSeconds?: pulumi.Input<number>;
    /**
     * The connection message for the session.
     */
    sshMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The current state of the session.
     */
    state?: pulumi.Input<string>;
    /**
     * Details about a bastion session's target resource.
     */
    targetResourceDetails?: pulumi.Input<inputs.Bastion.SessionTargetResourceDetails>;
    /**
     * The time the session was created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time the session was updated. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
     */
    timeUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Session resource.
 */
export interface SessionArgs {
    /**
     * The unique identifier (OCID) of the bastion on which to create this session.
     */
    bastionId: pulumi.Input<string>;
    /**
     * (Updatable) The name of the session.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Public key details for a bastion session.
     */
    keyDetails: pulumi.Input<inputs.Bastion.SessionKeyDetails>;
    /**
     * The type of the key used to connect to the session. PUB is a standard public key in OpenSSH format.
     */
    keyType?: pulumi.Input<string>;
    /**
     * The amount of time the session can remain active.
     */
    sessionTtlInSeconds?: pulumi.Input<number>;
    /**
     * Details about a bastion session's target resource.
     */
    targetResourceDetails: pulumi.Input<inputs.Bastion.SessionTargetResourceDetails>;
}
