// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Bds Capacity Report resource in Oracle Cloud Infrastructure Big Data Service service. Customer would require BDS_READ permission for the target compartment.
 *
 * Create a detailed capacity report for BDS service
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testBdsCapacityReport = new oci.bigdataservice.BdsCapacityReport("test_bds_capacity_report", {
 *     compartmentId: compartmentId,
 *     shapeAvailabilities: [{
 *         shape: bdsCapacityReportShapeAvailabilitiesShape,
 *         shapeConfig: {
 *             memoryInGbs: bdsCapacityReportShapeAvailabilitiesShapeConfigMemoryInGbs,
 *             nvmes: bdsCapacityReportShapeAvailabilitiesShapeConfigNvmes,
 *             ocpus: bdsCapacityReportShapeAvailabilitiesShapeConfigOcpus,
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * BdsCapacityReports can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:BigDataService/bdsCapacityReport:BdsCapacityReport test_bds_capacity_report "id"
 * ```
 */
export class BdsCapacityReport extends pulumi.CustomResource {
    /**
     * Get an existing BdsCapacityReport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BdsCapacityReportState, opts?: pulumi.CustomResourceOptions): BdsCapacityReport {
        return new BdsCapacityReport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:BigDataService/bdsCapacityReport:BdsCapacityReport';

    /**
     * Returns true if the given object is an instance of BdsCapacityReport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BdsCapacityReport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BdsCapacityReport.__pulumiType;
    }

    /**
     * The OCID for the compartment. This should always be the root compartment.
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * Information about the shapes in the capacity report.
     */
    declare public readonly shapeAvailabilities: pulumi.Output<outputs.BigDataService.BdsCapacityReportShapeAvailability[]>;
    /**
     * The time the report was created, shown as an RFC 3339 formatted datetime string.
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;

    /**
     * Create a BdsCapacityReport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BdsCapacityReportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BdsCapacityReportArgs | BdsCapacityReportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BdsCapacityReportState | undefined;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["shapeAvailabilities"] = state?.shapeAvailabilities;
            resourceInputs["timeCreated"] = state?.timeCreated;
        } else {
            const args = argsOrState as BdsCapacityReportArgs | undefined;
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.shapeAvailabilities === undefined && !opts.urn) {
                throw new Error("Missing required property 'shapeAvailabilities'");
            }
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["shapeAvailabilities"] = args?.shapeAvailabilities;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BdsCapacityReport.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BdsCapacityReport resources.
 */
export interface BdsCapacityReportState {
    /**
     * The OCID for the compartment. This should always be the root compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * Information about the shapes in the capacity report.
     */
    shapeAvailabilities?: pulumi.Input<pulumi.Input<inputs.BigDataService.BdsCapacityReportShapeAvailability>[]>;
    /**
     * The time the report was created, shown as an RFC 3339 formatted datetime string.
     */
    timeCreated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BdsCapacityReport resource.
 */
export interface BdsCapacityReportArgs {
    /**
     * The OCID for the compartment. This should always be the root compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * Information about the shapes in the capacity report.
     */
    shapeAvailabilities: pulumi.Input<pulumi.Input<inputs.BigDataService.BdsCapacityReportShapeAvailability>[]>;
}
