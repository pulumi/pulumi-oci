// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Bds Instance resource in Oracle Cloud Infrastructure Big Data Service service.
 *
 * Creates a new BDS instance.
 *
 * ## Import
 *
 * BdsInstances can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:BigDataService/bdsInstance:BdsInstance test_bds_instance "id"
 * ```
 */
export class BdsInstance extends pulumi.CustomResource {
    /**
     * Get an existing BdsInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BdsInstanceState, opts?: pulumi.CustomResourceOptions): BdsInstance {
        return new BdsInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:BigDataService/bdsInstance:BdsInstance';

    /**
     * Returns true if the given object is an instance of BdsInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BdsInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BdsInstance.__pulumiType;
    }

    /**
     * Cluster version details including bds and odh version information.
     */
    declare public readonly bdsClusterVersionSummary: pulumi.Output<outputs.BigDataService.BdsInstanceBdsClusterVersionSummary>;
    /**
     * (Updatable) Pre-authenticated URL of the script in Object Store that is downloaded and executed.
     */
    declare public readonly bootstrapScriptUrl: pulumi.Output<string>;
    /**
     * The information about added Cloud SQL capability
     */
    declare public readonly cloudSqlDetails: pulumi.Output<outputs.BigDataService.BdsInstanceCloudSqlDetail[]>;
    /**
     * Base-64 encoded password for the cluster (and Cloudera Manager) admin user.
     */
    declare public readonly clusterAdminPassword: pulumi.Output<string>;
    /**
     * Specific info about a Hadoop cluster
     */
    declare public /*out*/ readonly clusterDetails: pulumi.Output<outputs.BigDataService.BdsInstanceClusterDetail[]>;
    /**
     * Profile of the Big Data Service cluster.
     */
    declare public readonly clusterProfile: pulumi.Output<string>;
    /**
     * The SSH public key used to authenticate the cluster connection.
     */
    declare public readonly clusterPublicKey: pulumi.Output<string>;
    /**
     * Version of the Hadoop distribution
     */
    declare public readonly clusterVersion: pulumi.Output<string>;
    /**
     * (Updatable) The OCID of the compartment
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    declare public readonly computeOnlyWorkerNode: pulumi.Output<outputs.BigDataService.BdsInstanceComputeOnlyWorkerNode | undefined>;
    /**
     * The user who created the cluster.
     */
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    declare public readonly definedTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) Name of the BDS instance
     */
    declare public readonly displayName: pulumi.Output<string>;
    declare public readonly edgeNode: pulumi.Output<outputs.BigDataService.BdsInstanceEdgeNode | undefined>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    declare public readonly freeformTags: pulumi.Output<{[key: string]: string}>;
    /**
     * Tag to ignore changing the shape of existing worker, master, utility, compute_only_worker, edge, kafkaBroker nodes, in a list format, when new nodes are added with a different shape.
     */
    declare public readonly ignoreExistingNodesShapes: pulumi.Output<string[] | undefined>;
    /**
     * (Updatable) Boolean flag specifying whether we configure Cloud SQL or not
     */
    declare public readonly isCloudSqlConfigured: pulumi.Output<boolean>;
    declare public readonly isForceRemoveEnabled: pulumi.Output<boolean | undefined>;
    /**
     * (Updatable) When setting state as `INACTIVE` for stopping a cluster, setting this flag to true forcefully stops the bds instance.
     */
    declare public readonly isForceStopJobs: pulumi.Output<boolean | undefined>;
    /**
     * Boolean flag specifying whether or not the cluster is HA
     */
    declare public readonly isHighAvailability: pulumi.Output<boolean>;
    /**
     * Boolean flag specifying whether or not Kafka should be configured.
     */
    declare public readonly isKafkaConfigured: pulumi.Output<boolean | undefined>;
    /**
     * Boolean flag specifying whether or not the cluster should be setup as secure.
     */
    declare public readonly isSecure: pulumi.Output<boolean>;
    /**
     * The kafka broker node in the BDS instance
     */
    declare public readonly kafkaBrokerNode: pulumi.Output<outputs.BigDataService.BdsInstanceKafkaBrokerNode | undefined>;
    /**
     * The user-defined kerberos realm name.
     */
    declare public readonly kerberosRealmName: pulumi.Output<string>;
    /**
     * (Updatable) The OCID of the Key Management master encryption key.
     */
    declare public readonly kmsKeyId: pulumi.Output<string>;
    /**
     * The master node in the BDS instance
     */
    declare public readonly masterNode: pulumi.Output<outputs.BigDataService.BdsInstanceMasterNode>;
    /**
     * (Updatable) Additional configuration of the user's network.
     */
    declare public readonly networkConfig: pulumi.Output<outputs.BigDataService.BdsInstanceNetworkConfig>;
    /**
     * The list of nodes in the Big Data Service cluster.
     */
    declare public /*out*/ readonly nodes: pulumi.Output<outputs.BigDataService.BdsInstanceNode[]>;
    /**
     * Number of nodes that forming the cluster
     */
    declare public /*out*/ readonly numberOfNodes: pulumi.Output<number>;
    /**
     * Number of nodes that require a maintenance reboot
     */
    declare public /*out*/ readonly numberOfNodesRequiringMaintenanceReboot: pulumi.Output<number>;
    /**
     * (Updatable) The version of the patch to be upated.
     */
    declare public readonly osPatchVersion: pulumi.Output<string | undefined>;
    /**
     * (Updatable) An optional property when used triggers Remove Node from an Active Cluster. Takes the node ocid as input
     */
    declare public readonly removeNode: pulumi.Output<string | undefined>;
    declare public readonly startClusterShapeConfigs: pulumi.Output<outputs.BigDataService.BdsInstanceStartClusterShapeConfig[] | undefined>;
    /**
     * (Updatable) The target state for the Bds Instance. Could be set to `ACTIVE` or `INACTIVE` to start/stop the bds instance.
     */
    declare public readonly state: pulumi.Output<string>;
    /**
     * The time the BDS instance was created. An RFC3339 formatted datetime string
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * The time the BDS instance was updated. An RFC3339 formatted datetime string
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;
    /**
     * The utility node in the BDS instance
     */
    declare public readonly utilNode: pulumi.Output<outputs.BigDataService.BdsInstanceUtilNode>;
    declare public readonly workerNode: pulumi.Output<outputs.BigDataService.BdsInstanceWorkerNode>;

    /**
     * Create a BdsInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BdsInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BdsInstanceArgs | BdsInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BdsInstanceState | undefined;
            resourceInputs["bdsClusterVersionSummary"] = state?.bdsClusterVersionSummary;
            resourceInputs["bootstrapScriptUrl"] = state?.bootstrapScriptUrl;
            resourceInputs["cloudSqlDetails"] = state?.cloudSqlDetails;
            resourceInputs["clusterAdminPassword"] = state?.clusterAdminPassword;
            resourceInputs["clusterDetails"] = state?.clusterDetails;
            resourceInputs["clusterProfile"] = state?.clusterProfile;
            resourceInputs["clusterPublicKey"] = state?.clusterPublicKey;
            resourceInputs["clusterVersion"] = state?.clusterVersion;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["computeOnlyWorkerNode"] = state?.computeOnlyWorkerNode;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["definedTags"] = state?.definedTags;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["edgeNode"] = state?.edgeNode;
            resourceInputs["freeformTags"] = state?.freeformTags;
            resourceInputs["ignoreExistingNodesShapes"] = state?.ignoreExistingNodesShapes;
            resourceInputs["isCloudSqlConfigured"] = state?.isCloudSqlConfigured;
            resourceInputs["isForceRemoveEnabled"] = state?.isForceRemoveEnabled;
            resourceInputs["isForceStopJobs"] = state?.isForceStopJobs;
            resourceInputs["isHighAvailability"] = state?.isHighAvailability;
            resourceInputs["isKafkaConfigured"] = state?.isKafkaConfigured;
            resourceInputs["isSecure"] = state?.isSecure;
            resourceInputs["kafkaBrokerNode"] = state?.kafkaBrokerNode;
            resourceInputs["kerberosRealmName"] = state?.kerberosRealmName;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["masterNode"] = state?.masterNode;
            resourceInputs["networkConfig"] = state?.networkConfig;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["numberOfNodes"] = state?.numberOfNodes;
            resourceInputs["numberOfNodesRequiringMaintenanceReboot"] = state?.numberOfNodesRequiringMaintenanceReboot;
            resourceInputs["osPatchVersion"] = state?.osPatchVersion;
            resourceInputs["removeNode"] = state?.removeNode;
            resourceInputs["startClusterShapeConfigs"] = state?.startClusterShapeConfigs;
            resourceInputs["state"] = state?.state;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
            resourceInputs["utilNode"] = state?.utilNode;
            resourceInputs["workerNode"] = state?.workerNode;
        } else {
            const args = argsOrState as BdsInstanceArgs | undefined;
            if (args?.clusterAdminPassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterAdminPassword'");
            }
            if (args?.clusterPublicKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterPublicKey'");
            }
            if (args?.clusterVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterVersion'");
            }
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.isHighAvailability === undefined && !opts.urn) {
                throw new Error("Missing required property 'isHighAvailability'");
            }
            if (args?.isSecure === undefined && !opts.urn) {
                throw new Error("Missing required property 'isSecure'");
            }
            if (args?.masterNode === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterNode'");
            }
            if (args?.utilNode === undefined && !opts.urn) {
                throw new Error("Missing required property 'utilNode'");
            }
            if (args?.workerNode === undefined && !opts.urn) {
                throw new Error("Missing required property 'workerNode'");
            }
            resourceInputs["bdsClusterVersionSummary"] = args?.bdsClusterVersionSummary;
            resourceInputs["bootstrapScriptUrl"] = args?.bootstrapScriptUrl;
            resourceInputs["cloudSqlDetails"] = args?.cloudSqlDetails;
            resourceInputs["clusterAdminPassword"] = args?.clusterAdminPassword ? pulumi.secret(args.clusterAdminPassword) : undefined;
            resourceInputs["clusterProfile"] = args?.clusterProfile;
            resourceInputs["clusterPublicKey"] = args?.clusterPublicKey;
            resourceInputs["clusterVersion"] = args?.clusterVersion;
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["computeOnlyWorkerNode"] = args?.computeOnlyWorkerNode;
            resourceInputs["definedTags"] = args?.definedTags;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["edgeNode"] = args?.edgeNode;
            resourceInputs["freeformTags"] = args?.freeformTags;
            resourceInputs["ignoreExistingNodesShapes"] = args?.ignoreExistingNodesShapes;
            resourceInputs["isCloudSqlConfigured"] = args?.isCloudSqlConfigured;
            resourceInputs["isForceRemoveEnabled"] = args?.isForceRemoveEnabled;
            resourceInputs["isForceStopJobs"] = args?.isForceStopJobs;
            resourceInputs["isHighAvailability"] = args?.isHighAvailability;
            resourceInputs["isKafkaConfigured"] = args?.isKafkaConfigured;
            resourceInputs["isSecure"] = args?.isSecure;
            resourceInputs["kafkaBrokerNode"] = args?.kafkaBrokerNode;
            resourceInputs["kerberosRealmName"] = args?.kerberosRealmName;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["masterNode"] = args?.masterNode;
            resourceInputs["networkConfig"] = args?.networkConfig;
            resourceInputs["osPatchVersion"] = args?.osPatchVersion;
            resourceInputs["removeNode"] = args?.removeNode;
            resourceInputs["startClusterShapeConfigs"] = args?.startClusterShapeConfigs;
            resourceInputs["state"] = args?.state;
            resourceInputs["utilNode"] = args?.utilNode;
            resourceInputs["workerNode"] = args?.workerNode;
            resourceInputs["clusterDetails"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["numberOfNodes"] = undefined /*out*/;
            resourceInputs["numberOfNodesRequiringMaintenanceReboot"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clusterAdminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BdsInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BdsInstance resources.
 */
export interface BdsInstanceState {
    /**
     * Cluster version details including bds and odh version information.
     */
    bdsClusterVersionSummary?: pulumi.Input<inputs.BigDataService.BdsInstanceBdsClusterVersionSummary>;
    /**
     * (Updatable) Pre-authenticated URL of the script in Object Store that is downloaded and executed.
     */
    bootstrapScriptUrl?: pulumi.Input<string>;
    /**
     * The information about added Cloud SQL capability
     */
    cloudSqlDetails?: pulumi.Input<pulumi.Input<inputs.BigDataService.BdsInstanceCloudSqlDetail>[]>;
    /**
     * Base-64 encoded password for the cluster (and Cloudera Manager) admin user.
     */
    clusterAdminPassword?: pulumi.Input<string>;
    /**
     * Specific info about a Hadoop cluster
     */
    clusterDetails?: pulumi.Input<pulumi.Input<inputs.BigDataService.BdsInstanceClusterDetail>[]>;
    /**
     * Profile of the Big Data Service cluster.
     */
    clusterProfile?: pulumi.Input<string>;
    /**
     * The SSH public key used to authenticate the cluster connection.
     */
    clusterPublicKey?: pulumi.Input<string>;
    /**
     * Version of the Hadoop distribution
     */
    clusterVersion?: pulumi.Input<string>;
    /**
     * (Updatable) The OCID of the compartment
     */
    compartmentId?: pulumi.Input<string>;
    computeOnlyWorkerNode?: pulumi.Input<inputs.BigDataService.BdsInstanceComputeOnlyWorkerNode>;
    /**
     * The user who created the cluster.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Name of the BDS instance
     */
    displayName?: pulumi.Input<string>;
    edgeNode?: pulumi.Input<inputs.BigDataService.BdsInstanceEdgeNode>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tag to ignore changing the shape of existing worker, master, utility, compute_only_worker, edge, kafkaBroker nodes, in a list format, when new nodes are added with a different shape.
     */
    ignoreExistingNodesShapes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Updatable) Boolean flag specifying whether we configure Cloud SQL or not
     */
    isCloudSqlConfigured?: pulumi.Input<boolean>;
    isForceRemoveEnabled?: pulumi.Input<boolean>;
    /**
     * (Updatable) When setting state as `INACTIVE` for stopping a cluster, setting this flag to true forcefully stops the bds instance.
     */
    isForceStopJobs?: pulumi.Input<boolean>;
    /**
     * Boolean flag specifying whether or not the cluster is HA
     */
    isHighAvailability?: pulumi.Input<boolean>;
    /**
     * Boolean flag specifying whether or not Kafka should be configured.
     */
    isKafkaConfigured?: pulumi.Input<boolean>;
    /**
     * Boolean flag specifying whether or not the cluster should be setup as secure.
     */
    isSecure?: pulumi.Input<boolean>;
    /**
     * The kafka broker node in the BDS instance
     */
    kafkaBrokerNode?: pulumi.Input<inputs.BigDataService.BdsInstanceKafkaBrokerNode>;
    /**
     * The user-defined kerberos realm name.
     */
    kerberosRealmName?: pulumi.Input<string>;
    /**
     * (Updatable) The OCID of the Key Management master encryption key.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The master node in the BDS instance
     */
    masterNode?: pulumi.Input<inputs.BigDataService.BdsInstanceMasterNode>;
    /**
     * (Updatable) Additional configuration of the user's network.
     */
    networkConfig?: pulumi.Input<inputs.BigDataService.BdsInstanceNetworkConfig>;
    /**
     * The list of nodes in the Big Data Service cluster.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.BigDataService.BdsInstanceNode>[]>;
    /**
     * Number of nodes that forming the cluster
     */
    numberOfNodes?: pulumi.Input<number>;
    /**
     * Number of nodes that require a maintenance reboot
     */
    numberOfNodesRequiringMaintenanceReboot?: pulumi.Input<number>;
    /**
     * (Updatable) The version of the patch to be upated.
     */
    osPatchVersion?: pulumi.Input<string>;
    /**
     * (Updatable) An optional property when used triggers Remove Node from an Active Cluster. Takes the node ocid as input
     */
    removeNode?: pulumi.Input<string>;
    startClusterShapeConfigs?: pulumi.Input<pulumi.Input<inputs.BigDataService.BdsInstanceStartClusterShapeConfig>[]>;
    /**
     * (Updatable) The target state for the Bds Instance. Could be set to `ACTIVE` or `INACTIVE` to start/stop the bds instance.
     */
    state?: pulumi.Input<string>;
    /**
     * The time the BDS instance was created. An RFC3339 formatted datetime string
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time the BDS instance was updated. An RFC3339 formatted datetime string
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * The utility node in the BDS instance
     */
    utilNode?: pulumi.Input<inputs.BigDataService.BdsInstanceUtilNode>;
    workerNode?: pulumi.Input<inputs.BigDataService.BdsInstanceWorkerNode>;
}

/**
 * The set of arguments for constructing a BdsInstance resource.
 */
export interface BdsInstanceArgs {
    /**
     * Cluster version details including bds and odh version information.
     */
    bdsClusterVersionSummary?: pulumi.Input<inputs.BigDataService.BdsInstanceBdsClusterVersionSummary>;
    /**
     * (Updatable) Pre-authenticated URL of the script in Object Store that is downloaded and executed.
     */
    bootstrapScriptUrl?: pulumi.Input<string>;
    /**
     * The information about added Cloud SQL capability
     */
    cloudSqlDetails?: pulumi.Input<pulumi.Input<inputs.BigDataService.BdsInstanceCloudSqlDetail>[]>;
    /**
     * Base-64 encoded password for the cluster (and Cloudera Manager) admin user.
     */
    clusterAdminPassword: pulumi.Input<string>;
    /**
     * Profile of the Big Data Service cluster.
     */
    clusterProfile?: pulumi.Input<string>;
    /**
     * The SSH public key used to authenticate the cluster connection.
     */
    clusterPublicKey: pulumi.Input<string>;
    /**
     * Version of the Hadoop distribution
     */
    clusterVersion: pulumi.Input<string>;
    /**
     * (Updatable) The OCID of the compartment
     */
    compartmentId: pulumi.Input<string>;
    computeOnlyWorkerNode?: pulumi.Input<inputs.BigDataService.BdsInstanceComputeOnlyWorkerNode>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Name of the BDS instance
     */
    displayName: pulumi.Input<string>;
    edgeNode?: pulumi.Input<inputs.BigDataService.BdsInstanceEdgeNode>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tag to ignore changing the shape of existing worker, master, utility, compute_only_worker, edge, kafkaBroker nodes, in a list format, when new nodes are added with a different shape.
     */
    ignoreExistingNodesShapes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Updatable) Boolean flag specifying whether we configure Cloud SQL or not
     */
    isCloudSqlConfigured?: pulumi.Input<boolean>;
    isForceRemoveEnabled?: pulumi.Input<boolean>;
    /**
     * (Updatable) When setting state as `INACTIVE` for stopping a cluster, setting this flag to true forcefully stops the bds instance.
     */
    isForceStopJobs?: pulumi.Input<boolean>;
    /**
     * Boolean flag specifying whether or not the cluster is HA
     */
    isHighAvailability: pulumi.Input<boolean>;
    /**
     * Boolean flag specifying whether or not Kafka should be configured.
     */
    isKafkaConfigured?: pulumi.Input<boolean>;
    /**
     * Boolean flag specifying whether or not the cluster should be setup as secure.
     */
    isSecure: pulumi.Input<boolean>;
    /**
     * The kafka broker node in the BDS instance
     */
    kafkaBrokerNode?: pulumi.Input<inputs.BigDataService.BdsInstanceKafkaBrokerNode>;
    /**
     * The user-defined kerberos realm name.
     */
    kerberosRealmName?: pulumi.Input<string>;
    /**
     * (Updatable) The OCID of the Key Management master encryption key.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The master node in the BDS instance
     */
    masterNode: pulumi.Input<inputs.BigDataService.BdsInstanceMasterNode>;
    /**
     * (Updatable) Additional configuration of the user's network.
     */
    networkConfig?: pulumi.Input<inputs.BigDataService.BdsInstanceNetworkConfig>;
    /**
     * (Updatable) The version of the patch to be upated.
     */
    osPatchVersion?: pulumi.Input<string>;
    /**
     * (Updatable) An optional property when used triggers Remove Node from an Active Cluster. Takes the node ocid as input
     */
    removeNode?: pulumi.Input<string>;
    startClusterShapeConfigs?: pulumi.Input<pulumi.Input<inputs.BigDataService.BdsInstanceStartClusterShapeConfig>[]>;
    /**
     * (Updatable) The target state for the Bds Instance. Could be set to `ACTIVE` or `INACTIVE` to start/stop the bds instance.
     */
    state?: pulumi.Input<string>;
    /**
     * The utility node in the BDS instance
     */
    utilNode: pulumi.Input<inputs.BigDataService.BdsInstanceUtilNode>;
    workerNode: pulumi.Input<inputs.BigDataService.BdsInstanceWorkerNode>;
}
