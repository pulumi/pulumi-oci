// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource replaces the node with the given hostname, in Oracle Cloud Infrastructure Big Data Service cluster.
 *
 * Replace the node with the given host name in the cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testBdsInstanceReplaceNodeAction = new oci.bigdataservice.BdsInstanceReplaceNodeAction("test_bds_instance_replace_node_action", {
 *     bdsInstanceId: testBdsInstance.id,
 *     nodeHostName: bdsInstanceReplaceNodeAction.nodeHostName,
 *     nodeBackupId: bdsInstanceReplaceNodeAction.nodeBackupId,
 *     clusterAdminPassword: testBdsInstance.clusterAdminPassword,
 *     shape: shape,
 * });
 * ```
 */
export class BdsInstanceReplaceNodeAction extends pulumi.CustomResource {
    /**
     * Get an existing BdsInstanceReplaceNodeAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BdsInstanceReplaceNodeActionState, opts?: pulumi.CustomResourceOptions): BdsInstanceReplaceNodeAction {
        return new BdsInstanceReplaceNodeAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:BigDataService/bdsInstanceReplaceNodeAction:BdsInstanceReplaceNodeAction';

    /**
     * Returns true if the given object is an instance of BdsInstanceReplaceNodeAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BdsInstanceReplaceNodeAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BdsInstanceReplaceNodeAction.__pulumiType;
    }

    /**
     * The OCID of the cluster.
     */
    declare public readonly bdsInstanceId: pulumi.Output<string>;
    /**
     * Base-64 encoded password for the cluster admin user.
     */
    declare public readonly clusterAdminPassword: pulumi.Output<string>;
    /**
     * The id of the nodeBackup to use for replacing the node.
     */
    declare public readonly nodeBackupId: pulumi.Output<string>;
    /**
     * Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
     */
    declare public readonly nodeHostName: pulumi.Output<string>;
    /**
     * Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly shape: pulumi.Output<string | undefined>;

    /**
     * Create a BdsInstanceReplaceNodeAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BdsInstanceReplaceNodeActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BdsInstanceReplaceNodeActionArgs | BdsInstanceReplaceNodeActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BdsInstanceReplaceNodeActionState | undefined;
            resourceInputs["bdsInstanceId"] = state?.bdsInstanceId;
            resourceInputs["clusterAdminPassword"] = state?.clusterAdminPassword;
            resourceInputs["nodeBackupId"] = state?.nodeBackupId;
            resourceInputs["nodeHostName"] = state?.nodeHostName;
            resourceInputs["shape"] = state?.shape;
        } else {
            const args = argsOrState as BdsInstanceReplaceNodeActionArgs | undefined;
            if (args?.bdsInstanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'bdsInstanceId'");
            }
            if (args?.clusterAdminPassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterAdminPassword'");
            }
            if (args?.nodeBackupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodeBackupId'");
            }
            if (args?.nodeHostName === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodeHostName'");
            }
            resourceInputs["bdsInstanceId"] = args?.bdsInstanceId;
            resourceInputs["clusterAdminPassword"] = args?.clusterAdminPassword ? pulumi.secret(args.clusterAdminPassword) : undefined;
            resourceInputs["nodeBackupId"] = args?.nodeBackupId;
            resourceInputs["nodeHostName"] = args?.nodeHostName;
            resourceInputs["shape"] = args?.shape;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clusterAdminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BdsInstanceReplaceNodeAction.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BdsInstanceReplaceNodeAction resources.
 */
export interface BdsInstanceReplaceNodeActionState {
    /**
     * The OCID of the cluster.
     */
    bdsInstanceId?: pulumi.Input<string>;
    /**
     * Base-64 encoded password for the cluster admin user.
     */
    clusterAdminPassword?: pulumi.Input<string>;
    /**
     * The id of the nodeBackup to use for replacing the node.
     */
    nodeBackupId?: pulumi.Input<string>;
    /**
     * Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
     */
    nodeHostName?: pulumi.Input<string>;
    /**
     * Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    shape?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BdsInstanceReplaceNodeAction resource.
 */
export interface BdsInstanceReplaceNodeActionArgs {
    /**
     * The OCID of the cluster.
     */
    bdsInstanceId: pulumi.Input<string>;
    /**
     * Base-64 encoded password for the cluster admin user.
     */
    clusterAdminPassword: pulumi.Input<string>;
    /**
     * The id of the nodeBackup to use for replacing the node.
     */
    nodeBackupId: pulumi.Input<string>;
    /**
     * Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
     */
    nodeHostName: pulumi.Input<string>;
    /**
     * Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    shape?: pulumi.Input<string>;
}
