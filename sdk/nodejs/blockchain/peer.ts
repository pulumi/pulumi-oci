// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Peer resource in Oracle Cloud Infrastructure Blockchain service.
 *
 * Create Blockchain Platform Peer
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testPeer = new oci.blockchain.Peer("testPeer", {
 *     ad: _var.peer_ad,
 *     blockchainPlatformId: oci_blockchain_blockchain_platform.test_blockchain_platform.id,
 *     ocpuAllocationParam: {
 *         ocpuAllocationNumber: _var.peer_ocpu_allocation_param_ocpu_allocation_number,
 *     },
 *     role: _var.peer_role,
 *     alias: _var.peer_alias,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Peers can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:Blockchain/peer:Peer test_peer "blockchainPlatforms/{blockchainPlatformId}/peers/{peerId}"
 * ```
 */
export class Peer extends pulumi.CustomResource {
    /**
     * Get an existing Peer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PeerState, opts?: pulumi.CustomResourceOptions): Peer {
        return new Peer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Blockchain/peer:Peer';

    /**
     * Returns true if the given object is an instance of Peer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Peer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Peer.__pulumiType;
    }

    /**
     * Availability Domain to place new peer
     */
    public readonly ad!: pulumi.Output<string>;
    /**
     * peer alias
     */
    public readonly alias!: pulumi.Output<string>;
    /**
     * Unique service identifier.
     */
    public readonly blockchainPlatformId!: pulumi.Output<string>;
    /**
     * Host on which the Peer exists
     */
    public /*out*/ readonly host!: pulumi.Output<string>;
    /**
     * (Updatable) OCPU allocation parameter
     */
    public readonly ocpuAllocationParam!: pulumi.Output<outputs.Blockchain.PeerOcpuAllocationParam>;
    /**
     * peer identifier
     */
    public /*out*/ readonly peerKey!: pulumi.Output<string>;
    /**
     * Peer role
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * The current state of the peer.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a Peer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PeerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PeerArgs | PeerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PeerState | undefined;
            resourceInputs["ad"] = state ? state.ad : undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["blockchainPlatformId"] = state ? state.blockchainPlatformId : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["ocpuAllocationParam"] = state ? state.ocpuAllocationParam : undefined;
            resourceInputs["peerKey"] = state ? state.peerKey : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as PeerArgs | undefined;
            if ((!args || args.ad === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ad'");
            }
            if ((!args || args.blockchainPlatformId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockchainPlatformId'");
            }
            if ((!args || args.ocpuAllocationParam === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ocpuAllocationParam'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["ad"] = args ? args.ad : undefined;
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["blockchainPlatformId"] = args ? args.blockchainPlatformId : undefined;
            resourceInputs["ocpuAllocationParam"] = args ? args.ocpuAllocationParam : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["peerKey"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Peer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Peer resources.
 */
export interface PeerState {
    /**
     * Availability Domain to place new peer
     */
    ad?: pulumi.Input<string>;
    /**
     * peer alias
     */
    alias?: pulumi.Input<string>;
    /**
     * Unique service identifier.
     */
    blockchainPlatformId?: pulumi.Input<string>;
    /**
     * Host on which the Peer exists
     */
    host?: pulumi.Input<string>;
    /**
     * (Updatable) OCPU allocation parameter
     */
    ocpuAllocationParam?: pulumi.Input<inputs.Blockchain.PeerOcpuAllocationParam>;
    /**
     * peer identifier
     */
    peerKey?: pulumi.Input<string>;
    /**
     * Peer role
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    role?: pulumi.Input<string>;
    /**
     * The current state of the peer.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Peer resource.
 */
export interface PeerArgs {
    /**
     * Availability Domain to place new peer
     */
    ad: pulumi.Input<string>;
    /**
     * peer alias
     */
    alias?: pulumi.Input<string>;
    /**
     * Unique service identifier.
     */
    blockchainPlatformId: pulumi.Input<string>;
    /**
     * (Updatable) OCPU allocation parameter
     */
    ocpuAllocationParam: pulumi.Input<inputs.Blockchain.PeerOcpuAllocationParam>;
    /**
     * Peer role
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    role: pulumi.Input<string>;
}
