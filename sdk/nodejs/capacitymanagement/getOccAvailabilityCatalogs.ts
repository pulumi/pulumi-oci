// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Occ Availability Catalogs in Oracle Cloud Infrastructure Capacity Management service.
 *
 * Lists all availability catalogs.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testOccAvailabilityCatalogs = oci.CapacityManagement.getOccAvailabilityCatalogs({
 *     compartmentId: compartmentId,
 *     catalogState: occAvailabilityCatalogCatalogState,
 *     displayName: occAvailabilityCatalogDisplayName,
 *     id: occAvailabilityCatalogId,
 *     namespace: occAvailabilityCatalogNamespace,
 * });
 * ```
 */
export function getOccAvailabilityCatalogs(args: GetOccAvailabilityCatalogsArgs, opts?: pulumi.InvokeOptions): Promise<GetOccAvailabilityCatalogsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:CapacityManagement/getOccAvailabilityCatalogs:getOccAvailabilityCatalogs", {
        "catalogState": args.catalogState,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "namespace": args.namespace,
    }, opts);
}

/**
 * A collection of arguments for invoking getOccAvailabilityCatalogs.
 */
export interface GetOccAvailabilityCatalogsArgs {
    /**
     * Filter the list of availability catalogs based on the catalog state.
     */
    catalogState?: string;
    /**
     * The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
     */
    compartmentId: string;
    /**
     * A filter to return only the resources that match the entire display name. The match is not case sensitive.
     */
    displayName?: string;
    filters?: inputs.CapacityManagement.GetOccAvailabilityCatalogsFilter[];
    /**
     * The OCID of the availability catalog to filter the list of availability catalogs.
     */
    id?: string;
    /**
     * The namespace by which we would filter the list.
     */
    namespace?: string;
}

/**
 * A collection of values returned by getOccAvailabilityCatalogs.
 */
export interface GetOccAvailabilityCatalogsResult {
    /**
     * The different states associated with the availability catalog.
     */
    readonly catalogState?: string;
    /**
     * The OCID of the tenancy where the availability catalog resides.
     */
    readonly compartmentId: string;
    /**
     * A user-friendly name for the availability catalog.
     */
    readonly displayName?: string;
    readonly filters?: outputs.CapacityManagement.GetOccAvailabilityCatalogsFilter[];
    /**
     * The OCID of the availability catalog.
     */
    readonly id?: string;
    /**
     * The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
     */
    readonly namespace?: string;
    /**
     * The list of occ_availability_catalog_collection.
     */
    readonly occAvailabilityCatalogCollections: outputs.CapacityManagement.GetOccAvailabilityCatalogsOccAvailabilityCatalogCollection[];
}
/**
 * This data source provides the list of Occ Availability Catalogs in Oracle Cloud Infrastructure Capacity Management service.
 *
 * Lists all availability catalogs.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testOccAvailabilityCatalogs = oci.CapacityManagement.getOccAvailabilityCatalogs({
 *     compartmentId: compartmentId,
 *     catalogState: occAvailabilityCatalogCatalogState,
 *     displayName: occAvailabilityCatalogDisplayName,
 *     id: occAvailabilityCatalogId,
 *     namespace: occAvailabilityCatalogNamespace,
 * });
 * ```
 */
export function getOccAvailabilityCatalogsOutput(args: GetOccAvailabilityCatalogsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetOccAvailabilityCatalogsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:CapacityManagement/getOccAvailabilityCatalogs:getOccAvailabilityCatalogs", {
        "catalogState": args.catalogState,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "namespace": args.namespace,
    }, opts);
}

/**
 * A collection of arguments for invoking getOccAvailabilityCatalogs.
 */
export interface GetOccAvailabilityCatalogsOutputArgs {
    /**
     * Filter the list of availability catalogs based on the catalog state.
     */
    catalogState?: pulumi.Input<string>;
    /**
     * The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * A filter to return only the resources that match the entire display name. The match is not case sensitive.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.CapacityManagement.GetOccAvailabilityCatalogsFilterArgs>[]>;
    /**
     * The OCID of the availability catalog to filter the list of availability catalogs.
     */
    id?: pulumi.Input<string>;
    /**
     * The namespace by which we would filter the list.
     */
    namespace?: pulumi.Input<string>;
}
