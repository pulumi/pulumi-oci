// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Certificate Version resource in Oracle Cloud Infrastructure Certificates Management service.
 *
 * Gets details about the specified version of a certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testCertificateVersion = oci.CertificatesManagement.getCertificateVersion({
 *     certificateId: testCertificate.id,
 *     certificateVersionNumber: certificateVersionCertificateVersionNumber,
 * });
 * ```
 */
export function getCertificateVersion(args: GetCertificateVersionArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificateVersionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:CertificatesManagement/getCertificateVersion:getCertificateVersion", {
        "certificateId": args.certificateId,
        "certificateVersionNumber": args.certificateVersionNumber,
    }, opts);
}

/**
 * A collection of arguments for invoking getCertificateVersion.
 */
export interface GetCertificateVersionArgs {
    /**
     * The OCID of the certificate.
     */
    certificateId: string;
    /**
     * The version number of the certificate.
     */
    certificateVersionNumber: string;
}

/**
 * A collection of values returned by getCertificateVersion.
 */
export interface GetCertificateVersionResult {
    /**
     * The OCID of the certificate.
     */
    readonly certificateId: string;
    readonly certificateVersionNumber: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The version number of the issuing certificate authority (CA).
     */
    readonly issuerCaVersionNumber: string;
    /**
     * The current revocation status of the entity.
     */
    readonly revocationStatuses: outputs.CertificatesManagement.GetCertificateVersionRevocationStatus[];
    /**
     * A unique certificate identifier used in certificate revocation tracking, formatted as octets. Example: `03 AC FC FA CC B3 CB 02 B8 F8 DE F5 85 E7 7B FF`
     */
    readonly serialNumber: string;
    /**
     * A list of stages of this entity.
     */
    readonly stages: string[];
    /**
     * A list of subject alternative names.
     */
    readonly subjectAlternativeNames: outputs.CertificatesManagement.GetCertificateVersionSubjectAlternativeName[];
    /**
     * A optional property indicating when the certificate version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     */
    readonly timeCreated: string;
    /**
     * An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     */
    readonly timeOfDeletion: string;
    /**
     * An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
     */
    readonly validities: outputs.CertificatesManagement.GetCertificateVersionValidity[];
    /**
     * The name of the certificate version. When the value is not null, a name is unique across versions of a given certificate.
     */
    readonly versionName: string;
    /**
     * The version number of the certificate.
     */
    readonly versionNumber: string;
}
/**
 * This data source provides details about a specific Certificate Version resource in Oracle Cloud Infrastructure Certificates Management service.
 *
 * Gets details about the specified version of a certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testCertificateVersion = oci.CertificatesManagement.getCertificateVersion({
 *     certificateId: testCertificate.id,
 *     certificateVersionNumber: certificateVersionCertificateVersionNumber,
 * });
 * ```
 */
export function getCertificateVersionOutput(args: GetCertificateVersionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCertificateVersionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:CertificatesManagement/getCertificateVersion:getCertificateVersion", {
        "certificateId": args.certificateId,
        "certificateVersionNumber": args.certificateVersionNumber,
    }, opts);
}

/**
 * A collection of arguments for invoking getCertificateVersion.
 */
export interface GetCertificateVersionOutputArgs {
    /**
     * The OCID of the certificate.
     */
    certificateId: pulumi.Input<string>;
    /**
     * The version number of the certificate.
     */
    certificateVersionNumber: pulumi.Input<string>;
}
