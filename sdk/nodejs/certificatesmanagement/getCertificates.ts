// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Certificates in Oracle Cloud Infrastructure Certificates Management service.
 *
 * Lists all certificates that match the query parameters.
 * Optionally, you can use the parameter `FilterByCertificateIdQueryParam` to limit the result set to a single item that matches the specified certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testCertificates = oci.CertificatesManagement.getCertificates({
 *     certificateId: oci_certificates_management_certificate.test_certificate.id,
 *     compartmentId: _var.compartment_id,
 *     issuerCertificateAuthorityId: oci_certificates_management_certificate_authority.test_certificate_authority.id,
 *     name: _var.certificate_name,
 *     state: _var.certificate_state,
 * });
 * ```
 */
export function getCertificates(args?: GetCertificatesArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificatesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:CertificatesManagement/getCertificates:getCertificates", {
        "certificateId": args.certificateId,
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "issuerCertificateAuthorityId": args.issuerCertificateAuthorityId,
        "name": args.name,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getCertificates.
 */
export interface GetCertificatesArgs {
    /**
     * The OCID of the certificate. If the parameter is set to null, the service lists all certificates.
     */
    certificateId?: string;
    /**
     * A filter that returns only resources that match the given compartment OCID.
     */
    compartmentId?: string;
    filters?: inputs.CertificatesManagement.GetCertificatesFilter[];
    /**
     * The OCID of the certificate authority (CA). If the parameter is set to null, the service lists all CAs.
     */
    issuerCertificateAuthorityId?: string;
    /**
     * A filter that returns only resources that match the specified name.
     */
    name?: string;
    /**
     * A filter that returns only resources that match the given lifecycle state. The state value is case-insensitive.
     */
    state?: string;
}

/**
 * A collection of values returned by getCertificates.
 */
export interface GetCertificatesResult {
    /**
     * The list of certificate_collection.
     */
    readonly certificateCollections: outputs.CertificatesManagement.GetCertificatesCertificateCollection[];
    /**
     * The OCID of the certificate.
     */
    readonly certificateId?: string;
    /**
     * The OCID of the compartment where you want to create the certificate.
     */
    readonly compartmentId?: string;
    readonly filters?: outputs.CertificatesManagement.GetCertificatesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The OCID of the certificate authority (CA) that issued the certificate.
     */
    readonly issuerCertificateAuthorityId?: string;
    /**
     * A user-friendly name for the certificate. Names are unique within a compartment. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     */
    readonly name?: string;
    /**
     * The current lifecycle state of the certificate.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Certificates in Oracle Cloud Infrastructure Certificates Management service.
 *
 * Lists all certificates that match the query parameters.
 * Optionally, you can use the parameter `FilterByCertificateIdQueryParam` to limit the result set to a single item that matches the specified certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testCertificates = oci.CertificatesManagement.getCertificates({
 *     certificateId: oci_certificates_management_certificate.test_certificate.id,
 *     compartmentId: _var.compartment_id,
 *     issuerCertificateAuthorityId: oci_certificates_management_certificate_authority.test_certificate_authority.id,
 *     name: _var.certificate_name,
 *     state: _var.certificate_state,
 * });
 * ```
 */
export function getCertificatesOutput(args?: GetCertificatesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCertificatesResult> {
    return pulumi.output(args).apply((a: any) => getCertificates(a, opts))
}

/**
 * A collection of arguments for invoking getCertificates.
 */
export interface GetCertificatesOutputArgs {
    /**
     * The OCID of the certificate. If the parameter is set to null, the service lists all certificates.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * A filter that returns only resources that match the given compartment OCID.
     */
    compartmentId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.CertificatesManagement.GetCertificatesFilterArgs>[]>;
    /**
     * The OCID of the certificate authority (CA). If the parameter is set to null, the service lists all CAs.
     */
    issuerCertificateAuthorityId?: pulumi.Input<string>;
    /**
     * A filter that returns only resources that match the specified name.
     */
    name?: pulumi.Input<string>;
    /**
     * A filter that returns only resources that match the given lifecycle state. The state value is case-insensitive.
     */
    state?: pulumi.Input<string>;
}
