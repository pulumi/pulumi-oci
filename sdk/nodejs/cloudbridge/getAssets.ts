// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Assets in Oracle Cloud Infrastructure Cloud Bridge service.
 *
 * Returns a list of assets.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testAssets = oci.CloudBridge.getAssets({
 *     compartmentId: compartmentId,
 *     assetId: testAsset.id,
 *     assetType: assetAssetType,
 *     displayName: assetDisplayName,
 *     externalAssetKey: assetExternalAssetKey,
 *     inventoryId: testInventory.id,
 *     sourceKey: assetSourceKey,
 *     state: assetState,
 * });
 * ```
 */
export function getAssets(args: GetAssetsArgs, opts?: pulumi.InvokeOptions): Promise<GetAssetsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:CloudBridge/getAssets:getAssets", {
        "assetId": args.assetId,
        "assetType": args.assetType,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "externalAssetKey": args.externalAssetKey,
        "filters": args.filters,
        "inventoryId": args.inventoryId,
        "sourceKey": args.sourceKey,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getAssets.
 */
export interface GetAssetsArgs {
    /**
     * Unique asset identifier.
     */
    assetId?: string;
    /**
     * The type of asset.
     */
    assetType?: string;
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    /**
     * External asset key.
     */
    externalAssetKey?: string;
    filters?: inputs.CloudBridge.GetAssetsFilter[];
    /**
     * Unique Inventory identifier.
     */
    inventoryId?: string;
    /**
     * Source key from where the assets originate.
     */
    sourceKey?: string;
    /**
     * A filter to return only assets whose lifecycleState matches the given lifecycleState.
     */
    state?: string;
}

/**
 * A collection of values returned by getAssets.
 */
export interface GetAssetsResult {
    /**
     * The list of asset_collection.
     */
    readonly assetCollections: outputs.CloudBridge.GetAssetsAssetCollection[];
    readonly assetId?: string;
    /**
     * The type of asset.
     */
    readonly assetType?: string;
    /**
     * The OCID of the compartment to which an asset belongs to.
     */
    readonly compartmentId: string;
    /**
     * Asset display name.
     */
    readonly displayName?: string;
    /**
     * The key of the asset from the external environment.
     */
    readonly externalAssetKey?: string;
    readonly filters?: outputs.CloudBridge.GetAssetsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Inventory ID to which an asset belongs to.
     */
    readonly inventoryId?: string;
    /**
     * The source key that the asset belongs to.
     */
    readonly sourceKey?: string;
    /**
     * The current state of the asset.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Assets in Oracle Cloud Infrastructure Cloud Bridge service.
 *
 * Returns a list of assets.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testAssets = oci.CloudBridge.getAssets({
 *     compartmentId: compartmentId,
 *     assetId: testAsset.id,
 *     assetType: assetAssetType,
 *     displayName: assetDisplayName,
 *     externalAssetKey: assetExternalAssetKey,
 *     inventoryId: testInventory.id,
 *     sourceKey: assetSourceKey,
 *     state: assetState,
 * });
 * ```
 */
export function getAssetsOutput(args: GetAssetsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAssetsResult> {
    return pulumi.output(args).apply((a: any) => getAssets(a, opts))
}

/**
 * A collection of arguments for invoking getAssets.
 */
export interface GetAssetsOutputArgs {
    /**
     * Unique asset identifier.
     */
    assetId?: pulumi.Input<string>;
    /**
     * The type of asset.
     */
    assetType?: pulumi.Input<string>;
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    /**
     * External asset key.
     */
    externalAssetKey?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.CloudBridge.GetAssetsFilterArgs>[]>;
    /**
     * Unique Inventory identifier.
     */
    inventoryId?: pulumi.Input<string>;
    /**
     * Source key from where the assets originate.
     */
    sourceKey?: pulumi.Input<string>;
    /**
     * A filter to return only assets whose lifecycleState matches the given lifecycleState.
     */
    state?: pulumi.Input<string>;
}
