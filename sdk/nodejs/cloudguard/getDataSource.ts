// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Data Source resource in Oracle Cloud Infrastructure Cloud Guard service.
 *
 * Returns a DataSource identified by dataSourceId
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDataSource = oci.CloudGuard.getDataSource({
 *     dataSourceId: testDataSourceOciCloudGuardDataSource.id,
 * });
 * ```
 */
export function getDataSource(args: GetDataSourceArgs, opts?: pulumi.InvokeOptions): Promise<GetDataSourceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:CloudGuard/getDataSource:getDataSource", {
        "dataSourceId": args.dataSourceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDataSource.
 */
export interface GetDataSourceArgs {
    /**
     * DataSource OCID
     */
    dataSourceId: string;
}

/**
 * A collection of values returned by getDataSource.
 */
export interface GetDataSourceResult {
    /**
     * CompartmentId of Data source.
     */
    readonly compartmentId: string;
    /**
     * Details specific to the data source type.
     */
    readonly dataSourceDetails: outputs.CloudGuard.GetDataSourceDataSourceDetail[];
    /**
     * Information about the detector recipe and rule attached
     */
    readonly dataSourceDetectorMappingInfos: outputs.CloudGuard.GetDataSourceDataSourceDetectorMappingInfo[];
    /**
     * Possible type of dataSourceFeed Provider(LoggingQuery)
     */
    readonly dataSourceFeedProvider: string;
    readonly dataSourceId: string;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    readonly definedTags: {[key: string]: any};
    /**
     * DisplayName of Data source.
     */
    readonly displayName: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    readonly freeformTags: {[key: string]: any};
    /**
     * Ocid for Data source
     */
    readonly id: string;
    /**
     * Information about the region and status of query replication
     */
    readonly regionStatusDetails: outputs.CloudGuard.GetDataSourceRegionStatusDetail[];
    /**
     * The current state of the resource.
     */
    readonly state: string;
    /**
     * Status of data Source
     */
    readonly status: string;
    /**
     * System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    readonly systemTags: {[key: string]: any};
    /**
     * The date and time the Data source was created. Format defined by RFC3339.
     */
    readonly timeCreated: string;
    /**
     * The date and time the Data source was updated. Format defined by RFC3339.
     */
    readonly timeUpdated: string;
}
/**
 * This data source provides details about a specific Data Source resource in Oracle Cloud Infrastructure Cloud Guard service.
 *
 * Returns a DataSource identified by dataSourceId
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDataSource = oci.CloudGuard.getDataSource({
 *     dataSourceId: testDataSourceOciCloudGuardDataSource.id,
 * });
 * ```
 */
export function getDataSourceOutput(args: GetDataSourceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDataSourceResult> {
    return pulumi.output(args).apply((a: any) => getDataSource(a, opts))
}

/**
 * A collection of arguments for invoking getDataSource.
 */
export interface GetDataSourceOutputArgs {
    /**
     * DataSource OCID
     */
    dataSourceId: pulumi.Input<string>;
}
