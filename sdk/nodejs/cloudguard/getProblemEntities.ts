// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Problem Entities in Oracle Cloud Infrastructure Cloud Guard service.
 *
 * Returns a list of entities for a CloudGuard Problem
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testProblemEntities = oci.CloudGuard.getProblemEntities({
 *     problemId: oci_cloud_guard_problem.test_problem.id,
 * });
 * ```
 */
export function getProblemEntities(args: GetProblemEntitiesArgs, opts?: pulumi.InvokeOptions): Promise<GetProblemEntitiesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("oci:CloudGuard/getProblemEntities:getProblemEntities", {
        "filters": args.filters,
        "problemId": args.problemId,
    }, opts);
}

/**
 * A collection of arguments for invoking getProblemEntities.
 */
export interface GetProblemEntitiesArgs {
    filters?: inputs.CloudGuard.GetProblemEntitiesFilter[];
    /**
     * OCId of the problem.
     */
    problemId: string;
}

/**
 * A collection of values returned by getProblemEntities.
 */
export interface GetProblemEntitiesResult {
    readonly filters?: outputs.CloudGuard.GetProblemEntitiesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The list of problem_entity_collection.
     */
    readonly problemEntityCollections: outputs.CloudGuard.GetProblemEntitiesProblemEntityCollection[];
    /**
     * Attached problem id
     */
    readonly problemId: string;
}

export function getProblemEntitiesOutput(args: GetProblemEntitiesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProblemEntitiesResult> {
    return pulumi.output(args).apply(a => getProblemEntities(a, opts))
}

/**
 * A collection of arguments for invoking getProblemEntities.
 */
export interface GetProblemEntitiesOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.CloudGuard.GetProblemEntitiesFilterArgs>[]>;
    /**
     * OCId of the problem.
     */
    problemId: pulumi.Input<string>;
}
