// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Problem Entity resource in Oracle Cloud Infrastructure Cloud Guard service.
 *
 * Returns a list of entities for a CloudGuard Problem
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testProblemEntity = oci.CloudGuard.getProblemEntity({
 *     problemId: testProblem.id,
 * });
 * ```
 */
export function getProblemEntity(args: GetProblemEntityArgs, opts?: pulumi.InvokeOptions): Promise<GetProblemEntityResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:CloudGuard/getProblemEntity:getProblemEntity", {
        "problemId": args.problemId,
    }, opts);
}

/**
 * A collection of arguments for invoking getProblemEntity.
 */
export interface GetProblemEntityArgs {
    /**
     * OCId of the problem.
     */
    problemId: string;
}

/**
 * A collection of values returned by getProblemEntity.
 */
export interface GetProblemEntityResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * List of problem entities summaries related to a data source.
     */
    readonly items: outputs.CloudGuard.GetProblemEntityItem[];
    /**
     * Attached problem id
     */
    readonly problemId: string;
}
/**
 * This data source provides details about a specific Problem Entity resource in Oracle Cloud Infrastructure Cloud Guard service.
 *
 * Returns a list of entities for a CloudGuard Problem
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testProblemEntity = oci.CloudGuard.getProblemEntity({
 *     problemId: testProblem.id,
 * });
 * ```
 */
export function getProblemEntityOutput(args: GetProblemEntityOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProblemEntityResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:CloudGuard/getProblemEntity:getProblemEntity", {
        "problemId": args.problemId,
    }, opts);
}

/**
 * A collection of arguments for invoking getProblemEntity.
 */
export interface GetProblemEntityOutputArgs {
    /**
     * OCId of the problem.
     */
    problemId: pulumi.Input<string>;
}
