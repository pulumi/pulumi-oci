// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Security Zones in Oracle Cloud Infrastructure Cloud Guard service.
 *
 * Gets a list of all security zones in a compartment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSecurityZones = oci.CloudGuard.getSecurityZones({
 *     compartmentId: _var.compartment_id,
 *     displayName: _var.security_zone_display_name,
 *     id: _var.security_zone_id,
 *     isRequiredSecurityZonesInSubtree: _var.security_zone_is_required_security_zones_in_subtree,
 *     securityRecipeId: oci_cloud_guard_security_recipe.test_security_recipe.id,
 *     state: _var.security_zone_state,
 * });
 * ```
 */
export function getSecurityZones(args: GetSecurityZonesArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityZonesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:CloudGuard/getSecurityZones:getSecurityZones", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "isRequiredSecurityZonesInSubtree": args.isRequiredSecurityZonesInSubtree,
        "securityRecipeId": args.securityRecipeId,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityZones.
 */
export interface GetSecurityZonesArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.CloudGuard.GetSecurityZonesFilter[];
    /**
     * The unique identifier of the security zone (`SecurityZone`)
     */
    id?: string;
    /**
     * security zones in the subtree
     */
    isRequiredSecurityZonesInSubtree?: boolean;
    /**
     * The unique identifier of the security zone recipe (`SecurityRecipe`)
     */
    securityRecipeId?: string;
    /**
     * The field life cycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
     */
    state?: string;
}

/**
 * A collection of values returned by getSecurityZones.
 */
export interface GetSecurityZonesResult {
    /**
     * The OCID of the compartment for the security zone
     */
    readonly compartmentId: string;
    /**
     * The security zone's name
     */
    readonly displayName?: string;
    readonly filters?: outputs.CloudGuard.GetSecurityZonesFilter[];
    /**
     * Unique identifier that is immutable on creation
     */
    readonly id?: string;
    readonly isRequiredSecurityZonesInSubtree?: boolean;
    readonly securityRecipeId?: string;
    /**
     * The list of security_zone_collection.
     */
    readonly securityZoneCollections?: outputs.CloudGuard.GetSecurityZonesSecurityZoneCollection[];
    /**
     * The current state of the security zone
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Security Zones in Oracle Cloud Infrastructure Cloud Guard service.
 *
 * Gets a list of all security zones in a compartment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSecurityZones = oci.CloudGuard.getSecurityZones({
 *     compartmentId: _var.compartment_id,
 *     displayName: _var.security_zone_display_name,
 *     id: _var.security_zone_id,
 *     isRequiredSecurityZonesInSubtree: _var.security_zone_is_required_security_zones_in_subtree,
 *     securityRecipeId: oci_cloud_guard_security_recipe.test_security_recipe.id,
 *     state: _var.security_zone_state,
 * });
 * ```
 */
export function getSecurityZonesOutput(args: GetSecurityZonesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSecurityZonesResult> {
    return pulumi.output(args).apply((a: any) => getSecurityZones(a, opts))
}

/**
 * A collection of arguments for invoking getSecurityZones.
 */
export interface GetSecurityZonesOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.CloudGuard.GetSecurityZonesFilterArgs>[]>;
    /**
     * The unique identifier of the security zone (`SecurityZone`)
     */
    id?: pulumi.Input<string>;
    /**
     * security zones in the subtree
     */
    isRequiredSecurityZonesInSubtree?: pulumi.Input<boolean>;
    /**
     * The unique identifier of the security zone recipe (`SecurityRecipe`)
     */
    securityRecipeId?: pulumi.Input<string>;
    /**
     * The field life cycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
     */
    state?: pulumi.Input<string>;
}
