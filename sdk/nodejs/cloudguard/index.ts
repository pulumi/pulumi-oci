// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CloudGuardConfigurationArgs, CloudGuardConfigurationState } from "./cloudGuardConfiguration";
export type CloudGuardConfiguration = import("./cloudGuardConfiguration").CloudGuardConfiguration;
export const CloudGuardConfiguration: typeof import("./cloudGuardConfiguration").CloudGuardConfiguration = null as any;
utilities.lazyLoad(exports, ["CloudGuardConfiguration"], () => require("./cloudGuardConfiguration"));

export { CloudGuardDataSourceArgs, CloudGuardDataSourceState } from "./cloudGuardDataSource";
export type CloudGuardDataSource = import("./cloudGuardDataSource").CloudGuardDataSource;
export const CloudGuardDataSource: typeof import("./cloudGuardDataSource").CloudGuardDataSource = null as any;
utilities.lazyLoad(exports, ["CloudGuardDataSource"], () => require("./cloudGuardDataSource"));

export { DataMaskRuleArgs, DataMaskRuleState } from "./dataMaskRule";
export type DataMaskRule = import("./dataMaskRule").DataMaskRule;
export const DataMaskRule: typeof import("./dataMaskRule").DataMaskRule = null as any;
utilities.lazyLoad(exports, ["DataMaskRule"], () => require("./dataMaskRule"));

export { DetectorRecipeArgs, DetectorRecipeState } from "./detectorRecipe";
export type DetectorRecipe = import("./detectorRecipe").DetectorRecipe;
export const DetectorRecipe: typeof import("./detectorRecipe").DetectorRecipe = null as any;
utilities.lazyLoad(exports, ["DetectorRecipe"], () => require("./detectorRecipe"));

export { GetCloudGuardConfigurationArgs, GetCloudGuardConfigurationResult, GetCloudGuardConfigurationOutputArgs } from "./getCloudGuardConfiguration";
export const getCloudGuardConfiguration: typeof import("./getCloudGuardConfiguration").getCloudGuardConfiguration = null as any;
export const getCloudGuardConfigurationOutput: typeof import("./getCloudGuardConfiguration").getCloudGuardConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getCloudGuardConfiguration","getCloudGuardConfigurationOutput"], () => require("./getCloudGuardConfiguration"));

export { GetDataMaskRuleArgs, GetDataMaskRuleResult, GetDataMaskRuleOutputArgs } from "./getDataMaskRule";
export const getDataMaskRule: typeof import("./getDataMaskRule").getDataMaskRule = null as any;
export const getDataMaskRuleOutput: typeof import("./getDataMaskRule").getDataMaskRuleOutput = null as any;
utilities.lazyLoad(exports, ["getDataMaskRule","getDataMaskRuleOutput"], () => require("./getDataMaskRule"));

export { GetDataMaskRulesArgs, GetDataMaskRulesResult, GetDataMaskRulesOutputArgs } from "./getDataMaskRules";
export const getDataMaskRules: typeof import("./getDataMaskRules").getDataMaskRules = null as any;
export const getDataMaskRulesOutput: typeof import("./getDataMaskRules").getDataMaskRulesOutput = null as any;
utilities.lazyLoad(exports, ["getDataMaskRules","getDataMaskRulesOutput"], () => require("./getDataMaskRules"));

export { GetDataSourceArgs, GetDataSourceResult, GetDataSourceOutputArgs } from "./getDataSource";
export const getDataSource: typeof import("./getDataSource").getDataSource = null as any;
export const getDataSourceOutput: typeof import("./getDataSource").getDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getDataSource","getDataSourceOutput"], () => require("./getDataSource"));

export { GetDataSourceEventArgs, GetDataSourceEventResult, GetDataSourceEventOutputArgs } from "./getDataSourceEvent";
export const getDataSourceEvent: typeof import("./getDataSourceEvent").getDataSourceEvent = null as any;
export const getDataSourceEventOutput: typeof import("./getDataSourceEvent").getDataSourceEventOutput = null as any;
utilities.lazyLoad(exports, ["getDataSourceEvent","getDataSourceEventOutput"], () => require("./getDataSourceEvent"));

export { GetDataSourceEventsArgs, GetDataSourceEventsResult, GetDataSourceEventsOutputArgs } from "./getDataSourceEvents";
export const getDataSourceEvents: typeof import("./getDataSourceEvents").getDataSourceEvents = null as any;
export const getDataSourceEventsOutput: typeof import("./getDataSourceEvents").getDataSourceEventsOutput = null as any;
utilities.lazyLoad(exports, ["getDataSourceEvents","getDataSourceEventsOutput"], () => require("./getDataSourceEvents"));

export { GetDataSourcesArgs, GetDataSourcesResult, GetDataSourcesOutputArgs } from "./getDataSources";
export const getDataSources: typeof import("./getDataSources").getDataSources = null as any;
export const getDataSourcesOutput: typeof import("./getDataSources").getDataSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getDataSources","getDataSourcesOutput"], () => require("./getDataSources"));

export { GetDetectorRecipeArgs, GetDetectorRecipeResult, GetDetectorRecipeOutputArgs } from "./getDetectorRecipe";
export const getDetectorRecipe: typeof import("./getDetectorRecipe").getDetectorRecipe = null as any;
export const getDetectorRecipeOutput: typeof import("./getDetectorRecipe").getDetectorRecipeOutput = null as any;
utilities.lazyLoad(exports, ["getDetectorRecipe","getDetectorRecipeOutput"], () => require("./getDetectorRecipe"));

export { GetDetectorRecipesArgs, GetDetectorRecipesResult, GetDetectorRecipesOutputArgs } from "./getDetectorRecipes";
export const getDetectorRecipes: typeof import("./getDetectorRecipes").getDetectorRecipes = null as any;
export const getDetectorRecipesOutput: typeof import("./getDetectorRecipes").getDetectorRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getDetectorRecipes","getDetectorRecipesOutput"], () => require("./getDetectorRecipes"));

export { GetGuardTargetArgs, GetGuardTargetResult, GetGuardTargetOutputArgs } from "./getGuardTarget";
export const getGuardTarget: typeof import("./getGuardTarget").getGuardTarget = null as any;
export const getGuardTargetOutput: typeof import("./getGuardTarget").getGuardTargetOutput = null as any;
utilities.lazyLoad(exports, ["getGuardTarget","getGuardTargetOutput"], () => require("./getGuardTarget"));

export { GetGuardTargetsArgs, GetGuardTargetsResult, GetGuardTargetsOutputArgs } from "./getGuardTargets";
export const getGuardTargets: typeof import("./getGuardTargets").getGuardTargets = null as any;
export const getGuardTargetsOutput: typeof import("./getGuardTargets").getGuardTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getGuardTargets","getGuardTargetsOutput"], () => require("./getGuardTargets"));

export { GetManagedListArgs, GetManagedListResult, GetManagedListOutputArgs } from "./getManagedList";
export const getManagedList: typeof import("./getManagedList").getManagedList = null as any;
export const getManagedListOutput: typeof import("./getManagedList").getManagedListOutput = null as any;
utilities.lazyLoad(exports, ["getManagedList","getManagedListOutput"], () => require("./getManagedList"));

export { GetManagedListsArgs, GetManagedListsResult, GetManagedListsOutputArgs } from "./getManagedLists";
export const getManagedLists: typeof import("./getManagedLists").getManagedLists = null as any;
export const getManagedListsOutput: typeof import("./getManagedLists").getManagedListsOutput = null as any;
utilities.lazyLoad(exports, ["getManagedLists","getManagedListsOutput"], () => require("./getManagedLists"));

export { GetProblemEntitiesArgs, GetProblemEntitiesResult, GetProblemEntitiesOutputArgs } from "./getProblemEntities";
export const getProblemEntities: typeof import("./getProblemEntities").getProblemEntities = null as any;
export const getProblemEntitiesOutput: typeof import("./getProblemEntities").getProblemEntitiesOutput = null as any;
utilities.lazyLoad(exports, ["getProblemEntities","getProblemEntitiesOutput"], () => require("./getProblemEntities"));

export { GetProblemEntityArgs, GetProblemEntityResult, GetProblemEntityOutputArgs } from "./getProblemEntity";
export const getProblemEntity: typeof import("./getProblemEntity").getProblemEntity = null as any;
export const getProblemEntityOutput: typeof import("./getProblemEntity").getProblemEntityOutput = null as any;
utilities.lazyLoad(exports, ["getProblemEntity","getProblemEntityOutput"], () => require("./getProblemEntity"));

export { GetResponderRecipeArgs, GetResponderRecipeResult, GetResponderRecipeOutputArgs } from "./getResponderRecipe";
export const getResponderRecipe: typeof import("./getResponderRecipe").getResponderRecipe = null as any;
export const getResponderRecipeOutput: typeof import("./getResponderRecipe").getResponderRecipeOutput = null as any;
utilities.lazyLoad(exports, ["getResponderRecipe","getResponderRecipeOutput"], () => require("./getResponderRecipe"));

export { GetResponderRecipesArgs, GetResponderRecipesResult, GetResponderRecipesOutputArgs } from "./getResponderRecipes";
export const getResponderRecipes: typeof import("./getResponderRecipes").getResponderRecipes = null as any;
export const getResponderRecipesOutput: typeof import("./getResponderRecipes").getResponderRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getResponderRecipes","getResponderRecipesOutput"], () => require("./getResponderRecipes"));

export { GetSecurityPoliciesArgs, GetSecurityPoliciesResult, GetSecurityPoliciesOutputArgs } from "./getSecurityPolicies";
export const getSecurityPolicies: typeof import("./getSecurityPolicies").getSecurityPolicies = null as any;
export const getSecurityPoliciesOutput: typeof import("./getSecurityPolicies").getSecurityPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityPolicies","getSecurityPoliciesOutput"], () => require("./getSecurityPolicies"));

export { GetSecurityPolicyArgs, GetSecurityPolicyResult, GetSecurityPolicyOutputArgs } from "./getSecurityPolicy";
export const getSecurityPolicy: typeof import("./getSecurityPolicy").getSecurityPolicy = null as any;
export const getSecurityPolicyOutput: typeof import("./getSecurityPolicy").getSecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityPolicy","getSecurityPolicyOutput"], () => require("./getSecurityPolicy"));

export { GetSecurityRecipeArgs, GetSecurityRecipeResult, GetSecurityRecipeOutputArgs } from "./getSecurityRecipe";
export const getSecurityRecipe: typeof import("./getSecurityRecipe").getSecurityRecipe = null as any;
export const getSecurityRecipeOutput: typeof import("./getSecurityRecipe").getSecurityRecipeOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityRecipe","getSecurityRecipeOutput"], () => require("./getSecurityRecipe"));

export { GetSecurityRecipesArgs, GetSecurityRecipesResult, GetSecurityRecipesOutputArgs } from "./getSecurityRecipes";
export const getSecurityRecipes: typeof import("./getSecurityRecipes").getSecurityRecipes = null as any;
export const getSecurityRecipesOutput: typeof import("./getSecurityRecipes").getSecurityRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityRecipes","getSecurityRecipesOutput"], () => require("./getSecurityRecipes"));

export { GetSecurityZoneArgs, GetSecurityZoneResult, GetSecurityZoneOutputArgs } from "./getSecurityZone";
export const getSecurityZone: typeof import("./getSecurityZone").getSecurityZone = null as any;
export const getSecurityZoneOutput: typeof import("./getSecurityZone").getSecurityZoneOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityZone","getSecurityZoneOutput"], () => require("./getSecurityZone"));

export { GetSecurityZonesArgs, GetSecurityZonesResult, GetSecurityZonesOutputArgs } from "./getSecurityZones";
export const getSecurityZones: typeof import("./getSecurityZones").getSecurityZones = null as any;
export const getSecurityZonesOutput: typeof import("./getSecurityZones").getSecurityZonesOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityZones","getSecurityZonesOutput"], () => require("./getSecurityZones"));

export { ManagedListArgs, ManagedListState } from "./managedList";
export type ManagedList = import("./managedList").ManagedList;
export const ManagedList: typeof import("./managedList").ManagedList = null as any;
utilities.lazyLoad(exports, ["ManagedList"], () => require("./managedList"));

export { ResponderRecipeArgs, ResponderRecipeState } from "./responderRecipe";
export type ResponderRecipe = import("./responderRecipe").ResponderRecipe;
export const ResponderRecipe: typeof import("./responderRecipe").ResponderRecipe = null as any;
utilities.lazyLoad(exports, ["ResponderRecipe"], () => require("./responderRecipe"));

export { SecurityRecipeArgs, SecurityRecipeState } from "./securityRecipe";
export type SecurityRecipe = import("./securityRecipe").SecurityRecipe;
export const SecurityRecipe: typeof import("./securityRecipe").SecurityRecipe = null as any;
utilities.lazyLoad(exports, ["SecurityRecipe"], () => require("./securityRecipe"));

export { SecurityZoneArgs, SecurityZoneState } from "./securityZone";
export type SecurityZone = import("./securityZone").SecurityZone;
export const SecurityZone: typeof import("./securityZone").SecurityZone = null as any;
utilities.lazyLoad(exports, ["SecurityZone"], () => require("./securityZone"));

export { TargetArgs, TargetState } from "./target";
export type Target = import("./target").Target;
export const Target: typeof import("./target").Target = null as any;
utilities.lazyLoad(exports, ["Target"], () => require("./target"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:CloudGuard/cloudGuardConfiguration:CloudGuardConfiguration":
                return new CloudGuardConfiguration(name, <any>undefined, { urn })
            case "oci:CloudGuard/cloudGuardDataSource:CloudGuardDataSource":
                return new CloudGuardDataSource(name, <any>undefined, { urn })
            case "oci:CloudGuard/dataMaskRule:DataMaskRule":
                return new DataMaskRule(name, <any>undefined, { urn })
            case "oci:CloudGuard/detectorRecipe:DetectorRecipe":
                return new DetectorRecipe(name, <any>undefined, { urn })
            case "oci:CloudGuard/managedList:ManagedList":
                return new ManagedList(name, <any>undefined, { urn })
            case "oci:CloudGuard/responderRecipe:ResponderRecipe":
                return new ResponderRecipe(name, <any>undefined, { urn })
            case "oci:CloudGuard/securityRecipe:SecurityRecipe":
                return new SecurityRecipe(name, <any>undefined, { urn })
            case "oci:CloudGuard/securityZone:SecurityZone":
                return new SecurityZone(name, <any>undefined, { urn })
            case "oci:CloudGuard/target:Target":
                return new Target(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "CloudGuard/cloudGuardConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "CloudGuard/cloudGuardDataSource", _module)
pulumi.runtime.registerResourceModule("oci", "CloudGuard/dataMaskRule", _module)
pulumi.runtime.registerResourceModule("oci", "CloudGuard/detectorRecipe", _module)
pulumi.runtime.registerResourceModule("oci", "CloudGuard/managedList", _module)
pulumi.runtime.registerResourceModule("oci", "CloudGuard/responderRecipe", _module)
pulumi.runtime.registerResourceModule("oci", "CloudGuard/securityRecipe", _module)
pulumi.runtime.registerResourceModule("oci", "CloudGuard/securityZone", _module)
pulumi.runtime.registerResourceModule("oci", "CloudGuard/target", _module)
