// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Target Asset resource in Oracle Cloud Infrastructure Cloud Migrations service.
 *
 * Creates a target asset.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testTargetAsset = new oci.cloudmigrations.TargetAsset("test_target_asset", {
 *     isExcludedFromExecution: targetAssetIsExcludedFromExecution,
 *     migrationPlanId: testMigrationPlan.id,
 *     preferredShapeType: targetAssetPreferredShapeType,
 *     type: targetAssetType,
 *     userSpec: {
 *         agentConfig: {
 *             areAllPluginsDisabled: targetAssetUserSpecAgentConfigAreAllPluginsDisabled,
 *             isManagementDisabled: targetAssetUserSpecAgentConfigIsManagementDisabled,
 *             isMonitoringDisabled: targetAssetUserSpecAgentConfigIsMonitoringDisabled,
 *             pluginsConfigs: [{
 *                 desiredState: targetAssetUserSpecAgentConfigPluginsConfigDesiredState,
 *                 name: targetAssetUserSpecAgentConfigPluginsConfigName,
 *             }],
 *         },
 *         availabilityDomain: targetAssetUserSpecAvailabilityDomain,
 *         capacityReservationId: testCapacityReservation.id,
 *         compartmentId: compartmentId,
 *         createVnicDetails: {
 *             assignPrivateDnsRecord: targetAssetUserSpecCreateVnicDetailsAssignPrivateDnsRecord,
 *             assignPublicIp: targetAssetUserSpecCreateVnicDetailsAssignPublicIp,
 *             definedTags: {
 *                 "foo-namespace.bar-key": "value",
 *             },
 *             displayName: targetAssetUserSpecCreateVnicDetailsDisplayName,
 *             freeformTags: {
 *                 "bar-key": "value",
 *             },
 *             hostnameLabel: targetAssetUserSpecCreateVnicDetailsHostnameLabel,
 *             nsgIds: targetAssetUserSpecCreateVnicDetailsNsgIds,
 *             privateIp: targetAssetUserSpecCreateVnicDetailsPrivateIp,
 *             skipSourceDestCheck: targetAssetUserSpecCreateVnicDetailsSkipSourceDestCheck,
 *             subnetId: testSubnet.id,
 *             vlanId: testVlan.id,
 *         },
 *         dedicatedVmHostId: testDedicatedVmHost.id,
 *         definedTags: {
 *             "foo-namespace.bar-key": "value",
 *         },
 *         displayName: targetAssetUserSpecDisplayName,
 *         faultDomain: targetAssetUserSpecFaultDomain,
 *         freeformTags: {
 *             "bar-key": "value",
 *         },
 *         hostnameLabel: targetAssetUserSpecHostnameLabel,
 *         instanceOptions: {
 *             areLegacyImdsEndpointsDisabled: targetAssetUserSpecInstanceOptionsAreLegacyImdsEndpointsDisabled,
 *         },
 *         ipxeScript: targetAssetUserSpecIpxeScript,
 *         isPvEncryptionInTransitEnabled: targetAssetUserSpecIsPvEncryptionInTransitEnabled,
 *         preemptibleInstanceConfig: {
 *             preemptionAction: {
 *                 type: targetAssetUserSpecPreemptibleInstanceConfigPreemptionActionType,
 *                 preserveBootVolume: targetAssetUserSpecPreemptibleInstanceConfigPreemptionActionPreserveBootVolume,
 *             },
 *         },
 *         shape: targetAssetUserSpecShape,
 *         shapeConfig: {
 *             baselineOcpuUtilization: targetAssetUserSpecShapeConfigBaselineOcpuUtilization,
 *             memoryInGbs: targetAssetUserSpecShapeConfigMemoryInGbs,
 *             ocpus: targetAssetUserSpecShapeConfigOcpus,
 *         },
 *         sourceDetails: {
 *             sourceType: targetAssetUserSpecSourceDetailsSourceType,
 *             bootVolumeId: testBootVolume.id,
 *             bootVolumeSizeInGbs: targetAssetUserSpecSourceDetailsBootVolumeSizeInGbs,
 *             bootVolumeVpusPerGb: targetAssetUserSpecSourceDetailsBootVolumeVpusPerGb,
 *             imageId: testImage.id,
 *             kmsKeyId: testKey.id,
 *         },
 *     },
 *     blockVolumesPerformance: targetAssetBlockVolumesPerformance,
 *     msLicense: targetAssetMsLicense,
 * });
 * ```
 *
 * ## Import
 *
 * TargetAssets can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:CloudMigrations/targetAsset:TargetAsset test_target_asset "id"
 * ```
 */
export class TargetAsset extends pulumi.CustomResource {
    /**
     * Get an existing TargetAsset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TargetAssetState, opts?: pulumi.CustomResourceOptions): TargetAsset {
        return new TargetAsset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:CloudMigrations/targetAsset:TargetAsset';

    /**
     * Returns true if the given object is an instance of TargetAsset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TargetAsset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TargetAsset.__pulumiType;
    }

    /**
     * (Updatable) Performance of the block volumes.
     */
    declare public readonly blockVolumesPerformance: pulumi.Output<number>;
    /**
     * The OCID of the compartment.
     */
    declare public /*out*/ readonly compartmentId: pulumi.Output<string>;
    /**
     * Messages about the compatibility issues.
     */
    declare public /*out*/ readonly compatibilityMessages: pulumi.Output<outputs.CloudMigrations.TargetAssetCompatibilityMessage[]>;
    /**
     * Created resource identifier
     */
    declare public /*out*/ readonly createdResourceId: pulumi.Output<string>;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    declare public /*out*/ readonly displayName: pulumi.Output<string>;
    /**
     * Cost estimation description
     */
    declare public /*out*/ readonly estimatedCosts: pulumi.Output<outputs.CloudMigrations.TargetAssetEstimatedCost[]>;
    /**
     * (Updatable) A boolean indicating whether the asset should be migrated.
     */
    declare public readonly isExcludedFromExecution: pulumi.Output<boolean>;
    /**
     * A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
     */
    declare public /*out*/ readonly lifecycleDetails: pulumi.Output<string>;
    /**
     * Description of the migration asset.
     */
    declare public /*out*/ readonly migrationAssets: pulumi.Output<outputs.CloudMigrations.TargetAssetMigrationAsset[]>;
    /**
     * OCID of the associated migration plan.
     */
    declare public readonly migrationPlanId: pulumi.Output<string>;
    /**
     * (Updatable) Microsoft license for the VM configuration.
     */
    declare public readonly msLicense: pulumi.Output<string>;
    /**
     * (Updatable) Preferred VM shape type that you provide.
     */
    declare public readonly preferredShapeType: pulumi.Output<string>;
    /**
     * Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     */
    declare public /*out*/ readonly recommendedSpecs: pulumi.Output<outputs.CloudMigrations.TargetAssetRecommendedSpec[]>;
    /**
     * The current state of the target asset.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     */
    declare public /*out*/ readonly testSpecs: pulumi.Output<outputs.CloudMigrations.TargetAssetTestSpec[]>;
    /**
     * The time when the assessment was done. An RFC3339 formatted datetime string.
     */
    declare public /*out*/ readonly timeAssessed: pulumi.Output<string>;
    /**
     * The time when the target asset was created. An RFC3339 formatted datetime string.
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * The time when the target asset was updated. An RFC3339 formatted datetime string.
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;
    /**
     * (Updatable) The type of target asset.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * (Updatable) Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     */
    declare public readonly userSpec: pulumi.Output<outputs.CloudMigrations.TargetAssetUserSpec>;

    /**
     * Create a TargetAsset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TargetAssetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TargetAssetArgs | TargetAssetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TargetAssetState | undefined;
            resourceInputs["blockVolumesPerformance"] = state?.blockVolumesPerformance;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["compatibilityMessages"] = state?.compatibilityMessages;
            resourceInputs["createdResourceId"] = state?.createdResourceId;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["estimatedCosts"] = state?.estimatedCosts;
            resourceInputs["isExcludedFromExecution"] = state?.isExcludedFromExecution;
            resourceInputs["lifecycleDetails"] = state?.lifecycleDetails;
            resourceInputs["migrationAssets"] = state?.migrationAssets;
            resourceInputs["migrationPlanId"] = state?.migrationPlanId;
            resourceInputs["msLicense"] = state?.msLicense;
            resourceInputs["preferredShapeType"] = state?.preferredShapeType;
            resourceInputs["recommendedSpecs"] = state?.recommendedSpecs;
            resourceInputs["state"] = state?.state;
            resourceInputs["testSpecs"] = state?.testSpecs;
            resourceInputs["timeAssessed"] = state?.timeAssessed;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
            resourceInputs["type"] = state?.type;
            resourceInputs["userSpec"] = state?.userSpec;
        } else {
            const args = argsOrState as TargetAssetArgs | undefined;
            if (args?.isExcludedFromExecution === undefined && !opts.urn) {
                throw new Error("Missing required property 'isExcludedFromExecution'");
            }
            if (args?.migrationPlanId === undefined && !opts.urn) {
                throw new Error("Missing required property 'migrationPlanId'");
            }
            if (args?.preferredShapeType === undefined && !opts.urn) {
                throw new Error("Missing required property 'preferredShapeType'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.userSpec === undefined && !opts.urn) {
                throw new Error("Missing required property 'userSpec'");
            }
            resourceInputs["blockVolumesPerformance"] = args?.blockVolumesPerformance;
            resourceInputs["isExcludedFromExecution"] = args?.isExcludedFromExecution;
            resourceInputs["migrationPlanId"] = args?.migrationPlanId;
            resourceInputs["msLicense"] = args?.msLicense;
            resourceInputs["preferredShapeType"] = args?.preferredShapeType;
            resourceInputs["type"] = args?.type;
            resourceInputs["userSpec"] = args?.userSpec;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["compatibilityMessages"] = undefined /*out*/;
            resourceInputs["createdResourceId"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["estimatedCosts"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["migrationAssets"] = undefined /*out*/;
            resourceInputs["recommendedSpecs"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["testSpecs"] = undefined /*out*/;
            resourceInputs["timeAssessed"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TargetAsset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TargetAsset resources.
 */
export interface TargetAssetState {
    /**
     * (Updatable) Performance of the block volumes.
     */
    blockVolumesPerformance?: pulumi.Input<number>;
    /**
     * The OCID of the compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * Messages about the compatibility issues.
     */
    compatibilityMessages?: pulumi.Input<pulumi.Input<inputs.CloudMigrations.TargetAssetCompatibilityMessage>[]>;
    /**
     * Created resource identifier
     */
    createdResourceId?: pulumi.Input<string>;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Cost estimation description
     */
    estimatedCosts?: pulumi.Input<pulumi.Input<inputs.CloudMigrations.TargetAssetEstimatedCost>[]>;
    /**
     * (Updatable) A boolean indicating whether the asset should be migrated.
     */
    isExcludedFromExecution?: pulumi.Input<boolean>;
    /**
     * A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * Description of the migration asset.
     */
    migrationAssets?: pulumi.Input<pulumi.Input<inputs.CloudMigrations.TargetAssetMigrationAsset>[]>;
    /**
     * OCID of the associated migration plan.
     */
    migrationPlanId?: pulumi.Input<string>;
    /**
     * (Updatable) Microsoft license for the VM configuration.
     */
    msLicense?: pulumi.Input<string>;
    /**
     * (Updatable) Preferred VM shape type that you provide.
     */
    preferredShapeType?: pulumi.Input<string>;
    /**
     * Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     */
    recommendedSpecs?: pulumi.Input<pulumi.Input<inputs.CloudMigrations.TargetAssetRecommendedSpec>[]>;
    /**
     * The current state of the target asset.
     */
    state?: pulumi.Input<string>;
    /**
     * Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     */
    testSpecs?: pulumi.Input<pulumi.Input<inputs.CloudMigrations.TargetAssetTestSpec>[]>;
    /**
     * The time when the assessment was done. An RFC3339 formatted datetime string.
     */
    timeAssessed?: pulumi.Input<string>;
    /**
     * The time when the target asset was created. An RFC3339 formatted datetime string.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time when the target asset was updated. An RFC3339 formatted datetime string.
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * (Updatable) The type of target asset.
     */
    type?: pulumi.Input<string>;
    /**
     * (Updatable) Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     */
    userSpec?: pulumi.Input<inputs.CloudMigrations.TargetAssetUserSpec>;
}

/**
 * The set of arguments for constructing a TargetAsset resource.
 */
export interface TargetAssetArgs {
    /**
     * (Updatable) Performance of the block volumes.
     */
    blockVolumesPerformance?: pulumi.Input<number>;
    /**
     * (Updatable) A boolean indicating whether the asset should be migrated.
     */
    isExcludedFromExecution: pulumi.Input<boolean>;
    /**
     * OCID of the associated migration plan.
     */
    migrationPlanId: pulumi.Input<string>;
    /**
     * (Updatable) Microsoft license for the VM configuration.
     */
    msLicense?: pulumi.Input<string>;
    /**
     * (Updatable) Preferred VM shape type that you provide.
     */
    preferredShapeType: pulumi.Input<string>;
    /**
     * (Updatable) The type of target asset.
     */
    type: pulumi.Input<string>;
    /**
     * (Updatable) Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
     */
    userSpec: pulumi.Input<inputs.CloudMigrations.TargetAssetUserSpec>;
}
