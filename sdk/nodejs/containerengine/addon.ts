// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Addon resource in Oracle Cloud Infrastructure Container Engine service.
 *
 * Install the specified addon for a cluster.
 *
 * ## Import
 *
 * Addons can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:ContainerEngine/addon:Addon test_addon "clusters/{clusterId}/addons/{addonName}"
 * ```
 */
export class Addon extends pulumi.CustomResource {
    /**
     * Get an existing Addon resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AddonState, opts?: pulumi.CustomResourceOptions): Addon {
        return new Addon(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:ContainerEngine/addon:Addon';

    /**
     * Returns true if the given object is an instance of Addon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Addon {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Addon.__pulumiType;
    }

    /**
     * The error info of the addon.
     */
    declare public /*out*/ readonly addonErrors: pulumi.Output<outputs.ContainerEngine.AddonAddonError[]>;
    /**
     * The name of the addon.
     */
    declare public readonly addonName: pulumi.Output<string>;
    /**
     * The OCID of the cluster.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * (Updatable) Addon configuration details
     */
    declare public readonly configurations: pulumi.Output<outputs.ContainerEngine.AddonConfiguration[]>;
    /**
     * current installed version of the addon
     */
    declare public /*out*/ readonly currentInstalledVersion: pulumi.Output<string>;
    /**
     * Whether or not to override an existing addon installation. Defaults to false. If set to true, any existing addon installation would be overridden as per new installation details.
     */
    declare public readonly overrideExisting: pulumi.Output<boolean | undefined>;
    /**
     * Whether to remove addon resource in deletion.
     */
    declare public readonly removeAddonResourcesOnDelete: pulumi.Output<boolean>;
    /**
     * The state of the addon.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The time the cluster was created.
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * (Updatable) The version of addon to be installed.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly version: pulumi.Output<string | undefined>;

    /**
     * Create a Addon resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AddonArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AddonArgs | AddonState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AddonState | undefined;
            resourceInputs["addonErrors"] = state?.addonErrors;
            resourceInputs["addonName"] = state?.addonName;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["configurations"] = state?.configurations;
            resourceInputs["currentInstalledVersion"] = state?.currentInstalledVersion;
            resourceInputs["overrideExisting"] = state?.overrideExisting;
            resourceInputs["removeAddonResourcesOnDelete"] = state?.removeAddonResourcesOnDelete;
            resourceInputs["state"] = state?.state;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as AddonArgs | undefined;
            if (args?.addonName === undefined && !opts.urn) {
                throw new Error("Missing required property 'addonName'");
            }
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.removeAddonResourcesOnDelete === undefined && !opts.urn) {
                throw new Error("Missing required property 'removeAddonResourcesOnDelete'");
            }
            resourceInputs["addonName"] = args?.addonName;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["configurations"] = args?.configurations;
            resourceInputs["overrideExisting"] = args?.overrideExisting;
            resourceInputs["removeAddonResourcesOnDelete"] = args?.removeAddonResourcesOnDelete;
            resourceInputs["version"] = args?.version;
            resourceInputs["addonErrors"] = undefined /*out*/;
            resourceInputs["currentInstalledVersion"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Addon.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Addon resources.
 */
export interface AddonState {
    /**
     * The error info of the addon.
     */
    addonErrors?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.AddonAddonError>[]>;
    /**
     * The name of the addon.
     */
    addonName?: pulumi.Input<string>;
    /**
     * The OCID of the cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * (Updatable) Addon configuration details
     */
    configurations?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.AddonConfiguration>[]>;
    /**
     * current installed version of the addon
     */
    currentInstalledVersion?: pulumi.Input<string>;
    /**
     * Whether or not to override an existing addon installation. Defaults to false. If set to true, any existing addon installation would be overridden as per new installation details.
     */
    overrideExisting?: pulumi.Input<boolean>;
    /**
     * Whether to remove addon resource in deletion.
     */
    removeAddonResourcesOnDelete?: pulumi.Input<boolean>;
    /**
     * The state of the addon.
     */
    state?: pulumi.Input<string>;
    /**
     * The time the cluster was created.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * (Updatable) The version of addon to be installed.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Addon resource.
 */
export interface AddonArgs {
    /**
     * The name of the addon.
     */
    addonName: pulumi.Input<string>;
    /**
     * The OCID of the cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * (Updatable) Addon configuration details
     */
    configurations?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.AddonConfiguration>[]>;
    /**
     * Whether or not to override an existing addon installation. Defaults to false. If set to true, any existing addon installation would be overridden as per new installation details.
     */
    overrideExisting?: pulumi.Input<boolean>;
    /**
     * Whether to remove addon resource in deletion.
     */
    removeAddonResourcesOnDelete: pulumi.Input<boolean>;
    /**
     * (Updatable) The version of addon to be installed.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    version?: pulumi.Input<string>;
}
