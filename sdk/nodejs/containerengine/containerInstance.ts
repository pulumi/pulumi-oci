// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Container Instance resource in Oracle Cloud Infrastructure Container Instances service.
 *
 * Creates a container instance and deploys the containers on it.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testContainerInstance = new oci.containerengine.ContainerInstance("test_container_instance", {
 *     availabilityDomain: containerInstanceAvailabilityDomain,
 *     compartmentId: compartmentId,
 *     containers: [{
 *         imageUrl: containerInstanceContainersImageUrl,
 *         arguments: containerInstanceContainersArguments,
 *         commands: containerInstanceContainersCommand,
 *         definedTags: containerInstanceContainersDefinedTags,
 *         displayName: containerInstanceContainersDisplayName,
 *         environmentVariables: containerInstanceContainersEnvironmentVariables,
 *         freeformTags: containerInstanceContainersFreeformTags,
 *         healthChecks: [{
 *             healthCheckType: containerInstanceContainersHealthChecksHealthCheckType,
 *             failureAction: containerInstanceContainersHealthChecksFailureAction,
 *             failureThreshold: containerInstanceContainersHealthChecksFailureThreshold,
 *             headers: [{
 *                 name: containerInstanceContainersHealthChecksHeadersName,
 *                 value: containerInstanceContainersHealthChecksHeadersValue,
 *             }],
 *             initialDelayInSeconds: containerInstanceContainersHealthChecksInitialDelayInSeconds,
 *             intervalInSeconds: containerInstanceContainersHealthChecksIntervalInSeconds,
 *             name: containerInstanceContainersHealthChecksName,
 *             path: containerInstanceContainersHealthChecksPath,
 *             port: containerInstanceContainersHealthChecksPort,
 *             successThreshold: containerInstanceContainersHealthChecksSuccessThreshold,
 *             timeoutInSeconds: containerInstanceContainersHealthChecksTimeoutInSeconds,
 *         }],
 *         isResourcePrincipalDisabled: containerInstanceContainersIsResourcePrincipalDisabled,
 *         resourceConfig: {
 *             memoryLimitInGbs: containerInstanceContainersResourceConfigMemoryLimitInGbs,
 *             vcpusLimit: containerInstanceContainersResourceConfigVcpusLimit,
 *         },
 *         securityContext: {
 *             capabilities: {
 *                 addCapabilities: containerInstanceContainersSecurityContextCapabilitiesAddCapabilities,
 *                 dropCapabilities: containerInstanceContainersSecurityContextCapabilitiesDropCapabilities,
 *             },
 *             isNonRootUserCheckEnabled: containerInstanceContainersSecurityContextIsNonRootUserCheckEnabled,
 *             isRootFileSystemReadonly: containerInstanceContainersSecurityContextIsRootFileSystemReadonly,
 *             runAsGroup: containerInstanceContainersSecurityContextRunAsGroup,
 *             runAsUser: containerInstanceContainersSecurityContextRunAsUser,
 *             securityContextType: containerInstanceContainersSecurityContextSecurityContextType,
 *         },
 *         volumeMounts: [{
 *             mountPath: containerInstanceContainersVolumeMountsMountPath,
 *             volumeName: containerInstanceContainersVolumeMountsVolumeName,
 *             isReadOnly: containerInstanceContainersVolumeMountsIsReadOnly,
 *             partition: containerInstanceContainersVolumeMountsPartition,
 *             subPath: containerInstanceContainersVolumeMountsSubPath,
 *         }],
 *         workingDirectory: containerInstanceContainersWorkingDirectory,
 *     }],
 *     shape: containerInstanceShape,
 *     shapeConfig: {
 *         ocpus: containerInstanceShapeConfigOcpus,
 *         memoryInGbs: containerInstanceShapeConfigMemoryInGbs,
 *     },
 *     vnics: [{
 *         subnetId: testSubnet.id,
 *         definedTags: containerInstanceVnicsDefinedTags,
 *         displayName: containerInstanceVnicsDisplayName,
 *         freeformTags: containerInstanceVnicsFreeformTags,
 *         hostnameLabel: containerInstanceVnicsHostnameLabel,
 *         isPublicIpAssigned: containerInstanceVnicsIsPublicIpAssigned,
 *         nsgIds: containerInstanceVnicsNsgIds,
 *         privateIp: containerInstanceVnicsPrivateIp,
 *         skipSourceDestCheck: containerInstanceVnicsSkipSourceDestCheck,
 *     }],
 *     containerRestartPolicy: containerInstanceContainerRestartPolicy,
 *     definedTags: {
 *         "foo-namespace.bar-key": "value",
 *     },
 *     displayName: containerInstanceDisplayName,
 *     dnsConfig: {
 *         nameservers: containerInstanceDnsConfigNameservers,
 *         options: containerInstanceDnsConfigOptions,
 *         searches: containerInstanceDnsConfigSearches,
 *     },
 *     faultDomain: containerInstanceFaultDomain,
 *     freeformTags: {
 *         "bar-key": "value",
 *     },
 *     gracefulShutdownTimeoutInSeconds: containerInstanceGracefulShutdownTimeoutInSeconds,
 *     imagePullSecrets: [{
 *         registryEndpoint: containerInstanceImagePullSecretsRegistryEndpoint,
 *         secretType: containerInstanceImagePullSecretsSecretType,
 *         password: containerInstanceImagePullSecretsPassword,
 *         secretId: testSecret.id,
 *         username: containerInstanceImagePullSecretsUsername,
 *     }],
 *     volumes: [{
 *         name: containerInstanceVolumesName,
 *         volumeType: containerInstanceVolumesVolumeType,
 *         backingStore: containerInstanceVolumesBackingStore,
 *         configs: [{
 *             data: containerInstanceVolumesConfigsData,
 *             fileName: containerInstanceVolumesConfigsFileName,
 *             path: containerInstanceVolumesConfigsPath,
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ContainerInstances can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:ContainerEngine/containerInstance:ContainerInstance test_container_instance "id"
 * ```
 */
export class ContainerInstance extends pulumi.CustomResource {
    /**
     * Get an existing ContainerInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerInstanceState, opts?: pulumi.CustomResourceOptions): ContainerInstance {
        return new ContainerInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:ContainerEngine/containerInstance:ContainerInstance';

    /**
     * Returns true if the given object is an instance of ContainerInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerInstance.__pulumiType;
    }

    /**
     * The availability domain where the container instance runs.
     */
    declare public readonly availabilityDomain: pulumi.Output<string>;
    /**
     * (Updatable) The compartment OCID.
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * The number of containers on the container instance.
     */
    declare public /*out*/ readonly containerCount: pulumi.Output<number>;
    /**
     * Container restart policy
     */
    declare public readonly containerRestartPolicy: pulumi.Output<string>;
    /**
     * The containers to create on this container instance.
     */
    declare public readonly containers: pulumi.Output<outputs.ContainerEngine.ContainerInstanceContainer[]>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
     */
    declare public readonly definedTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information. If you don't provide a name, a name is generated automatically.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
     */
    declare public readonly dnsConfig: pulumi.Output<outputs.ContainerEngine.ContainerInstanceDnsConfig>;
    /**
     * The fault domain where the container instance runs.
     */
    declare public readonly faultDomain: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    declare public readonly freeformTags: pulumi.Output<{[key: string]: string}>;
    /**
     * The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
     */
    declare public readonly gracefulShutdownTimeoutInSeconds: pulumi.Output<string>;
    /**
     * The image pulls secrets so you can access private registry to pull container images.
     */
    declare public readonly imagePullSecrets: pulumi.Output<outputs.ContainerEngine.ContainerInstanceImagePullSecret[]>;
    /**
     * A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     */
    declare public /*out*/ readonly lifecycleDetails: pulumi.Output<string>;
    /**
     * The shape of the container instance. The shape determines the resources available to the container instance.
     */
    declare public readonly shape: pulumi.Output<string>;
    /**
     * The size and amount of resources available to the container instance.
     */
    declare public readonly shapeConfig: pulumi.Output<outputs.ContainerEngine.ContainerInstanceShapeConfig>;
    /**
     * (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly state: pulumi.Output<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
     */
    declare public /*out*/ readonly systemTags: pulumi.Output<{[key: string]: string}>;
    /**
     * The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;
    /**
     * The networks available to containers on this container instance.
     */
    declare public readonly vnics: pulumi.Output<outputs.ContainerEngine.ContainerInstanceVnic[]>;
    /**
     * The number of volumes that are attached to the container instance.
     */
    declare public /*out*/ readonly volumeCount: pulumi.Output<number>;
    /**
     * A volume is a directory with data that is accessible across multiple containers in a container instance.
     *
     * You can attach up to 32 volumes to single container instance.
     */
    declare public readonly volumes: pulumi.Output<outputs.ContainerEngine.ContainerInstanceVolume[]>;

    /**
     * Create a ContainerInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerInstanceArgs | ContainerInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerInstanceState | undefined;
            resourceInputs["availabilityDomain"] = state?.availabilityDomain;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["containerCount"] = state?.containerCount;
            resourceInputs["containerRestartPolicy"] = state?.containerRestartPolicy;
            resourceInputs["containers"] = state?.containers;
            resourceInputs["definedTags"] = state?.definedTags;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["dnsConfig"] = state?.dnsConfig;
            resourceInputs["faultDomain"] = state?.faultDomain;
            resourceInputs["freeformTags"] = state?.freeformTags;
            resourceInputs["gracefulShutdownTimeoutInSeconds"] = state?.gracefulShutdownTimeoutInSeconds;
            resourceInputs["imagePullSecrets"] = state?.imagePullSecrets;
            resourceInputs["lifecycleDetails"] = state?.lifecycleDetails;
            resourceInputs["shape"] = state?.shape;
            resourceInputs["shapeConfig"] = state?.shapeConfig;
            resourceInputs["state"] = state?.state;
            resourceInputs["systemTags"] = state?.systemTags;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
            resourceInputs["vnics"] = state?.vnics;
            resourceInputs["volumeCount"] = state?.volumeCount;
            resourceInputs["volumes"] = state?.volumes;
        } else {
            const args = argsOrState as ContainerInstanceArgs | undefined;
            if (args?.availabilityDomain === undefined && !opts.urn) {
                throw new Error("Missing required property 'availabilityDomain'");
            }
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.containers === undefined && !opts.urn) {
                throw new Error("Missing required property 'containers'");
            }
            if (args?.shape === undefined && !opts.urn) {
                throw new Error("Missing required property 'shape'");
            }
            if (args?.shapeConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'shapeConfig'");
            }
            if (args?.vnics === undefined && !opts.urn) {
                throw new Error("Missing required property 'vnics'");
            }
            resourceInputs["availabilityDomain"] = args?.availabilityDomain;
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["containerRestartPolicy"] = args?.containerRestartPolicy;
            resourceInputs["containers"] = args?.containers;
            resourceInputs["definedTags"] = args?.definedTags;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["dnsConfig"] = args?.dnsConfig;
            resourceInputs["faultDomain"] = args?.faultDomain;
            resourceInputs["freeformTags"] = args?.freeformTags;
            resourceInputs["gracefulShutdownTimeoutInSeconds"] = args?.gracefulShutdownTimeoutInSeconds;
            resourceInputs["imagePullSecrets"] = args?.imagePullSecrets;
            resourceInputs["shape"] = args?.shape;
            resourceInputs["shapeConfig"] = args?.shapeConfig;
            resourceInputs["state"] = args?.state;
            resourceInputs["vnics"] = args?.vnics;
            resourceInputs["volumes"] = args?.volumes;
            resourceInputs["containerCount"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["volumeCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContainerInstance resources.
 */
export interface ContainerInstanceState {
    /**
     * The availability domain where the container instance runs.
     */
    availabilityDomain?: pulumi.Input<string>;
    /**
     * (Updatable) The compartment OCID.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * The number of containers on the container instance.
     */
    containerCount?: pulumi.Input<number>;
    /**
     * Container restart policy
     */
    containerRestartPolicy?: pulumi.Input<string>;
    /**
     * The containers to create on this container instance.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceContainer>[]>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information. If you don't provide a name, a name is generated automatically.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
     */
    dnsConfig?: pulumi.Input<inputs.ContainerEngine.ContainerInstanceDnsConfig>;
    /**
     * The fault domain where the container instance runs.
     */
    faultDomain?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
     */
    gracefulShutdownTimeoutInSeconds?: pulumi.Input<string>;
    /**
     * The image pulls secrets so you can access private registry to pull container images.
     */
    imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceImagePullSecret>[]>;
    /**
     * A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * The shape of the container instance. The shape determines the resources available to the container instance.
     */
    shape?: pulumi.Input<string>;
    /**
     * The size and amount of resources available to the container instance.
     */
    shapeConfig?: pulumi.Input<inputs.ContainerEngine.ContainerInstanceShapeConfig>;
    /**
     * (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    state?: pulumi.Input<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
     */
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * The networks available to containers on this container instance.
     */
    vnics?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceVnic>[]>;
    /**
     * The number of volumes that are attached to the container instance.
     */
    volumeCount?: pulumi.Input<number>;
    /**
     * A volume is a directory with data that is accessible across multiple containers in a container instance.
     *
     * You can attach up to 32 volumes to single container instance.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceVolume>[]>;
}

/**
 * The set of arguments for constructing a ContainerInstance resource.
 */
export interface ContainerInstanceArgs {
    /**
     * The availability domain where the container instance runs.
     */
    availabilityDomain: pulumi.Input<string>;
    /**
     * (Updatable) The compartment OCID.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * Container restart policy
     */
    containerRestartPolicy?: pulumi.Input<string>;
    /**
     * The containers to create on this container instance.
     */
    containers: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceContainer>[]>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information. If you don't provide a name, a name is generated automatically.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
     */
    dnsConfig?: pulumi.Input<inputs.ContainerEngine.ContainerInstanceDnsConfig>;
    /**
     * The fault domain where the container instance runs.
     */
    faultDomain?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
     */
    gracefulShutdownTimeoutInSeconds?: pulumi.Input<string>;
    /**
     * The image pulls secrets so you can access private registry to pull container images.
     */
    imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceImagePullSecret>[]>;
    /**
     * The shape of the container instance. The shape determines the resources available to the container instance.
     */
    shape: pulumi.Input<string>;
    /**
     * The size and amount of resources available to the container instance.
     */
    shapeConfig: pulumi.Input<inputs.ContainerEngine.ContainerInstanceShapeConfig>;
    /**
     * (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    state?: pulumi.Input<string>;
    /**
     * The networks available to containers on this container instance.
     */
    vnics: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceVnic>[]>;
    /**
     * A volume is a directory with data that is accessible across multiple containers in a container instance.
     *
     * You can attach up to 32 volumes to single container instance.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceVolume>[]>;
}
