// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Container Instance resource in Oracle Cloud Infrastructure Container Instances service.
 *
 * Creates a container instance and deploys the containers on it.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testContainerInstance = new oci.containerengine.ContainerInstance("testContainerInstance", {
 *     availabilityDomain: _var.container_instance_availability_domain,
 *     compartmentId: _var.compartment_id,
 *     containers: [{
 *         imageUrl: _var.container_instance_containers_image_url,
 *         arguments: _var.container_instance_containers_arguments,
 *         commands: _var.container_instance_containers_command,
 *         definedTags: _var.container_instance_containers_defined_tags,
 *         displayName: _var.container_instance_containers_display_name,
 *         environmentVariables: _var.container_instance_containers_environment_variables,
 *         freeformTags: _var.container_instance_containers_freeform_tags,
 *         healthChecks: [{
 *             healthCheckType: _var.container_instance_containers_health_checks_health_check_type,
 *             commands: _var.container_instance_containers_health_checks_command,
 *             failureAction: _var.container_instance_containers_health_checks_failure_action,
 *             failureThreshold: _var.container_instance_containers_health_checks_failure_threshold,
 *             headers: [{
 *                 name: _var.container_instance_containers_health_checks_headers_name,
 *                 value: _var.container_instance_containers_health_checks_headers_value,
 *             }],
 *             initialDelayInSeconds: _var.container_instance_containers_health_checks_initial_delay_in_seconds,
 *             intervalInSeconds: _var.container_instance_containers_health_checks_interval_in_seconds,
 *             name: _var.container_instance_containers_health_checks_name,
 *             path: _var.container_instance_containers_health_checks_path,
 *             port: _var.container_instance_containers_health_checks_port,
 *             successThreshold: _var.container_instance_containers_health_checks_success_threshold,
 *             timeoutInSeconds: _var.container_instance_containers_health_checks_timeout_in_seconds,
 *         }],
 *         isResourcePrincipalDisabled: _var.container_instance_containers_is_resource_principal_disabled,
 *         resourceConfig: {
 *             memoryLimitInGbs: _var.container_instance_containers_resource_config_memory_limit_in_gbs,
 *             vcpusLimit: _var.container_instance_containers_resource_config_vcpus_limit,
 *         },
 *         securityContext: {
 *             capabilities: {
 *                 addCapabilities: _var.container_instance_containers_security_context_capabilities_add_capabilities,
 *                 dropCapabilities: _var.container_instance_containers_security_context_capabilities_drop_capabilities,
 *             },
 *             isNonRootUserCheckEnabled: _var.container_instance_containers_security_context_is_non_root_user_check_enabled,
 *             isRootFileSystemReadonly: _var.container_instance_containers_security_context_is_root_file_system_readonly,
 *             runAsGroup: _var.container_instance_containers_security_context_run_as_group,
 *             runAsUser: _var.container_instance_containers_security_context_run_as_user,
 *             securityContextType: _var.container_instance_containers_security_context_security_context_type,
 *         },
 *         volumeMounts: [{
 *             mountPath: _var.container_instance_containers_volume_mounts_mount_path,
 *             volumeName: _var.container_instance_containers_volume_mounts_volume_name,
 *             isReadOnly: _var.container_instance_containers_volume_mounts_is_read_only,
 *             partition: _var.container_instance_containers_volume_mounts_partition,
 *             subPath: _var.container_instance_containers_volume_mounts_sub_path,
 *         }],
 *         workingDirectory: _var.container_instance_containers_working_directory,
 *     }],
 *     shape: _var.container_instance_shape,
 *     shapeConfig: {
 *         ocpus: _var.container_instance_shape_config_ocpus,
 *         memoryInGbs: _var.container_instance_shape_config_memory_in_gbs,
 *     },
 *     vnics: [{
 *         subnetId: oci_core_subnet.test_subnet.id,
 *         definedTags: _var.container_instance_vnics_defined_tags,
 *         displayName: _var.container_instance_vnics_display_name,
 *         freeformTags: _var.container_instance_vnics_freeform_tags,
 *         hostnameLabel: _var.container_instance_vnics_hostname_label,
 *         isPublicIpAssigned: _var.container_instance_vnics_is_public_ip_assigned,
 *         nsgIds: _var.container_instance_vnics_nsg_ids,
 *         privateIp: _var.container_instance_vnics_private_ip,
 *         skipSourceDestCheck: _var.container_instance_vnics_skip_source_dest_check,
 *     }],
 *     containerRestartPolicy: _var.container_instance_container_restart_policy,
 *     definedTags: {
 *         "foo-namespace.bar-key": "value",
 *     },
 *     displayName: _var.container_instance_display_name,
 *     dnsConfig: {
 *         nameservers: _var.container_instance_dns_config_nameservers,
 *         options: _var.container_instance_dns_config_options,
 *         searches: _var.container_instance_dns_config_searches,
 *     },
 *     faultDomain: _var.container_instance_fault_domain,
 *     freeformTags: {
 *         "bar-key": "value",
 *     },
 *     gracefulShutdownTimeoutInSeconds: _var.container_instance_graceful_shutdown_timeout_in_seconds,
 *     imagePullSecrets: [{
 *         registryEndpoint: _var.container_instance_image_pull_secrets_registry_endpoint,
 *         secretType: _var.container_instance_image_pull_secrets_secret_type,
 *         password: _var.container_instance_image_pull_secrets_password,
 *         secretId: oci_vault_secret.test_secret.id,
 *         username: _var.container_instance_image_pull_secrets_username,
 *     }],
 *     volumes: [{
 *         name: _var.container_instance_volumes_name,
 *         volumeType: _var.container_instance_volumes_volume_type,
 *         backingStore: _var.container_instance_volumes_backing_store,
 *         configs: [{
 *             data: _var.container_instance_volumes_configs_data,
 *             fileName: _var.container_instance_volumes_configs_file_name,
 *             path: _var.container_instance_volumes_configs_path,
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ContainerInstances can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:ContainerEngine/containerInstance:ContainerInstance test_container_instance "id"
 * ```
 */
export class ContainerInstance extends pulumi.CustomResource {
    /**
     * Get an existing ContainerInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerInstanceState, opts?: pulumi.CustomResourceOptions): ContainerInstance {
        return new ContainerInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:ContainerEngine/containerInstance:ContainerInstance';

    /**
     * Returns true if the given object is an instance of ContainerInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerInstance.__pulumiType;
    }

    /**
     * The availability domain where the container instance runs.
     */
    public readonly availabilityDomain!: pulumi.Output<string>;
    /**
     * (Updatable) The compartment OCID.
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * The number of containers on the container instance.
     */
    public /*out*/ readonly containerCount!: pulumi.Output<number>;
    /**
     * Container restart policy
     */
    public readonly containerRestartPolicy!: pulumi.Output<string>;
    /**
     * The containers to create on this container instance.
     */
    public readonly containers!: pulumi.Output<outputs.ContainerEngine.ContainerInstanceContainer[]>;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
     */
    public readonly definedTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
     */
    public readonly dnsConfig!: pulumi.Output<outputs.ContainerEngine.ContainerInstanceDnsConfig>;
    /**
     * The fault domain where the container instance runs.
     */
    public readonly faultDomain!: pulumi.Output<string>;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    public readonly freeformTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
     */
    public readonly gracefulShutdownTimeoutInSeconds!: pulumi.Output<string>;
    /**
     * The image pulls secrets so you can access private registry to pull container images.
     */
    public readonly imagePullSecrets!: pulumi.Output<outputs.ContainerEngine.ContainerInstanceImagePullSecret[]>;
    /**
     * A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     */
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    /**
     * The shape of the container instance. The shape determines the resources available to the container instance.
     */
    public readonly shape!: pulumi.Output<string>;
    /**
     * The size and amount of resources available to the container instance.
     */
    public readonly shapeConfig!: pulumi.Output<outputs.ContainerEngine.ContainerInstanceShapeConfig>;
    /**
     * (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
     */
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    /**
     * The networks available to containers on this container instance.
     */
    public readonly vnics!: pulumi.Output<outputs.ContainerEngine.ContainerInstanceVnic[]>;
    /**
     * The number of volumes that are attached to the container instance.
     */
    public /*out*/ readonly volumeCount!: pulumi.Output<number>;
    /**
     * A volume is a directory with data that is accessible across multiple containers in a container instance.
     *
     * You can attach up to 32 volumes to single container instance.
     */
    public readonly volumes!: pulumi.Output<outputs.ContainerEngine.ContainerInstanceVolume[]>;

    /**
     * Create a ContainerInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerInstanceArgs | ContainerInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerInstanceState | undefined;
            resourceInputs["availabilityDomain"] = state ? state.availabilityDomain : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["containerCount"] = state ? state.containerCount : undefined;
            resourceInputs["containerRestartPolicy"] = state ? state.containerRestartPolicy : undefined;
            resourceInputs["containers"] = state ? state.containers : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["dnsConfig"] = state ? state.dnsConfig : undefined;
            resourceInputs["faultDomain"] = state ? state.faultDomain : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["gracefulShutdownTimeoutInSeconds"] = state ? state.gracefulShutdownTimeoutInSeconds : undefined;
            resourceInputs["imagePullSecrets"] = state ? state.imagePullSecrets : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["shape"] = state ? state.shape : undefined;
            resourceInputs["shapeConfig"] = state ? state.shapeConfig : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["vnics"] = state ? state.vnics : undefined;
            resourceInputs["volumeCount"] = state ? state.volumeCount : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as ContainerInstanceArgs | undefined;
            if ((!args || args.availabilityDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityDomain'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.containers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containers'");
            }
            if ((!args || args.shape === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shape'");
            }
            if ((!args || args.shapeConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shapeConfig'");
            }
            if ((!args || args.vnics === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vnics'");
            }
            resourceInputs["availabilityDomain"] = args ? args.availabilityDomain : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["containerRestartPolicy"] = args ? args.containerRestartPolicy : undefined;
            resourceInputs["containers"] = args ? args.containers : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["dnsConfig"] = args ? args.dnsConfig : undefined;
            resourceInputs["faultDomain"] = args ? args.faultDomain : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["gracefulShutdownTimeoutInSeconds"] = args ? args.gracefulShutdownTimeoutInSeconds : undefined;
            resourceInputs["imagePullSecrets"] = args ? args.imagePullSecrets : undefined;
            resourceInputs["shape"] = args ? args.shape : undefined;
            resourceInputs["shapeConfig"] = args ? args.shapeConfig : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["vnics"] = args ? args.vnics : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["containerCount"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["volumeCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContainerInstance resources.
 */
export interface ContainerInstanceState {
    /**
     * The availability domain where the container instance runs.
     */
    availabilityDomain?: pulumi.Input<string>;
    /**
     * (Updatable) The compartment OCID.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * The number of containers on the container instance.
     */
    containerCount?: pulumi.Input<number>;
    /**
     * Container restart policy
     */
    containerRestartPolicy?: pulumi.Input<string>;
    /**
     * The containers to create on this container instance.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceContainer>[]>;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
     */
    dnsConfig?: pulumi.Input<inputs.ContainerEngine.ContainerInstanceDnsConfig>;
    /**
     * The fault domain where the container instance runs.
     */
    faultDomain?: pulumi.Input<string>;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
     */
    gracefulShutdownTimeoutInSeconds?: pulumi.Input<string>;
    /**
     * The image pulls secrets so you can access private registry to pull container images.
     */
    imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceImagePullSecret>[]>;
    /**
     * A message that describes the current state of the container in more detail. Can be used to provide actionable information.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * The shape of the container instance. The shape determines the resources available to the container instance.
     */
    shape?: pulumi.Input<string>;
    /**
     * The size and amount of resources available to the container instance.
     */
    shapeConfig?: pulumi.Input<inputs.ContainerEngine.ContainerInstanceShapeConfig>;
    /**
     * (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    state?: pulumi.Input<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
     */
    systemTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * The networks available to containers on this container instance.
     */
    vnics?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceVnic>[]>;
    /**
     * The number of volumes that are attached to the container instance.
     */
    volumeCount?: pulumi.Input<number>;
    /**
     * A volume is a directory with data that is accessible across multiple containers in a container instance.
     *
     * You can attach up to 32 volumes to single container instance.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceVolume>[]>;
}

/**
 * The set of arguments for constructing a ContainerInstance resource.
 */
export interface ContainerInstanceArgs {
    /**
     * The availability domain where the container instance runs.
     */
    availabilityDomain: pulumi.Input<string>;
    /**
     * (Updatable) The compartment OCID.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * Container restart policy
     */
    containerRestartPolicy?: pulumi.Input<string>;
    /**
     * The containers to create on this container instance.
     */
    containers: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceContainer>[]>;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
     */
    dnsConfig?: pulumi.Input<inputs.ContainerEngine.ContainerInstanceDnsConfig>;
    /**
     * The fault domain where the container instance runs.
     */
    faultDomain?: pulumi.Input<string>;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
     */
    gracefulShutdownTimeoutInSeconds?: pulumi.Input<string>;
    /**
     * The image pulls secrets so you can access private registry to pull container images.
     */
    imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceImagePullSecret>[]>;
    /**
     * The shape of the container instance. The shape determines the resources available to the container instance.
     */
    shape: pulumi.Input<string>;
    /**
     * The size and amount of resources available to the container instance.
     */
    shapeConfig: pulumi.Input<inputs.ContainerEngine.ContainerInstanceShapeConfig>;
    /**
     * (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    state?: pulumi.Input<string>;
    /**
     * The networks available to containers on this container instance.
     */
    vnics: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceVnic>[]>;
    /**
     * A volume is a directory with data that is accessible across multiple containers in a container instance.
     *
     * You can attach up to 32 volumes to single container instance.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.ContainerInstanceVolume>[]>;
}
