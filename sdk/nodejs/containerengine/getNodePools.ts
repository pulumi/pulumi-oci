// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Node Pools in Oracle Cloud Infrastructure Container Engine service.
 *
 * List all the node pools in a compartment, and optionally filter by cluster.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testNodePools = oci.ContainerEngine.getNodePools({
 *     compartmentId: _var.compartment_id,
 *     clusterId: oci_containerengine_cluster.test_cluster.id,
 *     name: _var.node_pool_name,
 *     states: _var.node_pool_state,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getNodePools(args: GetNodePoolsArgs, opts?: pulumi.InvokeOptions): Promise<GetNodePoolsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:ContainerEngine/getNodePools:getNodePools", {
        "clusterId": args.clusterId,
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "name": args.name,
        "states": args.states,
    }, opts);
}

/**
 * A collection of arguments for invoking getNodePools.
 */
export interface GetNodePoolsArgs {
    /**
     * The OCID of the cluster.
     */
    clusterId?: string;
    /**
     * The OCID of the compartment.
     */
    compartmentId: string;
    filters?: inputs.ContainerEngine.GetNodePoolsFilter[];
    /**
     * The name to filter on.
     */
    name?: string;
    /**
     * A list of nodepool lifecycle states on which to filter on, matching any of the list items (OR logic). eg. [ACTIVE, DELETING]
     */
    states?: string[];
}

/**
 * A collection of values returned by getNodePools.
 */
export interface GetNodePoolsResult {
    /**
     * The OCID of the cluster to which this node pool is attached.
     */
    readonly clusterId?: string;
    /**
     * The OCID of the compartment in which the node pool exists.
     */
    readonly compartmentId: string;
    readonly filters?: outputs.ContainerEngine.GetNodePoolsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the node pool.
     */
    readonly name?: string;
    /**
     * The list of node_pools.
     */
    readonly nodePools: outputs.ContainerEngine.GetNodePoolsNodePool[];
    /**
     * The state of the nodepool.
     */
    readonly states?: string[];
}
/**
 * This data source provides the list of Node Pools in Oracle Cloud Infrastructure Container Engine service.
 *
 * List all the node pools in a compartment, and optionally filter by cluster.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testNodePools = oci.ContainerEngine.getNodePools({
 *     compartmentId: _var.compartment_id,
 *     clusterId: oci_containerengine_cluster.test_cluster.id,
 *     name: _var.node_pool_name,
 *     states: _var.node_pool_state,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getNodePoolsOutput(args: GetNodePoolsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNodePoolsResult> {
    return pulumi.output(args).apply((a: any) => getNodePools(a, opts))
}

/**
 * A collection of arguments for invoking getNodePools.
 */
export interface GetNodePoolsOutputArgs {
    /**
     * The OCID of the cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The OCID of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.ContainerEngine.GetNodePoolsFilterArgs>[]>;
    /**
     * The name to filter on.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of nodepool lifecycle states on which to filter on, matching any of the list items (OR logic). eg. [ACTIVE, DELETING]
     */
    states?: pulumi.Input<pulumi.Input<string>[]>;
}
