// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AddonArgs, AddonState } from "./addon";
export type Addon = import("./addon").Addon;
export const Addon: typeof import("./addon").Addon = null as any;
utilities.lazyLoad(exports, ["Addon"], () => require("./addon"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ContainerInstanceArgs, ContainerInstanceState } from "./containerInstance";
export type ContainerInstance = import("./containerInstance").ContainerInstance;
export const ContainerInstance: typeof import("./containerInstance").ContainerInstance = null as any;
utilities.lazyLoad(exports, ["ContainerInstance"], () => require("./containerInstance"));

export { GetAddonArgs, GetAddonResult, GetAddonOutputArgs } from "./getAddon";
export const getAddon: typeof import("./getAddon").getAddon = null as any;
export const getAddonOutput: typeof import("./getAddon").getAddonOutput = null as any;
utilities.lazyLoad(exports, ["getAddon","getAddonOutput"], () => require("./getAddon"));

export { GetAddonOptionsArgs, GetAddonOptionsResult, GetAddonOptionsOutputArgs } from "./getAddonOptions";
export const getAddonOptions: typeof import("./getAddonOptions").getAddonOptions = null as any;
export const getAddonOptionsOutput: typeof import("./getAddonOptions").getAddonOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getAddonOptions","getAddonOptionsOutput"], () => require("./getAddonOptions"));

export { GetAddonsArgs, GetAddonsResult, GetAddonsOutputArgs } from "./getAddons";
export const getAddons: typeof import("./getAddons").getAddons = null as any;
export const getAddonsOutput: typeof import("./getAddons").getAddonsOutput = null as any;
utilities.lazyLoad(exports, ["getAddons","getAddonsOutput"], () => require("./getAddons"));

export { GetClusterKubeConfigArgs, GetClusterKubeConfigResult, GetClusterKubeConfigOutputArgs } from "./getClusterKubeConfig";
export const getClusterKubeConfig: typeof import("./getClusterKubeConfig").getClusterKubeConfig = null as any;
export const getClusterKubeConfigOutput: typeof import("./getClusterKubeConfig").getClusterKubeConfigOutput = null as any;
utilities.lazyLoad(exports, ["getClusterKubeConfig","getClusterKubeConfigOutput"], () => require("./getClusterKubeConfig"));

export { GetClusterOptionArgs, GetClusterOptionResult, GetClusterOptionOutputArgs } from "./getClusterOption";
export const getClusterOption: typeof import("./getClusterOption").getClusterOption = null as any;
export const getClusterOptionOutput: typeof import("./getClusterOption").getClusterOptionOutput = null as any;
utilities.lazyLoad(exports, ["getClusterOption","getClusterOptionOutput"], () => require("./getClusterOption"));

export { GetClustersArgs, GetClustersResult, GetClustersOutputArgs } from "./getClusters";
export const getClusters: typeof import("./getClusters").getClusters = null as any;
export const getClustersOutput: typeof import("./getClusters").getClustersOutput = null as any;
utilities.lazyLoad(exports, ["getClusters","getClustersOutput"], () => require("./getClusters"));

export { GetMigrateToNativeVcnStatusArgs, GetMigrateToNativeVcnStatusResult, GetMigrateToNativeVcnStatusOutputArgs } from "./getMigrateToNativeVcnStatus";
export const getMigrateToNativeVcnStatus: typeof import("./getMigrateToNativeVcnStatus").getMigrateToNativeVcnStatus = null as any;
export const getMigrateToNativeVcnStatusOutput: typeof import("./getMigrateToNativeVcnStatus").getMigrateToNativeVcnStatusOutput = null as any;
utilities.lazyLoad(exports, ["getMigrateToNativeVcnStatus","getMigrateToNativeVcnStatusOutput"], () => require("./getMigrateToNativeVcnStatus"));

export { GetNodePoolArgs, GetNodePoolResult, GetNodePoolOutputArgs } from "./getNodePool";
export const getNodePool: typeof import("./getNodePool").getNodePool = null as any;
export const getNodePoolOutput: typeof import("./getNodePool").getNodePoolOutput = null as any;
utilities.lazyLoad(exports, ["getNodePool","getNodePoolOutput"], () => require("./getNodePool"));

export { GetNodePoolOptionArgs, GetNodePoolOptionResult, GetNodePoolOptionOutputArgs } from "./getNodePoolOption";
export const getNodePoolOption: typeof import("./getNodePoolOption").getNodePoolOption = null as any;
export const getNodePoolOptionOutput: typeof import("./getNodePoolOption").getNodePoolOptionOutput = null as any;
utilities.lazyLoad(exports, ["getNodePoolOption","getNodePoolOptionOutput"], () => require("./getNodePoolOption"));

export { GetNodePoolsArgs, GetNodePoolsResult, GetNodePoolsOutputArgs } from "./getNodePools";
export const getNodePools: typeof import("./getNodePools").getNodePools = null as any;
export const getNodePoolsOutput: typeof import("./getNodePools").getNodePoolsOutput = null as any;
utilities.lazyLoad(exports, ["getNodePools","getNodePoolsOutput"], () => require("./getNodePools"));

export { GetPodShapesArgs, GetPodShapesResult, GetPodShapesOutputArgs } from "./getPodShapes";
export const getPodShapes: typeof import("./getPodShapes").getPodShapes = null as any;
export const getPodShapesOutput: typeof import("./getPodShapes").getPodShapesOutput = null as any;
utilities.lazyLoad(exports, ["getPodShapes","getPodShapesOutput"], () => require("./getPodShapes"));

export { GetVirtualNodePoolArgs, GetVirtualNodePoolResult, GetVirtualNodePoolOutputArgs } from "./getVirtualNodePool";
export const getVirtualNodePool: typeof import("./getVirtualNodePool").getVirtualNodePool = null as any;
export const getVirtualNodePoolOutput: typeof import("./getVirtualNodePool").getVirtualNodePoolOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualNodePool","getVirtualNodePoolOutput"], () => require("./getVirtualNodePool"));

export { GetVirtualNodePoolsArgs, GetVirtualNodePoolsResult, GetVirtualNodePoolsOutputArgs } from "./getVirtualNodePools";
export const getVirtualNodePools: typeof import("./getVirtualNodePools").getVirtualNodePools = null as any;
export const getVirtualNodePoolsOutput: typeof import("./getVirtualNodePools").getVirtualNodePoolsOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualNodePools","getVirtualNodePoolsOutput"], () => require("./getVirtualNodePools"));

export { GetWorkRequestErrorsArgs, GetWorkRequestErrorsResult, GetWorkRequestErrorsOutputArgs } from "./getWorkRequestErrors";
export const getWorkRequestErrors: typeof import("./getWorkRequestErrors").getWorkRequestErrors = null as any;
export const getWorkRequestErrorsOutput: typeof import("./getWorkRequestErrors").getWorkRequestErrorsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkRequestErrors","getWorkRequestErrorsOutput"], () => require("./getWorkRequestErrors"));

export { GetWorkRequestLogEntriesArgs, GetWorkRequestLogEntriesResult, GetWorkRequestLogEntriesOutputArgs } from "./getWorkRequestLogEntries";
export const getWorkRequestLogEntries: typeof import("./getWorkRequestLogEntries").getWorkRequestLogEntries = null as any;
export const getWorkRequestLogEntriesOutput: typeof import("./getWorkRequestLogEntries").getWorkRequestLogEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getWorkRequestLogEntries","getWorkRequestLogEntriesOutput"], () => require("./getWorkRequestLogEntries"));

export { GetWorkRequestsArgs, GetWorkRequestsResult, GetWorkRequestsOutputArgs } from "./getWorkRequests";
export const getWorkRequests: typeof import("./getWorkRequests").getWorkRequests = null as any;
export const getWorkRequestsOutput: typeof import("./getWorkRequests").getWorkRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkRequests","getWorkRequestsOutput"], () => require("./getWorkRequests"));

export { NodePoolArgs, NodePoolState } from "./nodePool";
export type NodePool = import("./nodePool").NodePool;
export const NodePool: typeof import("./nodePool").NodePool = null as any;
utilities.lazyLoad(exports, ["NodePool"], () => require("./nodePool"));

export { VirtualNodePoolArgs, VirtualNodePoolState } from "./virtualNodePool";
export type VirtualNodePool = import("./virtualNodePool").VirtualNodePool;
export const VirtualNodePool: typeof import("./virtualNodePool").VirtualNodePool = null as any;
utilities.lazyLoad(exports, ["VirtualNodePool"], () => require("./virtualNodePool"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:ContainerEngine/addon:Addon":
                return new Addon(name, <any>undefined, { urn })
            case "oci:ContainerEngine/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "oci:ContainerEngine/containerInstance:ContainerInstance":
                return new ContainerInstance(name, <any>undefined, { urn })
            case "oci:ContainerEngine/nodePool:NodePool":
                return new NodePool(name, <any>undefined, { urn })
            case "oci:ContainerEngine/virtualNodePool:VirtualNodePool":
                return new VirtualNodePool(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "ContainerEngine/addon", _module)
pulumi.runtime.registerResourceModule("oci", "ContainerEngine/cluster", _module)
pulumi.runtime.registerResourceModule("oci", "ContainerEngine/containerInstance", _module)
pulumi.runtime.registerResourceModule("oci", "ContainerEngine/nodePool", _module)
pulumi.runtime.registerResourceModule("oci", "ContainerEngine/virtualNodePool", _module)
