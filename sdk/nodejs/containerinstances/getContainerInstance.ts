// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Container Instance resource in Oracle Cloud Infrastructure Container Instances service.
 *
 * Gets a ContainerInstance by identifier
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testContainerInstance = oci.ContainerInstances.getContainerInstance({
 *     containerInstanceId: oci_container_instances_container_instance.test_container_instance.id,
 * });
 * ```
 */
export function getContainerInstance(args: GetContainerInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetContainerInstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:ContainerInstances/getContainerInstance:getContainerInstance", {
        "containerInstanceId": args.containerInstanceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getContainerInstance.
 */
export interface GetContainerInstanceArgs {
    /**
     * The system-generated unique identifier for the ContainerInstance.
     */
    containerInstanceId: string;
}

/**
 * A collection of values returned by getContainerInstance.
 */
export interface GetContainerInstanceResult {
    /**
     * Availability Domain where the ContainerInstance is running.
     */
    readonly availabilityDomain: string;
    /**
     * Compartment Identifier
     */
    readonly compartmentId: string;
    /**
     * The number of containers on this Instance
     */
    readonly containerCount: number;
    readonly containerInstanceId: string;
    /**
     * The container restart policy is applied for all containers in container instance.
     */
    readonly containerRestartPolicy: string;
    /**
     * The Containers on this Instance
     */
    readonly containers: outputs.ContainerInstances.GetContainerInstanceContainer[];
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    readonly definedTags: {[key: string]: any};
    /**
     * Display name for the ContainerInstance. Can be renamed.
     */
    readonly displayName: string;
    /**
     * DNS settings for containers.
     */
    readonly dnsConfigs: outputs.ContainerInstances.GetContainerInstanceDnsConfig[];
    /**
     * Fault Domain where the ContainerInstance is running.
     */
    readonly faultDomain: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    readonly freeformTags: {[key: string]: any};
    /**
     * Duration in seconds processes within a Container have to gracefully terminate. This applies whenever a Container must be halted, such as when the Container Instance is deleted. Processes will first be sent a termination signal. After this timeout is reached, the processes will be sent a termination signal.
     */
    readonly gracefulShutdownTimeoutInSeconds: string;
    /**
     * Unique identifier that is immutable on creation
     */
    readonly id: string;
    /**
     * The image pull secrets for accessing private registry to pull images for containers
     */
    readonly imagePullSecrets: outputs.ContainerInstances.GetContainerInstanceImagePullSecret[];
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    readonly lifecycleDetails: string;
    /**
     * The shape of the Container Instance. The shape determines the resources available to the Container Instance.
     */
    readonly shape: string;
    /**
     * The shape configuration for a Container Instance. The shape configuration determines the resources allocated to the Instance and it's containers.
     */
    readonly shapeConfigs: outputs.ContainerInstances.GetContainerInstanceShapeConfig[];
    /**
     * The current state of the ContainerInstance.
     */
    readonly state: string;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    readonly systemTags: {[key: string]: any};
    /**
     * The time the the ContainerInstance was created. An RFC3339 formatted datetime string
     */
    readonly timeCreated: string;
    /**
     * The time the ContainerInstance was updated. An RFC3339 formatted datetime string
     */
    readonly timeUpdated: string;
    /**
     * The virtual networks available to containers running on this Container Instance.
     */
    readonly vnics: outputs.ContainerInstances.GetContainerInstanceVnic[];
    /**
     * The number of volumes that attached to this Instance
     */
    readonly volumeCount: number;
    /**
     * A Volume represents a directory with data that is accessible across multiple containers in a ContainerInstance.
     */
    readonly volumes: outputs.ContainerInstances.GetContainerInstanceVolume[];
}
/**
 * This data source provides details about a specific Container Instance resource in Oracle Cloud Infrastructure Container Instances service.
 *
 * Gets a ContainerInstance by identifier
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testContainerInstance = oci.ContainerInstances.getContainerInstance({
 *     containerInstanceId: oci_container_instances_container_instance.test_container_instance.id,
 * });
 * ```
 */
export function getContainerInstanceOutput(args: GetContainerInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetContainerInstanceResult> {
    return pulumi.output(args).apply((a: any) => getContainerInstance(a, opts))
}

/**
 * A collection of arguments for invoking getContainerInstance.
 */
export interface GetContainerInstanceOutputArgs {
    /**
     * The system-generated unique identifier for the ContainerInstance.
     */
    containerInstanceId: pulumi.Input<string>;
}
