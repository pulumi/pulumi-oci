// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Drg Attachments in Oracle Cloud Infrastructure Core service.
 *
 * Lists the `DrgAttachment` resource for the specified compartment. You can filter the
 * results by DRG, attached network, attachment type, DRG route table or
 * VCN route table.
 *
 * The LIST API lists DRG attachments by attachment type. It will default to list VCN attachments,
 * but you may request to list ALL attachments of ALL types.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDrgAttachments = oci.Core.getDrgAttachments({
 *     compartmentId: compartmentId,
 *     attachmentType: drgAttachmentAttachmentType,
 *     displayName: drgAttachmentDisplayName,
 *     drgId: testDrg.id,
 *     drgRouteTableId: testDrgRouteTable.id,
 *     networkId: testNetwork.id,
 *     state: drgAttachmentState,
 *     vcnId: testVcn.id,
 * });
 * ```
 */
export function getDrgAttachments(args: GetDrgAttachmentsArgs, opts?: pulumi.InvokeOptions): Promise<GetDrgAttachmentsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Core/getDrgAttachments:getDrgAttachments", {
        "attachmentType": args.attachmentType,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "drgId": args.drgId,
        "drgRouteTableId": args.drgRouteTableId,
        "filters": args.filters,
        "networkId": args.networkId,
        "state": args.state,
        "vcnId": args.vcnId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDrgAttachments.
 */
export interface GetDrgAttachmentsArgs {
    /**
     * The type for the network resource attached to the DRG.
     */
    attachmentType?: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    compartmentId: string;
    /**
     * A filter to return only resources that match the given display name exactly.
     */
    displayName?: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG.
     */
    drgId?: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG route table assigned to the DRG attachment.
     */
    drgRouteTableId?: string;
    filters?: inputs.Core.GetDrgAttachmentsFilter[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource (virtual circuit, VCN, IPSec tunnel, or remote peering connection) attached to the DRG.
     */
    networkId?: string;
    /**
     * A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     */
    state?: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
     */
    vcnId?: string;
}

/**
 * A collection of values returned by getDrgAttachments.
 */
export interface GetDrgAttachmentsResult {
    readonly attachmentType?: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the DRG attachment.
     */
    readonly compartmentId: string;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    readonly displayName?: string;
    /**
     * The list of drg_attachments.
     */
    readonly drgAttachments: outputs.Core.GetDrgAttachmentsDrgAttachment[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG.
     */
    readonly drgId?: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG route table that is assigned to this attachment.
     */
    readonly drgRouteTableId?: string;
    readonly filters?: outputs.Core.GetDrgAttachmentsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly networkId?: string;
    /**
     * The DRG attachment's current state.
     */
    readonly state?: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN. This field is deprecated. Instead, use the `networkDetails` field to view the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the attached resource.
     */
    readonly vcnId?: string;
}
/**
 * This data source provides the list of Drg Attachments in Oracle Cloud Infrastructure Core service.
 *
 * Lists the `DrgAttachment` resource for the specified compartment. You can filter the
 * results by DRG, attached network, attachment type, DRG route table or
 * VCN route table.
 *
 * The LIST API lists DRG attachments by attachment type. It will default to list VCN attachments,
 * but you may request to list ALL attachments of ALL types.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDrgAttachments = oci.Core.getDrgAttachments({
 *     compartmentId: compartmentId,
 *     attachmentType: drgAttachmentAttachmentType,
 *     displayName: drgAttachmentDisplayName,
 *     drgId: testDrg.id,
 *     drgRouteTableId: testDrgRouteTable.id,
 *     networkId: testNetwork.id,
 *     state: drgAttachmentState,
 *     vcnId: testVcn.id,
 * });
 * ```
 */
export function getDrgAttachmentsOutput(args: GetDrgAttachmentsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDrgAttachmentsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:Core/getDrgAttachments:getDrgAttachments", {
        "attachmentType": args.attachmentType,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "drgId": args.drgId,
        "drgRouteTableId": args.drgRouteTableId,
        "filters": args.filters,
        "networkId": args.networkId,
        "state": args.state,
        "vcnId": args.vcnId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDrgAttachments.
 */
export interface GetDrgAttachmentsOutputArgs {
    /**
     * The type for the network resource attached to the DRG.
     */
    attachmentType?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the given display name exactly.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG.
     */
    drgId?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG route table assigned to the DRG attachment.
     */
    drgRouteTableId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Core.GetDrgAttachmentsFilterArgs>[]>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource (virtual circuit, VCN, IPSec tunnel, or remote peering connection) attached to the DRG.
     */
    networkId?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     */
    state?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
     */
    vcnId?: pulumi.Input<string>;
}
