// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./appCatalogListingResourceVersionAgreement";
export * from "./appCatalogSubscription";
export * from "./bootVolume";
export * from "./bootVolumeBackup";
export * from "./captureFilter";
export * from "./clusterNetwork";
export * from "./computeCapacityReservation";
export * from "./computeImageCapabilitySchema";
export * from "./consoleHistory";
export * from "./cpe";
export * from "./crossConnect";
export * from "./crossConnectGroup";
export * from "./dedicatedVmHost";
export * from "./defaultDhcpOptions";
export * from "./defaultRouteTable";
export * from "./defaultSecurityList";
export * from "./dhcpOptions";
export * from "./drg";
export * from "./drgAttachment";
export * from "./drgAttachmentManagement";
export * from "./drgAttachmentsList";
export * from "./drgRouteDistribution";
export * from "./drgRouteDistributionStatement";
export * from "./drgRouteTable";
export * from "./drgRouteTableRouteRule";
export * from "./getAppCatalogListing";
export * from "./getAppCatalogListingResourceVersion";
export * from "./getAppCatalogListingResourceVersions";
export * from "./getAppCatalogListings";
export * from "./getAppCatalogSubscriptions";
export * from "./getBlockVolumeReplica";
export * from "./getBlockVolumeReplicas";
export * from "./getBootVolume";
export * from "./getBootVolumeAttachments";
export * from "./getBootVolumeBackup";
export * from "./getBootVolumeBackups";
export * from "./getBootVolumeReplica";
export * from "./getBootVolumeReplicas";
export * from "./getBootVolumes";
export * from "./getByoipAllocatedRanges";
export * from "./getByoipRange";
export * from "./getByoipRanges";
export * from "./getCaptureFilter";
export * from "./getCaptureFilters";
export * from "./getClusterNetwork";
export * from "./getClusterNetworkInstances";
export * from "./getClusterNetworks";
export * from "./getCnvDnsResolverAssociation";
export * from "./getComputeCapacityReservation";
export * from "./getComputeCapacityReservationInstanceShapes";
export * from "./getComputeCapacityReservationInstances";
export * from "./getComputeCapacityReservations";
export * from "./getComputeGlobalImageCapabilitySchema";
export * from "./getComputeGlobalImageCapabilitySchemas";
export * from "./getComputeGlobalImageCapabilitySchemasVersion";
export * from "./getComputeGlobalImageCapabilitySchemasVersions";
export * from "./getComputeImageCapabilitySchema";
export * from "./getComputeImageCapabilitySchemas";
export * from "./getConsoleHistories";
export * from "./getConsoleHistoryData";
export * from "./getCpeDeviceShape";
export * from "./getCpeDeviceShapes";
export * from "./getCpes";
export * from "./getCrossConnect";
export * from "./getCrossConnectGroup";
export * from "./getCrossConnectGroups";
export * from "./getCrossConnectLocations";
export * from "./getCrossConnectPortSpeedShape";
export * from "./getCrossConnectStatus";
export * from "./getCrossConnects";
export * from "./getDedicatedVmHost";
export * from "./getDedicatedVmHostInstanceShapes";
export * from "./getDedicatedVmHostInstances";
export * from "./getDedicatedVmHostShapes";
export * from "./getDedicatedVmHosts";
export * from "./getDhcpOptions";
export * from "./getDrgAttachments";
export * from "./getDrgRouteDistribution";
export * from "./getDrgRouteDistributionStatements";
export * from "./getDrgRouteDistributions";
export * from "./getDrgRouteRule";
export * from "./getDrgRouteTableRouteRules";
export * from "./getDrgRouteTables";
export * from "./getDrgs";
export * from "./getFastConnectProviderService";
export * from "./getFastConnectProviderServiceKey";
export * from "./getFastConnectProviderServices";
export * from "./getImage";
export * from "./getImageShape";
export * from "./getImageShapes";
export * from "./getImages";
export * from "./getInstance";
export * from "./getInstanceConfiguration";
export * from "./getInstanceConfigurations";
export * from "./getInstanceConsoleConnections";
export * from "./getInstanceCredentials";
export * from "./getInstanceDevices";
export * from "./getInstanceMaintenanceReboot";
export * from "./getInstanceMeasuredBootReport";
export * from "./getInstancePool";
export * from "./getInstancePoolInstances";
export * from "./getInstancePoolLoadBalancerAttachment";
export * from "./getInstancePools";
export * from "./getInstances";
export * from "./getInternetGateways";
export * from "./getIpsecAlgorithm";
export * from "./getIpsecConfig";
export * from "./getIpsecConnectionTunnel";
export * from "./getIpsecConnectionTunnelError";
export * from "./getIpsecConnectionTunnelRoutes";
export * from "./getIpsecConnectionTunnels";
export * from "./getIpsecConnections";
export * from "./getIpsecStatus";
export * from "./getIpv6";
export * from "./getIpv6s";
export * from "./getLetterOfAuthority";
export * from "./getListingResourceVersion";
export * from "./getListingResourceVersions";
export * from "./getLocalPeeringGateways";
export * from "./getNatGateway";
export * from "./getNatGateways";
export * from "./getNetworkSecurityGroup";
export * from "./getNetworkSecurityGroupSecurityRules";
export * from "./getNetworkSecurityGroupVnics";
export * from "./getNetworkSecurityGroups";
export * from "./getPeerRegionForRemotePeerings";
export * from "./getPrivateIp";
export * from "./getPrivateIps";
export * from "./getPublicIp";
export * from "./getPublicIpPool";
export * from "./getPublicIpPools";
export * from "./getPublicIps";
export * from "./getRemotePeeringConnections";
export * from "./getRouteTables";
export * from "./getSecurityLists";
export * from "./getServiceGateways";
export * from "./getServices";
export * from "./getShape";
export * from "./getShapes";
export * from "./getSubnet";
export * from "./getSubnets";
export * from "./getTunnelSecurityAssociations";
export * from "./getVcn";
export * from "./getVcns";
export * from "./getVirtualCircuit";
export * from "./getVirtualCircuitBandwidthShapes";
export * from "./getVirtualCircuitPublicPrefixes";
export * from "./getVirtualCircuits";
export * from "./getVirtualNetworks";
export * from "./getVlan";
export * from "./getVlans";
export * from "./getVnic";
export * from "./getVnicAttachments";
export * from "./getVolume";
export * from "./getVolumeAttachments";
export * from "./getVolumeBackupPolicies";
export * from "./getVolumeBackupPolicyAssignments";
export * from "./getVolumeBackups";
export * from "./getVolumeGroupBackups";
export * from "./getVolumeGroupReplica";
export * from "./getVolumeGroupReplicas";
export * from "./getVolumeGroups";
export * from "./getVolumes";
export * from "./getVtap";
export * from "./getVtaps";
export * from "./image";
export * from "./instance";
export * from "./instanceConfiguration";
export * from "./instanceConsoleConnection";
export * from "./instancePool";
export * from "./instancePoolInstance";
export * from "./internetGateway";
export * from "./ipsec";
export * from "./ipsecConnectionTunnelManagement";
export * from "./ipv6";
export * from "./listingResourceVersionAgreement";
export * from "./localPeeringGateway";
export * from "./natGateway";
export * from "./networkSecurityGroup";
export * from "./networkSecurityGroupSecurityRule";
export * from "./privateIp";
export * from "./publicIp";
export * from "./publicIpPool";
export * from "./publicIpPoolCapacity";
export * from "./remotePeeringConnection";
export * from "./routeTable";
export * from "./routeTableAttachment";
export * from "./securityList";
export * from "./serviceGateway";
export * from "./shapeManagement";
export * from "./subnet";
export * from "./vcn";
export * from "./virtualCircuit";
export * from "./virtualNetwork";
export * from "./vlan";
export * from "./vnicAttachment";
export * from "./volume";
export * from "./volumeAttachment";
export * from "./volumeBackup";
export * from "./volumeBackupPolicy";
export * from "./volumeBackupPolicyAssignment";
export * from "./volumeGroup";
export * from "./volumeGroupBackup";
export * from "./vtap";

// Import resources to register:
import { AppCatalogListingResourceVersionAgreement } from "./appCatalogListingResourceVersionAgreement";
import { AppCatalogSubscription } from "./appCatalogSubscription";
import { BootVolume } from "./bootVolume";
import { BootVolumeBackup } from "./bootVolumeBackup";
import { CaptureFilter } from "./captureFilter";
import { ClusterNetwork } from "./clusterNetwork";
import { ComputeCapacityReservation } from "./computeCapacityReservation";
import { ComputeImageCapabilitySchema } from "./computeImageCapabilitySchema";
import { ConsoleHistory } from "./consoleHistory";
import { Cpe } from "./cpe";
import { CrossConnect } from "./crossConnect";
import { CrossConnectGroup } from "./crossConnectGroup";
import { DedicatedVmHost } from "./dedicatedVmHost";
import { DefaultDhcpOptions } from "./defaultDhcpOptions";
import { DefaultRouteTable } from "./defaultRouteTable";
import { DefaultSecurityList } from "./defaultSecurityList";
import { DhcpOptions } from "./dhcpOptions";
import { Drg } from "./drg";
import { DrgAttachment } from "./drgAttachment";
import { DrgAttachmentManagement } from "./drgAttachmentManagement";
import { DrgAttachmentsList } from "./drgAttachmentsList";
import { DrgRouteDistribution } from "./drgRouteDistribution";
import { DrgRouteDistributionStatement } from "./drgRouteDistributionStatement";
import { DrgRouteTable } from "./drgRouteTable";
import { DrgRouteTableRouteRule } from "./drgRouteTableRouteRule";
import { Image } from "./image";
import { Instance } from "./instance";
import { InstanceConfiguration } from "./instanceConfiguration";
import { InstanceConsoleConnection } from "./instanceConsoleConnection";
import { InstancePool } from "./instancePool";
import { InstancePoolInstance } from "./instancePoolInstance";
import { InternetGateway } from "./internetGateway";
import { Ipsec } from "./ipsec";
import { IpsecConnectionTunnelManagement } from "./ipsecConnectionTunnelManagement";
import { Ipv6 } from "./ipv6";
import { ListingResourceVersionAgreement } from "./listingResourceVersionAgreement";
import { LocalPeeringGateway } from "./localPeeringGateway";
import { NatGateway } from "./natGateway";
import { NetworkSecurityGroup } from "./networkSecurityGroup";
import { NetworkSecurityGroupSecurityRule } from "./networkSecurityGroupSecurityRule";
import { PrivateIp } from "./privateIp";
import { PublicIp } from "./publicIp";
import { PublicIpPool } from "./publicIpPool";
import { PublicIpPoolCapacity } from "./publicIpPoolCapacity";
import { RemotePeeringConnection } from "./remotePeeringConnection";
import { RouteTable } from "./routeTable";
import { RouteTableAttachment } from "./routeTableAttachment";
import { SecurityList } from "./securityList";
import { ServiceGateway } from "./serviceGateway";
import { ShapeManagement } from "./shapeManagement";
import { Subnet } from "./subnet";
import { Vcn } from "./vcn";
import { VirtualCircuit } from "./virtualCircuit";
import { VirtualNetwork } from "./virtualNetwork";
import { Vlan } from "./vlan";
import { VnicAttachment } from "./vnicAttachment";
import { Volume } from "./volume";
import { VolumeAttachment } from "./volumeAttachment";
import { VolumeBackup } from "./volumeBackup";
import { VolumeBackupPolicy } from "./volumeBackupPolicy";
import { VolumeBackupPolicyAssignment } from "./volumeBackupPolicyAssignment";
import { VolumeGroup } from "./volumeGroup";
import { VolumeGroupBackup } from "./volumeGroupBackup";
import { Vtap } from "./vtap";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:Core/appCatalogListingResourceVersionAgreement:AppCatalogListingResourceVersionAgreement":
                return new AppCatalogListingResourceVersionAgreement(name, <any>undefined, { urn })
            case "oci:Core/appCatalogSubscription:AppCatalogSubscription":
                return new AppCatalogSubscription(name, <any>undefined, { urn })
            case "oci:Core/bootVolume:BootVolume":
                return new BootVolume(name, <any>undefined, { urn })
            case "oci:Core/bootVolumeBackup:BootVolumeBackup":
                return new BootVolumeBackup(name, <any>undefined, { urn })
            case "oci:Core/captureFilter:CaptureFilter":
                return new CaptureFilter(name, <any>undefined, { urn })
            case "oci:Core/clusterNetwork:ClusterNetwork":
                return new ClusterNetwork(name, <any>undefined, { urn })
            case "oci:Core/computeCapacityReservation:ComputeCapacityReservation":
                return new ComputeCapacityReservation(name, <any>undefined, { urn })
            case "oci:Core/computeImageCapabilitySchema:ComputeImageCapabilitySchema":
                return new ComputeImageCapabilitySchema(name, <any>undefined, { urn })
            case "oci:Core/consoleHistory:ConsoleHistory":
                return new ConsoleHistory(name, <any>undefined, { urn })
            case "oci:Core/cpe:Cpe":
                return new Cpe(name, <any>undefined, { urn })
            case "oci:Core/crossConnect:CrossConnect":
                return new CrossConnect(name, <any>undefined, { urn })
            case "oci:Core/crossConnectGroup:CrossConnectGroup":
                return new CrossConnectGroup(name, <any>undefined, { urn })
            case "oci:Core/dedicatedVmHost:DedicatedVmHost":
                return new DedicatedVmHost(name, <any>undefined, { urn })
            case "oci:Core/defaultDhcpOptions:DefaultDhcpOptions":
                return new DefaultDhcpOptions(name, <any>undefined, { urn })
            case "oci:Core/defaultRouteTable:DefaultRouteTable":
                return new DefaultRouteTable(name, <any>undefined, { urn })
            case "oci:Core/defaultSecurityList:DefaultSecurityList":
                return new DefaultSecurityList(name, <any>undefined, { urn })
            case "oci:Core/dhcpOptions:DhcpOptions":
                return new DhcpOptions(name, <any>undefined, { urn })
            case "oci:Core/drg:Drg":
                return new Drg(name, <any>undefined, { urn })
            case "oci:Core/drgAttachment:DrgAttachment":
                return new DrgAttachment(name, <any>undefined, { urn })
            case "oci:Core/drgAttachmentManagement:DrgAttachmentManagement":
                return new DrgAttachmentManagement(name, <any>undefined, { urn })
            case "oci:Core/drgAttachmentsList:DrgAttachmentsList":
                return new DrgAttachmentsList(name, <any>undefined, { urn })
            case "oci:Core/drgRouteDistribution:DrgRouteDistribution":
                return new DrgRouteDistribution(name, <any>undefined, { urn })
            case "oci:Core/drgRouteDistributionStatement:DrgRouteDistributionStatement":
                return new DrgRouteDistributionStatement(name, <any>undefined, { urn })
            case "oci:Core/drgRouteTable:DrgRouteTable":
                return new DrgRouteTable(name, <any>undefined, { urn })
            case "oci:Core/drgRouteTableRouteRule:DrgRouteTableRouteRule":
                return new DrgRouteTableRouteRule(name, <any>undefined, { urn })
            case "oci:Core/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "oci:Core/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "oci:Core/instanceConfiguration:InstanceConfiguration":
                return new InstanceConfiguration(name, <any>undefined, { urn })
            case "oci:Core/instanceConsoleConnection:InstanceConsoleConnection":
                return new InstanceConsoleConnection(name, <any>undefined, { urn })
            case "oci:Core/instancePool:InstancePool":
                return new InstancePool(name, <any>undefined, { urn })
            case "oci:Core/instancePoolInstance:InstancePoolInstance":
                return new InstancePoolInstance(name, <any>undefined, { urn })
            case "oci:Core/internetGateway:InternetGateway":
                return new InternetGateway(name, <any>undefined, { urn })
            case "oci:Core/ipsec:Ipsec":
                return new Ipsec(name, <any>undefined, { urn })
            case "oci:Core/ipsecConnectionTunnelManagement:IpsecConnectionTunnelManagement":
                return new IpsecConnectionTunnelManagement(name, <any>undefined, { urn })
            case "oci:Core/ipv6:Ipv6":
                return new Ipv6(name, <any>undefined, { urn })
            case "oci:Core/listingResourceVersionAgreement:ListingResourceVersionAgreement":
                return new ListingResourceVersionAgreement(name, <any>undefined, { urn })
            case "oci:Core/localPeeringGateway:LocalPeeringGateway":
                return new LocalPeeringGateway(name, <any>undefined, { urn })
            case "oci:Core/natGateway:NatGateway":
                return new NatGateway(name, <any>undefined, { urn })
            case "oci:Core/networkSecurityGroup:NetworkSecurityGroup":
                return new NetworkSecurityGroup(name, <any>undefined, { urn })
            case "oci:Core/networkSecurityGroupSecurityRule:NetworkSecurityGroupSecurityRule":
                return new NetworkSecurityGroupSecurityRule(name, <any>undefined, { urn })
            case "oci:Core/privateIp:PrivateIp":
                return new PrivateIp(name, <any>undefined, { urn })
            case "oci:Core/publicIp:PublicIp":
                return new PublicIp(name, <any>undefined, { urn })
            case "oci:Core/publicIpPool:PublicIpPool":
                return new PublicIpPool(name, <any>undefined, { urn })
            case "oci:Core/publicIpPoolCapacity:PublicIpPoolCapacity":
                return new PublicIpPoolCapacity(name, <any>undefined, { urn })
            case "oci:Core/remotePeeringConnection:RemotePeeringConnection":
                return new RemotePeeringConnection(name, <any>undefined, { urn })
            case "oci:Core/routeTable:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "oci:Core/routeTableAttachment:RouteTableAttachment":
                return new RouteTableAttachment(name, <any>undefined, { urn })
            case "oci:Core/securityList:SecurityList":
                return new SecurityList(name, <any>undefined, { urn })
            case "oci:Core/serviceGateway:ServiceGateway":
                return new ServiceGateway(name, <any>undefined, { urn })
            case "oci:Core/shapeManagement:ShapeManagement":
                return new ShapeManagement(name, <any>undefined, { urn })
            case "oci:Core/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "oci:Core/vcn:Vcn":
                return new Vcn(name, <any>undefined, { urn })
            case "oci:Core/virtualCircuit:VirtualCircuit":
                return new VirtualCircuit(name, <any>undefined, { urn })
            case "oci:Core/virtualNetwork:VirtualNetwork":
                return new VirtualNetwork(name, <any>undefined, { urn })
            case "oci:Core/vlan:Vlan":
                return new Vlan(name, <any>undefined, { urn })
            case "oci:Core/vnicAttachment:VnicAttachment":
                return new VnicAttachment(name, <any>undefined, { urn })
            case "oci:Core/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "oci:Core/volumeAttachment:VolumeAttachment":
                return new VolumeAttachment(name, <any>undefined, { urn })
            case "oci:Core/volumeBackup:VolumeBackup":
                return new VolumeBackup(name, <any>undefined, { urn })
            case "oci:Core/volumeBackupPolicy:VolumeBackupPolicy":
                return new VolumeBackupPolicy(name, <any>undefined, { urn })
            case "oci:Core/volumeBackupPolicyAssignment:VolumeBackupPolicyAssignment":
                return new VolumeBackupPolicyAssignment(name, <any>undefined, { urn })
            case "oci:Core/volumeGroup:VolumeGroup":
                return new VolumeGroup(name, <any>undefined, { urn })
            case "oci:Core/volumeGroupBackup:VolumeGroupBackup":
                return new VolumeGroupBackup(name, <any>undefined, { urn })
            case "oci:Core/vtap:Vtap":
                return new Vtap(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "Core/appCatalogListingResourceVersionAgreement", _module)
pulumi.runtime.registerResourceModule("oci", "Core/appCatalogSubscription", _module)
pulumi.runtime.registerResourceModule("oci", "Core/bootVolume", _module)
pulumi.runtime.registerResourceModule("oci", "Core/bootVolumeBackup", _module)
pulumi.runtime.registerResourceModule("oci", "Core/captureFilter", _module)
pulumi.runtime.registerResourceModule("oci", "Core/clusterNetwork", _module)
pulumi.runtime.registerResourceModule("oci", "Core/computeCapacityReservation", _module)
pulumi.runtime.registerResourceModule("oci", "Core/computeImageCapabilitySchema", _module)
pulumi.runtime.registerResourceModule("oci", "Core/consoleHistory", _module)
pulumi.runtime.registerResourceModule("oci", "Core/cpe", _module)
pulumi.runtime.registerResourceModule("oci", "Core/crossConnect", _module)
pulumi.runtime.registerResourceModule("oci", "Core/crossConnectGroup", _module)
pulumi.runtime.registerResourceModule("oci", "Core/dedicatedVmHost", _module)
pulumi.runtime.registerResourceModule("oci", "Core/defaultDhcpOptions", _module)
pulumi.runtime.registerResourceModule("oci", "Core/defaultRouteTable", _module)
pulumi.runtime.registerResourceModule("oci", "Core/defaultSecurityList", _module)
pulumi.runtime.registerResourceModule("oci", "Core/dhcpOptions", _module)
pulumi.runtime.registerResourceModule("oci", "Core/drg", _module)
pulumi.runtime.registerResourceModule("oci", "Core/drgAttachment", _module)
pulumi.runtime.registerResourceModule("oci", "Core/drgAttachmentManagement", _module)
pulumi.runtime.registerResourceModule("oci", "Core/drgAttachmentsList", _module)
pulumi.runtime.registerResourceModule("oci", "Core/drgRouteDistribution", _module)
pulumi.runtime.registerResourceModule("oci", "Core/drgRouteDistributionStatement", _module)
pulumi.runtime.registerResourceModule("oci", "Core/drgRouteTable", _module)
pulumi.runtime.registerResourceModule("oci", "Core/drgRouteTableRouteRule", _module)
pulumi.runtime.registerResourceModule("oci", "Core/image", _module)
pulumi.runtime.registerResourceModule("oci", "Core/instance", _module)
pulumi.runtime.registerResourceModule("oci", "Core/instanceConfiguration", _module)
pulumi.runtime.registerResourceModule("oci", "Core/instanceConsoleConnection", _module)
pulumi.runtime.registerResourceModule("oci", "Core/instancePool", _module)
pulumi.runtime.registerResourceModule("oci", "Core/instancePoolInstance", _module)
pulumi.runtime.registerResourceModule("oci", "Core/internetGateway", _module)
pulumi.runtime.registerResourceModule("oci", "Core/ipsec", _module)
pulumi.runtime.registerResourceModule("oci", "Core/ipsecConnectionTunnelManagement", _module)
pulumi.runtime.registerResourceModule("oci", "Core/ipv6", _module)
pulumi.runtime.registerResourceModule("oci", "Core/listingResourceVersionAgreement", _module)
pulumi.runtime.registerResourceModule("oci", "Core/localPeeringGateway", _module)
pulumi.runtime.registerResourceModule("oci", "Core/natGateway", _module)
pulumi.runtime.registerResourceModule("oci", "Core/networkSecurityGroup", _module)
pulumi.runtime.registerResourceModule("oci", "Core/networkSecurityGroupSecurityRule", _module)
pulumi.runtime.registerResourceModule("oci", "Core/privateIp", _module)
pulumi.runtime.registerResourceModule("oci", "Core/publicIp", _module)
pulumi.runtime.registerResourceModule("oci", "Core/publicIpPool", _module)
pulumi.runtime.registerResourceModule("oci", "Core/publicIpPoolCapacity", _module)
pulumi.runtime.registerResourceModule("oci", "Core/remotePeeringConnection", _module)
pulumi.runtime.registerResourceModule("oci", "Core/routeTable", _module)
pulumi.runtime.registerResourceModule("oci", "Core/routeTableAttachment", _module)
pulumi.runtime.registerResourceModule("oci", "Core/securityList", _module)
pulumi.runtime.registerResourceModule("oci", "Core/serviceGateway", _module)
pulumi.runtime.registerResourceModule("oci", "Core/shapeManagement", _module)
pulumi.runtime.registerResourceModule("oci", "Core/subnet", _module)
pulumi.runtime.registerResourceModule("oci", "Core/vcn", _module)
pulumi.runtime.registerResourceModule("oci", "Core/virtualCircuit", _module)
pulumi.runtime.registerResourceModule("oci", "Core/virtualNetwork", _module)
pulumi.runtime.registerResourceModule("oci", "Core/vlan", _module)
pulumi.runtime.registerResourceModule("oci", "Core/vnicAttachment", _module)
pulumi.runtime.registerResourceModule("oci", "Core/volume", _module)
pulumi.runtime.registerResourceModule("oci", "Core/volumeAttachment", _module)
pulumi.runtime.registerResourceModule("oci", "Core/volumeBackup", _module)
pulumi.runtime.registerResourceModule("oci", "Core/volumeBackupPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "Core/volumeBackupPolicyAssignment", _module)
pulumi.runtime.registerResourceModule("oci", "Core/volumeGroup", _module)
pulumi.runtime.registerResourceModule("oci", "Core/volumeGroupBackup", _module)
pulumi.runtime.registerResourceModule("oci", "Core/vtap", _module)
