// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Network Security Group Security Rule resource in Oracle Cloud Infrastructure Core service.
 *
 * Adds up to 25 security rules to the specified network security group. Adding more than 25 rules requires multiple operations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testNetworkSecurityGroupSecurityRule = new oci.core.NetworkSecurityGroupSecurityRule("test_network_security_group_security_rule", {
 *     networkSecurityGroupId: testNetworkSecurityGroup.id,
 *     direction: networkSecurityGroupSecurityRuleDirection,
 *     protocol: networkSecurityGroupSecurityRuleProtocol,
 *     description: networkSecurityGroupSecurityRuleDescription,
 *     destination: networkSecurityGroupSecurityRuleDestination,
 *     destinationType: networkSecurityGroupSecurityRuleDestinationType,
 *     icmpOptions: {
 *         type: networkSecurityGroupSecurityRuleIcmpOptionsType,
 *         code: networkSecurityGroupSecurityRuleIcmpOptionsCode,
 *     },
 *     source: networkSecurityGroupSecurityRuleSource,
 *     sourceType: networkSecurityGroupSecurityRuleSourceType,
 *     stateless: networkSecurityGroupSecurityRuleStateless,
 *     tcpOptions: {
 *         destinationPortRange: {
 *             max: networkSecurityGroupSecurityRuleTcpOptionsDestinationPortRangeMax,
 *             min: networkSecurityGroupSecurityRuleTcpOptionsDestinationPortRangeMin,
 *         },
 *         sourcePortRange: {
 *             max: networkSecurityGroupSecurityRuleTcpOptionsSourcePortRangeMax,
 *             min: networkSecurityGroupSecurityRuleTcpOptionsSourcePortRangeMin,
 *         },
 *     },
 *     udpOptions: {
 *         destinationPortRange: {
 *             max: networkSecurityGroupSecurityRuleUdpOptionsDestinationPortRangeMax,
 *             min: networkSecurityGroupSecurityRuleUdpOptionsDestinationPortRangeMin,
 *         },
 *         sourcePortRange: {
 *             max: networkSecurityGroupSecurityRuleUdpOptionsSourcePortRangeMax,
 *             min: networkSecurityGroupSecurityRuleUdpOptionsSourcePortRangeMin,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * NetworkSecurityGroupSecurityRule can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:Core/networkSecurityGroupSecurityRule:NetworkSecurityGroupSecurityRule test_network_security_group_security_rule "networkSecurityGroups/{networkSecurityGroupId}/securityRules/{securityRuleId}"
 * ```
 */
export class NetworkSecurityGroupSecurityRule extends pulumi.CustomResource {
    /**
     * Get an existing NetworkSecurityGroupSecurityRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkSecurityGroupSecurityRuleState, opts?: pulumi.CustomResourceOptions): NetworkSecurityGroupSecurityRule {
        return new NetworkSecurityGroupSecurityRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Core/networkSecurityGroupSecurityRule:NetworkSecurityGroupSecurityRule';

    /**
     * Returns true if the given object is an instance of NetworkSecurityGroupSecurityRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkSecurityGroupSecurityRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkSecurityGroupSecurityRule.__pulumiType;
    }

    /**
     * An optional description of your choice for the rule.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Conceptually, this is the range of IP addresses that a packet originating from the instance can go to.
     */
    declare public readonly destination: pulumi.Output<string>;
    /**
     * Type of destination for the rule. Required if `direction` = `EGRESS`.
     */
    declare public readonly destinationType: pulumi.Output<string>;
    /**
     * Direction of the security rule. Set to `EGRESS` for rules to allow outbound IP packets, or `INGRESS` for rules to allow inbound IP packets.
     */
    declare public readonly direction: pulumi.Output<string>;
    /**
     * Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     */
    declare public readonly icmpOptions: pulumi.Output<outputs.Core.NetworkSecurityGroupSecurityRuleIcmpOptions | undefined>;
    /**
     * Whether the rule is valid. The value is `True` when the rule is first created. If the rule's `source` or `destination` is a network security group, the value changes to `False` if that network security group is deleted.
     */
    declare public /*out*/ readonly isValid: pulumi.Output<boolean>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network security group.
     */
    declare public readonly networkSecurityGroupId: pulumi.Output<string>;
    /**
     * The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP ("1"), TCP ("6"), UDP ("17"), and ICMPv6 ("58").
     */
    declare public readonly protocol: pulumi.Output<string>;
    /**
     * Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     */
    declare public readonly source: pulumi.Output<string | undefined>;
    /**
     * Type of source for the rule. Required if `direction` = `INGRESS`.
     * * `CIDR_BLOCK`: If the rule's `source` is an IP address range in CIDR notation.
     * * `SERVICE_CIDR_BLOCK`: If the rule's `source` is the `cidrBlock` value for a [Service](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Service/) (the rule is for traffic coming from a particular `Service` through a service gateway).
     * * `NETWORK_SECURITY_GROUP`: If the rule's `source` is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a [NetworkSecurityGroup](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/NetworkSecurityGroup/).
     */
    declare public readonly sourceType: pulumi.Output<string>;
    /**
     * A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if egress traffic allows TCP destination port 80, there should be an ingress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     */
    declare public readonly stateless: pulumi.Output<boolean>;
    /**
     * Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     */
    declare public readonly tcpOptions: pulumi.Output<outputs.Core.NetworkSecurityGroupSecurityRuleTcpOptions | undefined>;
    /**
     * The date and time the security rule was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     */
    declare public readonly udpOptions: pulumi.Output<outputs.Core.NetworkSecurityGroupSecurityRuleUdpOptions | undefined>;

    /**
     * Create a NetworkSecurityGroupSecurityRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkSecurityGroupSecurityRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkSecurityGroupSecurityRuleArgs | NetworkSecurityGroupSecurityRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkSecurityGroupSecurityRuleState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["destination"] = state?.destination;
            resourceInputs["destinationType"] = state?.destinationType;
            resourceInputs["direction"] = state?.direction;
            resourceInputs["icmpOptions"] = state?.icmpOptions;
            resourceInputs["isValid"] = state?.isValid;
            resourceInputs["networkSecurityGroupId"] = state?.networkSecurityGroupId;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["source"] = state?.source;
            resourceInputs["sourceType"] = state?.sourceType;
            resourceInputs["stateless"] = state?.stateless;
            resourceInputs["tcpOptions"] = state?.tcpOptions;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["udpOptions"] = state?.udpOptions;
        } else {
            const args = argsOrState as NetworkSecurityGroupSecurityRuleArgs | undefined;
            if (args?.direction === undefined && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if (args?.networkSecurityGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkSecurityGroupId'");
            }
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["destination"] = args?.destination;
            resourceInputs["destinationType"] = args?.destinationType;
            resourceInputs["direction"] = args?.direction;
            resourceInputs["icmpOptions"] = args?.icmpOptions;
            resourceInputs["networkSecurityGroupId"] = args?.networkSecurityGroupId;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["source"] = args?.source;
            resourceInputs["sourceType"] = args?.sourceType;
            resourceInputs["stateless"] = args?.stateless;
            resourceInputs["tcpOptions"] = args?.tcpOptions;
            resourceInputs["udpOptions"] = args?.udpOptions;
            resourceInputs["isValid"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkSecurityGroupSecurityRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkSecurityGroupSecurityRule resources.
 */
export interface NetworkSecurityGroupSecurityRuleState {
    /**
     * An optional description of your choice for the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Conceptually, this is the range of IP addresses that a packet originating from the instance can go to.
     */
    destination?: pulumi.Input<string>;
    /**
     * Type of destination for the rule. Required if `direction` = `EGRESS`.
     */
    destinationType?: pulumi.Input<string>;
    /**
     * Direction of the security rule. Set to `EGRESS` for rules to allow outbound IP packets, or `INGRESS` for rules to allow inbound IP packets.
     */
    direction?: pulumi.Input<string>;
    /**
     * Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     */
    icmpOptions?: pulumi.Input<inputs.Core.NetworkSecurityGroupSecurityRuleIcmpOptions>;
    /**
     * Whether the rule is valid. The value is `True` when the rule is first created. If the rule's `source` or `destination` is a network security group, the value changes to `False` if that network security group is deleted.
     */
    isValid?: pulumi.Input<boolean>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network security group.
     */
    networkSecurityGroupId?: pulumi.Input<string>;
    /**
     * The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP ("1"), TCP ("6"), UDP ("17"), and ICMPv6 ("58").
     */
    protocol?: pulumi.Input<string>;
    /**
     * Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     */
    source?: pulumi.Input<string>;
    /**
     * Type of source for the rule. Required if `direction` = `INGRESS`.
     * * `CIDR_BLOCK`: If the rule's `source` is an IP address range in CIDR notation.
     * * `SERVICE_CIDR_BLOCK`: If the rule's `source` is the `cidrBlock` value for a [Service](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Service/) (the rule is for traffic coming from a particular `Service` through a service gateway).
     * * `NETWORK_SECURITY_GROUP`: If the rule's `source` is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a [NetworkSecurityGroup](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/NetworkSecurityGroup/).
     */
    sourceType?: pulumi.Input<string>;
    /**
     * A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if egress traffic allows TCP destination port 80, there should be an ingress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     */
    stateless?: pulumi.Input<boolean>;
    /**
     * Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     */
    tcpOptions?: pulumi.Input<inputs.Core.NetworkSecurityGroupSecurityRuleTcpOptions>;
    /**
     * The date and time the security rule was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     */
    udpOptions?: pulumi.Input<inputs.Core.NetworkSecurityGroupSecurityRuleUdpOptions>;
}

/**
 * The set of arguments for constructing a NetworkSecurityGroupSecurityRule resource.
 */
export interface NetworkSecurityGroupSecurityRuleArgs {
    /**
     * An optional description of your choice for the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Conceptually, this is the range of IP addresses that a packet originating from the instance can go to.
     */
    destination?: pulumi.Input<string>;
    /**
     * Type of destination for the rule. Required if `direction` = `EGRESS`.
     */
    destinationType?: pulumi.Input<string>;
    /**
     * Direction of the security rule. Set to `EGRESS` for rules to allow outbound IP packets, or `INGRESS` for rules to allow inbound IP packets.
     */
    direction: pulumi.Input<string>;
    /**
     * Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
     * * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
     * * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
     */
    icmpOptions?: pulumi.Input<inputs.Core.NetworkSecurityGroupSecurityRuleIcmpOptions>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network security group.
     */
    networkSecurityGroupId: pulumi.Input<string>;
    /**
     * The transport protocol. Specify either `all` or an IPv4 protocol number as defined in [Protocol Numbers](http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Options are supported only for ICMP ("1"), TCP ("6"), UDP ("17"), and ICMPv6 ("58").
     */
    protocol: pulumi.Input<string>;
    /**
     * Conceptually, this is the range of IP addresses that a packet coming into the instance can come from.
     */
    source?: pulumi.Input<string>;
    /**
     * Type of source for the rule. Required if `direction` = `INGRESS`.
     * * `CIDR_BLOCK`: If the rule's `source` is an IP address range in CIDR notation.
     * * `SERVICE_CIDR_BLOCK`: If the rule's `source` is the `cidrBlock` value for a [Service](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Service/) (the rule is for traffic coming from a particular `Service` through a service gateway).
     * * `NETWORK_SECURITY_GROUP`: If the rule's `source` is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a [NetworkSecurityGroup](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/NetworkSecurityGroup/).
     */
    sourceType?: pulumi.Input<string>;
    /**
     * A stateless rule allows traffic in one direction. Remember to add a corresponding stateless rule in the other direction if you need to support bidirectional traffic. For example, if egress traffic allows TCP destination port 80, there should be an ingress rule to allow TCP source port 80. Defaults to false, which means the rule is stateful and a corresponding rule is not necessary for bidirectional traffic.
     */
    stateless?: pulumi.Input<boolean>;
    /**
     * Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
     */
    tcpOptions?: pulumi.Input<inputs.Core.NetworkSecurityGroupSecurityRuleTcpOptions>;
    /**
     * Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
     */
    udpOptions?: pulumi.Input<inputs.Core.NetworkSecurityGroupSecurityRuleUdpOptions>;
}
