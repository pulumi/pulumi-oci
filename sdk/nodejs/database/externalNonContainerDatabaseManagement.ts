// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the External Non Container Database Management resource in Oracle Cloud Infrastructure Database service.
 *
 * Enable Database Management Service for the external non-container database.
 * For more information about the Database Management Service, see
 * [Database Management Service](https://docs.cloud.oracle.com/iaas/Content/ExternalDatabase/Concepts/databasemanagementservice.htm).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testExternalNonContainerDatabaseManagement = new oci.database.ExternalNonContainerDatabaseManagement("test_external_non_container_database_management", {
 *     externalDatabaseConnectorId: testExternalDatabaseConnector.id,
 *     externalNonContainerDatabaseId: testExternalNonContainerDatabase.id,
 *     licenseMode: externalNonContainerDatabaseManagementLicenseModel,
 * });
 * ```
 *
 * ## Import
 *
 * Import is not supported for this resource.
 */
export class ExternalNonContainerDatabaseManagement extends pulumi.CustomResource {
    /**
     * Get an existing ExternalNonContainerDatabaseManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalNonContainerDatabaseManagementState, opts?: pulumi.CustomResourceOptions): ExternalNonContainerDatabaseManagement {
        return new ExternalNonContainerDatabaseManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Database/externalNonContainerDatabaseManagement:ExternalNonContainerDatabaseManagement';

    /**
     * Returns true if the given object is an instance of ExternalNonContainerDatabaseManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalNonContainerDatabaseManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalNonContainerDatabaseManagement.__pulumiType;
    }

    declare public readonly enableManagement: pulumi.Output<boolean>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
     */
    declare public readonly externalDatabaseConnectorId: pulumi.Output<string>;
    /**
     * The external non-container database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    declare public readonly externalNonContainerDatabaseId: pulumi.Output<string>;
    /**
     * The Oracle license model that applies to the external database. Required only for enabling database management.
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly licenseModel: pulumi.Output<string>;

    /**
     * Create a ExternalNonContainerDatabaseManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalNonContainerDatabaseManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalNonContainerDatabaseManagementArgs | ExternalNonContainerDatabaseManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExternalNonContainerDatabaseManagementState | undefined;
            resourceInputs["enableManagement"] = state?.enableManagement;
            resourceInputs["externalDatabaseConnectorId"] = state?.externalDatabaseConnectorId;
            resourceInputs["externalNonContainerDatabaseId"] = state?.externalNonContainerDatabaseId;
            resourceInputs["licenseModel"] = state?.licenseModel;
        } else {
            const args = argsOrState as ExternalNonContainerDatabaseManagementArgs | undefined;
            if (args?.enableManagement === undefined && !opts.urn) {
                throw new Error("Missing required property 'enableManagement'");
            }
            if (args?.externalDatabaseConnectorId === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalDatabaseConnectorId'");
            }
            if (args?.externalNonContainerDatabaseId === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalNonContainerDatabaseId'");
            }
            resourceInputs["enableManagement"] = args?.enableManagement;
            resourceInputs["externalDatabaseConnectorId"] = args?.externalDatabaseConnectorId;
            resourceInputs["externalNonContainerDatabaseId"] = args?.externalNonContainerDatabaseId;
            resourceInputs["licenseModel"] = args?.licenseModel;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExternalNonContainerDatabaseManagement.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExternalNonContainerDatabaseManagement resources.
 */
export interface ExternalNonContainerDatabaseManagementState {
    enableManagement?: pulumi.Input<boolean>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
     */
    externalDatabaseConnectorId?: pulumi.Input<string>;
    /**
     * The external non-container database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    externalNonContainerDatabaseId?: pulumi.Input<string>;
    /**
     * The Oracle license model that applies to the external database. Required only for enabling database management.
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    licenseModel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExternalNonContainerDatabaseManagement resource.
 */
export interface ExternalNonContainerDatabaseManagementArgs {
    enableManagement: pulumi.Input<boolean>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
     */
    externalDatabaseConnectorId: pulumi.Input<string>;
    /**
     * The external non-container database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    externalNonContainerDatabaseId: pulumi.Input<string>;
    /**
     * The Oracle license model that applies to the external database. Required only for enabling database management.
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    licenseModel?: pulumi.Input<string>;
}
