// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Autonomous Container Database resource in Oracle Cloud Infrastructure Database service.
 *
 * Gets information about the specified Autonomous Container Database.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testAutonomousContainerDatabase = oci.Database.getAutonomousContainerDatabase({
 *     autonomousContainerDatabaseId: testAutonomousContainerDatabaseOciDatabaseAutonomousContainerDatabase.id,
 * });
 * ```
 */
export function getAutonomousContainerDatabase(args: GetAutonomousContainerDatabaseArgs, opts?: pulumi.InvokeOptions): Promise<GetAutonomousContainerDatabaseResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Database/getAutonomousContainerDatabase:getAutonomousContainerDatabase", {
        "autonomousContainerDatabaseId": args.autonomousContainerDatabaseId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAutonomousContainerDatabase.
 */
export interface GetAutonomousContainerDatabaseArgs {
    /**
     * The Autonomous Container Database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    autonomousContainerDatabaseId: string;
}

/**
 * A collection of values returned by getAutonomousContainerDatabase.
 */
export interface GetAutonomousContainerDatabaseResult {
    readonly autonomousContainerDatabaseId: string;
    /**
     * **No longer used.** For Autonomous Database on dedicated Exadata infrastructure, the container database is created within a specified `cloudAutonomousVmCluster`.
     */
    readonly autonomousExadataInfrastructureId: string;
    /**
     * The OCID of the Autonomous VM Cluster.
     */
    readonly autonomousVmClusterId: string;
    /**
     * The availability domain of the Autonomous Container Database.
     */
    readonly availabilityDomain: string;
    /**
     * Sum of CPUs available on the Autonomous VM Cluster + Sum of reclaimable CPUs available in the Autonomous Container Database.<br> For Autonomous Databases on Dedicated Exadata Infrastructure, the CPU type (OCPUs or ECPUs) is determined by the parent Autonomous Exadata VM Cluster's compute model. See [Compute Models in Autonomous Database on Dedicated Exadata Infrastructure](https://docs.oracle.com/en/cloud/paas/autonomous-database/dedicated/adbak) for more details.
     */
    readonly availableCpus: number;
    /**
     * Backup options for the Autonomous Container Database.
     */
    readonly backupConfigs: outputs.Database.GetAutonomousContainerDatabaseBackupConfig[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cloud Autonomous Exadata VM Cluster.
     */
    readonly cloudAutonomousVmClusterId: string;
    /**
     * The OCID of the compartment.
     */
    readonly compartmentId: string;
    /**
     * The compute model of the Autonomous Container Database. For Autonomous Database on Dedicated Exadata Infrastructure, the CPU type (ECPUs or OCPUs) is determined by the parent Autonomous Exadata VM Cluster's compute model. ECPU compute model is the recommended model and OCPU compute model is legacy. See [Compute Models in Autonomous Database on Dedicated Exadata Infrastructure](https://docs.oracle.com/en/cloud/paas/autonomous-database/dedicated/adbak) for more details.
     */
    readonly computeModel: string;
    readonly databaseSoftwareImageId: string;
    /**
     * The Database name for the Autonomous Container Database. The name must be unique within the Cloud Autonomous VM Cluster, starting with an alphabetic character, followed by 1 to 7 alphanumeric characters.
     */
    readonly dbName: string;
    /**
     * The value above which an Autonomous Database will be split across multiple nodes. This value defaults to 16 when the "CPU per VM" value on the Autonomous VM Cluster is greater than 16. Otherwise, it defaults to the "CPU per VM" value.
     */
    readonly dbSplitThreshold: number;
    readonly dbUniqueName: string;
    /**
     * Oracle Database version of the Autonomous Container Database.
     */
    readonly dbVersion: string;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     */
    readonly definedTags: {[key: string]: string};
    /**
     * The user-provided name for the Autonomous Container Database.
     */
    readonly displayName: string;
    /**
     * This option determines whether to open an Autonomous Database across the maximum number of nodes or the least number of nodes. The default will be for the minimum number of VMs.
     */
    readonly distributionAffinity: string;
    /**
     * DST Time-zone File version of the Autonomous Container Database.
     */
    readonly dstFileVersion: string;
    readonly fastStartFailOverLagLimitInSeconds: number;
    /**
     * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
     */
    readonly freeformTags: {[key: string]: string};
    /**
     * The id of the Autonomous Database [Vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts) service key management history entry.
     */
    readonly id: string;
    /**
     * The infrastructure type this resource belongs to.
     */
    readonly infrastructureType: string;
    readonly isAutomaticFailoverEnabled: boolean;
    /**
     * Indicates if an automatic DST Time Zone file update is enabled for the Autonomous Container Database. If enabled along with Release Update, patching will be done in a Non-Rolling manner.
     */
    readonly isDstFileUpdateEnabled: boolean;
    /**
     * Key History Entry.
     */
    readonly keyHistoryEntries: outputs.Database.GetAutonomousContainerDatabaseKeyHistoryEntry[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the key store.
     */
    readonly keyStoreId: string;
    /**
     * The wallet name for Oracle Key Vault.
     */
    readonly keyStoreWalletName: string;
    /**
     * The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     */
    readonly kmsKeyId: string;
    /**
     * The largest Autonomous Database (CPU) that can be created in a new Autonomous Container Database.
     */
    readonly largestProvisionableAutonomousDatabaseInCpus: number;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the last maintenance run.
     */
    readonly lastMaintenanceRunId: string;
    /**
     * Additional information about the current lifecycle state.
     */
    readonly lifecycleDetails: string;
    /**
     * List of One-Off patches that has been successfully applied to Autonomous Container Database
     */
    readonly listOneOffPatches: string[];
    readonly maintenanceWindowDetails: outputs.Database.GetAutonomousContainerDatabaseMaintenanceWindowDetail[];
    /**
     * The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
     */
    readonly maintenanceWindows: outputs.Database.GetAutonomousContainerDatabaseMaintenanceWindow[];
    /**
     * The amount of memory (in GBs) enabled per ECPU or OCPU in the Autonomous VM Cluster.
     */
    readonly memoryPerOracleComputeUnitInGbs: number;
    /**
     * Enabling SHARED server architecture enables a database server to allow many client processes to share very few server processes, thereby increasing the number of supported users.
     */
    readonly netServicesArchitecture: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the next maintenance run.
     */
    readonly nextMaintenanceRunId: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the last patch applied on the system.
     */
    readonly patchId: string;
    /**
     * Database patch model preference.
     */
    readonly patchModel: string;
    readonly peerAutonomousContainerDatabaseBackupConfigs: outputs.Database.GetAutonomousContainerDatabasePeerAutonomousContainerDatabaseBackupConfig[];
    readonly peerAutonomousContainerDatabaseCompartmentId: string;
    readonly peerAutonomousContainerDatabaseDisplayName: string;
    readonly peerAutonomousExadataInfrastructureId: string;
    readonly peerAutonomousVmClusterId: string;
    readonly peerCloudAutonomousVmClusterId: string;
    readonly peerDbUniqueName: string;
    readonly protectionMode: string;
    /**
     * An array of CPU values that can be used to successfully provision a single Autonomous Database.
     */
    readonly provisionableCpuses: number[];
    /**
     * The number of CPUs provisioned in an Autonomous Container Database.
     */
    readonly provisionedCpus: number;
    /**
     * CPUs that continue to be included in the count of CPUs available to the Autonomous Container Database even after one of its Autonomous Database is terminated or scaled down. You can release them to the available CPUs at its parent Autonomous VM Cluster level by restarting the Autonomous Container Database.
     */
    readonly reclaimableCpus: number;
    /**
     * The number of CPUs reserved in an Autonomous Container Database.
     */
    readonly reservedCpus: number;
    /**
     * The Data Guard role of the Autonomous Container Database or Autonomous Database, if Autonomous Data Guard is enabled.
     */
    readonly role: string;
    readonly rotateKeyTrigger: boolean;
    /**
     * The service level agreement type of the container database. The default is STANDARD.
     */
    readonly serviceLevelAgreementType: string;
    /**
     * The scheduling detail for the quarterly maintenance window of the standby Autonomous Container Database. This value represents the number of days before scheduled maintenance of the primary database.
     */
    readonly standbyMaintenanceBufferInDays: number;
    /**
     * The current state of the Autonomous Container Database.
     */
    readonly state: string;
    /**
     * The date and time the Autonomous Container Database was created.
     */
    readonly timeCreated: string;
    /**
     * The timestamp of last successful backup. Here NULL value represents either there are no successful backups or backups are not configured for this Autonomous Container Database.
     */
    readonly timeOfLastBackup: string;
    /**
     * The date and time the Autonomous Container Database will be reverted to Standby from Snapshot Standby.
     */
    readonly timeSnapshotStandbyRevert: string;
    /**
     * The number of CPUs allocated to the Autonomous VM cluster.<br> For Autonomous Databases on Dedicated Exadata Infrastructure, the CPU type (OCPUs or ECPUs) is determined by the parent Autonomous Exadata VM Cluster's compute model.
     */
    readonly totalCpus: number;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
     */
    readonly vaultId: string;
    /**
     * The next maintenance version preference.
     */
    readonly versionPreference: string;
    /**
     * The percentage of CPUs to reserve for a single node Autonomous Database, in increments of 25.
     */
    readonly vmFailoverReservation: number;
}
/**
 * This data source provides details about a specific Autonomous Container Database resource in Oracle Cloud Infrastructure Database service.
 *
 * Gets information about the specified Autonomous Container Database.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testAutonomousContainerDatabase = oci.Database.getAutonomousContainerDatabase({
 *     autonomousContainerDatabaseId: testAutonomousContainerDatabaseOciDatabaseAutonomousContainerDatabase.id,
 * });
 * ```
 */
export function getAutonomousContainerDatabaseOutput(args: GetAutonomousContainerDatabaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAutonomousContainerDatabaseResult> {
    return pulumi.output(args).apply((a: any) => getAutonomousContainerDatabase(a, opts))
}

/**
 * A collection of arguments for invoking getAutonomousContainerDatabase.
 */
export interface GetAutonomousContainerDatabaseOutputArgs {
    /**
     * The Autonomous Container Database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    autonomousContainerDatabaseId: pulumi.Input<string>;
}
