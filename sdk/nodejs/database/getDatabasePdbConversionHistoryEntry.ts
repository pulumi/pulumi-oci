// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Database Pdb Conversion History Entry resource in Oracle Cloud Infrastructure Database service.
 *
 * Gets the details of operations performed to convert the specified database from non-container (non-CDB) to pluggable (PDB).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDatabasePdbConversionHistoryEntry = oci.Database.getDatabasePdbConversionHistoryEntry({
 *     databaseId: oci_database_database.test_database.id,
 *     pdbConversionHistoryEntryId: oci_database_pdb_conversion_history_entry.test_pdb_conversion_history_entry.id,
 * });
 * ```
 */
export function getDatabasePdbConversionHistoryEntry(args: GetDatabasePdbConversionHistoryEntryArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabasePdbConversionHistoryEntryResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("oci:Database/getDatabasePdbConversionHistoryEntry:getDatabasePdbConversionHistoryEntry", {
        "databaseId": args.databaseId,
        "pdbConversionHistoryEntryId": args.pdbConversionHistoryEntryId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDatabasePdbConversionHistoryEntry.
 */
export interface GetDatabasePdbConversionHistoryEntryArgs {
    /**
     * The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    databaseId: string;
    /**
     * The database conversion history [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    pdbConversionHistoryEntryId: string;
}

/**
 * A collection of values returned by getDatabasePdbConversionHistoryEntry.
 */
export interface GetDatabasePdbConversionHistoryEntryResult {
    /**
     * The operations used to convert a non-container database to a pluggable database.
     * * Use `PRECHECK` to run a pre-check operation on non-container database prior to converting it into a pluggable database.
     * * Use `CONVERT` to convert a non-container database into a pluggable database.
     * * Use `SYNC` if the non-container database was manually converted into a pluggable database using the dbcli command-line utility. Databases may need to be converted manually if the CONVERT action fails when converting a non-container database using the API.
     * * Use `SYNC_ROLLBACK` if the conversion of a non-container database into a pluggable database was manually rolled back using the dbcli command line utility. Conversions may need to be manually rolled back if the CONVERT action fails when converting a non-container database using the API.
     */
    readonly action: string;
    /**
     * Additional container database parameter.
     */
    readonly additionalCdbParams: string;
    /**
     * The database name. The name must begin with an alphabetic character and can contain a maximum of 8 alphanumeric characters. Special characters are not permitted. The database name must be unique in the tenancy.
     */
    readonly cdbName: string;
    readonly databaseId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Additional information about the current lifecycle state for the conversion operation.
     */
    readonly lifecycleDetails: string;
    readonly pdbConversionHistoryEntryId: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     */
    readonly sourceDatabaseId: string;
    /**
     * Status of an operation performed during the conversion of a non-container database to a pluggable database.
     */
    readonly state: string;
    /**
     * The target container database of the pluggable database created by the database conversion operation. Currently, the database conversion operation only supports creating the pluggable database in a new container database.
     * * Use `NEW_DATABASE` to specify that the pluggable database be created within a new container database in the same database home.
     */
    readonly target: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
     */
    readonly targetDatabaseId: string;
    /**
     * The date and time when the database conversion operation ended.
     */
    readonly timeEnded: string;
    /**
     * The date and time when the database conversion operation started.
     */
    readonly timeStarted: string;
}

export function getDatabasePdbConversionHistoryEntryOutput(args: GetDatabasePdbConversionHistoryEntryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabasePdbConversionHistoryEntryResult> {
    return pulumi.output(args).apply(a => getDatabasePdbConversionHistoryEntry(a, opts))
}

/**
 * A collection of arguments for invoking getDatabasePdbConversionHistoryEntry.
 */
export interface GetDatabasePdbConversionHistoryEntryOutputArgs {
    /**
     * The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    databaseId: pulumi.Input<string>;
    /**
     * The database conversion history [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    pdbConversionHistoryEntryId: pulumi.Input<string>;
}
