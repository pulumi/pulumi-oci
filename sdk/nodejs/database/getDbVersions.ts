// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Db Versions in Oracle Cloud Infrastructure Database service.
 *
 * Gets a list of supported Oracle Database versions.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDbVersions = oci.Database.getDbVersions({
 *     compartmentId: _var.compartment_id,
 *     dbSystemId: oci_database_db_system.test_db_system.id,
 *     dbSystemShape: _var.db_version_db_system_shape,
 *     isDatabaseSoftwareImageSupported: _var.db_version_is_database_software_image_supported,
 *     isUpgradeSupported: _var.db_version_is_upgrade_supported,
 *     storageManagement: _var.db_version_storage_management,
 * });
 * ```
 */
export function getDbVersions(args: GetDbVersionsArgs, opts?: pulumi.InvokeOptions): Promise<GetDbVersionsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Database/getDbVersions:getDbVersions", {
        "compartmentId": args.compartmentId,
        "dbSystemId": args.dbSystemId,
        "dbSystemShape": args.dbSystemShape,
        "filters": args.filters,
        "isDatabaseSoftwareImageSupported": args.isDatabaseSoftwareImageSupported,
        "isUpgradeSupported": args.isUpgradeSupported,
        "storageManagement": args.storageManagement,
    }, opts);
}

/**
 * A collection of arguments for invoking getDbVersions.
 */
export interface GetDbVersionsArgs {
    /**
     * The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    compartmentId: string;
    /**
     * The DB system [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). If provided, filters the results to the set of database versions which are supported for the DB system.
     */
    dbSystemId?: string;
    /**
     * If provided, filters the results to the set of database versions which are supported for the given shape.
     */
    dbSystemShape?: string;
    filters?: inputs.Database.GetDbVersionsFilter[];
    /**
     * If true, filters the results to the set of Oracle Database versions that are supported for Oracle Cloud Infrastructure database software images.
     */
    isDatabaseSoftwareImageSupported?: boolean;
    /**
     * If provided, filters the results to the set of database versions which are supported for Upgrade.
     */
    isUpgradeSupported?: boolean;
    /**
     * The DB system storage management option. Used to list database versions available for that storage manager. Valid values are `ASM` and `LVM`.
     * * ASM specifies Oracle Automatic Storage Management
     * * LVM specifies logical volume manager, sometimes called logical disk manager.
     */
    storageManagement?: string;
}

/**
 * A collection of values returned by getDbVersions.
 */
export interface GetDbVersionsResult {
    readonly compartmentId: string;
    readonly dbSystemId?: string;
    readonly dbSystemShape?: string;
    /**
     * The list of db_versions.
     */
    readonly dbVersions?: outputs.Database.GetDbVersionsDbVersion[];
    readonly filters?: outputs.Database.GetDbVersionsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id?: string;
    readonly isDatabaseSoftwareImageSupported?: boolean;
    /**
     * True if this version of the Oracle Database software is supported for Upgrade.
     */
    readonly isUpgradeSupported?: boolean;
    readonly storageManagement?: string;
}
/**
 * This data source provides the list of Db Versions in Oracle Cloud Infrastructure Database service.
 *
 * Gets a list of supported Oracle Database versions.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDbVersions = oci.Database.getDbVersions({
 *     compartmentId: _var.compartment_id,
 *     dbSystemId: oci_database_db_system.test_db_system.id,
 *     dbSystemShape: _var.db_version_db_system_shape,
 *     isDatabaseSoftwareImageSupported: _var.db_version_is_database_software_image_supported,
 *     isUpgradeSupported: _var.db_version_is_upgrade_supported,
 *     storageManagement: _var.db_version_storage_management,
 * });
 * ```
 */
export function getDbVersionsOutput(args: GetDbVersionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDbVersionsResult> {
    return pulumi.output(args).apply((a: any) => getDbVersions(a, opts))
}

/**
 * A collection of arguments for invoking getDbVersions.
 */
export interface GetDbVersionsOutputArgs {
    /**
     * The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    compartmentId: pulumi.Input<string>;
    /**
     * The DB system [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). If provided, filters the results to the set of database versions which are supported for the DB system.
     */
    dbSystemId?: pulumi.Input<string>;
    /**
     * If provided, filters the results to the set of database versions which are supported for the given shape.
     */
    dbSystemShape?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Database.GetDbVersionsFilterArgs>[]>;
    /**
     * If true, filters the results to the set of Oracle Database versions that are supported for Oracle Cloud Infrastructure database software images.
     */
    isDatabaseSoftwareImageSupported?: pulumi.Input<boolean>;
    /**
     * If provided, filters the results to the set of database versions which are supported for Upgrade.
     */
    isUpgradeSupported?: pulumi.Input<boolean>;
    /**
     * The DB system storage management option. Used to list database versions available for that storage manager. Valid values are `ASM` and `LVM`.
     * * ASM specifies Oracle Automatic Storage Management
     * * LVM specifies logical volume manager, sometimes called logical disk manager.
     */
    storageManagement?: pulumi.Input<string>;
}
