// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./autonomousContainerDatabase";
export * from "./autonomousContainerDatabaseDataguardAssociation";
export * from "./autonomousContainerDatabaseDataguardAssociationOperation";
export * from "./autonomousDatabase";
export * from "./autonomousDatabaseBackup";
export * from "./autonomousDatabaseInstanceWalletManagement";
export * from "./autonomousDatabaseRegionalWalletManagement";
export * from "./autonomousDatabaseWallet";
export * from "./autonomousExadataInfrastructure";
export * from "./autonomousVmCluster";
export * from "./backup";
export * from "./backupDestination";
export * from "./cloudAutonomousVmCluster";
export * from "./cloudDatabaseManagement";
export * from "./cloudExadataInfrastructure";
export * from "./cloudVmCluster";
export * from "./cloudVmClusterIormConfig";
export * from "./dataGuardAssociation";
export * from "./database";
export * from "./databaseSoftwareImage";
export * from "./databaseUpgrade";
export * from "./dbHome";
export * from "./dbNodeConsoleConnection";
export * from "./dbSystem";
export * from "./dbSystemsUpgrade";
export * from "./exadataInfrastructure";
export * from "./exadataInfrastructureStorage";
export * from "./exadataIormConfig";
export * from "./externalContainerDatabase";
export * from "./externalContainerDatabaseManagement";
export * from "./externalContainerDatabasesStackMonitoring";
export * from "./externalDatabaseConnector";
export * from "./externalNonContainerDatabase";
export * from "./externalNonContainerDatabaseManagement";
export * from "./externalNonContainerDatabaseOperationsInsightsManagement";
export * from "./externalNonContainerDatabasesStackMonitoring";
export * from "./externalPluggableDatabase";
export * from "./externalPluggableDatabaseManagement";
export * from "./externalPluggableDatabaseOperationsInsightsManagement";
export * from "./externalPluggableDatabasesStackMonitoring";
export * from "./getAutonomousCharacterSets";
export * from "./getAutonomousContainerDatabase";
export * from "./getAutonomousContainerDatabaseDataguardAssociation";
export * from "./getAutonomousContainerDatabaseDataguardAssociations";
export * from "./getAutonomousContainerDatabases";
export * from "./getAutonomousContainerPatches";
export * from "./getAutonomousDatabase";
export * from "./getAutonomousDatabaseBackup";
export * from "./getAutonomousDatabaseBackups";
export * from "./getAutonomousDatabaseDataguardAssociation";
export * from "./getAutonomousDatabaseDataguardAssociations";
export * from "./getAutonomousDatabaseInstanceWalletManagement";
export * from "./getAutonomousDatabaseRegionalWalletManagement";
export * from "./getAutonomousDatabaseWallet";
export * from "./getAutonomousDatabases";
export * from "./getAutonomousDatabasesClones";
export * from "./getAutonomousDbPreviewVersions";
export * from "./getAutonomousDbVersions";
export * from "./getAutonomousExadataInfrastructure";
export * from "./getAutonomousExadataInfrastructureOcpu";
export * from "./getAutonomousExadataInfrastructureShapes";
export * from "./getAutonomousExadataInfrastructures";
export * from "./getAutonomousPatch";
export * from "./getAutonomousVmCluster";
export * from "./getAutonomousVmClusters";
export * from "./getBackupDestination";
export * from "./getBackupDestinations";
export * from "./getBackups";
export * from "./getCloudAutonomousVmCluster";
export * from "./getCloudAutonomousVmClusters";
export * from "./getCloudExadataInfrastructure";
export * from "./getCloudExadataInfrastructures";
export * from "./getCloudVmCluster";
export * from "./getCloudVmClusterIormConfig";
export * from "./getCloudVmClusters";
export * from "./getDataGuardAssociation";
export * from "./getDataGuardAssociations";
export * from "./getDatabase";
export * from "./getDatabaseMaintenanceRunHistories";
export * from "./getDatabaseMaintenanceRunHistory";
export * from "./getDatabasePdbConversionHistoryEntries";
export * from "./getDatabasePdbConversionHistoryEntry";
export * from "./getDatabaseSoftwareImage";
export * from "./getDatabaseSoftwareImages";
export * from "./getDatabaseUpgradeHistoryEntries";
export * from "./getDatabaseUpgradeHistoryEntry";
export * from "./getDatabases";
export * from "./getDbHome";
export * from "./getDbHomePatchHistoryEntries";
export * from "./getDbHomePatches";
export * from "./getDbHomes";
export * from "./getDbNode";
export * from "./getDbNodeConsoleConnection";
export * from "./getDbNodeConsoleConnections";
export * from "./getDbNodes";
export * from "./getDbServer";
export * from "./getDbServers";
export * from "./getDbSystemComputePerformances";
export * from "./getDbSystemHistoryEntries";
export * from "./getDbSystemPatches";
export * from "./getDbSystemShapes";
export * from "./getDbSystemStoragePerformances";
export * from "./getDbSystems";
export * from "./getDbSystemsUpgradeHistoryEntries";
export * from "./getDbSystemsUpgradeHistoryEntry";
export * from "./getDbVersions";
export * from "./getExadataInfrastructure";
export * from "./getExadataInfrastructureDownloadConfigFile";
export * from "./getExadataInfrastructures";
export * from "./getExadataIormConfig";
export * from "./getExternalContainerDatabase";
export * from "./getExternalContainerDatabases";
export * from "./getExternalDatabaseConnector";
export * from "./getExternalDatabaseConnectors";
export * from "./getExternalNonContainerDatabase";
export * from "./getExternalNonContainerDatabases";
export * from "./getExternalPluggableDatabase";
export * from "./getExternalPluggableDatabases";
export * from "./getFlexComponents";
export * from "./getGiVersions";
export * from "./getInfrastructureTargetVersion";
export * from "./getKeyStore";
export * from "./getKeyStores";
export * from "./getMaintenanceRun";
export * from "./getMaintenanceRuns";
export * from "./getManagedPreferredCredential";
export * from "./getManagedPreferredCredentials";
export * from "./getPluggableDatabase";
export * from "./getPluggableDatabases";
export * from "./getVmCluster";
export * from "./getVmClusterNetwork";
export * from "./getVmClusterNetworkDownloadConfigFile";
export * from "./getVmClusterNetworks";
export * from "./getVmClusterPatch";
export * from "./getVmClusterPatchHistoryEntries";
export * from "./getVmClusterPatchHistoryEntry";
export * from "./getVmClusterPatches";
export * from "./getVmClusterRecommendedNetwork";
export * from "./getVmClusterUpdate";
export * from "./getVmClusterUpdateHistoryEntries";
export * from "./getVmClusterUpdateHistoryEntry";
export * from "./getVmClusterUpdates";
export * from "./getVmClusters";
export * from "./keyStore";
export * from "./maintenanceRun";
export * from "./pluggableDatabase";
export * from "./pluggableDatabasesLocalClone";
export * from "./pluggableDatabasesRemoteClone";
export * from "./vmCluster";
export * from "./vmClusterAddVirtualNetwork";
export * from "./vmClusterNetwork";
export * from "./vmClusterRemoveVirtualMachine";

// Import resources to register:
import { AutonomousContainerDatabase } from "./autonomousContainerDatabase";
import { AutonomousContainerDatabaseDataguardAssociation } from "./autonomousContainerDatabaseDataguardAssociation";
import { AutonomousContainerDatabaseDataguardAssociationOperation } from "./autonomousContainerDatabaseDataguardAssociationOperation";
import { AutonomousDatabase } from "./autonomousDatabase";
import { AutonomousDatabaseBackup } from "./autonomousDatabaseBackup";
import { AutonomousDatabaseInstanceWalletManagement } from "./autonomousDatabaseInstanceWalletManagement";
import { AutonomousDatabaseRegionalWalletManagement } from "./autonomousDatabaseRegionalWalletManagement";
import { AutonomousDatabaseWallet } from "./autonomousDatabaseWallet";
import { AutonomousExadataInfrastructure } from "./autonomousExadataInfrastructure";
import { AutonomousVmCluster } from "./autonomousVmCluster";
import { Backup } from "./backup";
import { BackupDestination } from "./backupDestination";
import { CloudAutonomousVmCluster } from "./cloudAutonomousVmCluster";
import { CloudDatabaseManagement } from "./cloudDatabaseManagement";
import { CloudExadataInfrastructure } from "./cloudExadataInfrastructure";
import { CloudVmCluster } from "./cloudVmCluster";
import { CloudVmClusterIormConfig } from "./cloudVmClusterIormConfig";
import { DataGuardAssociation } from "./dataGuardAssociation";
import { Database } from "./database";
import { DatabaseSoftwareImage } from "./databaseSoftwareImage";
import { DatabaseUpgrade } from "./databaseUpgrade";
import { DbHome } from "./dbHome";
import { DbNodeConsoleConnection } from "./dbNodeConsoleConnection";
import { DbSystem } from "./dbSystem";
import { DbSystemsUpgrade } from "./dbSystemsUpgrade";
import { ExadataInfrastructure } from "./exadataInfrastructure";
import { ExadataInfrastructureStorage } from "./exadataInfrastructureStorage";
import { ExadataIormConfig } from "./exadataIormConfig";
import { ExternalContainerDatabase } from "./externalContainerDatabase";
import { ExternalContainerDatabaseManagement } from "./externalContainerDatabaseManagement";
import { ExternalContainerDatabasesStackMonitoring } from "./externalContainerDatabasesStackMonitoring";
import { ExternalDatabaseConnector } from "./externalDatabaseConnector";
import { ExternalNonContainerDatabase } from "./externalNonContainerDatabase";
import { ExternalNonContainerDatabaseManagement } from "./externalNonContainerDatabaseManagement";
import { ExternalNonContainerDatabaseOperationsInsightsManagement } from "./externalNonContainerDatabaseOperationsInsightsManagement";
import { ExternalNonContainerDatabasesStackMonitoring } from "./externalNonContainerDatabasesStackMonitoring";
import { ExternalPluggableDatabase } from "./externalPluggableDatabase";
import { ExternalPluggableDatabaseManagement } from "./externalPluggableDatabaseManagement";
import { ExternalPluggableDatabaseOperationsInsightsManagement } from "./externalPluggableDatabaseOperationsInsightsManagement";
import { ExternalPluggableDatabasesStackMonitoring } from "./externalPluggableDatabasesStackMonitoring";
import { KeyStore } from "./keyStore";
import { MaintenanceRun } from "./maintenanceRun";
import { PluggableDatabase } from "./pluggableDatabase";
import { PluggableDatabasesLocalClone } from "./pluggableDatabasesLocalClone";
import { PluggableDatabasesRemoteClone } from "./pluggableDatabasesRemoteClone";
import { VmCluster } from "./vmCluster";
import { VmClusterAddVirtualNetwork } from "./vmClusterAddVirtualNetwork";
import { VmClusterNetwork } from "./vmClusterNetwork";
import { VmClusterRemoveVirtualMachine } from "./vmClusterRemoveVirtualMachine";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:Database/autonomousContainerDatabase:AutonomousContainerDatabase":
                return new AutonomousContainerDatabase(name, <any>undefined, { urn })
            case "oci:Database/autonomousContainerDatabaseDataguardAssociation:AutonomousContainerDatabaseDataguardAssociation":
                return new AutonomousContainerDatabaseDataguardAssociation(name, <any>undefined, { urn })
            case "oci:Database/autonomousContainerDatabaseDataguardAssociationOperation:AutonomousContainerDatabaseDataguardAssociationOperation":
                return new AutonomousContainerDatabaseDataguardAssociationOperation(name, <any>undefined, { urn })
            case "oci:Database/autonomousDatabase:AutonomousDatabase":
                return new AutonomousDatabase(name, <any>undefined, { urn })
            case "oci:Database/autonomousDatabaseBackup:AutonomousDatabaseBackup":
                return new AutonomousDatabaseBackup(name, <any>undefined, { urn })
            case "oci:Database/autonomousDatabaseInstanceWalletManagement:AutonomousDatabaseInstanceWalletManagement":
                return new AutonomousDatabaseInstanceWalletManagement(name, <any>undefined, { urn })
            case "oci:Database/autonomousDatabaseRegionalWalletManagement:AutonomousDatabaseRegionalWalletManagement":
                return new AutonomousDatabaseRegionalWalletManagement(name, <any>undefined, { urn })
            case "oci:Database/autonomousDatabaseWallet:AutonomousDatabaseWallet":
                return new AutonomousDatabaseWallet(name, <any>undefined, { urn })
            case "oci:Database/autonomousExadataInfrastructure:AutonomousExadataInfrastructure":
                return new AutonomousExadataInfrastructure(name, <any>undefined, { urn })
            case "oci:Database/autonomousVmCluster:AutonomousVmCluster":
                return new AutonomousVmCluster(name, <any>undefined, { urn })
            case "oci:Database/backup:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "oci:Database/backupDestination:BackupDestination":
                return new BackupDestination(name, <any>undefined, { urn })
            case "oci:Database/cloudAutonomousVmCluster:CloudAutonomousVmCluster":
                return new CloudAutonomousVmCluster(name, <any>undefined, { urn })
            case "oci:Database/cloudDatabaseManagement:CloudDatabaseManagement":
                return new CloudDatabaseManagement(name, <any>undefined, { urn })
            case "oci:Database/cloudExadataInfrastructure:CloudExadataInfrastructure":
                return new CloudExadataInfrastructure(name, <any>undefined, { urn })
            case "oci:Database/cloudVmCluster:CloudVmCluster":
                return new CloudVmCluster(name, <any>undefined, { urn })
            case "oci:Database/cloudVmClusterIormConfig:CloudVmClusterIormConfig":
                return new CloudVmClusterIormConfig(name, <any>undefined, { urn })
            case "oci:Database/dataGuardAssociation:DataGuardAssociation":
                return new DataGuardAssociation(name, <any>undefined, { urn })
            case "oci:Database/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "oci:Database/databaseSoftwareImage:DatabaseSoftwareImage":
                return new DatabaseSoftwareImage(name, <any>undefined, { urn })
            case "oci:Database/databaseUpgrade:DatabaseUpgrade":
                return new DatabaseUpgrade(name, <any>undefined, { urn })
            case "oci:Database/dbHome:DbHome":
                return new DbHome(name, <any>undefined, { urn })
            case "oci:Database/dbNodeConsoleConnection:DbNodeConsoleConnection":
                return new DbNodeConsoleConnection(name, <any>undefined, { urn })
            case "oci:Database/dbSystem:DbSystem":
                return new DbSystem(name, <any>undefined, { urn })
            case "oci:Database/dbSystemsUpgrade:DbSystemsUpgrade":
                return new DbSystemsUpgrade(name, <any>undefined, { urn })
            case "oci:Database/exadataInfrastructure:ExadataInfrastructure":
                return new ExadataInfrastructure(name, <any>undefined, { urn })
            case "oci:Database/exadataInfrastructureStorage:ExadataInfrastructureStorage":
                return new ExadataInfrastructureStorage(name, <any>undefined, { urn })
            case "oci:Database/exadataIormConfig:ExadataIormConfig":
                return new ExadataIormConfig(name, <any>undefined, { urn })
            case "oci:Database/externalContainerDatabase:ExternalContainerDatabase":
                return new ExternalContainerDatabase(name, <any>undefined, { urn })
            case "oci:Database/externalContainerDatabaseManagement:ExternalContainerDatabaseManagement":
                return new ExternalContainerDatabaseManagement(name, <any>undefined, { urn })
            case "oci:Database/externalContainerDatabasesStackMonitoring:ExternalContainerDatabasesStackMonitoring":
                return new ExternalContainerDatabasesStackMonitoring(name, <any>undefined, { urn })
            case "oci:Database/externalDatabaseConnector:ExternalDatabaseConnector":
                return new ExternalDatabaseConnector(name, <any>undefined, { urn })
            case "oci:Database/externalNonContainerDatabase:ExternalNonContainerDatabase":
                return new ExternalNonContainerDatabase(name, <any>undefined, { urn })
            case "oci:Database/externalNonContainerDatabaseManagement:ExternalNonContainerDatabaseManagement":
                return new ExternalNonContainerDatabaseManagement(name, <any>undefined, { urn })
            case "oci:Database/externalNonContainerDatabaseOperationsInsightsManagement:ExternalNonContainerDatabaseOperationsInsightsManagement":
                return new ExternalNonContainerDatabaseOperationsInsightsManagement(name, <any>undefined, { urn })
            case "oci:Database/externalNonContainerDatabasesStackMonitoring:ExternalNonContainerDatabasesStackMonitoring":
                return new ExternalNonContainerDatabasesStackMonitoring(name, <any>undefined, { urn })
            case "oci:Database/externalPluggableDatabase:ExternalPluggableDatabase":
                return new ExternalPluggableDatabase(name, <any>undefined, { urn })
            case "oci:Database/externalPluggableDatabaseManagement:ExternalPluggableDatabaseManagement":
                return new ExternalPluggableDatabaseManagement(name, <any>undefined, { urn })
            case "oci:Database/externalPluggableDatabaseOperationsInsightsManagement:ExternalPluggableDatabaseOperationsInsightsManagement":
                return new ExternalPluggableDatabaseOperationsInsightsManagement(name, <any>undefined, { urn })
            case "oci:Database/externalPluggableDatabasesStackMonitoring:ExternalPluggableDatabasesStackMonitoring":
                return new ExternalPluggableDatabasesStackMonitoring(name, <any>undefined, { urn })
            case "oci:Database/keyStore:KeyStore":
                return new KeyStore(name, <any>undefined, { urn })
            case "oci:Database/maintenanceRun:MaintenanceRun":
                return new MaintenanceRun(name, <any>undefined, { urn })
            case "oci:Database/pluggableDatabase:PluggableDatabase":
                return new PluggableDatabase(name, <any>undefined, { urn })
            case "oci:Database/pluggableDatabasesLocalClone:PluggableDatabasesLocalClone":
                return new PluggableDatabasesLocalClone(name, <any>undefined, { urn })
            case "oci:Database/pluggableDatabasesRemoteClone:PluggableDatabasesRemoteClone":
                return new PluggableDatabasesRemoteClone(name, <any>undefined, { urn })
            case "oci:Database/vmCluster:VmCluster":
                return new VmCluster(name, <any>undefined, { urn })
            case "oci:Database/vmClusterAddVirtualNetwork:VmClusterAddVirtualNetwork":
                return new VmClusterAddVirtualNetwork(name, <any>undefined, { urn })
            case "oci:Database/vmClusterNetwork:VmClusterNetwork":
                return new VmClusterNetwork(name, <any>undefined, { urn })
            case "oci:Database/vmClusterRemoveVirtualMachine:VmClusterRemoveVirtualMachine":
                return new VmClusterRemoveVirtualMachine(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "Database/autonomousContainerDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "Database/autonomousContainerDatabaseDataguardAssociation", _module)
pulumi.runtime.registerResourceModule("oci", "Database/autonomousContainerDatabaseDataguardAssociationOperation", _module)
pulumi.runtime.registerResourceModule("oci", "Database/autonomousDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "Database/autonomousDatabaseBackup", _module)
pulumi.runtime.registerResourceModule("oci", "Database/autonomousDatabaseInstanceWalletManagement", _module)
pulumi.runtime.registerResourceModule("oci", "Database/autonomousDatabaseRegionalWalletManagement", _module)
pulumi.runtime.registerResourceModule("oci", "Database/autonomousDatabaseWallet", _module)
pulumi.runtime.registerResourceModule("oci", "Database/autonomousExadataInfrastructure", _module)
pulumi.runtime.registerResourceModule("oci", "Database/autonomousVmCluster", _module)
pulumi.runtime.registerResourceModule("oci", "Database/backup", _module)
pulumi.runtime.registerResourceModule("oci", "Database/backupDestination", _module)
pulumi.runtime.registerResourceModule("oci", "Database/cloudAutonomousVmCluster", _module)
pulumi.runtime.registerResourceModule("oci", "Database/cloudDatabaseManagement", _module)
pulumi.runtime.registerResourceModule("oci", "Database/cloudExadataInfrastructure", _module)
pulumi.runtime.registerResourceModule("oci", "Database/cloudVmCluster", _module)
pulumi.runtime.registerResourceModule("oci", "Database/cloudVmClusterIormConfig", _module)
pulumi.runtime.registerResourceModule("oci", "Database/dataGuardAssociation", _module)
pulumi.runtime.registerResourceModule("oci", "Database/database", _module)
pulumi.runtime.registerResourceModule("oci", "Database/databaseSoftwareImage", _module)
pulumi.runtime.registerResourceModule("oci", "Database/databaseUpgrade", _module)
pulumi.runtime.registerResourceModule("oci", "Database/dbHome", _module)
pulumi.runtime.registerResourceModule("oci", "Database/dbNodeConsoleConnection", _module)
pulumi.runtime.registerResourceModule("oci", "Database/dbSystem", _module)
pulumi.runtime.registerResourceModule("oci", "Database/dbSystemsUpgrade", _module)
pulumi.runtime.registerResourceModule("oci", "Database/exadataInfrastructure", _module)
pulumi.runtime.registerResourceModule("oci", "Database/exadataInfrastructureStorage", _module)
pulumi.runtime.registerResourceModule("oci", "Database/exadataIormConfig", _module)
pulumi.runtime.registerResourceModule("oci", "Database/externalContainerDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "Database/externalContainerDatabaseManagement", _module)
pulumi.runtime.registerResourceModule("oci", "Database/externalContainerDatabasesStackMonitoring", _module)
pulumi.runtime.registerResourceModule("oci", "Database/externalDatabaseConnector", _module)
pulumi.runtime.registerResourceModule("oci", "Database/externalNonContainerDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "Database/externalNonContainerDatabaseManagement", _module)
pulumi.runtime.registerResourceModule("oci", "Database/externalNonContainerDatabaseOperationsInsightsManagement", _module)
pulumi.runtime.registerResourceModule("oci", "Database/externalNonContainerDatabasesStackMonitoring", _module)
pulumi.runtime.registerResourceModule("oci", "Database/externalPluggableDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "Database/externalPluggableDatabaseManagement", _module)
pulumi.runtime.registerResourceModule("oci", "Database/externalPluggableDatabaseOperationsInsightsManagement", _module)
pulumi.runtime.registerResourceModule("oci", "Database/externalPluggableDatabasesStackMonitoring", _module)
pulumi.runtime.registerResourceModule("oci", "Database/keyStore", _module)
pulumi.runtime.registerResourceModule("oci", "Database/maintenanceRun", _module)
pulumi.runtime.registerResourceModule("oci", "Database/pluggableDatabase", _module)
pulumi.runtime.registerResourceModule("oci", "Database/pluggableDatabasesLocalClone", _module)
pulumi.runtime.registerResourceModule("oci", "Database/pluggableDatabasesRemoteClone", _module)
pulumi.runtime.registerResourceModule("oci", "Database/vmCluster", _module)
pulumi.runtime.registerResourceModule("oci", "Database/vmClusterAddVirtualNetwork", _module)
pulumi.runtime.registerResourceModule("oci", "Database/vmClusterNetwork", _module)
pulumi.runtime.registerResourceModule("oci", "Database/vmClusterRemoveVirtualMachine", _module)
