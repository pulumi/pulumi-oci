// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Maintenance Run resource in Oracle Cloud Infrastructure Database service.
 *
 * Updates the properties of a maintenance run, such as the state of a maintenance run.
 *
 * ## Import
 *
 * MaintenanceRuns can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:Database/maintenanceRun:MaintenanceRun test_maintenance_run "id"
 * ```
 */
export class MaintenanceRun extends pulumi.CustomResource {
    /**
     * Get an existing MaintenanceRun resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MaintenanceRunState, opts?: pulumi.CustomResourceOptions): MaintenanceRun {
        return new MaintenanceRun(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Database/maintenanceRun:MaintenanceRun';

    /**
     * Returns true if the given object is an instance of MaintenanceRun.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MaintenanceRun {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MaintenanceRun.__pulumiType;
    }

    /**
     * The OCID of the compartment.
     */
    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    /**
     * (Updatable) The current custom action timeout between the current database servers during waiting state in addition to custom action timeout, from 0 (zero) to 30 minutes.
     */
    public readonly currentCustomActionTimeoutInMins!: pulumi.Output<number>;
    /**
     * The name of the current infrastruture component that is getting patched.
     */
    public /*out*/ readonly currentPatchingComponent!: pulumi.Output<string>;
    /**
     * (Updatable) Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes from 15 to 120.
     */
    public readonly customActionTimeoutInMins!: pulumi.Output<number>;
    /**
     * Description of the maintenance run.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * The user-friendly name for the maintenance run.
     */
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    /**
     * The estimated start time of the next infrastruture component patching operation.
     */
    public /*out*/ readonly estimatedComponentPatchingStartTime!: pulumi.Output<string>;
    /**
     * The estimated total time required in minutes for all patching operations (database server, storage server, and network switch patching).
     */
    public /*out*/ readonly estimatedPatchingTimes!: pulumi.Output<outputs.Database.MaintenanceRunEstimatedPatchingTime[]>;
    /**
     * (Updatable) If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
     */
    public readonly isCustomActionTimeoutEnabled!: pulumi.Output<boolean>;
    /**
     * (Updatable) If `FALSE`, skips the maintenance run.
     */
    public readonly isEnabled!: pulumi.Output<boolean>;
    /**
     * (Updatable) If set to `TRUE`, starts patching immediately.
     */
    public readonly isPatchNowEnabled!: pulumi.Output<boolean>;
    /**
     * (Updatable) If true, then the patching is resumed and the next component will be patched immediately.
     */
    public readonly isResumePatching!: pulumi.Output<boolean>;
    /**
     * Additional information about the current lifecycle state.
     */
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    /**
     * The maintenance run OCID.
     */
    public readonly maintenanceRunId!: pulumi.Output<string>;
    /**
     * Maintenance sub-type.
     */
    public /*out*/ readonly maintenanceSubtype!: pulumi.Output<string>;
    /**
     * Maintenance type.
     */
    public /*out*/ readonly maintenanceType!: pulumi.Output<string>;
    /**
     * Contain the patch failure count.
     */
    public /*out*/ readonly patchFailureCount!: pulumi.Output<number>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the patch to be applied in the maintenance run.
     */
    public readonly patchId!: pulumi.Output<string>;
    /**
     * The time when the patching operation ended.
     */
    public /*out*/ readonly patchingEndTime!: pulumi.Output<string>;
    /**
     * (Updatable) Cloud Exadata infrastructure node patching method, either "ROLLING" or "NONROLLING". Default value is ROLLING.
     *
     * *IMPORTANT*: Non-rolling infrastructure patching involves system down time. See [Oracle-Managed Infrastructure Maintenance Updates](https://docs.cloud.oracle.com/iaas/Content/Database/Concepts/examaintenance.htm#Oracle) for more information.
     */
    public readonly patchingMode!: pulumi.Output<string>;
    /**
     * The time when the patching operation started.
     */
    public /*out*/ readonly patchingStartTime!: pulumi.Output<string>;
    /**
     * The status of the patching operation.
     */
    public /*out*/ readonly patchingStatus!: pulumi.Output<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association's peer container database.
     */
    public /*out*/ readonly peerMaintenanceRunId!: pulumi.Output<string>;
    /**
     * The current state of the maintenance run. For Autonomous Database on shared Exadata infrastructure, valid states are IN_PROGRESS, SUCCEEDED and FAILED.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * (Updatable) The target database server system software version for the patching operation.
     */
    public readonly targetDbServerVersion!: pulumi.Output<string>;
    /**
     * The ID of the target resource on which the maintenance run occurs.
     */
    public /*out*/ readonly targetResourceId!: pulumi.Output<string>;
    /**
     * The type of the target resource on which the maintenance run occurs.
     */
    public /*out*/ readonly targetResourceType!: pulumi.Output<string>;
    /**
     * (Updatable) The target storage cell system software version for the patching operation.
     */
    public readonly targetStorageServerVersion!: pulumi.Output<string>;
    /**
     * The date and time the maintenance run was completed.
     */
    public /*out*/ readonly timeEnded!: pulumi.Output<string>;
    /**
     * (Updatable) The scheduled date and time of the maintenance run to update.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly timeScheduled!: pulumi.Output<string>;
    /**
     * The date and time the maintenance run starts.
     */
    public /*out*/ readonly timeStarted!: pulumi.Output<string>;

    /**
     * Create a MaintenanceRun resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MaintenanceRunArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MaintenanceRunArgs | MaintenanceRunState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MaintenanceRunState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["currentCustomActionTimeoutInMins"] = state ? state.currentCustomActionTimeoutInMins : undefined;
            resourceInputs["currentPatchingComponent"] = state ? state.currentPatchingComponent : undefined;
            resourceInputs["customActionTimeoutInMins"] = state ? state.customActionTimeoutInMins : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["estimatedComponentPatchingStartTime"] = state ? state.estimatedComponentPatchingStartTime : undefined;
            resourceInputs["estimatedPatchingTimes"] = state ? state.estimatedPatchingTimes : undefined;
            resourceInputs["isCustomActionTimeoutEnabled"] = state ? state.isCustomActionTimeoutEnabled : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["isPatchNowEnabled"] = state ? state.isPatchNowEnabled : undefined;
            resourceInputs["isResumePatching"] = state ? state.isResumePatching : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["maintenanceRunId"] = state ? state.maintenanceRunId : undefined;
            resourceInputs["maintenanceSubtype"] = state ? state.maintenanceSubtype : undefined;
            resourceInputs["maintenanceType"] = state ? state.maintenanceType : undefined;
            resourceInputs["patchFailureCount"] = state ? state.patchFailureCount : undefined;
            resourceInputs["patchId"] = state ? state.patchId : undefined;
            resourceInputs["patchingEndTime"] = state ? state.patchingEndTime : undefined;
            resourceInputs["patchingMode"] = state ? state.patchingMode : undefined;
            resourceInputs["patchingStartTime"] = state ? state.patchingStartTime : undefined;
            resourceInputs["patchingStatus"] = state ? state.patchingStatus : undefined;
            resourceInputs["peerMaintenanceRunId"] = state ? state.peerMaintenanceRunId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["targetDbServerVersion"] = state ? state.targetDbServerVersion : undefined;
            resourceInputs["targetResourceId"] = state ? state.targetResourceId : undefined;
            resourceInputs["targetResourceType"] = state ? state.targetResourceType : undefined;
            resourceInputs["targetStorageServerVersion"] = state ? state.targetStorageServerVersion : undefined;
            resourceInputs["timeEnded"] = state ? state.timeEnded : undefined;
            resourceInputs["timeScheduled"] = state ? state.timeScheduled : undefined;
            resourceInputs["timeStarted"] = state ? state.timeStarted : undefined;
        } else {
            const args = argsOrState as MaintenanceRunArgs | undefined;
            if ((!args || args.maintenanceRunId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maintenanceRunId'");
            }
            resourceInputs["currentCustomActionTimeoutInMins"] = args ? args.currentCustomActionTimeoutInMins : undefined;
            resourceInputs["customActionTimeoutInMins"] = args ? args.customActionTimeoutInMins : undefined;
            resourceInputs["isCustomActionTimeoutEnabled"] = args ? args.isCustomActionTimeoutEnabled : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["isPatchNowEnabled"] = args ? args.isPatchNowEnabled : undefined;
            resourceInputs["isResumePatching"] = args ? args.isResumePatching : undefined;
            resourceInputs["maintenanceRunId"] = args ? args.maintenanceRunId : undefined;
            resourceInputs["patchId"] = args ? args.patchId : undefined;
            resourceInputs["patchingMode"] = args ? args.patchingMode : undefined;
            resourceInputs["targetDbServerVersion"] = args ? args.targetDbServerVersion : undefined;
            resourceInputs["targetStorageServerVersion"] = args ? args.targetStorageServerVersion : undefined;
            resourceInputs["timeScheduled"] = args ? args.timeScheduled : undefined;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["currentPatchingComponent"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["estimatedComponentPatchingStartTime"] = undefined /*out*/;
            resourceInputs["estimatedPatchingTimes"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["maintenanceSubtype"] = undefined /*out*/;
            resourceInputs["maintenanceType"] = undefined /*out*/;
            resourceInputs["patchFailureCount"] = undefined /*out*/;
            resourceInputs["patchingEndTime"] = undefined /*out*/;
            resourceInputs["patchingStartTime"] = undefined /*out*/;
            resourceInputs["patchingStatus"] = undefined /*out*/;
            resourceInputs["peerMaintenanceRunId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["targetResourceId"] = undefined /*out*/;
            resourceInputs["targetResourceType"] = undefined /*out*/;
            resourceInputs["timeEnded"] = undefined /*out*/;
            resourceInputs["timeStarted"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MaintenanceRun.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MaintenanceRun resources.
 */
export interface MaintenanceRunState {
    /**
     * The OCID of the compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) The current custom action timeout between the current database servers during waiting state in addition to custom action timeout, from 0 (zero) to 30 minutes.
     */
    currentCustomActionTimeoutInMins?: pulumi.Input<number>;
    /**
     * The name of the current infrastruture component that is getting patched.
     */
    currentPatchingComponent?: pulumi.Input<string>;
    /**
     * (Updatable) Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes from 15 to 120.
     */
    customActionTimeoutInMins?: pulumi.Input<number>;
    /**
     * Description of the maintenance run.
     */
    description?: pulumi.Input<string>;
    /**
     * The user-friendly name for the maintenance run.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The estimated start time of the next infrastruture component patching operation.
     */
    estimatedComponentPatchingStartTime?: pulumi.Input<string>;
    /**
     * The estimated total time required in minutes for all patching operations (database server, storage server, and network switch patching).
     */
    estimatedPatchingTimes?: pulumi.Input<pulumi.Input<inputs.Database.MaintenanceRunEstimatedPatchingTime>[]>;
    /**
     * (Updatable) If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
     */
    isCustomActionTimeoutEnabled?: pulumi.Input<boolean>;
    /**
     * (Updatable) If `FALSE`, skips the maintenance run.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * (Updatable) If set to `TRUE`, starts patching immediately.
     */
    isPatchNowEnabled?: pulumi.Input<boolean>;
    /**
     * (Updatable) If true, then the patching is resumed and the next component will be patched immediately.
     */
    isResumePatching?: pulumi.Input<boolean>;
    /**
     * Additional information about the current lifecycle state.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * The maintenance run OCID.
     */
    maintenanceRunId?: pulumi.Input<string>;
    /**
     * Maintenance sub-type.
     */
    maintenanceSubtype?: pulumi.Input<string>;
    /**
     * Maintenance type.
     */
    maintenanceType?: pulumi.Input<string>;
    /**
     * Contain the patch failure count.
     */
    patchFailureCount?: pulumi.Input<number>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the patch to be applied in the maintenance run.
     */
    patchId?: pulumi.Input<string>;
    /**
     * The time when the patching operation ended.
     */
    patchingEndTime?: pulumi.Input<string>;
    /**
     * (Updatable) Cloud Exadata infrastructure node patching method, either "ROLLING" or "NONROLLING". Default value is ROLLING.
     *
     * *IMPORTANT*: Non-rolling infrastructure patching involves system down time. See [Oracle-Managed Infrastructure Maintenance Updates](https://docs.cloud.oracle.com/iaas/Content/Database/Concepts/examaintenance.htm#Oracle) for more information.
     */
    patchingMode?: pulumi.Input<string>;
    /**
     * The time when the patching operation started.
     */
    patchingStartTime?: pulumi.Input<string>;
    /**
     * The status of the patching operation.
     */
    patchingStatus?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association's peer container database.
     */
    peerMaintenanceRunId?: pulumi.Input<string>;
    /**
     * The current state of the maintenance run. For Autonomous Database on shared Exadata infrastructure, valid states are IN_PROGRESS, SUCCEEDED and FAILED.
     */
    state?: pulumi.Input<string>;
    /**
     * (Updatable) The target database server system software version for the patching operation.
     */
    targetDbServerVersion?: pulumi.Input<string>;
    /**
     * The ID of the target resource on which the maintenance run occurs.
     */
    targetResourceId?: pulumi.Input<string>;
    /**
     * The type of the target resource on which the maintenance run occurs.
     */
    targetResourceType?: pulumi.Input<string>;
    /**
     * (Updatable) The target storage cell system software version for the patching operation.
     */
    targetStorageServerVersion?: pulumi.Input<string>;
    /**
     * The date and time the maintenance run was completed.
     */
    timeEnded?: pulumi.Input<string>;
    /**
     * (Updatable) The scheduled date and time of the maintenance run to update.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    timeScheduled?: pulumi.Input<string>;
    /**
     * The date and time the maintenance run starts.
     */
    timeStarted?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MaintenanceRun resource.
 */
export interface MaintenanceRunArgs {
    /**
     * (Updatable) The current custom action timeout between the current database servers during waiting state in addition to custom action timeout, from 0 (zero) to 30 minutes.
     */
    currentCustomActionTimeoutInMins?: pulumi.Input<number>;
    /**
     * (Updatable) Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes from 15 to 120.
     */
    customActionTimeoutInMins?: pulumi.Input<number>;
    /**
     * (Updatable) If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
     */
    isCustomActionTimeoutEnabled?: pulumi.Input<boolean>;
    /**
     * (Updatable) If `FALSE`, skips the maintenance run.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * (Updatable) If set to `TRUE`, starts patching immediately.
     */
    isPatchNowEnabled?: pulumi.Input<boolean>;
    /**
     * (Updatable) If true, then the patching is resumed and the next component will be patched immediately.
     */
    isResumePatching?: pulumi.Input<boolean>;
    /**
     * The maintenance run OCID.
     */
    maintenanceRunId: pulumi.Input<string>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the patch to be applied in the maintenance run.
     */
    patchId?: pulumi.Input<string>;
    /**
     * (Updatable) Cloud Exadata infrastructure node patching method, either "ROLLING" or "NONROLLING". Default value is ROLLING.
     *
     * *IMPORTANT*: Non-rolling infrastructure patching involves system down time. See [Oracle-Managed Infrastructure Maintenance Updates](https://docs.cloud.oracle.com/iaas/Content/Database/Concepts/examaintenance.htm#Oracle) for more information.
     */
    patchingMode?: pulumi.Input<string>;
    /**
     * (Updatable) The target database server system software version for the patching operation.
     */
    targetDbServerVersion?: pulumi.Input<string>;
    /**
     * (Updatable) The target storage cell system software version for the patching operation.
     */
    targetStorageServerVersion?: pulumi.Input<string>;
    /**
     * (Updatable) The scheduled date and time of the maintenance run to update.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    timeScheduled?: pulumi.Input<string>;
}
