// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Pluggable Database resource in Oracle Cloud Infrastructure Database service.
 *
 * Creates and starts a pluggable database in the specified container database.
 * Pluggable Database can be created using different operations (e.g. LocalClone, RemoteClone, Relocate ) with this API.
 * Use the [StartPluggableDatabase](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/PluggableDatabase/StartPluggableDatabase) and [StopPluggableDatabase](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/PluggableDatabase/StopPluggableDatabase) APIs to start and stop the pluggable database.
 *
 * ## Import
 *
 * PluggableDatabases can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:Database/pluggableDatabase:PluggableDatabase test_pluggable_database "id"
 * ```
 */
export class PluggableDatabase extends pulumi.CustomResource {
    /**
     * Get an existing PluggableDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PluggableDatabaseState, opts?: pulumi.CustomResourceOptions): PluggableDatabase {
        return new PluggableDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Database/pluggableDatabase:PluggableDatabase';

    /**
     * Returns true if the given object is an instance of PluggableDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PluggableDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PluggableDatabase.__pulumiType;
    }

    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    /**
     * Connection strings to connect to an Oracle Pluggable Database.
     */
    public /*out*/ readonly connectionStrings!: pulumi.Output<outputs.Database.PluggableDatabaseConnectionString[]>;
    /**
     * The DB system administrator password of the Container Database.
     */
    public readonly containerDatabaseAdminPassword!: pulumi.Output<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
     */
    public readonly containerDatabaseId!: pulumi.Output<string>;
    /**
     * (Updatable) An optional property when incremented triggers Convert To Regular. Could be set to any integer value.
     */
    public readonly convertToRegularTrigger!: pulumi.Output<number | undefined>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     */
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
     */
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
     */
    public /*out*/ readonly isRestricted!: pulumi.Output<boolean>;
    public readonly kmsKeyVersionId!: pulumi.Output<string | undefined>;
    /**
     * Detailed message for the lifecycle state.
     */
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    /**
     * The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     */
    public /*out*/ readonly openMode!: pulumi.Output<string>;
    /**
     * A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     *
     * Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
     */
    public readonly pdbAdminPassword!: pulumi.Output<string>;
    /**
     * The Pluggable Database creation type. Use `LOCAL_CLONE_PDB` for creating a new PDB using Local Clone on Source Pluggable Database. This will Clone and starts a pluggable database (PDB) in the same database (CDB) as the source PDB. The source PDB must be in the `READ_WRITE` openMode to perform the clone operation. isThinClone options are supported for Exadata VM cluster on Exascale Infrastructure, Exadata Cloud@Customer VM Cluster on Exadata Cloud@Customer infrastructure, and Exadata Cloud VM cluster on cloud Exadata infrastructure Use `REMOTE_CLONE_PDB` for creating a new PDB using Remote Clone on Source Pluggable Database. This will Clone a pluggable database (PDB) to a different database from the source PDB. The cloned PDB will be started upon completion of the clone operation. The source PDB must be in the `READ_WRITE` openMode when performing the clone. For Exadata Cloud@Customer instances, the source pluggable database (PDB) must be on the same Exadata Infrastructure as the target container database (CDB) to create a remote clone. isThinClone options are supported for Exadata VM cluster on Exascale Infrastructure, Exadata Cloud@Customer VM Cluster on Exadata Cloud@Customer infrastructure, and Exadata Cloud VM cluster on cloud Exadata infrastructure. Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
     */
    public readonly pdbCreationTypeDetails!: pulumi.Output<outputs.Database.PluggableDatabasePdbCreationTypeDetails>;
    /**
     * The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     */
    public readonly pdbName!: pulumi.Output<string>;
    /**
     * Pluggable Database Node Level Details. Example: [{"nodeName" : "node1", "openMode" : "READ_WRITE"}, {"nodeName" : "node2", "openMode" : "READ_ONLY"}]
     */
    public /*out*/ readonly pdbNodeLevelDetails!: pulumi.Output<outputs.Database.PluggableDatabasePdbNodeLevelDetail[]>;
    /**
     * The configuration of the Pluggable Database Management service.
     */
    public /*out*/ readonly pluggableDatabaseManagementConfigs!: pulumi.Output<outputs.Database.PluggableDatabasePluggableDatabaseManagementConfig[]>;
    /**
     * (Updatable) An optional property when incremented triggers Refresh. Could be set to any integer value.
     */
    public readonly refreshTrigger!: pulumi.Output<number | undefined>;
    /**
     * Pluggable Database Refreshable Clone Configuration.
     */
    public /*out*/ readonly refreshableCloneConfigs!: pulumi.Output<outputs.Database.PluggableDatabaseRefreshableCloneConfig[]>;
    /**
     * (Updatable) An optional property when incremented triggers Rotate Key. Could be set to any integer value.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly rotateKeyTrigger!: pulumi.Output<number | undefined>;
    /**
     * Indicates whether to take Pluggable Database Backup after the operation.
     */
    public readonly shouldCreatePdbBackup!: pulumi.Output<boolean>;
    /**
     * The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
     */
    public readonly shouldPdbAdminAccountBeLocked!: pulumi.Output<boolean>;
    /**
     * The current state of the pluggable database.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The existing TDE wallet password of the CDB.
     */
    public readonly tdeWalletPassword!: pulumi.Output<string>;
    /**
     * The date and time the pluggable database was created.
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;

    /**
     * Create a PluggableDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PluggableDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PluggableDatabaseArgs | PluggableDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PluggableDatabaseState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["connectionStrings"] = state ? state.connectionStrings : undefined;
            resourceInputs["containerDatabaseAdminPassword"] = state ? state.containerDatabaseAdminPassword : undefined;
            resourceInputs["containerDatabaseId"] = state ? state.containerDatabaseId : undefined;
            resourceInputs["convertToRegularTrigger"] = state ? state.convertToRegularTrigger : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["isRestricted"] = state ? state.isRestricted : undefined;
            resourceInputs["kmsKeyVersionId"] = state ? state.kmsKeyVersionId : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["openMode"] = state ? state.openMode : undefined;
            resourceInputs["pdbAdminPassword"] = state ? state.pdbAdminPassword : undefined;
            resourceInputs["pdbCreationTypeDetails"] = state ? state.pdbCreationTypeDetails : undefined;
            resourceInputs["pdbName"] = state ? state.pdbName : undefined;
            resourceInputs["pdbNodeLevelDetails"] = state ? state.pdbNodeLevelDetails : undefined;
            resourceInputs["pluggableDatabaseManagementConfigs"] = state ? state.pluggableDatabaseManagementConfigs : undefined;
            resourceInputs["refreshTrigger"] = state ? state.refreshTrigger : undefined;
            resourceInputs["refreshableCloneConfigs"] = state ? state.refreshableCloneConfigs : undefined;
            resourceInputs["rotateKeyTrigger"] = state ? state.rotateKeyTrigger : undefined;
            resourceInputs["shouldCreatePdbBackup"] = state ? state.shouldCreatePdbBackup : undefined;
            resourceInputs["shouldPdbAdminAccountBeLocked"] = state ? state.shouldPdbAdminAccountBeLocked : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tdeWalletPassword"] = state ? state.tdeWalletPassword : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
        } else {
            const args = argsOrState as PluggableDatabaseArgs | undefined;
            if ((!args || args.containerDatabaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerDatabaseId'");
            }
            if ((!args || args.pdbName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pdbName'");
            }
            resourceInputs["containerDatabaseAdminPassword"] = args?.containerDatabaseAdminPassword ? pulumi.secret(args.containerDatabaseAdminPassword) : undefined;
            resourceInputs["containerDatabaseId"] = args ? args.containerDatabaseId : undefined;
            resourceInputs["convertToRegularTrigger"] = args ? args.convertToRegularTrigger : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["kmsKeyVersionId"] = args ? args.kmsKeyVersionId : undefined;
            resourceInputs["pdbAdminPassword"] = args?.pdbAdminPassword ? pulumi.secret(args.pdbAdminPassword) : undefined;
            resourceInputs["pdbCreationTypeDetails"] = args ? args.pdbCreationTypeDetails : undefined;
            resourceInputs["pdbName"] = args ? args.pdbName : undefined;
            resourceInputs["refreshTrigger"] = args ? args.refreshTrigger : undefined;
            resourceInputs["rotateKeyTrigger"] = args ? args.rotateKeyTrigger : undefined;
            resourceInputs["shouldCreatePdbBackup"] = args ? args.shouldCreatePdbBackup : undefined;
            resourceInputs["shouldPdbAdminAccountBeLocked"] = args ? args.shouldPdbAdminAccountBeLocked : undefined;
            resourceInputs["tdeWalletPassword"] = args?.tdeWalletPassword ? pulumi.secret(args.tdeWalletPassword) : undefined;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["connectionStrings"] = undefined /*out*/;
            resourceInputs["isRestricted"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["openMode"] = undefined /*out*/;
            resourceInputs["pdbNodeLevelDetails"] = undefined /*out*/;
            resourceInputs["pluggableDatabaseManagementConfigs"] = undefined /*out*/;
            resourceInputs["refreshableCloneConfigs"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["containerDatabaseAdminPassword", "pdbAdminPassword", "tdeWalletPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PluggableDatabase.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PluggableDatabase resources.
 */
export interface PluggableDatabaseState {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * Connection strings to connect to an Oracle Pluggable Database.
     */
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.Database.PluggableDatabaseConnectionString>[]>;
    /**
     * The DB system administrator password of the Container Database.
     */
    containerDatabaseAdminPassword?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
     */
    containerDatabaseId?: pulumi.Input<string>;
    /**
     * (Updatable) An optional property when incremented triggers Convert To Regular. Could be set to any integer value.
     */
    convertToRegularTrigger?: pulumi.Input<number>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
     */
    isRestricted?: pulumi.Input<boolean>;
    kmsKeyVersionId?: pulumi.Input<string>;
    /**
     * Detailed message for the lifecycle state.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
     */
    openMode?: pulumi.Input<string>;
    /**
     * A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     *
     * Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
     */
    pdbAdminPassword?: pulumi.Input<string>;
    /**
     * The Pluggable Database creation type. Use `LOCAL_CLONE_PDB` for creating a new PDB using Local Clone on Source Pluggable Database. This will Clone and starts a pluggable database (PDB) in the same database (CDB) as the source PDB. The source PDB must be in the `READ_WRITE` openMode to perform the clone operation. isThinClone options are supported for Exadata VM cluster on Exascale Infrastructure, Exadata Cloud@Customer VM Cluster on Exadata Cloud@Customer infrastructure, and Exadata Cloud VM cluster on cloud Exadata infrastructure Use `REMOTE_CLONE_PDB` for creating a new PDB using Remote Clone on Source Pluggable Database. This will Clone a pluggable database (PDB) to a different database from the source PDB. The cloned PDB will be started upon completion of the clone operation. The source PDB must be in the `READ_WRITE` openMode when performing the clone. For Exadata Cloud@Customer instances, the source pluggable database (PDB) must be on the same Exadata Infrastructure as the target container database (CDB) to create a remote clone. isThinClone options are supported for Exadata VM cluster on Exascale Infrastructure, Exadata Cloud@Customer VM Cluster on Exadata Cloud@Customer infrastructure, and Exadata Cloud VM cluster on cloud Exadata infrastructure. Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
     */
    pdbCreationTypeDetails?: pulumi.Input<inputs.Database.PluggableDatabasePdbCreationTypeDetails>;
    /**
     * The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     */
    pdbName?: pulumi.Input<string>;
    /**
     * Pluggable Database Node Level Details. Example: [{"nodeName" : "node1", "openMode" : "READ_WRITE"}, {"nodeName" : "node2", "openMode" : "READ_ONLY"}]
     */
    pdbNodeLevelDetails?: pulumi.Input<pulumi.Input<inputs.Database.PluggableDatabasePdbNodeLevelDetail>[]>;
    /**
     * The configuration of the Pluggable Database Management service.
     */
    pluggableDatabaseManagementConfigs?: pulumi.Input<pulumi.Input<inputs.Database.PluggableDatabasePluggableDatabaseManagementConfig>[]>;
    /**
     * (Updatable) An optional property when incremented triggers Refresh. Could be set to any integer value.
     */
    refreshTrigger?: pulumi.Input<number>;
    /**
     * Pluggable Database Refreshable Clone Configuration.
     */
    refreshableCloneConfigs?: pulumi.Input<pulumi.Input<inputs.Database.PluggableDatabaseRefreshableCloneConfig>[]>;
    /**
     * (Updatable) An optional property when incremented triggers Rotate Key. Could be set to any integer value.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    rotateKeyTrigger?: pulumi.Input<number>;
    /**
     * Indicates whether to take Pluggable Database Backup after the operation.
     */
    shouldCreatePdbBackup?: pulumi.Input<boolean>;
    /**
     * The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
     */
    shouldPdbAdminAccountBeLocked?: pulumi.Input<boolean>;
    /**
     * The current state of the pluggable database.
     */
    state?: pulumi.Input<string>;
    /**
     * The existing TDE wallet password of the CDB.
     */
    tdeWalletPassword?: pulumi.Input<string>;
    /**
     * The date and time the pluggable database was created.
     */
    timeCreated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PluggableDatabase resource.
 */
export interface PluggableDatabaseArgs {
    /**
     * The DB system administrator password of the Container Database.
     */
    containerDatabaseAdminPassword?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
     */
    containerDatabaseId: pulumi.Input<string>;
    /**
     * (Updatable) An optional property when incremented triggers Convert To Regular. Could be set to any integer value.
     */
    convertToRegularTrigger?: pulumi.Input<number>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    kmsKeyVersionId?: pulumi.Input<string>;
    /**
     * A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
     *
     * Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
     */
    pdbAdminPassword?: pulumi.Input<string>;
    /**
     * The Pluggable Database creation type. Use `LOCAL_CLONE_PDB` for creating a new PDB using Local Clone on Source Pluggable Database. This will Clone and starts a pluggable database (PDB) in the same database (CDB) as the source PDB. The source PDB must be in the `READ_WRITE` openMode to perform the clone operation. isThinClone options are supported for Exadata VM cluster on Exascale Infrastructure, Exadata Cloud@Customer VM Cluster on Exadata Cloud@Customer infrastructure, and Exadata Cloud VM cluster on cloud Exadata infrastructure Use `REMOTE_CLONE_PDB` for creating a new PDB using Remote Clone on Source Pluggable Database. This will Clone a pluggable database (PDB) to a different database from the source PDB. The cloned PDB will be started upon completion of the clone operation. The source PDB must be in the `READ_WRITE` openMode when performing the clone. For Exadata Cloud@Customer instances, the source pluggable database (PDB) must be on the same Exadata Infrastructure as the target container database (CDB) to create a remote clone. isThinClone options are supported for Exadata VM cluster on Exascale Infrastructure, Exadata Cloud@Customer VM Cluster on Exadata Cloud@Customer infrastructure, and Exadata Cloud VM cluster on cloud Exadata infrastructure. Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
     */
    pdbCreationTypeDetails?: pulumi.Input<inputs.Database.PluggableDatabasePdbCreationTypeDetails>;
    /**
     * The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
     */
    pdbName: pulumi.Input<string>;
    /**
     * (Updatable) An optional property when incremented triggers Refresh. Could be set to any integer value.
     */
    refreshTrigger?: pulumi.Input<number>;
    /**
     * (Updatable) An optional property when incremented triggers Rotate Key. Could be set to any integer value.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    rotateKeyTrigger?: pulumi.Input<number>;
    /**
     * Indicates whether to take Pluggable Database Backup after the operation.
     */
    shouldCreatePdbBackup?: pulumi.Input<boolean>;
    /**
     * The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
     */
    shouldPdbAdminAccountBeLocked?: pulumi.Input<boolean>;
    /**
     * The existing TDE wallet password of the CDB.
     */
    tdeWalletPassword?: pulumi.Input<string>;
}
