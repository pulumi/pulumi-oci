// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the External Db System resource in Oracle Cloud Infrastructure Database Management service.
 *
 * Creates an external DB system and its related resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testExternalDbSystem = new oci.databasemanagement.ExternalDbSystem("testExternalDbSystem", {
 *     compartmentId: _var.compartment_id,
 *     dbSystemDiscoveryId: oci_database_management_db_system_discovery.test_db_system_discovery.id,
 *     databaseManagementConfig: {
 *         licenseModel: _var.external_db_system_database_management_config_license_model,
 *     },
 *     displayName: _var.external_db_system_display_name,
 *     stackMonitoringConfig: {
 *         isEnabled: _var.external_db_system_stack_monitoring_config_is_enabled,
 *         metadata: _var.external_db_system_stack_monitoring_config_metadata,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ExternalDbSystems can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:DatabaseManagement/externalDbSystem:ExternalDbSystem test_external_db_system "id"
 * ```
 */
export class ExternalDbSystem extends pulumi.CustomResource {
    /**
     * Get an existing ExternalDbSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalDbSystemState, opts?: pulumi.CustomResourceOptions): ExternalDbSystem {
        return new ExternalDbSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:DatabaseManagement/externalDbSystem:ExternalDbSystem';

    /**
     * Returns true if the given object is an instance of ExternalDbSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalDbSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalDbSystem.__pulumiType;
    }

    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external DB system resides.
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * The details required to enable Database Management for an external DB system.
     */
    public readonly databaseManagementConfig!: pulumi.Output<outputs.DatabaseManagement.ExternalDbSystemDatabaseManagementConfig | undefined>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system discovery.
     */
    public readonly dbSystemDiscoveryId!: pulumi.Output<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management agent used during the discovery of the DB system.
     */
    public /*out*/ readonly discoveryAgentId!: pulumi.Output<string | undefined>;
    /**
     * (Updatable) The user-friendly name for the DB system. The name does not have to be unique.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * The Oracle Grid home directory in case of cluster-based DB system and Oracle home directory in case of single instance-based DB system.
     */
    public /*out*/ readonly homeDirectory!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the DB system is a cluster DB system or not.
     */
    public /*out*/ readonly isCluster!: pulumi.Output<boolean | undefined>;
    /**
     * Additional information about the current lifecycle state.
     */
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string | undefined>;
    /**
     * The details of the associated service that will be enabled or disabled for an external DB System.
     */
    public readonly stackMonitoringConfig!: pulumi.Output<outputs.DatabaseManagement.ExternalDbSystemStackMonitoringConfig | undefined>;
    /**
     * The current lifecycle state of the external DB system resource.
     */
    public /*out*/ readonly state!: pulumi.Output<string | undefined>;
    /**
     * The date and time the external DB system was created.
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string | undefined>;
    /**
     * The date and time the external DB system was last updated.
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string | undefined>;

    /**
     * Create a ExternalDbSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalDbSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalDbSystemArgs | ExternalDbSystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExternalDbSystemState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["databaseManagementConfig"] = state ? state.databaseManagementConfig : undefined;
            resourceInputs["dbSystemDiscoveryId"] = state ? state.dbSystemDiscoveryId : undefined;
            resourceInputs["discoveryAgentId"] = state ? state.discoveryAgentId : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["homeDirectory"] = state ? state.homeDirectory : undefined;
            resourceInputs["isCluster"] = state ? state.isCluster : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["stackMonitoringConfig"] = state ? state.stackMonitoringConfig : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
        } else {
            const args = argsOrState as ExternalDbSystemArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.dbSystemDiscoveryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbSystemDiscoveryId'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["databaseManagementConfig"] = args ? args.databaseManagementConfig : undefined;
            resourceInputs["dbSystemDiscoveryId"] = args ? args.dbSystemDiscoveryId : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["stackMonitoringConfig"] = args ? args.stackMonitoringConfig : undefined;
            resourceInputs["discoveryAgentId"] = undefined /*out*/;
            resourceInputs["homeDirectory"] = undefined /*out*/;
            resourceInputs["isCluster"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExternalDbSystem.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExternalDbSystem resources.
 */
export interface ExternalDbSystemState {
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external DB system resides.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * The details required to enable Database Management for an external DB system.
     */
    databaseManagementConfig?: pulumi.Input<inputs.DatabaseManagement.ExternalDbSystemDatabaseManagementConfig>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system discovery.
     */
    dbSystemDiscoveryId?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management agent used during the discovery of the DB system.
     */
    discoveryAgentId?: pulumi.Input<string>;
    /**
     * (Updatable) The user-friendly name for the DB system. The name does not have to be unique.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The Oracle Grid home directory in case of cluster-based DB system and Oracle home directory in case of single instance-based DB system.
     */
    homeDirectory?: pulumi.Input<string>;
    /**
     * Indicates whether the DB system is a cluster DB system or not.
     */
    isCluster?: pulumi.Input<boolean>;
    /**
     * Additional information about the current lifecycle state.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * The details of the associated service that will be enabled or disabled for an external DB System.
     */
    stackMonitoringConfig?: pulumi.Input<inputs.DatabaseManagement.ExternalDbSystemStackMonitoringConfig>;
    /**
     * The current lifecycle state of the external DB system resource.
     */
    state?: pulumi.Input<string>;
    /**
     * The date and time the external DB system was created.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The date and time the external DB system was last updated.
     */
    timeUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExternalDbSystem resource.
 */
export interface ExternalDbSystemArgs {
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the external DB system resides.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * The details required to enable Database Management for an external DB system.
     */
    databaseManagementConfig?: pulumi.Input<inputs.DatabaseManagement.ExternalDbSystemDatabaseManagementConfig>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DB system discovery.
     */
    dbSystemDiscoveryId: pulumi.Input<string>;
    /**
     * (Updatable) The user-friendly name for the DB system. The name does not have to be unique.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The details of the associated service that will be enabled or disabled for an external DB System.
     */
    stackMonitoringConfig?: pulumi.Input<inputs.DatabaseManagement.ExternalDbSystemStackMonitoringConfig>;
}
