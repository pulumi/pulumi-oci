// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the External My Sql Database resource in Oracle Cloud Infrastructure Database Management service.
 *
 * Creates an external MySQL database.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testExternalMySqlDatabase = new oci.databasemanagement.ExternalMySqlDatabase("test_external_my_sql_database", {
 *     compartmentId: compartmentId,
 *     dbName: externalMySqlDatabaseDbName,
 * });
 * ```
 *
 * ## Import
 *
 * ExternalMySqlDatabases can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:DatabaseManagement/externalMySqlDatabase:ExternalMySqlDatabase test_external_my_sql_database "id"
 * ```
 */
export class ExternalMySqlDatabase extends pulumi.CustomResource {
    /**
     * Get an existing ExternalMySqlDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalMySqlDatabaseState, opts?: pulumi.CustomResourceOptions): ExternalMySqlDatabase {
        return new ExternalMySqlDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:DatabaseManagement/externalMySqlDatabase:ExternalMySqlDatabase';

    /**
     * Returns true if the given object is an instance of ExternalMySqlDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalMySqlDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalMySqlDatabase.__pulumiType;
    }

    /**
     * OCID of compartment for the External MySQL Database.
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * (Updatable) Name of the External MySQL Database.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly dbName: pulumi.Output<string>;
    /**
     * OCID of External MySQL Database.
     */
    declare public /*out*/ readonly externalDatabaseId: pulumi.Output<string>;

    /**
     * Create a ExternalMySqlDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalMySqlDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalMySqlDatabaseArgs | ExternalMySqlDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExternalMySqlDatabaseState | undefined;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["dbName"] = state?.dbName;
            resourceInputs["externalDatabaseId"] = state?.externalDatabaseId;
        } else {
            const args = argsOrState as ExternalMySqlDatabaseArgs | undefined;
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.dbName === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbName'");
            }
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["dbName"] = args?.dbName;
            resourceInputs["externalDatabaseId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExternalMySqlDatabase.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExternalMySqlDatabase resources.
 */
export interface ExternalMySqlDatabaseState {
    /**
     * OCID of compartment for the External MySQL Database.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) Name of the External MySQL Database.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    dbName?: pulumi.Input<string>;
    /**
     * OCID of External MySQL Database.
     */
    externalDatabaseId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExternalMySqlDatabase resource.
 */
export interface ExternalMySqlDatabaseArgs {
    /**
     * OCID of compartment for the External MySQL Database.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Name of the External MySQL Database.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    dbName: pulumi.Input<string>;
}
