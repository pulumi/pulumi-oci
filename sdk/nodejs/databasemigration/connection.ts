// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testConnection = new oci.databasemigration.Connection("test_connection", {
 *     compartmentId: compartmentId,
 *     connectionType: connectionConnectionType,
 *     displayName: connectionDisplayName,
 *     keyId: testKey.id,
 *     password: connectionPassword,
 *     technologyType: connectionTechnologyType,
 *     username: connectionUsername,
 *     vaultId: testVault.id,
 *     additionalAttributes: [{
 *         name: connectionAdditionalAttributesName,
 *         value: connectionAdditionalAttributesValue,
 *     }],
 *     connectionString: connectionConnectionString,
 *     databaseId: testDatabase.id,
 *     databaseName: testDatabase.name,
 *     dbSystemId: testDbSystem.id,
 *     definedTags: {
 *         "foo-namespace.bar-key": "value",
 *     },
 *     description: connectionDescription,
 *     freeformTags: connectionFreeformTags,
 *     host: connectionHost,
 *     nsgIds: connectionNsgIds,
 *     port: connectionPort,
 *     replicationPassword: connectionReplicationPassword,
 *     replicationUsername: connectionReplicationUsername,
 *     securityProtocol: connectionSecurityProtocol,
 *     sshHost: connectionSshHost,
 *     sshKey: connectionSshKey,
 *     sshSudoLocation: connectionSshSudoLocation,
 *     sshUser: connectionSshUser,
 *     sslCa: connectionSslCa,
 *     sslCert: connectionSslCert,
 *     sslCrl: connectionSslCrl,
 *     sslKey: connectionSslKey,
 *     sslMode: connectionSslMode,
 *     subnetId: testSubnet.id,
 *     wallet: connectionWallet,
 * });
 * ```
 *
 * ## Import
 *
 * Connections can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:DatabaseMigration/connection:Connection test_connection "id"
 * ```
 */
export class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionState, opts?: pulumi.CustomResourceOptions): Connection {
        return new Connection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:DatabaseMigration/connection:Connection';

    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }

    /**
     * (Updatable) An array of name-value pair attribute entries.
     */
    declare public readonly additionalAttributes: pulumi.Output<outputs.DatabaseMigration.ConnectionAdditionalAttribute[]>;
    /**
     * (Updatable) The OCID of the compartment.
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
     */
    declare public readonly connectionString: pulumi.Output<string>;
    /**
     * (Updatable) Defines the type of connection. For example, ORACLE.
     */
    declare public readonly connectionType: pulumi.Output<string>;
    /**
     * (Updatable) The OCID of the database being referenced.
     */
    declare public readonly databaseId: pulumi.Output<string>;
    /**
     * (Updatable) The name of the database being referenced.
     */
    declare public readonly databaseName: pulumi.Output<string>;
    /**
     * (Updatable) The OCID of the database system being referenced.
     */
    declare public readonly dbSystemId: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    declare public readonly definedTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) A user-friendly description. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {"Department": "Finance"}
     */
    declare public readonly freeformTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) The IP Address of the host.
     */
    declare public readonly host: pulumi.Output<string>;
    /**
     * List of ingress IP addresses from where to connect to this connection's privateIp.
     */
    declare public /*out*/ readonly ingressIps: pulumi.Output<outputs.DatabaseMigration.ConnectionIngressIp[]>;
    /**
     * (Updatable) The OCID of the key used in cryptographic operations.
     */
    declare public readonly keyId: pulumi.Output<string>;
    /**
     * The message describing the current state of the connection's lifecycle in detail. For example, can be used to provide actionable information for a connection in a Failed state.
     */
    declare public /*out*/ readonly lifecycleDetails: pulumi.Output<string>;
    /**
     * (Updatable) An array of Network Security Group OCIDs used to define network access for Connections.
     */
    declare public readonly nsgIds: pulumi.Output<string[]>;
    /**
     * (Updatable) The password (credential) used when creating or updating this resource.
     */
    declare public readonly password: pulumi.Output<string>;
    /**
     * (Updatable) The port to be used for the connection.
     */
    declare public readonly port: pulumi.Output<number>;
    /**
     * The OCID of the resource being referenced.
     */
    declare public /*out*/ readonly privateEndpointId: pulumi.Output<string>;
    /**
     * (Updatable) The password (credential) used when creating or updating this resource.
     */
    declare public readonly replicationPassword: pulumi.Output<string>;
    /**
     * (Updatable) The username (credential) used when creating or updating this resource.
     */
    declare public readonly replicationUsername: pulumi.Output<string>;
    /**
     * The OCID of the resource being referenced.
     */
    declare public /*out*/ readonly secretId: pulumi.Output<string>;
    /**
     * (Updatable) Security Type for MySQL.
     */
    declare public readonly securityProtocol: pulumi.Output<string>;
    /**
     * (Updatable) Name of the host the SSH key is valid for.
     */
    declare public readonly sshHost: pulumi.Output<string>;
    /**
     * (Updatable) Private SSH key string.
     */
    declare public readonly sshKey: pulumi.Output<string>;
    /**
     * (Updatable) Sudo location
     */
    declare public readonly sshSudoLocation: pulumi.Output<string>;
    /**
     * (Updatable) The username (credential) used when creating or updating this resource.
     */
    declare public readonly sshUser: pulumi.Output<string>;
    /**
     * (Updatable) Database Certificate - The base64 encoded content of mysql.pem file containing the server public key (for 1 and 2-way SSL).
     */
    declare public readonly sslCa: pulumi.Output<string>;
    /**
     * (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
     */
    declare public readonly sslCert: pulumi.Output<string>;
    /**
     * (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
     */
    declare public readonly sslCrl: pulumi.Output<string>;
    /**
     * (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
     */
    declare public readonly sslKey: pulumi.Output<string>;
    /**
     * (Updatable) SSL modes for MySQL.
     */
    declare public readonly sslMode: pulumi.Output<string>;
    /**
     * The Connection's current lifecycle state.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * (Updatable) Oracle Cloud Infrastructure resource ID.
     */
    declare public readonly subnetId: pulumi.Output<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    declare public /*out*/ readonly systemTags: pulumi.Output<{[key: string]: string}>;
    /**
     * The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
     */
    declare public readonly technologyType: pulumi.Output<string>;
    /**
     * The time when this resource was created. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * The time when this resource was updated. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;
    /**
     * (Updatable) The username (credential) used when creating or updating this resource.
     */
    declare public readonly username: pulumi.Output<string>;
    /**
     * (Updatable) Oracle Cloud Infrastructure resource ID.
     */
    declare public readonly vaultId: pulumi.Output<string>;
    /**
     * (Updatable) The wallet contents used to make connections to a database.  This attribute is expected to be base64 encoded.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly wallet: pulumi.Output<string>;

    /**
     * Create a Connection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionArgs | ConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionState | undefined;
            resourceInputs["additionalAttributes"] = state?.additionalAttributes;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["connectionString"] = state?.connectionString;
            resourceInputs["connectionType"] = state?.connectionType;
            resourceInputs["databaseId"] = state?.databaseId;
            resourceInputs["databaseName"] = state?.databaseName;
            resourceInputs["dbSystemId"] = state?.dbSystemId;
            resourceInputs["definedTags"] = state?.definedTags;
            resourceInputs["description"] = state?.description;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["freeformTags"] = state?.freeformTags;
            resourceInputs["host"] = state?.host;
            resourceInputs["ingressIps"] = state?.ingressIps;
            resourceInputs["keyId"] = state?.keyId;
            resourceInputs["lifecycleDetails"] = state?.lifecycleDetails;
            resourceInputs["nsgIds"] = state?.nsgIds;
            resourceInputs["password"] = state?.password;
            resourceInputs["port"] = state?.port;
            resourceInputs["privateEndpointId"] = state?.privateEndpointId;
            resourceInputs["replicationPassword"] = state?.replicationPassword;
            resourceInputs["replicationUsername"] = state?.replicationUsername;
            resourceInputs["secretId"] = state?.secretId;
            resourceInputs["securityProtocol"] = state?.securityProtocol;
            resourceInputs["sshHost"] = state?.sshHost;
            resourceInputs["sshKey"] = state?.sshKey;
            resourceInputs["sshSudoLocation"] = state?.sshSudoLocation;
            resourceInputs["sshUser"] = state?.sshUser;
            resourceInputs["sslCa"] = state?.sslCa;
            resourceInputs["sslCert"] = state?.sslCert;
            resourceInputs["sslCrl"] = state?.sslCrl;
            resourceInputs["sslKey"] = state?.sslKey;
            resourceInputs["sslMode"] = state?.sslMode;
            resourceInputs["state"] = state?.state;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["systemTags"] = state?.systemTags;
            resourceInputs["technologyType"] = state?.technologyType;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
            resourceInputs["username"] = state?.username;
            resourceInputs["vaultId"] = state?.vaultId;
            resourceInputs["wallet"] = state?.wallet;
        } else {
            const args = argsOrState as ConnectionArgs | undefined;
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.connectionType === undefined && !opts.urn) {
                throw new Error("Missing required property 'connectionType'");
            }
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.keyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if (args?.technologyType === undefined && !opts.urn) {
                throw new Error("Missing required property 'technologyType'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            if (args?.vaultId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vaultId'");
            }
            resourceInputs["additionalAttributes"] = args?.additionalAttributes;
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["connectionString"] = args?.connectionString;
            resourceInputs["connectionType"] = args?.connectionType;
            resourceInputs["databaseId"] = args?.databaseId;
            resourceInputs["databaseName"] = args?.databaseName;
            resourceInputs["dbSystemId"] = args?.dbSystemId;
            resourceInputs["definedTags"] = args?.definedTags;
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["freeformTags"] = args?.freeformTags;
            resourceInputs["host"] = args?.host;
            resourceInputs["keyId"] = args?.keyId;
            resourceInputs["nsgIds"] = args?.nsgIds;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args?.port;
            resourceInputs["replicationPassword"] = args?.replicationPassword ? pulumi.secret(args.replicationPassword) : undefined;
            resourceInputs["replicationUsername"] = args?.replicationUsername;
            resourceInputs["securityProtocol"] = args?.securityProtocol;
            resourceInputs["sshHost"] = args?.sshHost;
            resourceInputs["sshKey"] = args?.sshKey;
            resourceInputs["sshSudoLocation"] = args?.sshSudoLocation;
            resourceInputs["sshUser"] = args?.sshUser;
            resourceInputs["sslCa"] = args?.sslCa;
            resourceInputs["sslCert"] = args?.sslCert;
            resourceInputs["sslCrl"] = args?.sslCrl;
            resourceInputs["sslKey"] = args?.sslKey;
            resourceInputs["sslMode"] = args?.sslMode;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["technologyType"] = args?.technologyType;
            resourceInputs["username"] = args?.username;
            resourceInputs["vaultId"] = args?.vaultId;
            resourceInputs["wallet"] = args?.wallet;
            resourceInputs["ingressIps"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["privateEndpointId"] = undefined /*out*/;
            resourceInputs["secretId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "replicationPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Connection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connection resources.
 */
export interface ConnectionState {
    /**
     * (Updatable) An array of name-value pair attribute entries.
     */
    additionalAttributes?: pulumi.Input<pulumi.Input<inputs.DatabaseMigration.ConnectionAdditionalAttribute>[]>;
    /**
     * (Updatable) The OCID of the compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
     */
    connectionString?: pulumi.Input<string>;
    /**
     * (Updatable) Defines the type of connection. For example, ORACLE.
     */
    connectionType?: pulumi.Input<string>;
    /**
     * (Updatable) The OCID of the database being referenced.
     */
    databaseId?: pulumi.Input<string>;
    /**
     * (Updatable) The name of the database being referenced.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * (Updatable) The OCID of the database system being referenced.
     */
    dbSystemId?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A user-friendly description. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {"Department": "Finance"}
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) The IP Address of the host.
     */
    host?: pulumi.Input<string>;
    /**
     * List of ingress IP addresses from where to connect to this connection's privateIp.
     */
    ingressIps?: pulumi.Input<pulumi.Input<inputs.DatabaseMigration.ConnectionIngressIp>[]>;
    /**
     * (Updatable) The OCID of the key used in cryptographic operations.
     */
    keyId?: pulumi.Input<string>;
    /**
     * The message describing the current state of the connection's lifecycle in detail. For example, can be used to provide actionable information for a connection in a Failed state.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * (Updatable) An array of Network Security Group OCIDs used to define network access for Connections.
     */
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Updatable) The password (credential) used when creating or updating this resource.
     */
    password?: pulumi.Input<string>;
    /**
     * (Updatable) The port to be used for the connection.
     */
    port?: pulumi.Input<number>;
    /**
     * The OCID of the resource being referenced.
     */
    privateEndpointId?: pulumi.Input<string>;
    /**
     * (Updatable) The password (credential) used when creating or updating this resource.
     */
    replicationPassword?: pulumi.Input<string>;
    /**
     * (Updatable) The username (credential) used when creating or updating this resource.
     */
    replicationUsername?: pulumi.Input<string>;
    /**
     * The OCID of the resource being referenced.
     */
    secretId?: pulumi.Input<string>;
    /**
     * (Updatable) Security Type for MySQL.
     */
    securityProtocol?: pulumi.Input<string>;
    /**
     * (Updatable) Name of the host the SSH key is valid for.
     */
    sshHost?: pulumi.Input<string>;
    /**
     * (Updatable) Private SSH key string.
     */
    sshKey?: pulumi.Input<string>;
    /**
     * (Updatable) Sudo location
     */
    sshSudoLocation?: pulumi.Input<string>;
    /**
     * (Updatable) The username (credential) used when creating or updating this resource.
     */
    sshUser?: pulumi.Input<string>;
    /**
     * (Updatable) Database Certificate - The base64 encoded content of mysql.pem file containing the server public key (for 1 and 2-way SSL).
     */
    sslCa?: pulumi.Input<string>;
    /**
     * (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
     */
    sslCert?: pulumi.Input<string>;
    /**
     * (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
     */
    sslCrl?: pulumi.Input<string>;
    /**
     * (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
     */
    sslKey?: pulumi.Input<string>;
    /**
     * (Updatable) SSL modes for MySQL.
     */
    sslMode?: pulumi.Input<string>;
    /**
     * The Connection's current lifecycle state.
     */
    state?: pulumi.Input<string>;
    /**
     * (Updatable) Oracle Cloud Infrastructure resource ID.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
     */
    technologyType?: pulumi.Input<string>;
    /**
     * The time when this resource was created. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time when this resource was updated. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * (Updatable) The username (credential) used when creating or updating this resource.
     */
    username?: pulumi.Input<string>;
    /**
     * (Updatable) Oracle Cloud Infrastructure resource ID.
     */
    vaultId?: pulumi.Input<string>;
    /**
     * (Updatable) The wallet contents used to make connections to a database.  This attribute is expected to be base64 encoded.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    wallet?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Connection resource.
 */
export interface ConnectionArgs {
    /**
     * (Updatable) An array of name-value pair attribute entries.
     */
    additionalAttributes?: pulumi.Input<pulumi.Input<inputs.DatabaseMigration.ConnectionAdditionalAttribute>[]>;
    /**
     * (Updatable) The OCID of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
     */
    connectionString?: pulumi.Input<string>;
    /**
     * (Updatable) Defines the type of connection. For example, ORACLE.
     */
    connectionType: pulumi.Input<string>;
    /**
     * (Updatable) The OCID of the database being referenced.
     */
    databaseId?: pulumi.Input<string>;
    /**
     * (Updatable) The name of the database being referenced.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * (Updatable) The OCID of the database system being referenced.
     */
    dbSystemId?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A user-friendly description. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
     */
    displayName: pulumi.Input<string>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {"Department": "Finance"}
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) The IP Address of the host.
     */
    host?: pulumi.Input<string>;
    /**
     * (Updatable) The OCID of the key used in cryptographic operations.
     */
    keyId: pulumi.Input<string>;
    /**
     * (Updatable) An array of Network Security Group OCIDs used to define network access for Connections.
     */
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Updatable) The password (credential) used when creating or updating this resource.
     */
    password: pulumi.Input<string>;
    /**
     * (Updatable) The port to be used for the connection.
     */
    port?: pulumi.Input<number>;
    /**
     * (Updatable) The password (credential) used when creating or updating this resource.
     */
    replicationPassword?: pulumi.Input<string>;
    /**
     * (Updatable) The username (credential) used when creating or updating this resource.
     */
    replicationUsername?: pulumi.Input<string>;
    /**
     * (Updatable) Security Type for MySQL.
     */
    securityProtocol?: pulumi.Input<string>;
    /**
     * (Updatable) Name of the host the SSH key is valid for.
     */
    sshHost?: pulumi.Input<string>;
    /**
     * (Updatable) Private SSH key string.
     */
    sshKey?: pulumi.Input<string>;
    /**
     * (Updatable) Sudo location
     */
    sshSudoLocation?: pulumi.Input<string>;
    /**
     * (Updatable) The username (credential) used when creating or updating this resource.
     */
    sshUser?: pulumi.Input<string>;
    /**
     * (Updatable) Database Certificate - The base64 encoded content of mysql.pem file containing the server public key (for 1 and 2-way SSL).
     */
    sslCa?: pulumi.Input<string>;
    /**
     * (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
     */
    sslCert?: pulumi.Input<string>;
    /**
     * (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
     */
    sslCrl?: pulumi.Input<string>;
    /**
     * (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
     */
    sslKey?: pulumi.Input<string>;
    /**
     * (Updatable) SSL modes for MySQL.
     */
    sslMode?: pulumi.Input<string>;
    /**
     * (Updatable) Oracle Cloud Infrastructure resource ID.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
     */
    technologyType: pulumi.Input<string>;
    /**
     * (Updatable) The username (credential) used when creating or updating this resource.
     */
    username: pulumi.Input<string>;
    /**
     * (Updatable) Oracle Cloud Infrastructure resource ID.
     */
    vaultId: pulumi.Input<string>;
    /**
     * (Updatable) The wallet contents used to make connections to a database.  This attribute is expected to be base64 encoded.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    wallet?: pulumi.Input<string>;
}
