// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testConnections = oci.DatabaseMigration.getConnections({
 *     compartmentId: compartmentId,
 *     connectionTypes: connectionConnectionType,
 *     displayName: connectionDisplayName,
 *     sourceConnectionId: testConnection.id,
 *     state: connectionState,
 *     technologyTypes: connectionTechnologyType,
 * });
 * ```
 */
export function getConnections(args: GetConnectionsArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectionsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DatabaseMigration/getConnections:getConnections", {
        "compartmentId": args.compartmentId,
        "connectionTypes": args.connectionTypes,
        "displayName": args.displayName,
        "filters": args.filters,
        "sourceConnectionId": args.sourceConnectionId,
        "state": args.state,
        "technologyTypes": args.technologyTypes,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnections.
 */
export interface GetConnectionsArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: string;
    /**
     * The array of connection types.
     */
    connectionTypes?: string[];
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.DatabaseMigration.GetConnectionsFilter[];
    /**
     * The OCID of the source database connection.
     */
    sourceConnectionId?: string;
    /**
     * The current state of the Database Migration Deployment.
     */
    state?: string;
    /**
     * The array of technology types.
     */
    technologyTypes?: string[];
}

/**
 * A collection of values returned by getConnections.
 */
export interface GetConnectionsResult {
    /**
     * The OCID of the compartment.
     */
    readonly compartmentId: string;
    /**
     * The list of connection_collection.
     */
    readonly connectionCollections: outputs.DatabaseMigration.GetConnectionsConnectionCollection[];
    /**
     * Defines the type of connection. For example, ORACLE.
     */
    readonly connectionTypes?: string[];
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
     */
    readonly displayName?: string;
    readonly filters?: outputs.DatabaseMigration.GetConnectionsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly sourceConnectionId?: string;
    /**
     * The Connection's current lifecycle state.
     */
    readonly state?: string;
    /**
     * The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
     */
    readonly technologyTypes?: string[];
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testConnections = oci.DatabaseMigration.getConnections({
 *     compartmentId: compartmentId,
 *     connectionTypes: connectionConnectionType,
 *     displayName: connectionDisplayName,
 *     sourceConnectionId: testConnection.id,
 *     state: connectionState,
 *     technologyTypes: connectionTechnologyType,
 * });
 * ```
 */
export function getConnectionsOutput(args: GetConnectionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConnectionsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DatabaseMigration/getConnections:getConnections", {
        "compartmentId": args.compartmentId,
        "connectionTypes": args.connectionTypes,
        "displayName": args.displayName,
        "filters": args.filters,
        "sourceConnectionId": args.sourceConnectionId,
        "state": args.state,
        "technologyTypes": args.technologyTypes,
    }, opts);
}

/**
 * A collection of arguments for invoking getConnections.
 */
export interface GetConnectionsOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * The array of connection types.
     */
    connectionTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DatabaseMigration.GetConnectionsFilterArgs>[]>;
    /**
     * The OCID of the source database connection.
     */
    sourceConnectionId?: pulumi.Input<string>;
    /**
     * The current state of the Database Migration Deployment.
     */
    state?: pulumi.Input<string>;
    /**
     * The array of technology types.
     */
    technologyTypes?: pulumi.Input<pulumi.Input<string>[]>;
}
