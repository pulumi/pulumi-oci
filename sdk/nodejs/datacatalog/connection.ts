// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Connection resource in Oracle Cloud Infrastructure Data Catalog service.
 *
 * Creates a new connection.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testConnection = new oci.datacatalog.Connection("test_connection", {
 *     catalogId: testCatalog.id,
 *     dataAssetKey: connectionDataAssetKey,
 *     displayName: connectionDisplayName,
 *     properties: connectionProperties,
 *     typeKey: connectionTypeKey,
 *     description: connectionDescription,
 *     encProperties: connectionEncProperties,
 *     isDefault: connectionIsDefault,
 * });
 * ```
 *
 * ## Import
 *
 * Connections can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:DataCatalog/connection:Connection test_connection "catalogs/{catalogId}/dataAssets/{dataAssetKey}/connections/{connectionKey}"
 * ```
 */
export class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionState, opts?: pulumi.CustomResourceOptions): Connection {
        return new Connection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:DataCatalog/connection:Connection';

    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }

    /**
     * Unique catalog identifier.
     */
    declare public readonly catalogId: pulumi.Output<string>;
    /**
     * OCID of the user who created the connection.
     */
    declare public /*out*/ readonly createdById: pulumi.Output<string>;
    /**
     * Unique data asset key.
     */
    declare public readonly dataAssetKey: pulumi.Output<string>;
    /**
     * (Updatable) A description of the connection.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * (Updatable) A map of maps that contains the encrypted values for sensitive properties which are specific to the connection type. Each connection type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the "default" category. To determine the set of optional and required properties for a connection type, a query can be done on '/types?type=connection' that returns a collection of all connection types. The appropriate connection type, which will include definitions of all of it's properties, can be identified from this collection. Example: `{"encProperties": { "default": { "password": "example-password"}}}`
     */
    declare public readonly encProperties: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Unique external key of this object from the source system.
     */
    declare public /*out*/ readonly externalKey: pulumi.Output<string>;
    /**
     * (Updatable) Indicates whether this connection is the default connection. The first connection of a data asset defaults to being the default, subsequent connections default to not being the default. If a default connection already exists, then trying to create a connection as the default will fail. In this case the default connection would need to be updated not to be the default and then the new connection can then be created as the default.
     */
    declare public readonly isDefault: pulumi.Output<boolean>;
    /**
     * Unique connection key that is immutable.
     */
    declare public /*out*/ readonly key: pulumi.Output<string>;
    declare public readonly properties: pulumi.Output<{[key: string]: string}>;
    /**
     * The current state of the connection.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The date and time the connection was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * Time that the connections status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     */
    declare public /*out*/ readonly timeStatusUpdated: pulumi.Output<string>;
    /**
     * The last time that any change was made to the connection. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;
    /**
     * The key of the object type. Type key's can be found via the '/types' endpoint.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly typeKey: pulumi.Output<string>;
    /**
     * OCID of the user who modified the connection.
     */
    declare public /*out*/ readonly updatedById: pulumi.Output<string>;
    /**
     * URI to the connection instance in the API.
     */
    declare public /*out*/ readonly uri: pulumi.Output<string>;

    /**
     * Create a Connection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionArgs | ConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionState | undefined;
            resourceInputs["catalogId"] = state?.catalogId;
            resourceInputs["createdById"] = state?.createdById;
            resourceInputs["dataAssetKey"] = state?.dataAssetKey;
            resourceInputs["description"] = state?.description;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["encProperties"] = state?.encProperties;
            resourceInputs["externalKey"] = state?.externalKey;
            resourceInputs["isDefault"] = state?.isDefault;
            resourceInputs["key"] = state?.key;
            resourceInputs["properties"] = state?.properties;
            resourceInputs["state"] = state?.state;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeStatusUpdated"] = state?.timeStatusUpdated;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
            resourceInputs["typeKey"] = state?.typeKey;
            resourceInputs["updatedById"] = state?.updatedById;
            resourceInputs["uri"] = state?.uri;
        } else {
            const args = argsOrState as ConnectionArgs | undefined;
            if (args?.catalogId === undefined && !opts.urn) {
                throw new Error("Missing required property 'catalogId'");
            }
            if (args?.dataAssetKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataAssetKey'");
            }
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.properties === undefined && !opts.urn) {
                throw new Error("Missing required property 'properties'");
            }
            if (args?.typeKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'typeKey'");
            }
            resourceInputs["catalogId"] = args?.catalogId;
            resourceInputs["dataAssetKey"] = args?.dataAssetKey;
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["encProperties"] = args?.encProperties ? pulumi.secret(args.encProperties) : undefined;
            resourceInputs["isDefault"] = args?.isDefault;
            resourceInputs["properties"] = args?.properties;
            resourceInputs["typeKey"] = args?.typeKey;
            resourceInputs["createdById"] = undefined /*out*/;
            resourceInputs["externalKey"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeStatusUpdated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["updatedById"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["encProperties"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Connection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connection resources.
 */
export interface ConnectionState {
    /**
     * Unique catalog identifier.
     */
    catalogId?: pulumi.Input<string>;
    /**
     * OCID of the user who created the connection.
     */
    createdById?: pulumi.Input<string>;
    /**
     * Unique data asset key.
     */
    dataAssetKey?: pulumi.Input<string>;
    /**
     * (Updatable) A description of the connection.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) A map of maps that contains the encrypted values for sensitive properties which are specific to the connection type. Each connection type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the "default" category. To determine the set of optional and required properties for a connection type, a query can be done on '/types?type=connection' that returns a collection of all connection types. The appropriate connection type, which will include definitions of all of it's properties, can be identified from this collection. Example: `{"encProperties": { "default": { "password": "example-password"}}}`
     */
    encProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Unique external key of this object from the source system.
     */
    externalKey?: pulumi.Input<string>;
    /**
     * (Updatable) Indicates whether this connection is the default connection. The first connection of a data asset defaults to being the default, subsequent connections default to not being the default. If a default connection already exists, then trying to create a connection as the default will fail. In this case the default connection would need to be updated not to be the default and then the new connection can then be created as the default.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Unique connection key that is immutable.
     */
    key?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The current state of the connection.
     */
    state?: pulumi.Input<string>;
    /**
     * The date and time the connection was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * Time that the connections status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     */
    timeStatusUpdated?: pulumi.Input<string>;
    /**
     * The last time that any change was made to the connection. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * The key of the object type. Type key's can be found via the '/types' endpoint.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    typeKey?: pulumi.Input<string>;
    /**
     * OCID of the user who modified the connection.
     */
    updatedById?: pulumi.Input<string>;
    /**
     * URI to the connection instance in the API.
     */
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Connection resource.
 */
export interface ConnectionArgs {
    /**
     * Unique catalog identifier.
     */
    catalogId: pulumi.Input<string>;
    /**
     * Unique data asset key.
     */
    dataAssetKey: pulumi.Input<string>;
    /**
     * (Updatable) A description of the connection.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    displayName: pulumi.Input<string>;
    /**
     * (Updatable) A map of maps that contains the encrypted values for sensitive properties which are specific to the connection type. Each connection type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the "default" category. To determine the set of optional and required properties for a connection type, a query can be done on '/types?type=connection' that returns a collection of all connection types. The appropriate connection type, which will include definitions of all of it's properties, can be identified from this collection. Example: `{"encProperties": { "default": { "password": "example-password"}}}`
     */
    encProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Indicates whether this connection is the default connection. The first connection of a data asset defaults to being the default, subsequent connections default to not being the default. If a default connection already exists, then trying to create a connection as the default will fail. In this case the default connection would need to be updated not to be the default and then the new connection can then be created as the default.
     */
    isDefault?: pulumi.Input<boolean>;
    properties: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The key of the object type. Type key's can be found via the '/types' endpoint.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    typeKey: pulumi.Input<string>;
}
