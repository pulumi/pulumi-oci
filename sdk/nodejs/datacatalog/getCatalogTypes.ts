// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Catalog Types in Oracle Cloud Infrastructure Data Catalog service.
 *
 * Returns a list of all types within a data catalog.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testCatalogTypes = oci.DataCatalog.getCatalogTypes({
 *     catalogId: testCatalog.id,
 *     externalTypeName: catalogTypeExternalTypeName,
 *     fields: catalogTypeFields,
 *     isApproved: catalogTypeIsApproved,
 *     isInternal: catalogTypeIsInternal,
 *     isTag: catalogTypeIsTag,
 *     name: catalogTypeName,
 *     state: catalogTypeState,
 *     typeCategory: catalogTypeTypeCategory,
 * });
 * ```
 */
export function getCatalogTypes(args: GetCatalogTypesArgs, opts?: pulumi.InvokeOptions): Promise<GetCatalogTypesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataCatalog/getCatalogTypes:getCatalogTypes", {
        "catalogId": args.catalogId,
        "externalTypeName": args.externalTypeName,
        "fields": args.fields,
        "filters": args.filters,
        "isApproved": args.isApproved,
        "isInternal": args.isInternal,
        "isTag": args.isTag,
        "name": args.name,
        "state": args.state,
        "typeCategory": args.typeCategory,
    }, opts);
}

/**
 * A collection of arguments for invoking getCatalogTypes.
 */
export interface GetCatalogTypesArgs {
    /**
     * Unique catalog identifier.
     */
    catalogId: string;
    /**
     * Data type as defined in an external system.
     */
    externalTypeName?: string;
    /**
     * Specifies the fields to return in a type summary response.
     */
    fields?: string[];
    filters?: inputs.DataCatalog.GetCatalogTypesFilter[];
    /**
     * Indicates whether the type is approved for use as a classifying object.
     */
    isApproved?: string;
    /**
     * Indicates whether the type is internal, making it unavailable for use by metadata elements.
     */
    isInternal?: string;
    /**
     * Indicates whether the type can be used for tagging metadata elements.
     */
    isTag?: string;
    /**
     * Immutable resource name.
     */
    name?: string;
    /**
     * A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     */
    state?: string;
    /**
     * Indicates the category of this type . For example, data assets or connections.
     */
    typeCategory?: string;
}

/**
 * A collection of values returned by getCatalogTypes.
 */
export interface GetCatalogTypesResult {
    /**
     * The data catalog's OCID.
     */
    readonly catalogId: string;
    /**
     * Mapping type equivalence in the external system.
     */
    readonly externalTypeName?: string;
    readonly fields?: string[];
    readonly filters?: outputs.DataCatalog.GetCatalogTypesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Indicates whether the type is approved for use as a classifying object.
     */
    readonly isApproved?: string;
    /**
     * Indicates whether the type is internal, making it unavailable for use by metadata elements.
     */
    readonly isInternal?: string;
    /**
     * Indicates whether the type can be used for tagging metadata elements.
     */
    readonly isTag?: string;
    /**
     * The immutable name of the type.
     */
    readonly name?: string;
    /**
     * The current state of the type.
     */
    readonly state?: string;
    /**
     * Indicates the category this type belongs to. For instance, data assets, connections.
     */
    readonly typeCategory?: string;
    /**
     * The list of type_collection.
     */
    readonly typeCollections: outputs.DataCatalog.GetCatalogTypesTypeCollection[];
}
/**
 * This data source provides the list of Catalog Types in Oracle Cloud Infrastructure Data Catalog service.
 *
 * Returns a list of all types within a data catalog.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testCatalogTypes = oci.DataCatalog.getCatalogTypes({
 *     catalogId: testCatalog.id,
 *     externalTypeName: catalogTypeExternalTypeName,
 *     fields: catalogTypeFields,
 *     isApproved: catalogTypeIsApproved,
 *     isInternal: catalogTypeIsInternal,
 *     isTag: catalogTypeIsTag,
 *     name: catalogTypeName,
 *     state: catalogTypeState,
 *     typeCategory: catalogTypeTypeCategory,
 * });
 * ```
 */
export function getCatalogTypesOutput(args: GetCatalogTypesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetCatalogTypesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DataCatalog/getCatalogTypes:getCatalogTypes", {
        "catalogId": args.catalogId,
        "externalTypeName": args.externalTypeName,
        "fields": args.fields,
        "filters": args.filters,
        "isApproved": args.isApproved,
        "isInternal": args.isInternal,
        "isTag": args.isTag,
        "name": args.name,
        "state": args.state,
        "typeCategory": args.typeCategory,
    }, opts);
}

/**
 * A collection of arguments for invoking getCatalogTypes.
 */
export interface GetCatalogTypesOutputArgs {
    /**
     * Unique catalog identifier.
     */
    catalogId: pulumi.Input<string>;
    /**
     * Data type as defined in an external system.
     */
    externalTypeName?: pulumi.Input<string>;
    /**
     * Specifies the fields to return in a type summary response.
     */
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataCatalog.GetCatalogTypesFilterArgs>[]>;
    /**
     * Indicates whether the type is approved for use as a classifying object.
     */
    isApproved?: pulumi.Input<string>;
    /**
     * Indicates whether the type is internal, making it unavailable for use by metadata elements.
     */
    isInternal?: pulumi.Input<string>;
    /**
     * Indicates whether the type can be used for tagging metadata elements.
     */
    isTag?: pulumi.Input<string>;
    /**
     * Immutable resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
     */
    state?: pulumi.Input<string>;
    /**
     * Indicates the category of this type . For example, data assets or connections.
     */
    typeCategory?: pulumi.Input<string>;
}
