// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Registry Connection resource in Oracle Cloud Infrastructure Data Connectivity service.
 *
 * Creates a connection under an existing data asset.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRegistryConnection = new oci.dataconnectivity.RegistryConnection("testRegistryConnection", {
 *     identifier: _var.registry_connection_identifier,
 *     properties: _var.registry_connection_properties,
 *     registryId: oci_data_connectivity_registry.test_registry.id,
 *     type: _var.registry_connection_type,
 *     connectionProperties: [{
 *         name: _var.registry_connection_connection_properties_name,
 *         value: _var.registry_connection_connection_properties_value,
 *     }],
 *     description: _var.registry_connection_description,
 *     isDefault: _var.registry_connection_is_default,
 *     key: _var.registry_connection_key,
 *     metadata: {
 *         aggregator: {
 *             description: _var.registry_connection_metadata_aggregator_description,
 *             identifier: _var.registry_connection_metadata_aggregator_identifier,
 *             key: _var.registry_connection_metadata_aggregator_key,
 *             name: _var.registry_connection_metadata_aggregator_name,
 *             type: _var.registry_connection_metadata_aggregator_type,
 *         },
 *         aggregatorKey: _var.registry_connection_metadata_aggregator_key,
 *         createdBy: _var.registry_connection_metadata_created_by,
 *         createdByName: _var.registry_connection_metadata_created_by_name,
 *         identifierPath: _var.registry_connection_metadata_identifier_path,
 *         infoFields: _var.registry_connection_metadata_info_fields,
 *         isFavorite: _var.registry_connection_metadata_is_favorite,
 *         labels: _var.registry_connection_metadata_labels,
 *         registryVersion: _var.registry_connection_metadata_registry_version,
 *         timeCreated: _var.registry_connection_metadata_time_created,
 *         timeUpdated: _var.registry_connection_metadata_time_updated,
 *         updatedBy: _var.registry_connection_metadata_updated_by,
 *         updatedByName: _var.registry_connection_metadata_updated_by_name,
 *     },
 *     modelType: _var.registry_connection_model_type,
 *     modelVersion: _var.registry_connection_model_version,
 *     objectStatus: _var.registry_connection_object_status,
 *     objectVersion: _var.registry_connection_object_version,
 *     primarySchema: {
 *         identifier: _var.registry_connection_primary_schema_identifier,
 *         key: _var.registry_connection_primary_schema_key,
 *         modelType: _var.registry_connection_primary_schema_model_type,
 *         name: _var.registry_connection_primary_schema_name,
 *         defaultConnection: _var.registry_connection_primary_schema_default_connection,
 *         description: _var.registry_connection_primary_schema_description,
 *         externalKey: _var.registry_connection_primary_schema_external_key,
 *         isHasContainers: _var.registry_connection_primary_schema_is_has_containers,
 *         metadata: {
 *             aggregator: {
 *                 description: _var.registry_connection_primary_schema_metadata_aggregator_description,
 *                 identifier: _var.registry_connection_primary_schema_metadata_aggregator_identifier,
 *                 key: _var.registry_connection_primary_schema_metadata_aggregator_key,
 *                 name: _var.registry_connection_primary_schema_metadata_aggregator_name,
 *                 type: _var.registry_connection_primary_schema_metadata_aggregator_type,
 *             },
 *             aggregatorKey: _var.registry_connection_primary_schema_metadata_aggregator_key,
 *             createdBy: _var.registry_connection_primary_schema_metadata_created_by,
 *             createdByName: _var.registry_connection_primary_schema_metadata_created_by_name,
 *             identifierPath: _var.registry_connection_primary_schema_metadata_identifier_path,
 *             infoFields: _var.registry_connection_primary_schema_metadata_info_fields,
 *             isFavorite: _var.registry_connection_primary_schema_metadata_is_favorite,
 *             labels: _var.registry_connection_primary_schema_metadata_labels,
 *             registryVersion: _var.registry_connection_primary_schema_metadata_registry_version,
 *             timeCreated: _var.registry_connection_primary_schema_metadata_time_created,
 *             timeUpdated: _var.registry_connection_primary_schema_metadata_time_updated,
 *             updatedBy: _var.registry_connection_primary_schema_metadata_updated_by,
 *             updatedByName: _var.registry_connection_primary_schema_metadata_updated_by_name,
 *         },
 *         modelVersion: _var.registry_connection_primary_schema_model_version,
 *         objectStatus: _var.registry_connection_primary_schema_object_status,
 *         objectVersion: _var.registry_connection_primary_schema_object_version,
 *         parentRef: {
 *             parent: _var.registry_connection_primary_schema_parent_ref_parent,
 *         },
 *         resourceName: _var.registry_connection_primary_schema_resource_name,
 *     },
 *     registryMetadata: {
 *         aggregatorKey: _var.registry_connection_registry_metadata_aggregator_key,
 *         createdByUserId: oci_identity_user.test_user.id,
 *         createdByUserName: oci_identity_user.test_user.name,
 *         isFavorite: _var.registry_connection_registry_metadata_is_favorite,
 *         key: _var.registry_connection_registry_metadata_key,
 *         labels: _var.registry_connection_registry_metadata_labels,
 *         registryVersion: _var.registry_connection_registry_metadata_registry_version,
 *         timeCreated: _var.registry_connection_registry_metadata_time_created,
 *         timeUpdated: _var.registry_connection_registry_metadata_time_updated,
 *         updatedByUserId: oci_identity_user.test_user.id,
 *         updatedByUserName: oci_identity_user.test_user.name,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * RegistryConnections can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:DataConnectivity/registryConnection:RegistryConnection test_registry_connection "registries/{registryId}/connections/{connectionKey}"
 * ```
 */
export class RegistryConnection extends pulumi.CustomResource {
    /**
     * Get an existing RegistryConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryConnectionState, opts?: pulumi.CustomResourceOptions): RegistryConnection {
        return new RegistryConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:DataConnectivity/registryConnection:RegistryConnection';

    /**
     * Returns true if the given object is an instance of RegistryConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegistryConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryConnection.__pulumiType;
    }

    /**
     * (Updatable) The properties of the connection.
     */
    public readonly connectionProperties!: pulumi.Output<outputs.DataConnectivity.RegistryConnectionConnectionProperty[]>;
    /**
     * (Updatable) The description of the aggregator.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * (Updatable) The identifier of the aggregator.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * (Updatable) The default property of the connection.
     */
    public readonly isDefault!: pulumi.Output<boolean>;
    /**
     * (Updatable) The identifying key for the object.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
     */
    public readonly metadata!: pulumi.Output<outputs.DataConnectivity.RegistryConnectionMetadata>;
    /**
     * (Updatable) The object type.
     */
    public readonly modelType!: pulumi.Output<string>;
    /**
     * (Updatable) The model version of the object.
     */
    public readonly modelVersion!: pulumi.Output<string>;
    /**
     * (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     */
    public readonly objectStatus!: pulumi.Output<number>;
    /**
     * (Updatable) The version of the object that is used to track changes in the object instance.
     */
    public readonly objectVersion!: pulumi.Output<number>;
    /**
     * (Updatable) The schema object.
     */
    public readonly primarySchema!: pulumi.Output<outputs.DataConnectivity.RegistryConnectionPrimarySchema>;
    /**
     * (Updatable) All the properties of the connection in a key-value map format.
     */
    public readonly properties!: pulumi.Output<{[key: string]: any}>;
    /**
     * The registry OCID.
     */
    public readonly registryId!: pulumi.Output<string>;
    /**
     * (Updatable) Information about the object and its parent.
     */
    public readonly registryMetadata!: pulumi.Output<outputs.DataConnectivity.RegistryConnectionRegistryMetadata>;
    /**
     * (Updatable) Specific Connection Type
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a RegistryConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistryConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryConnectionArgs | RegistryConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryConnectionState | undefined;
            resourceInputs["connectionProperties"] = state ? state.connectionProperties : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["modelType"] = state ? state.modelType : undefined;
            resourceInputs["modelVersion"] = state ? state.modelVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectStatus"] = state ? state.objectStatus : undefined;
            resourceInputs["objectVersion"] = state ? state.objectVersion : undefined;
            resourceInputs["primarySchema"] = state ? state.primarySchema : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["registryId"] = state ? state.registryId : undefined;
            resourceInputs["registryMetadata"] = state ? state.registryMetadata : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as RegistryConnectionArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.properties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'properties'");
            }
            if ((!args || args.registryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["connectionProperties"] = args ? args.connectionProperties : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["modelType"] = args ? args.modelType : undefined;
            resourceInputs["modelVersion"] = args ? args.modelVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectStatus"] = args ? args.objectStatus : undefined;
            resourceInputs["objectVersion"] = args ? args.objectVersion : undefined;
            resourceInputs["primarySchema"] = args ? args.primarySchema : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["registryId"] = args ? args.registryId : undefined;
            resourceInputs["registryMetadata"] = args ? args.registryMetadata : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistryConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegistryConnection resources.
 */
export interface RegistryConnectionState {
    /**
     * (Updatable) The properties of the connection.
     */
    connectionProperties?: pulumi.Input<pulumi.Input<inputs.DataConnectivity.RegistryConnectionConnectionProperty>[]>;
    /**
     * (Updatable) The description of the aggregator.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) The identifier of the aggregator.
     */
    identifier?: pulumi.Input<string>;
    /**
     * (Updatable) The default property of the connection.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * (Updatable) The identifying key for the object.
     */
    key?: pulumi.Input<string>;
    /**
     * (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
     */
    metadata?: pulumi.Input<inputs.DataConnectivity.RegistryConnectionMetadata>;
    /**
     * (Updatable) The object type.
     */
    modelType?: pulumi.Input<string>;
    /**
     * (Updatable) The model version of the object.
     */
    modelVersion?: pulumi.Input<string>;
    /**
     * (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     */
    objectStatus?: pulumi.Input<number>;
    /**
     * (Updatable) The version of the object that is used to track changes in the object instance.
     */
    objectVersion?: pulumi.Input<number>;
    /**
     * (Updatable) The schema object.
     */
    primarySchema?: pulumi.Input<inputs.DataConnectivity.RegistryConnectionPrimarySchema>;
    /**
     * (Updatable) All the properties of the connection in a key-value map format.
     */
    properties?: pulumi.Input<{[key: string]: any}>;
    /**
     * The registry OCID.
     */
    registryId?: pulumi.Input<string>;
    /**
     * (Updatable) Information about the object and its parent.
     */
    registryMetadata?: pulumi.Input<inputs.DataConnectivity.RegistryConnectionRegistryMetadata>;
    /**
     * (Updatable) Specific Connection Type
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegistryConnection resource.
 */
export interface RegistryConnectionArgs {
    /**
     * (Updatable) The properties of the connection.
     */
    connectionProperties?: pulumi.Input<pulumi.Input<inputs.DataConnectivity.RegistryConnectionConnectionProperty>[]>;
    /**
     * (Updatable) The description of the aggregator.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) The identifier of the aggregator.
     */
    identifier: pulumi.Input<string>;
    /**
     * (Updatable) The default property of the connection.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * (Updatable) The identifying key for the object.
     */
    key?: pulumi.Input<string>;
    /**
     * (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
     */
    metadata?: pulumi.Input<inputs.DataConnectivity.RegistryConnectionMetadata>;
    /**
     * (Updatable) The object type.
     */
    modelType?: pulumi.Input<string>;
    /**
     * (Updatable) The model version of the object.
     */
    modelVersion?: pulumi.Input<string>;
    /**
     * (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     */
    objectStatus?: pulumi.Input<number>;
    /**
     * (Updatable) The version of the object that is used to track changes in the object instance.
     */
    objectVersion?: pulumi.Input<number>;
    /**
     * (Updatable) The schema object.
     */
    primarySchema?: pulumi.Input<inputs.DataConnectivity.RegistryConnectionPrimarySchema>;
    /**
     * (Updatable) All the properties of the connection in a key-value map format.
     */
    properties: pulumi.Input<{[key: string]: any}>;
    /**
     * The registry OCID.
     */
    registryId: pulumi.Input<string>;
    /**
     * (Updatable) Information about the object and its parent.
     */
    registryMetadata?: pulumi.Input<inputs.DataConnectivity.RegistryConnectionRegistryMetadata>;
    /**
     * (Updatable) Specific Connection Type
     */
    type: pulumi.Input<string>;
}
