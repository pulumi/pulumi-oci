// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This resource provides the Registry Data Asset resource in Oracle Cloud Infrastructure Data Connectivity service.
 *
 * Creates a data asset with default connection.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRegistryDataAsset = new oci.dataconnectivity.RegistryDataAsset("testRegistryDataAsset", {
 *     identifier: _var.registry_data_asset_identifier,
 *     properties: _var.registry_data_asset_properties,
 *     registryId: oci_data_connectivity_registry.test_registry.id,
 *     type: _var.registry_data_asset_type,
 *     assetProperties: _var.registry_data_asset_asset_properties,
 *     defaultConnection: {
 *         identifier: _var.registry_data_asset_default_connection_identifier,
 *         key: _var.registry_data_asset_default_connection_key,
 *         name: _var.registry_data_asset_default_connection_name,
 *         connectionProperties: [{
 *             name: _var.registry_data_asset_default_connection_connection_properties_name,
 *             value: _var.registry_data_asset_default_connection_connection_properties_value,
 *         }],
 *         description: _var.registry_data_asset_default_connection_description,
 *         isDefault: _var.registry_data_asset_default_connection_is_default,
 *         metadata: {
 *             aggregator: {
 *                 description: _var.registry_data_asset_default_connection_metadata_aggregator_description,
 *                 identifier: _var.registry_data_asset_default_connection_metadata_aggregator_identifier,
 *                 key: _var.registry_data_asset_default_connection_metadata_aggregator_key,
 *                 name: _var.registry_data_asset_default_connection_metadata_aggregator_name,
 *                 type: _var.registry_data_asset_default_connection_metadata_aggregator_type,
 *             },
 *             aggregatorKey: _var.registry_data_asset_default_connection_metadata_aggregator_key,
 *             createdBy: _var.registry_data_asset_default_connection_metadata_created_by,
 *             createdByName: _var.registry_data_asset_default_connection_metadata_created_by_name,
 *             identifierPath: _var.registry_data_asset_default_connection_metadata_identifier_path,
 *             infoFields: _var.registry_data_asset_default_connection_metadata_info_fields,
 *             isFavorite: _var.registry_data_asset_default_connection_metadata_is_favorite,
 *             labels: _var.registry_data_asset_default_connection_metadata_labels,
 *             registryVersion: _var.registry_data_asset_default_connection_metadata_registry_version,
 *             timeCreated: _var.registry_data_asset_default_connection_metadata_time_created,
 *             timeUpdated: _var.registry_data_asset_default_connection_metadata_time_updated,
 *             updatedBy: _var.registry_data_asset_default_connection_metadata_updated_by,
 *             updatedByName: _var.registry_data_asset_default_connection_metadata_updated_by_name,
 *         },
 *         modelType: _var.registry_data_asset_default_connection_model_type,
 *         modelVersion: _var.registry_data_asset_default_connection_model_version,
 *         objectStatus: _var.registry_data_asset_default_connection_object_status,
 *         objectVersion: _var.registry_data_asset_default_connection_object_version,
 *         primarySchema: {
 *             identifier: _var.registry_data_asset_default_connection_primary_schema_identifier,
 *             key: _var.registry_data_asset_default_connection_primary_schema_key,
 *             modelType: _var.registry_data_asset_default_connection_primary_schema_model_type,
 *             name: _var.registry_data_asset_default_connection_primary_schema_name,
 *             defaultConnection: _var.registry_data_asset_default_connection_primary_schema_default_connection,
 *             description: _var.registry_data_asset_default_connection_primary_schema_description,
 *             externalKey: _var.registry_data_asset_default_connection_primary_schema_external_key,
 *             isHasContainers: _var.registry_data_asset_default_connection_primary_schema_is_has_containers,
 *             metadata: {
 *                 aggregator: {
 *                     description: _var.registry_data_asset_default_connection_primary_schema_metadata_aggregator_description,
 *                     identifier: _var.registry_data_asset_default_connection_primary_schema_metadata_aggregator_identifier,
 *                     key: _var.registry_data_asset_default_connection_primary_schema_metadata_aggregator_key,
 *                     name: _var.registry_data_asset_default_connection_primary_schema_metadata_aggregator_name,
 *                     type: _var.registry_data_asset_default_connection_primary_schema_metadata_aggregator_type,
 *                 },
 *                 aggregatorKey: _var.registry_data_asset_default_connection_primary_schema_metadata_aggregator_key,
 *                 createdBy: _var.registry_data_asset_default_connection_primary_schema_metadata_created_by,
 *                 createdByName: _var.registry_data_asset_default_connection_primary_schema_metadata_created_by_name,
 *                 identifierPath: _var.registry_data_asset_default_connection_primary_schema_metadata_identifier_path,
 *                 infoFields: _var.registry_data_asset_default_connection_primary_schema_metadata_info_fields,
 *                 isFavorite: _var.registry_data_asset_default_connection_primary_schema_metadata_is_favorite,
 *                 labels: _var.registry_data_asset_default_connection_primary_schema_metadata_labels,
 *                 registryVersion: _var.registry_data_asset_default_connection_primary_schema_metadata_registry_version,
 *                 timeCreated: _var.registry_data_asset_default_connection_primary_schema_metadata_time_created,
 *                 timeUpdated: _var.registry_data_asset_default_connection_primary_schema_metadata_time_updated,
 *                 updatedBy: _var.registry_data_asset_default_connection_primary_schema_metadata_updated_by,
 *                 updatedByName: _var.registry_data_asset_default_connection_primary_schema_metadata_updated_by_name,
 *             },
 *             modelVersion: _var.registry_data_asset_default_connection_primary_schema_model_version,
 *             objectStatus: _var.registry_data_asset_default_connection_primary_schema_object_status,
 *             objectVersion: _var.registry_data_asset_default_connection_primary_schema_object_version,
 *             parentRef: {
 *                 parent: _var.registry_data_asset_default_connection_primary_schema_parent_ref_parent,
 *             },
 *             resourceName: _var.registry_data_asset_default_connection_primary_schema_resource_name,
 *         },
 *         properties: _var.registry_data_asset_default_connection_properties,
 *         registryMetadata: {
 *             aggregatorKey: _var.registry_data_asset_default_connection_registry_metadata_aggregator_key,
 *             createdByUserId: oci_identity_user.test_user.id,
 *             createdByUserName: oci_identity_user.test_user.name,
 *             isFavorite: _var.registry_data_asset_default_connection_registry_metadata_is_favorite,
 *             key: _var.registry_data_asset_default_connection_registry_metadata_key,
 *             labels: _var.registry_data_asset_default_connection_registry_metadata_labels,
 *             registryVersion: _var.registry_data_asset_default_connection_registry_metadata_registry_version,
 *             timeCreated: _var.registry_data_asset_default_connection_registry_metadata_time_created,
 *             timeUpdated: _var.registry_data_asset_default_connection_registry_metadata_time_updated,
 *             updatedByUserId: oci_identity_user.test_user.id,
 *             updatedByUserName: oci_identity_user.test_user.name,
 *         },
 *         type: _var.registry_data_asset_default_connection_type,
 *     },
 *     description: _var.registry_data_asset_description,
 *     endPoints: _var.registry_data_asset_end_points,
 *     externalKey: _var.registry_data_asset_external_key,
 *     key: _var.registry_data_asset_key,
 *     metadata: {
 *         aggregator: {
 *             description: _var.registry_data_asset_metadata_aggregator_description,
 *             identifier: _var.registry_data_asset_metadata_aggregator_identifier,
 *             key: _var.registry_data_asset_metadata_aggregator_key,
 *             name: _var.registry_data_asset_metadata_aggregator_name,
 *             type: _var.registry_data_asset_metadata_aggregator_type,
 *         },
 *         aggregatorKey: _var.registry_data_asset_metadata_aggregator_key,
 *         createdBy: _var.registry_data_asset_metadata_created_by,
 *         createdByName: _var.registry_data_asset_metadata_created_by_name,
 *         identifierPath: _var.registry_data_asset_metadata_identifier_path,
 *         infoFields: _var.registry_data_asset_metadata_info_fields,
 *         isFavorite: _var.registry_data_asset_metadata_is_favorite,
 *         labels: _var.registry_data_asset_metadata_labels,
 *         registryVersion: _var.registry_data_asset_metadata_registry_version,
 *         timeCreated: _var.registry_data_asset_metadata_time_created,
 *         timeUpdated: _var.registry_data_asset_metadata_time_updated,
 *         updatedBy: _var.registry_data_asset_metadata_updated_by,
 *         updatedByName: _var.registry_data_asset_metadata_updated_by_name,
 *     },
 *     modelType: _var.registry_data_asset_model_type,
 *     modelVersion: _var.registry_data_asset_model_version,
 *     nativeTypeSystem: {
 *         description: _var.registry_data_asset_native_type_system_description,
 *         identifier: _var.registry_data_asset_native_type_system_identifier,
 *         key: _var.registry_data_asset_native_type_system_key,
 *         modelType: _var.registry_data_asset_native_type_system_model_type,
 *         modelVersion: _var.registry_data_asset_native_type_system_model_version,
 *         name: _var.registry_data_asset_native_type_system_name,
 *         objectStatus: _var.registry_data_asset_native_type_system_object_status,
 *         objectVersion: _var.registry_data_asset_native_type_system_object_version,
 *         parentRef: {
 *             parent: _var.registry_data_asset_native_type_system_parent_ref_parent,
 *         },
 *         typeMappingFrom: _var.registry_data_asset_native_type_system_type_mapping_from,
 *         typeMappingTo: _var.registry_data_asset_native_type_system_type_mapping_to,
 *         types: [{
 *             modelType: _var.registry_data_asset_native_type_system_types_model_type,
 *             configDefinition: {
 *                 configParameterDefinitions: [{
 *                     classFieldName: _var.registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_class_field_name,
 *                     defaultValue: _var.registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_default_value,
 *                     description: _var.registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_description,
 *                     isClassFieldValue: _var.registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_is_class_field_value,
 *                     isStatic: _var.registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_is_static,
 *                     parameterName: _var.registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_parameter_name,
 *                     parameterType: _var.registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_parameter_type,
 *                 }],
 *                 isContained: _var.registry_data_asset_native_type_system_types_config_definition_is_contained,
 *                 key: _var.registry_data_asset_native_type_system_types_config_definition_key,
 *                 modelType: _var.registry_data_asset_native_type_system_types_config_definition_model_type,
 *                 modelVersion: _var.registry_data_asset_native_type_system_types_config_definition_model_version,
 *                 name: _var.registry_data_asset_native_type_system_types_config_definition_name,
 *                 objectStatus: _var.registry_data_asset_native_type_system_types_config_definition_object_status,
 *                 parentRef: {
 *                     parent: _var.registry_data_asset_native_type_system_types_config_definition_parent_ref_parent,
 *                 },
 *             },
 *             description: _var.registry_data_asset_native_type_system_types_description,
 *             dtType: _var.registry_data_asset_native_type_system_types_dt_type,
 *             key: _var.registry_data_asset_native_type_system_types_key,
 *             modelVersion: _var.registry_data_asset_native_type_system_types_model_version,
 *             name: _var.registry_data_asset_native_type_system_types_name,
 *             objectStatus: _var.registry_data_asset_native_type_system_types_object_status,
 *             parentRef: {
 *                 parent: _var.registry_data_asset_native_type_system_types_parent_ref_parent,
 *             },
 *             typeSystemName: _var.registry_data_asset_native_type_system_types_type_system_name,
 *         }],
 *     },
 *     objectStatus: _var.registry_data_asset_object_status,
 *     objectVersion: _var.registry_data_asset_object_version,
 *     registryMetadata: {
 *         aggregatorKey: _var.registry_data_asset_registry_metadata_aggregator_key,
 *         createdByUserId: oci_identity_user.test_user.id,
 *         createdByUserName: oci_identity_user.test_user.name,
 *         isFavorite: _var.registry_data_asset_registry_metadata_is_favorite,
 *         key: _var.registry_data_asset_registry_metadata_key,
 *         labels: _var.registry_data_asset_registry_metadata_labels,
 *         registryVersion: _var.registry_data_asset_registry_metadata_registry_version,
 *         timeCreated: _var.registry_data_asset_registry_metadata_time_created,
 *         timeUpdated: _var.registry_data_asset_registry_metadata_time_updated,
 *         updatedByUserId: oci_identity_user.test_user.id,
 *         updatedByUserName: oci_identity_user.test_user.name,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * RegistryDataAssets can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:DataConnectivity/registryDataAsset:RegistryDataAsset test_registry_data_asset "registries/{registryId}/dataAssets/{dataAssetKey}"
 * ```
 */
export class RegistryDataAsset extends pulumi.CustomResource {
    /**
     * Get an existing RegistryDataAsset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryDataAssetState, opts?: pulumi.CustomResourceOptions): RegistryDataAsset {
        return new RegistryDataAsset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:DataConnectivity/registryDataAsset:RegistryDataAsset';

    /**
     * Returns true if the given object is an instance of RegistryDataAsset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegistryDataAsset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryDataAsset.__pulumiType;
    }

    /**
     * (Updatable) Additional properties for the data asset.
     */
    public readonly assetProperties!: pulumi.Output<{[key: string]: any}>;
    /**
     * (Updatable) The default connection key.
     */
    public readonly defaultConnection!: pulumi.Output<outputs.DataConnectivity.RegistryDataAssetDefaultConnection>;
    /**
     * (Updatable) A user defined description for the object.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * (Updatable) The list of endpoints with which this data asset is associated.
     */
    public readonly endPoints!: pulumi.Output<string[]>;
    /**
     * (Updatable) The external key for the object.
     */
    public readonly externalKey!: pulumi.Output<string>;
    /**
     * (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * (Updatable) The identifying key for the object.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
     */
    public readonly metadata!: pulumi.Output<outputs.DataConnectivity.RegistryDataAssetMetadata>;
    /**
     * (Updatable) The property which disciminates the subtypes.
     */
    public readonly modelType!: pulumi.Output<string>;
    /**
     * (Updatable) The model version of an object.
     */
    public readonly modelVersion!: pulumi.Output<string>;
    /**
     * (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * (Updatable) The type system maps from and to a type.
     */
    public readonly nativeTypeSystem!: pulumi.Output<outputs.DataConnectivity.RegistryDataAssetNativeTypeSystem>;
    /**
     * (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     */
    public readonly objectStatus!: pulumi.Output<number>;
    /**
     * (Updatable) The version of the object that is used to track changes in the object instance.
     */
    public readonly objectVersion!: pulumi.Output<number>;
    /**
     * (Updatable) All the properties for the data asset in a key-value map format.
     */
    public readonly properties!: pulumi.Output<{[key: string]: any}>;
    /**
     * The registry Ocid.
     */
    public readonly registryId!: pulumi.Output<string>;
    /**
     * (Updatable) Information about the object and its parent.
     */
    public readonly registryMetadata!: pulumi.Output<outputs.DataConnectivity.RegistryDataAssetRegistryMetadata>;
    /**
     * (Updatable) Specific DataAsset Type
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a RegistryDataAsset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistryDataAssetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryDataAssetArgs | RegistryDataAssetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryDataAssetState | undefined;
            resourceInputs["assetProperties"] = state ? state.assetProperties : undefined;
            resourceInputs["defaultConnection"] = state ? state.defaultConnection : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endPoints"] = state ? state.endPoints : undefined;
            resourceInputs["externalKey"] = state ? state.externalKey : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["modelType"] = state ? state.modelType : undefined;
            resourceInputs["modelVersion"] = state ? state.modelVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nativeTypeSystem"] = state ? state.nativeTypeSystem : undefined;
            resourceInputs["objectStatus"] = state ? state.objectStatus : undefined;
            resourceInputs["objectVersion"] = state ? state.objectVersion : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["registryId"] = state ? state.registryId : undefined;
            resourceInputs["registryMetadata"] = state ? state.registryMetadata : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as RegistryDataAssetArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.modelType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'modelType'");
            }
            if ((!args || args.properties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'properties'");
            }
            if ((!args || args.registryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["assetProperties"] = args ? args.assetProperties : undefined;
            resourceInputs["defaultConnection"] = args ? args.defaultConnection : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["endPoints"] = args ? args.endPoints : undefined;
            resourceInputs["externalKey"] = args ? args.externalKey : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["modelType"] = args ? args.modelType : undefined;
            resourceInputs["modelVersion"] = args ? args.modelVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nativeTypeSystem"] = args ? args.nativeTypeSystem : undefined;
            resourceInputs["objectStatus"] = args ? args.objectStatus : undefined;
            resourceInputs["objectVersion"] = args ? args.objectVersion : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["registryId"] = args ? args.registryId : undefined;
            resourceInputs["registryMetadata"] = args ? args.registryMetadata : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistryDataAsset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegistryDataAsset resources.
 */
export interface RegistryDataAssetState {
    /**
     * (Updatable) Additional properties for the data asset.
     */
    assetProperties?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) The default connection key.
     */
    defaultConnection?: pulumi.Input<inputs.DataConnectivity.RegistryDataAssetDefaultConnection>;
    /**
     * (Updatable) A user defined description for the object.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) The list of endpoints with which this data asset is associated.
     */
    endPoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Updatable) The external key for the object.
     */
    externalKey?: pulumi.Input<string>;
    /**
     * (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     */
    identifier?: pulumi.Input<string>;
    /**
     * (Updatable) The identifying key for the object.
     */
    key?: pulumi.Input<string>;
    /**
     * (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
     */
    metadata?: pulumi.Input<inputs.DataConnectivity.RegistryDataAssetMetadata>;
    /**
     * (Updatable) The property which disciminates the subtypes.
     */
    modelType?: pulumi.Input<string>;
    /**
     * (Updatable) The model version of an object.
     */
    modelVersion?: pulumi.Input<string>;
    /**
     * (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * (Updatable) The type system maps from and to a type.
     */
    nativeTypeSystem?: pulumi.Input<inputs.DataConnectivity.RegistryDataAssetNativeTypeSystem>;
    /**
     * (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     */
    objectStatus?: pulumi.Input<number>;
    /**
     * (Updatable) The version of the object that is used to track changes in the object instance.
     */
    objectVersion?: pulumi.Input<number>;
    /**
     * (Updatable) All the properties for the data asset in a key-value map format.
     */
    properties?: pulumi.Input<{[key: string]: any}>;
    /**
     * The registry Ocid.
     */
    registryId?: pulumi.Input<string>;
    /**
     * (Updatable) Information about the object and its parent.
     */
    registryMetadata?: pulumi.Input<inputs.DataConnectivity.RegistryDataAssetRegistryMetadata>;
    /**
     * (Updatable) Specific DataAsset Type
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegistryDataAsset resource.
 */
export interface RegistryDataAssetArgs {
    /**
     * (Updatable) Additional properties for the data asset.
     */
    assetProperties?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) The default connection key.
     */
    defaultConnection?: pulumi.Input<inputs.DataConnectivity.RegistryDataAssetDefaultConnection>;
    /**
     * (Updatable) A user defined description for the object.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) The list of endpoints with which this data asset is associated.
     */
    endPoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Updatable) The external key for the object.
     */
    externalKey?: pulumi.Input<string>;
    /**
     * (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     */
    identifier: pulumi.Input<string>;
    /**
     * (Updatable) The identifying key for the object.
     */
    key?: pulumi.Input<string>;
    /**
     * (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
     */
    metadata?: pulumi.Input<inputs.DataConnectivity.RegistryDataAssetMetadata>;
    /**
     * (Updatable) The property which disciminates the subtypes.
     */
    modelType: pulumi.Input<string>;
    /**
     * (Updatable) The model version of an object.
     */
    modelVersion?: pulumi.Input<string>;
    /**
     * (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * (Updatable) The type system maps from and to a type.
     */
    nativeTypeSystem?: pulumi.Input<inputs.DataConnectivity.RegistryDataAssetNativeTypeSystem>;
    /**
     * (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     */
    objectStatus?: pulumi.Input<number>;
    /**
     * (Updatable) The version of the object that is used to track changes in the object instance.
     */
    objectVersion?: pulumi.Input<number>;
    /**
     * (Updatable) All the properties for the data asset in a key-value map format.
     */
    properties: pulumi.Input<{[key: string]: any}>;
    /**
     * The registry Ocid.
     */
    registryId: pulumi.Input<string>;
    /**
     * (Updatable) Information about the object and its parent.
     */
    registryMetadata?: pulumi.Input<inputs.DataConnectivity.RegistryDataAssetRegistryMetadata>;
    /**
     * (Updatable) Specific DataAsset Type
     */
    type: pulumi.Input<string>;
}
