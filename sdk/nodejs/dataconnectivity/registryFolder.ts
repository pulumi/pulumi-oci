// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This resource provides the Registry Folder resource in Oracle Cloud Infrastructure Data Connectivity service.
 *
 * Creates a folder under a specefied registry.
 *
 * ## Import
 *
 * RegistryFolders can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:DataConnectivity/registryFolder:RegistryFolder test_registry_folder "registries/{registryId}/folders/{folderKey}"
 * ```
 */
export class RegistryFolder extends pulumi.CustomResource {
    /**
     * Get an existing RegistryFolder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryFolderState, opts?: pulumi.CustomResourceOptions): RegistryFolder {
        return new RegistryFolder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:DataConnectivity/registryFolder:RegistryFolder';

    /**
     * Returns true if the given object is an instance of RegistryFolder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegistryFolder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryFolder.__pulumiType;
    }

    /**
     * (Updatable) List of data assets which belongs to this folder
     */
    public readonly dataAssets!: pulumi.Output<outputs.DataConnectivity.RegistryFolderDataAsset[]>;
    /**
     * (Updatable) User-defined description for the folder.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * (Updatable) The type of the folder.
     */
    public readonly modelType!: pulumi.Output<string>;
    /**
     * (Updatable) The model version of an object.
     */
    public readonly modelVersion!: pulumi.Output<string>;
    /**
     * (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     */
    public readonly objectStatus!: pulumi.Output<number>;
    /**
     * (Updatable) The version of the object that is used to track changes in the object instance.
     */
    public readonly objectVersion!: pulumi.Output<number>;
    /**
     * (Updatable) A reference to the object's parent.
     */
    public readonly parentRef!: pulumi.Output<outputs.DataConnectivity.RegistryFolderParentRef>;
    /**
     * The registry Ocid.
     */
    public readonly registryId!: pulumi.Output<string>;

    /**
     * Create a RegistryFolder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistryFolderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryFolderArgs | RegistryFolderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryFolderState | undefined;
            resourceInputs["dataAssets"] = state ? state.dataAssets : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["modelType"] = state ? state.modelType : undefined;
            resourceInputs["modelVersion"] = state ? state.modelVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectStatus"] = state ? state.objectStatus : undefined;
            resourceInputs["objectVersion"] = state ? state.objectVersion : undefined;
            resourceInputs["parentRef"] = state ? state.parentRef : undefined;
            resourceInputs["registryId"] = state ? state.registryId : undefined;
        } else {
            const args = argsOrState as RegistryFolderArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.registryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryId'");
            }
            resourceInputs["dataAssets"] = args ? args.dataAssets : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["modelType"] = args ? args.modelType : undefined;
            resourceInputs["modelVersion"] = args ? args.modelVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectStatus"] = args ? args.objectStatus : undefined;
            resourceInputs["objectVersion"] = args ? args.objectVersion : undefined;
            resourceInputs["parentRef"] = args ? args.parentRef : undefined;
            resourceInputs["registryId"] = args ? args.registryId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistryFolder.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegistryFolder resources.
 */
export interface RegistryFolderState {
    /**
     * (Updatable) List of data assets which belongs to this folder
     */
    dataAssets?: pulumi.Input<pulumi.Input<inputs.DataConnectivity.RegistryFolderDataAsset>[]>;
    /**
     * (Updatable) User-defined description for the folder.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     */
    identifier?: pulumi.Input<string>;
    /**
     * (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
     */
    key?: pulumi.Input<string>;
    /**
     * (Updatable) The type of the folder.
     */
    modelType?: pulumi.Input<string>;
    /**
     * (Updatable) The model version of an object.
     */
    modelVersion?: pulumi.Input<string>;
    /**
     * (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     */
    objectStatus?: pulumi.Input<number>;
    /**
     * (Updatable) The version of the object that is used to track changes in the object instance.
     */
    objectVersion?: pulumi.Input<number>;
    /**
     * (Updatable) A reference to the object's parent.
     */
    parentRef?: pulumi.Input<inputs.DataConnectivity.RegistryFolderParentRef>;
    /**
     * The registry Ocid.
     */
    registryId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegistryFolder resource.
 */
export interface RegistryFolderArgs {
    /**
     * (Updatable) List of data assets which belongs to this folder
     */
    dataAssets?: pulumi.Input<pulumi.Input<inputs.DataConnectivity.RegistryFolderDataAsset>[]>;
    /**
     * (Updatable) User-defined description for the folder.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
     */
    identifier: pulumi.Input<string>;
    /**
     * (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
     */
    key?: pulumi.Input<string>;
    /**
     * (Updatable) The type of the folder.
     */
    modelType?: pulumi.Input<string>;
    /**
     * (Updatable) The model version of an object.
     */
    modelVersion?: pulumi.Input<string>;
    /**
     * (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
     */
    objectStatus?: pulumi.Input<number>;
    /**
     * (Updatable) The version of the object that is used to track changes in the object instance.
     */
    objectVersion?: pulumi.Input<number>;
    /**
     * (Updatable) A reference to the object's parent.
     */
    parentRef?: pulumi.Input<inputs.DataConnectivity.RegistryFolderParentRef>;
    /**
     * The registry Ocid.
     */
    registryId: pulumi.Input<string>;
}
