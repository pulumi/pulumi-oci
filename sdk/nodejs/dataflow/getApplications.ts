// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Applications in Oracle Cloud Infrastructure Data Flow service.
 *
 * Lists all applications in the specified compartment. Only one parameter other than compartmentId may also be included in a query. The query must include compartmentId. If the query does not include compartmentId, or includes compartmentId but two or more other parameters an error is returned.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testApplications = oci.DataFlow.getApplications({
 *     compartmentId: compartmentId,
 *     displayName: applicationDisplayName,
 *     displayNameStartsWith: applicationDisplayNameStartsWith,
 *     ownerPrincipalId: testOwnerPrincipal.id,
 *     sparkVersion: applicationSparkVersion,
 * });
 * ```
 */
export function getApplications(args: GetApplicationsArgs, opts?: pulumi.InvokeOptions): Promise<GetApplicationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataFlow/getApplications:getApplications", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "displayNameStartsWith": args.displayNameStartsWith,
        "filters": args.filters,
        "ownerPrincipalId": args.ownerPrincipalId,
        "sparkVersion": args.sparkVersion,
    }, opts);
}

/**
 * A collection of arguments for invoking getApplications.
 */
export interface GetApplicationsArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: string;
    /**
     * The query parameter for the Spark application name.
     */
    displayName?: string;
    /**
     * The displayName prefix.
     */
    displayNameStartsWith?: string;
    filters?: inputs.DataFlow.GetApplicationsFilter[];
    /**
     * The OCID of the user who created the resource.
     */
    ownerPrincipalId?: string;
    /**
     * The Spark version utilized to run the application.
     */
    sparkVersion?: string;
}

/**
 * A collection of values returned by getApplications.
 */
export interface GetApplicationsResult {
    /**
     * The list of applications.
     */
    readonly applications: outputs.DataFlow.GetApplicationsApplication[];
    /**
     * The OCID of a compartment.
     */
    readonly compartmentId: string;
    /**
     * A user-friendly name. This name is not necessarily unique.
     */
    readonly displayName?: string;
    readonly displayNameStartsWith?: string;
    readonly filters?: outputs.DataFlow.GetApplicationsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The OCID of the user who created the resource.
     */
    readonly ownerPrincipalId?: string;
    /**
     * The Spark version utilized to run the application.
     */
    readonly sparkVersion?: string;
}
/**
 * This data source provides the list of Applications in Oracle Cloud Infrastructure Data Flow service.
 *
 * Lists all applications in the specified compartment. Only one parameter other than compartmentId may also be included in a query. The query must include compartmentId. If the query does not include compartmentId, or includes compartmentId but two or more other parameters an error is returned.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testApplications = oci.DataFlow.getApplications({
 *     compartmentId: compartmentId,
 *     displayName: applicationDisplayName,
 *     displayNameStartsWith: applicationDisplayNameStartsWith,
 *     ownerPrincipalId: testOwnerPrincipal.id,
 *     sparkVersion: applicationSparkVersion,
 * });
 * ```
 */
export function getApplicationsOutput(args: GetApplicationsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetApplicationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DataFlow/getApplications:getApplications", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "displayNameStartsWith": args.displayNameStartsWith,
        "filters": args.filters,
        "ownerPrincipalId": args.ownerPrincipalId,
        "sparkVersion": args.sparkVersion,
    }, opts);
}

/**
 * A collection of arguments for invoking getApplications.
 */
export interface GetApplicationsOutputArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * The query parameter for the Spark application name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The displayName prefix.
     */
    displayNameStartsWith?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataFlow.GetApplicationsFilterArgs>[]>;
    /**
     * The OCID of the user who created the resource.
     */
    ownerPrincipalId?: pulumi.Input<string>;
    /**
     * The Spark version utilized to run the application.
     */
    sparkVersion?: pulumi.Input<string>;
}
