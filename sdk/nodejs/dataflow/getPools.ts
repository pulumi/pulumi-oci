// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Pools in Oracle Cloud Infrastructure Data Flow service.
 *
 * Lists all pools in the specified compartment. The query must include compartmentId. The query may also include one other parameter. If the query does not include compartmentId, or includes compartmentId, but with two or more other parameters, an error is returned.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testPools = oci.DataFlow.getPools({
 *     compartmentId: compartmentId,
 *     displayName: poolDisplayName,
 *     displayNameStartsWith: poolDisplayNameStartsWith,
 *     ownerPrincipalId: testOwnerPrincipal.id,
 *     state: poolState,
 * });
 * ```
 */
export function getPools(args: GetPoolsArgs, opts?: pulumi.InvokeOptions): Promise<GetPoolsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataFlow/getPools:getPools", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "displayNameStartsWith": args.displayNameStartsWith,
        "filters": args.filters,
        "ownerPrincipalId": args.ownerPrincipalId,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getPools.
 */
export interface GetPoolsArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: string;
    /**
     * The query parameter for the Spark application name.
     */
    displayName?: string;
    /**
     * The displayName prefix.
     */
    displayNameStartsWith?: string;
    filters?: inputs.DataFlow.GetPoolsFilter[];
    /**
     * The OCID of the user who created the resource.
     */
    ownerPrincipalId?: string;
    /**
     * The LifecycleState of the pool.
     */
    state?: string;
}

/**
 * A collection of values returned by getPools.
 */
export interface GetPoolsResult {
    /**
     * The OCID of a compartment.
     */
    readonly compartmentId: string;
    /**
     * A user-friendly name. It does not have to be unique. Avoid entering confidential information.
     */
    readonly displayName?: string;
    readonly displayNameStartsWith?: string;
    readonly filters?: outputs.DataFlow.GetPoolsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The OCID of the user who created the resource.
     */
    readonly ownerPrincipalId?: string;
    /**
     * The list of pool_collection.
     */
    readonly poolCollections: outputs.DataFlow.GetPoolsPoolCollection[];
    /**
     * The current state of this pool.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Pools in Oracle Cloud Infrastructure Data Flow service.
 *
 * Lists all pools in the specified compartment. The query must include compartmentId. The query may also include one other parameter. If the query does not include compartmentId, or includes compartmentId, but with two or more other parameters, an error is returned.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testPools = oci.DataFlow.getPools({
 *     compartmentId: compartmentId,
 *     displayName: poolDisplayName,
 *     displayNameStartsWith: poolDisplayNameStartsWith,
 *     ownerPrincipalId: testOwnerPrincipal.id,
 *     state: poolState,
 * });
 * ```
 */
export function getPoolsOutput(args: GetPoolsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetPoolsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DataFlow/getPools:getPools", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "displayNameStartsWith": args.displayNameStartsWith,
        "filters": args.filters,
        "ownerPrincipalId": args.ownerPrincipalId,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getPools.
 */
export interface GetPoolsOutputArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * The query parameter for the Spark application name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The displayName prefix.
     */
    displayNameStartsWith?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataFlow.GetPoolsFilterArgs>[]>;
    /**
     * The OCID of the user who created the resource.
     */
    ownerPrincipalId?: pulumi.Input<string>;
    /**
     * The LifecycleState of the pool.
     */
    state?: pulumi.Input<string>;
}
