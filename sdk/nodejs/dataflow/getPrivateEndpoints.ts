// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Private Endpoints in Oracle Cloud Infrastructure Data Flow service.
 *
 * Lists all private endpoints in the specified compartment. The query must include compartmentId. The query may also include one other parameter. If the query does not include compartmentId, or includes compartmentId, but with two or more other parameters, an error is returned.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testPrivateEndpoints = oci.DataFlow.getPrivateEndpoints({
 *     compartmentId: compartmentId,
 *     displayName: privateEndpointDisplayName,
 *     displayNameStartsWith: privateEndpointDisplayNameStartsWith,
 *     ownerPrincipalId: ownerPrincipalId,
 *     state: privateEndpointState,
 * });
 * ```
 */
export function getPrivateEndpoints(args: GetPrivateEndpointsArgs, opts?: pulumi.InvokeOptions): Promise<GetPrivateEndpointsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataFlow/getPrivateEndpoints:getPrivateEndpoints", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "displayNameStartsWith": args.displayNameStartsWith,
        "filters": args.filters,
        "ownerPrincipalId": args.ownerPrincipalId,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getPrivateEndpoints.
 */
export interface GetPrivateEndpointsArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: string;
    /**
     * The query parameter for the Spark application name. Note: At a time only one optional filter can be used with `compartmentId` to get the list of Private Endpoint resources.
     */
    displayName?: string;
    /**
     * The displayName prefix.
     */
    displayNameStartsWith?: string;
    filters?: inputs.DataFlow.GetPrivateEndpointsFilter[];
    /**
     * The OCID of the user who created the resource.
     */
    ownerPrincipalId?: string;
    /**
     * The LifecycleState of the private endpoint.
     */
    state?: string;
}

/**
 * A collection of values returned by getPrivateEndpoints.
 */
export interface GetPrivateEndpointsResult {
    /**
     * The OCID of a compartment.
     */
    readonly compartmentId: string;
    /**
     * A user-friendly name. It does not have to be unique. Avoid entering confidential information.
     */
    readonly displayName?: string;
    readonly displayNameStartsWith?: string;
    readonly filters?: outputs.DataFlow.GetPrivateEndpointsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The OCID of the user who created the resource.
     */
    readonly ownerPrincipalId?: string;
    /**
     * The list of private_endpoint_collection.
     */
    readonly privateEndpointCollections: outputs.DataFlow.GetPrivateEndpointsPrivateEndpointCollection[];
    /**
     * The current state of this private endpoint.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Private Endpoints in Oracle Cloud Infrastructure Data Flow service.
 *
 * Lists all private endpoints in the specified compartment. The query must include compartmentId. The query may also include one other parameter. If the query does not include compartmentId, or includes compartmentId, but with two or more other parameters, an error is returned.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testPrivateEndpoints = oci.DataFlow.getPrivateEndpoints({
 *     compartmentId: compartmentId,
 *     displayName: privateEndpointDisplayName,
 *     displayNameStartsWith: privateEndpointDisplayNameStartsWith,
 *     ownerPrincipalId: ownerPrincipalId,
 *     state: privateEndpointState,
 * });
 * ```
 */
export function getPrivateEndpointsOutput(args: GetPrivateEndpointsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPrivateEndpointsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DataFlow/getPrivateEndpoints:getPrivateEndpoints", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "displayNameStartsWith": args.displayNameStartsWith,
        "filters": args.filters,
        "ownerPrincipalId": args.ownerPrincipalId,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getPrivateEndpoints.
 */
export interface GetPrivateEndpointsOutputArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * The query parameter for the Spark application name. Note: At a time only one optional filter can be used with `compartmentId` to get the list of Private Endpoint resources.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The displayName prefix.
     */
    displayNameStartsWith?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataFlow.GetPrivateEndpointsFilterArgs>[]>;
    /**
     * The OCID of the user who created the resource.
     */
    ownerPrincipalId?: pulumi.Input<string>;
    /**
     * The LifecycleState of the private endpoint.
     */
    state?: pulumi.Input<string>;
}
