// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Sql Endpoints in Oracle Cloud Infrastructure Data Flow service.
 *
 * Lists all Sql Endpoints in the specified compartment.
 * The query must include compartmentId or sqlEndpointId.
 * If the query does not include either compartmentId or sqlEndpointId, an error is returned.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSqlEndpoints = oci.DataFlow.getSqlEndpoints({
 *     compartmentId: compartmentId,
 *     displayName: sqlEndpointDisplayName,
 *     sqlEndpointId: testSqlEndpoint.id,
 *     state: sqlEndpointState,
 * });
 * ```
 */
export function getSqlEndpoints(args?: GetSqlEndpointsArgs, opts?: pulumi.InvokeOptions): Promise<GetSqlEndpointsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataFlow/getSqlEndpoints:getSqlEndpoints", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "sqlEndpointId": args.sqlEndpointId,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getSqlEndpoints.
 */
export interface GetSqlEndpointsArgs {
    /**
     * The OCID of the compartment in which to query resources.
     */
    compartmentId?: string;
    /**
     * The query parameter for the Spark application name.
     */
    displayName?: string;
    filters?: inputs.DataFlow.GetSqlEndpointsFilter[];
    /**
     * The unique id of the SQL Endpoint.
     */
    sqlEndpointId?: string;
    /**
     * A filter to return only those resources whose sqlEndpointLifecycleState matches the given sqlEndpointLifecycleState.
     */
    state?: string;
}

/**
 * A collection of values returned by getSqlEndpoints.
 */
export interface GetSqlEndpointsResult {
    /**
     * The OCID of a compartment.
     */
    readonly compartmentId?: string;
    /**
     * The SQL Endpoint name, which can be changed.
     */
    readonly displayName?: string;
    readonly filters?: outputs.DataFlow.GetSqlEndpointsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The list of sql_endpoint_collection.
     */
    readonly sqlEndpointCollections: outputs.DataFlow.GetSqlEndpointsSqlEndpointCollection[];
    readonly sqlEndpointId?: string;
    /**
     * The current state of the Sql Endpoint.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Sql Endpoints in Oracle Cloud Infrastructure Data Flow service.
 *
 * Lists all Sql Endpoints in the specified compartment.
 * The query must include compartmentId or sqlEndpointId.
 * If the query does not include either compartmentId or sqlEndpointId, an error is returned.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSqlEndpoints = oci.DataFlow.getSqlEndpoints({
 *     compartmentId: compartmentId,
 *     displayName: sqlEndpointDisplayName,
 *     sqlEndpointId: testSqlEndpoint.id,
 *     state: sqlEndpointState,
 * });
 * ```
 */
export function getSqlEndpointsOutput(args?: GetSqlEndpointsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSqlEndpointsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DataFlow/getSqlEndpoints:getSqlEndpoints", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "sqlEndpointId": args.sqlEndpointId,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getSqlEndpoints.
 */
export interface GetSqlEndpointsOutputArgs {
    /**
     * The OCID of the compartment in which to query resources.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * The query parameter for the Spark application name.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataFlow.GetSqlEndpointsFilterArgs>[]>;
    /**
     * The unique id of the SQL Endpoint.
     */
    sqlEndpointId?: pulumi.Input<string>;
    /**
     * A filter to return only those resources whose sqlEndpointLifecycleState matches the given sqlEndpointLifecycleState.
     */
    state?: pulumi.Input<string>;
}
