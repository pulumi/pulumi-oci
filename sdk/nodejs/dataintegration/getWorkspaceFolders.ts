// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Workspace Folders in Oracle Cloud Infrastructure Data Integration service.
 *
 * Retrieves a list of folders in a project and provides options to filter the list.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testWorkspaceFolders = oci.DataIntegration.getWorkspaceFolders({
 *     workspaceId: oci_dataintegration_workspace.test_workspace.id,
 *     aggregatorKey: _var.workspace_folder_aggregator_key,
 *     fields: _var.workspace_folder_fields,
 *     identifiers: _var.workspace_folder_identifier,
 *     name: _var.workspace_folder_name,
 *     nameContains: _var.workspace_folder_name_contains,
 * });
 * ```
 */
export function getWorkspaceFolders(args: GetWorkspaceFoldersArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkspaceFoldersResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataIntegration/getWorkspaceFolders:getWorkspaceFolders", {
        "aggregatorKey": args.aggregatorKey,
        "fields": args.fields,
        "filters": args.filters,
        "identifiers": args.identifiers,
        "name": args.name,
        "nameContains": args.nameContains,
        "workspaceId": args.workspaceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getWorkspaceFolders.
 */
export interface GetWorkspaceFoldersArgs {
    /**
     * Used to filter by the project or the folder object.
     */
    aggregatorKey?: string;
    /**
     * Specifies the fields to get for an object.
     */
    fields?: string[];
    filters?: inputs.DataIntegration.GetWorkspaceFoldersFilter[];
    /**
     * Used to filter by the identifier of the object.
     */
    identifiers?: string[];
    /**
     * Used to filter by the name of the object.
     */
    name?: string;
    /**
     * This parameter can be used to filter objects by the names that match partially or fully with the given value.
     */
    nameContains?: string;
    /**
     * The workspace ID.
     */
    workspaceId: string;
}

/**
 * A collection of values returned by getWorkspaceFolders.
 */
export interface GetWorkspaceFoldersResult {
    /**
     * The owning object key for this object.
     */
    readonly aggregatorKey?: string;
    readonly fields?: string[];
    readonly filters?: outputs.DataIntegration.GetWorkspaceFoldersFilter[];
    /**
     * The list of folder_summary_collection.
     */
    readonly folderSummaryCollections: outputs.DataIntegration.GetWorkspaceFoldersFolderSummaryCollection[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The identifier of the aggregator.
     */
    readonly identifiers?: string[];
    /**
     * Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
     */
    readonly name?: string;
    readonly nameContains?: string;
    readonly workspaceId: string;
}
/**
 * This data source provides the list of Workspace Folders in Oracle Cloud Infrastructure Data Integration service.
 *
 * Retrieves a list of folders in a project and provides options to filter the list.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testWorkspaceFolders = oci.DataIntegration.getWorkspaceFolders({
 *     workspaceId: oci_dataintegration_workspace.test_workspace.id,
 *     aggregatorKey: _var.workspace_folder_aggregator_key,
 *     fields: _var.workspace_folder_fields,
 *     identifiers: _var.workspace_folder_identifier,
 *     name: _var.workspace_folder_name,
 *     nameContains: _var.workspace_folder_name_contains,
 * });
 * ```
 */
export function getWorkspaceFoldersOutput(args: GetWorkspaceFoldersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkspaceFoldersResult> {
    return pulumi.output(args).apply((a: any) => getWorkspaceFolders(a, opts))
}

/**
 * A collection of arguments for invoking getWorkspaceFolders.
 */
export interface GetWorkspaceFoldersOutputArgs {
    /**
     * Used to filter by the project or the folder object.
     */
    aggregatorKey?: pulumi.Input<string>;
    /**
     * Specifies the fields to get for an object.
     */
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataIntegration.GetWorkspaceFoldersFilterArgs>[]>;
    /**
     * Used to filter by the identifier of the object.
     */
    identifiers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used to filter by the name of the object.
     */
    name?: pulumi.Input<string>;
    /**
     * This parameter can be used to filter objects by the names that match partially or fully with the given value.
     */
    nameContains?: pulumi.Input<string>;
    /**
     * The workspace ID.
     */
    workspaceId: pulumi.Input<string>;
}
