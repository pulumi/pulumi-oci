// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Datasets in Oracle Cloud Infrastructure Data Labeling Service service.
 *
 * Returns a list of Datasets.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDatasets = oci.DataLabellingService.getDatasets({
 *     compartmentId: _var.compartment_id,
 *     annotationFormat: _var.dataset_annotation_format,
 *     displayName: _var.dataset_display_name,
 *     id: _var.dataset_id,
 *     state: _var.dataset_state,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getDatasets(args: GetDatasetsArgs, opts?: pulumi.InvokeOptions): Promise<GetDatasetsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataLabellingService/getDatasets:getDatasets", {
        "annotationFormat": args.annotationFormat,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getDatasets.
 */
export interface GetDatasetsArgs {
    /**
     * A filter to return only resources that match the entire annotation format given.
     */
    annotationFormat?: string;
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.DataLabellingService.GetDatasetsFilter[];
    /**
     * Unique Dataset OCID
     */
    id?: string;
    /**
     * A filter to return only resources whose lifecycleState matches this query param.
     */
    state?: string;
}

/**
 * A collection of values returned by getDatasets.
 */
export interface GetDatasetsResult {
    /**
     * The annotation format name required for labeling records.
     */
    readonly annotationFormat?: string;
    /**
     * The OCID of the compartment of the resource.
     */
    readonly compartmentId: string;
    /**
     * The list of dataset_collection.
     */
    readonly datasetCollections: outputs.DataLabellingService.GetDatasetsDatasetCollection[];
    /**
     * A user-friendly display name for the resource.
     */
    readonly displayName?: string;
    readonly filters?: outputs.DataLabellingService.GetDatasetsFilter[];
    /**
     * The OCID of the Dataset.
     */
    readonly id?: string;
    /**
     * The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Datasets in Oracle Cloud Infrastructure Data Labeling Service service.
 *
 * Returns a list of Datasets.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDatasets = oci.DataLabellingService.getDatasets({
 *     compartmentId: _var.compartment_id,
 *     annotationFormat: _var.dataset_annotation_format,
 *     displayName: _var.dataset_display_name,
 *     id: _var.dataset_id,
 *     state: _var.dataset_state,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getDatasetsOutput(args: GetDatasetsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatasetsResult> {
    return pulumi.output(args).apply((a: any) => getDatasets(a, opts))
}

/**
 * A collection of arguments for invoking getDatasets.
 */
export interface GetDatasetsOutputArgs {
    /**
     * A filter to return only resources that match the entire annotation format given.
     */
    annotationFormat?: pulumi.Input<string>;
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataLabellingService.GetDatasetsFilterArgs>[]>;
    /**
     * Unique Dataset OCID
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to return only resources whose lifecycleState matches this query param.
     */
    state?: pulumi.Input<string>;
}
