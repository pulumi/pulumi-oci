// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Calculate Audit Volume Available resource in Oracle Cloud Infrastructure Data Safe service.
 *
 * Calculates the volume of audit events available on the target database to be collected. Measurable up to the defined retention period of the audit target resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testCalculateAuditVolumeAvailable = new oci.datasafe.CalculateAuditVolumeAvailable("test_calculate_audit_volume_available", {
 *     auditProfileId: testAuditProfile.id,
 *     auditCollectionStartTime: calculateAuditVolumeAvailableAuditCollectionStartTime,
 *     databaseUniqueName: calculateAuditVolumeAvailableDatabaseUniqueName,
 *     trailLocations: calculateAuditVolumeAvailableTrailLocations,
 * });
 * ```
 *
 * ## Import
 *
 * CalculateAuditVolumeAvailable can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:DataSafe/calculateAuditVolumeAvailable:CalculateAuditVolumeAvailable test_calculate_audit_volume_available "id"
 * ```
 */
export class CalculateAuditVolumeAvailable extends pulumi.CustomResource {
    /**
     * Get an existing CalculateAuditVolumeAvailable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CalculateAuditVolumeAvailableState, opts?: pulumi.CustomResourceOptions): CalculateAuditVolumeAvailable {
        return new CalculateAuditVolumeAvailable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:DataSafe/calculateAuditVolumeAvailable:CalculateAuditVolumeAvailable';

    /**
     * Returns true if the given object is an instance of CalculateAuditVolumeAvailable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CalculateAuditVolumeAvailable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CalculateAuditVolumeAvailable.__pulumiType;
    }

    /**
     * The date from which the audit trail must start collecting data in UTC, in the format defined by RFC3339. If not specified, this will default to the date based on the retention period.
     */
    public readonly auditCollectionStartTime!: pulumi.Output<string>;
    /**
     * The OCID of the audit.
     */
    public readonly auditProfileId!: pulumi.Output<string>;
    /**
     * List of available audit volumes.
     */
    public /*out*/ readonly availableAuditVolumes!: pulumi.Output<outputs.DataSafe.CalculateAuditVolumeAvailableAvailableAuditVolume[]>;
    /**
     * Unique name of the database associated to the peer target database.
     */
    public readonly databaseUniqueName!: pulumi.Output<string>;
    /**
     * The trail locations for which the audit data volume has to be calculated.
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly trailLocations!: pulumi.Output<string[]>;

    /**
     * Create a CalculateAuditVolumeAvailable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CalculateAuditVolumeAvailableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CalculateAuditVolumeAvailableArgs | CalculateAuditVolumeAvailableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CalculateAuditVolumeAvailableState | undefined;
            resourceInputs["auditCollectionStartTime"] = state ? state.auditCollectionStartTime : undefined;
            resourceInputs["auditProfileId"] = state ? state.auditProfileId : undefined;
            resourceInputs["availableAuditVolumes"] = state ? state.availableAuditVolumes : undefined;
            resourceInputs["databaseUniqueName"] = state ? state.databaseUniqueName : undefined;
            resourceInputs["trailLocations"] = state ? state.trailLocations : undefined;
        } else {
            const args = argsOrState as CalculateAuditVolumeAvailableArgs | undefined;
            if ((!args || args.auditProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'auditProfileId'");
            }
            resourceInputs["auditCollectionStartTime"] = args ? args.auditCollectionStartTime : undefined;
            resourceInputs["auditProfileId"] = args ? args.auditProfileId : undefined;
            resourceInputs["databaseUniqueName"] = args ? args.databaseUniqueName : undefined;
            resourceInputs["trailLocations"] = args ? args.trailLocations : undefined;
            resourceInputs["availableAuditVolumes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CalculateAuditVolumeAvailable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CalculateAuditVolumeAvailable resources.
 */
export interface CalculateAuditVolumeAvailableState {
    /**
     * The date from which the audit trail must start collecting data in UTC, in the format defined by RFC3339. If not specified, this will default to the date based on the retention period.
     */
    auditCollectionStartTime?: pulumi.Input<string>;
    /**
     * The OCID of the audit.
     */
    auditProfileId?: pulumi.Input<string>;
    /**
     * List of available audit volumes.
     */
    availableAuditVolumes?: pulumi.Input<pulumi.Input<inputs.DataSafe.CalculateAuditVolumeAvailableAvailableAuditVolume>[]>;
    /**
     * Unique name of the database associated to the peer target database.
     */
    databaseUniqueName?: pulumi.Input<string>;
    /**
     * The trail locations for which the audit data volume has to be calculated.
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    trailLocations?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CalculateAuditVolumeAvailable resource.
 */
export interface CalculateAuditVolumeAvailableArgs {
    /**
     * The date from which the audit trail must start collecting data in UTC, in the format defined by RFC3339. If not specified, this will default to the date based on the retention period.
     */
    auditCollectionStartTime?: pulumi.Input<string>;
    /**
     * The OCID of the audit.
     */
    auditProfileId: pulumi.Input<string>;
    /**
     * Unique name of the database associated to the peer target database.
     */
    databaseUniqueName?: pulumi.Input<string>;
    /**
     * The trail locations for which the audit data volume has to be calculated.
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    trailLocations?: pulumi.Input<pulumi.Input<string>[]>;
}
