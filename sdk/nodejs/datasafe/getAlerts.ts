// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Alerts in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets a list of all alerts.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testAlerts = oci.DataSafe.getAlerts({
 *     compartmentId: compartmentId,
 *     accessLevel: alertAccessLevel,
 *     compartmentIdInSubtree: alertCompartmentIdInSubtree,
 *     fields: alertField,
 *     id: alertId,
 *     scimQuery: alertScimQuery,
 * });
 * ```
 */
export function getAlerts(args: GetAlertsArgs, opts?: pulumi.InvokeOptions): Promise<GetAlertsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataSafe/getAlerts:getAlerts", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "fields": args.fields,
        "filters": args.filters,
        "id": args.id,
        "scimQuery": args.scimQuery,
    }, opts);
}

/**
 * A collection of arguments for invoking getAlerts.
 */
export interface GetAlertsArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: string;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: string;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: boolean;
    /**
     * Specifies a subset of fields to be returned in the response.
     */
    fields?: string[];
    filters?: inputs.DataSafe.GetAlertsFilter[];
    /**
     * A filter to return alert by it's OCID.
     */
    id?: string;
    /**
     * The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     *
     * **Example:** | query=(timeCreated ge '2021-06-04T01-00-26') and (targetNames eq 'target_1') query=(featureDetails.userName eq "user") and (targetNames eq "target1") Supported fields: severity status alertType targetIds targetNames operationTime lifecycleState displayName timeCreated timeUpdated featureDetails.* (* can be any field in nestedStrMap in Feature Attributes in Alert Summary. For example -  userName,object,clientHostname,osUserName,clientIPs,clientId,commandText,commandParam,clientProgram,objectType,targetOwner)
     */
    scimQuery?: string;
}

/**
 * A collection of values returned by getAlerts.
 */
export interface GetAlertsResult {
    readonly accessLevel?: string;
    /**
     * The list of alert_collection.
     */
    readonly alertCollections: outputs.DataSafe.GetAlertsAlertCollection[];
    /**
     * The OCID of the compartment that contains the alert.
     */
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly fields?: string[];
    readonly filters?: outputs.DataSafe.GetAlertsFilter[];
    /**
     * The OCID of the alert.
     */
    readonly id?: string;
    readonly scimQuery?: string;
}
/**
 * This data source provides the list of Alerts in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets a list of all alerts.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testAlerts = oci.DataSafe.getAlerts({
 *     compartmentId: compartmentId,
 *     accessLevel: alertAccessLevel,
 *     compartmentIdInSubtree: alertCompartmentIdInSubtree,
 *     fields: alertField,
 *     id: alertId,
 *     scimQuery: alertScimQuery,
 * });
 * ```
 */
export function getAlertsOutput(args: GetAlertsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAlertsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DataSafe/getAlerts:getAlerts", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "fields": args.fields,
        "filters": args.filters,
        "id": args.id,
        "scimQuery": args.scimQuery,
    }, opts);
}

/**
 * A collection of arguments for invoking getAlerts.
 */
export interface GetAlertsOutputArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    /**
     * Specifies a subset of fields to be returned in the response.
     */
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataSafe.GetAlertsFilterArgs>[]>;
    /**
     * A filter to return alert by it's OCID.
     */
    id?: pulumi.Input<string>;
    /**
     * The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     *
     * **Example:** | query=(timeCreated ge '2021-06-04T01-00-26') and (targetNames eq 'target_1') query=(featureDetails.userName eq "user") and (targetNames eq "target1") Supported fields: severity status alertType targetIds targetNames operationTime lifecycleState displayName timeCreated timeUpdated featureDetails.* (* can be any field in nestedStrMap in Feature Attributes in Alert Summary. For example -  userName,object,clientHostname,osUserName,clientIPs,clientId,commandText,commandParam,clientProgram,objectType,targetOwner)
     */
    scimQuery?: pulumi.Input<string>;
}
