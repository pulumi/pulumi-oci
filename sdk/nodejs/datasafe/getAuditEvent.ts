// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Audit Event resource in Oracle Cloud Infrastructure Data Safe service.
 *
 * The ListAuditEvents operation returns specified `compartmentId` audit Events only.
 * The list does not include any audit Events associated with the `subcompartments` of the specified `compartmentId`.
 *
 * The parameter `accessLevel` specifies whether to return only those compartments for which the
 * requestor has INSPECT permissions on at least one resource directly
 * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
 * Principal doesn't have access to even one of the child compartments. This is valid only when
 * `compartmentIdInSubtree` is set to `true`.
 *
 * The parameter `compartmentIdInSubtree` applies when you perform ListAuditEvents on the
 * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
 * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
 * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testAuditEvent = oci.DataSafe.getAuditEvent({
 *     compartmentId: compartmentId,
 *     accessLevel: auditEventAccessLevel,
 *     compartmentIdInSubtree: auditEventCompartmentIdInSubtree,
 *     scimQuery: auditEventScimQuery,
 * });
 * ```
 */
export function getAuditEvent(args: GetAuditEventArgs, opts?: pulumi.InvokeOptions): Promise<GetAuditEventResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataSafe/getAuditEvent:getAuditEvent", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "scimQuery": args.scimQuery,
    }, opts);
}

/**
 * A collection of arguments for invoking getAuditEvent.
 */
export interface GetAuditEventArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: string;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: string;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: boolean;
    /**
     * The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     *
     * **Example:** query=(operationTime ge '2021-06-04T01-00-26') and (eventName eq 'LOGON')
     */
    scimQuery?: string;
}

/**
 * A collection of values returned by getAuditEvent.
 */
export interface GetAuditEventResult {
    readonly accessLevel?: string;
    /**
     * The OCID of the compartment containing the audit event. This is the same audited target database resource comparment.
     */
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Array of audit event summary.
     */
    readonly items: outputs.DataSafe.GetAuditEventItem[];
    readonly scimQuery?: string;
}
/**
 * This data source provides details about a specific Audit Event resource in Oracle Cloud Infrastructure Data Safe service.
 *
 * The ListAuditEvents operation returns specified `compartmentId` audit Events only.
 * The list does not include any audit Events associated with the `subcompartments` of the specified `compartmentId`.
 *
 * The parameter `accessLevel` specifies whether to return only those compartments for which the
 * requestor has INSPECT permissions on at least one resource directly
 * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
 * Principal doesn't have access to even one of the child compartments. This is valid only when
 * `compartmentIdInSubtree` is set to `true`.
 *
 * The parameter `compartmentIdInSubtree` applies when you perform ListAuditEvents on the
 * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
 * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
 * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testAuditEvent = oci.DataSafe.getAuditEvent({
 *     compartmentId: compartmentId,
 *     accessLevel: auditEventAccessLevel,
 *     compartmentIdInSubtree: auditEventCompartmentIdInSubtree,
 *     scimQuery: auditEventScimQuery,
 * });
 * ```
 */
export function getAuditEventOutput(args: GetAuditEventOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAuditEventResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DataSafe/getAuditEvent:getAuditEvent", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "scimQuery": args.scimQuery,
    }, opts);
}

/**
 * A collection of arguments for invoking getAuditEvent.
 */
export interface GetAuditEventOutputArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    /**
     * The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     *
     * **Example:** query=(operationTime ge '2021-06-04T01-00-26') and (eventName eq 'LOGON')
     */
    scimQuery?: pulumi.Input<string>;
}
