// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Compatible Formats For Sensitive Type resource in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets a list of library masking formats compatible with the existing sensitive types.
 * For each sensitive type, it returns the assigned default masking format as well as
 * the other library masking formats that have the sensitiveTypeIds attribute containing
 * the OCID of the sensitive type.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testCompatibleFormatsForSensitiveType = oci.DataSafe.getCompatibleFormatsForSensitiveType({
 *     compartmentId: _var.compartment_id,
 *     accessLevel: _var.compatible_formats_for_sensitive_type_access_level,
 *     compartmentIdInSubtree: _var.compatible_formats_for_sensitive_type_compartment_id_in_subtree,
 * });
 * ```
 */
export function getCompatibleFormatsForSensitiveType(args: GetCompatibleFormatsForSensitiveTypeArgs, opts?: pulumi.InvokeOptions): Promise<GetCompatibleFormatsForSensitiveTypeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataSafe/getCompatibleFormatsForSensitiveType:getCompatibleFormatsForSensitiveType", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
    }, opts);
}

/**
 * A collection of arguments for invoking getCompatibleFormatsForSensitiveType.
 */
export interface GetCompatibleFormatsForSensitiveTypeArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: string;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: string;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: boolean;
}

/**
 * A collection of values returned by getCompatibleFormatsForSensitiveType.
 */
export interface GetCompatibleFormatsForSensitiveTypeResult {
    readonly accessLevel?: string;
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    /**
     * An array of library masking formats compatible with the existing sensitive types.
     */
    readonly formatsForSensitiveTypes: outputs.DataSafe.GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveType[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
/**
 * This data source provides details about a specific Compatible Formats For Sensitive Type resource in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets a list of library masking formats compatible with the existing sensitive types.
 * For each sensitive type, it returns the assigned default masking format as well as
 * the other library masking formats that have the sensitiveTypeIds attribute containing
 * the OCID of the sensitive type.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testCompatibleFormatsForSensitiveType = oci.DataSafe.getCompatibleFormatsForSensitiveType({
 *     compartmentId: _var.compartment_id,
 *     accessLevel: _var.compatible_formats_for_sensitive_type_access_level,
 *     compartmentIdInSubtree: _var.compatible_formats_for_sensitive_type_compartment_id_in_subtree,
 * });
 * ```
 */
export function getCompatibleFormatsForSensitiveTypeOutput(args: GetCompatibleFormatsForSensitiveTypeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCompatibleFormatsForSensitiveTypeResult> {
    return pulumi.output(args).apply((a: any) => getCompatibleFormatsForSensitiveType(a, opts))
}

/**
 * A collection of arguments for invoking getCompatibleFormatsForSensitiveType.
 */
export interface GetCompatibleFormatsForSensitiveTypeOutputArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
}
