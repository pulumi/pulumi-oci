// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Masking Analytics in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets consolidated masking analytics data based on the specified query parameters.
 * If CompartmentIdInSubtreeQueryParam is specified as true, the behaviour
 * is equivalent to accessLevel "ACCESSIBLE" by default.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMaskingAnalytics = oci.DataSafe.getMaskingAnalytics({
 *     compartmentId: _var.compartment_id,
 *     compartmentIdInSubtree: _var.masking_analytic_compartment_id_in_subtree,
 *     groupBy: _var.masking_analytic_group_by,
 *     maskingPolicyId: oci_data_safe_masking_policy.test_masking_policy.id,
 *     targetId: oci_cloud_guard_target.test_target.id,
 * });
 * ```
 */
export function getMaskingAnalytics(args: GetMaskingAnalyticsArgs, opts?: pulumi.InvokeOptions): Promise<GetMaskingAnalyticsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataSafe/getMaskingAnalytics:getMaskingAnalytics", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "groupBy": args.groupBy,
        "maskingPolicyId": args.maskingPolicyId,
        "targetId": args.targetId,
    }, opts);
}

/**
 * A collection of arguments for invoking getMaskingAnalytics.
 */
export interface GetMaskingAnalyticsArgs {
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: string;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: boolean;
    filters?: inputs.DataSafe.GetMaskingAnalyticsFilter[];
    /**
     * Attribute by which the masking analytics data should be grouped.
     */
    groupBy?: string;
    /**
     * A filter to return only the resources that match the specified masking policy OCID.
     */
    maskingPolicyId?: string;
    /**
     * A filter to return only items related to a specific target OCID.
     */
    targetId?: string;
}

/**
 * A collection of values returned by getMaskingAnalytics.
 */
export interface GetMaskingAnalyticsResult {
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly filters?: outputs.DataSafe.GetMaskingAnalyticsFilter[];
    readonly groupBy?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id?: string;
    /**
     * The list of masking_analytics_collection.
     */
    readonly maskingAnalyticsCollections?: outputs.DataSafe.GetMaskingAnalyticsMaskingAnalyticsCollection[];
    readonly maskingPolicyId?: string;
    /**
     * The OCID of the target database.
     */
    readonly targetId?: string;
}
/**
 * This data source provides the list of Masking Analytics in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets consolidated masking analytics data based on the specified query parameters.
 * If CompartmentIdInSubtreeQueryParam is specified as true, the behaviour
 * is equivalent to accessLevel "ACCESSIBLE" by default.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMaskingAnalytics = oci.DataSafe.getMaskingAnalytics({
 *     compartmentId: _var.compartment_id,
 *     compartmentIdInSubtree: _var.masking_analytic_compartment_id_in_subtree,
 *     groupBy: _var.masking_analytic_group_by,
 *     maskingPolicyId: oci_data_safe_masking_policy.test_masking_policy.id,
 *     targetId: oci_cloud_guard_target.test_target.id,
 * });
 * ```
 */
export function getMaskingAnalyticsOutput(args: GetMaskingAnalyticsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMaskingAnalyticsResult> {
    return pulumi.output(args).apply((a: any) => getMaskingAnalytics(a, opts))
}

/**
 * A collection of arguments for invoking getMaskingAnalytics.
 */
export interface GetMaskingAnalyticsOutputArgs {
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataSafe.GetMaskingAnalyticsFilterArgs>[]>;
    /**
     * Attribute by which the masking analytics data should be grouped.
     */
    groupBy?: pulumi.Input<string>;
    /**
     * A filter to return only the resources that match the specified masking policy OCID.
     */
    maskingPolicyId?: pulumi.Input<string>;
    /**
     * A filter to return only items related to a specific target OCID.
     */
    targetId?: pulumi.Input<string>;
}
