// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Masking Policy Health Reports in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets a list of masking policy health reports based on the specified query parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMaskingPolicyHealthReports = oci.DataSafe.getMaskingPolicyHealthReports({
 *     compartmentId: compartmentId,
 *     accessLevel: maskingPolicyHealthReportAccessLevel,
 *     compartmentIdInSubtree: maskingPolicyHealthReportCompartmentIdInSubtree,
 *     displayName: maskingPolicyHealthReportDisplayName,
 *     maskingPolicyHealthReportId: testMaskingPolicyHealthReport.id,
 *     maskingPolicyId: testMaskingPolicy.id,
 *     state: maskingPolicyHealthReportState,
 *     targetId: testTarget.id,
 * });
 * ```
 */
export function getMaskingPolicyHealthReports(args: GetMaskingPolicyHealthReportsArgs, opts?: pulumi.InvokeOptions): Promise<GetMaskingPolicyHealthReportsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataSafe/getMaskingPolicyHealthReports:getMaskingPolicyHealthReports", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "displayName": args.displayName,
        "filters": args.filters,
        "maskingPolicyHealthReportId": args.maskingPolicyHealthReportId,
        "maskingPolicyId": args.maskingPolicyId,
        "state": args.state,
        "targetId": args.targetId,
    }, opts);
}

/**
 * A collection of arguments for invoking getMaskingPolicyHealthReports.
 */
export interface GetMaskingPolicyHealthReportsArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: string;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: string;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: boolean;
    /**
     * A filter to return only resources that match the specified display name.
     */
    displayName?: string;
    filters?: inputs.DataSafe.GetMaskingPolicyHealthReportsFilter[];
    /**
     * A filter to return only the resources that match the specified masking policy health report OCID.
     */
    maskingPolicyHealthReportId?: string;
    /**
     * A filter to return only the resources that match the specified masking policy OCID.
     */
    maskingPolicyId?: string;
    /**
     * A filter to return only the resources that match the specified lifecycle states.
     */
    state?: string;
    /**
     * A filter to return only items related to a specific target OCID.
     */
    targetId?: string;
}

/**
 * A collection of values returned by getMaskingPolicyHealthReports.
 */
export interface GetMaskingPolicyHealthReportsResult {
    readonly accessLevel?: string;
    /**
     * The OCID of the compartment that contains the health report.
     */
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    /**
     * The display name of the health report.
     */
    readonly displayName?: string;
    readonly filters?: outputs.DataSafe.GetMaskingPolicyHealthReportsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The list of masking_policy_health_report_collection.
     */
    readonly maskingPolicyHealthReportCollections: outputs.DataSafe.GetMaskingPolicyHealthReportsMaskingPolicyHealthReportCollection[];
    readonly maskingPolicyHealthReportId?: string;
    /**
     * The OCID of the masking policy.
     */
    readonly maskingPolicyId?: string;
    /**
     * The current state of the health report.
     */
    readonly state?: string;
    /**
     * The OCID of the target database for which this report was created.
     */
    readonly targetId?: string;
}
/**
 * This data source provides the list of Masking Policy Health Reports in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets a list of masking policy health reports based on the specified query parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMaskingPolicyHealthReports = oci.DataSafe.getMaskingPolicyHealthReports({
 *     compartmentId: compartmentId,
 *     accessLevel: maskingPolicyHealthReportAccessLevel,
 *     compartmentIdInSubtree: maskingPolicyHealthReportCompartmentIdInSubtree,
 *     displayName: maskingPolicyHealthReportDisplayName,
 *     maskingPolicyHealthReportId: testMaskingPolicyHealthReport.id,
 *     maskingPolicyId: testMaskingPolicy.id,
 *     state: maskingPolicyHealthReportState,
 *     targetId: testTarget.id,
 * });
 * ```
 */
export function getMaskingPolicyHealthReportsOutput(args: GetMaskingPolicyHealthReportsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMaskingPolicyHealthReportsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DataSafe/getMaskingPolicyHealthReports:getMaskingPolicyHealthReports", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "displayName": args.displayName,
        "filters": args.filters,
        "maskingPolicyHealthReportId": args.maskingPolicyHealthReportId,
        "maskingPolicyId": args.maskingPolicyId,
        "state": args.state,
        "targetId": args.targetId,
    }, opts);
}

/**
 * A collection of arguments for invoking getMaskingPolicyHealthReports.
 */
export interface GetMaskingPolicyHealthReportsOutputArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    /**
     * A filter to return only resources that match the specified display name.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataSafe.GetMaskingPolicyHealthReportsFilterArgs>[]>;
    /**
     * A filter to return only the resources that match the specified masking policy health report OCID.
     */
    maskingPolicyHealthReportId?: pulumi.Input<string>;
    /**
     * A filter to return only the resources that match the specified masking policy OCID.
     */
    maskingPolicyId?: pulumi.Input<string>;
    /**
     * A filter to return only the resources that match the specified lifecycle states.
     */
    state?: pulumi.Input<string>;
    /**
     * A filter to return only items related to a specific target OCID.
     */
    targetId?: pulumi.Input<string>;
}
