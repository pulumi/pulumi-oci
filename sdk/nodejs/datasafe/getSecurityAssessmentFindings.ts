// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Security Assessment Findings in Oracle Cloud Infrastructure Data Safe service.
 *
 * List all the findings from all the targets in the specified compartment.
 */
export function getSecurityAssessmentFindings(args: GetSecurityAssessmentFindingsArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityAssessmentFindingsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataSafe/getSecurityAssessmentFindings:getSecurityAssessmentFindings", {
        "accessLevel": args.accessLevel,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "fields": args.fields,
        "filters": args.filters,
        "findingKey": args.findingKey,
        "isTopFinding": args.isTopFinding,
        "references": args.references,
        "scimQuery": args.scimQuery,
        "securityAssessmentId": args.securityAssessmentId,
        "severity": args.severity,
        "state": args.state,
        "targetId": args.targetId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityAssessmentFindings.
 */
export interface GetSecurityAssessmentFindingsArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: string;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: boolean;
    /**
     * Specifies a subset of fields to be returned in the response.
     */
    fields?: string[];
    filters?: inputs.DataSafe.GetSecurityAssessmentFindingsFilter[];
    /**
     * Each finding in security assessment has an associated key (think of key as a finding's name). For a given finding, the key will be the same across targets. The user can use these keys to filter the findings.
     */
    findingKey?: string;
    /**
     * A filter to return only the findings that are marked as top findings.
     */
    isTopFinding?: boolean;
    /**
     * An optional filter to return only findings that match the specified reference.
     */
    references?: string;
    /**
     * The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     *
     * **Example:** | scimQuery=(severity eq 'high') and (targetId eq 'target_1') scimQuery=(category eq "Users") and (targetId eq "target1") scimQuery=(reference eq 'CIS') and (targetId eq 'target_1')
     * Supported fields: severity findingKey reference targetId targetName isTopFinding title category remarks details summary isRiskModified
     */
    scimQuery?: string;
    /**
     * The OCID of the security assessment.
     */
    securityAssessmentId: string;
    /**
     * A filter to return only findings of a particular risk level.
     */
    severity?: string;
    /**
     * A filter to return only the findings that match the specified lifecycle states.
     */
    state?: string;
    /**
     * A filter to return only items related to a specific target OCID.
     */
    targetId?: string;
}

/**
 * A collection of values returned by getSecurityAssessmentFindings.
 */
export interface GetSecurityAssessmentFindingsResult {
    readonly accessLevel?: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly fields?: string[];
    readonly filters?: outputs.DataSafe.GetSecurityAssessmentFindingsFilter[];
    readonly findingKey?: string;
    /**
     * The list of findings.
     */
    readonly findings: outputs.DataSafe.GetSecurityAssessmentFindingsFinding[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Indicates whether a given finding is marked as topFinding or not.
     */
    readonly isTopFinding?: boolean;
    /**
     * Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, a STIG rule, or a GDPR Article/Recital.
     */
    readonly references?: string;
    readonly scimQuery?: string;
    readonly securityAssessmentId: string;
    /**
     * The severity of the finding as determined by security assessment and is same as oracleDefinedSeverity, unless modified by user.
     */
    readonly severity?: string;
    /**
     * The current state of the finding.
     */
    readonly state?: string;
    /**
     * The OCID of the target database.
     */
    readonly targetId?: string;
}
/**
 * This data source provides the list of Security Assessment Findings in Oracle Cloud Infrastructure Data Safe service.
 *
 * List all the findings from all the targets in the specified compartment.
 */
export function getSecurityAssessmentFindingsOutput(args: GetSecurityAssessmentFindingsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSecurityAssessmentFindingsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DataSafe/getSecurityAssessmentFindings:getSecurityAssessmentFindings", {
        "accessLevel": args.accessLevel,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "fields": args.fields,
        "filters": args.filters,
        "findingKey": args.findingKey,
        "isTopFinding": args.isTopFinding,
        "references": args.references,
        "scimQuery": args.scimQuery,
        "securityAssessmentId": args.securityAssessmentId,
        "severity": args.severity,
        "state": args.state,
        "targetId": args.targetId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityAssessmentFindings.
 */
export interface GetSecurityAssessmentFindingsOutputArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    /**
     * Specifies a subset of fields to be returned in the response.
     */
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataSafe.GetSecurityAssessmentFindingsFilterArgs>[]>;
    /**
     * Each finding in security assessment has an associated key (think of key as a finding's name). For a given finding, the key will be the same across targets. The user can use these keys to filter the findings.
     */
    findingKey?: pulumi.Input<string>;
    /**
     * A filter to return only the findings that are marked as top findings.
     */
    isTopFinding?: pulumi.Input<boolean>;
    /**
     * An optional filter to return only findings that match the specified reference.
     */
    references?: pulumi.Input<string>;
    /**
     * The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     *
     * **Example:** | scimQuery=(severity eq 'high') and (targetId eq 'target_1') scimQuery=(category eq "Users") and (targetId eq "target1") scimQuery=(reference eq 'CIS') and (targetId eq 'target_1')
     * Supported fields: severity findingKey reference targetId targetName isTopFinding title category remarks details summary isRiskModified
     */
    scimQuery?: pulumi.Input<string>;
    /**
     * The OCID of the security assessment.
     */
    securityAssessmentId: pulumi.Input<string>;
    /**
     * A filter to return only findings of a particular risk level.
     */
    severity?: pulumi.Input<string>;
    /**
     * A filter to return only the findings that match the specified lifecycle states.
     */
    state?: pulumi.Input<string>;
    /**
     * A filter to return only items related to a specific target OCID.
     */
    targetId?: pulumi.Input<string>;
}
