// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Security Assessment Security Feature Analytics in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets a list of Database security feature usage aggregated details in the specified compartment. This provides information about the
 * overall security controls, by returning the counting number of the target databases using the security features.
 *
 * When you perform the ListSecurityFeatureAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
 * parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
 * permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
 * root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
 * compartmentId, then "Not Authorized" is returned.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSecurityAssessmentSecurityFeatureAnalytics = oci.DataSafe.getSecurityAssessmentSecurityFeatureAnalytics({
 *     compartmentId: compartmentId,
 *     accessLevel: securityAssessmentSecurityFeatureAnalyticAccessLevel,
 *     compartmentIdInSubtree: securityAssessmentSecurityFeatureAnalyticCompartmentIdInSubtree,
 *     targetId: testTarget.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getSecurityAssessmentSecurityFeatureAnalytics(args: GetSecurityAssessmentSecurityFeatureAnalyticsArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityAssessmentSecurityFeatureAnalyticsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataSafe/getSecurityAssessmentSecurityFeatureAnalytics:getSecurityAssessmentSecurityFeatureAnalytics", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "targetId": args.targetId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityAssessmentSecurityFeatureAnalytics.
 */
export interface GetSecurityAssessmentSecurityFeatureAnalyticsArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: string;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: string;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: boolean;
    filters?: inputs.DataSafe.GetSecurityAssessmentSecurityFeatureAnalyticsFilter[];
    /**
     * A filter to return only items related to a specific target OCID.
     */
    targetId?: string;
}

/**
 * A collection of values returned by getSecurityAssessmentSecurityFeatureAnalytics.
 */
export interface GetSecurityAssessmentSecurityFeatureAnalyticsResult {
    readonly accessLevel?: string;
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly filters?: outputs.DataSafe.GetSecurityAssessmentSecurityFeatureAnalyticsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The list of security_feature_analytics_collection.
     */
    readonly securityFeatureAnalyticsCollections: outputs.DataSafe.GetSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollection[];
    readonly targetId?: string;
}
/**
 * This data source provides the list of Security Assessment Security Feature Analytics in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets a list of Database security feature usage aggregated details in the specified compartment. This provides information about the
 * overall security controls, by returning the counting number of the target databases using the security features.
 *
 * When you perform the ListSecurityFeatureAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
 * parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
 * permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
 * root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
 * compartmentId, then "Not Authorized" is returned.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSecurityAssessmentSecurityFeatureAnalytics = oci.DataSafe.getSecurityAssessmentSecurityFeatureAnalytics({
 *     compartmentId: compartmentId,
 *     accessLevel: securityAssessmentSecurityFeatureAnalyticAccessLevel,
 *     compartmentIdInSubtree: securityAssessmentSecurityFeatureAnalyticCompartmentIdInSubtree,
 *     targetId: testTarget.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getSecurityAssessmentSecurityFeatureAnalyticsOutput(args: GetSecurityAssessmentSecurityFeatureAnalyticsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSecurityAssessmentSecurityFeatureAnalyticsResult> {
    return pulumi.output(args).apply((a: any) => getSecurityAssessmentSecurityFeatureAnalytics(a, opts))
}

/**
 * A collection of arguments for invoking getSecurityAssessmentSecurityFeatureAnalytics.
 */
export interface GetSecurityAssessmentSecurityFeatureAnalyticsOutputArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataSafe.GetSecurityAssessmentSecurityFeatureAnalyticsFilterArgs>[]>;
    /**
     * A filter to return only items related to a specific target OCID.
     */
    targetId?: pulumi.Input<string>;
}
