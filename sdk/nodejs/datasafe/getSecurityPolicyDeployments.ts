// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Security Policy Deployments in Oracle Cloud Infrastructure Data Safe service.
 *
 * Retrieves a list of all security policy deployments in Data Safe.
 *
 * The ListSecurityPolicyDeployments operation returns only the security policy deployments in the specified `compartmentId`.
 *
 * The parameter `accessLevel` specifies whether to return only those compartments for which the
 * requestor has INSPECT permissions on at least one resource directly
 * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
 * Principal doesn't have access to even one of the child compartments. This is valid only when
 * `compartmentIdInSubtree` is set to `true`.
 *
 * The parameter `compartmentIdInSubtree` applies when you perform ListSecurityPolicyDeployments on the
 * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
 * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
 * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSecurityPolicyDeployments = oci.DataSafe.getSecurityPolicyDeployments({
 *     compartmentId: compartmentId,
 *     accessLevel: securityPolicyDeploymentAccessLevel,
 *     compartmentIdInSubtree: securityPolicyDeploymentCompartmentIdInSubtree,
 *     displayName: securityPolicyDeploymentDisplayName,
 *     securityPolicyDeploymentId: testSecurityPolicyDeployment.id,
 *     securityPolicyId: testSecurityPolicy.id,
 *     state: securityPolicyDeploymentState,
 *     targetId: testTarget.id,
 * });
 * ```
 */
export function getSecurityPolicyDeployments(args: GetSecurityPolicyDeploymentsArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityPolicyDeploymentsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataSafe/getSecurityPolicyDeployments:getSecurityPolicyDeployments", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "displayName": args.displayName,
        "filters": args.filters,
        "securityPolicyDeploymentId": args.securityPolicyDeploymentId,
        "securityPolicyId": args.securityPolicyId,
        "state": args.state,
        "targetId": args.targetId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityPolicyDeployments.
 */
export interface GetSecurityPolicyDeploymentsArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: string;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: string;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: boolean;
    /**
     * A filter to return only resources that match the specified display name.
     */
    displayName?: string;
    filters?: inputs.DataSafe.GetSecurityPolicyDeploymentsFilter[];
    /**
     * An optional filter to return only resources that match the specified OCID of the security policy deployment resource.
     */
    securityPolicyDeploymentId?: string;
    /**
     * An optional filter to return only resources that match the specified OCID of the security policy resource.
     */
    securityPolicyId?: string;
    /**
     * The current state of the security policy deployment.
     */
    state?: string;
    /**
     * A filter to return only items related to a specific target OCID.
     */
    targetId?: string;
}

/**
 * A collection of values returned by getSecurityPolicyDeployments.
 */
export interface GetSecurityPolicyDeploymentsResult {
    readonly accessLevel?: string;
    /**
     * The OCID of the compartment containing the security policy deployment.
     */
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    /**
     * The display name of the security policy deployment.
     */
    readonly displayName?: string;
    readonly filters?: outputs.DataSafe.GetSecurityPolicyDeploymentsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The list of security_policy_deployment_collection.
     */
    readonly securityPolicyDeploymentCollections: outputs.DataSafe.GetSecurityPolicyDeploymentsSecurityPolicyDeploymentCollection[];
    readonly securityPolicyDeploymentId?: string;
    /**
     * The OCID of the security policy corresponding to the security policy deployment.
     */
    readonly securityPolicyId?: string;
    /**
     * The current state of the security policy deployment.
     */
    readonly state?: string;
    /**
     * The OCID of the target where the security policy is deployed.
     */
    readonly targetId?: string;
}
/**
 * This data source provides the list of Security Policy Deployments in Oracle Cloud Infrastructure Data Safe service.
 *
 * Retrieves a list of all security policy deployments in Data Safe.
 *
 * The ListSecurityPolicyDeployments operation returns only the security policy deployments in the specified `compartmentId`.
 *
 * The parameter `accessLevel` specifies whether to return only those compartments for which the
 * requestor has INSPECT permissions on at least one resource directly
 * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
 * Principal doesn't have access to even one of the child compartments. This is valid only when
 * `compartmentIdInSubtree` is set to `true`.
 *
 * The parameter `compartmentIdInSubtree` applies when you perform ListSecurityPolicyDeployments on the
 * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
 * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
 * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSecurityPolicyDeployments = oci.DataSafe.getSecurityPolicyDeployments({
 *     compartmentId: compartmentId,
 *     accessLevel: securityPolicyDeploymentAccessLevel,
 *     compartmentIdInSubtree: securityPolicyDeploymentCompartmentIdInSubtree,
 *     displayName: securityPolicyDeploymentDisplayName,
 *     securityPolicyDeploymentId: testSecurityPolicyDeployment.id,
 *     securityPolicyId: testSecurityPolicy.id,
 *     state: securityPolicyDeploymentState,
 *     targetId: testTarget.id,
 * });
 * ```
 */
export function getSecurityPolicyDeploymentsOutput(args: GetSecurityPolicyDeploymentsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSecurityPolicyDeploymentsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DataSafe/getSecurityPolicyDeployments:getSecurityPolicyDeployments", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "displayName": args.displayName,
        "filters": args.filters,
        "securityPolicyDeploymentId": args.securityPolicyDeploymentId,
        "securityPolicyId": args.securityPolicyId,
        "state": args.state,
        "targetId": args.targetId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityPolicyDeployments.
 */
export interface GetSecurityPolicyDeploymentsOutputArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    /**
     * A filter to return only resources that match the specified display name.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataSafe.GetSecurityPolicyDeploymentsFilterArgs>[]>;
    /**
     * An optional filter to return only resources that match the specified OCID of the security policy deployment resource.
     */
    securityPolicyDeploymentId?: pulumi.Input<string>;
    /**
     * An optional filter to return only resources that match the specified OCID of the security policy resource.
     */
    securityPolicyId?: pulumi.Input<string>;
    /**
     * The current state of the security policy deployment.
     */
    state?: pulumi.Input<string>;
    /**
     * A filter to return only items related to a specific target OCID.
     */
    targetId?: pulumi.Input<string>;
}
