// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Security Policy Report Database Table Access Entry resource in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets a database table access entry object by identifier.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSecurityPolicyReportDatabaseTableAccessEntry = oci.DataSafe.getSecurityPolicyReportDatabaseTableAccessEntry({
 *     databaseTableAccessEntryKey: securityPolicyReportDatabaseTableAccessEntryDatabaseTableAccessEntryKey,
 *     securityPolicyReportId: testSecurityPolicyReport.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getSecurityPolicyReportDatabaseTableAccessEntry(args: GetSecurityPolicyReportDatabaseTableAccessEntryArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityPolicyReportDatabaseTableAccessEntryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataSafe/getSecurityPolicyReportDatabaseTableAccessEntry:getSecurityPolicyReportDatabaseTableAccessEntry", {
        "databaseTableAccessEntryKey": args.databaseTableAccessEntryKey,
        "securityPolicyReportId": args.securityPolicyReportId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityPolicyReportDatabaseTableAccessEntry.
 */
export interface GetSecurityPolicyReportDatabaseTableAccessEntryArgs {
    /**
     * The unique key that identifies the table access object. This is a system-generated identifier.
     */
    databaseTableAccessEntryKey: string;
    /**
     * The OCID of the security policy report resource.
     */
    securityPolicyReportId: string;
}

/**
 * A collection of values returned by getSecurityPolicyReportDatabaseTableAccessEntry.
 */
export interface GetSecurityPolicyReportDatabaseTableAccessEntryResult {
    /**
     * A non-null value in this field indicates the object through which user has access to table, possible values could be table or view.
     */
    readonly accessThroughObject: string;
    /**
     * The type of the access the user has on the table, there can be one or more from SELECT, UPDATE, INSERT, OWNER or DELETE.
     */
    readonly accessType: string;
    /**
     * Indicates whether the user has access to all the tables in the schema.
     */
    readonly areAllTablesAccessible: boolean;
    /**
     * If there are column level privileges on a table or view.
     */
    readonly columnName: string;
    readonly databaseTableAccessEntryKey: string;
    /**
     * This can be empty in case of direct grant, in case of indirect grant, this attribute displays the name of the  role which is granted to the user though which the user has access to the table.
     */
    readonly grantFromRole: string;
    /**
     * Grantee is the user who can access the table
     */
    readonly grantee: string;
    /**
     * The one who granted this privilege.
     */
    readonly grantor: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Indicates whether the table access is constrained via Oracle Database Vault.
     */
    readonly isAccessConstrainedByDatabaseVault: boolean;
    /**
     * Indicates whether the table access is constrained via Oracle Label Security.
     */
    readonly isAccessConstrainedByLabelSecurity: boolean;
    /**
     * Indicates whether the table access is constrained via Real Application Security.
     */
    readonly isAccessConstrainedByRealApplicationSecurity: boolean;
    /**
     * Indicates whether the table access is constrained via Oracle Data Redaction.
     */
    readonly isAccessConstrainedByRedaction: boolean;
    /**
     * Indicates whether the table access is constrained via Oracle Database SQL Firewall.
     */
    readonly isAccessConstrainedBySqlFirewall: boolean;
    /**
     * Indicates whether the access is constrained on a table via a view.
     */
    readonly isAccessConstrainedByView: boolean;
    /**
     * Indicates whether the table access is constrained via Virtual Private Database.
     */
    readonly isAccessConstrainedByVirtualPrivateDatabase: boolean;
    /**
     * Indicates whether the table is marked as sensitive.
     */
    readonly isSensitive: boolean;
    /**
     * The unique key that identifies the table access report. It is numeric and unique within a security policy report.
     */
    readonly key: string;
    /**
     * Name of the privilege.
     */
    readonly privilege: string;
    /**
     * Indicates whether the grantee can grant this privilege to other users. Privileges can be granted to a user or role with  GRANT_OPTION or ADMIN_OPTION
     */
    readonly privilegeGrantable: string;
    /**
     * Type of the privilege user has, this includes System Privilege, Schema Privilege, Object Privilege, Column Privilege, Owner or Schema Privilege on a schema.
     */
    readonly privilegeType: string;
    readonly securityPolicyReportId: string;
    /**
     * The name of the database table the user has access to.
     */
    readonly tableName: string;
    /**
     * The name of the schema the table belongs to.
     */
    readonly tableSchema: string;
    /**
     * The OCID of the of the  target database.
     */
    readonly targetId: string;
}
/**
 * This data source provides details about a specific Security Policy Report Database Table Access Entry resource in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets a database table access entry object by identifier.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSecurityPolicyReportDatabaseTableAccessEntry = oci.DataSafe.getSecurityPolicyReportDatabaseTableAccessEntry({
 *     databaseTableAccessEntryKey: securityPolicyReportDatabaseTableAccessEntryDatabaseTableAccessEntryKey,
 *     securityPolicyReportId: testSecurityPolicyReport.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getSecurityPolicyReportDatabaseTableAccessEntryOutput(args: GetSecurityPolicyReportDatabaseTableAccessEntryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSecurityPolicyReportDatabaseTableAccessEntryResult> {
    return pulumi.output(args).apply((a: any) => getSecurityPolicyReportDatabaseTableAccessEntry(a, opts))
}

/**
 * A collection of arguments for invoking getSecurityPolicyReportDatabaseTableAccessEntry.
 */
export interface GetSecurityPolicyReportDatabaseTableAccessEntryOutputArgs {
    /**
     * The unique key that identifies the table access object. This is a system-generated identifier.
     */
    databaseTableAccessEntryKey: pulumi.Input<string>;
    /**
     * The OCID of the security policy report resource.
     */
    securityPolicyReportId: pulumi.Input<string>;
}
