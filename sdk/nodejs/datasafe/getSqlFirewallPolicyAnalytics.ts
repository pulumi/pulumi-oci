// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Sql Firewall Policy Analytics in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets a list of aggregated SQL Firewall policy details.
 *
 * The parameter `accessLevel` specifies whether to return only those compartments for which the
 * requestor has INSPECT permissions on at least one resource directly
 * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
 * principal doesn't have access to even one of the child compartments. This is valid only when
 * `compartmentIdInSubtree` is set to `true`.
 *
 * The parameter `compartmentIdInSubtree` applies when you perform SummarizedSqlFirewallPolicyInfo on the specified
 * `compartmentId` and when it is set to true, the entire hierarchy of compartments can be returned.
 * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
 * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSqlFirewallPolicyAnalytics = oci.DataSafe.getSqlFirewallPolicyAnalytics({
 *     compartmentId: compartmentId,
 *     accessLevel: sqlFirewallPolicyAnalyticAccessLevel,
 *     compartmentIdInSubtree: sqlFirewallPolicyAnalyticCompartmentIdInSubtree,
 *     groupBies: sqlFirewallPolicyAnalyticGroupBy,
 *     securityPolicyId: testSecurityPolicy.id,
 *     state: sqlFirewallPolicyAnalyticState,
 *     timeEnded: sqlFirewallPolicyAnalyticTimeEnded,
 *     timeStarted: sqlFirewallPolicyAnalyticTimeStarted,
 * });
 * ```
 */
export function getSqlFirewallPolicyAnalytics(args: GetSqlFirewallPolicyAnalyticsArgs, opts?: pulumi.InvokeOptions): Promise<GetSqlFirewallPolicyAnalyticsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataSafe/getSqlFirewallPolicyAnalytics:getSqlFirewallPolicyAnalytics", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "groupBies": args.groupBies,
        "securityPolicyId": args.securityPolicyId,
        "state": args.state,
        "timeEnded": args.timeEnded,
        "timeStarted": args.timeStarted,
    }, opts);
}

/**
 * A collection of arguments for invoking getSqlFirewallPolicyAnalytics.
 */
export interface GetSqlFirewallPolicyAnalyticsArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: string;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: string;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: boolean;
    filters?: inputs.DataSafe.GetSqlFirewallPolicyAnalyticsFilter[];
    /**
     * The group by parameter to summarize SQL Firewall policy aggregation.
     */
    groupBies?: string[];
    /**
     * An optional filter to return only resources that match the specified OCID of the security policy resource.
     */
    securityPolicyId?: string;
    /**
     * The current state of the SQL Firewall policy.
     */
    state?: string;
    /**
     * An optional filter to return the summary of the SQL Firewall policies created before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     */
    timeEnded?: string;
    /**
     * An optional filter to return the summary of the SQL Firewall policies created after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     */
    timeStarted?: string;
}

/**
 * A collection of values returned by getSqlFirewallPolicyAnalytics.
 */
export interface GetSqlFirewallPolicyAnalyticsResult {
    readonly accessLevel?: string;
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly filters?: outputs.DataSafe.GetSqlFirewallPolicyAnalyticsFilter[];
    readonly groupBies?: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The OCID of the security policy corresponding to the SQL Firewall policy.
     */
    readonly securityPolicyId?: string;
    /**
     * The list of sql_firewall_policy_analytics_collection.
     */
    readonly sqlFirewallPolicyAnalyticsCollections: outputs.DataSafe.GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollection[];
    /**
     * The current state of the SQL Firewall policy.
     */
    readonly state?: string;
    readonly timeEnded?: string;
    readonly timeStarted?: string;
}
/**
 * This data source provides the list of Sql Firewall Policy Analytics in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets a list of aggregated SQL Firewall policy details.
 *
 * The parameter `accessLevel` specifies whether to return only those compartments for which the
 * requestor has INSPECT permissions on at least one resource directly
 * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
 * principal doesn't have access to even one of the child compartments. This is valid only when
 * `compartmentIdInSubtree` is set to `true`.
 *
 * The parameter `compartmentIdInSubtree` applies when you perform SummarizedSqlFirewallPolicyInfo on the specified
 * `compartmentId` and when it is set to true, the entire hierarchy of compartments can be returned.
 * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
 * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSqlFirewallPolicyAnalytics = oci.DataSafe.getSqlFirewallPolicyAnalytics({
 *     compartmentId: compartmentId,
 *     accessLevel: sqlFirewallPolicyAnalyticAccessLevel,
 *     compartmentIdInSubtree: sqlFirewallPolicyAnalyticCompartmentIdInSubtree,
 *     groupBies: sqlFirewallPolicyAnalyticGroupBy,
 *     securityPolicyId: testSecurityPolicy.id,
 *     state: sqlFirewallPolicyAnalyticState,
 *     timeEnded: sqlFirewallPolicyAnalyticTimeEnded,
 *     timeStarted: sqlFirewallPolicyAnalyticTimeStarted,
 * });
 * ```
 */
export function getSqlFirewallPolicyAnalyticsOutput(args: GetSqlFirewallPolicyAnalyticsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSqlFirewallPolicyAnalyticsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DataSafe/getSqlFirewallPolicyAnalytics:getSqlFirewallPolicyAnalytics", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "groupBies": args.groupBies,
        "securityPolicyId": args.securityPolicyId,
        "state": args.state,
        "timeEnded": args.timeEnded,
        "timeStarted": args.timeStarted,
    }, opts);
}

/**
 * A collection of arguments for invoking getSqlFirewallPolicyAnalytics.
 */
export interface GetSqlFirewallPolicyAnalyticsOutputArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataSafe.GetSqlFirewallPolicyAnalyticsFilterArgs>[]>;
    /**
     * The group by parameter to summarize SQL Firewall policy aggregation.
     */
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An optional filter to return only resources that match the specified OCID of the security policy resource.
     */
    securityPolicyId?: pulumi.Input<string>;
    /**
     * The current state of the SQL Firewall policy.
     */
    state?: pulumi.Input<string>;
    /**
     * An optional filter to return the summary of the SQL Firewall policies created before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     */
    timeEnded?: pulumi.Input<string>;
    /**
     * An optional filter to return the summary of the SQL Firewall policies created after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     */
    timeStarted?: pulumi.Input<string>;
}
