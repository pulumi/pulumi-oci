// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Sql Firewall Violations in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets a list of all the SQL Firewall violations captured by the firewall.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSqlFirewallViolations = oci.DataSafe.getSqlFirewallViolations({
 *     compartmentId: compartmentId,
 *     accessLevel: sqlFirewallViolationAccessLevel,
 *     compartmentIdInSubtree: sqlFirewallViolationCompartmentIdInSubtree,
 *     scimQuery: sqlFirewallViolationScimQuery,
 * });
 * ```
 */
export function getSqlFirewallViolations(args: GetSqlFirewallViolationsArgs, opts?: pulumi.InvokeOptions): Promise<GetSqlFirewallViolationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataSafe/getSqlFirewallViolations:getSqlFirewallViolations", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "scimQuery": args.scimQuery,
    }, opts);
}

/**
 * A collection of arguments for invoking getSqlFirewallViolations.
 */
export interface GetSqlFirewallViolationsArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: string;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: string;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: boolean;
    filters?: inputs.DataSafe.GetSqlFirewallViolationsFilter[];
    /**
     * The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     *
     * **Example:** query=(operationTime ge '2021-06-04T01-00-26') and (violationAction eq 'BLOCKED')
     */
    scimQuery?: string;
}

/**
 * A collection of values returned by getSqlFirewallViolations.
 */
export interface GetSqlFirewallViolationsResult {
    readonly accessLevel?: string;
    /**
     * The OCID of the compartment containing the SQL violation.
     */
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly filters?: outputs.DataSafe.GetSqlFirewallViolationsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly scimQuery?: string;
    /**
     * The list of sql_firewall_violations_collection.
     */
    readonly sqlFirewallViolationsCollections: outputs.DataSafe.GetSqlFirewallViolationsSqlFirewallViolationsCollection[];
}
/**
 * This data source provides the list of Sql Firewall Violations in Oracle Cloud Infrastructure Data Safe service.
 *
 * Gets a list of all the SQL Firewall violations captured by the firewall.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSqlFirewallViolations = oci.DataSafe.getSqlFirewallViolations({
 *     compartmentId: compartmentId,
 *     accessLevel: sqlFirewallViolationAccessLevel,
 *     compartmentIdInSubtree: sqlFirewallViolationCompartmentIdInSubtree,
 *     scimQuery: sqlFirewallViolationScimQuery,
 * });
 * ```
 */
export function getSqlFirewallViolationsOutput(args: GetSqlFirewallViolationsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSqlFirewallViolationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DataSafe/getSqlFirewallViolations:getSqlFirewallViolations", {
        "accessLevel": args.accessLevel,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "scimQuery": args.scimQuery,
    }, opts);
}

/**
 * A collection of arguments for invoking getSqlFirewallViolations.
 */
export interface GetSqlFirewallViolationsOutputArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataSafe.GetSqlFirewallViolationsFilterArgs>[]>;
    /**
     * The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
     *
     * **Example:** query=(operationTime ge '2021-06-04T01-00-26') and (violationAction eq 'BLOCKED')
     */
    scimQuery?: pulumi.Input<string>;
}
