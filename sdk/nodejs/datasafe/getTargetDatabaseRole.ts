// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export function getTargetDatabaseRole(args: GetTargetDatabaseRoleArgs, opts?: pulumi.InvokeOptions): Promise<GetTargetDatabaseRoleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataSafe/getTargetDatabaseRole:getTargetDatabaseRole", {
        "authenticationType": args.authenticationType,
        "filters": args.filters,
        "isOracleMaintained": args.isOracleMaintained,
        "roleNameContains": args.roleNameContains,
        "roleNames": args.roleNames,
        "targetDatabaseId": args.targetDatabaseId,
    }, opts);
}

/**
 * A collection of arguments for invoking getTargetDatabaseRole.
 */
export interface GetTargetDatabaseRoleArgs {
    authenticationType?: string;
    filters?: inputs.DataSafe.GetTargetDatabaseRoleFilter[];
    isOracleMaintained?: boolean;
    roleNameContains?: string;
    roleNames?: string[];
    targetDatabaseId: string;
}

/**
 * A collection of values returned by getTargetDatabaseRole.
 */
export interface GetTargetDatabaseRoleResult {
    readonly authenticationType?: string;
    readonly filters?: outputs.DataSafe.GetTargetDatabaseRoleFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly isOracleMaintained?: boolean;
    readonly roleNameContains?: string;
    readonly roleNames?: string[];
    readonly roles: outputs.DataSafe.GetTargetDatabaseRoleRole[];
    readonly targetDatabaseId: string;
}
export function getTargetDatabaseRoleOutput(args: GetTargetDatabaseRoleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTargetDatabaseRoleResult> {
    return pulumi.output(args).apply((a: any) => getTargetDatabaseRole(a, opts))
}

/**
 * A collection of arguments for invoking getTargetDatabaseRole.
 */
export interface GetTargetDatabaseRoleOutputArgs {
    authenticationType?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataSafe.GetTargetDatabaseRoleFilterArgs>[]>;
    isOracleMaintained?: pulumi.Input<boolean>;
    roleNameContains?: pulumi.Input<string>;
    roleNames?: pulumi.Input<pulumi.Input<string>[]>;
    targetDatabaseId: pulumi.Input<string>;
}
