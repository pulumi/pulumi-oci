// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Target Databases in Oracle Cloud Infrastructure Data Safe service.
 *
 * Returns the list of registered target databases in Data Safe.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testTargetDatabases = oci.DataSafe.getTargetDatabases({
 *     compartmentId: _var.compartment_id,
 *     accessLevel: _var.target_database_access_level,
 *     associatedResourceId: oci_data_safe_associated_resource.test_associated_resource.id,
 *     compartmentIdInSubtree: _var.target_database_compartment_id_in_subtree,
 *     databaseType: _var.target_database_database_type,
 *     displayName: _var.target_database_display_name,
 *     infrastructureType: _var.target_database_infrastructure_type,
 *     state: _var.target_database_state,
 *     targetDatabaseId: oci_data_safe_target_database.test_target_database.id,
 * });
 * ```
 */
export function getTargetDatabases(args: GetTargetDatabasesArgs, opts?: pulumi.InvokeOptions): Promise<GetTargetDatabasesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataSafe/getTargetDatabases:getTargetDatabases", {
        "accessLevel": args.accessLevel,
        "associatedResourceId": args.associatedResourceId,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "databaseType": args.databaseType,
        "displayName": args.displayName,
        "filters": args.filters,
        "infrastructureType": args.infrastructureType,
        "state": args.state,
        "targetDatabaseId": args.targetDatabaseId,
    }, opts);
}

/**
 * A collection of arguments for invoking getTargetDatabases.
 */
export interface GetTargetDatabasesArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: string;
    /**
     * A filter to return the target databases that are associated to the resource id passed in as a parameter value.
     */
    associatedResourceId?: string;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: string;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: boolean;
    /**
     * A filter to return target databases that match the database type of the target database.
     */
    databaseType?: string;
    /**
     * A filter to return only resources that match the specified display name.
     */
    displayName?: string;
    filters?: inputs.DataSafe.GetTargetDatabasesFilter[];
    /**
     * A filter to return target databases that match the infrastructure type of the target database.
     */
    infrastructureType?: string;
    /**
     * A filter to return the target databases that matches the current state of the target database.
     */
    state?: string;
    /**
     * A filter to return the target database that matches the specified OCID.
     */
    targetDatabaseId?: string;
}

/**
 * A collection of values returned by getTargetDatabases.
 */
export interface GetTargetDatabasesResult {
    readonly accessLevel?: string;
    readonly associatedResourceId?: string;
    /**
     * The OCID of the compartment which contains the Data Safe target database.
     */
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    /**
     * The database type.
     */
    readonly databaseType?: string;
    /**
     * The display name of the target database in Data Safe.
     */
    readonly displayName?: string;
    readonly filters?: outputs.DataSafe.GetTargetDatabasesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The infrastructure type the database is running on.
     */
    readonly infrastructureType?: string;
    /**
     * The current state of the target database in Data Safe.
     */
    readonly state?: string;
    readonly targetDatabaseId?: string;
    /**
     * The list of target_databases.
     */
    readonly targetDatabases: outputs.DataSafe.GetTargetDatabasesTargetDatabase[];
}
/**
 * This data source provides the list of Target Databases in Oracle Cloud Infrastructure Data Safe service.
 *
 * Returns the list of registered target databases in Data Safe.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testTargetDatabases = oci.DataSafe.getTargetDatabases({
 *     compartmentId: _var.compartment_id,
 *     accessLevel: _var.target_database_access_level,
 *     associatedResourceId: oci_data_safe_associated_resource.test_associated_resource.id,
 *     compartmentIdInSubtree: _var.target_database_compartment_id_in_subtree,
 *     databaseType: _var.target_database_database_type,
 *     displayName: _var.target_database_display_name,
 *     infrastructureType: _var.target_database_infrastructure_type,
 *     state: _var.target_database_state,
 *     targetDatabaseId: oci_data_safe_target_database.test_target_database.id,
 * });
 * ```
 */
export function getTargetDatabasesOutput(args: GetTargetDatabasesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTargetDatabasesResult> {
    return pulumi.output(args).apply((a: any) => getTargetDatabases(a, opts))
}

/**
 * A collection of arguments for invoking getTargetDatabases.
 */
export interface GetTargetDatabasesOutputArgs {
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * A filter to return the target databases that are associated to the resource id passed in as a parameter value.
     */
    associatedResourceId?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    /**
     * A filter to return target databases that match the database type of the target database.
     */
    databaseType?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the specified display name.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataSafe.GetTargetDatabasesFilterArgs>[]>;
    /**
     * A filter to return target databases that match the infrastructure type of the target database.
     */
    infrastructureType?: pulumi.Input<string>;
    /**
     * A filter to return the target databases that matches the current state of the target database.
     */
    state?: pulumi.Input<string>;
    /**
     * A filter to return the target database that matches the specified OCID.
     */
    targetDatabaseId?: pulumi.Input<string>;
}
