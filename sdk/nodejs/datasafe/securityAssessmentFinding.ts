// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Security Assessment Finding resource in Oracle Cloud Infrastructure Data Safe service.
 *
 *   Patches one or more findings in the specified template baseline type security assessment. Use it to modify max allowed risk level in template baseline.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSecurityAssessmentFinding = new oci.datasafe.SecurityAssessmentFinding("test_security_assessment_finding", {
 *     securityAssessmentId: testSecurityAssessment.id,
 *     patchOperations: [{
 *         operation: securityAssessmentFindingPatchOperationsOperation,
 *         selection: securityAssessmentFindingPatchOperationsSelection,
 *         value: securityAssessmentFindingPatchOperationsValue,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * SecurityAssessmentFindings can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:DataSafe/securityAssessmentFinding:SecurityAssessmentFinding test_security_assessment_finding "securityAssessments/{securityAssessmentId}/findings"
 * ```
 */
export class SecurityAssessmentFinding extends pulumi.CustomResource {
    /**
     * Get an existing SecurityAssessmentFinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityAssessmentFindingState, opts?: pulumi.CustomResourceOptions): SecurityAssessmentFinding {
        return new SecurityAssessmentFinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:DataSafe/securityAssessmentFinding:SecurityAssessmentFinding';

    /**
     * Returns true if the given object is an instance of SecurityAssessmentFinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityAssessmentFinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityAssessmentFinding.__pulumiType;
    }

    /**
     * The OCID of the assessment that generated this finding.
     */
    declare public /*out*/ readonly assessmentId: pulumi.Output<string>;
    /**
     * The category to which the finding belongs to.
     */
    declare public /*out*/ readonly category: pulumi.Output<string>;
    /**
     * The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
     */
    declare public /*out*/ readonly details: pulumi.Output<string[]>;
    /**
     * Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
     */
    declare public /*out*/ readonly hasTargetDbRiskLevelChanged: pulumi.Output<boolean>;
    /**
     * Determines if this risk level was modified by user.
     */
    declare public /*out*/ readonly isRiskModified: pulumi.Output<boolean>;
    /**
     * Indicates whether a given finding is marked as topFinding or not.
     */
    declare public /*out*/ readonly isTopFinding: pulumi.Output<boolean>;
    /**
     * User provided reason for accepting or modifying this finding if they choose to do so.
     */
    declare public /*out*/ readonly justification: pulumi.Output<string>;
    /**
     * The unique finding key. This is a system-generated identifier. To get the finding key for a finding, use ListFindings.
     */
    declare public /*out*/ readonly key: pulumi.Output<string>;
    /**
     * Details about the current state of the finding.
     */
    declare public /*out*/ readonly lifecycleDetails: pulumi.Output<string>;
    /**
     * Provides a recommended approach to take to remediate the finding reported.
     */
    declare public /*out*/ readonly oneline: pulumi.Output<string>;
    /**
     * The severity of the finding as determined by security assessment. This cannot be modified by user.
     */
    declare public /*out*/ readonly oracleDefinedSeverity: pulumi.Output<string>;
    /**
     * (Updatable)
     */
    declare public readonly patchOperations: pulumi.Output<outputs.DataSafe.SecurityAssessmentFindingPatchOperation[] | undefined>;
    /**
     * Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, a STIG rule, or a GDPR Article/Recital.
     */
    declare public /*out*/ readonly references: pulumi.Output<outputs.DataSafe.SecurityAssessmentFindingReference[]>;
    /**
     * The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
     */
    declare public /*out*/ readonly remarks: pulumi.Output<string>;
    /**
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly securityAssessmentId: pulumi.Output<string>;
    /**
     * The severity of the finding as determined by security assessment and is same as oracleDefinedSeverity, unless modified by user.
     */
    declare public /*out*/ readonly severity: pulumi.Output<string>;
    /**
     * The current state of the finding.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
     */
    declare public /*out*/ readonly summary: pulumi.Output<string>;
    /**
     * The OCID of the target database.
     */
    declare public /*out*/ readonly targetId: pulumi.Output<string>;
    /**
     * The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;
    /**
     * The time until which the change in severity(deferred / modified) of this finding is valid.
     */
    declare public /*out*/ readonly timeValidUntil: pulumi.Output<string>;
    /**
     * The short title for the finding.
     */
    declare public /*out*/ readonly title: pulumi.Output<string>;

    /**
     * Create a SecurityAssessmentFinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityAssessmentFindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityAssessmentFindingArgs | SecurityAssessmentFindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityAssessmentFindingState | undefined;
            resourceInputs["assessmentId"] = state?.assessmentId;
            resourceInputs["category"] = state?.category;
            resourceInputs["details"] = state?.details;
            resourceInputs["hasTargetDbRiskLevelChanged"] = state?.hasTargetDbRiskLevelChanged;
            resourceInputs["isRiskModified"] = state?.isRiskModified;
            resourceInputs["isTopFinding"] = state?.isTopFinding;
            resourceInputs["justification"] = state?.justification;
            resourceInputs["key"] = state?.key;
            resourceInputs["lifecycleDetails"] = state?.lifecycleDetails;
            resourceInputs["oneline"] = state?.oneline;
            resourceInputs["oracleDefinedSeverity"] = state?.oracleDefinedSeverity;
            resourceInputs["patchOperations"] = state?.patchOperations;
            resourceInputs["references"] = state?.references;
            resourceInputs["remarks"] = state?.remarks;
            resourceInputs["securityAssessmentId"] = state?.securityAssessmentId;
            resourceInputs["severity"] = state?.severity;
            resourceInputs["state"] = state?.state;
            resourceInputs["summary"] = state?.summary;
            resourceInputs["targetId"] = state?.targetId;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
            resourceInputs["timeValidUntil"] = state?.timeValidUntil;
            resourceInputs["title"] = state?.title;
        } else {
            const args = argsOrState as SecurityAssessmentFindingArgs | undefined;
            if (args?.securityAssessmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityAssessmentId'");
            }
            resourceInputs["patchOperations"] = args?.patchOperations;
            resourceInputs["securityAssessmentId"] = args?.securityAssessmentId;
            resourceInputs["assessmentId"] = undefined /*out*/;
            resourceInputs["category"] = undefined /*out*/;
            resourceInputs["details"] = undefined /*out*/;
            resourceInputs["hasTargetDbRiskLevelChanged"] = undefined /*out*/;
            resourceInputs["isRiskModified"] = undefined /*out*/;
            resourceInputs["isTopFinding"] = undefined /*out*/;
            resourceInputs["justification"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["oneline"] = undefined /*out*/;
            resourceInputs["oracleDefinedSeverity"] = undefined /*out*/;
            resourceInputs["references"] = undefined /*out*/;
            resourceInputs["remarks"] = undefined /*out*/;
            resourceInputs["severity"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["summary"] = undefined /*out*/;
            resourceInputs["targetId"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["timeValidUntil"] = undefined /*out*/;
            resourceInputs["title"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityAssessmentFinding.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityAssessmentFinding resources.
 */
export interface SecurityAssessmentFindingState {
    /**
     * The OCID of the assessment that generated this finding.
     */
    assessmentId?: pulumi.Input<string>;
    /**
     * The category to which the finding belongs to.
     */
    category?: pulumi.Input<string>;
    /**
     * The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
     */
    details?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
     */
    hasTargetDbRiskLevelChanged?: pulumi.Input<boolean>;
    /**
     * Determines if this risk level was modified by user.
     */
    isRiskModified?: pulumi.Input<boolean>;
    /**
     * Indicates whether a given finding is marked as topFinding or not.
     */
    isTopFinding?: pulumi.Input<boolean>;
    /**
     * User provided reason for accepting or modifying this finding if they choose to do so.
     */
    justification?: pulumi.Input<string>;
    /**
     * The unique finding key. This is a system-generated identifier. To get the finding key for a finding, use ListFindings.
     */
    key?: pulumi.Input<string>;
    /**
     * Details about the current state of the finding.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * Provides a recommended approach to take to remediate the finding reported.
     */
    oneline?: pulumi.Input<string>;
    /**
     * The severity of the finding as determined by security assessment. This cannot be modified by user.
     */
    oracleDefinedSeverity?: pulumi.Input<string>;
    /**
     * (Updatable)
     */
    patchOperations?: pulumi.Input<pulumi.Input<inputs.DataSafe.SecurityAssessmentFindingPatchOperation>[]>;
    /**
     * Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, a STIG rule, or a GDPR Article/Recital.
     */
    references?: pulumi.Input<pulumi.Input<inputs.DataSafe.SecurityAssessmentFindingReference>[]>;
    /**
     * The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
     */
    remarks?: pulumi.Input<string>;
    /**
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    securityAssessmentId?: pulumi.Input<string>;
    /**
     * The severity of the finding as determined by security assessment and is same as oracleDefinedSeverity, unless modified by user.
     */
    severity?: pulumi.Input<string>;
    /**
     * The current state of the finding.
     */
    state?: pulumi.Input<string>;
    /**
     * The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
     */
    summary?: pulumi.Input<string>;
    /**
     * The OCID of the target database.
     */
    targetId?: pulumi.Input<string>;
    /**
     * The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * The time until which the change in severity(deferred / modified) of this finding is valid.
     */
    timeValidUntil?: pulumi.Input<string>;
    /**
     * The short title for the finding.
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityAssessmentFinding resource.
 */
export interface SecurityAssessmentFindingArgs {
    /**
     * (Updatable)
     */
    patchOperations?: pulumi.Input<pulumi.Input<inputs.DataSafe.SecurityAssessmentFindingPatchOperation>[]>;
    /**
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    securityAssessmentId: pulumi.Input<string>;
}
