// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Sensitive Data Models Sensitive Column resource in Oracle Cloud Infrastructure Data Safe service.
 *
 * Creates a new sensitive column in the specified sensitive data model.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSensitiveDataModelsSensitiveColumn = new oci.datasafe.SensitiveDataModelsSensitiveColumn("test_sensitive_data_models_sensitive_column", {
 *     columnName: sensitiveDataModelsSensitiveColumnColumnName,
 *     object: sensitiveDataModelsSensitiveColumnObject,
 *     schemaName: sensitiveDataModelsSensitiveColumnSchemaName,
 *     sensitiveDataModelId: testSensitiveDataModel.id,
 *     appDefinedChildColumnKeys: sensitiveDataModelsSensitiveColumnAppDefinedChildColumnKeys,
 *     appName: sensitiveDataModelsSensitiveColumnAppName,
 *     dataType: sensitiveDataModelsSensitiveColumnDataType,
 *     dbDefinedChildColumnKeys: sensitiveDataModelsSensitiveColumnDbDefinedChildColumnKeys,
 *     objectType: sensitiveDataModelsSensitiveColumnObjectType,
 *     parentColumnKeys: sensitiveDataModelsSensitiveColumnParentColumnKeys,
 *     relationType: sensitiveDataModelsSensitiveColumnRelationType,
 *     sensitiveTypeId: testSensitiveType.id,
 *     status: sensitiveDataModelsSensitiveColumnStatus,
 * });
 * ```
 *
 * ## Import
 *
 * SensitiveDataModelsSensitiveColumns can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:DataSafe/sensitiveDataModelsSensitiveColumn:SensitiveDataModelsSensitiveColumn test_sensitive_data_models_sensitive_column "sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns/{sensitiveColumnKey}"
 * ```
 */
export class SensitiveDataModelsSensitiveColumn extends pulumi.CustomResource {
    /**
     * Get an existing SensitiveDataModelsSensitiveColumn resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SensitiveDataModelsSensitiveColumnState, opts?: pulumi.CustomResourceOptions): SensitiveDataModelsSensitiveColumn {
        return new SensitiveDataModelsSensitiveColumn(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:DataSafe/sensitiveDataModelsSensitiveColumn:SensitiveDataModelsSensitiveColumn';

    /**
     * Returns true if the given object is an instance of SensitiveDataModelsSensitiveColumn.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SensitiveDataModelsSensitiveColumn {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SensitiveDataModelsSensitiveColumn.__pulumiType;
    }

    /**
     * (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     */
    public readonly appDefinedChildColumnKeys!: pulumi.Output<string[]>;
    /**
     * The name of the application associated with the sensitive column. It's useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it's automatically populated with the value provided for the schemaName attribute.
     */
    public readonly appName!: pulumi.Output<string>;
    /**
     * The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it's assigned a column group. It helps identify and manage referential relationships that involve composite keys.
     */
    public /*out*/ readonly columnGroups!: pulumi.Output<string[]>;
    /**
     * The name of the sensitive column.
     */
    public readonly columnName!: pulumi.Output<string>;
    /**
     * (Updatable) The data type of the sensitive column.
     */
    public readonly dataType!: pulumi.Output<string>;
    /**
     * (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     */
    public readonly dbDefinedChildColumnKeys!: pulumi.Output<string[]>;
    /**
     * The estimated number of data values the column has in the associated database.
     */
    public /*out*/ readonly estimatedDataValueCount!: pulumi.Output<string>;
    /**
     * The unique key that identifies the sensitive column. It's numeric and unique within a sensitive data model.
     */
    public /*out*/ readonly key!: pulumi.Output<string>;
    /**
     * Details about the current state of the sensitive column.
     */
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    /**
     * The database object that contains the sensitive column.
     */
    public readonly object!: pulumi.Output<string>;
    /**
     * The type of the database object that contains the sensitive column.
     */
    public readonly objectType!: pulumi.Output<string>;
    /**
     * (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
     */
    public readonly parentColumnKeys!: pulumi.Output<string[]>;
    /**
     * (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     */
    public readonly relationType!: pulumi.Output<string>;
    /**
     * Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
     */
    public /*out*/ readonly sampleDataValues!: pulumi.Output<string[]>;
    /**
     * The database schema that contains the sensitive column.
     */
    public readonly schemaName!: pulumi.Output<string>;
    /**
     * The OCID of the sensitive data model.
     */
    public readonly sensitiveDataModelId!: pulumi.Output<string>;
    /**
     * (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
     */
    public readonly sensitiveTypeId!: pulumi.Output<string>;
    /**
     * The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
     */
    public /*out*/ readonly source!: pulumi.Output<string>;
    /**
     * The current state of the sensitive column.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;

    /**
     * Create a SensitiveDataModelsSensitiveColumn resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SensitiveDataModelsSensitiveColumnArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SensitiveDataModelsSensitiveColumnArgs | SensitiveDataModelsSensitiveColumnState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SensitiveDataModelsSensitiveColumnState | undefined;
            resourceInputs["appDefinedChildColumnKeys"] = state ? state.appDefinedChildColumnKeys : undefined;
            resourceInputs["appName"] = state ? state.appName : undefined;
            resourceInputs["columnGroups"] = state ? state.columnGroups : undefined;
            resourceInputs["columnName"] = state ? state.columnName : undefined;
            resourceInputs["dataType"] = state ? state.dataType : undefined;
            resourceInputs["dbDefinedChildColumnKeys"] = state ? state.dbDefinedChildColumnKeys : undefined;
            resourceInputs["estimatedDataValueCount"] = state ? state.estimatedDataValueCount : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["object"] = state ? state.object : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["parentColumnKeys"] = state ? state.parentColumnKeys : undefined;
            resourceInputs["relationType"] = state ? state.relationType : undefined;
            resourceInputs["sampleDataValues"] = state ? state.sampleDataValues : undefined;
            resourceInputs["schemaName"] = state ? state.schemaName : undefined;
            resourceInputs["sensitiveDataModelId"] = state ? state.sensitiveDataModelId : undefined;
            resourceInputs["sensitiveTypeId"] = state ? state.sensitiveTypeId : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
        } else {
            const args = argsOrState as SensitiveDataModelsSensitiveColumnArgs | undefined;
            if ((!args || args.columnName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'columnName'");
            }
            if ((!args || args.object === undefined) && !opts.urn) {
                throw new Error("Missing required property 'object'");
            }
            if ((!args || args.schemaName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaName'");
            }
            if ((!args || args.sensitiveDataModelId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sensitiveDataModelId'");
            }
            resourceInputs["appDefinedChildColumnKeys"] = args ? args.appDefinedChildColumnKeys : undefined;
            resourceInputs["appName"] = args ? args.appName : undefined;
            resourceInputs["columnName"] = args ? args.columnName : undefined;
            resourceInputs["dataType"] = args ? args.dataType : undefined;
            resourceInputs["dbDefinedChildColumnKeys"] = args ? args.dbDefinedChildColumnKeys : undefined;
            resourceInputs["object"] = args ? args.object : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["parentColumnKeys"] = args ? args.parentColumnKeys : undefined;
            resourceInputs["relationType"] = args ? args.relationType : undefined;
            resourceInputs["schemaName"] = args ? args.schemaName : undefined;
            resourceInputs["sensitiveDataModelId"] = args ? args.sensitiveDataModelId : undefined;
            resourceInputs["sensitiveTypeId"] = args ? args.sensitiveTypeId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["columnGroups"] = undefined /*out*/;
            resourceInputs["estimatedDataValueCount"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["sampleDataValues"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SensitiveDataModelsSensitiveColumn.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SensitiveDataModelsSensitiveColumn resources.
 */
export interface SensitiveDataModelsSensitiveColumnState {
    /**
     * (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     */
    appDefinedChildColumnKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the application associated with the sensitive column. It's useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it's automatically populated with the value provided for the schemaName attribute.
     */
    appName?: pulumi.Input<string>;
    /**
     * The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it's assigned a column group. It helps identify and manage referential relationships that involve composite keys.
     */
    columnGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the sensitive column.
     */
    columnName?: pulumi.Input<string>;
    /**
     * (Updatable) The data type of the sensitive column.
     */
    dataType?: pulumi.Input<string>;
    /**
     * (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     */
    dbDefinedChildColumnKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The estimated number of data values the column has in the associated database.
     */
    estimatedDataValueCount?: pulumi.Input<string>;
    /**
     * The unique key that identifies the sensitive column. It's numeric and unique within a sensitive data model.
     */
    key?: pulumi.Input<string>;
    /**
     * Details about the current state of the sensitive column.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * The database object that contains the sensitive column.
     */
    object?: pulumi.Input<string>;
    /**
     * The type of the database object that contains the sensitive column.
     */
    objectType?: pulumi.Input<string>;
    /**
     * (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
     */
    parentColumnKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     */
    relationType?: pulumi.Input<string>;
    /**
     * Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
     */
    sampleDataValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The database schema that contains the sensitive column.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * The OCID of the sensitive data model.
     */
    sensitiveDataModelId?: pulumi.Input<string>;
    /**
     * (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
     */
    sensitiveTypeId?: pulumi.Input<string>;
    /**
     * The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
     */
    source?: pulumi.Input<string>;
    /**
     * The current state of the sensitive column.
     */
    state?: pulumi.Input<string>;
    /**
     * (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    status?: pulumi.Input<string>;
    /**
     * The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
     */
    timeUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SensitiveDataModelsSensitiveColumn resource.
 */
export interface SensitiveDataModelsSensitiveColumnArgs {
    /**
     * (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     */
    appDefinedChildColumnKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the application associated with the sensitive column. It's useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it's automatically populated with the value provided for the schemaName attribute.
     */
    appName?: pulumi.Input<string>;
    /**
     * The name of the sensitive column.
     */
    columnName: pulumi.Input<string>;
    /**
     * (Updatable) The data type of the sensitive column.
     */
    dataType?: pulumi.Input<string>;
    /**
     * (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     */
    dbDefinedChildColumnKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The database object that contains the sensitive column.
     */
    object: pulumi.Input<string>;
    /**
     * The type of the database object that contains the sensitive column.
     */
    objectType?: pulumi.Input<string>;
    /**
     * (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
     */
    parentColumnKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     */
    relationType?: pulumi.Input<string>;
    /**
     * The database schema that contains the sensitive column.
     */
    schemaName: pulumi.Input<string>;
    /**
     * The OCID of the sensitive data model.
     */
    sensitiveDataModelId: pulumi.Input<string>;
    /**
     * (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
     */
    sensitiveTypeId?: pulumi.Input<string>;
    /**
     * (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    status?: pulumi.Input<string>;
}
