// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Containers in Oracle Cloud Infrastructure Data Science service.
 *
 * List containers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testContainers = oci.DataScience.getContainers({
 *     containerName: testContainer.name,
 *     displayName: containerDisplayName,
 *     isLatest: containerIsLatest,
 *     state: containerState,
 *     tagQueryParam: containerTagQueryParam,
 *     targetWorkload: containerTargetWorkload,
 *     usageQueryParam: containerUsageQueryParam,
 * });
 * ```
 */
export function getContainers(args?: GetContainersArgs, opts?: pulumi.InvokeOptions): Promise<GetContainersResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataScience/getContainers:getContainers", {
        "containerName": args.containerName,
        "displayName": args.displayName,
        "filters": args.filters,
        "isLatest": args.isLatest,
        "state": args.state,
        "tagQueryParam": args.tagQueryParam,
        "targetWorkload": args.targetWorkload,
        "usageQueryParam": args.usageQueryParam,
    }, opts);
}

/**
 * A collection of arguments for invoking getContainers.
 */
export interface GetContainersArgs {
    /**
     * <b>Filter</b> results by the container name.
     */
    containerName?: string;
    /**
     * <b>Filter</b> results by its user-friendly name.
     */
    displayName?: string;
    filters?: inputs.DataScience.GetContainersFilter[];
    /**
     * if true, this returns latest version of container.
     */
    isLatest?: boolean;
    /**
     * <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
     */
    state?: string;
    /**
     * <b>Filter</b> results by the container version tag.
     */
    tagQueryParam?: string;
    /**
     * <b>Filter</b> results by the target workload.
     */
    targetWorkload?: string;
    /**
     * <b>Filter</b> results by the usage.
     */
    usageQueryParam?: string;
}

/**
 * A collection of values returned by getContainers.
 */
export interface GetContainersResult {
    /**
     * The name of the container. This can be same for different tags
     */
    readonly containerName?: string;
    /**
     * The list of containers.
     */
    readonly containers: outputs.DataScience.GetContainersContainer[];
    /**
     * The display name of the container.
     */
    readonly displayName?: string;
    readonly filters?: outputs.DataScience.GetContainersFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The latest tag of the container.
     */
    readonly isLatest?: boolean;
    /**
     * Container Version LifecycleState.
     */
    readonly state?: string;
    readonly tagQueryParam?: string;
    readonly targetWorkload?: string;
    readonly usageQueryParam?: string;
}
/**
 * This data source provides the list of Containers in Oracle Cloud Infrastructure Data Science service.
 *
 * List containers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testContainers = oci.DataScience.getContainers({
 *     containerName: testContainer.name,
 *     displayName: containerDisplayName,
 *     isLatest: containerIsLatest,
 *     state: containerState,
 *     tagQueryParam: containerTagQueryParam,
 *     targetWorkload: containerTargetWorkload,
 *     usageQueryParam: containerUsageQueryParam,
 * });
 * ```
 */
export function getContainersOutput(args?: GetContainersOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetContainersResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DataScience/getContainers:getContainers", {
        "containerName": args.containerName,
        "displayName": args.displayName,
        "filters": args.filters,
        "isLatest": args.isLatest,
        "state": args.state,
        "tagQueryParam": args.tagQueryParam,
        "targetWorkload": args.targetWorkload,
        "usageQueryParam": args.usageQueryParam,
    }, opts);
}

/**
 * A collection of arguments for invoking getContainers.
 */
export interface GetContainersOutputArgs {
    /**
     * <b>Filter</b> results by the container name.
     */
    containerName?: pulumi.Input<string>;
    /**
     * <b>Filter</b> results by its user-friendly name.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataScience.GetContainersFilterArgs>[]>;
    /**
     * if true, this returns latest version of container.
     */
    isLatest?: pulumi.Input<boolean>;
    /**
     * <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
     */
    state?: pulumi.Input<string>;
    /**
     * <b>Filter</b> results by the container version tag.
     */
    tagQueryParam?: pulumi.Input<string>;
    /**
     * <b>Filter</b> results by the target workload.
     */
    targetWorkload?: pulumi.Input<string>;
    /**
     * <b>Filter</b> results by the usage.
     */
    usageQueryParam?: pulumi.Input<string>;
}
