// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Ml Applications in Oracle Cloud Infrastructure Data Science service.
 *
 * Returns a list of MlApplications.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMlApplications = oci.DataScience.getMlApplications({
 *     compartmentId: compartmentId,
 *     compartmentIdInSubtree: mlApplicationCompartmentIdInSubtree,
 *     mlApplicationId: testMlApplication.id,
 *     name: mlApplicationName,
 *     state: mlApplicationState,
 * });
 * ```
 */
export function getMlApplications(args: GetMlApplicationsArgs, opts?: pulumi.InvokeOptions): Promise<GetMlApplicationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DataScience/getMlApplications:getMlApplications", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "mlApplicationId": args.mlApplicationId,
        "name": args.name,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getMlApplications.
 */
export interface GetMlApplicationsArgs {
    /**
     * <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    compartmentId: string;
    /**
     * If it is true search must include all results from descendant compartments. Value true is allowed only if compartmentId refers to root compartment.
     */
    compartmentIdInSubtree?: boolean;
    filters?: inputs.DataScience.GetMlApplicationsFilter[];
    /**
     * unique MlApplication identifier
     */
    mlApplicationId?: string;
    /**
     * A filter to return only resources that match the entire name given.
     */
    name?: string;
    /**
     * A filter to return only resources with lifecycleState matching the given lifecycleState.
     */
    state?: string;
}

/**
 * A collection of values returned by getMlApplications.
 */
export interface GetMlApplicationsResult {
    /**
     * The OCID of the compartment where the MlApplication is created.
     */
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly filters?: outputs.DataScience.GetMlApplicationsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The list of ml_application_collection.
     */
    readonly mlApplicationCollections: outputs.DataScience.GetMlApplicationsMlApplicationCollection[];
    readonly mlApplicationId?: string;
    /**
     * The name of MlApplication. It is unique in a given tenancy.
     */
    readonly name?: string;
    /**
     * The current state of the MlApplication.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Ml Applications in Oracle Cloud Infrastructure Data Science service.
 *
 * Returns a list of MlApplications.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMlApplications = oci.DataScience.getMlApplications({
 *     compartmentId: compartmentId,
 *     compartmentIdInSubtree: mlApplicationCompartmentIdInSubtree,
 *     mlApplicationId: testMlApplication.id,
 *     name: mlApplicationName,
 *     state: mlApplicationState,
 * });
 * ```
 */
export function getMlApplicationsOutput(args: GetMlApplicationsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMlApplicationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DataScience/getMlApplications:getMlApplications", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "mlApplicationId": args.mlApplicationId,
        "name": args.name,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getMlApplications.
 */
export interface GetMlApplicationsOutputArgs {
    /**
     * <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * If it is true search must include all results from descendant compartments. Value true is allowed only if compartmentId refers to root compartment.
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    filters?: pulumi.Input<pulumi.Input<inputs.DataScience.GetMlApplicationsFilterArgs>[]>;
    /**
     * unique MlApplication identifier
     */
    mlApplicationId?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire name given.
     */
    name?: pulumi.Input<string>;
    /**
     * A filter to return only resources with lifecycleState matching the given lifecycleState.
     */
    state?: pulumi.Input<string>;
}
