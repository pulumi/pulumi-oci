// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ModelArtifactExport extends pulumi.CustomResource {
    /**
     * Get an existing ModelArtifactExport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ModelArtifactExportState, opts?: pulumi.CustomResourceOptions): ModelArtifactExport {
        return new ModelArtifactExport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:DataScience/modelArtifactExport:ModelArtifactExport';

    /**
     * Returns true if the given object is an instance of ModelArtifactExport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ModelArtifactExport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ModelArtifactExport.__pulumiType;
    }

    declare public readonly artifactSourceType: pulumi.Output<string>;
    declare public readonly modelId: pulumi.Output<string>;
    declare public readonly namespace: pulumi.Output<string>;
    declare public readonly sourceBucket: pulumi.Output<string>;
    declare public readonly sourceObjectName: pulumi.Output<string>;
    declare public readonly sourceRegion: pulumi.Output<string>;

    /**
     * Create a ModelArtifactExport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ModelArtifactExportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ModelArtifactExportArgs | ModelArtifactExportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ModelArtifactExportState | undefined;
            resourceInputs["artifactSourceType"] = state?.artifactSourceType;
            resourceInputs["modelId"] = state?.modelId;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["sourceBucket"] = state?.sourceBucket;
            resourceInputs["sourceObjectName"] = state?.sourceObjectName;
            resourceInputs["sourceRegion"] = state?.sourceRegion;
        } else {
            const args = argsOrState as ModelArtifactExportArgs | undefined;
            if (args?.artifactSourceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'artifactSourceType'");
            }
            if (args?.modelId === undefined && !opts.urn) {
                throw new Error("Missing required property 'modelId'");
            }
            if (args?.namespace === undefined && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if (args?.sourceBucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceBucket'");
            }
            if (args?.sourceObjectName === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceObjectName'");
            }
            if (args?.sourceRegion === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceRegion'");
            }
            resourceInputs["artifactSourceType"] = args?.artifactSourceType;
            resourceInputs["modelId"] = args?.modelId;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["sourceBucket"] = args?.sourceBucket;
            resourceInputs["sourceObjectName"] = args?.sourceObjectName;
            resourceInputs["sourceRegion"] = args?.sourceRegion;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ModelArtifactExport.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ModelArtifactExport resources.
 */
export interface ModelArtifactExportState {
    artifactSourceType?: pulumi.Input<string>;
    modelId?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    sourceBucket?: pulumi.Input<string>;
    sourceObjectName?: pulumi.Input<string>;
    sourceRegion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ModelArtifactExport resource.
 */
export interface ModelArtifactExportArgs {
    artifactSourceType: pulumi.Input<string>;
    modelId: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    sourceBucket: pulumi.Input<string>;
    sourceObjectName: pulumi.Input<string>;
    sourceRegion: pulumi.Input<string>;
}
