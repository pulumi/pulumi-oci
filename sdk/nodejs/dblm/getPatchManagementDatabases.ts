// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Patch Management Databases in Oracle Cloud Infrastructure Dblm service.
 *
 * Gets the list of databases
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testPatchManagementDatabases = oci.Dblm.getPatchManagementDatabases({
 *     compartmentId: compartmentId,
 *     databaseRelease: patchManagementDatabaseDatabaseRelease,
 *     databaseType: patchManagementDatabaseDatabaseType,
 *     displayName: patchManagementDatabaseDisplayName,
 *     drifterPatchId: testPatch.id,
 *     imageCompliance: patchManagementDatabaseImageCompliance,
 *     imageId: testImage.id,
 *     severityTypes: patchManagementDatabaseSeverityType,
 *     state: patchManagementDatabaseState,
 * });
 * ```
 */
export function getPatchManagementDatabases(args?: GetPatchManagementDatabasesArgs, opts?: pulumi.InvokeOptions): Promise<GetPatchManagementDatabasesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Dblm/getPatchManagementDatabases:getPatchManagementDatabases", {
        "compartmentId": args.compartmentId,
        "databaseRelease": args.databaseRelease,
        "databaseType": args.databaseType,
        "displayName": args.displayName,
        "drifterPatchId": args.drifterPatchId,
        "filters": args.filters,
        "imageCompliance": args.imageCompliance,
        "imageId": args.imageId,
        "severityTypes": args.severityTypes,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getPatchManagementDatabases.
 */
export interface GetPatchManagementDatabasesArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: string;
    /**
     * A filter to return only database that match the given release version.
     */
    databaseRelease?: string;
    /**
     * Filter by database type. Possible values Single Instance or RAC.
     */
    databaseType?: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    /**
     * A filter to return only database that have given patchId as additional patch (drifter from image version).
     */
    drifterPatchId?: number;
    filters?: inputs.Dblm.GetPatchManagementDatabasesFilter[];
    /**
     * Filter databases by image compliance status.
     */
    imageCompliance?: string;
    /**
     * Subscribed image
     */
    imageId?: string;
    /**
     * Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
     */
    severityTypes?: string[];
    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     */
    state?: string;
}

/**
 * A collection of values returned by getPatchManagementDatabases.
 */
export interface GetPatchManagementDatabasesResult {
    readonly compartmentId?: string;
    readonly databaseRelease?: string;
    /**
     * Database type.
     */
    readonly databaseType?: string;
    readonly displayName?: string;
    readonly drifterPatchId?: number;
    readonly filters?: outputs.Dblm.GetPatchManagementDatabasesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly imageCompliance?: string;
    /**
     * Image identifier.
     */
    readonly imageId?: string;
    /**
     * The list of patch_databases_collection.
     */
    readonly patchDatabasesCollections: outputs.Dblm.GetPatchManagementDatabasesPatchDatabasesCollection[];
    readonly severityTypes?: string[];
    /**
     * The current state of the database.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Patch Management Databases in Oracle Cloud Infrastructure Dblm service.
 *
 * Gets the list of databases
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testPatchManagementDatabases = oci.Dblm.getPatchManagementDatabases({
 *     compartmentId: compartmentId,
 *     databaseRelease: patchManagementDatabaseDatabaseRelease,
 *     databaseType: patchManagementDatabaseDatabaseType,
 *     displayName: patchManagementDatabaseDisplayName,
 *     drifterPatchId: testPatch.id,
 *     imageCompliance: patchManagementDatabaseImageCompliance,
 *     imageId: testImage.id,
 *     severityTypes: patchManagementDatabaseSeverityType,
 *     state: patchManagementDatabaseState,
 * });
 * ```
 */
export function getPatchManagementDatabasesOutput(args?: GetPatchManagementDatabasesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetPatchManagementDatabasesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:Dblm/getPatchManagementDatabases:getPatchManagementDatabases", {
        "compartmentId": args.compartmentId,
        "databaseRelease": args.databaseRelease,
        "databaseType": args.databaseType,
        "displayName": args.displayName,
        "drifterPatchId": args.drifterPatchId,
        "filters": args.filters,
        "imageCompliance": args.imageCompliance,
        "imageId": args.imageId,
        "severityTypes": args.severityTypes,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getPatchManagementDatabases.
 */
export interface GetPatchManagementDatabasesOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A filter to return only database that match the given release version.
     */
    databaseRelease?: pulumi.Input<string>;
    /**
     * Filter by database type. Possible values Single Instance or RAC.
     */
    databaseType?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    /**
     * A filter to return only database that have given patchId as additional patch (drifter from image version).
     */
    drifterPatchId?: pulumi.Input<number>;
    filters?: pulumi.Input<pulumi.Input<inputs.Dblm.GetPatchManagementDatabasesFilterArgs>[]>;
    /**
     * Filter databases by image compliance status.
     */
    imageCompliance?: pulumi.Input<string>;
    /**
     * Subscribed image
     */
    imageId?: pulumi.Input<string>;
    /**
     * Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
     */
    severityTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     */
    state?: pulumi.Input<string>;
}
