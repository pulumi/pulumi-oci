// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Vulnerability Resources in Oracle Cloud Infrastructure Dblm service.
 *
 * Lists the summary of vulnerable and clean resourcees
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testVulnerabilityResources = oci.Dblm.getVulnerabilityResources({
 *     compartmentId: compartmentId,
 *     cveId: testCve.id,
 *     databaseRelease: vulnerabilityResourceDatabaseRelease,
 *     displayName: vulnerabilityResourceDisplayName,
 *     patchRecommendations: vulnerabilityResourcePatchRecommendation,
 *     severityTypes: vulnerabilityResourceSeverityType,
 *     state: vulnerabilityResourceState,
 * });
 * ```
 */
export function getVulnerabilityResources(args: GetVulnerabilityResourcesArgs, opts?: pulumi.InvokeOptions): Promise<GetVulnerabilityResourcesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Dblm/getVulnerabilityResources:getVulnerabilityResources", {
        "compartmentId": args.compartmentId,
        "cveId": args.cveId,
        "databaseRelease": args.databaseRelease,
        "displayName": args.displayName,
        "filters": args.filters,
        "patchRecommendations": args.patchRecommendations,
        "severityTypes": args.severityTypes,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getVulnerabilityResources.
 */
export interface GetVulnerabilityResourcesArgs {
    /**
     * The required ID of the compartment in which to list resources.
     */
    compartmentId: string;
    /**
     * The id of a CVE.
     */
    cveId?: string;
    /**
     * A filter to return only database that match the given release version.
     */
    databaseRelease?: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.Dblm.GetVulnerabilityResourcesFilter[];
    /**
     * Filter by one or more severity types. Possible values are upToDate, patchAvailable
     */
    patchRecommendations?: string[];
    /**
     * Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
     */
    severityTypes?: string[];
    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     */
    state?: string;
}

/**
 * A collection of values returned by getVulnerabilityResources.
 */
export interface GetVulnerabilityResourcesResult {
    readonly compartmentId: string;
    readonly cveId?: string;
    readonly databaseRelease?: string;
    readonly displayName?: string;
    readonly filters?: outputs.Dblm.GetVulnerabilityResourcesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly patchRecommendations?: string[];
    readonly severityTypes?: string[];
    readonly state?: string;
    /**
     * The list of vulnerability_resource_collection.
     */
    readonly vulnerabilityResourceCollections: outputs.Dblm.GetVulnerabilityResourcesVulnerabilityResourceCollection[];
}
/**
 * This data source provides the list of Vulnerability Resources in Oracle Cloud Infrastructure Dblm service.
 *
 * Lists the summary of vulnerable and clean resourcees
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testVulnerabilityResources = oci.Dblm.getVulnerabilityResources({
 *     compartmentId: compartmentId,
 *     cveId: testCve.id,
 *     databaseRelease: vulnerabilityResourceDatabaseRelease,
 *     displayName: vulnerabilityResourceDisplayName,
 *     patchRecommendations: vulnerabilityResourcePatchRecommendation,
 *     severityTypes: vulnerabilityResourceSeverityType,
 *     state: vulnerabilityResourceState,
 * });
 * ```
 */
export function getVulnerabilityResourcesOutput(args: GetVulnerabilityResourcesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVulnerabilityResourcesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:Dblm/getVulnerabilityResources:getVulnerabilityResources", {
        "compartmentId": args.compartmentId,
        "cveId": args.cveId,
        "databaseRelease": args.databaseRelease,
        "displayName": args.displayName,
        "filters": args.filters,
        "patchRecommendations": args.patchRecommendations,
        "severityTypes": args.severityTypes,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getVulnerabilityResources.
 */
export interface GetVulnerabilityResourcesOutputArgs {
    /**
     * The required ID of the compartment in which to list resources.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * The id of a CVE.
     */
    cveId?: pulumi.Input<string>;
    /**
     * A filter to return only database that match the given release version.
     */
    databaseRelease?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Dblm.GetVulnerabilityResourcesFilterArgs>[]>;
    /**
     * Filter by one or more severity types. Possible values are upToDate, patchAvailable
     */
    patchRecommendations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
     */
    severityTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     */
    state?: pulumi.Input<string>;
}
