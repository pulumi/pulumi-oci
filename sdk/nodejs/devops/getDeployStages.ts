// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Deploy Stages in Oracle Cloud Infrastructure Devops service.
 *
 * Retrieves a list of deployment stages.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDeployStages = oci.DevOps.getDeployStages({
 *     compartmentId: compartmentId,
 *     deployPipelineId: testDeployPipeline.id,
 *     displayName: deployStageDisplayName,
 *     id: deployStageId,
 *     state: deployStageState,
 * });
 * ```
 */
export function getDeployStages(args?: GetDeployStagesArgs, opts?: pulumi.InvokeOptions): Promise<GetDeployStagesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DevOps/getDeployStages:getDeployStages", {
        "compartmentId": args.compartmentId,
        "deployPipelineId": args.deployPipelineId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getDeployStages.
 */
export interface GetDeployStagesArgs {
    /**
     * The OCID of the compartment in which to list resources.
     */
    compartmentId?: string;
    /**
     * The ID of the parent pipeline.
     */
    deployPipelineId?: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.DevOps.GetDeployStagesFilter[];
    /**
     * Unique identifier or OCID for listing a single resource by ID.
     */
    id?: string;
    /**
     * A filter to return only deployment stages that matches the given lifecycle state.
     */
    state?: string;
}

/**
 * A collection of values returned by getDeployStages.
 */
export interface GetDeployStagesResult {
    /**
     * The OCID of the compartment where the ContainerInstance will be created.
     */
    readonly compartmentId?: string;
    /**
     * The OCID of a pipeline.
     */
    readonly deployPipelineId?: string;
    /**
     * The list of deploy_stage_collection.
     */
    readonly deployStageCollections: outputs.DevOps.GetDeployStagesDeployStageCollection[];
    /**
     * Deployment stage display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
     */
    readonly displayName?: string;
    readonly filters?: outputs.DevOps.GetDeployStagesFilter[];
    /**
     * Unique identifier that is immutable on creation.
     */
    readonly id?: string;
    /**
     * The current state of the deployment stage.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Deploy Stages in Oracle Cloud Infrastructure Devops service.
 *
 * Retrieves a list of deployment stages.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDeployStages = oci.DevOps.getDeployStages({
 *     compartmentId: compartmentId,
 *     deployPipelineId: testDeployPipeline.id,
 *     displayName: deployStageDisplayName,
 *     id: deployStageId,
 *     state: deployStageState,
 * });
 * ```
 */
export function getDeployStagesOutput(args?: GetDeployStagesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDeployStagesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DevOps/getDeployStages:getDeployStages", {
        "compartmentId": args.compartmentId,
        "deployPipelineId": args.deployPipelineId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getDeployStages.
 */
export interface GetDeployStagesOutputArgs {
    /**
     * The OCID of the compartment in which to list resources.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * The ID of the parent pipeline.
     */
    deployPipelineId?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DevOps.GetDeployStagesFilterArgs>[]>;
    /**
     * Unique identifier or OCID for listing a single resource by ID.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to return only deployment stages that matches the given lifecycle state.
     */
    state?: pulumi.Input<string>;
}
