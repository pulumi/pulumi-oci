// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Repository resource in Oracle Cloud Infrastructure Devops service.
 *
 * Retrieves a repository by identifier.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRepository = oci.DevOps.getRepository({
 *     repositoryId: oci_devops_repository.test_repository.id,
 *     fields: _var.repository_fields,
 * });
 * ```
 */
export function getRepository(args: GetRepositoryArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DevOps/getRepository:getRepository", {
        "fields": args.fields,
        "repositoryId": args.repositoryId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepository.
 */
export interface GetRepositoryArgs {
    /**
     * Fields parameter can contain multiple flags useful in deciding the API functionality.
     */
    fields?: string[];
    /**
     * Unique repository identifier.
     */
    repositoryId: string;
}

/**
 * A collection of values returned by getRepository.
 */
export interface GetRepositoryResult {
    /**
     * The count of the branches present in the repository.
     */
    readonly branchCount: number;
    /**
     * The count of the commits present in the repository.
     */
    readonly commitCount: number;
    /**
     * The OCID of the repository's compartment.
     */
    readonly compartmentId: string;
    /**
     * The default branch of the repository.
     */
    readonly defaultBranch: string;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
     */
    readonly definedTags: {[key: string]: any};
    /**
     * Details of the repository. Avoid entering confidential information.
     */
    readonly description: string;
    readonly fields?: string[];
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
     */
    readonly freeformTags: {[key: string]: any};
    /**
     * HTTP URL that you use to git clone, pull and push.
     */
    readonly httpUrl: string;
    /**
     * The OCID of the repository. This value is unique and immutable.
     */
    readonly id: string;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    readonly lifecyleDetails: string;
    /**
     * Configuration information for mirroring the repository.
     */
    readonly mirrorRepositoryConfigs: outputs.DevOps.GetRepositoryMirrorRepositoryConfig[];
    /**
     * Unique name of a repository. This value is mutable.
     */
    readonly name: string;
    /**
     * Tenancy unique namespace.
     */
    readonly namespace: string;
    /**
     * The OCID of the DevOps project containing the repository.
     */
    readonly projectId: string;
    /**
     * Unique project name in a namespace.
     */
    readonly projectName: string;
    readonly repositoryId: string;
    /**
     * Type of repository: MIRRORED - Repository created by mirroring an existing repository. HOSTED - Repository created and hosted using Oracle Cloud Infrastructure DevOps code repository.
     */
    readonly repositoryType: string;
    /**
     * The size of the repository in bytes.
     */
    readonly sizeInBytes: string;
    /**
     * SSH URL that you use to git clone, pull and push.
     */
    readonly sshUrl: string;
    /**
     * The current state of the repository.
     */
    readonly state: string;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    readonly systemTags: {[key: string]: any};
    /**
     * The time the repository was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     */
    readonly timeCreated: string;
    /**
     * The time the repository was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     */
    readonly timeUpdated: string;
    /**
     * Trigger build events supported for this repository: PUSH - Build is triggered when a push event occurs. COMMIT_UPDATES - Build is triggered when new commits are mirrored into a repository.
     */
    readonly triggerBuildEvents: string[];
}
/**
 * This data source provides details about a specific Repository resource in Oracle Cloud Infrastructure Devops service.
 *
 * Retrieves a repository by identifier.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRepository = oci.DevOps.getRepository({
 *     repositoryId: oci_devops_repository.test_repository.id,
 *     fields: _var.repository_fields,
 * });
 * ```
 */
export function getRepositoryOutput(args: GetRepositoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRepositoryResult> {
    return pulumi.output(args).apply((a: any) => getRepository(a, opts))
}

/**
 * A collection of arguments for invoking getRepository.
 */
export interface GetRepositoryOutputArgs {
    /**
     * Fields parameter can contain multiple flags useful in deciding the API functionality.
     */
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique repository identifier.
     */
    repositoryId: pulumi.Input<string>;
}
