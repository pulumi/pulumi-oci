// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Repository Commits in Oracle Cloud Infrastructure Devops service.
 *
 * Returns a list of commits.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRepositoryCommits = oci.DevOps.getRepositoryCommits({
 *     repositoryId: testRepository.id,
 *     authorName: repositoryCommitAuthorName,
 *     commitMessage: repositoryCommitCommitMessage,
 *     excludeRefName: repositoryCommitExcludeRefName,
 *     filePath: repositoryCommitFilePath,
 *     refName: repositoryCommitRefName,
 *     timestampGreaterThanOrEqualTo: repositoryCommitTimestampGreaterThanOrEqualTo,
 *     timestampLessThanOrEqualTo: repositoryCommitTimestampLessThanOrEqualTo,
 * });
 * ```
 */
export function getRepositoryCommits(args: GetRepositoryCommitsArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoryCommitsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DevOps/getRepositoryCommits:getRepositoryCommits", {
        "authorName": args.authorName,
        "commitMessage": args.commitMessage,
        "excludeRefName": args.excludeRefName,
        "filePath": args.filePath,
        "filters": args.filters,
        "refName": args.refName,
        "repositoryId": args.repositoryId,
        "timestampGreaterThanOrEqualTo": args.timestampGreaterThanOrEqualTo,
        "timestampLessThanOrEqualTo": args.timestampLessThanOrEqualTo,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepositoryCommits.
 */
export interface GetRepositoryCommitsArgs {
    /**
     * A filter to return any commits that are pushed by the requested author.
     */
    authorName?: string;
    /**
     * A filter to return any commits that contains the given message.
     */
    commitMessage?: string;
    /**
     * A filter to exclude commits that match the given reference name.
     */
    excludeRefName?: string;
    /**
     * A filter to return only commits that affect any of the specified paths.
     */
    filePath?: string;
    filters?: inputs.DevOps.GetRepositoryCommitsFilter[];
    /**
     * A filter to return only resources that match the given reference name.
     */
    refName?: string;
    /**
     * Unique repository identifier.
     */
    repositoryId: string;
    /**
     * A filter to return commits only created after the specified timestamp value.
     */
    timestampGreaterThanOrEqualTo?: string;
    /**
     * A filter to return commits only created before the specified timestamp value.
     */
    timestampLessThanOrEqualTo?: string;
}

/**
 * A collection of values returned by getRepositoryCommits.
 */
export interface GetRepositoryCommitsResult {
    /**
     * Name of the author of the repository.
     */
    readonly authorName?: string;
    /**
     * The commit message.
     */
    readonly commitMessage?: string;
    readonly excludeRefName?: string;
    readonly filePath?: string;
    readonly filters?: outputs.DevOps.GetRepositoryCommitsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly refName?: string;
    /**
     * The list of repository_commit_collection.
     */
    readonly repositoryCommitCollections: outputs.DevOps.GetRepositoryCommitsRepositoryCommitCollection[];
    readonly repositoryId: string;
    readonly timestampGreaterThanOrEqualTo?: string;
    readonly timestampLessThanOrEqualTo?: string;
}
/**
 * This data source provides the list of Repository Commits in Oracle Cloud Infrastructure Devops service.
 *
 * Returns a list of commits.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRepositoryCommits = oci.DevOps.getRepositoryCommits({
 *     repositoryId: testRepository.id,
 *     authorName: repositoryCommitAuthorName,
 *     commitMessage: repositoryCommitCommitMessage,
 *     excludeRefName: repositoryCommitExcludeRefName,
 *     filePath: repositoryCommitFilePath,
 *     refName: repositoryCommitRefName,
 *     timestampGreaterThanOrEqualTo: repositoryCommitTimestampGreaterThanOrEqualTo,
 *     timestampLessThanOrEqualTo: repositoryCommitTimestampLessThanOrEqualTo,
 * });
 * ```
 */
export function getRepositoryCommitsOutput(args: GetRepositoryCommitsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRepositoryCommitsResult> {
    return pulumi.output(args).apply((a: any) => getRepositoryCommits(a, opts))
}

/**
 * A collection of arguments for invoking getRepositoryCommits.
 */
export interface GetRepositoryCommitsOutputArgs {
    /**
     * A filter to return any commits that are pushed by the requested author.
     */
    authorName?: pulumi.Input<string>;
    /**
     * A filter to return any commits that contains the given message.
     */
    commitMessage?: pulumi.Input<string>;
    /**
     * A filter to exclude commits that match the given reference name.
     */
    excludeRefName?: pulumi.Input<string>;
    /**
     * A filter to return only commits that affect any of the specified paths.
     */
    filePath?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DevOps.GetRepositoryCommitsFilterArgs>[]>;
    /**
     * A filter to return only resources that match the given reference name.
     */
    refName?: pulumi.Input<string>;
    /**
     * Unique repository identifier.
     */
    repositoryId: pulumi.Input<string>;
    /**
     * A filter to return commits only created after the specified timestamp value.
     */
    timestampGreaterThanOrEqualTo?: pulumi.Input<string>;
    /**
     * A filter to return commits only created before the specified timestamp value.
     */
    timestampLessThanOrEqualTo?: pulumi.Input<string>;
}
