// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Repository Paths in Oracle Cloud Infrastructure Devops service.
 *
 * Retrieves a list of files and directories in a repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRepositoryPaths = oci.DevOps.getRepositoryPaths({
 *     repositoryId: oci_devops_repository.test_repository.id,
 *     displayName: _var.repository_path_display_name,
 *     folderPath: _var.repository_path_folder_path,
 *     pathsInSubtree: _var.repository_path_paths_in_subtree,
 *     ref: _var.repository_path_ref,
 * });
 * ```
 */
export function getRepositoryPaths(args: GetRepositoryPathsArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoryPathsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DevOps/getRepositoryPaths:getRepositoryPaths", {
        "displayName": args.displayName,
        "filters": args.filters,
        "folderPath": args.folderPath,
        "pathsInSubtree": args.pathsInSubtree,
        "ref": args.ref,
        "repositoryId": args.repositoryId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepositoryPaths.
 */
export interface GetRepositoryPathsArgs {
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.DevOps.GetRepositoryPathsFilter[];
    /**
     * The fully qualified path to the folder whose contents are returned, including the folder name. For example, /examples is a fully-qualified path to a folder named examples that was created off of the root directory (/) of a repository.
     */
    folderPath?: string;
    /**
     * Flag to determine if files must be retrived recursively. Flag is False by default.
     */
    pathsInSubtree?: boolean;
    /**
     * The name of branch/tag or commit hash it points to. If names conflict, order of preference is commit > branch > tag. You can disambiguate with "heads/foobar" and "tags/foobar". If left blank repository's default branch will be used.
     */
    ref?: string;
    /**
     * Unique repository identifier.
     */
    repositoryId: string;
}

/**
 * A collection of values returned by getRepositoryPaths.
 */
export interface GetRepositoryPathsResult {
    readonly displayName?: string;
    readonly filters?: outputs.DevOps.GetRepositoryPathsFilter[];
    readonly folderPath?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly pathsInSubtree?: boolean;
    readonly ref?: string;
    readonly repositoryId: string;
    /**
     * The list of repository_path_collection.
     */
    readonly repositoryPathCollections: outputs.DevOps.GetRepositoryPathsRepositoryPathCollection[];
}
/**
 * This data source provides the list of Repository Paths in Oracle Cloud Infrastructure Devops service.
 *
 * Retrieves a list of files and directories in a repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRepositoryPaths = oci.DevOps.getRepositoryPaths({
 *     repositoryId: oci_devops_repository.test_repository.id,
 *     displayName: _var.repository_path_display_name,
 *     folderPath: _var.repository_path_folder_path,
 *     pathsInSubtree: _var.repository_path_paths_in_subtree,
 *     ref: _var.repository_path_ref,
 * });
 * ```
 */
export function getRepositoryPathsOutput(args: GetRepositoryPathsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRepositoryPathsResult> {
    return pulumi.output(args).apply((a: any) => getRepositoryPaths(a, opts))
}

/**
 * A collection of arguments for invoking getRepositoryPaths.
 */
export interface GetRepositoryPathsOutputArgs {
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DevOps.GetRepositoryPathsFilterArgs>[]>;
    /**
     * The fully qualified path to the folder whose contents are returned, including the folder name. For example, /examples is a fully-qualified path to a folder named examples that was created off of the root directory (/) of a repository.
     */
    folderPath?: pulumi.Input<string>;
    /**
     * Flag to determine if files must be retrived recursively. Flag is False by default.
     */
    pathsInSubtree?: pulumi.Input<boolean>;
    /**
     * The name of branch/tag or commit hash it points to. If names conflict, order of preference is commit > branch > tag. You can disambiguate with "heads/foobar" and "tags/foobar". If left blank repository's default branch will be used.
     */
    ref?: pulumi.Input<string>;
    /**
     * Unique repository identifier.
     */
    repositoryId: pulumi.Input<string>;
}
