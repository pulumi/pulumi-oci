// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Repository Refs in Oracle Cloud Infrastructure Devops service.
 *
 * Returns a list of references.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRepositoryRefs = oci.DevOps.getRepositoryRefs({
 *     repositoryId: testRepository.id,
 *     commitId: testCommit.id,
 *     refName: repositoryRefRefName,
 *     refType: repositoryRefRefType,
 * });
 * ```
 */
export function getRepositoryRefs(args: GetRepositoryRefsArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoryRefsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:DevOps/getRepositoryRefs:getRepositoryRefs", {
        "commitId": args.commitId,
        "filters": args.filters,
        "refName": args.refName,
        "refType": args.refType,
        "repositoryId": args.repositoryId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepositoryRefs.
 */
export interface GetRepositoryRefsArgs {
    /**
     * Commit ID in a repository.
     */
    commitId?: string;
    filters?: inputs.DevOps.GetRepositoryRefsFilter[];
    /**
     * A filter to return only resources that match the given reference name.
     */
    refName?: string;
    /**
     * Reference type to distinguish between branch and tag. If it is not specified, all references are returned.
     */
    refType?: string;
    /**
     * Unique repository identifier.
     */
    repositoryId: string;
}

/**
 * A collection of values returned by getRepositoryRefs.
 */
export interface GetRepositoryRefsResult {
    /**
     * Commit ID pointed to by the new branch.
     */
    readonly commitId?: string;
    readonly filters?: outputs.DevOps.GetRepositoryRefsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique reference name inside a repository.
     */
    readonly refName?: string;
    /**
     * The type of reference (BRANCH or TAG).
     */
    readonly refType?: string;
    /**
     * The OCID of the repository containing the reference.
     */
    readonly repositoryId: string;
    /**
     * The list of repository_ref_collection.
     */
    readonly repositoryRefCollections: outputs.DevOps.GetRepositoryRefsRepositoryRefCollection[];
}
/**
 * This data source provides the list of Repository Refs in Oracle Cloud Infrastructure Devops service.
 *
 * Returns a list of references.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRepositoryRefs = oci.DevOps.getRepositoryRefs({
 *     repositoryId: testRepository.id,
 *     commitId: testCommit.id,
 *     refName: repositoryRefRefName,
 *     refType: repositoryRefRefType,
 * });
 * ```
 */
export function getRepositoryRefsOutput(args: GetRepositoryRefsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRepositoryRefsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:DevOps/getRepositoryRefs:getRepositoryRefs", {
        "commitId": args.commitId,
        "filters": args.filters,
        "refName": args.refName,
        "refType": args.refType,
        "repositoryId": args.repositoryId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepositoryRefs.
 */
export interface GetRepositoryRefsOutputArgs {
    /**
     * Commit ID in a repository.
     */
    commitId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DevOps.GetRepositoryRefsFilterArgs>[]>;
    /**
     * A filter to return only resources that match the given reference name.
     */
    refName?: pulumi.Input<string>;
    /**
     * Reference type to distinguish between branch and tag. If it is not specified, all references are returned.
     */
    refType?: pulumi.Input<string>;
    /**
     * Unique repository identifier.
     */
    repositoryId: pulumi.Input<string>;
}
