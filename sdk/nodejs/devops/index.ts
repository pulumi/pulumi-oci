// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BuildPipelineArgs, BuildPipelineState } from "./buildPipeline";
export type BuildPipeline = import("./buildPipeline").BuildPipeline;
export const BuildPipeline: typeof import("./buildPipeline").BuildPipeline = null as any;
utilities.lazyLoad(exports, ["BuildPipeline"], () => require("./buildPipeline"));

export { BuildPipelineStageArgs, BuildPipelineStageState } from "./buildPipelineStage";
export type BuildPipelineStage = import("./buildPipelineStage").BuildPipelineStage;
export const BuildPipelineStage: typeof import("./buildPipelineStage").BuildPipelineStage = null as any;
utilities.lazyLoad(exports, ["BuildPipelineStage"], () => require("./buildPipelineStage"));

export { BuildRunArgs, BuildRunState } from "./buildRun";
export type BuildRun = import("./buildRun").BuildRun;
export const BuildRun: typeof import("./buildRun").BuildRun = null as any;
utilities.lazyLoad(exports, ["BuildRun"], () => require("./buildRun"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { DeployArtifactArgs, DeployArtifactState } from "./deployArtifact";
export type DeployArtifact = import("./deployArtifact").DeployArtifact;
export const DeployArtifact: typeof import("./deployArtifact").DeployArtifact = null as any;
utilities.lazyLoad(exports, ["DeployArtifact"], () => require("./deployArtifact"));

export { DeployEnvironmentArgs, DeployEnvironmentState } from "./deployEnvironment";
export type DeployEnvironment = import("./deployEnvironment").DeployEnvironment;
export const DeployEnvironment: typeof import("./deployEnvironment").DeployEnvironment = null as any;
utilities.lazyLoad(exports, ["DeployEnvironment"], () => require("./deployEnvironment"));

export { DeployPipelineArgs, DeployPipelineState } from "./deployPipeline";
export type DeployPipeline = import("./deployPipeline").DeployPipeline;
export const DeployPipeline: typeof import("./deployPipeline").DeployPipeline = null as any;
utilities.lazyLoad(exports, ["DeployPipeline"], () => require("./deployPipeline"));

export { DeployStageArgs, DeployStageState } from "./deployStage";
export type DeployStage = import("./deployStage").DeployStage;
export const DeployStage: typeof import("./deployStage").DeployStage = null as any;
utilities.lazyLoad(exports, ["DeployStage"], () => require("./deployStage"));

export { DeploymentArgs, DeploymentState } from "./deployment";
export type Deployment = import("./deployment").Deployment;
export const Deployment: typeof import("./deployment").Deployment = null as any;
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));

export { GetBuildPipelineArgs, GetBuildPipelineResult, GetBuildPipelineOutputArgs } from "./getBuildPipeline";
export const getBuildPipeline: typeof import("./getBuildPipeline").getBuildPipeline = null as any;
export const getBuildPipelineOutput: typeof import("./getBuildPipeline").getBuildPipelineOutput = null as any;
utilities.lazyLoad(exports, ["getBuildPipeline","getBuildPipelineOutput"], () => require("./getBuildPipeline"));

export { GetBuildPipelineStageArgs, GetBuildPipelineStageResult, GetBuildPipelineStageOutputArgs } from "./getBuildPipelineStage";
export const getBuildPipelineStage: typeof import("./getBuildPipelineStage").getBuildPipelineStage = null as any;
export const getBuildPipelineStageOutput: typeof import("./getBuildPipelineStage").getBuildPipelineStageOutput = null as any;
utilities.lazyLoad(exports, ["getBuildPipelineStage","getBuildPipelineStageOutput"], () => require("./getBuildPipelineStage"));

export { GetBuildPipelineStagesArgs, GetBuildPipelineStagesResult, GetBuildPipelineStagesOutputArgs } from "./getBuildPipelineStages";
export const getBuildPipelineStages: typeof import("./getBuildPipelineStages").getBuildPipelineStages = null as any;
export const getBuildPipelineStagesOutput: typeof import("./getBuildPipelineStages").getBuildPipelineStagesOutput = null as any;
utilities.lazyLoad(exports, ["getBuildPipelineStages","getBuildPipelineStagesOutput"], () => require("./getBuildPipelineStages"));

export { GetBuildPipelinesArgs, GetBuildPipelinesResult, GetBuildPipelinesOutputArgs } from "./getBuildPipelines";
export const getBuildPipelines: typeof import("./getBuildPipelines").getBuildPipelines = null as any;
export const getBuildPipelinesOutput: typeof import("./getBuildPipelines").getBuildPipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getBuildPipelines","getBuildPipelinesOutput"], () => require("./getBuildPipelines"));

export { GetBuildRunArgs, GetBuildRunResult, GetBuildRunOutputArgs } from "./getBuildRun";
export const getBuildRun: typeof import("./getBuildRun").getBuildRun = null as any;
export const getBuildRunOutput: typeof import("./getBuildRun").getBuildRunOutput = null as any;
utilities.lazyLoad(exports, ["getBuildRun","getBuildRunOutput"], () => require("./getBuildRun"));

export { GetBuildRunsArgs, GetBuildRunsResult, GetBuildRunsOutputArgs } from "./getBuildRuns";
export const getBuildRuns: typeof import("./getBuildRuns").getBuildRuns = null as any;
export const getBuildRunsOutput: typeof import("./getBuildRuns").getBuildRunsOutput = null as any;
utilities.lazyLoad(exports, ["getBuildRuns","getBuildRunsOutput"], () => require("./getBuildRuns"));

export { GetConnectionArgs, GetConnectionResult, GetConnectionOutputArgs } from "./getConnection";
export const getConnection: typeof import("./getConnection").getConnection = null as any;
export const getConnectionOutput: typeof import("./getConnection").getConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getConnection","getConnectionOutput"], () => require("./getConnection"));

export { GetConnectionsArgs, GetConnectionsResult, GetConnectionsOutputArgs } from "./getConnections";
export const getConnections: typeof import("./getConnections").getConnections = null as any;
export const getConnectionsOutput: typeof import("./getConnections").getConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getConnections","getConnectionsOutput"], () => require("./getConnections"));

export { GetDeployArtifactArgs, GetDeployArtifactResult, GetDeployArtifactOutputArgs } from "./getDeployArtifact";
export const getDeployArtifact: typeof import("./getDeployArtifact").getDeployArtifact = null as any;
export const getDeployArtifactOutput: typeof import("./getDeployArtifact").getDeployArtifactOutput = null as any;
utilities.lazyLoad(exports, ["getDeployArtifact","getDeployArtifactOutput"], () => require("./getDeployArtifact"));

export { GetDeployArtifactsArgs, GetDeployArtifactsResult, GetDeployArtifactsOutputArgs } from "./getDeployArtifacts";
export const getDeployArtifacts: typeof import("./getDeployArtifacts").getDeployArtifacts = null as any;
export const getDeployArtifactsOutput: typeof import("./getDeployArtifacts").getDeployArtifactsOutput = null as any;
utilities.lazyLoad(exports, ["getDeployArtifacts","getDeployArtifactsOutput"], () => require("./getDeployArtifacts"));

export { GetDeployEnvironmentArgs, GetDeployEnvironmentResult, GetDeployEnvironmentOutputArgs } from "./getDeployEnvironment";
export const getDeployEnvironment: typeof import("./getDeployEnvironment").getDeployEnvironment = null as any;
export const getDeployEnvironmentOutput: typeof import("./getDeployEnvironment").getDeployEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getDeployEnvironment","getDeployEnvironmentOutput"], () => require("./getDeployEnvironment"));

export { GetDeployEnvironmentsArgs, GetDeployEnvironmentsResult, GetDeployEnvironmentsOutputArgs } from "./getDeployEnvironments";
export const getDeployEnvironments: typeof import("./getDeployEnvironments").getDeployEnvironments = null as any;
export const getDeployEnvironmentsOutput: typeof import("./getDeployEnvironments").getDeployEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getDeployEnvironments","getDeployEnvironmentsOutput"], () => require("./getDeployEnvironments"));

export { GetDeployPipelineArgs, GetDeployPipelineResult, GetDeployPipelineOutputArgs } from "./getDeployPipeline";
export const getDeployPipeline: typeof import("./getDeployPipeline").getDeployPipeline = null as any;
export const getDeployPipelineOutput: typeof import("./getDeployPipeline").getDeployPipelineOutput = null as any;
utilities.lazyLoad(exports, ["getDeployPipeline","getDeployPipelineOutput"], () => require("./getDeployPipeline"));

export { GetDeployPipelinesArgs, GetDeployPipelinesResult, GetDeployPipelinesOutputArgs } from "./getDeployPipelines";
export const getDeployPipelines: typeof import("./getDeployPipelines").getDeployPipelines = null as any;
export const getDeployPipelinesOutput: typeof import("./getDeployPipelines").getDeployPipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getDeployPipelines","getDeployPipelinesOutput"], () => require("./getDeployPipelines"));

export { GetDeployStageArgs, GetDeployStageResult, GetDeployStageOutputArgs } from "./getDeployStage";
export const getDeployStage: typeof import("./getDeployStage").getDeployStage = null as any;
export const getDeployStageOutput: typeof import("./getDeployStage").getDeployStageOutput = null as any;
utilities.lazyLoad(exports, ["getDeployStage","getDeployStageOutput"], () => require("./getDeployStage"));

export { GetDeployStagesArgs, GetDeployStagesResult, GetDeployStagesOutputArgs } from "./getDeployStages";
export const getDeployStages: typeof import("./getDeployStages").getDeployStages = null as any;
export const getDeployStagesOutput: typeof import("./getDeployStages").getDeployStagesOutput = null as any;
utilities.lazyLoad(exports, ["getDeployStages","getDeployStagesOutput"], () => require("./getDeployStages"));

export { GetDeploymentArgs, GetDeploymentResult, GetDeploymentOutputArgs } from "./getDeployment";
export const getDeployment: typeof import("./getDeployment").getDeployment = null as any;
export const getDeploymentOutput: typeof import("./getDeployment").getDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getDeployment","getDeploymentOutput"], () => require("./getDeployment"));

export { GetDeploymentsArgs, GetDeploymentsResult, GetDeploymentsOutputArgs } from "./getDeployments";
export const getDeployments: typeof import("./getDeployments").getDeployments = null as any;
export const getDeploymentsOutput: typeof import("./getDeployments").getDeploymentsOutput = null as any;
utilities.lazyLoad(exports, ["getDeployments","getDeploymentsOutput"], () => require("./getDeployments"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetRepoFileLineArgs, GetRepoFileLineResult, GetRepoFileLineOutputArgs } from "./getRepoFileLine";
export const getRepoFileLine: typeof import("./getRepoFileLine").getRepoFileLine = null as any;
export const getRepoFileLineOutput: typeof import("./getRepoFileLine").getRepoFileLineOutput = null as any;
utilities.lazyLoad(exports, ["getRepoFileLine","getRepoFileLineOutput"], () => require("./getRepoFileLine"));

export { GetRepositoriesArgs, GetRepositoriesResult, GetRepositoriesOutputArgs } from "./getRepositories";
export const getRepositories: typeof import("./getRepositories").getRepositories = null as any;
export const getRepositoriesOutput: typeof import("./getRepositories").getRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getRepositories","getRepositoriesOutput"], () => require("./getRepositories"));

export { GetRepositoryArgs, GetRepositoryResult, GetRepositoryOutputArgs } from "./getRepository";
export const getRepository: typeof import("./getRepository").getRepository = null as any;
export const getRepositoryOutput: typeof import("./getRepository").getRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRepository","getRepositoryOutput"], () => require("./getRepository"));

export { GetRepositoryArchiveContentArgs, GetRepositoryArchiveContentResult, GetRepositoryArchiveContentOutputArgs } from "./getRepositoryArchiveContent";
export const getRepositoryArchiveContent: typeof import("./getRepositoryArchiveContent").getRepositoryArchiveContent = null as any;
export const getRepositoryArchiveContentOutput: typeof import("./getRepositoryArchiveContent").getRepositoryArchiveContentOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryArchiveContent","getRepositoryArchiveContentOutput"], () => require("./getRepositoryArchiveContent"));

export { GetRepositoryAuthorArgs, GetRepositoryAuthorResult, GetRepositoryAuthorOutputArgs } from "./getRepositoryAuthor";
export const getRepositoryAuthor: typeof import("./getRepositoryAuthor").getRepositoryAuthor = null as any;
export const getRepositoryAuthorOutput: typeof import("./getRepositoryAuthor").getRepositoryAuthorOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryAuthor","getRepositoryAuthorOutput"], () => require("./getRepositoryAuthor"));

export { GetRepositoryAuthorsArgs, GetRepositoryAuthorsResult, GetRepositoryAuthorsOutputArgs } from "./getRepositoryAuthors";
export const getRepositoryAuthors: typeof import("./getRepositoryAuthors").getRepositoryAuthors = null as any;
export const getRepositoryAuthorsOutput: typeof import("./getRepositoryAuthors").getRepositoryAuthorsOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryAuthors","getRepositoryAuthorsOutput"], () => require("./getRepositoryAuthors"));

export { GetRepositoryCommitArgs, GetRepositoryCommitResult, GetRepositoryCommitOutputArgs } from "./getRepositoryCommit";
export const getRepositoryCommit: typeof import("./getRepositoryCommit").getRepositoryCommit = null as any;
export const getRepositoryCommitOutput: typeof import("./getRepositoryCommit").getRepositoryCommitOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryCommit","getRepositoryCommitOutput"], () => require("./getRepositoryCommit"));

export { GetRepositoryCommitsArgs, GetRepositoryCommitsResult, GetRepositoryCommitsOutputArgs } from "./getRepositoryCommits";
export const getRepositoryCommits: typeof import("./getRepositoryCommits").getRepositoryCommits = null as any;
export const getRepositoryCommitsOutput: typeof import("./getRepositoryCommits").getRepositoryCommitsOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryCommits","getRepositoryCommitsOutput"], () => require("./getRepositoryCommits"));

export { GetRepositoryDiffArgs, GetRepositoryDiffResult, GetRepositoryDiffOutputArgs } from "./getRepositoryDiff";
export const getRepositoryDiff: typeof import("./getRepositoryDiff").getRepositoryDiff = null as any;
export const getRepositoryDiffOutput: typeof import("./getRepositoryDiff").getRepositoryDiffOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryDiff","getRepositoryDiffOutput"], () => require("./getRepositoryDiff"));

export { GetRepositoryDiffsArgs, GetRepositoryDiffsResult, GetRepositoryDiffsOutputArgs } from "./getRepositoryDiffs";
export const getRepositoryDiffs: typeof import("./getRepositoryDiffs").getRepositoryDiffs = null as any;
export const getRepositoryDiffsOutput: typeof import("./getRepositoryDiffs").getRepositoryDiffsOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryDiffs","getRepositoryDiffsOutput"], () => require("./getRepositoryDiffs"));

export { GetRepositoryFileDiffArgs, GetRepositoryFileDiffResult, GetRepositoryFileDiffOutputArgs } from "./getRepositoryFileDiff";
export const getRepositoryFileDiff: typeof import("./getRepositoryFileDiff").getRepositoryFileDiff = null as any;
export const getRepositoryFileDiffOutput: typeof import("./getRepositoryFileDiff").getRepositoryFileDiffOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryFileDiff","getRepositoryFileDiffOutput"], () => require("./getRepositoryFileDiff"));

export { GetRepositoryFileLineArgs, GetRepositoryFileLineResult, GetRepositoryFileLineOutputArgs } from "./getRepositoryFileLine";
export const getRepositoryFileLine: typeof import("./getRepositoryFileLine").getRepositoryFileLine = null as any;
export const getRepositoryFileLineOutput: typeof import("./getRepositoryFileLine").getRepositoryFileLineOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryFileLine","getRepositoryFileLineOutput"], () => require("./getRepositoryFileLine"));

export { GetRepositoryMirrorRecordArgs, GetRepositoryMirrorRecordResult, GetRepositoryMirrorRecordOutputArgs } from "./getRepositoryMirrorRecord";
export const getRepositoryMirrorRecord: typeof import("./getRepositoryMirrorRecord").getRepositoryMirrorRecord = null as any;
export const getRepositoryMirrorRecordOutput: typeof import("./getRepositoryMirrorRecord").getRepositoryMirrorRecordOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryMirrorRecord","getRepositoryMirrorRecordOutput"], () => require("./getRepositoryMirrorRecord"));

export { GetRepositoryMirrorRecordsArgs, GetRepositoryMirrorRecordsResult, GetRepositoryMirrorRecordsOutputArgs } from "./getRepositoryMirrorRecords";
export const getRepositoryMirrorRecords: typeof import("./getRepositoryMirrorRecords").getRepositoryMirrorRecords = null as any;
export const getRepositoryMirrorRecordsOutput: typeof import("./getRepositoryMirrorRecords").getRepositoryMirrorRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryMirrorRecords","getRepositoryMirrorRecordsOutput"], () => require("./getRepositoryMirrorRecords"));

export { GetRepositoryObjectArgs, GetRepositoryObjectResult, GetRepositoryObjectOutputArgs } from "./getRepositoryObject";
export const getRepositoryObject: typeof import("./getRepositoryObject").getRepositoryObject = null as any;
export const getRepositoryObjectOutput: typeof import("./getRepositoryObject").getRepositoryObjectOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryObject","getRepositoryObjectOutput"], () => require("./getRepositoryObject"));

export { GetRepositoryObjectContentArgs, GetRepositoryObjectContentResult, GetRepositoryObjectContentOutputArgs } from "./getRepositoryObjectContent";
export const getRepositoryObjectContent: typeof import("./getRepositoryObjectContent").getRepositoryObjectContent = null as any;
export const getRepositoryObjectContentOutput: typeof import("./getRepositoryObjectContent").getRepositoryObjectContentOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryObjectContent","getRepositoryObjectContentOutput"], () => require("./getRepositoryObjectContent"));

export { GetRepositoryPathArgs, GetRepositoryPathResult, GetRepositoryPathOutputArgs } from "./getRepositoryPath";
export const getRepositoryPath: typeof import("./getRepositoryPath").getRepositoryPath = null as any;
export const getRepositoryPathOutput: typeof import("./getRepositoryPath").getRepositoryPathOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryPath","getRepositoryPathOutput"], () => require("./getRepositoryPath"));

export { GetRepositoryPathsArgs, GetRepositoryPathsResult, GetRepositoryPathsOutputArgs } from "./getRepositoryPaths";
export const getRepositoryPaths: typeof import("./getRepositoryPaths").getRepositoryPaths = null as any;
export const getRepositoryPathsOutput: typeof import("./getRepositoryPaths").getRepositoryPathsOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryPaths","getRepositoryPathsOutput"], () => require("./getRepositoryPaths"));

export { GetRepositoryRefArgs, GetRepositoryRefResult, GetRepositoryRefOutputArgs } from "./getRepositoryRef";
export const getRepositoryRef: typeof import("./getRepositoryRef").getRepositoryRef = null as any;
export const getRepositoryRefOutput: typeof import("./getRepositoryRef").getRepositoryRefOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryRef","getRepositoryRefOutput"], () => require("./getRepositoryRef"));

export { GetRepositoryRefsArgs, GetRepositoryRefsResult, GetRepositoryRefsOutputArgs } from "./getRepositoryRefs";
export const getRepositoryRefs: typeof import("./getRepositoryRefs").getRepositoryRefs = null as any;
export const getRepositoryRefsOutput: typeof import("./getRepositoryRefs").getRepositoryRefsOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryRefs","getRepositoryRefsOutput"], () => require("./getRepositoryRefs"));

export { GetTriggerArgs, GetTriggerResult, GetTriggerOutputArgs } from "./getTrigger";
export const getTrigger: typeof import("./getTrigger").getTrigger = null as any;
export const getTriggerOutput: typeof import("./getTrigger").getTriggerOutput = null as any;
utilities.lazyLoad(exports, ["getTrigger","getTriggerOutput"], () => require("./getTrigger"));

export { GetTriggersArgs, GetTriggersResult, GetTriggersOutputArgs } from "./getTriggers";
export const getTriggers: typeof import("./getTriggers").getTriggers = null as any;
export const getTriggersOutput: typeof import("./getTriggers").getTriggersOutput = null as any;
utilities.lazyLoad(exports, ["getTriggers","getTriggersOutput"], () => require("./getTriggers"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { RepositoryArgs, RepositoryState } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));

export { RepositoryMirrorArgs, RepositoryMirrorState } from "./repositoryMirror";
export type RepositoryMirror = import("./repositoryMirror").RepositoryMirror;
export const RepositoryMirror: typeof import("./repositoryMirror").RepositoryMirror = null as any;
utilities.lazyLoad(exports, ["RepositoryMirror"], () => require("./repositoryMirror"));

export { RepositoryRefArgs, RepositoryRefState } from "./repositoryRef";
export type RepositoryRef = import("./repositoryRef").RepositoryRef;
export const RepositoryRef: typeof import("./repositoryRef").RepositoryRef = null as any;
utilities.lazyLoad(exports, ["RepositoryRef"], () => require("./repositoryRef"));

export { TriggerArgs, TriggerState } from "./trigger";
export type Trigger = import("./trigger").Trigger;
export const Trigger: typeof import("./trigger").Trigger = null as any;
utilities.lazyLoad(exports, ["Trigger"], () => require("./trigger"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:DevOps/buildPipeline:BuildPipeline":
                return new BuildPipeline(name, <any>undefined, { urn })
            case "oci:DevOps/buildPipelineStage:BuildPipelineStage":
                return new BuildPipelineStage(name, <any>undefined, { urn })
            case "oci:DevOps/buildRun:BuildRun":
                return new BuildRun(name, <any>undefined, { urn })
            case "oci:DevOps/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "oci:DevOps/deployArtifact:DeployArtifact":
                return new DeployArtifact(name, <any>undefined, { urn })
            case "oci:DevOps/deployEnvironment:DeployEnvironment":
                return new DeployEnvironment(name, <any>undefined, { urn })
            case "oci:DevOps/deployPipeline:DeployPipeline":
                return new DeployPipeline(name, <any>undefined, { urn })
            case "oci:DevOps/deployStage:DeployStage":
                return new DeployStage(name, <any>undefined, { urn })
            case "oci:DevOps/deployment:Deployment":
                return new Deployment(name, <any>undefined, { urn })
            case "oci:DevOps/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "oci:DevOps/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "oci:DevOps/repositoryMirror:RepositoryMirror":
                return new RepositoryMirror(name, <any>undefined, { urn })
            case "oci:DevOps/repositoryRef:RepositoryRef":
                return new RepositoryRef(name, <any>undefined, { urn })
            case "oci:DevOps/trigger:Trigger":
                return new Trigger(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "DevOps/buildPipeline", _module)
pulumi.runtime.registerResourceModule("oci", "DevOps/buildPipelineStage", _module)
pulumi.runtime.registerResourceModule("oci", "DevOps/buildRun", _module)
pulumi.runtime.registerResourceModule("oci", "DevOps/connection", _module)
pulumi.runtime.registerResourceModule("oci", "DevOps/deployArtifact", _module)
pulumi.runtime.registerResourceModule("oci", "DevOps/deployEnvironment", _module)
pulumi.runtime.registerResourceModule("oci", "DevOps/deployPipeline", _module)
pulumi.runtime.registerResourceModule("oci", "DevOps/deployStage", _module)
pulumi.runtime.registerResourceModule("oci", "DevOps/deployment", _module)
pulumi.runtime.registerResourceModule("oci", "DevOps/project", _module)
pulumi.runtime.registerResourceModule("oci", "DevOps/repository", _module)
pulumi.runtime.registerResourceModule("oci", "DevOps/repositoryMirror", _module)
pulumi.runtime.registerResourceModule("oci", "DevOps/repositoryRef", _module)
pulumi.runtime.registerResourceModule("oci", "DevOps/trigger", _module)
