// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Project Repository Setting resource in Oracle Cloud Infrastructure Devops service.
 *
 * Updates the repository settings for a project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testProjectRepositorySetting = new oci.devops.ProjectRepositorySetting("test_project_repository_setting", {
 *     projectId: testProject.id,
 *     approvalRules: {
 *         items: [{
 *             minApprovalsCount: projectRepositorySettingApprovalRulesItemsMinApprovalsCount,
 *             name: projectRepositorySettingApprovalRulesItemsName,
 *             destinationBranch: projectRepositorySettingApprovalRulesItemsDestinationBranch,
 *             reviewers: [{
 *                 principalId: testPrincipal.id,
 *             }],
 *         }],
 *     },
 *     mergeSettings: {
 *         allowedMergeStrategies: projectRepositorySettingMergeSettingsAllowedMergeStrategies,
 *         defaultMergeStrategy: projectRepositorySettingMergeSettingsDefaultMergeStrategy,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ProjectRepositorySettings can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:DevOps/projectRepositorySetting:ProjectRepositorySetting test_project_repository_setting "projects/{projectId}/repositorySettings"
 * ```
 */
export class ProjectRepositorySetting extends pulumi.CustomResource {
    /**
     * Get an existing ProjectRepositorySetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectRepositorySettingState, opts?: pulumi.CustomResourceOptions): ProjectRepositorySetting {
        return new ProjectRepositorySetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:DevOps/projectRepositorySetting:ProjectRepositorySetting';

    /**
     * Returns true if the given object is an instance of ProjectRepositorySetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectRepositorySetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectRepositorySetting.__pulumiType;
    }

    /**
     * (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
     */
    public readonly approvalRules!: pulumi.Output<outputs.DevOps.ProjectRepositorySettingApprovalRules>;
    /**
     * (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
     */
    public readonly mergeSettings!: pulumi.Output<outputs.DevOps.ProjectRepositorySettingMergeSettings>;
    /**
     * Unique project identifier.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly projectId!: pulumi.Output<string>;

    /**
     * Create a ProjectRepositorySetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectRepositorySettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectRepositorySettingArgs | ProjectRepositorySettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectRepositorySettingState | undefined;
            resourceInputs["approvalRules"] = state ? state.approvalRules : undefined;
            resourceInputs["mergeSettings"] = state ? state.mergeSettings : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as ProjectRepositorySettingArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["approvalRules"] = args ? args.approvalRules : undefined;
            resourceInputs["mergeSettings"] = args ? args.mergeSettings : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectRepositorySetting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectRepositorySetting resources.
 */
export interface ProjectRepositorySettingState {
    /**
     * (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
     */
    approvalRules?: pulumi.Input<inputs.DevOps.ProjectRepositorySettingApprovalRules>;
    /**
     * (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
     */
    mergeSettings?: pulumi.Input<inputs.DevOps.ProjectRepositorySettingMergeSettings>;
    /**
     * Unique project identifier.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectRepositorySetting resource.
 */
export interface ProjectRepositorySettingArgs {
    /**
     * (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
     */
    approvalRules?: pulumi.Input<inputs.DevOps.ProjectRepositorySettingApprovalRules>;
    /**
     * (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
     */
    mergeSettings?: pulumi.Input<inputs.DevOps.ProjectRepositorySettingMergeSettings>;
    /**
     * Unique project identifier.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    projectId: pulumi.Input<string>;
}
