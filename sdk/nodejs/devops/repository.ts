// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Repository resource in Oracle Cloud Infrastructure Devops service.
 *
 * Creates a new repository.
 *
 * ## Import
 *
 * Repositories can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:DevOps/repository:Repository test_repository "id"
 * ```
 */
export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:DevOps/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    /**
     * The count of the branches present in the repository.
     */
    declare public /*out*/ readonly branchCount: pulumi.Output<number>;
    /**
     * The count of the commits present in the repository.
     */
    declare public /*out*/ readonly commitCount: pulumi.Output<number>;
    /**
     * The OCID of the repository's compartment.
     */
    declare public /*out*/ readonly compartmentId: pulumi.Output<string>;
    /**
     * (Updatable) The default branch of the repository.
     */
    declare public readonly defaultBranch: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
     */
    declare public readonly definedTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) Details of the repository. Avoid entering confidential information.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
     */
    declare public readonly freeformTags: pulumi.Output<{[key: string]: string}>;
    /**
     * HTTP URL that you use to git clone, pull and push.
     */
    declare public /*out*/ readonly httpUrl: pulumi.Output<string>;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    declare public /*out*/ readonly lifecyleDetails: pulumi.Output<string>;
    /**
     * (Updatable) Configuration information for mirroring the repository.
     */
    declare public readonly mirrorRepositoryConfig: pulumi.Output<outputs.DevOps.RepositoryMirrorRepositoryConfig>;
    /**
     * (Updatable) Name of the repository. Should be unique within the project.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Tenancy unique namespace.
     */
    declare public /*out*/ readonly namespace: pulumi.Output<string>;
    /**
     * The OCID of the parent repository.
     */
    declare public readonly parentRepositoryId: pulumi.Output<string>;
    /**
     * The OCID of the DevOps project containing the repository.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * Unique project name in a namespace.
     */
    declare public /*out*/ readonly projectName: pulumi.Output<string>;
    /**
     * (Updatable) Type of repository. Allowed values:  `MIRRORED`  `HOSTED` `FORKED` 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly repositoryType: pulumi.Output<string>;
    /**
     * The size of the repository in bytes.
     */
    declare public /*out*/ readonly sizeInBytes: pulumi.Output<string>;
    /**
     * SSH URL that you use to git clone, pull and push.
     */
    declare public /*out*/ readonly sshUrl: pulumi.Output<string>;
    /**
     * The current state of the repository.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    declare public /*out*/ readonly systemTags: pulumi.Output<{[key: string]: string}>;
    /**
     * The time the repository was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * The time the repository was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;
    /**
     * Trigger build events supported for this repository: PUSH - Build is triggered when a push event occurs. PULL_REQUEST_CREATED - Build is triggered when a pull request is created in the repository. PULL_REQUEST_UPDATED - Build is triggered when a push is made to a branch with an open pull request. COMMIT_UPDATES - Build is triggered when new commits are mirrored into a repository.
     */
    declare public /*out*/ readonly triggerBuildEvents: pulumi.Output<string[]>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["branchCount"] = state?.branchCount;
            resourceInputs["commitCount"] = state?.commitCount;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["defaultBranch"] = state?.defaultBranch;
            resourceInputs["definedTags"] = state?.definedTags;
            resourceInputs["description"] = state?.description;
            resourceInputs["freeformTags"] = state?.freeformTags;
            resourceInputs["httpUrl"] = state?.httpUrl;
            resourceInputs["lifecyleDetails"] = state?.lifecyleDetails;
            resourceInputs["mirrorRepositoryConfig"] = state?.mirrorRepositoryConfig;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["parentRepositoryId"] = state?.parentRepositoryId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["projectName"] = state?.projectName;
            resourceInputs["repositoryType"] = state?.repositoryType;
            resourceInputs["sizeInBytes"] = state?.sizeInBytes;
            resourceInputs["sshUrl"] = state?.sshUrl;
            resourceInputs["state"] = state?.state;
            resourceInputs["systemTags"] = state?.systemTags;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
            resourceInputs["triggerBuildEvents"] = state?.triggerBuildEvents;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.repositoryType === undefined && !opts.urn) {
                throw new Error("Missing required property 'repositoryType'");
            }
            resourceInputs["defaultBranch"] = args?.defaultBranch;
            resourceInputs["definedTags"] = args?.definedTags;
            resourceInputs["description"] = args?.description;
            resourceInputs["freeformTags"] = args?.freeformTags;
            resourceInputs["mirrorRepositoryConfig"] = args?.mirrorRepositoryConfig;
            resourceInputs["name"] = args?.name;
            resourceInputs["parentRepositoryId"] = args?.parentRepositoryId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["repositoryType"] = args?.repositoryType;
            resourceInputs["branchCount"] = undefined /*out*/;
            resourceInputs["commitCount"] = undefined /*out*/;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["httpUrl"] = undefined /*out*/;
            resourceInputs["lifecyleDetails"] = undefined /*out*/;
            resourceInputs["namespace"] = undefined /*out*/;
            resourceInputs["projectName"] = undefined /*out*/;
            resourceInputs["sizeInBytes"] = undefined /*out*/;
            resourceInputs["sshUrl"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["triggerBuildEvents"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    /**
     * The count of the branches present in the repository.
     */
    branchCount?: pulumi.Input<number>;
    /**
     * The count of the commits present in the repository.
     */
    commitCount?: pulumi.Input<number>;
    /**
     * The OCID of the repository's compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) The default branch of the repository.
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Details of the repository. Avoid entering confidential information.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * HTTP URL that you use to git clone, pull and push.
     */
    httpUrl?: pulumi.Input<string>;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    lifecyleDetails?: pulumi.Input<string>;
    /**
     * (Updatable) Configuration information for mirroring the repository.
     */
    mirrorRepositoryConfig?: pulumi.Input<inputs.DevOps.RepositoryMirrorRepositoryConfig>;
    /**
     * (Updatable) Name of the repository. Should be unique within the project.
     */
    name?: pulumi.Input<string>;
    /**
     * Tenancy unique namespace.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The OCID of the parent repository.
     */
    parentRepositoryId?: pulumi.Input<string>;
    /**
     * The OCID of the DevOps project containing the repository.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Unique project name in a namespace.
     */
    projectName?: pulumi.Input<string>;
    /**
     * (Updatable) Type of repository. Allowed values:  `MIRRORED`  `HOSTED` `FORKED` 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    repositoryType?: pulumi.Input<string>;
    /**
     * The size of the repository in bytes.
     */
    sizeInBytes?: pulumi.Input<string>;
    /**
     * SSH URL that you use to git clone, pull and push.
     */
    sshUrl?: pulumi.Input<string>;
    /**
     * The current state of the repository.
     */
    state?: pulumi.Input<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time the repository was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time the repository was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * Trigger build events supported for this repository: PUSH - Build is triggered when a push event occurs. PULL_REQUEST_CREATED - Build is triggered when a pull request is created in the repository. PULL_REQUEST_UPDATED - Build is triggered when a push is made to a branch with an open pull request. COMMIT_UPDATES - Build is triggered when new commits are mirrored into a repository.
     */
    triggerBuildEvents?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * (Updatable) The default branch of the repository.
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Details of the repository. Avoid entering confidential information.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Configuration information for mirroring the repository.
     */
    mirrorRepositoryConfig?: pulumi.Input<inputs.DevOps.RepositoryMirrorRepositoryConfig>;
    /**
     * (Updatable) Name of the repository. Should be unique within the project.
     */
    name?: pulumi.Input<string>;
    /**
     * The OCID of the parent repository.
     */
    parentRepositoryId?: pulumi.Input<string>;
    /**
     * The OCID of the DevOps project containing the repository.
     */
    projectId: pulumi.Input<string>;
    /**
     * (Updatable) Type of repository. Allowed values:  `MIRRORED`  `HOSTED` `FORKED` 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    repositoryType: pulumi.Input<string>;
}
