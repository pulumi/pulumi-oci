// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Repository Ref resource in Oracle Cloud Infrastructure Devops service.
 *
 * Creates a new reference or updates an existing one. This API will be deprecated on Wed, 12 June 2024 01:00:00 GMT as it does not get recognized when refName has '/'. This will be replaced by "/repositories/{repositoryId}/actions/createOrUpdateGitRef"
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRepositoryRef = new oci.devops.RepositoryRef("test_repository_ref", {
 *     refName: repositoryRefRefName,
 *     refType: repositoryRefRefType,
 *     repositoryId: testRepository.id,
 *     commitId: testCommit.id,
 *     objectId: testObject.id,
 * });
 * ```
 *
 * ## Import
 *
 * RepositoryRefs can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:DevOps/repositoryRef:RepositoryRef test_repository_ref "repositories/{repositoryId}/refs/{refName}"
 * ```
 */
export class RepositoryRef extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryRef resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryRefState, opts?: pulumi.CustomResourceOptions): RepositoryRef {
        return new RepositoryRef(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:DevOps/repositoryRef:RepositoryRef';

    /**
     * Returns true if the given object is an instance of RepositoryRef.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryRef {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryRef.__pulumiType;
    }

    /**
     * (Updatable) Commit ID pointed to by the new branch.
     */
    public readonly commitId!: pulumi.Output<string>;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
     */
    public /*out*/ readonly definedTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
     */
    public /*out*/ readonly freeformTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * Unique full reference name inside a repository.
     */
    public /*out*/ readonly fullRefName!: pulumi.Output<string>;
    /**
     * (Updatable) SHA-1 hash value of the object pointed to by the tag.
     */
    public readonly objectId!: pulumi.Output<string>;
    /**
     * A filter to return only resources that match the given reference name.
     */
    public readonly refName!: pulumi.Output<string>;
    /**
     * (Updatable) The type of reference (BRANCH or TAG).
     */
    public readonly refType!: pulumi.Output<string>;
    /**
     * Unique repository identifier.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly repositoryId!: pulumi.Output<string>;

    /**
     * Create a RepositoryRef resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryRefArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryRefArgs | RepositoryRefState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryRefState | undefined;
            resourceInputs["commitId"] = state ? state.commitId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["fullRefName"] = state ? state.fullRefName : undefined;
            resourceInputs["objectId"] = state ? state.objectId : undefined;
            resourceInputs["refName"] = state ? state.refName : undefined;
            resourceInputs["refType"] = state ? state.refType : undefined;
            resourceInputs["repositoryId"] = state ? state.repositoryId : undefined;
        } else {
            const args = argsOrState as RepositoryRefArgs | undefined;
            if ((!args || args.refName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'refName'");
            }
            if ((!args || args.refType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'refType'");
            }
            if ((!args || args.repositoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryId'");
            }
            resourceInputs["commitId"] = args ? args.commitId : undefined;
            resourceInputs["objectId"] = args ? args.objectId : undefined;
            resourceInputs["refName"] = args ? args.refName : undefined;
            resourceInputs["refType"] = args ? args.refType : undefined;
            resourceInputs["repositoryId"] = args ? args.repositoryId : undefined;
            resourceInputs["definedTags"] = undefined /*out*/;
            resourceInputs["freeformTags"] = undefined /*out*/;
            resourceInputs["fullRefName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryRef.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RepositoryRef resources.
 */
export interface RepositoryRefState {
    /**
     * (Updatable) Commit ID pointed to by the new branch.
     */
    commitId?: pulumi.Input<string>;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Unique full reference name inside a repository.
     */
    fullRefName?: pulumi.Input<string>;
    /**
     * (Updatable) SHA-1 hash value of the object pointed to by the tag.
     */
    objectId?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the given reference name.
     */
    refName?: pulumi.Input<string>;
    /**
     * (Updatable) The type of reference (BRANCH or TAG).
     */
    refType?: pulumi.Input<string>;
    /**
     * Unique repository identifier.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    repositoryId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RepositoryRef resource.
 */
export interface RepositoryRefArgs {
    /**
     * (Updatable) Commit ID pointed to by the new branch.
     */
    commitId?: pulumi.Input<string>;
    /**
     * (Updatable) SHA-1 hash value of the object pointed to by the tag.
     */
    objectId?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the given reference name.
     */
    refName: pulumi.Input<string>;
    /**
     * (Updatable) The type of reference (BRANCH or TAG).
     */
    refType: pulumi.Input<string>;
    /**
     * Unique repository identifier.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    repositoryId: pulumi.Input<string>;
}
