// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Resolver Endpoint resource in Oracle Cloud Infrastructure DNS service.
 *
 * Gets information about a specific resolver endpoint. Note that attempting to get a resolver endpoint
 * in the DELETED lifecycle state will result in a `404` response to be consistent with other operations of the
 * API. Requires a `PRIVATE` scope query parameter.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testResolverEndpoint = oci.Dns.getResolverEndpoint({
 *     resolverEndpointName: oci_dns_resolver_endpoint.test_resolver_endpoint.name,
 *     resolverId: oci_dns_resolver.test_resolver.id,
 *     scope: "PRIVATE",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getResolverEndpoint(args: GetResolverEndpointArgs, opts?: pulumi.InvokeOptions): Promise<GetResolverEndpointResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Dns/getResolverEndpoint:getResolverEndpoint", {
        "resolverEndpointName": args.resolverEndpointName,
        "resolverId": args.resolverId,
        "scope": args.scope,
    }, opts);
}

/**
 * A collection of arguments for invoking getResolverEndpoint.
 */
export interface GetResolverEndpointArgs {
    /**
     * The name of the target resolver endpoint.
     */
    resolverEndpointName: string;
    /**
     * The OCID of the target resolver.
     */
    resolverId: string;
    /**
     * Value must be `PRIVATE` when listing private name resolver endpoints.
     */
    scope?: string;
}

/**
 * A collection of values returned by getResolverEndpoint.
 */
export interface GetResolverEndpointResult {
    /**
     * The OCID of the owning compartment. This will match the resolver that the resolver endpoint is under and will be updated if the resolver's compartment is changed.
     */
    readonly compartmentId: string;
    /**
     * The type of resolver endpoint. VNIC is currently the only supported type.
     */
    readonly endpointType: string;
    /**
     * An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
     */
    readonly forwardingAddress: string;
    readonly id: string;
    /**
     * A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
     */
    readonly isForwarding: boolean;
    /**
     * A Boolean flag indicating whether or not the resolver endpoint is for listening.
     */
    readonly isListening: boolean;
    /**
     * An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
     */
    readonly listeningAddress: string;
    /**
     * The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
     */
    readonly name: string;
    /**
     * An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
     */
    readonly nsgIds: string[];
    readonly resolverEndpointName: string;
    readonly resolverId: string;
    readonly scope?: string;
    /**
     * The canonical absolute URL of the resource.
     */
    readonly self: string;
    /**
     * The current state of the resource.
     */
    readonly state: string;
    /**
     * The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
     */
    readonly subnetId: string;
    /**
     * The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
     */
    readonly timeCreated: string;
    /**
     * The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
     */
    readonly timeUpdated: string;
}
/**
 * This data source provides details about a specific Resolver Endpoint resource in Oracle Cloud Infrastructure DNS service.
 *
 * Gets information about a specific resolver endpoint. Note that attempting to get a resolver endpoint
 * in the DELETED lifecycle state will result in a `404` response to be consistent with other operations of the
 * API. Requires a `PRIVATE` scope query parameter.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testResolverEndpoint = oci.Dns.getResolverEndpoint({
 *     resolverEndpointName: oci_dns_resolver_endpoint.test_resolver_endpoint.name,
 *     resolverId: oci_dns_resolver.test_resolver.id,
 *     scope: "PRIVATE",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getResolverEndpointOutput(args: GetResolverEndpointOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetResolverEndpointResult> {
    return pulumi.output(args).apply((a: any) => getResolverEndpoint(a, opts))
}

/**
 * A collection of arguments for invoking getResolverEndpoint.
 */
export interface GetResolverEndpointOutputArgs {
    /**
     * The name of the target resolver endpoint.
     */
    resolverEndpointName: pulumi.Input<string>;
    /**
     * The OCID of the target resolver.
     */
    resolverId: pulumi.Input<string>;
    /**
     * Value must be `PRIVATE` when listing private name resolver endpoints.
     */
    scope?: pulumi.Input<string>;
}
