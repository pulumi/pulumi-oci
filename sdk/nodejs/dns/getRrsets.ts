// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of RRsets in Oracle Cloud Infrastructure DNS service.
 *
 * Gets a list of all rrsets in the specified zone. You can optionally filter the results using the listed parameters.
 * For private zones, the scope query parameter is required with a value of `PRIVATE`. When the zone name is
 * provided as a path parameter and `PRIVATE` is used for the scope query parameter then the viewId query
 * parameter is required.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRrsets = oci.Dns.getRrsets({
 *     zoneNameOrId: oci_dns_zone.test_zone.id,
 *     domain: _var.rrset_domain,
 *     domainContains: _var.rrset_domain,
 *     rtype: _var.rrset_rtype,
 *     scope: _var.rrset_scope,
 *     viewId: oci_dns_view.test_view.id,
 * });
 * ```
 */
export function getRrsets(args: GetRrsetsArgs, opts?: pulumi.InvokeOptions): Promise<GetRrsetsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Dns/getRrsets:getRrsets", {
        "domain": args.domain,
        "domainContains": args.domainContains,
        "filters": args.filters,
        "rtype": args.rtype,
        "scope": args.scope,
        "viewId": args.viewId,
        "zoneNameOrId": args.zoneNameOrId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRrsets.
 */
export interface GetRrsetsArgs {
    /**
     * The target fully-qualified domain name (FQDN) within the target zone.
     */
    domain?: string;
    /**
     * Matches any rrset whose fully-qualified domain name (FQDN) contains the provided value.
     */
    domainContains?: string;
    filters?: inputs.Dns.GetRrsetsFilter[];
    /**
     * Search by record type. Will match any record whose [type](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4) (case-insensitive) equals the provided value.
     */
    rtype?: string;
    /**
     * Specifies to operate only on resources that have a matching DNS scope.
     */
    scope?: string;
    /**
     * The OCID of the view the resource is associated with.
     */
    viewId?: string;
    /**
     * The name or OCID of the target zone.
     */
    zoneNameOrId: string;
}

/**
 * A collection of values returned by getRrsets.
 */
export interface GetRrsetsResult {
    /**
     * The fully qualified domain name where the record can be located.
     */
    readonly domain?: string;
    readonly domainContains?: string;
    readonly filters?: outputs.Dns.GetRrsetsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id?: string;
    /**
     * The list of rrsets.
     */
    readonly rrsets?: outputs.Dns.GetRrsetsRrset[];
    /**
     * The type of DNS record, such as A or CNAME. For more information, see [Resource Record (RR) TYPEs](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4).
     */
    readonly rtype?: string;
    readonly scope?: string;
    readonly viewId?: string;
    readonly zoneNameOrId: string;
}
/**
 * This data source provides the list of RRsets in Oracle Cloud Infrastructure DNS service.
 *
 * Gets a list of all rrsets in the specified zone. You can optionally filter the results using the listed parameters.
 * For private zones, the scope query parameter is required with a value of `PRIVATE`. When the zone name is
 * provided as a path parameter and `PRIVATE` is used for the scope query parameter then the viewId query
 * parameter is required.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRrsets = oci.Dns.getRrsets({
 *     zoneNameOrId: oci_dns_zone.test_zone.id,
 *     domain: _var.rrset_domain,
 *     domainContains: _var.rrset_domain,
 *     rtype: _var.rrset_rtype,
 *     scope: _var.rrset_scope,
 *     viewId: oci_dns_view.test_view.id,
 * });
 * ```
 */
export function getRrsetsOutput(args: GetRrsetsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRrsetsResult> {
    return pulumi.output(args).apply((a: any) => getRrsets(a, opts))
}

/**
 * A collection of arguments for invoking getRrsets.
 */
export interface GetRrsetsOutputArgs {
    /**
     * The target fully-qualified domain name (FQDN) within the target zone.
     */
    domain?: pulumi.Input<string>;
    /**
     * Matches any rrset whose fully-qualified domain name (FQDN) contains the provided value.
     */
    domainContains?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Dns.GetRrsetsFilterArgs>[]>;
    /**
     * Search by record type. Will match any record whose [type](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4) (case-insensitive) equals the provided value.
     */
    rtype?: pulumi.Input<string>;
    /**
     * Specifies to operate only on resources that have a matching DNS scope.
     */
    scope?: pulumi.Input<string>;
    /**
     * The OCID of the view the resource is associated with.
     */
    viewId?: pulumi.Input<string>;
    /**
     * The name or OCID of the target zone.
     */
    zoneNameOrId: pulumi.Input<string>;
}
