// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Zone resource in Oracle Cloud Infrastructure DNS service.
 *
 * Creates a new zone in the specified compartment.
 *
 * Private zones must have a zone type of `PRIMARY`. Creating a private zone at or under `oraclevcn.com`
 * within the default protected view of a VCN-dedicated resolver is not permitted.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testZone = new oci.dns.Zone("test_zone", {
 *     compartmentId: compartmentId,
 *     name: zoneName,
 *     zoneType: zoneZoneType,
 *     definedTags: zoneDefinedTags,
 *     dnssecState: zoneDnssecState,
 *     externalDownstreams: [{
 *         address: zoneExternalDownstreamsAddress,
 *         port: zoneExternalDownstreamsPort,
 *         tsigKeyId: testTsigKey.id,
 *     }],
 *     externalMasters: [{
 *         address: zoneExternalMastersAddress,
 *         port: zoneExternalMastersPort,
 *         tsigKeyId: testTsigKey.id,
 *     }],
 *     freeformTags: zoneFreeformTags,
 *     scope: zoneScope,
 *     viewId: testView.id,
 * });
 * ```
 *
 * ## Import
 *
 * Zones can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:Dns/zone:Zone test_zone "id"
 * ```
 */
export class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone {
        return new Zone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Dns/zone:Zone';

    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Zone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }

    /**
     * (Updatable) The OCID of the compartment containing the zone.
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     *
     * **Example:** `{"Operations": {"CostCenter": "42"}}`
     */
    declare public readonly definedTags: pulumi.Output<{[key: string]: string}>;
    /**
     * DNSSEC configuration data.
     */
    declare public /*out*/ readonly dnssecConfigs: pulumi.Output<outputs.Dns.ZoneDnssecConfig[]>;
    /**
     * (Updatable) The state of DNSSEC on the zone.
     *
     * For DNSSEC to function, every parent zone in the DNS tree up to the top-level domain (or an independent trust anchor) must also have DNSSEC correctly set up. After enabling DNSSEC, you must add a DS record to the zone's parent zone containing the `KskDnssecKeyVersion` data. You can find the DS data in the `dsData` attribute of the `KskDnssecKeyVersion`. Then, use the `PromoteZoneDnssecKeyVersion` operation to promote the `KskDnssecKeyVersion`.
     *
     * New `KskDnssecKeyVersion`s are generated annually, a week before the existing `KskDnssecKeyVersion`'s expiration. To rollover a `KskDnssecKeyVersion`, you must replace the parent zone's DS record containing the old `KskDnssecKeyVersion` data with the data from the new `KskDnssecKeyVersion`.
     *
     * To remove the old DS record without causing service disruption, wait until the old DS record's TTL has expired, and the new DS record has propagated. After the DS replacement has been completed, then the `PromoteZoneDnssecKeyVersion` operation must be called.
     *
     * Metrics are emitted in the `ociDns` namespace daily for each `KskDnssecKeyVersion` indicating how many days are left until expiration. We recommend that you set up alarms and notifications for KskDnssecKeyVersion expiration so that the necessary parent zone updates can be made and the `PromoteZoneDnssecKeyVersion` operation can be called.
     *
     * Enabling DNSSEC results in additional records in DNS responses which increases their size and can cause higher response latency.
     *
     * For more information, see [DNSSEC](https://docs.cloud.oracle.com/iaas/Content/DNS/Concepts/dnssec.htm).
     */
    declare public readonly dnssecState: pulumi.Output<string>;
    /**
     * (Updatable) External secondary servers for the zone. This field is currently not supported when `zoneType` is `SECONDARY` or `scope` is `PRIVATE`.
     */
    declare public readonly externalDownstreams: pulumi.Output<outputs.Dns.ZoneExternalDownstream[]>;
    /**
     * (Updatable) External master servers for the zone. `externalMasters` becomes a required parameter when the `zoneType` value is `SECONDARY`.
     */
    declare public readonly externalMasters: pulumi.Output<outputs.Dns.ZoneExternalMaster[]>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     *
     * **Example:** `{"Department": "Finance"}`
     */
    declare public readonly freeformTags: pulumi.Output<{[key: string]: string}>;
    /**
     * A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
     */
    declare public /*out*/ readonly isProtected: pulumi.Output<boolean>;
    /**
     * The name of the zone.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The authoritative nameservers for the zone.
     */
    declare public /*out*/ readonly nameservers: pulumi.Output<outputs.Dns.ZoneNameserver[]>;
    /**
     * Specifies to operate only on resources that have a matching DNS scope. 
     * This value will be null for zones in the global DNS and `PRIVATE` when creating a private zone.
     */
    declare public readonly scope: pulumi.Output<string>;
    /**
     * The canonical absolute URL of the resource.
     */
    declare public /*out*/ readonly self: pulumi.Output<string>;
    /**
     * The current serial of the zone. As seen in the zone's SOA record.
     */
    declare public /*out*/ readonly serial: pulumi.Output<number>;
    /**
     * The current state of the zone resource.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * Version is the never-repeating, totally-orderable, version of the zone, from which the serial field of the zone's SOA record is derived.
     */
    declare public /*out*/ readonly version: pulumi.Output<string>;
    /**
     * The OCID of the private view containing the zone. This value will be null for zones in the global DNS, which are publicly resolvable and not part of a private view.
     */
    declare public readonly viewId: pulumi.Output<string | undefined>;
    /**
     * The Oracle Cloud Infrastructure nameservers that transfer the zone data with external nameservers.
     */
    declare public /*out*/ readonly zoneTransferServers: pulumi.Output<outputs.Dns.ZoneZoneTransferServer[]>;
    /**
     * The type of the zone. Must be either `PRIMARY` or `SECONDARY`. `SECONDARY` is only supported for GLOBAL zones. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly zoneType: pulumi.Output<string>;

    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneArgs | ZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneState | undefined;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["definedTags"] = state?.definedTags;
            resourceInputs["dnssecConfigs"] = state?.dnssecConfigs;
            resourceInputs["dnssecState"] = state?.dnssecState;
            resourceInputs["externalDownstreams"] = state?.externalDownstreams;
            resourceInputs["externalMasters"] = state?.externalMasters;
            resourceInputs["freeformTags"] = state?.freeformTags;
            resourceInputs["isProtected"] = state?.isProtected;
            resourceInputs["name"] = state?.name;
            resourceInputs["nameservers"] = state?.nameservers;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["self"] = state?.self;
            resourceInputs["serial"] = state?.serial;
            resourceInputs["state"] = state?.state;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["version"] = state?.version;
            resourceInputs["viewId"] = state?.viewId;
            resourceInputs["zoneTransferServers"] = state?.zoneTransferServers;
            resourceInputs["zoneType"] = state?.zoneType;
        } else {
            const args = argsOrState as ZoneArgs | undefined;
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.zoneType === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneType'");
            }
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["definedTags"] = args?.definedTags;
            resourceInputs["dnssecState"] = args?.dnssecState;
            resourceInputs["externalDownstreams"] = args?.externalDownstreams;
            resourceInputs["externalMasters"] = args?.externalMasters;
            resourceInputs["freeformTags"] = args?.freeformTags;
            resourceInputs["name"] = args?.name;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["viewId"] = args?.viewId;
            resourceInputs["zoneType"] = args?.zoneType;
            resourceInputs["dnssecConfigs"] = undefined /*out*/;
            resourceInputs["isProtected"] = undefined /*out*/;
            resourceInputs["nameservers"] = undefined /*out*/;
            resourceInputs["self"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["zoneTransferServers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Zone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    /**
     * (Updatable) The OCID of the compartment containing the zone.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     *
     * **Example:** `{"Operations": {"CostCenter": "42"}}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * DNSSEC configuration data.
     */
    dnssecConfigs?: pulumi.Input<pulumi.Input<inputs.Dns.ZoneDnssecConfig>[]>;
    /**
     * (Updatable) The state of DNSSEC on the zone.
     *
     * For DNSSEC to function, every parent zone in the DNS tree up to the top-level domain (or an independent trust anchor) must also have DNSSEC correctly set up. After enabling DNSSEC, you must add a DS record to the zone's parent zone containing the `KskDnssecKeyVersion` data. You can find the DS data in the `dsData` attribute of the `KskDnssecKeyVersion`. Then, use the `PromoteZoneDnssecKeyVersion` operation to promote the `KskDnssecKeyVersion`.
     *
     * New `KskDnssecKeyVersion`s are generated annually, a week before the existing `KskDnssecKeyVersion`'s expiration. To rollover a `KskDnssecKeyVersion`, you must replace the parent zone's DS record containing the old `KskDnssecKeyVersion` data with the data from the new `KskDnssecKeyVersion`.
     *
     * To remove the old DS record without causing service disruption, wait until the old DS record's TTL has expired, and the new DS record has propagated. After the DS replacement has been completed, then the `PromoteZoneDnssecKeyVersion` operation must be called.
     *
     * Metrics are emitted in the `ociDns` namespace daily for each `KskDnssecKeyVersion` indicating how many days are left until expiration. We recommend that you set up alarms and notifications for KskDnssecKeyVersion expiration so that the necessary parent zone updates can be made and the `PromoteZoneDnssecKeyVersion` operation can be called.
     *
     * Enabling DNSSEC results in additional records in DNS responses which increases their size and can cause higher response latency.
     *
     * For more information, see [DNSSEC](https://docs.cloud.oracle.com/iaas/Content/DNS/Concepts/dnssec.htm).
     */
    dnssecState?: pulumi.Input<string>;
    /**
     * (Updatable) External secondary servers for the zone. This field is currently not supported when `zoneType` is `SECONDARY` or `scope` is `PRIVATE`.
     */
    externalDownstreams?: pulumi.Input<pulumi.Input<inputs.Dns.ZoneExternalDownstream>[]>;
    /**
     * (Updatable) External master servers for the zone. `externalMasters` becomes a required parameter when the `zoneType` value is `SECONDARY`.
     */
    externalMasters?: pulumi.Input<pulumi.Input<inputs.Dns.ZoneExternalMaster>[]>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     *
     * **Example:** `{"Department": "Finance"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
     */
    isProtected?: pulumi.Input<boolean>;
    /**
     * The name of the zone.
     */
    name?: pulumi.Input<string>;
    /**
     * The authoritative nameservers for the zone.
     */
    nameservers?: pulumi.Input<pulumi.Input<inputs.Dns.ZoneNameserver>[]>;
    /**
     * Specifies to operate only on resources that have a matching DNS scope. 
     * This value will be null for zones in the global DNS and `PRIVATE` when creating a private zone.
     */
    scope?: pulumi.Input<string>;
    /**
     * The canonical absolute URL of the resource.
     */
    self?: pulumi.Input<string>;
    /**
     * The current serial of the zone. As seen in the zone's SOA record.
     */
    serial?: pulumi.Input<number>;
    /**
     * The current state of the zone resource.
     */
    state?: pulumi.Input<string>;
    /**
     * The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * Version is the never-repeating, totally-orderable, version of the zone, from which the serial field of the zone's SOA record is derived.
     */
    version?: pulumi.Input<string>;
    /**
     * The OCID of the private view containing the zone. This value will be null for zones in the global DNS, which are publicly resolvable and not part of a private view.
     */
    viewId?: pulumi.Input<string>;
    /**
     * The Oracle Cloud Infrastructure nameservers that transfer the zone data with external nameservers.
     */
    zoneTransferServers?: pulumi.Input<pulumi.Input<inputs.Dns.ZoneZoneTransferServer>[]>;
    /**
     * The type of the zone. Must be either `PRIMARY` or `SECONDARY`. `SECONDARY` is only supported for GLOBAL zones. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    zoneType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    /**
     * (Updatable) The OCID of the compartment containing the zone.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     *
     * **Example:** `{"Operations": {"CostCenter": "42"}}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) The state of DNSSEC on the zone.
     *
     * For DNSSEC to function, every parent zone in the DNS tree up to the top-level domain (or an independent trust anchor) must also have DNSSEC correctly set up. After enabling DNSSEC, you must add a DS record to the zone's parent zone containing the `KskDnssecKeyVersion` data. You can find the DS data in the `dsData` attribute of the `KskDnssecKeyVersion`. Then, use the `PromoteZoneDnssecKeyVersion` operation to promote the `KskDnssecKeyVersion`.
     *
     * New `KskDnssecKeyVersion`s are generated annually, a week before the existing `KskDnssecKeyVersion`'s expiration. To rollover a `KskDnssecKeyVersion`, you must replace the parent zone's DS record containing the old `KskDnssecKeyVersion` data with the data from the new `KskDnssecKeyVersion`.
     *
     * To remove the old DS record without causing service disruption, wait until the old DS record's TTL has expired, and the new DS record has propagated. After the DS replacement has been completed, then the `PromoteZoneDnssecKeyVersion` operation must be called.
     *
     * Metrics are emitted in the `ociDns` namespace daily for each `KskDnssecKeyVersion` indicating how many days are left until expiration. We recommend that you set up alarms and notifications for KskDnssecKeyVersion expiration so that the necessary parent zone updates can be made and the `PromoteZoneDnssecKeyVersion` operation can be called.
     *
     * Enabling DNSSEC results in additional records in DNS responses which increases their size and can cause higher response latency.
     *
     * For more information, see [DNSSEC](https://docs.cloud.oracle.com/iaas/Content/DNS/Concepts/dnssec.htm).
     */
    dnssecState?: pulumi.Input<string>;
    /**
     * (Updatable) External secondary servers for the zone. This field is currently not supported when `zoneType` is `SECONDARY` or `scope` is `PRIVATE`.
     */
    externalDownstreams?: pulumi.Input<pulumi.Input<inputs.Dns.ZoneExternalDownstream>[]>;
    /**
     * (Updatable) External master servers for the zone. `externalMasters` becomes a required parameter when the `zoneType` value is `SECONDARY`.
     */
    externalMasters?: pulumi.Input<pulumi.Input<inputs.Dns.ZoneExternalMaster>[]>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     *
     * **Example:** `{"Department": "Finance"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the zone.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies to operate only on resources that have a matching DNS scope. 
     * This value will be null for zones in the global DNS and `PRIVATE` when creating a private zone.
     */
    scope?: pulumi.Input<string>;
    /**
     * The OCID of the private view containing the zone. This value will be null for zones in the global DNS, which are publicly resolvable and not part of a private view.
     */
    viewId?: pulumi.Input<string>;
    /**
     * The type of the zone. Must be either `PRIMARY` or `SECONDARY`. `SECONDARY` is only supported for GLOBAL zones. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    zoneType: pulumi.Input<string>;
}
