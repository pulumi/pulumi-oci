// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Em Warehouse resource in Oracle Cloud Infrastructure Em Warehouse service.
 *
 * Creates a new EmWarehouse.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testEmWarehouse = new oci.emwarehouse.EmWarehouse("testEmWarehouse", {
 *     compartmentId: _var.compartment_id,
 *     emBridgeId: oci_em_warehouse_em_bridge.test_em_bridge.id,
 *     operationsInsightsWarehouseId: oci_opsi_operations_insights_warehouse.test_operations_insights_warehouse.id,
 *     definedTags: {
 *         "foo-namespace.bar-key": "value",
 *     },
 *     displayName: _var.em_warehouse_display_name,
 *     freeformTags: {
 *         "bar-key": "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * EmWarehouses can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:EmWarehouse/emWarehouse:EmWarehouse test_em_warehouse "id"
 * ```
 */
export class EmWarehouse extends pulumi.CustomResource {
    /**
     * Get an existing EmWarehouse resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EmWarehouseState, opts?: pulumi.CustomResourceOptions): EmWarehouse {
        return new EmWarehouse(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:EmWarehouse/emWarehouse:EmWarehouse';

    /**
     * Returns true if the given object is an instance of EmWarehouse.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EmWarehouse {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EmWarehouse.__pulumiType;
    }

    /**
     * (Updatable) Compartment Identifier
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    public readonly definedTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * EmWarehouse Identifier
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * (Updatable) EMBridge Identifier
     */
    public readonly emBridgeId!: pulumi.Output<string>;
    /**
     * Type of the EmWarehouse.
     */
    public /*out*/ readonly emWarehouseType!: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    public readonly freeformTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * Data Flow Run Status Message
     */
    public /*out*/ readonly latestEtlRunMessage!: pulumi.Output<string>;
    /**
     * Data Flow Run Status
     */
    public /*out*/ readonly latestEtlRunStatus!: pulumi.Output<string>;
    /**
     * Data Flow Run Total Time
     */
    public /*out*/ readonly latestEtlRunTime!: pulumi.Output<string>;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    /**
     * operations Insights Warehouse Identifier
     */
    public readonly operationsInsightsWarehouseId!: pulumi.Output<string>;
    /**
     * The current state of the EmWarehouse.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * The time the the EmWarehouse was created. An RFC3339 formatted datetime string
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The time the EmWarehouse was updated. An RFC3339 formatted datetime string
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;

    /**
     * Create a EmWarehouse resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EmWarehouseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EmWarehouseArgs | EmWarehouseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EmWarehouseState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["emBridgeId"] = state ? state.emBridgeId : undefined;
            resourceInputs["emWarehouseType"] = state ? state.emWarehouseType : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["latestEtlRunMessage"] = state ? state.latestEtlRunMessage : undefined;
            resourceInputs["latestEtlRunStatus"] = state ? state.latestEtlRunStatus : undefined;
            resourceInputs["latestEtlRunTime"] = state ? state.latestEtlRunTime : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["operationsInsightsWarehouseId"] = state ? state.operationsInsightsWarehouseId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
        } else {
            const args = argsOrState as EmWarehouseArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.emBridgeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'emBridgeId'");
            }
            if ((!args || args.operationsInsightsWarehouseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operationsInsightsWarehouseId'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["emBridgeId"] = args ? args.emBridgeId : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["operationsInsightsWarehouseId"] = args ? args.operationsInsightsWarehouseId : undefined;
            resourceInputs["emWarehouseType"] = undefined /*out*/;
            resourceInputs["latestEtlRunMessage"] = undefined /*out*/;
            resourceInputs["latestEtlRunStatus"] = undefined /*out*/;
            resourceInputs["latestEtlRunTime"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EmWarehouse.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EmWarehouse resources.
 */
export interface EmWarehouseState {
    /**
     * (Updatable) Compartment Identifier
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * EmWarehouse Identifier
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) EMBridge Identifier
     */
    emBridgeId?: pulumi.Input<string>;
    /**
     * Type of the EmWarehouse.
     */
    emWarehouseType?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Data Flow Run Status Message
     */
    latestEtlRunMessage?: pulumi.Input<string>;
    /**
     * Data Flow Run Status
     */
    latestEtlRunStatus?: pulumi.Input<string>;
    /**
     * Data Flow Run Total Time
     */
    latestEtlRunTime?: pulumi.Input<string>;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * operations Insights Warehouse Identifier
     */
    operationsInsightsWarehouseId?: pulumi.Input<string>;
    /**
     * The current state of the EmWarehouse.
     */
    state?: pulumi.Input<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    systemTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The time the the EmWarehouse was created. An RFC3339 formatted datetime string
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time the EmWarehouse was updated. An RFC3339 formatted datetime string
     */
    timeUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EmWarehouse resource.
 */
export interface EmWarehouseArgs {
    /**
     * (Updatable) Compartment Identifier
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * EmWarehouse Identifier
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) EMBridge Identifier
     */
    emBridgeId: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * operations Insights Warehouse Identifier
     */
    operationsInsightsWarehouseId: pulumi.Input<string>;
}
