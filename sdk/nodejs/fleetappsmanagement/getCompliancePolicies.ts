// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Compliance Policies in Oracle Cloud Infrastructure Fleet Apps Management service.
 *
 * Returns a list of all the Compliance Policies in the specified compartment.
 * The query parameter `compartmentId` is required unless the query parameter `id` is specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testCompliancePolicies = oci.FleetAppsManagement.getCompliancePolicies({
 *     compartmentId: compartmentId,
 *     displayName: compliancePolicyDisplayName,
 *     id: compliancePolicyId,
 *     state: compliancePolicyState,
 *     type: compliancePolicyType,
 * });
 * ```
 */
export function getCompliancePolicies(args?: GetCompliancePoliciesArgs, opts?: pulumi.InvokeOptions): Promise<GetCompliancePoliciesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:FleetAppsManagement/getCompliancePolicies:getCompliancePolicies", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "state": args.state,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getCompliancePolicies.
 */
export interface GetCompliancePoliciesArgs {
    /**
     * The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
     */
    compartmentId?: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.FleetAppsManagement.GetCompliancePoliciesFilter[];
    /**
     * Unique identifier or OCID for listing a single Compliance Policy by id. Either compartmentId or id must be provided.
     */
    id?: string;
    /**
     * A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
     */
    state?: string;
    /**
     * A filter to return Platform Configurations whose type matches the given type.
     */
    type?: string;
}

/**
 * A collection of values returned by getCompliancePolicies.
 */
export interface GetCompliancePoliciesResult {
    /**
     * The OCID of the compartment the CompliancePolicy belongs to.
     */
    readonly compartmentId?: string;
    /**
     * The list of compliance_policy_collection.
     */
    readonly compliancePolicyCollections: outputs.FleetAppsManagement.GetCompliancePoliciesCompliancePolicyCollection[];
    /**
     * Display name for the CompliancePolicy.
     */
    readonly displayName?: string;
    readonly filters?: outputs.FleetAppsManagement.GetCompliancePoliciesFilter[];
    /**
     * The OCID of the CompliancePolicy.
     */
    readonly id?: string;
    /**
     * The current state of the CompliancePolicy.
     */
    readonly state?: string;
    /**
     * The type of the Compliance Policy.
     */
    readonly type?: string;
}
/**
 * This data source provides the list of Compliance Policies in Oracle Cloud Infrastructure Fleet Apps Management service.
 *
 * Returns a list of all the Compliance Policies in the specified compartment.
 * The query parameter `compartmentId` is required unless the query parameter `id` is specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testCompliancePolicies = oci.FleetAppsManagement.getCompliancePolicies({
 *     compartmentId: compartmentId,
 *     displayName: compliancePolicyDisplayName,
 *     id: compliancePolicyId,
 *     state: compliancePolicyState,
 *     type: compliancePolicyType,
 * });
 * ```
 */
export function getCompliancePoliciesOutput(args?: GetCompliancePoliciesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetCompliancePoliciesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:FleetAppsManagement/getCompliancePolicies:getCompliancePolicies", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "state": args.state,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getCompliancePolicies.
 */
export interface GetCompliancePoliciesOutputArgs {
    /**
     * The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.FleetAppsManagement.GetCompliancePoliciesFilterArgs>[]>;
    /**
     * Unique identifier or OCID for listing a single Compliance Policy by id. Either compartmentId or id must be provided.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
     */
    state?: pulumi.Input<string>;
    /**
     * A filter to return Platform Configurations whose type matches the given type.
     */
    type?: pulumi.Input<string>;
}
