// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Provisions in Oracle Cloud Infrastructure Fleet Apps Management service.
 *
 * Returns a list of all the Provisions in the specified compartment.
 * The query parameter `compartmentId` is required unless the query parameter `id` or `fleetId` is specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testProvisions = oci.FleetAppsManagement.getProvisions({
 *     compartmentId: compartmentId,
 *     displayName: provisionDisplayName,
 *     fleetId: testFleet.id,
 *     id: provisionId,
 *     state: provisionState,
 * });
 * ```
 */
export function getProvisions(args?: GetProvisionsArgs, opts?: pulumi.InvokeOptions): Promise<GetProvisionsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:FleetAppsManagement/getProvisions:getProvisions", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "fleetId": args.fleetId,
        "id": args.id,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getProvisions.
 */
export interface GetProvisionsArgs {
    /**
     * (Updatable) The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
     */
    compartmentId?: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.FleetAppsManagement.GetProvisionsFilter[];
    /**
     * unique Fleet identifier
     */
    fleetId?: string;
    /**
     * Unique identifier or OCID for listing a single provision by id. Either compartmentId or id must be provided.
     */
    id?: string;
    /**
     * A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
     */
    state?: string;
}

/**
 * A collection of values returned by getProvisions.
 */
export interface GetProvisionsResult {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which instance is deployed.
     */
    readonly compartmentId?: string;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable.
     */
    readonly displayName?: string;
    readonly filters?: outputs.FleetAppsManagement.GetProvisionsFilter[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     */
    readonly fleetId?: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the FamProvision.
     */
    readonly id?: string;
    /**
     * The list of provision_collection.
     */
    readonly provisionCollections: outputs.FleetAppsManagement.GetProvisionsProvisionCollection[];
    /**
     * The current state of the FamProvision.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Provisions in Oracle Cloud Infrastructure Fleet Apps Management service.
 *
 * Returns a list of all the Provisions in the specified compartment.
 * The query parameter `compartmentId` is required unless the query parameter `id` or `fleetId` is specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testProvisions = oci.FleetAppsManagement.getProvisions({
 *     compartmentId: compartmentId,
 *     displayName: provisionDisplayName,
 *     fleetId: testFleet.id,
 *     id: provisionId,
 *     state: provisionState,
 * });
 * ```
 */
export function getProvisionsOutput(args?: GetProvisionsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProvisionsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:FleetAppsManagement/getProvisions:getProvisions", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "fleetId": args.fleetId,
        "id": args.id,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getProvisions.
 */
export interface GetProvisionsOutputArgs {
    /**
     * (Updatable) The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.FleetAppsManagement.GetProvisionsFilterArgs>[]>;
    /**
     * unique Fleet identifier
     */
    fleetId?: pulumi.Input<string>;
    /**
     * Unique identifier or OCID for listing a single provision by id. Either compartmentId or id must be provided.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
     */
    state?: pulumi.Input<string>;
}
