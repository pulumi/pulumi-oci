// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Runbook Versions in Oracle Cloud Infrastructure Fleet Apps Management service.
 *
 * List versions for a runbook in Fleet Application Management.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRunbookVersions = oci.FleetAppsManagement.getRunbookVersions({
 *     compartmentId: compartmentId,
 *     id: runbookVersionId,
 *     name: runbookVersionName,
 *     runbookId: testRunbook.id,
 *     state: runbookVersionState,
 * });
 * ```
 */
export function getRunbookVersions(args?: GetRunbookVersionsArgs, opts?: pulumi.InvokeOptions): Promise<GetRunbookVersionsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:FleetAppsManagement/getRunbookVersions:getRunbookVersions", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "id": args.id,
        "name": args.name,
        "runbookId": args.runbookId,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getRunbookVersions.
 */
export interface GetRunbookVersionsArgs {
    /**
     * The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
     */
    compartmentId?: string;
    filters?: inputs.FleetAppsManagement.GetRunbookVersionsFilter[];
    /**
     * A filter to return runbook versions whose identifier matches the given identifier.
     */
    id?: string;
    /**
     * A filter to return only resources that match the entire name given.
     */
    name?: string;
    /**
     * A filter to return only schedule definitions whose associated runbookId matches the given runbookId.
     */
    runbookId?: string;
    /**
     * A filter to return only resources whose lifecycleState matches the given lifecycleState.
     */
    state?: string;
}

/**
 * A collection of values returned by getRunbookVersions.
 */
export interface GetRunbookVersionsResult {
    readonly compartmentId?: string;
    readonly filters?: outputs.FleetAppsManagement.GetRunbookVersionsFilter[];
    /**
     * The OCID of the resource.
     */
    readonly id?: string;
    readonly isLatest: boolean;
    /**
     * The name of the task
     */
    readonly name?: string;
    /**
     * The OCID of the resource.
     */
    readonly runbookId?: string;
    /**
     * The list of runbook_version_collection.
     */
    readonly runbookVersionCollections: outputs.FleetAppsManagement.GetRunbookVersionsRunbookVersionCollection[];
    /**
     * The current state of the FleetResource.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Runbook Versions in Oracle Cloud Infrastructure Fleet Apps Management service.
 *
 * List versions for a runbook in Fleet Application Management.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRunbookVersions = oci.FleetAppsManagement.getRunbookVersions({
 *     compartmentId: compartmentId,
 *     id: runbookVersionId,
 *     name: runbookVersionName,
 *     runbookId: testRunbook.id,
 *     state: runbookVersionState,
 * });
 * ```
 */
export function getRunbookVersionsOutput(args?: GetRunbookVersionsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRunbookVersionsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:FleetAppsManagement/getRunbookVersions:getRunbookVersions", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "id": args.id,
        "name": args.name,
        "runbookId": args.runbookId,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getRunbookVersions.
 */
export interface GetRunbookVersionsOutputArgs {
    /**
     * The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
     */
    compartmentId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.FleetAppsManagement.GetRunbookVersionsFilterArgs>[]>;
    /**
     * A filter to return runbook versions whose identifier matches the given identifier.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire name given.
     */
    name?: pulumi.Input<string>;
    /**
     * A filter to return only schedule definitions whose associated runbookId matches the given runbookId.
     */
    runbookId?: pulumi.Input<string>;
    /**
     * A filter to return only resources whose lifecycleState matches the given lifecycleState.
     */
    state?: pulumi.Input<string>;
}
