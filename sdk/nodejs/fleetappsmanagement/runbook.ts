// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Runbook resource in Oracle Cloud Infrastructure Fleet Apps Management service.
 *
 * Creates a runbook.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRunbook = new oci.fleetappsmanagement.Runbook("test_runbook", {
 *     compartmentId: compartmentId,
 *     displayName: runbookDisplayName,
 *     operation: runbookOperation,
 *     runbookVersion: {
 *         executionWorkflowDetails: {
 *             workflows: [{
 *                 groupName: testGroup.name,
 *                 steps: [{
 *                     type: runbookRunbookVersionExecutionWorkflowDetailsWorkflowStepsType,
 *                     groupName: testGroup.name,
 *                     stepName: runbookRunbookVersionExecutionWorkflowDetailsWorkflowStepsStepName,
 *                     steps: runbookRunbookVersionExecutionWorkflowDetailsWorkflowStepsSteps,
 *                 }],
 *                 type: runbookRunbookVersionExecutionWorkflowDetailsWorkflowType,
 *             }],
 *         },
 *         groups: [{
 *             name: runbookRunbookVersionGroupsName,
 *             type: runbookRunbookVersionGroupsType,
 *             properties: {
 *                 actionOnFailure: runbookRunbookVersionGroupsPropertiesActionOnFailure,
 *                 notificationPreferences: {
 *                     shouldNotifyOnPause: runbookRunbookVersionGroupsPropertiesNotificationPreferencesShouldNotifyOnPause,
 *                     shouldNotifyOnTaskFailure: runbookRunbookVersionGroupsPropertiesNotificationPreferencesShouldNotifyOnTaskFailure,
 *                     shouldNotifyOnTaskSuccess: runbookRunbookVersionGroupsPropertiesNotificationPreferencesShouldNotifyOnTaskSuccess,
 *                 },
 *                 pauseDetails: {
 *                     kind: runbookRunbookVersionGroupsPropertiesPauseDetailsKind,
 *                     durationInMinutes: runbookRunbookVersionGroupsPropertiesPauseDetailsDurationInMinutes,
 *                 },
 *                 preCondition: runbookRunbookVersionGroupsPropertiesPreCondition,
 *                 runOn: {
 *                     kind: runbookRunbookVersionGroupsPropertiesRunOnKind,
 *                     condition: runbookRunbookVersionGroupsPropertiesRunOnCondition,
 *                     host: runbookRunbookVersionGroupsPropertiesRunOnHost,
 *                     previousTaskInstanceDetails: [{
 *                         outputVariableDetails: {
 *                             outputVariableName: runbookRunbookVersionGroupsPropertiesRunOnPreviousTaskInstanceDetailsOutputVariableDetailsOutputVariableName,
 *                             stepName: runbookRunbookVersionGroupsPropertiesRunOnPreviousTaskInstanceDetailsOutputVariableDetailsStepName,
 *                         },
 *                         resourceId: testResource.id,
 *                         resourceType: runbookRunbookVersionGroupsPropertiesRunOnPreviousTaskInstanceDetailsResourceType,
 *                     }],
 *                 },
 *             },
 *         }],
 *         tasks: [{
 *             stepName: runbookRunbookVersionTasksStepName,
 *             taskRecordDetails: {
 *                 scope: runbookRunbookVersionTasksTaskRecordDetailsScope,
 *                 description: runbookRunbookVersionTasksTaskRecordDetailsDescription,
 *                 executionDetails: {
 *                     executionType: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsExecutionType,
 *                     catalogId: testCatalog.id,
 *                     command: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsCommand,
 *                     configFile: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsConfigFile,
 *                     content: {
 *                         sourceType: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsContentSourceType,
 *                         bucket: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsContentBucket,
 *                         catalogId: testCatalog.id,
 *                         checksum: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsContentChecksum,
 *                         namespace: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsContentNamespace,
 *                         object: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsContentObject,
 *                     },
 *                     credentials: [{
 *                         displayName: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsCredentialsDisplayName,
 *                         id: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsCredentialsId,
 *                     }],
 *                     endpoint: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsEndpoint,
 *                     isExecutableContent: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsIsExecutableContent,
 *                     isLocked: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsIsLocked,
 *                     isReadOutputVariableEnabled: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsIsReadOutputVariableEnabled,
 *                     targetCompartmentId: testCompartment.id,
 *                     variables: {
 *                         inputVariables: [{
 *                             description: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsVariablesInputVariablesDescription,
 *                             name: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsVariablesInputVariablesName,
 *                             type: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsVariablesInputVariablesType,
 *                         }],
 *                         outputVariables: runbookRunbookVersionTasksTaskRecordDetailsExecutionDetailsVariablesOutputVariables,
 *                     },
 *                 },
 *                 isApplySubjectTask: runbookRunbookVersionTasksTaskRecordDetailsIsApplySubjectTask,
 *                 isCopyToLibraryEnabled: runbookRunbookVersionTasksTaskRecordDetailsIsCopyToLibraryEnabled,
 *                 isDiscoveryOutputTask: runbookRunbookVersionTasksTaskRecordDetailsIsDiscoveryOutputTask,
 *                 name: runbookRunbookVersionTasksTaskRecordDetailsName,
 *                 osType: runbookRunbookVersionTasksTaskRecordDetailsOsType,
 *                 platform: runbookRunbookVersionTasksTaskRecordDetailsPlatform,
 *                 properties: {
 *                     numRetries: runbookRunbookVersionTasksTaskRecordDetailsPropertiesNumRetries,
 *                     timeoutInSeconds: runbookRunbookVersionTasksTaskRecordDetailsPropertiesTimeoutInSeconds,
 *                 },
 *                 taskRecordId: testTaskRecord.id,
 *             },
 *             outputVariableMappings: [{
 *                 name: runbookRunbookVersionTasksOutputVariableMappingsName,
 *                 outputVariableDetails: {
 *                     outputVariableName: runbookRunbookVersionTasksOutputVariableMappingsOutputVariableDetailsOutputVariableName,
 *                     stepName: runbookRunbookVersionTasksOutputVariableMappingsOutputVariableDetailsStepName,
 *                 },
 *             }],
 *             stepProperties: {
 *                 actionOnFailure: runbookRunbookVersionTasksStepPropertiesActionOnFailure,
 *                 notificationPreferences: {
 *                     shouldNotifyOnPause: runbookRunbookVersionTasksStepPropertiesNotificationPreferencesShouldNotifyOnPause,
 *                     shouldNotifyOnTaskFailure: runbookRunbookVersionTasksStepPropertiesNotificationPreferencesShouldNotifyOnTaskFailure,
 *                     shouldNotifyOnTaskSuccess: runbookRunbookVersionTasksStepPropertiesNotificationPreferencesShouldNotifyOnTaskSuccess,
 *                 },
 *                 pauseDetails: {
 *                     kind: runbookRunbookVersionTasksStepPropertiesPauseDetailsKind,
 *                     durationInMinutes: runbookRunbookVersionTasksStepPropertiesPauseDetailsDurationInMinutes,
 *                 },
 *                 preCondition: runbookRunbookVersionTasksStepPropertiesPreCondition,
 *                 runOn: {
 *                     kind: runbookRunbookVersionTasksStepPropertiesRunOnKind,
 *                     condition: runbookRunbookVersionTasksStepPropertiesRunOnCondition,
 *                     host: runbookRunbookVersionTasksStepPropertiesRunOnHost,
 *                     previousTaskInstanceDetails: [{
 *                         outputVariableDetails: {
 *                             outputVariableName: runbookRunbookVersionTasksStepPropertiesRunOnPreviousTaskInstanceDetailsOutputVariableDetailsOutputVariableName,
 *                             stepName: runbookRunbookVersionTasksStepPropertiesRunOnPreviousTaskInstanceDetailsOutputVariableDetailsStepName,
 *                         },
 *                         resourceId: testResource.id,
 *                         resourceType: runbookRunbookVersionTasksStepPropertiesRunOnPreviousTaskInstanceDetailsResourceType,
 *                     }],
 *                 },
 *             },
 *         }],
 *         isLatest: runbookRunbookVersionIsLatest,
 *         rollbackWorkflowDetails: {
 *             scope: runbookRunbookVersionRollbackWorkflowDetailsScope,
 *             workflows: [{
 *                 groupName: testGroup.name,
 *                 steps: [{
 *                     type: runbookRunbookVersionRollbackWorkflowDetailsWorkflowStepsType,
 *                     groupName: testGroup.name,
 *                     stepName: runbookRunbookVersionRollbackWorkflowDetailsWorkflowStepsStepName,
 *                     steps: runbookRunbookVersionRollbackWorkflowDetailsWorkflowStepsSteps,
 *                 }],
 *                 type: runbookRunbookVersionRollbackWorkflowDetailsWorkflowType,
 *             }],
 *         },
 *         version: runbookRunbookVersionVersion,
 *     },
 *     definedTags: {
 *         "foo-namespace.bar-key": "value",
 *     },
 *     description: runbookDescription,
 *     estimatedTime: runbookEstimatedTime,
 *     freeformTags: {
 *         "bar-key": "value",
 *     },
 *     isDefault: runbookIsDefault,
 *     isSudoAccessNeeded: runbookIsSudoAccessNeeded,
 *     osType: runbookOsType,
 *     platform: runbookPlatform,
 * });
 * ```
 *
 * ## Import
 *
 * Runbooks can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:FleetAppsManagement/runbook:Runbook test_runbook "id"
 * ```
 */
export class Runbook extends pulumi.CustomResource {
    /**
     * Get an existing Runbook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RunbookState, opts?: pulumi.CustomResourceOptions): Runbook {
        return new Runbook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:FleetAppsManagement/runbook:Runbook';

    /**
     * Returns true if the given object is an instance of Runbook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Runbook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Runbook.__pulumiType;
    }

    /**
     * (Updatable)
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * (Updatable) Estimated time to successfully complete the runbook execution.
     */
    public readonly estimatedTime!: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * Does this runbook has draft versions?
     */
    public /*out*/ readonly hasDraftVersion!: pulumi.Output<boolean>;
    /**
     * (Updatable) Is the runbook default?
     */
    public readonly isDefault!: pulumi.Output<boolean>;
    /**
     * (Updatable) Does this runbook need SUDO access to execute?
     */
    public readonly isSudoAccessNeeded!: pulumi.Output<boolean>;
    /**
     * Latest runbook version
     */
    public /*out*/ readonly latestVersion!: pulumi.Output<string>;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    /**
     * (Updatable) The lifecycle operation performed by the task.
     */
    public readonly operation!: pulumi.Output<string>;
    /**
     * (Updatable) The OS type for the runbook.
     */
    public readonly osType!: pulumi.Output<string>;
    /**
     * (Updatable) The platform of the runbook.
     */
    public readonly platform!: pulumi.Output<string>;
    /**
     * Associated region
     */
    public /*out*/ readonly resourceRegion!: pulumi.Output<string>;
    /**
     * Version for the runbook.
     */
    public readonly runbookVersion!: pulumi.Output<outputs.FleetAppsManagement.RunbookRunbookVersion>;
    /**
     * The current state of the runbook.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * The time this resource was created. An RFC3339 formatted datetime string.
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The time this resource was last updated. An RFC3339 formatted datetime string.
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    /**
     * The type of the runbook.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Runbook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RunbookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RunbookArgs | RunbookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RunbookState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["estimatedTime"] = state ? state.estimatedTime : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["hasDraftVersion"] = state ? state.hasDraftVersion : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["isSudoAccessNeeded"] = state ? state.isSudoAccessNeeded : undefined;
            resourceInputs["latestVersion"] = state ? state.latestVersion : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["operation"] = state ? state.operation : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["resourceRegion"] = state ? state.resourceRegion : undefined;
            resourceInputs["runbookVersion"] = state ? state.runbookVersion : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as RunbookArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.operation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operation'");
            }
            if ((!args || args.runbookVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runbookVersion'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["estimatedTime"] = args ? args.estimatedTime : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["isSudoAccessNeeded"] = args ? args.isSudoAccessNeeded : undefined;
            resourceInputs["operation"] = args ? args.operation : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["runbookVersion"] = args ? args.runbookVersion : undefined;
            resourceInputs["hasDraftVersion"] = undefined /*out*/;
            resourceInputs["latestVersion"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["resourceRegion"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Runbook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Runbook resources.
 */
export interface RunbookState {
    /**
     * (Updatable)
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) Estimated time to successfully complete the runbook execution.
     */
    estimatedTime?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Does this runbook has draft versions?
     */
    hasDraftVersion?: pulumi.Input<boolean>;
    /**
     * (Updatable) Is the runbook default?
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * (Updatable) Does this runbook need SUDO access to execute?
     */
    isSudoAccessNeeded?: pulumi.Input<boolean>;
    /**
     * Latest runbook version
     */
    latestVersion?: pulumi.Input<string>;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * (Updatable) The lifecycle operation performed by the task.
     */
    operation?: pulumi.Input<string>;
    /**
     * (Updatable) The OS type for the runbook.
     */
    osType?: pulumi.Input<string>;
    /**
     * (Updatable) The platform of the runbook.
     */
    platform?: pulumi.Input<string>;
    /**
     * Associated region
     */
    resourceRegion?: pulumi.Input<string>;
    /**
     * Version for the runbook.
     */
    runbookVersion?: pulumi.Input<inputs.FleetAppsManagement.RunbookRunbookVersion>;
    /**
     * The current state of the runbook.
     */
    state?: pulumi.Input<string>;
    /**
     * System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time this resource was created. An RFC3339 formatted datetime string.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time this resource was last updated. An RFC3339 formatted datetime string.
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * The type of the runbook.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Runbook resource.
 */
export interface RunbookArgs {
    /**
     * (Updatable)
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
     */
    displayName: pulumi.Input<string>;
    /**
     * (Updatable) Estimated time to successfully complete the runbook execution.
     */
    estimatedTime?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Is the runbook default?
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * (Updatable) Does this runbook need SUDO access to execute?
     */
    isSudoAccessNeeded?: pulumi.Input<boolean>;
    /**
     * (Updatable) The lifecycle operation performed by the task.
     */
    operation: pulumi.Input<string>;
    /**
     * (Updatable) The OS type for the runbook.
     */
    osType?: pulumi.Input<string>;
    /**
     * (Updatable) The platform of the runbook.
     */
    platform?: pulumi.Input<string>;
    /**
     * Version for the runbook.
     */
    runbookVersion: pulumi.Input<inputs.FleetAppsManagement.RunbookRunbookVersion>;
}
