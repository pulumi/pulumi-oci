// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class FsuCycle extends pulumi.CustomResource {
    /**
     * Get an existing FsuCycle resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FsuCycleState, opts?: pulumi.CustomResourceOptions): FsuCycle {
        return new FsuCycle(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:FleetSoftwareUpdate/fsuCycle:FsuCycle';

    /**
     * Returns true if the given object is an instance of FsuCycle.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FsuCycle {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FsuCycle.__pulumiType;
    }

    public readonly applyActionSchedule!: pulumi.Output<outputs.FleetSoftwareUpdate.FsuCycleApplyActionSchedule>;
    public readonly batchingStrategy!: pulumi.Output<outputs.FleetSoftwareUpdate.FsuCycleBatchingStrategy>;
    public /*out*/ readonly collectionType!: pulumi.Output<string>;
    public readonly compartmentId!: pulumi.Output<string>;
    public readonly definedTags!: pulumi.Output<{[key: string]: any}>;
    public readonly diagnosticsCollection!: pulumi.Output<outputs.FleetSoftwareUpdate.FsuCycleDiagnosticsCollection>;
    public readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly executingFsuActionId!: pulumi.Output<string>;
    public readonly freeformTags!: pulumi.Output<{[key: string]: any}>;
    public readonly fsuCollectionId!: pulumi.Output<string>;
    public readonly goalVersionDetails!: pulumi.Output<outputs.FleetSoftwareUpdate.FsuCycleGoalVersionDetails>;
    public readonly isIgnoreMissingPatches!: pulumi.Output<string[]>;
    public readonly isIgnorePatches!: pulumi.Output<boolean>;
    public readonly isKeepPlacement!: pulumi.Output<boolean>;
    public /*out*/ readonly lastCompletedAction!: pulumi.Output<string>;
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    public readonly maxDrainTimeoutInSeconds!: pulumi.Output<number>;
    public /*out*/ readonly nextActionToExecutes!: pulumi.Output<outputs.FleetSoftwareUpdate.FsuCycleNextActionToExecute[]>;
    public readonly stageActionSchedule!: pulumi.Output<outputs.FleetSoftwareUpdate.FsuCycleStageActionSchedule>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: any}>;
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    public /*out*/ readonly timeFinished!: pulumi.Output<string>;
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a FsuCycle resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FsuCycleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FsuCycleArgs | FsuCycleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FsuCycleState | undefined;
            resourceInputs["applyActionSchedule"] = state ? state.applyActionSchedule : undefined;
            resourceInputs["batchingStrategy"] = state ? state.batchingStrategy : undefined;
            resourceInputs["collectionType"] = state ? state.collectionType : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["diagnosticsCollection"] = state ? state.diagnosticsCollection : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["executingFsuActionId"] = state ? state.executingFsuActionId : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["fsuCollectionId"] = state ? state.fsuCollectionId : undefined;
            resourceInputs["goalVersionDetails"] = state ? state.goalVersionDetails : undefined;
            resourceInputs["isIgnoreMissingPatches"] = state ? state.isIgnoreMissingPatches : undefined;
            resourceInputs["isIgnorePatches"] = state ? state.isIgnorePatches : undefined;
            resourceInputs["isKeepPlacement"] = state ? state.isKeepPlacement : undefined;
            resourceInputs["lastCompletedAction"] = state ? state.lastCompletedAction : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["maxDrainTimeoutInSeconds"] = state ? state.maxDrainTimeoutInSeconds : undefined;
            resourceInputs["nextActionToExecutes"] = state ? state.nextActionToExecutes : undefined;
            resourceInputs["stageActionSchedule"] = state ? state.stageActionSchedule : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeFinished"] = state ? state.timeFinished : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FsuCycleArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.fsuCollectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fsuCollectionId'");
            }
            if ((!args || args.goalVersionDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'goalVersionDetails'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["applyActionSchedule"] = args ? args.applyActionSchedule : undefined;
            resourceInputs["batchingStrategy"] = args ? args.batchingStrategy : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["diagnosticsCollection"] = args ? args.diagnosticsCollection : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["fsuCollectionId"] = args ? args.fsuCollectionId : undefined;
            resourceInputs["goalVersionDetails"] = args ? args.goalVersionDetails : undefined;
            resourceInputs["isIgnoreMissingPatches"] = args ? args.isIgnoreMissingPatches : undefined;
            resourceInputs["isIgnorePatches"] = args ? args.isIgnorePatches : undefined;
            resourceInputs["isKeepPlacement"] = args ? args.isKeepPlacement : undefined;
            resourceInputs["maxDrainTimeoutInSeconds"] = args ? args.maxDrainTimeoutInSeconds : undefined;
            resourceInputs["stageActionSchedule"] = args ? args.stageActionSchedule : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["collectionType"] = undefined /*out*/;
            resourceInputs["executingFsuActionId"] = undefined /*out*/;
            resourceInputs["lastCompletedAction"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["nextActionToExecutes"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeFinished"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FsuCycle.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FsuCycle resources.
 */
export interface FsuCycleState {
    applyActionSchedule?: pulumi.Input<inputs.FleetSoftwareUpdate.FsuCycleApplyActionSchedule>;
    batchingStrategy?: pulumi.Input<inputs.FleetSoftwareUpdate.FsuCycleBatchingStrategy>;
    collectionType?: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: any}>;
    diagnosticsCollection?: pulumi.Input<inputs.FleetSoftwareUpdate.FsuCycleDiagnosticsCollection>;
    displayName?: pulumi.Input<string>;
    executingFsuActionId?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    fsuCollectionId?: pulumi.Input<string>;
    goalVersionDetails?: pulumi.Input<inputs.FleetSoftwareUpdate.FsuCycleGoalVersionDetails>;
    isIgnoreMissingPatches?: pulumi.Input<pulumi.Input<string>[]>;
    isIgnorePatches?: pulumi.Input<boolean>;
    isKeepPlacement?: pulumi.Input<boolean>;
    lastCompletedAction?: pulumi.Input<string>;
    lifecycleDetails?: pulumi.Input<string>;
    maxDrainTimeoutInSeconds?: pulumi.Input<number>;
    nextActionToExecutes?: pulumi.Input<pulumi.Input<inputs.FleetSoftwareUpdate.FsuCycleNextActionToExecute>[]>;
    stageActionSchedule?: pulumi.Input<inputs.FleetSoftwareUpdate.FsuCycleStageActionSchedule>;
    state?: pulumi.Input<string>;
    systemTags?: pulumi.Input<{[key: string]: any}>;
    timeCreated?: pulumi.Input<string>;
    timeFinished?: pulumi.Input<string>;
    timeUpdated?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FsuCycle resource.
 */
export interface FsuCycleArgs {
    applyActionSchedule?: pulumi.Input<inputs.FleetSoftwareUpdate.FsuCycleApplyActionSchedule>;
    batchingStrategy?: pulumi.Input<inputs.FleetSoftwareUpdate.FsuCycleBatchingStrategy>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: any}>;
    diagnosticsCollection?: pulumi.Input<inputs.FleetSoftwareUpdate.FsuCycleDiagnosticsCollection>;
    displayName?: pulumi.Input<string>;
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    fsuCollectionId: pulumi.Input<string>;
    goalVersionDetails: pulumi.Input<inputs.FleetSoftwareUpdate.FsuCycleGoalVersionDetails>;
    isIgnoreMissingPatches?: pulumi.Input<pulumi.Input<string>[]>;
    isIgnorePatches?: pulumi.Input<boolean>;
    isKeepPlacement?: pulumi.Input<boolean>;
    maxDrainTimeoutInSeconds?: pulumi.Input<number>;
    stageActionSchedule?: pulumi.Input<inputs.FleetSoftwareUpdate.FsuCycleStageActionSchedule>;
    type: pulumi.Input<string>;
}
