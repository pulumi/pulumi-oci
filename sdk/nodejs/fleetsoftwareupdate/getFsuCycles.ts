// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Fsu Cycles in Oracle Cloud Infrastructure Fleet Software Update service.
 *
 * Gets a list of all Exadata Fleet Update Cycles in a compartment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testFsuCycles = oci.FleetSoftwareUpdate.getFsuCycles({
 *     compartmentId: compartmentId,
 *     collectionType: fsuCycleCollectionType,
 *     displayName: fsuCycleDisplayName,
 *     fsuCollectionId: testFsuCollection.id,
 *     state: fsuCycleState,
 *     targetVersion: fsuCycleTargetVersion,
 * });
 * ```
 */
export function getFsuCycles(args: GetFsuCyclesArgs, opts?: pulumi.InvokeOptions): Promise<GetFsuCyclesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:FleetSoftwareUpdate/getFsuCycles:getFsuCycles", {
        "collectionType": args.collectionType,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "fsuCollectionId": args.fsuCollectionId,
        "state": args.state,
        "targetVersion": args.targetVersion,
    }, opts);
}

/**
 * A collection of arguments for invoking getFsuCycles.
 */
export interface GetFsuCyclesArgs {
    /**
     * A filter to return only resources whose Collection type matches the given type.
     */
    collectionType?: string;
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.FleetSoftwareUpdate.GetFsuCyclesFilter[];
    /**
     * A filter to return only resources whose fsuCollectionId matches the given fsuCollectionId.
     */
    fsuCollectionId?: string;
    /**
     * A filter to return only resources whose lifecycleState matches the given lifecycleState.
     */
    state?: string;
    /**
     * A filter to return only entries whose targetVersion matches the given targetVersion.
     */
    targetVersion?: string;
}

/**
 * A collection of values returned by getFsuCycles.
 */
export interface GetFsuCyclesResult {
    /**
     * Type of Collection this Exadata Fleet Update Cycle belongs to.
     */
    readonly collectionType?: string;
    /**
     * Compartment Identifier.
     */
    readonly compartmentId: string;
    /**
     * Exadata Fleet Update Cycle display name.
     */
    readonly displayName?: string;
    readonly filters?: outputs.FleetSoftwareUpdate.GetFsuCyclesFilter[];
    /**
     * OCID identifier for the Collection ID the Exadata Fleet Update Cycle is assigned to.
     */
    readonly fsuCollectionId?: string;
    /**
     * The list of fsu_cycle_summary_collection.
     */
    readonly fsuCycleSummaryCollections: outputs.FleetSoftwareUpdate.GetFsuCyclesFsuCycleSummaryCollection[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The current state of the Exadata Fleet Update Cycle.
     */
    readonly state?: string;
    readonly targetVersion?: string;
}
/**
 * This data source provides the list of Fsu Cycles in Oracle Cloud Infrastructure Fleet Software Update service.
 *
 * Gets a list of all Exadata Fleet Update Cycles in a compartment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testFsuCycles = oci.FleetSoftwareUpdate.getFsuCycles({
 *     compartmentId: compartmentId,
 *     collectionType: fsuCycleCollectionType,
 *     displayName: fsuCycleDisplayName,
 *     fsuCollectionId: testFsuCollection.id,
 *     state: fsuCycleState,
 *     targetVersion: fsuCycleTargetVersion,
 * });
 * ```
 */
export function getFsuCyclesOutput(args: GetFsuCyclesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFsuCyclesResult> {
    return pulumi.output(args).apply((a: any) => getFsuCycles(a, opts))
}

/**
 * A collection of arguments for invoking getFsuCycles.
 */
export interface GetFsuCyclesOutputArgs {
    /**
     * A filter to return only resources whose Collection type matches the given type.
     */
    collectionType?: pulumi.Input<string>;
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.FleetSoftwareUpdate.GetFsuCyclesFilterArgs>[]>;
    /**
     * A filter to return only resources whose fsuCollectionId matches the given fsuCollectionId.
     */
    fsuCollectionId?: pulumi.Input<string>;
    /**
     * A filter to return only resources whose lifecycleState matches the given lifecycleState.
     */
    state?: pulumi.Input<string>;
    /**
     * A filter to return only entries whose targetVersion matches the given targetVersion.
     */
    targetVersion?: pulumi.Input<string>;
}
