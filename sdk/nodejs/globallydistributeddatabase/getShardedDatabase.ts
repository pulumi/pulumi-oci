// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Sharded Database resource in Oracle Cloud Infrastructure Globally Distributed Database service.
 *
 * Gets the details of the Sharded database identified by given id.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testShardedDatabase = oci.GloballyDistributedDatabase.getShardedDatabase({
 *     shardedDatabaseId: testShardedDatabaseOciGloballyDistributedDatabaseShardedDatabase.id,
 *     metadata: shardedDatabaseMetadata,
 * });
 * ```
 */
export function getShardedDatabase(args: GetShardedDatabaseArgs, opts?: pulumi.InvokeOptions): Promise<GetShardedDatabaseResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:GloballyDistributedDatabase/getShardedDatabase:getShardedDatabase", {
        "metadata": args.metadata,
        "shardedDatabaseId": args.shardedDatabaseId,
    }, opts);
}

/**
 * A collection of arguments for invoking getShardedDatabase.
 */
export interface GetShardedDatabaseArgs {
    /**
     * Comma separated names of argument corresponding to which metadata need to be retrived, namely VM_CLUSTER_INFO, ADDITIONAL_RESOURCE_INFO. An example is metadata=VM_CLUSTER_INFO,ADDITIONAL_RESOURCE_INFO.
     */
    metadata?: string;
    /**
     * Sharded Database identifier
     */
    shardedDatabaseId: string;
}

/**
 * A collection of values returned by getShardedDatabase.
 */
export interface GetShardedDatabaseResult {
    readonly caSignedCertificate: string;
    /**
     * Details of ATP-D based catalogs.
     */
    readonly catalogDetails: outputs.GloballyDistributedDatabase.GetShardedDatabaseCatalogDetail[];
    /**
     * The character set for the database.
     */
    readonly characterSet: string;
    /**
     * The default number of unique chunks in a shardspace. The value of chunks must be greater than 2 times the size of the largest shardgroup in any shardspace.
     */
    readonly chunks: number;
    /**
     * The certificate common name used in all cloudAutonomousVmClusters for the sharded database topology. Eg. Production. All the clusters used in one sharded database topology shall have same CABundle setup. Valid characterset for clusterCertificateCommonName include uppercase or lowercase letters, numbers, hyphens, underscores, and period.
     */
    readonly clusterCertificateCommonName: string;
    /**
     * Identifier of the compartment in which sharded database exists.
     */
    readonly compartmentId: string;
    readonly configureGsmsTrigger: number;
    readonly configureGsmsTriggerIsLatestGsmImage: boolean;
    readonly configureGsmsTriggerOldGsmNames: string[];
    readonly configureShardingTrigger: number;
    /**
     * Details of sharded database connection String.
     */
    readonly connectionStrings: outputs.GloballyDistributedDatabase.GetShardedDatabaseConnectionString[];
    /**
     * The database deployment type.
     */
    readonly dbDeploymentType: string;
    /**
     * Oracle Database version number.
     */
    readonly dbVersion: string;
    /**
     * Possible workload types.
     */
    readonly dbWorkload: string;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    readonly definedTags: {[key: string]: string};
    /**
     * Oracle sharded database display name.
     */
    readonly displayName: string;
    readonly downloadGsmCertificateSigningRequestTrigger: number;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    readonly freeformTags: {[key: string]: string};
    readonly generateGsmCertificateSigningRequestTrigger: number;
    readonly generateWalletPassword: string;
    readonly generateWalletTrigger: number;
    readonly getConnectionStringTrigger: number;
    /**
     * Details of GSM instances for the sharded database.
     */
    readonly gsms: outputs.GloballyDistributedDatabase.GetShardedDatabaseGsm[];
    /**
     * Sharded Database identifier
     */
    readonly id: string;
    readonly lifecycleState: string;
    /**
     * Detailed message for the lifecycle state.
     */
    readonly lifecycleStateDetails: string;
    /**
     * The GSM listener port number.
     */
    readonly listenerPort: number;
    /**
     * The TLS listener port number for sharded database.
     */
    readonly listenerPortTls: number;
    /**
     * Additional metadata related to shard's underlying supporting resource.
     */
    readonly metadata?: string;
    /**
     * The national character set for the database.
     */
    readonly ncharacterSet: string;
    /**
     * Ons local port number.
     */
    readonly onsPortLocal: number;
    /**
     * Ons remote port number.
     */
    readonly onsPortRemote: number;
    readonly patchOperations: outputs.GloballyDistributedDatabase.GetShardedDatabasePatchOperation[];
    /**
     * Unique prefix for the sharded database.
     */
    readonly prefix: string;
    /**
     * The OCID of private endpoint being used by the sharded database.
     */
    readonly privateEndpoint: string;
    /**
     * The Replication factor for RAFT replication based sharded database. Currently supported values are 3, 5 and 7.
     */
    readonly replicationFactor: number;
    /**
     * The Replication method for sharded database. Use RAFT for Raft replication, and DG for DataGuard. If replicationMethod is not provided, it defaults to DG.
     */
    readonly replicationMethod: string;
    /**
     * For RAFT replication based sharded database, the value should be atleast twice the number of shards.
     */
    readonly replicationUnit: number;
    /**
     * Details of ATP-D based shards.
     */
    readonly shardDetails: outputs.GloballyDistributedDatabase.GetShardedDatabaseShardDetail[];
    readonly shardedDatabaseId: string;
    /**
     * Sharding Method.
     */
    readonly shardingMethod: string;
    readonly startDatabaseTrigger: number;
    /**
     * Lifecycle states for sharded databases.
     */
    readonly state: string;
    readonly stopDatabaseTrigger: number;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    readonly systemTags: {[key: string]: string};
    /**
     * The time the the Sharded Database was created. An RFC3339 formatted datetime string
     */
    readonly timeCreated: string;
    /**
     * The time the Sharded Database was last updated. An RFC3339 formatted datetime string
     */
    readonly timeUpdated: string;
    /**
     * Timezone associated with the sharded database.
     */
    readonly timeZone: string;
    readonly uploadSignedCertificateAndGenerateWalletTrigger: number;
    readonly validateNetworkTrigger: number;
}
/**
 * This data source provides details about a specific Sharded Database resource in Oracle Cloud Infrastructure Globally Distributed Database service.
 *
 * Gets the details of the Sharded database identified by given id.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testShardedDatabase = oci.GloballyDistributedDatabase.getShardedDatabase({
 *     shardedDatabaseId: testShardedDatabaseOciGloballyDistributedDatabaseShardedDatabase.id,
 *     metadata: shardedDatabaseMetadata,
 * });
 * ```
 */
export function getShardedDatabaseOutput(args: GetShardedDatabaseOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetShardedDatabaseResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:GloballyDistributedDatabase/getShardedDatabase:getShardedDatabase", {
        "metadata": args.metadata,
        "shardedDatabaseId": args.shardedDatabaseId,
    }, opts);
}

/**
 * A collection of arguments for invoking getShardedDatabase.
 */
export interface GetShardedDatabaseOutputArgs {
    /**
     * Comma separated names of argument corresponding to which metadata need to be retrived, namely VM_CLUSTER_INFO, ADDITIONAL_RESOURCE_INFO. An example is metadata=VM_CLUSTER_INFO,ADDITIONAL_RESOURCE_INFO.
     */
    metadata?: pulumi.Input<string>;
    /**
     * Sharded Database identifier
     */
    shardedDatabaseId: pulumi.Input<string>;
}
