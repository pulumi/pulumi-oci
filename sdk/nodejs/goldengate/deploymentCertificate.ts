// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Deployment Certificate resource in Oracle Cloud Infrastructure Golden Gate service.
 *
 * Creates a new certificate to truststore.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDeploymentCertificate = new oci.goldengate.DeploymentCertificate("test_deployment_certificate", {
 *     certificateContent: deploymentCertificateCertificateContent,
 *     deploymentId: testDeployment.id,
 *     key: deploymentCertificateKey,
 * });
 * ```
 *
 * ## Import
 *
 * DeploymentCertificates can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:GoldenGate/deploymentCertificate:DeploymentCertificate test_deployment_certificate "deployments/{deploymentId}/certificates/{certificateKey}"
 * ```
 */
export class DeploymentCertificate extends pulumi.CustomResource {
    /**
     * Get an existing DeploymentCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeploymentCertificateState, opts?: pulumi.CustomResourceOptions): DeploymentCertificate {
        return new DeploymentCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:GoldenGate/deploymentCertificate:DeploymentCertificate';

    /**
     * Returns true if the given object is an instance of DeploymentCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeploymentCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeploymentCertificate.__pulumiType;
    }

    /**
     * The Certificate authority key id.
     */
    public /*out*/ readonly authorityKeyId!: pulumi.Output<string>;
    /**
     * A PEM-encoded SSL certificate.
     */
    public readonly certificateContent!: pulumi.Output<string>;
    /**
     * A unique Deployment identifier.
     */
    public readonly deploymentId!: pulumi.Output<string>;
    /**
     * Indicates if the certificate is ca.
     */
    public /*out*/ readonly isCa!: pulumi.Output<boolean>;
    /**
     * Indicates if the certificate is self signed.
     */
    public /*out*/ readonly isSelfSigned!: pulumi.Output<boolean>;
    /**
     * The Certificate issuer.
     */
    public /*out*/ readonly issuer!: pulumi.Output<string>;
    /**
     * The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The Certificate md5Hash.
     */
    public /*out*/ readonly md5hash!: pulumi.Output<string>;
    /**
     * The Certificate public key.
     */
    public /*out*/ readonly publicKey!: pulumi.Output<string>;
    /**
     * The Certificate public key algorithm.
     */
    public /*out*/ readonly publicKeyAlgorithm!: pulumi.Output<string>;
    /**
     * The Certificate public key size.
     */
    public /*out*/ readonly publicKeySize!: pulumi.Output<string>;
    /**
     * The Certificate serial.
     */
    public /*out*/ readonly serial!: pulumi.Output<string>;
    /**
     * The Certificate sha1 hash.
     */
    public /*out*/ readonly sha1hash!: pulumi.Output<string>;
    /**
     * Possible certificate lifecycle states.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The Certificate subject.
     */
    public /*out*/ readonly subject!: pulumi.Output<string>;
    /**
     * The Certificate subject key id.
     */
    public /*out*/ readonly subjectKeyId!: pulumi.Output<string>;
    /**
     * The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     */
    public /*out*/ readonly timeValidFrom!: pulumi.Output<string>;
    /**
     * The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     */
    public /*out*/ readonly timeValidTo!: pulumi.Output<string>;
    /**
     * The Certificate version.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a DeploymentCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeploymentCertificateArgs | DeploymentCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeploymentCertificateState | undefined;
            resourceInputs["authorityKeyId"] = state ? state.authorityKeyId : undefined;
            resourceInputs["certificateContent"] = state ? state.certificateContent : undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["isCa"] = state ? state.isCa : undefined;
            resourceInputs["isSelfSigned"] = state ? state.isSelfSigned : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["md5hash"] = state ? state.md5hash : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["publicKeyAlgorithm"] = state ? state.publicKeyAlgorithm : undefined;
            resourceInputs["publicKeySize"] = state ? state.publicKeySize : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["sha1hash"] = state ? state.sha1hash : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subject"] = state ? state.subject : undefined;
            resourceInputs["subjectKeyId"] = state ? state.subjectKeyId : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeValidFrom"] = state ? state.timeValidFrom : undefined;
            resourceInputs["timeValidTo"] = state ? state.timeValidTo : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as DeploymentCertificateArgs | undefined;
            if ((!args || args.certificateContent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateContent'");
            }
            if ((!args || args.deploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentId'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["certificateContent"] = args ? args.certificateContent : undefined;
            resourceInputs["deploymentId"] = args ? args.deploymentId : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["authorityKeyId"] = undefined /*out*/;
            resourceInputs["isCa"] = undefined /*out*/;
            resourceInputs["isSelfSigned"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["md5hash"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
            resourceInputs["publicKeyAlgorithm"] = undefined /*out*/;
            resourceInputs["publicKeySize"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
            resourceInputs["sha1hash"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["subject"] = undefined /*out*/;
            resourceInputs["subjectKeyId"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeValidFrom"] = undefined /*out*/;
            resourceInputs["timeValidTo"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeploymentCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeploymentCertificate resources.
 */
export interface DeploymentCertificateState {
    /**
     * The Certificate authority key id.
     */
    authorityKeyId?: pulumi.Input<string>;
    /**
     * A PEM-encoded SSL certificate.
     */
    certificateContent?: pulumi.Input<string>;
    /**
     * A unique Deployment identifier.
     */
    deploymentId?: pulumi.Input<string>;
    /**
     * Indicates if the certificate is ca.
     */
    isCa?: pulumi.Input<boolean>;
    /**
     * Indicates if the certificate is self signed.
     */
    isSelfSigned?: pulumi.Input<boolean>;
    /**
     * The Certificate issuer.
     */
    issuer?: pulumi.Input<string>;
    /**
     * The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    key?: pulumi.Input<string>;
    /**
     * The Certificate md5Hash.
     */
    md5hash?: pulumi.Input<string>;
    /**
     * The Certificate public key.
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The Certificate public key algorithm.
     */
    publicKeyAlgorithm?: pulumi.Input<string>;
    /**
     * The Certificate public key size.
     */
    publicKeySize?: pulumi.Input<string>;
    /**
     * The Certificate serial.
     */
    serial?: pulumi.Input<string>;
    /**
     * The Certificate sha1 hash.
     */
    sha1hash?: pulumi.Input<string>;
    /**
     * Possible certificate lifecycle states.
     */
    state?: pulumi.Input<string>;
    /**
     * The Certificate subject.
     */
    subject?: pulumi.Input<string>;
    /**
     * The Certificate subject key id.
     */
    subjectKeyId?: pulumi.Input<string>;
    /**
     * The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     */
    timeValidFrom?: pulumi.Input<string>;
    /**
     * The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     */
    timeValidTo?: pulumi.Input<string>;
    /**
     * The Certificate version.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeploymentCertificate resource.
 */
export interface DeploymentCertificateArgs {
    /**
     * A PEM-encoded SSL certificate.
     */
    certificateContent: pulumi.Input<string>;
    /**
     * A unique Deployment identifier.
     */
    deploymentId: pulumi.Input<string>;
    /**
     * The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    key: pulumi.Input<string>;
}
