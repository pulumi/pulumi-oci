// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Deployment Certificate resource in Oracle Cloud Infrastructure Golden Gate service.
 *
 * Retrieves a Certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDeploymentCertificate = oci.GoldenGate.getDeploymentCertificate({
 *     certificateKey: deploymentCertificateCertificateKey,
 *     deploymentId: testDeployment.id,
 * });
 * ```
 */
export function getDeploymentCertificate(args: GetDeploymentCertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetDeploymentCertificateResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:GoldenGate/getDeploymentCertificate:getDeploymentCertificate", {
        "certificateKey": args.certificateKey,
        "deploymentId": args.deploymentId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDeploymentCertificate.
 */
export interface GetDeploymentCertificateArgs {
    /**
     * A unique certificate identifier.
     */
    certificateKey: string;
    /**
     * A unique Deployment identifier.
     */
    deploymentId: string;
}

/**
 * A collection of values returned by getDeploymentCertificate.
 */
export interface GetDeploymentCertificateResult {
    /**
     * The Certificate authority key id.
     */
    readonly authorityKeyId: string;
    /**
     * A PEM-encoded SSL certificate.
     */
    readonly certificateContent: string;
    readonly certificateKey: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
     */
    readonly deploymentId: string;
    readonly id: string;
    /**
     * Indicates if the certificate is ca.
     */
    readonly isCa: boolean;
    /**
     * Indicates if the certificate is self signed.
     */
    readonly isSelfSigned: boolean;
    /**
     * The Certificate issuer.
     */
    readonly issuer: string;
    /**
     * The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
     */
    readonly key: string;
    /**
     * The Certificate md5Hash.
     */
    readonly md5hash: string;
    /**
     * The Certificate public key.
     */
    readonly publicKey: string;
    /**
     * The Certificate public key algorithm.
     */
    readonly publicKeyAlgorithm: string;
    /**
     * The Certificate public key size.
     */
    readonly publicKeySize: string;
    /**
     * The Certificate serial.
     */
    readonly serial: string;
    /**
     * The Certificate sha1 hash.
     */
    readonly sha1hash: string;
    /**
     * Possible certificate lifecycle states.
     */
    readonly state: string;
    /**
     * The Certificate subject.
     */
    readonly subject: string;
    /**
     * The Certificate subject key id.
     */
    readonly subjectKeyId: string;
    /**
     * The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     */
    readonly timeCreated: string;
    /**
     * The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     */
    readonly timeValidFrom: string;
    /**
     * The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
     */
    readonly timeValidTo: string;
    /**
     * The Certificate version.
     */
    readonly version: string;
}
/**
 * This data source provides details about a specific Deployment Certificate resource in Oracle Cloud Infrastructure Golden Gate service.
 *
 * Retrieves a Certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDeploymentCertificate = oci.GoldenGate.getDeploymentCertificate({
 *     certificateKey: deploymentCertificateCertificateKey,
 *     deploymentId: testDeployment.id,
 * });
 * ```
 */
export function getDeploymentCertificateOutput(args: GetDeploymentCertificateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDeploymentCertificateResult> {
    return pulumi.output(args).apply((a: any) => getDeploymentCertificate(a, opts))
}

/**
 * A collection of arguments for invoking getDeploymentCertificate.
 */
export interface GetDeploymentCertificateOutputArgs {
    /**
     * A unique certificate identifier.
     */
    certificateKey: pulumi.Input<string>;
    /**
     * A unique Deployment identifier.
     */
    deploymentId: pulumi.Input<string>;
}
