// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Http Monitor resource in Oracle Cloud Infrastructure Health Checks service.
 *
 * Creates an HTTP monitor. Vantage points will be automatically selected if not specified,
 * and probes will be initiated from each vantage point to each of the targets at the frequency
 * specified by `intervalInSeconds`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testHttpMonitor = new oci.healthchecks.HttpMonitor("test_http_monitor", {
 *     compartmentId: compartmentId,
 *     displayName: httpMonitorDisplayName,
 *     intervalInSeconds: httpMonitorIntervalInSeconds,
 *     protocol: httpMonitorProtocol,
 *     targets: httpMonitorTargets,
 *     definedTags: {
 *         "Operations.CostCenter": "42",
 *     },
 *     freeformTags: {
 *         Department: "Finance",
 *     },
 *     headers: httpMonitorHeaders,
 *     isEnabled: httpMonitorIsEnabled,
 *     method: httpMonitorMethod,
 *     path: httpMonitorPath,
 *     port: httpMonitorPort,
 *     timeoutInSeconds: httpMonitorTimeoutInSeconds,
 *     vantagePointNames: httpMonitorVantagePointNames,
 * });
 * ```
 *
 * ## Import
 *
 * HttpMonitors can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:HealthChecks/httpMonitor:HttpMonitor test_http_monitor "id"
 * ```
 */
export class HttpMonitor extends pulumi.CustomResource {
    /**
     * Get an existing HttpMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HttpMonitorState, opts?: pulumi.CustomResourceOptions): HttpMonitor {
        return new HttpMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:HealthChecks/httpMonitor:HttpMonitor';

    /**
     * Returns true if the given object is an instance of HttpMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HttpMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HttpMonitor.__pulumiType;
    }

    /**
     * (Updatable) The OCID of the compartment.
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
     */
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) A user-friendly and mutable name suitable for display in a user interface.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
     */
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) A dictionary of HTTP request headers.
     *
     * *Note:* Monitors and probes do not support the use of the `Authorization` HTTP header.
     */
    public readonly headers!: pulumi.Output<{[key: string]: string}>;
    /**
     * The region where updates must be made and where results must be fetched from.
     */
    public /*out*/ readonly homeRegion!: pulumi.Output<string>;
    /**
     * (Updatable) The monitor interval in seconds. Valid values: 10, 30, and 60.
     */
    public readonly intervalInSeconds!: pulumi.Output<number>;
    /**
     * (Updatable) Enables or disables the monitor. Set to 'true' to launch monitoring.
     */
    public readonly isEnabled!: pulumi.Output<boolean>;
    /**
     * (Updatable) The supported HTTP methods available for probes.
     */
    public readonly method!: pulumi.Output<string>;
    /**
     * (Updatable) The optional URL path to probe, including query parameters.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * (Updatable) The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * (Updatable) The supported protocols available for HTTP probes.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * A URL for fetching the probe results.
     */
    public /*out*/ readonly resultsUrl!: pulumi.Output<string>;
    /**
     * (Updatable) A list of targets (hostnames or IP addresses) of the probe.
     */
    public readonly targets!: pulumi.Output<string[]>;
    /**
     * The RFC 3339-formatted creation date and time of the probe.
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * (Updatable) The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
     */
    public readonly timeoutInSeconds!: pulumi.Output<number>;
    /**
     * (Updatable) A list of names of vantage points from which to execute the probe.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly vantagePointNames!: pulumi.Output<string[]>;

    /**
     * Create a HttpMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HttpMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HttpMonitorArgs | HttpMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HttpMonitorState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["homeRegion"] = state ? state.homeRegion : undefined;
            resourceInputs["intervalInSeconds"] = state ? state.intervalInSeconds : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["resultsUrl"] = state ? state.resultsUrl : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeoutInSeconds"] = state ? state.timeoutInSeconds : undefined;
            resourceInputs["vantagePointNames"] = state ? state.vantagePointNames : undefined;
        } else {
            const args = argsOrState as HttpMonitorArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.intervalInSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'intervalInSeconds'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["headers"] = args ? args.headers : undefined;
            resourceInputs["intervalInSeconds"] = args ? args.intervalInSeconds : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["timeoutInSeconds"] = args ? args.timeoutInSeconds : undefined;
            resourceInputs["vantagePointNames"] = args ? args.vantagePointNames : undefined;
            resourceInputs["homeRegion"] = undefined /*out*/;
            resourceInputs["resultsUrl"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HttpMonitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HttpMonitor resources.
 */
export interface HttpMonitorState {
    /**
     * (Updatable) The OCID of the compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A user-friendly and mutable name suitable for display in a user interface.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A dictionary of HTTP request headers.
     *
     * *Note:* Monitors and probes do not support the use of the `Authorization` HTTP header.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The region where updates must be made and where results must be fetched from.
     */
    homeRegion?: pulumi.Input<string>;
    /**
     * (Updatable) The monitor interval in seconds. Valid values: 10, 30, and 60.
     */
    intervalInSeconds?: pulumi.Input<number>;
    /**
     * (Updatable) Enables or disables the monitor. Set to 'true' to launch monitoring.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * (Updatable) The supported HTTP methods available for probes.
     */
    method?: pulumi.Input<string>;
    /**
     * (Updatable) The optional URL path to probe, including query parameters.
     */
    path?: pulumi.Input<string>;
    /**
     * (Updatable) The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
     */
    port?: pulumi.Input<number>;
    /**
     * (Updatable) The supported protocols available for HTTP probes.
     */
    protocol?: pulumi.Input<string>;
    /**
     * A URL for fetching the probe results.
     */
    resultsUrl?: pulumi.Input<string>;
    /**
     * (Updatable) A list of targets (hostnames or IP addresses) of the probe.
     */
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The RFC 3339-formatted creation date and time of the probe.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * (Updatable) The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
     */
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * (Updatable) A list of names of vantage points from which to execute the probe.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    vantagePointNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a HttpMonitor resource.
 */
export interface HttpMonitorArgs {
    /**
     * (Updatable) The OCID of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A user-friendly and mutable name suitable for display in a user interface.
     */
    displayName: pulumi.Input<string>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A dictionary of HTTP request headers.
     *
     * *Note:* Monitors and probes do not support the use of the `Authorization` HTTP header.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) The monitor interval in seconds. Valid values: 10, 30, and 60.
     */
    intervalInSeconds: pulumi.Input<number>;
    /**
     * (Updatable) Enables or disables the monitor. Set to 'true' to launch monitoring.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * (Updatable) The supported HTTP methods available for probes.
     */
    method?: pulumi.Input<string>;
    /**
     * (Updatable) The optional URL path to probe, including query parameters.
     */
    path?: pulumi.Input<string>;
    /**
     * (Updatable) The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
     */
    port?: pulumi.Input<number>;
    /**
     * (Updatable) The supported protocols available for HTTP probes.
     */
    protocol: pulumi.Input<string>;
    /**
     * (Updatable) A list of targets (hostnames or IP addresses) of the probe.
     */
    targets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Updatable) The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
     */
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * (Updatable) A list of names of vantage points from which to execute the probe.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    vantagePointNames?: pulumi.Input<pulumi.Input<string>[]>;
}
