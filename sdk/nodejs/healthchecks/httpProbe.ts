// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Http Probe resource in Oracle Cloud Infrastructure Health Checks service.
 *
 * Creates an on-demand HTTP probe. The location response header contains the URL for
 * fetching the probe results.
 *
 * *Note:* On-demand probe configurations are not saved.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testHttpProbe = new oci.healthchecks.HttpProbe("test_http_probe", {
 *     compartmentId: compartmentId,
 *     protocol: httpProbeProtocol,
 *     targets: httpProbeTargets,
 *     headers: httpProbeHeaders,
 *     method: httpProbeMethod,
 *     path: httpProbePath,
 *     port: httpProbePort,
 *     timeoutInSeconds: httpProbeTimeoutInSeconds,
 *     vantagePointNames: httpProbeVantagePointNames,
 * });
 * ```
 *
 * ## Import
 *
 * HttpProbes can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:HealthChecks/httpProbe:HttpProbe test_http_probe "id"
 * ```
 */
export class HttpProbe extends pulumi.CustomResource {
    /**
     * Get an existing HttpProbe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HttpProbeState, opts?: pulumi.CustomResourceOptions): HttpProbe {
        return new HttpProbe(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:HealthChecks/httpProbe:HttpProbe';

    /**
     * Returns true if the given object is an instance of HttpProbe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HttpProbe {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HttpProbe.__pulumiType;
    }

    /**
     * The OCID of the compartment.
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * A dictionary of HTTP request headers.
     *
     * *Note:* Monitors and probes do not support the use of the `Authorization` HTTP header.
     */
    declare public readonly headers: pulumi.Output<{[key: string]: string}>;
    /**
     * The region where updates must be made and where results must be fetched from.
     */
    declare public /*out*/ readonly homeRegion: pulumi.Output<string>;
    /**
     * The supported HTTP methods available for probes.
     */
    declare public readonly method: pulumi.Output<string>;
    /**
     * The optional URL path to probe, including query parameters.
     */
    declare public readonly path: pulumi.Output<string>;
    /**
     * The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
     */
    declare public readonly port: pulumi.Output<number>;
    /**
     * The supported protocols available for HTTP probes.
     */
    declare public readonly protocol: pulumi.Output<string>;
    /**
     * A URL for fetching the probe results.
     */
    declare public /*out*/ readonly resultsUrl: pulumi.Output<string>;
    /**
     * A list of targets (hostnames or IP addresses) of the probe.
     */
    declare public readonly targets: pulumi.Output<string[]>;
    /**
     * The RFC 3339-formatted creation date and time of the probe.
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
     */
    declare public readonly timeoutInSeconds: pulumi.Output<number>;
    /**
     * A list of names of vantage points from which to execute the probe.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly vantagePointNames: pulumi.Output<string[]>;

    /**
     * Create a HttpProbe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HttpProbeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HttpProbeArgs | HttpProbeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HttpProbeState | undefined;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["headers"] = state?.headers;
            resourceInputs["homeRegion"] = state?.homeRegion;
            resourceInputs["method"] = state?.method;
            resourceInputs["path"] = state?.path;
            resourceInputs["port"] = state?.port;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["resultsUrl"] = state?.resultsUrl;
            resourceInputs["targets"] = state?.targets;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeoutInSeconds"] = state?.timeoutInSeconds;
            resourceInputs["vantagePointNames"] = state?.vantagePointNames;
        } else {
            const args = argsOrState as HttpProbeArgs | undefined;
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if (args?.targets === undefined && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["headers"] = args?.headers;
            resourceInputs["method"] = args?.method;
            resourceInputs["path"] = args?.path;
            resourceInputs["port"] = args?.port;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["targets"] = args?.targets;
            resourceInputs["timeoutInSeconds"] = args?.timeoutInSeconds;
            resourceInputs["vantagePointNames"] = args?.vantagePointNames;
            resourceInputs["homeRegion"] = undefined /*out*/;
            resourceInputs["resultsUrl"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HttpProbe.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HttpProbe resources.
 */
export interface HttpProbeState {
    /**
     * The OCID of the compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A dictionary of HTTP request headers.
     *
     * *Note:* Monitors and probes do not support the use of the `Authorization` HTTP header.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The region where updates must be made and where results must be fetched from.
     */
    homeRegion?: pulumi.Input<string>;
    /**
     * The supported HTTP methods available for probes.
     */
    method?: pulumi.Input<string>;
    /**
     * The optional URL path to probe, including query parameters.
     */
    path?: pulumi.Input<string>;
    /**
     * The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
     */
    port?: pulumi.Input<number>;
    /**
     * The supported protocols available for HTTP probes.
     */
    protocol?: pulumi.Input<string>;
    /**
     * A URL for fetching the probe results.
     */
    resultsUrl?: pulumi.Input<string>;
    /**
     * A list of targets (hostnames or IP addresses) of the probe.
     */
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The RFC 3339-formatted creation date and time of the probe.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
     */
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * A list of names of vantage points from which to execute the probe.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    vantagePointNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a HttpProbe resource.
 */
export interface HttpProbeArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * A dictionary of HTTP request headers.
     *
     * *Note:* Monitors and probes do not support the use of the `Authorization` HTTP header.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The supported HTTP methods available for probes.
     */
    method?: pulumi.Input<string>;
    /**
     * The optional URL path to probe, including query parameters.
     */
    path?: pulumi.Input<string>;
    /**
     * The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
     */
    port?: pulumi.Input<number>;
    /**
     * The supported protocols available for HTTP probes.
     */
    protocol: pulumi.Input<string>;
    /**
     * A list of targets (hostnames or IP addresses) of the probe.
     */
    targets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
     */
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * A list of names of vantage points from which to execute the probe.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    vantagePointNames?: pulumi.Input<pulumi.Input<string>[]>;
}
