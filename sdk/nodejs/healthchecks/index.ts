// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetHttpMonitorArgs, GetHttpMonitorResult, GetHttpMonitorOutputArgs } from "./getHttpMonitor";
export const getHttpMonitor: typeof import("./getHttpMonitor").getHttpMonitor = null as any;
export const getHttpMonitorOutput: typeof import("./getHttpMonitor").getHttpMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getHttpMonitor","getHttpMonitorOutput"], () => require("./getHttpMonitor"));

export { GetHttpMonitorsArgs, GetHttpMonitorsResult, GetHttpMonitorsOutputArgs } from "./getHttpMonitors";
export const getHttpMonitors: typeof import("./getHttpMonitors").getHttpMonitors = null as any;
export const getHttpMonitorsOutput: typeof import("./getHttpMonitors").getHttpMonitorsOutput = null as any;
utilities.lazyLoad(exports, ["getHttpMonitors","getHttpMonitorsOutput"], () => require("./getHttpMonitors"));

export { GetHttpProbeResultsArgs, GetHttpProbeResultsResult, GetHttpProbeResultsOutputArgs } from "./getHttpProbeResults";
export const getHttpProbeResults: typeof import("./getHttpProbeResults").getHttpProbeResults = null as any;
export const getHttpProbeResultsOutput: typeof import("./getHttpProbeResults").getHttpProbeResultsOutput = null as any;
utilities.lazyLoad(exports, ["getHttpProbeResults","getHttpProbeResultsOutput"], () => require("./getHttpProbeResults"));

export { GetPingMonitorArgs, GetPingMonitorResult, GetPingMonitorOutputArgs } from "./getPingMonitor";
export const getPingMonitor: typeof import("./getPingMonitor").getPingMonitor = null as any;
export const getPingMonitorOutput: typeof import("./getPingMonitor").getPingMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getPingMonitor","getPingMonitorOutput"], () => require("./getPingMonitor"));

export { GetPingMonitorsArgs, GetPingMonitorsResult, GetPingMonitorsOutputArgs } from "./getPingMonitors";
export const getPingMonitors: typeof import("./getPingMonitors").getPingMonitors = null as any;
export const getPingMonitorsOutput: typeof import("./getPingMonitors").getPingMonitorsOutput = null as any;
utilities.lazyLoad(exports, ["getPingMonitors","getPingMonitorsOutput"], () => require("./getPingMonitors"));

export { GetPingProbeResultsArgs, GetPingProbeResultsResult, GetPingProbeResultsOutputArgs } from "./getPingProbeResults";
export const getPingProbeResults: typeof import("./getPingProbeResults").getPingProbeResults = null as any;
export const getPingProbeResultsOutput: typeof import("./getPingProbeResults").getPingProbeResultsOutput = null as any;
utilities.lazyLoad(exports, ["getPingProbeResults","getPingProbeResultsOutput"], () => require("./getPingProbeResults"));

export { GetVantagePointsArgs, GetVantagePointsResult, GetVantagePointsOutputArgs } from "./getVantagePoints";
export const getVantagePoints: typeof import("./getVantagePoints").getVantagePoints = null as any;
export const getVantagePointsOutput: typeof import("./getVantagePoints").getVantagePointsOutput = null as any;
utilities.lazyLoad(exports, ["getVantagePoints","getVantagePointsOutput"], () => require("./getVantagePoints"));

export { HttpMonitorArgs, HttpMonitorState } from "./httpMonitor";
export type HttpMonitor = import("./httpMonitor").HttpMonitor;
export const HttpMonitor: typeof import("./httpMonitor").HttpMonitor = null as any;
utilities.lazyLoad(exports, ["HttpMonitor"], () => require("./httpMonitor"));

export { HttpProbeArgs, HttpProbeState } from "./httpProbe";
export type HttpProbe = import("./httpProbe").HttpProbe;
export const HttpProbe: typeof import("./httpProbe").HttpProbe = null as any;
utilities.lazyLoad(exports, ["HttpProbe"], () => require("./httpProbe"));

export { PingMonitorArgs, PingMonitorState } from "./pingMonitor";
export type PingMonitor = import("./pingMonitor").PingMonitor;
export const PingMonitor: typeof import("./pingMonitor").PingMonitor = null as any;
utilities.lazyLoad(exports, ["PingMonitor"], () => require("./pingMonitor"));

export { PingProbeArgs, PingProbeState } from "./pingProbe";
export type PingProbe = import("./pingProbe").PingProbe;
export const PingProbe: typeof import("./pingProbe").PingProbe = null as any;
utilities.lazyLoad(exports, ["PingProbe"], () => require("./pingProbe"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:HealthChecks/httpMonitor:HttpMonitor":
                return new HttpMonitor(name, <any>undefined, { urn })
            case "oci:HealthChecks/httpProbe:HttpProbe":
                return new HttpProbe(name, <any>undefined, { urn })
            case "oci:HealthChecks/pingMonitor:PingMonitor":
                return new PingMonitor(name, <any>undefined, { urn })
            case "oci:HealthChecks/pingProbe:PingProbe":
                return new PingProbe(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "HealthChecks/httpMonitor", _module)
pulumi.runtime.registerResourceModule("oci", "HealthChecks/httpProbe", _module)
pulumi.runtime.registerResourceModule("oci", "HealthChecks/pingMonitor", _module)
pulumi.runtime.registerResourceModule("oci", "HealthChecks/pingProbe", _module)
