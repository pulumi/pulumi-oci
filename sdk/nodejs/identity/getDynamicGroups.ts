// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Dynamic Groups in Oracle Cloud Infrastructure Identity service.
 *
 * Lists the dynamic groups in your tenancy. You must specify your tenancy's OCID as the value for
 * the compartment ID (remember that the tenancy is simply the root compartment).
 * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five).
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDynamicGroups = oci.Identity.getDynamicGroups({
 *     compartmentId: _var.tenancy_ocid,
 *     name: _var.dynamic_group_name,
 *     state: _var.dynamic_group_state,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getDynamicGroups(args: GetDynamicGroupsArgs, opts?: pulumi.InvokeOptions): Promise<GetDynamicGroupsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Identity/getDynamicGroups:getDynamicGroups", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "name": args.name,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getDynamicGroups.
 */
export interface GetDynamicGroupsArgs {
    /**
     * The OCID of the compartment (remember that the tenancy is simply the root compartment).
     */
    compartmentId: string;
    filters?: inputs.Identity.GetDynamicGroupsFilter[];
    /**
     * A filter to only return resources that match the given name exactly.
     */
    name?: string;
    /**
     * A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
     */
    state?: string;
}

/**
 * A collection of values returned by getDynamicGroups.
 */
export interface GetDynamicGroupsResult {
    /**
     * The OCID of the tenancy containing the group.
     */
    readonly compartmentId: string;
    /**
     * The list of dynamic_groups.
     */
    readonly dynamicGroups: outputs.Identity.GetDynamicGroupsDynamicGroup[];
    readonly filters?: outputs.Identity.GetDynamicGroupsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name you assign to the group during creation. The name must be unique across all groups in the tenancy and cannot be changed.
     */
    readonly name?: string;
    /**
     * The group's current state.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Dynamic Groups in Oracle Cloud Infrastructure Identity service.
 *
 * Lists the dynamic groups in your tenancy. You must specify your tenancy's OCID as the value for
 * the compartment ID (remember that the tenancy is simply the root compartment).
 * See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five).
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testDynamicGroups = oci.Identity.getDynamicGroups({
 *     compartmentId: _var.tenancy_ocid,
 *     name: _var.dynamic_group_name,
 *     state: _var.dynamic_group_state,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getDynamicGroupsOutput(args: GetDynamicGroupsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDynamicGroupsResult> {
    return pulumi.output(args).apply((a: any) => getDynamicGroups(a, opts))
}

/**
 * A collection of arguments for invoking getDynamicGroups.
 */
export interface GetDynamicGroupsOutputArgs {
    /**
     * The OCID of the compartment (remember that the tenancy is simply the root compartment).
     */
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Identity.GetDynamicGroupsFilterArgs>[]>;
    /**
     * A filter to only return resources that match the given name exactly.
     */
    name?: pulumi.Input<string>;
    /**
     * A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
     */
    state?: pulumi.Input<string>;
}
