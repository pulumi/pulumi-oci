// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of User Group Memberships in Oracle Cloud Infrastructure Identity service.
 *
 * Lists the `UserGroupMembership` objects in your tenancy. You must specify your tenancy's OCID
 * as the value for the compartment ID
 * (see [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five)).
 * You must also then filter the list in one of these ways:
 *
 * - You can limit the results to just the memberships for a given user by specifying a `userId`.
 * - Similarly, you can limit the results to just the memberships for a given group by specifying a `groupId`.
 * - You can set both the `userId` and `groupId` to determine if the specified user is in the specified group.
 *   If the answer is no, the response is an empty list.
 * - Although`userId` and `groupId` are not individually required, you must set one of them.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testUserGroupMemberships = oci.Identity.getUserGroupMemberships({
 *     compartmentId: tenancyOcid,
 *     groupId: testGroup.id,
 *     userId: testUser.id,
 * });
 * ```
 */
export function getUserGroupMemberships(args: GetUserGroupMembershipsArgs, opts?: pulumi.InvokeOptions): Promise<GetUserGroupMembershipsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Identity/getUserGroupMemberships:getUserGroupMemberships", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "groupId": args.groupId,
        "userId": args.userId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUserGroupMemberships.
 */
export interface GetUserGroupMembershipsArgs {
    /**
     * The OCID of the compartment (remember that the tenancy is simply the root compartment).
     */
    compartmentId: string;
    filters?: inputs.Identity.GetUserGroupMembershipsFilter[];
    /**
     * The OCID of the group.
     */
    groupId?: string;
    /**
     * The OCID of the user.
     */
    userId?: string;
}

/**
 * A collection of values returned by getUserGroupMemberships.
 */
export interface GetUserGroupMembershipsResult {
    /**
     * The OCID of the tenancy containing the user, group, and membership object.
     */
    readonly compartmentId: string;
    readonly filters?: outputs.Identity.GetUserGroupMembershipsFilter[];
    /**
     * The OCID of the group.
     */
    readonly groupId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The list of memberships.
     */
    readonly memberships: outputs.Identity.GetUserGroupMembershipsMembership[];
    /**
     * The OCID of the user.
     */
    readonly userId?: string;
}
/**
 * This data source provides the list of User Group Memberships in Oracle Cloud Infrastructure Identity service.
 *
 * Lists the `UserGroupMembership` objects in your tenancy. You must specify your tenancy's OCID
 * as the value for the compartment ID
 * (see [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five)).
 * You must also then filter the list in one of these ways:
 *
 * - You can limit the results to just the memberships for a given user by specifying a `userId`.
 * - Similarly, you can limit the results to just the memberships for a given group by specifying a `groupId`.
 * - You can set both the `userId` and `groupId` to determine if the specified user is in the specified group.
 *   If the answer is no, the response is an empty list.
 * - Although`userId` and `groupId` are not individually required, you must set one of them.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testUserGroupMemberships = oci.Identity.getUserGroupMemberships({
 *     compartmentId: tenancyOcid,
 *     groupId: testGroup.id,
 *     userId: testUser.id,
 * });
 * ```
 */
export function getUserGroupMembershipsOutput(args: GetUserGroupMembershipsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserGroupMembershipsResult> {
    return pulumi.output(args).apply((a: any) => getUserGroupMemberships(a, opts))
}

/**
 * A collection of arguments for invoking getUserGroupMemberships.
 */
export interface GetUserGroupMembershipsOutputArgs {
    /**
     * The OCID of the compartment (remember that the tenancy is simply the root compartment).
     */
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Identity.GetUserGroupMembershipsFilterArgs>[]>;
    /**
     * The OCID of the group.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The OCID of the user.
     */
    userId?: pulumi.Input<string>;
}
