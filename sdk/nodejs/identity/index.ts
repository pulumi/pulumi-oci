// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { AuthTokenArgs, AuthTokenState } from "./authToken";
export type AuthToken = import("./authToken").AuthToken;
export const AuthToken: typeof import("./authToken").AuthToken = null as any;
utilities.lazyLoad(exports, ["AuthToken"], () => require("./authToken"));

export { AuthenticationPolicyArgs, AuthenticationPolicyState } from "./authenticationPolicy";
export type AuthenticationPolicy = import("./authenticationPolicy").AuthenticationPolicy;
export const AuthenticationPolicy: typeof import("./authenticationPolicy").AuthenticationPolicy = null as any;
utilities.lazyLoad(exports, ["AuthenticationPolicy"], () => require("./authenticationPolicy"));

export { CompartmentArgs, CompartmentState } from "./compartment";
export type Compartment = import("./compartment").Compartment;
export const Compartment: typeof import("./compartment").Compartment = null as any;
utilities.lazyLoad(exports, ["Compartment"], () => require("./compartment"));

export { CustomerSecretKeyArgs, CustomerSecretKeyState } from "./customerSecretKey";
export type CustomerSecretKey = import("./customerSecretKey").CustomerSecretKey;
export const CustomerSecretKey: typeof import("./customerSecretKey").CustomerSecretKey = null as any;
utilities.lazyLoad(exports, ["CustomerSecretKey"], () => require("./customerSecretKey"));

export { DbCredentialArgs, DbCredentialState } from "./dbCredential";
export type DbCredential = import("./dbCredential").DbCredential;
export const DbCredential: typeof import("./dbCredential").DbCredential = null as any;
utilities.lazyLoad(exports, ["DbCredential"], () => require("./dbCredential"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { DomainReplicationToRegionArgs, DomainReplicationToRegionState } from "./domainReplicationToRegion";
export type DomainReplicationToRegion = import("./domainReplicationToRegion").DomainReplicationToRegion;
export const DomainReplicationToRegion: typeof import("./domainReplicationToRegion").DomainReplicationToRegion = null as any;
utilities.lazyLoad(exports, ["DomainReplicationToRegion"], () => require("./domainReplicationToRegion"));

export { DomainsAccountRecoverySettingArgs, DomainsAccountRecoverySettingState } from "./domainsAccountRecoverySetting";
export type DomainsAccountRecoverySetting = import("./domainsAccountRecoverySetting").DomainsAccountRecoverySetting;
export const DomainsAccountRecoverySetting: typeof import("./domainsAccountRecoverySetting").DomainsAccountRecoverySetting = null as any;
utilities.lazyLoad(exports, ["DomainsAccountRecoverySetting"], () => require("./domainsAccountRecoverySetting"));

export { DomainsApiKeyArgs, DomainsApiKeyState } from "./domainsApiKey";
export type DomainsApiKey = import("./domainsApiKey").DomainsApiKey;
export const DomainsApiKey: typeof import("./domainsApiKey").DomainsApiKey = null as any;
utilities.lazyLoad(exports, ["DomainsApiKey"], () => require("./domainsApiKey"));

export { DomainsAppArgs, DomainsAppState } from "./domainsApp";
export type DomainsApp = import("./domainsApp").DomainsApp;
export const DomainsApp: typeof import("./domainsApp").DomainsApp = null as any;
utilities.lazyLoad(exports, ["DomainsApp"], () => require("./domainsApp"));

export { DomainsAppRoleArgs, DomainsAppRoleState } from "./domainsAppRole";
export type DomainsAppRole = import("./domainsAppRole").DomainsAppRole;
export const DomainsAppRole: typeof import("./domainsAppRole").DomainsAppRole = null as any;
utilities.lazyLoad(exports, ["DomainsAppRole"], () => require("./domainsAppRole"));

export { DomainsApprovalWorkflowArgs, DomainsApprovalWorkflowState } from "./domainsApprovalWorkflow";
export type DomainsApprovalWorkflow = import("./domainsApprovalWorkflow").DomainsApprovalWorkflow;
export const DomainsApprovalWorkflow: typeof import("./domainsApprovalWorkflow").DomainsApprovalWorkflow = null as any;
utilities.lazyLoad(exports, ["DomainsApprovalWorkflow"], () => require("./domainsApprovalWorkflow"));

export { DomainsApprovalWorkflowAssignmentArgs, DomainsApprovalWorkflowAssignmentState } from "./domainsApprovalWorkflowAssignment";
export type DomainsApprovalWorkflowAssignment = import("./domainsApprovalWorkflowAssignment").DomainsApprovalWorkflowAssignment;
export const DomainsApprovalWorkflowAssignment: typeof import("./domainsApprovalWorkflowAssignment").DomainsApprovalWorkflowAssignment = null as any;
utilities.lazyLoad(exports, ["DomainsApprovalWorkflowAssignment"], () => require("./domainsApprovalWorkflowAssignment"));

export { DomainsApprovalWorkflowStepArgs, DomainsApprovalWorkflowStepState } from "./domainsApprovalWorkflowStep";
export type DomainsApprovalWorkflowStep = import("./domainsApprovalWorkflowStep").DomainsApprovalWorkflowStep;
export const DomainsApprovalWorkflowStep: typeof import("./domainsApprovalWorkflowStep").DomainsApprovalWorkflowStep = null as any;
utilities.lazyLoad(exports, ["DomainsApprovalWorkflowStep"], () => require("./domainsApprovalWorkflowStep"));

export { DomainsAuthTokenArgs, DomainsAuthTokenState } from "./domainsAuthToken";
export type DomainsAuthToken = import("./domainsAuthToken").DomainsAuthToken;
export const DomainsAuthToken: typeof import("./domainsAuthToken").DomainsAuthToken = null as any;
utilities.lazyLoad(exports, ["DomainsAuthToken"], () => require("./domainsAuthToken"));

export { DomainsAuthenticationFactorSettingArgs, DomainsAuthenticationFactorSettingState } from "./domainsAuthenticationFactorSetting";
export type DomainsAuthenticationFactorSetting = import("./domainsAuthenticationFactorSetting").DomainsAuthenticationFactorSetting;
export const DomainsAuthenticationFactorSetting: typeof import("./domainsAuthenticationFactorSetting").DomainsAuthenticationFactorSetting = null as any;
utilities.lazyLoad(exports, ["DomainsAuthenticationFactorSetting"], () => require("./domainsAuthenticationFactorSetting"));

export { DomainsCloudGateArgs, DomainsCloudGateState } from "./domainsCloudGate";
export type DomainsCloudGate = import("./domainsCloudGate").DomainsCloudGate;
export const DomainsCloudGate: typeof import("./domainsCloudGate").DomainsCloudGate = null as any;
utilities.lazyLoad(exports, ["DomainsCloudGate"], () => require("./domainsCloudGate"));

export { DomainsCloudGateMappingArgs, DomainsCloudGateMappingState } from "./domainsCloudGateMapping";
export type DomainsCloudGateMapping = import("./domainsCloudGateMapping").DomainsCloudGateMapping;
export const DomainsCloudGateMapping: typeof import("./domainsCloudGateMapping").DomainsCloudGateMapping = null as any;
utilities.lazyLoad(exports, ["DomainsCloudGateMapping"], () => require("./domainsCloudGateMapping"));

export { DomainsCloudGateServerArgs, DomainsCloudGateServerState } from "./domainsCloudGateServer";
export type DomainsCloudGateServer = import("./domainsCloudGateServer").DomainsCloudGateServer;
export const DomainsCloudGateServer: typeof import("./domainsCloudGateServer").DomainsCloudGateServer = null as any;
utilities.lazyLoad(exports, ["DomainsCloudGateServer"], () => require("./domainsCloudGateServer"));

export { DomainsConditionArgs, DomainsConditionState } from "./domainsCondition";
export type DomainsCondition = import("./domainsCondition").DomainsCondition;
export const DomainsCondition: typeof import("./domainsCondition").DomainsCondition = null as any;
utilities.lazyLoad(exports, ["DomainsCondition"], () => require("./domainsCondition"));

export { DomainsCustomerSecretKeyArgs, DomainsCustomerSecretKeyState } from "./domainsCustomerSecretKey";
export type DomainsCustomerSecretKey = import("./domainsCustomerSecretKey").DomainsCustomerSecretKey;
export const DomainsCustomerSecretKey: typeof import("./domainsCustomerSecretKey").DomainsCustomerSecretKey = null as any;
utilities.lazyLoad(exports, ["DomainsCustomerSecretKey"], () => require("./domainsCustomerSecretKey"));

export { DomainsDynamicResourceGroupArgs, DomainsDynamicResourceGroupState } from "./domainsDynamicResourceGroup";
export type DomainsDynamicResourceGroup = import("./domainsDynamicResourceGroup").DomainsDynamicResourceGroup;
export const DomainsDynamicResourceGroup: typeof import("./domainsDynamicResourceGroup").DomainsDynamicResourceGroup = null as any;
utilities.lazyLoad(exports, ["DomainsDynamicResourceGroup"], () => require("./domainsDynamicResourceGroup"));

export { DomainsGrantArgs, DomainsGrantState } from "./domainsGrant";
export type DomainsGrant = import("./domainsGrant").DomainsGrant;
export const DomainsGrant: typeof import("./domainsGrant").DomainsGrant = null as any;
utilities.lazyLoad(exports, ["DomainsGrant"], () => require("./domainsGrant"));

export { DomainsGroupArgs, DomainsGroupState } from "./domainsGroup";
export type DomainsGroup = import("./domainsGroup").DomainsGroup;
export const DomainsGroup: typeof import("./domainsGroup").DomainsGroup = null as any;
utilities.lazyLoad(exports, ["DomainsGroup"], () => require("./domainsGroup"));

export { DomainsIdentityProviderArgs, DomainsIdentityProviderState } from "./domainsIdentityProvider";
export type DomainsIdentityProvider = import("./domainsIdentityProvider").DomainsIdentityProvider;
export const DomainsIdentityProvider: typeof import("./domainsIdentityProvider").DomainsIdentityProvider = null as any;
utilities.lazyLoad(exports, ["DomainsIdentityProvider"], () => require("./domainsIdentityProvider"));

export { DomainsIdentitySettingArgs, DomainsIdentitySettingState } from "./domainsIdentitySetting";
export type DomainsIdentitySetting = import("./domainsIdentitySetting").DomainsIdentitySetting;
export const DomainsIdentitySetting: typeof import("./domainsIdentitySetting").DomainsIdentitySetting = null as any;
utilities.lazyLoad(exports, ["DomainsIdentitySetting"], () => require("./domainsIdentitySetting"));

export { DomainsKmsiSettingArgs, DomainsKmsiSettingState } from "./domainsKmsiSetting";
export type DomainsKmsiSetting = import("./domainsKmsiSetting").DomainsKmsiSetting;
export const DomainsKmsiSetting: typeof import("./domainsKmsiSetting").DomainsKmsiSetting = null as any;
utilities.lazyLoad(exports, ["DomainsKmsiSetting"], () => require("./domainsKmsiSetting"));

export { DomainsMyApiKeyArgs, DomainsMyApiKeyState } from "./domainsMyApiKey";
export type DomainsMyApiKey = import("./domainsMyApiKey").DomainsMyApiKey;
export const DomainsMyApiKey: typeof import("./domainsMyApiKey").DomainsMyApiKey = null as any;
utilities.lazyLoad(exports, ["DomainsMyApiKey"], () => require("./domainsMyApiKey"));

export { DomainsMyAuthTokenArgs, DomainsMyAuthTokenState } from "./domainsMyAuthToken";
export type DomainsMyAuthToken = import("./domainsMyAuthToken").DomainsMyAuthToken;
export const DomainsMyAuthToken: typeof import("./domainsMyAuthToken").DomainsMyAuthToken = null as any;
utilities.lazyLoad(exports, ["DomainsMyAuthToken"], () => require("./domainsMyAuthToken"));

export { DomainsMyCustomerSecretKeyArgs, DomainsMyCustomerSecretKeyState } from "./domainsMyCustomerSecretKey";
export type DomainsMyCustomerSecretKey = import("./domainsMyCustomerSecretKey").DomainsMyCustomerSecretKey;
export const DomainsMyCustomerSecretKey: typeof import("./domainsMyCustomerSecretKey").DomainsMyCustomerSecretKey = null as any;
utilities.lazyLoad(exports, ["DomainsMyCustomerSecretKey"], () => require("./domainsMyCustomerSecretKey"));

export { DomainsMyOauth2clientCredentialArgs, DomainsMyOauth2clientCredentialState } from "./domainsMyOauth2clientCredential";
export type DomainsMyOauth2clientCredential = import("./domainsMyOauth2clientCredential").DomainsMyOauth2clientCredential;
export const DomainsMyOauth2clientCredential: typeof import("./domainsMyOauth2clientCredential").DomainsMyOauth2clientCredential = null as any;
utilities.lazyLoad(exports, ["DomainsMyOauth2clientCredential"], () => require("./domainsMyOauth2clientCredential"));

export { DomainsMyRequestArgs, DomainsMyRequestState } from "./domainsMyRequest";
export type DomainsMyRequest = import("./domainsMyRequest").DomainsMyRequest;
export const DomainsMyRequest: typeof import("./domainsMyRequest").DomainsMyRequest = null as any;
utilities.lazyLoad(exports, ["DomainsMyRequest"], () => require("./domainsMyRequest"));

export { DomainsMySmtpCredentialArgs, DomainsMySmtpCredentialState } from "./domainsMySmtpCredential";
export type DomainsMySmtpCredential = import("./domainsMySmtpCredential").DomainsMySmtpCredential;
export const DomainsMySmtpCredential: typeof import("./domainsMySmtpCredential").DomainsMySmtpCredential = null as any;
utilities.lazyLoad(exports, ["DomainsMySmtpCredential"], () => require("./domainsMySmtpCredential"));

export { DomainsMySupportAccountArgs, DomainsMySupportAccountState } from "./domainsMySupportAccount";
export type DomainsMySupportAccount = import("./domainsMySupportAccount").DomainsMySupportAccount;
export const DomainsMySupportAccount: typeof import("./domainsMySupportAccount").DomainsMySupportAccount = null as any;
utilities.lazyLoad(exports, ["DomainsMySupportAccount"], () => require("./domainsMySupportAccount"));

export { DomainsMyUserDbCredentialArgs, DomainsMyUserDbCredentialState } from "./domainsMyUserDbCredential";
export type DomainsMyUserDbCredential = import("./domainsMyUserDbCredential").DomainsMyUserDbCredential;
export const DomainsMyUserDbCredential: typeof import("./domainsMyUserDbCredential").DomainsMyUserDbCredential = null as any;
utilities.lazyLoad(exports, ["DomainsMyUserDbCredential"], () => require("./domainsMyUserDbCredential"));

export { DomainsNetworkPerimeterArgs, DomainsNetworkPerimeterState } from "./domainsNetworkPerimeter";
export type DomainsNetworkPerimeter = import("./domainsNetworkPerimeter").DomainsNetworkPerimeter;
export const DomainsNetworkPerimeter: typeof import("./domainsNetworkPerimeter").DomainsNetworkPerimeter = null as any;
utilities.lazyLoad(exports, ["DomainsNetworkPerimeter"], () => require("./domainsNetworkPerimeter"));

export { DomainsNotificationSettingArgs, DomainsNotificationSettingState } from "./domainsNotificationSetting";
export type DomainsNotificationSetting = import("./domainsNotificationSetting").DomainsNotificationSetting;
export const DomainsNotificationSetting: typeof import("./domainsNotificationSetting").DomainsNotificationSetting = null as any;
utilities.lazyLoad(exports, ["DomainsNotificationSetting"], () => require("./domainsNotificationSetting"));

export { DomainsOauth2clientCredentialArgs, DomainsOauth2clientCredentialState } from "./domainsOauth2clientCredential";
export type DomainsOauth2clientCredential = import("./domainsOauth2clientCredential").DomainsOauth2clientCredential;
export const DomainsOauth2clientCredential: typeof import("./domainsOauth2clientCredential").DomainsOauth2clientCredential = null as any;
utilities.lazyLoad(exports, ["DomainsOauth2clientCredential"], () => require("./domainsOauth2clientCredential"));

export { DomainsOauthClientCertificateArgs, DomainsOauthClientCertificateState } from "./domainsOauthClientCertificate";
export type DomainsOauthClientCertificate = import("./domainsOauthClientCertificate").DomainsOauthClientCertificate;
export const DomainsOauthClientCertificate: typeof import("./domainsOauthClientCertificate").DomainsOauthClientCertificate = null as any;
utilities.lazyLoad(exports, ["DomainsOauthClientCertificate"], () => require("./domainsOauthClientCertificate"));

export { DomainsOauthPartnerCertificateArgs, DomainsOauthPartnerCertificateState } from "./domainsOauthPartnerCertificate";
export type DomainsOauthPartnerCertificate = import("./domainsOauthPartnerCertificate").DomainsOauthPartnerCertificate;
export const DomainsOauthPartnerCertificate: typeof import("./domainsOauthPartnerCertificate").DomainsOauthPartnerCertificate = null as any;
utilities.lazyLoad(exports, ["DomainsOauthPartnerCertificate"], () => require("./domainsOauthPartnerCertificate"));

export { DomainsPasswordPolicyArgs, DomainsPasswordPolicyState } from "./domainsPasswordPolicy";
export type DomainsPasswordPolicy = import("./domainsPasswordPolicy").DomainsPasswordPolicy;
export const DomainsPasswordPolicy: typeof import("./domainsPasswordPolicy").DomainsPasswordPolicy = null as any;
utilities.lazyLoad(exports, ["DomainsPasswordPolicy"], () => require("./domainsPasswordPolicy"));

export { DomainsPolicyArgs, DomainsPolicyState } from "./domainsPolicy";
export type DomainsPolicy = import("./domainsPolicy").DomainsPolicy;
export const DomainsPolicy: typeof import("./domainsPolicy").DomainsPolicy = null as any;
utilities.lazyLoad(exports, ["DomainsPolicy"], () => require("./domainsPolicy"));

export { DomainsRuleArgs, DomainsRuleState } from "./domainsRule";
export type DomainsRule = import("./domainsRule").DomainsRule;
export const DomainsRule: typeof import("./domainsRule").DomainsRule = null as any;
utilities.lazyLoad(exports, ["DomainsRule"], () => require("./domainsRule"));

export { DomainsSecurityQuestionArgs, DomainsSecurityQuestionState } from "./domainsSecurityQuestion";
export type DomainsSecurityQuestion = import("./domainsSecurityQuestion").DomainsSecurityQuestion;
export const DomainsSecurityQuestion: typeof import("./domainsSecurityQuestion").DomainsSecurityQuestion = null as any;
utilities.lazyLoad(exports, ["DomainsSecurityQuestion"], () => require("./domainsSecurityQuestion"));

export { DomainsSecurityQuestionSettingArgs, DomainsSecurityQuestionSettingState } from "./domainsSecurityQuestionSetting";
export type DomainsSecurityQuestionSetting = import("./domainsSecurityQuestionSetting").DomainsSecurityQuestionSetting;
export const DomainsSecurityQuestionSetting: typeof import("./domainsSecurityQuestionSetting").DomainsSecurityQuestionSetting = null as any;
utilities.lazyLoad(exports, ["DomainsSecurityQuestionSetting"], () => require("./domainsSecurityQuestionSetting"));

export { DomainsSelfRegistrationProfileArgs, DomainsSelfRegistrationProfileState } from "./domainsSelfRegistrationProfile";
export type DomainsSelfRegistrationProfile = import("./domainsSelfRegistrationProfile").DomainsSelfRegistrationProfile;
export const DomainsSelfRegistrationProfile: typeof import("./domainsSelfRegistrationProfile").DomainsSelfRegistrationProfile = null as any;
utilities.lazyLoad(exports, ["DomainsSelfRegistrationProfile"], () => require("./domainsSelfRegistrationProfile"));

export { DomainsSettingArgs, DomainsSettingState } from "./domainsSetting";
export type DomainsSetting = import("./domainsSetting").DomainsSetting;
export const DomainsSetting: typeof import("./domainsSetting").DomainsSetting = null as any;
utilities.lazyLoad(exports, ["DomainsSetting"], () => require("./domainsSetting"));

export { DomainsSmtpCredentialArgs, DomainsSmtpCredentialState } from "./domainsSmtpCredential";
export type DomainsSmtpCredential = import("./domainsSmtpCredential").DomainsSmtpCredential;
export const DomainsSmtpCredential: typeof import("./domainsSmtpCredential").DomainsSmtpCredential = null as any;
utilities.lazyLoad(exports, ["DomainsSmtpCredential"], () => require("./domainsSmtpCredential"));

export { DomainsUserArgs, DomainsUserState } from "./domainsUser";
export type DomainsUser = import("./domainsUser").DomainsUser;
export const DomainsUser: typeof import("./domainsUser").DomainsUser = null as any;
utilities.lazyLoad(exports, ["DomainsUser"], () => require("./domainsUser"));

export { DomainsUserDbCredentialArgs, DomainsUserDbCredentialState } from "./domainsUserDbCredential";
export type DomainsUserDbCredential = import("./domainsUserDbCredential").DomainsUserDbCredential;
export const DomainsUserDbCredential: typeof import("./domainsUserDbCredential").DomainsUserDbCredential = null as any;
utilities.lazyLoad(exports, ["DomainsUserDbCredential"], () => require("./domainsUserDbCredential"));

export { DynamicGroupArgs, DynamicGroupState } from "./dynamicGroup";
export type DynamicGroup = import("./dynamicGroup").DynamicGroup;
export const DynamicGroup: typeof import("./dynamicGroup").DynamicGroup = null as any;
utilities.lazyLoad(exports, ["DynamicGroup"], () => require("./dynamicGroup"));

export { GetAllowedDomainLicenseTypesArgs, GetAllowedDomainLicenseTypesResult, GetAllowedDomainLicenseTypesOutputArgs } from "./getAllowedDomainLicenseTypes";
export const getAllowedDomainLicenseTypes: typeof import("./getAllowedDomainLicenseTypes").getAllowedDomainLicenseTypes = null as any;
export const getAllowedDomainLicenseTypesOutput: typeof import("./getAllowedDomainLicenseTypes").getAllowedDomainLicenseTypesOutput = null as any;
utilities.lazyLoad(exports, ["getAllowedDomainLicenseTypes","getAllowedDomainLicenseTypesOutput"], () => require("./getAllowedDomainLicenseTypes"));

export { GetApiKeysArgs, GetApiKeysResult, GetApiKeysOutputArgs } from "./getApiKeys";
export const getApiKeys: typeof import("./getApiKeys").getApiKeys = null as any;
export const getApiKeysOutput: typeof import("./getApiKeys").getApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getApiKeys","getApiKeysOutput"], () => require("./getApiKeys"));

export { GetAuthTokensArgs, GetAuthTokensResult, GetAuthTokensOutputArgs } from "./getAuthTokens";
export const getAuthTokens: typeof import("./getAuthTokens").getAuthTokens = null as any;
export const getAuthTokensOutput: typeof import("./getAuthTokens").getAuthTokensOutput = null as any;
utilities.lazyLoad(exports, ["getAuthTokens","getAuthTokensOutput"], () => require("./getAuthTokens"));

export { GetAuthenticationPolicyArgs, GetAuthenticationPolicyResult, GetAuthenticationPolicyOutputArgs } from "./getAuthenticationPolicy";
export const getAuthenticationPolicy: typeof import("./getAuthenticationPolicy").getAuthenticationPolicy = null as any;
export const getAuthenticationPolicyOutput: typeof import("./getAuthenticationPolicy").getAuthenticationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationPolicy","getAuthenticationPolicyOutput"], () => require("./getAuthenticationPolicy"));

export { GetAvailabilityDomainArgs, GetAvailabilityDomainResult, GetAvailabilityDomainOutputArgs } from "./getAvailabilityDomain";
export const getAvailabilityDomain: typeof import("./getAvailabilityDomain").getAvailabilityDomain = null as any;
export const getAvailabilityDomainOutput: typeof import("./getAvailabilityDomain").getAvailabilityDomainOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityDomain","getAvailabilityDomainOutput"], () => require("./getAvailabilityDomain"));

export { GetAvailabilityDomainsArgs, GetAvailabilityDomainsResult, GetAvailabilityDomainsOutputArgs } from "./getAvailabilityDomains";
export const getAvailabilityDomains: typeof import("./getAvailabilityDomains").getAvailabilityDomains = null as any;
export const getAvailabilityDomainsOutput: typeof import("./getAvailabilityDomains").getAvailabilityDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityDomains","getAvailabilityDomainsOutput"], () => require("./getAvailabilityDomains"));

export { GetCompartmentArgs, GetCompartmentResult, GetCompartmentOutputArgs } from "./getCompartment";
export const getCompartment: typeof import("./getCompartment").getCompartment = null as any;
export const getCompartmentOutput: typeof import("./getCompartment").getCompartmentOutput = null as any;
utilities.lazyLoad(exports, ["getCompartment","getCompartmentOutput"], () => require("./getCompartment"));

export { GetCompartmentsArgs, GetCompartmentsResult, GetCompartmentsOutputArgs } from "./getCompartments";
export const getCompartments: typeof import("./getCompartments").getCompartments = null as any;
export const getCompartmentsOutput: typeof import("./getCompartments").getCompartmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCompartments","getCompartmentsOutput"], () => require("./getCompartments"));

export { GetCostTrackingTagsArgs, GetCostTrackingTagsResult, GetCostTrackingTagsOutputArgs } from "./getCostTrackingTags";
export const getCostTrackingTags: typeof import("./getCostTrackingTags").getCostTrackingTags = null as any;
export const getCostTrackingTagsOutput: typeof import("./getCostTrackingTags").getCostTrackingTagsOutput = null as any;
utilities.lazyLoad(exports, ["getCostTrackingTags","getCostTrackingTagsOutput"], () => require("./getCostTrackingTags"));

export { GetCustomerSecretKeysArgs, GetCustomerSecretKeysResult, GetCustomerSecretKeysOutputArgs } from "./getCustomerSecretKeys";
export const getCustomerSecretKeys: typeof import("./getCustomerSecretKeys").getCustomerSecretKeys = null as any;
export const getCustomerSecretKeysOutput: typeof import("./getCustomerSecretKeys").getCustomerSecretKeysOutput = null as any;
utilities.lazyLoad(exports, ["getCustomerSecretKeys","getCustomerSecretKeysOutput"], () => require("./getCustomerSecretKeys"));

export { GetDbCredentialsArgs, GetDbCredentialsResult, GetDbCredentialsOutputArgs } from "./getDbCredentials";
export const getDbCredentials: typeof import("./getDbCredentials").getDbCredentials = null as any;
export const getDbCredentialsOutput: typeof import("./getDbCredentials").getDbCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getDbCredentials","getDbCredentialsOutput"], () => require("./getDbCredentials"));

export { GetDomainArgs, GetDomainResult, GetDomainOutputArgs } from "./getDomain";
export const getDomain: typeof import("./getDomain").getDomain = null as any;
export const getDomainOutput: typeof import("./getDomain").getDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDomain","getDomainOutput"], () => require("./getDomain"));

export { GetDomainsArgs, GetDomainsResult, GetDomainsOutputArgs } from "./getDomains";
export const getDomains: typeof import("./getDomains").getDomains = null as any;
export const getDomainsOutput: typeof import("./getDomains").getDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getDomains","getDomainsOutput"], () => require("./getDomains"));

export { GetDomainsAccountMgmtInfoArgs, GetDomainsAccountMgmtInfoResult, GetDomainsAccountMgmtInfoOutputArgs } from "./getDomainsAccountMgmtInfo";
export const getDomainsAccountMgmtInfo: typeof import("./getDomainsAccountMgmtInfo").getDomainsAccountMgmtInfo = null as any;
export const getDomainsAccountMgmtInfoOutput: typeof import("./getDomainsAccountMgmtInfo").getDomainsAccountMgmtInfoOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsAccountMgmtInfo","getDomainsAccountMgmtInfoOutput"], () => require("./getDomainsAccountMgmtInfo"));

export { GetDomainsAccountMgmtInfosArgs, GetDomainsAccountMgmtInfosResult, GetDomainsAccountMgmtInfosOutputArgs } from "./getDomainsAccountMgmtInfos";
export const getDomainsAccountMgmtInfos: typeof import("./getDomainsAccountMgmtInfos").getDomainsAccountMgmtInfos = null as any;
export const getDomainsAccountMgmtInfosOutput: typeof import("./getDomainsAccountMgmtInfos").getDomainsAccountMgmtInfosOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsAccountMgmtInfos","getDomainsAccountMgmtInfosOutput"], () => require("./getDomainsAccountMgmtInfos"));

export { GetDomainsAccountRecoverySettingArgs, GetDomainsAccountRecoverySettingResult, GetDomainsAccountRecoverySettingOutputArgs } from "./getDomainsAccountRecoverySetting";
export const getDomainsAccountRecoverySetting: typeof import("./getDomainsAccountRecoverySetting").getDomainsAccountRecoverySetting = null as any;
export const getDomainsAccountRecoverySettingOutput: typeof import("./getDomainsAccountRecoverySetting").getDomainsAccountRecoverySettingOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsAccountRecoverySetting","getDomainsAccountRecoverySettingOutput"], () => require("./getDomainsAccountRecoverySetting"));

export { GetDomainsAccountRecoverySettingsArgs, GetDomainsAccountRecoverySettingsResult, GetDomainsAccountRecoverySettingsOutputArgs } from "./getDomainsAccountRecoverySettings";
export const getDomainsAccountRecoverySettings: typeof import("./getDomainsAccountRecoverySettings").getDomainsAccountRecoverySettings = null as any;
export const getDomainsAccountRecoverySettingsOutput: typeof import("./getDomainsAccountRecoverySettings").getDomainsAccountRecoverySettingsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsAccountRecoverySettings","getDomainsAccountRecoverySettingsOutput"], () => require("./getDomainsAccountRecoverySettings"));

export { GetDomainsApiKeyArgs, GetDomainsApiKeyResult, GetDomainsApiKeyOutputArgs } from "./getDomainsApiKey";
export const getDomainsApiKey: typeof import("./getDomainsApiKey").getDomainsApiKey = null as any;
export const getDomainsApiKeyOutput: typeof import("./getDomainsApiKey").getDomainsApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsApiKey","getDomainsApiKeyOutput"], () => require("./getDomainsApiKey"));

export { GetDomainsApiKeysArgs, GetDomainsApiKeysResult, GetDomainsApiKeysOutputArgs } from "./getDomainsApiKeys";
export const getDomainsApiKeys: typeof import("./getDomainsApiKeys").getDomainsApiKeys = null as any;
export const getDomainsApiKeysOutput: typeof import("./getDomainsApiKeys").getDomainsApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsApiKeys","getDomainsApiKeysOutput"], () => require("./getDomainsApiKeys"));

export { GetDomainsAppArgs, GetDomainsAppResult, GetDomainsAppOutputArgs } from "./getDomainsApp";
export const getDomainsApp: typeof import("./getDomainsApp").getDomainsApp = null as any;
export const getDomainsAppOutput: typeof import("./getDomainsApp").getDomainsAppOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsApp","getDomainsAppOutput"], () => require("./getDomainsApp"));

export { GetDomainsAppRoleArgs, GetDomainsAppRoleResult, GetDomainsAppRoleOutputArgs } from "./getDomainsAppRole";
export const getDomainsAppRole: typeof import("./getDomainsAppRole").getDomainsAppRole = null as any;
export const getDomainsAppRoleOutput: typeof import("./getDomainsAppRole").getDomainsAppRoleOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsAppRole","getDomainsAppRoleOutput"], () => require("./getDomainsAppRole"));

export { GetDomainsAppRolesArgs, GetDomainsAppRolesResult, GetDomainsAppRolesOutputArgs } from "./getDomainsAppRoles";
export const getDomainsAppRoles: typeof import("./getDomainsAppRoles").getDomainsAppRoles = null as any;
export const getDomainsAppRolesOutput: typeof import("./getDomainsAppRoles").getDomainsAppRolesOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsAppRoles","getDomainsAppRolesOutput"], () => require("./getDomainsAppRoles"));

export { GetDomainsApprovalWorkflowArgs, GetDomainsApprovalWorkflowResult, GetDomainsApprovalWorkflowOutputArgs } from "./getDomainsApprovalWorkflow";
export const getDomainsApprovalWorkflow: typeof import("./getDomainsApprovalWorkflow").getDomainsApprovalWorkflow = null as any;
export const getDomainsApprovalWorkflowOutput: typeof import("./getDomainsApprovalWorkflow").getDomainsApprovalWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsApprovalWorkflow","getDomainsApprovalWorkflowOutput"], () => require("./getDomainsApprovalWorkflow"));

export { GetDomainsApprovalWorkflowAssignmentArgs, GetDomainsApprovalWorkflowAssignmentResult, GetDomainsApprovalWorkflowAssignmentOutputArgs } from "./getDomainsApprovalWorkflowAssignment";
export const getDomainsApprovalWorkflowAssignment: typeof import("./getDomainsApprovalWorkflowAssignment").getDomainsApprovalWorkflowAssignment = null as any;
export const getDomainsApprovalWorkflowAssignmentOutput: typeof import("./getDomainsApprovalWorkflowAssignment").getDomainsApprovalWorkflowAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsApprovalWorkflowAssignment","getDomainsApprovalWorkflowAssignmentOutput"], () => require("./getDomainsApprovalWorkflowAssignment"));

export { GetDomainsApprovalWorkflowAssignmentsArgs, GetDomainsApprovalWorkflowAssignmentsResult, GetDomainsApprovalWorkflowAssignmentsOutputArgs } from "./getDomainsApprovalWorkflowAssignments";
export const getDomainsApprovalWorkflowAssignments: typeof import("./getDomainsApprovalWorkflowAssignments").getDomainsApprovalWorkflowAssignments = null as any;
export const getDomainsApprovalWorkflowAssignmentsOutput: typeof import("./getDomainsApprovalWorkflowAssignments").getDomainsApprovalWorkflowAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsApprovalWorkflowAssignments","getDomainsApprovalWorkflowAssignmentsOutput"], () => require("./getDomainsApprovalWorkflowAssignments"));

export { GetDomainsApprovalWorkflowStepArgs, GetDomainsApprovalWorkflowStepResult, GetDomainsApprovalWorkflowStepOutputArgs } from "./getDomainsApprovalWorkflowStep";
export const getDomainsApprovalWorkflowStep: typeof import("./getDomainsApprovalWorkflowStep").getDomainsApprovalWorkflowStep = null as any;
export const getDomainsApprovalWorkflowStepOutput: typeof import("./getDomainsApprovalWorkflowStep").getDomainsApprovalWorkflowStepOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsApprovalWorkflowStep","getDomainsApprovalWorkflowStepOutput"], () => require("./getDomainsApprovalWorkflowStep"));

export { GetDomainsApprovalWorkflowStepsArgs, GetDomainsApprovalWorkflowStepsResult, GetDomainsApprovalWorkflowStepsOutputArgs } from "./getDomainsApprovalWorkflowSteps";
export const getDomainsApprovalWorkflowSteps: typeof import("./getDomainsApprovalWorkflowSteps").getDomainsApprovalWorkflowSteps = null as any;
export const getDomainsApprovalWorkflowStepsOutput: typeof import("./getDomainsApprovalWorkflowSteps").getDomainsApprovalWorkflowStepsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsApprovalWorkflowSteps","getDomainsApprovalWorkflowStepsOutput"], () => require("./getDomainsApprovalWorkflowSteps"));

export { GetDomainsApprovalWorkflowsArgs, GetDomainsApprovalWorkflowsResult, GetDomainsApprovalWorkflowsOutputArgs } from "./getDomainsApprovalWorkflows";
export const getDomainsApprovalWorkflows: typeof import("./getDomainsApprovalWorkflows").getDomainsApprovalWorkflows = null as any;
export const getDomainsApprovalWorkflowsOutput: typeof import("./getDomainsApprovalWorkflows").getDomainsApprovalWorkflowsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsApprovalWorkflows","getDomainsApprovalWorkflowsOutput"], () => require("./getDomainsApprovalWorkflows"));

export { GetDomainsAppsArgs, GetDomainsAppsResult, GetDomainsAppsOutputArgs } from "./getDomainsApps";
export const getDomainsApps: typeof import("./getDomainsApps").getDomainsApps = null as any;
export const getDomainsAppsOutput: typeof import("./getDomainsApps").getDomainsAppsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsApps","getDomainsAppsOutput"], () => require("./getDomainsApps"));

export { GetDomainsAuthTokenArgs, GetDomainsAuthTokenResult, GetDomainsAuthTokenOutputArgs } from "./getDomainsAuthToken";
export const getDomainsAuthToken: typeof import("./getDomainsAuthToken").getDomainsAuthToken = null as any;
export const getDomainsAuthTokenOutput: typeof import("./getDomainsAuthToken").getDomainsAuthTokenOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsAuthToken","getDomainsAuthTokenOutput"], () => require("./getDomainsAuthToken"));

export { GetDomainsAuthTokensArgs, GetDomainsAuthTokensResult, GetDomainsAuthTokensOutputArgs } from "./getDomainsAuthTokens";
export const getDomainsAuthTokens: typeof import("./getDomainsAuthTokens").getDomainsAuthTokens = null as any;
export const getDomainsAuthTokensOutput: typeof import("./getDomainsAuthTokens").getDomainsAuthTokensOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsAuthTokens","getDomainsAuthTokensOutput"], () => require("./getDomainsAuthTokens"));

export { GetDomainsAuthenticationFactorSettingArgs, GetDomainsAuthenticationFactorSettingResult, GetDomainsAuthenticationFactorSettingOutputArgs } from "./getDomainsAuthenticationFactorSetting";
export const getDomainsAuthenticationFactorSetting: typeof import("./getDomainsAuthenticationFactorSetting").getDomainsAuthenticationFactorSetting = null as any;
export const getDomainsAuthenticationFactorSettingOutput: typeof import("./getDomainsAuthenticationFactorSetting").getDomainsAuthenticationFactorSettingOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsAuthenticationFactorSetting","getDomainsAuthenticationFactorSettingOutput"], () => require("./getDomainsAuthenticationFactorSetting"));

export { GetDomainsAuthenticationFactorSettingsArgs, GetDomainsAuthenticationFactorSettingsResult, GetDomainsAuthenticationFactorSettingsOutputArgs } from "./getDomainsAuthenticationFactorSettings";
export const getDomainsAuthenticationFactorSettings: typeof import("./getDomainsAuthenticationFactorSettings").getDomainsAuthenticationFactorSettings = null as any;
export const getDomainsAuthenticationFactorSettingsOutput: typeof import("./getDomainsAuthenticationFactorSettings").getDomainsAuthenticationFactorSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsAuthenticationFactorSettings","getDomainsAuthenticationFactorSettingsOutput"], () => require("./getDomainsAuthenticationFactorSettings"));

export { GetDomainsBrandingSettingArgs, GetDomainsBrandingSettingResult, GetDomainsBrandingSettingOutputArgs } from "./getDomainsBrandingSetting";
export const getDomainsBrandingSetting: typeof import("./getDomainsBrandingSetting").getDomainsBrandingSetting = null as any;
export const getDomainsBrandingSettingOutput: typeof import("./getDomainsBrandingSetting").getDomainsBrandingSettingOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsBrandingSetting","getDomainsBrandingSettingOutput"], () => require("./getDomainsBrandingSetting"));

export { GetDomainsBrandingSettingsArgs, GetDomainsBrandingSettingsResult, GetDomainsBrandingSettingsOutputArgs } from "./getDomainsBrandingSettings";
export const getDomainsBrandingSettings: typeof import("./getDomainsBrandingSettings").getDomainsBrandingSettings = null as any;
export const getDomainsBrandingSettingsOutput: typeof import("./getDomainsBrandingSettings").getDomainsBrandingSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsBrandingSettings","getDomainsBrandingSettingsOutput"], () => require("./getDomainsBrandingSettings"));

export { GetDomainsCloudGateArgs, GetDomainsCloudGateResult, GetDomainsCloudGateOutputArgs } from "./getDomainsCloudGate";
export const getDomainsCloudGate: typeof import("./getDomainsCloudGate").getDomainsCloudGate = null as any;
export const getDomainsCloudGateOutput: typeof import("./getDomainsCloudGate").getDomainsCloudGateOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsCloudGate","getDomainsCloudGateOutput"], () => require("./getDomainsCloudGate"));

export { GetDomainsCloudGateMappingArgs, GetDomainsCloudGateMappingResult, GetDomainsCloudGateMappingOutputArgs } from "./getDomainsCloudGateMapping";
export const getDomainsCloudGateMapping: typeof import("./getDomainsCloudGateMapping").getDomainsCloudGateMapping = null as any;
export const getDomainsCloudGateMappingOutput: typeof import("./getDomainsCloudGateMapping").getDomainsCloudGateMappingOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsCloudGateMapping","getDomainsCloudGateMappingOutput"], () => require("./getDomainsCloudGateMapping"));

export { GetDomainsCloudGateMappingsArgs, GetDomainsCloudGateMappingsResult, GetDomainsCloudGateMappingsOutputArgs } from "./getDomainsCloudGateMappings";
export const getDomainsCloudGateMappings: typeof import("./getDomainsCloudGateMappings").getDomainsCloudGateMappings = null as any;
export const getDomainsCloudGateMappingsOutput: typeof import("./getDomainsCloudGateMappings").getDomainsCloudGateMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsCloudGateMappings","getDomainsCloudGateMappingsOutput"], () => require("./getDomainsCloudGateMappings"));

export { GetDomainsCloudGateServerArgs, GetDomainsCloudGateServerResult, GetDomainsCloudGateServerOutputArgs } from "./getDomainsCloudGateServer";
export const getDomainsCloudGateServer: typeof import("./getDomainsCloudGateServer").getDomainsCloudGateServer = null as any;
export const getDomainsCloudGateServerOutput: typeof import("./getDomainsCloudGateServer").getDomainsCloudGateServerOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsCloudGateServer","getDomainsCloudGateServerOutput"], () => require("./getDomainsCloudGateServer"));

export { GetDomainsCloudGateServersArgs, GetDomainsCloudGateServersResult, GetDomainsCloudGateServersOutputArgs } from "./getDomainsCloudGateServers";
export const getDomainsCloudGateServers: typeof import("./getDomainsCloudGateServers").getDomainsCloudGateServers = null as any;
export const getDomainsCloudGateServersOutput: typeof import("./getDomainsCloudGateServers").getDomainsCloudGateServersOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsCloudGateServers","getDomainsCloudGateServersOutput"], () => require("./getDomainsCloudGateServers"));

export { GetDomainsCloudGatesArgs, GetDomainsCloudGatesResult, GetDomainsCloudGatesOutputArgs } from "./getDomainsCloudGates";
export const getDomainsCloudGates: typeof import("./getDomainsCloudGates").getDomainsCloudGates = null as any;
export const getDomainsCloudGatesOutput: typeof import("./getDomainsCloudGates").getDomainsCloudGatesOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsCloudGates","getDomainsCloudGatesOutput"], () => require("./getDomainsCloudGates"));

export { GetDomainsConditionArgs, GetDomainsConditionResult, GetDomainsConditionOutputArgs } from "./getDomainsCondition";
export const getDomainsCondition: typeof import("./getDomainsCondition").getDomainsCondition = null as any;
export const getDomainsConditionOutput: typeof import("./getDomainsCondition").getDomainsConditionOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsCondition","getDomainsConditionOutput"], () => require("./getDomainsCondition"));

export { GetDomainsConditionsArgs, GetDomainsConditionsResult, GetDomainsConditionsOutputArgs } from "./getDomainsConditions";
export const getDomainsConditions: typeof import("./getDomainsConditions").getDomainsConditions = null as any;
export const getDomainsConditionsOutput: typeof import("./getDomainsConditions").getDomainsConditionsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsConditions","getDomainsConditionsOutput"], () => require("./getDomainsConditions"));

export { GetDomainsCustomerSecretKeyArgs, GetDomainsCustomerSecretKeyResult, GetDomainsCustomerSecretKeyOutputArgs } from "./getDomainsCustomerSecretKey";
export const getDomainsCustomerSecretKey: typeof import("./getDomainsCustomerSecretKey").getDomainsCustomerSecretKey = null as any;
export const getDomainsCustomerSecretKeyOutput: typeof import("./getDomainsCustomerSecretKey").getDomainsCustomerSecretKeyOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsCustomerSecretKey","getDomainsCustomerSecretKeyOutput"], () => require("./getDomainsCustomerSecretKey"));

export { GetDomainsCustomerSecretKeysArgs, GetDomainsCustomerSecretKeysResult, GetDomainsCustomerSecretKeysOutputArgs } from "./getDomainsCustomerSecretKeys";
export const getDomainsCustomerSecretKeys: typeof import("./getDomainsCustomerSecretKeys").getDomainsCustomerSecretKeys = null as any;
export const getDomainsCustomerSecretKeysOutput: typeof import("./getDomainsCustomerSecretKeys").getDomainsCustomerSecretKeysOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsCustomerSecretKeys","getDomainsCustomerSecretKeysOutput"], () => require("./getDomainsCustomerSecretKeys"));

export { GetDomainsDynamicResourceGroupArgs, GetDomainsDynamicResourceGroupResult, GetDomainsDynamicResourceGroupOutputArgs } from "./getDomainsDynamicResourceGroup";
export const getDomainsDynamicResourceGroup: typeof import("./getDomainsDynamicResourceGroup").getDomainsDynamicResourceGroup = null as any;
export const getDomainsDynamicResourceGroupOutput: typeof import("./getDomainsDynamicResourceGroup").getDomainsDynamicResourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsDynamicResourceGroup","getDomainsDynamicResourceGroupOutput"], () => require("./getDomainsDynamicResourceGroup"));

export { GetDomainsDynamicResourceGroupsArgs, GetDomainsDynamicResourceGroupsResult, GetDomainsDynamicResourceGroupsOutputArgs } from "./getDomainsDynamicResourceGroups";
export const getDomainsDynamicResourceGroups: typeof import("./getDomainsDynamicResourceGroups").getDomainsDynamicResourceGroups = null as any;
export const getDomainsDynamicResourceGroupsOutput: typeof import("./getDomainsDynamicResourceGroups").getDomainsDynamicResourceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsDynamicResourceGroups","getDomainsDynamicResourceGroupsOutput"], () => require("./getDomainsDynamicResourceGroups"));

export { GetDomainsGrantArgs, GetDomainsGrantResult, GetDomainsGrantOutputArgs } from "./getDomainsGrant";
export const getDomainsGrant: typeof import("./getDomainsGrant").getDomainsGrant = null as any;
export const getDomainsGrantOutput: typeof import("./getDomainsGrant").getDomainsGrantOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsGrant","getDomainsGrantOutput"], () => require("./getDomainsGrant"));

export { GetDomainsGrantsArgs, GetDomainsGrantsResult, GetDomainsGrantsOutputArgs } from "./getDomainsGrants";
export const getDomainsGrants: typeof import("./getDomainsGrants").getDomainsGrants = null as any;
export const getDomainsGrantsOutput: typeof import("./getDomainsGrants").getDomainsGrantsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsGrants","getDomainsGrantsOutput"], () => require("./getDomainsGrants"));

export { GetDomainsGroupArgs, GetDomainsGroupResult, GetDomainsGroupOutputArgs } from "./getDomainsGroup";
export const getDomainsGroup: typeof import("./getDomainsGroup").getDomainsGroup = null as any;
export const getDomainsGroupOutput: typeof import("./getDomainsGroup").getDomainsGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsGroup","getDomainsGroupOutput"], () => require("./getDomainsGroup"));

export { GetDomainsGroupsArgs, GetDomainsGroupsResult, GetDomainsGroupsOutputArgs } from "./getDomainsGroups";
export const getDomainsGroups: typeof import("./getDomainsGroups").getDomainsGroups = null as any;
export const getDomainsGroupsOutput: typeof import("./getDomainsGroups").getDomainsGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsGroups","getDomainsGroupsOutput"], () => require("./getDomainsGroups"));

export { GetDomainsIdentityProviderArgs, GetDomainsIdentityProviderResult, GetDomainsIdentityProviderOutputArgs } from "./getDomainsIdentityProvider";
export const getDomainsIdentityProvider: typeof import("./getDomainsIdentityProvider").getDomainsIdentityProvider = null as any;
export const getDomainsIdentityProviderOutput: typeof import("./getDomainsIdentityProvider").getDomainsIdentityProviderOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsIdentityProvider","getDomainsIdentityProviderOutput"], () => require("./getDomainsIdentityProvider"));

export { GetDomainsIdentityProvidersArgs, GetDomainsIdentityProvidersResult, GetDomainsIdentityProvidersOutputArgs } from "./getDomainsIdentityProviders";
export const getDomainsIdentityProviders: typeof import("./getDomainsIdentityProviders").getDomainsIdentityProviders = null as any;
export const getDomainsIdentityProvidersOutput: typeof import("./getDomainsIdentityProviders").getDomainsIdentityProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsIdentityProviders","getDomainsIdentityProvidersOutput"], () => require("./getDomainsIdentityProviders"));

export { GetDomainsIdentitySettingArgs, GetDomainsIdentitySettingResult, GetDomainsIdentitySettingOutputArgs } from "./getDomainsIdentitySetting";
export const getDomainsIdentitySetting: typeof import("./getDomainsIdentitySetting").getDomainsIdentitySetting = null as any;
export const getDomainsIdentitySettingOutput: typeof import("./getDomainsIdentitySetting").getDomainsIdentitySettingOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsIdentitySetting","getDomainsIdentitySettingOutput"], () => require("./getDomainsIdentitySetting"));

export { GetDomainsIdentitySettingsArgs, GetDomainsIdentitySettingsResult, GetDomainsIdentitySettingsOutputArgs } from "./getDomainsIdentitySettings";
export const getDomainsIdentitySettings: typeof import("./getDomainsIdentitySettings").getDomainsIdentitySettings = null as any;
export const getDomainsIdentitySettingsOutput: typeof import("./getDomainsIdentitySettings").getDomainsIdentitySettingsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsIdentitySettings","getDomainsIdentitySettingsOutput"], () => require("./getDomainsIdentitySettings"));

export { GetDomainsKmsiSettingArgs, GetDomainsKmsiSettingResult, GetDomainsKmsiSettingOutputArgs } from "./getDomainsKmsiSetting";
export const getDomainsKmsiSetting: typeof import("./getDomainsKmsiSetting").getDomainsKmsiSetting = null as any;
export const getDomainsKmsiSettingOutput: typeof import("./getDomainsKmsiSetting").getDomainsKmsiSettingOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsKmsiSetting","getDomainsKmsiSettingOutput"], () => require("./getDomainsKmsiSetting"));

export { GetDomainsKmsiSettingsArgs, GetDomainsKmsiSettingsResult, GetDomainsKmsiSettingsOutputArgs } from "./getDomainsKmsiSettings";
export const getDomainsKmsiSettings: typeof import("./getDomainsKmsiSettings").getDomainsKmsiSettings = null as any;
export const getDomainsKmsiSettingsOutput: typeof import("./getDomainsKmsiSettings").getDomainsKmsiSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsKmsiSettings","getDomainsKmsiSettingsOutput"], () => require("./getDomainsKmsiSettings"));

export { GetDomainsMyApiKeyArgs, GetDomainsMyApiKeyResult, GetDomainsMyApiKeyOutputArgs } from "./getDomainsMyApiKey";
export const getDomainsMyApiKey: typeof import("./getDomainsMyApiKey").getDomainsMyApiKey = null as any;
export const getDomainsMyApiKeyOutput: typeof import("./getDomainsMyApiKey").getDomainsMyApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyApiKey","getDomainsMyApiKeyOutput"], () => require("./getDomainsMyApiKey"));

export { GetDomainsMyApiKeysArgs, GetDomainsMyApiKeysResult, GetDomainsMyApiKeysOutputArgs } from "./getDomainsMyApiKeys";
export const getDomainsMyApiKeys: typeof import("./getDomainsMyApiKeys").getDomainsMyApiKeys = null as any;
export const getDomainsMyApiKeysOutput: typeof import("./getDomainsMyApiKeys").getDomainsMyApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyApiKeys","getDomainsMyApiKeysOutput"], () => require("./getDomainsMyApiKeys"));

export { GetDomainsMyAppsArgs, GetDomainsMyAppsResult, GetDomainsMyAppsOutputArgs } from "./getDomainsMyApps";
export const getDomainsMyApps: typeof import("./getDomainsMyApps").getDomainsMyApps = null as any;
export const getDomainsMyAppsOutput: typeof import("./getDomainsMyApps").getDomainsMyAppsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyApps","getDomainsMyAppsOutput"], () => require("./getDomainsMyApps"));

export { GetDomainsMyAuthTokenArgs, GetDomainsMyAuthTokenResult, GetDomainsMyAuthTokenOutputArgs } from "./getDomainsMyAuthToken";
export const getDomainsMyAuthToken: typeof import("./getDomainsMyAuthToken").getDomainsMyAuthToken = null as any;
export const getDomainsMyAuthTokenOutput: typeof import("./getDomainsMyAuthToken").getDomainsMyAuthTokenOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyAuthToken","getDomainsMyAuthTokenOutput"], () => require("./getDomainsMyAuthToken"));

export { GetDomainsMyAuthTokensArgs, GetDomainsMyAuthTokensResult, GetDomainsMyAuthTokensOutputArgs } from "./getDomainsMyAuthTokens";
export const getDomainsMyAuthTokens: typeof import("./getDomainsMyAuthTokens").getDomainsMyAuthTokens = null as any;
export const getDomainsMyAuthTokensOutput: typeof import("./getDomainsMyAuthTokens").getDomainsMyAuthTokensOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyAuthTokens","getDomainsMyAuthTokensOutput"], () => require("./getDomainsMyAuthTokens"));

export { GetDomainsMyCompletedApprovalArgs, GetDomainsMyCompletedApprovalResult, GetDomainsMyCompletedApprovalOutputArgs } from "./getDomainsMyCompletedApproval";
export const getDomainsMyCompletedApproval: typeof import("./getDomainsMyCompletedApproval").getDomainsMyCompletedApproval = null as any;
export const getDomainsMyCompletedApprovalOutput: typeof import("./getDomainsMyCompletedApproval").getDomainsMyCompletedApprovalOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyCompletedApproval","getDomainsMyCompletedApprovalOutput"], () => require("./getDomainsMyCompletedApproval"));

export { GetDomainsMyCompletedApprovalsArgs, GetDomainsMyCompletedApprovalsResult, GetDomainsMyCompletedApprovalsOutputArgs } from "./getDomainsMyCompletedApprovals";
export const getDomainsMyCompletedApprovals: typeof import("./getDomainsMyCompletedApprovals").getDomainsMyCompletedApprovals = null as any;
export const getDomainsMyCompletedApprovalsOutput: typeof import("./getDomainsMyCompletedApprovals").getDomainsMyCompletedApprovalsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyCompletedApprovals","getDomainsMyCompletedApprovalsOutput"], () => require("./getDomainsMyCompletedApprovals"));

export { GetDomainsMyCustomerSecretKeyArgs, GetDomainsMyCustomerSecretKeyResult, GetDomainsMyCustomerSecretKeyOutputArgs } from "./getDomainsMyCustomerSecretKey";
export const getDomainsMyCustomerSecretKey: typeof import("./getDomainsMyCustomerSecretKey").getDomainsMyCustomerSecretKey = null as any;
export const getDomainsMyCustomerSecretKeyOutput: typeof import("./getDomainsMyCustomerSecretKey").getDomainsMyCustomerSecretKeyOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyCustomerSecretKey","getDomainsMyCustomerSecretKeyOutput"], () => require("./getDomainsMyCustomerSecretKey"));

export { GetDomainsMyCustomerSecretKeysArgs, GetDomainsMyCustomerSecretKeysResult, GetDomainsMyCustomerSecretKeysOutputArgs } from "./getDomainsMyCustomerSecretKeys";
export const getDomainsMyCustomerSecretKeys: typeof import("./getDomainsMyCustomerSecretKeys").getDomainsMyCustomerSecretKeys = null as any;
export const getDomainsMyCustomerSecretKeysOutput: typeof import("./getDomainsMyCustomerSecretKeys").getDomainsMyCustomerSecretKeysOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyCustomerSecretKeys","getDomainsMyCustomerSecretKeysOutput"], () => require("./getDomainsMyCustomerSecretKeys"));

export { GetDomainsMyDeviceArgs, GetDomainsMyDeviceResult, GetDomainsMyDeviceOutputArgs } from "./getDomainsMyDevice";
export const getDomainsMyDevice: typeof import("./getDomainsMyDevice").getDomainsMyDevice = null as any;
export const getDomainsMyDeviceOutput: typeof import("./getDomainsMyDevice").getDomainsMyDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyDevice","getDomainsMyDeviceOutput"], () => require("./getDomainsMyDevice"));

export { GetDomainsMyDevicesArgs, GetDomainsMyDevicesResult, GetDomainsMyDevicesOutputArgs } from "./getDomainsMyDevices";
export const getDomainsMyDevices: typeof import("./getDomainsMyDevices").getDomainsMyDevices = null as any;
export const getDomainsMyDevicesOutput: typeof import("./getDomainsMyDevices").getDomainsMyDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyDevices","getDomainsMyDevicesOutput"], () => require("./getDomainsMyDevices"));

export { GetDomainsMyGroupsArgs, GetDomainsMyGroupsResult, GetDomainsMyGroupsOutputArgs } from "./getDomainsMyGroups";
export const getDomainsMyGroups: typeof import("./getDomainsMyGroups").getDomainsMyGroups = null as any;
export const getDomainsMyGroupsOutput: typeof import("./getDomainsMyGroups").getDomainsMyGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyGroups","getDomainsMyGroupsOutput"], () => require("./getDomainsMyGroups"));

export { GetDomainsMyOauth2clientCredentialArgs, GetDomainsMyOauth2clientCredentialResult, GetDomainsMyOauth2clientCredentialOutputArgs } from "./getDomainsMyOauth2clientCredential";
export const getDomainsMyOauth2clientCredential: typeof import("./getDomainsMyOauth2clientCredential").getDomainsMyOauth2clientCredential = null as any;
export const getDomainsMyOauth2clientCredentialOutput: typeof import("./getDomainsMyOauth2clientCredential").getDomainsMyOauth2clientCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyOauth2clientCredential","getDomainsMyOauth2clientCredentialOutput"], () => require("./getDomainsMyOauth2clientCredential"));

export { GetDomainsMyOauth2clientCredentialsArgs, GetDomainsMyOauth2clientCredentialsResult, GetDomainsMyOauth2clientCredentialsOutputArgs } from "./getDomainsMyOauth2clientCredentials";
export const getDomainsMyOauth2clientCredentials: typeof import("./getDomainsMyOauth2clientCredentials").getDomainsMyOauth2clientCredentials = null as any;
export const getDomainsMyOauth2clientCredentialsOutput: typeof import("./getDomainsMyOauth2clientCredentials").getDomainsMyOauth2clientCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyOauth2clientCredentials","getDomainsMyOauth2clientCredentialsOutput"], () => require("./getDomainsMyOauth2clientCredentials"));

export { GetDomainsMyPendingApprovalArgs, GetDomainsMyPendingApprovalResult, GetDomainsMyPendingApprovalOutputArgs } from "./getDomainsMyPendingApproval";
export const getDomainsMyPendingApproval: typeof import("./getDomainsMyPendingApproval").getDomainsMyPendingApproval = null as any;
export const getDomainsMyPendingApprovalOutput: typeof import("./getDomainsMyPendingApproval").getDomainsMyPendingApprovalOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyPendingApproval","getDomainsMyPendingApprovalOutput"], () => require("./getDomainsMyPendingApproval"));

export { GetDomainsMyPendingApprovalsArgs, GetDomainsMyPendingApprovalsResult, GetDomainsMyPendingApprovalsOutputArgs } from "./getDomainsMyPendingApprovals";
export const getDomainsMyPendingApprovals: typeof import("./getDomainsMyPendingApprovals").getDomainsMyPendingApprovals = null as any;
export const getDomainsMyPendingApprovalsOutput: typeof import("./getDomainsMyPendingApprovals").getDomainsMyPendingApprovalsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyPendingApprovals","getDomainsMyPendingApprovalsOutput"], () => require("./getDomainsMyPendingApprovals"));

export { GetDomainsMyRequestableGroupsArgs, GetDomainsMyRequestableGroupsResult, GetDomainsMyRequestableGroupsOutputArgs } from "./getDomainsMyRequestableGroups";
export const getDomainsMyRequestableGroups: typeof import("./getDomainsMyRequestableGroups").getDomainsMyRequestableGroups = null as any;
export const getDomainsMyRequestableGroupsOutput: typeof import("./getDomainsMyRequestableGroups").getDomainsMyRequestableGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyRequestableGroups","getDomainsMyRequestableGroupsOutput"], () => require("./getDomainsMyRequestableGroups"));

export { GetDomainsMyRequestsArgs, GetDomainsMyRequestsResult, GetDomainsMyRequestsOutputArgs } from "./getDomainsMyRequests";
export const getDomainsMyRequests: typeof import("./getDomainsMyRequests").getDomainsMyRequests = null as any;
export const getDomainsMyRequestsOutput: typeof import("./getDomainsMyRequests").getDomainsMyRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyRequests","getDomainsMyRequestsOutput"], () => require("./getDomainsMyRequests"));

export { GetDomainsMySmtpCredentialArgs, GetDomainsMySmtpCredentialResult, GetDomainsMySmtpCredentialOutputArgs } from "./getDomainsMySmtpCredential";
export const getDomainsMySmtpCredential: typeof import("./getDomainsMySmtpCredential").getDomainsMySmtpCredential = null as any;
export const getDomainsMySmtpCredentialOutput: typeof import("./getDomainsMySmtpCredential").getDomainsMySmtpCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMySmtpCredential","getDomainsMySmtpCredentialOutput"], () => require("./getDomainsMySmtpCredential"));

export { GetDomainsMySmtpCredentialsArgs, GetDomainsMySmtpCredentialsResult, GetDomainsMySmtpCredentialsOutputArgs } from "./getDomainsMySmtpCredentials";
export const getDomainsMySmtpCredentials: typeof import("./getDomainsMySmtpCredentials").getDomainsMySmtpCredentials = null as any;
export const getDomainsMySmtpCredentialsOutput: typeof import("./getDomainsMySmtpCredentials").getDomainsMySmtpCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMySmtpCredentials","getDomainsMySmtpCredentialsOutput"], () => require("./getDomainsMySmtpCredentials"));

export { GetDomainsMySupportAccountArgs, GetDomainsMySupportAccountResult, GetDomainsMySupportAccountOutputArgs } from "./getDomainsMySupportAccount";
export const getDomainsMySupportAccount: typeof import("./getDomainsMySupportAccount").getDomainsMySupportAccount = null as any;
export const getDomainsMySupportAccountOutput: typeof import("./getDomainsMySupportAccount").getDomainsMySupportAccountOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMySupportAccount","getDomainsMySupportAccountOutput"], () => require("./getDomainsMySupportAccount"));

export { GetDomainsMySupportAccountsArgs, GetDomainsMySupportAccountsResult, GetDomainsMySupportAccountsOutputArgs } from "./getDomainsMySupportAccounts";
export const getDomainsMySupportAccounts: typeof import("./getDomainsMySupportAccounts").getDomainsMySupportAccounts = null as any;
export const getDomainsMySupportAccountsOutput: typeof import("./getDomainsMySupportAccounts").getDomainsMySupportAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMySupportAccounts","getDomainsMySupportAccountsOutput"], () => require("./getDomainsMySupportAccounts"));

export { GetDomainsMyTrustedUserAgentArgs, GetDomainsMyTrustedUserAgentResult, GetDomainsMyTrustedUserAgentOutputArgs } from "./getDomainsMyTrustedUserAgent";
export const getDomainsMyTrustedUserAgent: typeof import("./getDomainsMyTrustedUserAgent").getDomainsMyTrustedUserAgent = null as any;
export const getDomainsMyTrustedUserAgentOutput: typeof import("./getDomainsMyTrustedUserAgent").getDomainsMyTrustedUserAgentOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyTrustedUserAgent","getDomainsMyTrustedUserAgentOutput"], () => require("./getDomainsMyTrustedUserAgent"));

export { GetDomainsMyTrustedUserAgentsArgs, GetDomainsMyTrustedUserAgentsResult, GetDomainsMyTrustedUserAgentsOutputArgs } from "./getDomainsMyTrustedUserAgents";
export const getDomainsMyTrustedUserAgents: typeof import("./getDomainsMyTrustedUserAgents").getDomainsMyTrustedUserAgents = null as any;
export const getDomainsMyTrustedUserAgentsOutput: typeof import("./getDomainsMyTrustedUserAgents").getDomainsMyTrustedUserAgentsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyTrustedUserAgents","getDomainsMyTrustedUserAgentsOutput"], () => require("./getDomainsMyTrustedUserAgents"));

export { GetDomainsMyUserDbCredentialArgs, GetDomainsMyUserDbCredentialResult, GetDomainsMyUserDbCredentialOutputArgs } from "./getDomainsMyUserDbCredential";
export const getDomainsMyUserDbCredential: typeof import("./getDomainsMyUserDbCredential").getDomainsMyUserDbCredential = null as any;
export const getDomainsMyUserDbCredentialOutput: typeof import("./getDomainsMyUserDbCredential").getDomainsMyUserDbCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyUserDbCredential","getDomainsMyUserDbCredentialOutput"], () => require("./getDomainsMyUserDbCredential"));

export { GetDomainsMyUserDbCredentialsArgs, GetDomainsMyUserDbCredentialsResult, GetDomainsMyUserDbCredentialsOutputArgs } from "./getDomainsMyUserDbCredentials";
export const getDomainsMyUserDbCredentials: typeof import("./getDomainsMyUserDbCredentials").getDomainsMyUserDbCredentials = null as any;
export const getDomainsMyUserDbCredentialsOutput: typeof import("./getDomainsMyUserDbCredentials").getDomainsMyUserDbCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsMyUserDbCredentials","getDomainsMyUserDbCredentialsOutput"], () => require("./getDomainsMyUserDbCredentials"));

export { GetDomainsNetworkPerimeterArgs, GetDomainsNetworkPerimeterResult, GetDomainsNetworkPerimeterOutputArgs } from "./getDomainsNetworkPerimeter";
export const getDomainsNetworkPerimeter: typeof import("./getDomainsNetworkPerimeter").getDomainsNetworkPerimeter = null as any;
export const getDomainsNetworkPerimeterOutput: typeof import("./getDomainsNetworkPerimeter").getDomainsNetworkPerimeterOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsNetworkPerimeter","getDomainsNetworkPerimeterOutput"], () => require("./getDomainsNetworkPerimeter"));

export { GetDomainsNetworkPerimetersArgs, GetDomainsNetworkPerimetersResult, GetDomainsNetworkPerimetersOutputArgs } from "./getDomainsNetworkPerimeters";
export const getDomainsNetworkPerimeters: typeof import("./getDomainsNetworkPerimeters").getDomainsNetworkPerimeters = null as any;
export const getDomainsNetworkPerimetersOutput: typeof import("./getDomainsNetworkPerimeters").getDomainsNetworkPerimetersOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsNetworkPerimeters","getDomainsNetworkPerimetersOutput"], () => require("./getDomainsNetworkPerimeters"));

export { GetDomainsNotificationSettingArgs, GetDomainsNotificationSettingResult, GetDomainsNotificationSettingOutputArgs } from "./getDomainsNotificationSetting";
export const getDomainsNotificationSetting: typeof import("./getDomainsNotificationSetting").getDomainsNotificationSetting = null as any;
export const getDomainsNotificationSettingOutput: typeof import("./getDomainsNotificationSetting").getDomainsNotificationSettingOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsNotificationSetting","getDomainsNotificationSettingOutput"], () => require("./getDomainsNotificationSetting"));

export { GetDomainsNotificationSettingsArgs, GetDomainsNotificationSettingsResult, GetDomainsNotificationSettingsOutputArgs } from "./getDomainsNotificationSettings";
export const getDomainsNotificationSettings: typeof import("./getDomainsNotificationSettings").getDomainsNotificationSettings = null as any;
export const getDomainsNotificationSettingsOutput: typeof import("./getDomainsNotificationSettings").getDomainsNotificationSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsNotificationSettings","getDomainsNotificationSettingsOutput"], () => require("./getDomainsNotificationSettings"));

export { GetDomainsOauth2clientCredentialArgs, GetDomainsOauth2clientCredentialResult, GetDomainsOauth2clientCredentialOutputArgs } from "./getDomainsOauth2clientCredential";
export const getDomainsOauth2clientCredential: typeof import("./getDomainsOauth2clientCredential").getDomainsOauth2clientCredential = null as any;
export const getDomainsOauth2clientCredentialOutput: typeof import("./getDomainsOauth2clientCredential").getDomainsOauth2clientCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsOauth2clientCredential","getDomainsOauth2clientCredentialOutput"], () => require("./getDomainsOauth2clientCredential"));

export { GetDomainsOauth2clientCredentialsArgs, GetDomainsOauth2clientCredentialsResult, GetDomainsOauth2clientCredentialsOutputArgs } from "./getDomainsOauth2clientCredentials";
export const getDomainsOauth2clientCredentials: typeof import("./getDomainsOauth2clientCredentials").getDomainsOauth2clientCredentials = null as any;
export const getDomainsOauth2clientCredentialsOutput: typeof import("./getDomainsOauth2clientCredentials").getDomainsOauth2clientCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsOauth2clientCredentials","getDomainsOauth2clientCredentialsOutput"], () => require("./getDomainsOauth2clientCredentials"));

export { GetDomainsOauthClientCertificateArgs, GetDomainsOauthClientCertificateResult, GetDomainsOauthClientCertificateOutputArgs } from "./getDomainsOauthClientCertificate";
export const getDomainsOauthClientCertificate: typeof import("./getDomainsOauthClientCertificate").getDomainsOauthClientCertificate = null as any;
export const getDomainsOauthClientCertificateOutput: typeof import("./getDomainsOauthClientCertificate").getDomainsOauthClientCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsOauthClientCertificate","getDomainsOauthClientCertificateOutput"], () => require("./getDomainsOauthClientCertificate"));

export { GetDomainsOauthClientCertificatesArgs, GetDomainsOauthClientCertificatesResult, GetDomainsOauthClientCertificatesOutputArgs } from "./getDomainsOauthClientCertificates";
export const getDomainsOauthClientCertificates: typeof import("./getDomainsOauthClientCertificates").getDomainsOauthClientCertificates = null as any;
export const getDomainsOauthClientCertificatesOutput: typeof import("./getDomainsOauthClientCertificates").getDomainsOauthClientCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsOauthClientCertificates","getDomainsOauthClientCertificatesOutput"], () => require("./getDomainsOauthClientCertificates"));

export { GetDomainsOauthPartnerCertificateArgs, GetDomainsOauthPartnerCertificateResult, GetDomainsOauthPartnerCertificateOutputArgs } from "./getDomainsOauthPartnerCertificate";
export const getDomainsOauthPartnerCertificate: typeof import("./getDomainsOauthPartnerCertificate").getDomainsOauthPartnerCertificate = null as any;
export const getDomainsOauthPartnerCertificateOutput: typeof import("./getDomainsOauthPartnerCertificate").getDomainsOauthPartnerCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsOauthPartnerCertificate","getDomainsOauthPartnerCertificateOutput"], () => require("./getDomainsOauthPartnerCertificate"));

export { GetDomainsOauthPartnerCertificatesArgs, GetDomainsOauthPartnerCertificatesResult, GetDomainsOauthPartnerCertificatesOutputArgs } from "./getDomainsOauthPartnerCertificates";
export const getDomainsOauthPartnerCertificates: typeof import("./getDomainsOauthPartnerCertificates").getDomainsOauthPartnerCertificates = null as any;
export const getDomainsOauthPartnerCertificatesOutput: typeof import("./getDomainsOauthPartnerCertificates").getDomainsOauthPartnerCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsOauthPartnerCertificates","getDomainsOauthPartnerCertificatesOutput"], () => require("./getDomainsOauthPartnerCertificates"));

export { GetDomainsPasswordPoliciesArgs, GetDomainsPasswordPoliciesResult, GetDomainsPasswordPoliciesOutputArgs } from "./getDomainsPasswordPolicies";
export const getDomainsPasswordPolicies: typeof import("./getDomainsPasswordPolicies").getDomainsPasswordPolicies = null as any;
export const getDomainsPasswordPoliciesOutput: typeof import("./getDomainsPasswordPolicies").getDomainsPasswordPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsPasswordPolicies","getDomainsPasswordPoliciesOutput"], () => require("./getDomainsPasswordPolicies"));

export { GetDomainsPasswordPolicyArgs, GetDomainsPasswordPolicyResult, GetDomainsPasswordPolicyOutputArgs } from "./getDomainsPasswordPolicy";
export const getDomainsPasswordPolicy: typeof import("./getDomainsPasswordPolicy").getDomainsPasswordPolicy = null as any;
export const getDomainsPasswordPolicyOutput: typeof import("./getDomainsPasswordPolicy").getDomainsPasswordPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsPasswordPolicy","getDomainsPasswordPolicyOutput"], () => require("./getDomainsPasswordPolicy"));

export { GetDomainsPoliciesArgs, GetDomainsPoliciesResult, GetDomainsPoliciesOutputArgs } from "./getDomainsPolicies";
export const getDomainsPolicies: typeof import("./getDomainsPolicies").getDomainsPolicies = null as any;
export const getDomainsPoliciesOutput: typeof import("./getDomainsPolicies").getDomainsPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsPolicies","getDomainsPoliciesOutput"], () => require("./getDomainsPolicies"));

export { GetDomainsPolicyArgs, GetDomainsPolicyResult, GetDomainsPolicyOutputArgs } from "./getDomainsPolicy";
export const getDomainsPolicy: typeof import("./getDomainsPolicy").getDomainsPolicy = null as any;
export const getDomainsPolicyOutput: typeof import("./getDomainsPolicy").getDomainsPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsPolicy","getDomainsPolicyOutput"], () => require("./getDomainsPolicy"));

export { GetDomainsResourceTypeSchemaAttributesArgs, GetDomainsResourceTypeSchemaAttributesResult, GetDomainsResourceTypeSchemaAttributesOutputArgs } from "./getDomainsResourceTypeSchemaAttributes";
export const getDomainsResourceTypeSchemaAttributes: typeof import("./getDomainsResourceTypeSchemaAttributes").getDomainsResourceTypeSchemaAttributes = null as any;
export const getDomainsResourceTypeSchemaAttributesOutput: typeof import("./getDomainsResourceTypeSchemaAttributes").getDomainsResourceTypeSchemaAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsResourceTypeSchemaAttributes","getDomainsResourceTypeSchemaAttributesOutput"], () => require("./getDomainsResourceTypeSchemaAttributes"));

export { GetDomainsRuleArgs, GetDomainsRuleResult, GetDomainsRuleOutputArgs } from "./getDomainsRule";
export const getDomainsRule: typeof import("./getDomainsRule").getDomainsRule = null as any;
export const getDomainsRuleOutput: typeof import("./getDomainsRule").getDomainsRuleOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsRule","getDomainsRuleOutput"], () => require("./getDomainsRule"));

export { GetDomainsRulesArgs, GetDomainsRulesResult, GetDomainsRulesOutputArgs } from "./getDomainsRules";
export const getDomainsRules: typeof import("./getDomainsRules").getDomainsRules = null as any;
export const getDomainsRulesOutput: typeof import("./getDomainsRules").getDomainsRulesOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsRules","getDomainsRulesOutput"], () => require("./getDomainsRules"));

export { GetDomainsSecurityQuestionArgs, GetDomainsSecurityQuestionResult, GetDomainsSecurityQuestionOutputArgs } from "./getDomainsSecurityQuestion";
export const getDomainsSecurityQuestion: typeof import("./getDomainsSecurityQuestion").getDomainsSecurityQuestion = null as any;
export const getDomainsSecurityQuestionOutput: typeof import("./getDomainsSecurityQuestion").getDomainsSecurityQuestionOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsSecurityQuestion","getDomainsSecurityQuestionOutput"], () => require("./getDomainsSecurityQuestion"));

export { GetDomainsSecurityQuestionSettingArgs, GetDomainsSecurityQuestionSettingResult, GetDomainsSecurityQuestionSettingOutputArgs } from "./getDomainsSecurityQuestionSetting";
export const getDomainsSecurityQuestionSetting: typeof import("./getDomainsSecurityQuestionSetting").getDomainsSecurityQuestionSetting = null as any;
export const getDomainsSecurityQuestionSettingOutput: typeof import("./getDomainsSecurityQuestionSetting").getDomainsSecurityQuestionSettingOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsSecurityQuestionSetting","getDomainsSecurityQuestionSettingOutput"], () => require("./getDomainsSecurityQuestionSetting"));

export { GetDomainsSecurityQuestionSettingsArgs, GetDomainsSecurityQuestionSettingsResult, GetDomainsSecurityQuestionSettingsOutputArgs } from "./getDomainsSecurityQuestionSettings";
export const getDomainsSecurityQuestionSettings: typeof import("./getDomainsSecurityQuestionSettings").getDomainsSecurityQuestionSettings = null as any;
export const getDomainsSecurityQuestionSettingsOutput: typeof import("./getDomainsSecurityQuestionSettings").getDomainsSecurityQuestionSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsSecurityQuestionSettings","getDomainsSecurityQuestionSettingsOutput"], () => require("./getDomainsSecurityQuestionSettings"));

export { GetDomainsSecurityQuestionsArgs, GetDomainsSecurityQuestionsResult, GetDomainsSecurityQuestionsOutputArgs } from "./getDomainsSecurityQuestions";
export const getDomainsSecurityQuestions: typeof import("./getDomainsSecurityQuestions").getDomainsSecurityQuestions = null as any;
export const getDomainsSecurityQuestionsOutput: typeof import("./getDomainsSecurityQuestions").getDomainsSecurityQuestionsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsSecurityQuestions","getDomainsSecurityQuestionsOutput"], () => require("./getDomainsSecurityQuestions"));

export { GetDomainsSelfRegistrationProfileArgs, GetDomainsSelfRegistrationProfileResult, GetDomainsSelfRegistrationProfileOutputArgs } from "./getDomainsSelfRegistrationProfile";
export const getDomainsSelfRegistrationProfile: typeof import("./getDomainsSelfRegistrationProfile").getDomainsSelfRegistrationProfile = null as any;
export const getDomainsSelfRegistrationProfileOutput: typeof import("./getDomainsSelfRegistrationProfile").getDomainsSelfRegistrationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsSelfRegistrationProfile","getDomainsSelfRegistrationProfileOutput"], () => require("./getDomainsSelfRegistrationProfile"));

export { GetDomainsSelfRegistrationProfilesArgs, GetDomainsSelfRegistrationProfilesResult, GetDomainsSelfRegistrationProfilesOutputArgs } from "./getDomainsSelfRegistrationProfiles";
export const getDomainsSelfRegistrationProfiles: typeof import("./getDomainsSelfRegistrationProfiles").getDomainsSelfRegistrationProfiles = null as any;
export const getDomainsSelfRegistrationProfilesOutput: typeof import("./getDomainsSelfRegistrationProfiles").getDomainsSelfRegistrationProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsSelfRegistrationProfiles","getDomainsSelfRegistrationProfilesOutput"], () => require("./getDomainsSelfRegistrationProfiles"));

export { GetDomainsSettingArgs, GetDomainsSettingResult, GetDomainsSettingOutputArgs } from "./getDomainsSetting";
export const getDomainsSetting: typeof import("./getDomainsSetting").getDomainsSetting = null as any;
export const getDomainsSettingOutput: typeof import("./getDomainsSetting").getDomainsSettingOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsSetting","getDomainsSettingOutput"], () => require("./getDomainsSetting"));

export { GetDomainsSettingsArgs, GetDomainsSettingsResult, GetDomainsSettingsOutputArgs } from "./getDomainsSettings";
export const getDomainsSettings: typeof import("./getDomainsSettings").getDomainsSettings = null as any;
export const getDomainsSettingsOutput: typeof import("./getDomainsSettings").getDomainsSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsSettings","getDomainsSettingsOutput"], () => require("./getDomainsSettings"));

export { GetDomainsSmtpCredentialArgs, GetDomainsSmtpCredentialResult, GetDomainsSmtpCredentialOutputArgs } from "./getDomainsSmtpCredential";
export const getDomainsSmtpCredential: typeof import("./getDomainsSmtpCredential").getDomainsSmtpCredential = null as any;
export const getDomainsSmtpCredentialOutput: typeof import("./getDomainsSmtpCredential").getDomainsSmtpCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsSmtpCredential","getDomainsSmtpCredentialOutput"], () => require("./getDomainsSmtpCredential"));

export { GetDomainsSmtpCredentialsArgs, GetDomainsSmtpCredentialsResult, GetDomainsSmtpCredentialsOutputArgs } from "./getDomainsSmtpCredentials";
export const getDomainsSmtpCredentials: typeof import("./getDomainsSmtpCredentials").getDomainsSmtpCredentials = null as any;
export const getDomainsSmtpCredentialsOutput: typeof import("./getDomainsSmtpCredentials").getDomainsSmtpCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsSmtpCredentials","getDomainsSmtpCredentialsOutput"], () => require("./getDomainsSmtpCredentials"));

export { GetDomainsUserArgs, GetDomainsUserResult, GetDomainsUserOutputArgs } from "./getDomainsUser";
export const getDomainsUser: typeof import("./getDomainsUser").getDomainsUser = null as any;
export const getDomainsUserOutput: typeof import("./getDomainsUser").getDomainsUserOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsUser","getDomainsUserOutput"], () => require("./getDomainsUser"));

export { GetDomainsUserAttributesSettingArgs, GetDomainsUserAttributesSettingResult, GetDomainsUserAttributesSettingOutputArgs } from "./getDomainsUserAttributesSetting";
export const getDomainsUserAttributesSetting: typeof import("./getDomainsUserAttributesSetting").getDomainsUserAttributesSetting = null as any;
export const getDomainsUserAttributesSettingOutput: typeof import("./getDomainsUserAttributesSetting").getDomainsUserAttributesSettingOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsUserAttributesSetting","getDomainsUserAttributesSettingOutput"], () => require("./getDomainsUserAttributesSetting"));

export { GetDomainsUserAttributesSettingsArgs, GetDomainsUserAttributesSettingsResult, GetDomainsUserAttributesSettingsOutputArgs } from "./getDomainsUserAttributesSettings";
export const getDomainsUserAttributesSettings: typeof import("./getDomainsUserAttributesSettings").getDomainsUserAttributesSettings = null as any;
export const getDomainsUserAttributesSettingsOutput: typeof import("./getDomainsUserAttributesSettings").getDomainsUserAttributesSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsUserAttributesSettings","getDomainsUserAttributesSettingsOutput"], () => require("./getDomainsUserAttributesSettings"));

export { GetDomainsUserDbCredentialArgs, GetDomainsUserDbCredentialResult, GetDomainsUserDbCredentialOutputArgs } from "./getDomainsUserDbCredential";
export const getDomainsUserDbCredential: typeof import("./getDomainsUserDbCredential").getDomainsUserDbCredential = null as any;
export const getDomainsUserDbCredentialOutput: typeof import("./getDomainsUserDbCredential").getDomainsUserDbCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsUserDbCredential","getDomainsUserDbCredentialOutput"], () => require("./getDomainsUserDbCredential"));

export { GetDomainsUserDbCredentialsArgs, GetDomainsUserDbCredentialsResult, GetDomainsUserDbCredentialsOutputArgs } from "./getDomainsUserDbCredentials";
export const getDomainsUserDbCredentials: typeof import("./getDomainsUserDbCredentials").getDomainsUserDbCredentials = null as any;
export const getDomainsUserDbCredentialsOutput: typeof import("./getDomainsUserDbCredentials").getDomainsUserDbCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsUserDbCredentials","getDomainsUserDbCredentialsOutput"], () => require("./getDomainsUserDbCredentials"));

export { GetDomainsUsersArgs, GetDomainsUsersResult, GetDomainsUsersOutputArgs } from "./getDomainsUsers";
export const getDomainsUsers: typeof import("./getDomainsUsers").getDomainsUsers = null as any;
export const getDomainsUsersOutput: typeof import("./getDomainsUsers").getDomainsUsersOutput = null as any;
utilities.lazyLoad(exports, ["getDomainsUsers","getDomainsUsersOutput"], () => require("./getDomainsUsers"));

export { GetDynamicGroupsArgs, GetDynamicGroupsResult, GetDynamicGroupsOutputArgs } from "./getDynamicGroups";
export const getDynamicGroups: typeof import("./getDynamicGroups").getDynamicGroups = null as any;
export const getDynamicGroupsOutput: typeof import("./getDynamicGroups").getDynamicGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDynamicGroups","getDynamicGroupsOutput"], () => require("./getDynamicGroups"));

export { GetFaultDomainsArgs, GetFaultDomainsResult, GetFaultDomainsOutputArgs } from "./getFaultDomains";
export const getFaultDomains: typeof import("./getFaultDomains").getFaultDomains = null as any;
export const getFaultDomainsOutput: typeof import("./getFaultDomains").getFaultDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getFaultDomains","getFaultDomainsOutput"], () => require("./getFaultDomains"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetIamWorkRequestArgs, GetIamWorkRequestResult, GetIamWorkRequestOutputArgs } from "./getIamWorkRequest";
export const getIamWorkRequest: typeof import("./getIamWorkRequest").getIamWorkRequest = null as any;
export const getIamWorkRequestOutput: typeof import("./getIamWorkRequest").getIamWorkRequestOutput = null as any;
utilities.lazyLoad(exports, ["getIamWorkRequest","getIamWorkRequestOutput"], () => require("./getIamWorkRequest"));

export { GetIamWorkRequestErrorsArgs, GetIamWorkRequestErrorsResult, GetIamWorkRequestErrorsOutputArgs } from "./getIamWorkRequestErrors";
export const getIamWorkRequestErrors: typeof import("./getIamWorkRequestErrors").getIamWorkRequestErrors = null as any;
export const getIamWorkRequestErrorsOutput: typeof import("./getIamWorkRequestErrors").getIamWorkRequestErrorsOutput = null as any;
utilities.lazyLoad(exports, ["getIamWorkRequestErrors","getIamWorkRequestErrorsOutput"], () => require("./getIamWorkRequestErrors"));

export { GetIamWorkRequestLogsArgs, GetIamWorkRequestLogsResult, GetIamWorkRequestLogsOutputArgs } from "./getIamWorkRequestLogs";
export const getIamWorkRequestLogs: typeof import("./getIamWorkRequestLogs").getIamWorkRequestLogs = null as any;
export const getIamWorkRequestLogsOutput: typeof import("./getIamWorkRequestLogs").getIamWorkRequestLogsOutput = null as any;
utilities.lazyLoad(exports, ["getIamWorkRequestLogs","getIamWorkRequestLogsOutput"], () => require("./getIamWorkRequestLogs"));

export { GetIamWorkRequestsArgs, GetIamWorkRequestsResult, GetIamWorkRequestsOutputArgs } from "./getIamWorkRequests";
export const getIamWorkRequests: typeof import("./getIamWorkRequests").getIamWorkRequests = null as any;
export const getIamWorkRequestsOutput: typeof import("./getIamWorkRequests").getIamWorkRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getIamWorkRequests","getIamWorkRequestsOutput"], () => require("./getIamWorkRequests"));

export { GetIdentityProviderGroupsArgs, GetIdentityProviderGroupsResult, GetIdentityProviderGroupsOutputArgs } from "./getIdentityProviderGroups";
export const getIdentityProviderGroups: typeof import("./getIdentityProviderGroups").getIdentityProviderGroups = null as any;
export const getIdentityProviderGroupsOutput: typeof import("./getIdentityProviderGroups").getIdentityProviderGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityProviderGroups","getIdentityProviderGroupsOutput"], () => require("./getIdentityProviderGroups"));

export { GetIdentityProvidersArgs, GetIdentityProvidersResult, GetIdentityProvidersOutputArgs } from "./getIdentityProviders";
export const getIdentityProviders: typeof import("./getIdentityProviders").getIdentityProviders = null as any;
export const getIdentityProvidersOutput: typeof import("./getIdentityProviders").getIdentityProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityProviders","getIdentityProvidersOutput"], () => require("./getIdentityProviders"));

export { GetIdpGroupMappingsArgs, GetIdpGroupMappingsResult, GetIdpGroupMappingsOutputArgs } from "./getIdpGroupMappings";
export const getIdpGroupMappings: typeof import("./getIdpGroupMappings").getIdpGroupMappings = null as any;
export const getIdpGroupMappingsOutput: typeof import("./getIdpGroupMappings").getIdpGroupMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getIdpGroupMappings","getIdpGroupMappingsOutput"], () => require("./getIdpGroupMappings"));

export { GetNetworkSourceArgs, GetNetworkSourceResult, GetNetworkSourceOutputArgs } from "./getNetworkSource";
export const getNetworkSource: typeof import("./getNetworkSource").getNetworkSource = null as any;
export const getNetworkSourceOutput: typeof import("./getNetworkSource").getNetworkSourceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSource","getNetworkSourceOutput"], () => require("./getNetworkSource"));

export { GetNetworkSourcesArgs, GetNetworkSourcesResult, GetNetworkSourcesOutputArgs } from "./getNetworkSources";
export const getNetworkSources: typeof import("./getNetworkSources").getNetworkSources = null as any;
export const getNetworkSourcesOutput: typeof import("./getNetworkSources").getNetworkSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSources","getNetworkSourcesOutput"], () => require("./getNetworkSources"));

export { GetPoliciesArgs, GetPoliciesResult, GetPoliciesOutputArgs } from "./getPolicies";
export const getPolicies: typeof import("./getPolicies").getPolicies = null as any;
export const getPoliciesOutput: typeof import("./getPolicies").getPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getPolicies","getPoliciesOutput"], () => require("./getPolicies"));

export { GetRegionSubscriptionsArgs, GetRegionSubscriptionsResult, GetRegionSubscriptionsOutputArgs } from "./getRegionSubscriptions";
export const getRegionSubscriptions: typeof import("./getRegionSubscriptions").getRegionSubscriptions = null as any;
export const getRegionSubscriptionsOutput: typeof import("./getRegionSubscriptions").getRegionSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegionSubscriptions","getRegionSubscriptionsOutput"], () => require("./getRegionSubscriptions"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetSmtpCredentialsArgs, GetSmtpCredentialsResult, GetSmtpCredentialsOutputArgs } from "./getSmtpCredentials";
export const getSmtpCredentials: typeof import("./getSmtpCredentials").getSmtpCredentials = null as any;
export const getSmtpCredentialsOutput: typeof import("./getSmtpCredentials").getSmtpCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getSmtpCredentials","getSmtpCredentialsOutput"], () => require("./getSmtpCredentials"));

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));

export { GetTagDefaultArgs, GetTagDefaultResult, GetTagDefaultOutputArgs } from "./getTagDefault";
export const getTagDefault: typeof import("./getTagDefault").getTagDefault = null as any;
export const getTagDefaultOutput: typeof import("./getTagDefault").getTagDefaultOutput = null as any;
utilities.lazyLoad(exports, ["getTagDefault","getTagDefaultOutput"], () => require("./getTagDefault"));

export { GetTagDefaultsArgs, GetTagDefaultsResult, GetTagDefaultsOutputArgs } from "./getTagDefaults";
export const getTagDefaults: typeof import("./getTagDefaults").getTagDefaults = null as any;
export const getTagDefaultsOutput: typeof import("./getTagDefaults").getTagDefaultsOutput = null as any;
utilities.lazyLoad(exports, ["getTagDefaults","getTagDefaultsOutput"], () => require("./getTagDefaults"));

export { GetTagNamespacesArgs, GetTagNamespacesResult, GetTagNamespacesOutputArgs } from "./getTagNamespaces";
export const getTagNamespaces: typeof import("./getTagNamespaces").getTagNamespaces = null as any;
export const getTagNamespacesOutput: typeof import("./getTagNamespaces").getTagNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getTagNamespaces","getTagNamespacesOutput"], () => require("./getTagNamespaces"));

export { GetTagStandardTagNamespaceTemplateArgs, GetTagStandardTagNamespaceTemplateResult, GetTagStandardTagNamespaceTemplateOutputArgs } from "./getTagStandardTagNamespaceTemplate";
export const getTagStandardTagNamespaceTemplate: typeof import("./getTagStandardTagNamespaceTemplate").getTagStandardTagNamespaceTemplate = null as any;
export const getTagStandardTagNamespaceTemplateOutput: typeof import("./getTagStandardTagNamespaceTemplate").getTagStandardTagNamespaceTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTagStandardTagNamespaceTemplate","getTagStandardTagNamespaceTemplateOutput"], () => require("./getTagStandardTagNamespaceTemplate"));

export { GetTagStandardTagNamespaceTemplatesArgs, GetTagStandardTagNamespaceTemplatesResult, GetTagStandardTagNamespaceTemplatesOutputArgs } from "./getTagStandardTagNamespaceTemplates";
export const getTagStandardTagNamespaceTemplates: typeof import("./getTagStandardTagNamespaceTemplates").getTagStandardTagNamespaceTemplates = null as any;
export const getTagStandardTagNamespaceTemplatesOutput: typeof import("./getTagStandardTagNamespaceTemplates").getTagStandardTagNamespaceTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getTagStandardTagNamespaceTemplates","getTagStandardTagNamespaceTemplatesOutput"], () => require("./getTagStandardTagNamespaceTemplates"));

export { GetTagsArgs, GetTagsResult, GetTagsOutputArgs } from "./getTags";
export const getTags: typeof import("./getTags").getTags = null as any;
export const getTagsOutput: typeof import("./getTags").getTagsOutput = null as any;
utilities.lazyLoad(exports, ["getTags","getTagsOutput"], () => require("./getTags"));

export { GetTenancyArgs, GetTenancyResult, GetTenancyOutputArgs } from "./getTenancy";
export const getTenancy: typeof import("./getTenancy").getTenancy = null as any;
export const getTenancyOutput: typeof import("./getTenancy").getTenancyOutput = null as any;
utilities.lazyLoad(exports, ["getTenancy","getTenancyOutput"], () => require("./getTenancy"));

export { GetUiPasswordArgs, GetUiPasswordResult, GetUiPasswordOutputArgs } from "./getUiPassword";
export const getUiPassword: typeof import("./getUiPassword").getUiPassword = null as any;
export const getUiPasswordOutput: typeof import("./getUiPassword").getUiPasswordOutput = null as any;
utilities.lazyLoad(exports, ["getUiPassword","getUiPasswordOutput"], () => require("./getUiPassword"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserGroupMembershipsArgs, GetUserGroupMembershipsResult, GetUserGroupMembershipsOutputArgs } from "./getUserGroupMemberships";
export const getUserGroupMemberships: typeof import("./getUserGroupMemberships").getUserGroupMemberships = null as any;
export const getUserGroupMembershipsOutput: typeof import("./getUserGroupMemberships").getUserGroupMembershipsOutput = null as any;
utilities.lazyLoad(exports, ["getUserGroupMemberships","getUserGroupMembershipsOutput"], () => require("./getUserGroupMemberships"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { IdentityProviderArgs, IdentityProviderState } from "./identityProvider";
export type IdentityProvider = import("./identityProvider").IdentityProvider;
export const IdentityProvider: typeof import("./identityProvider").IdentityProvider = null as any;
utilities.lazyLoad(exports, ["IdentityProvider"], () => require("./identityProvider"));

export { IdpGroupMappingArgs, IdpGroupMappingState } from "./idpGroupMapping";
export type IdpGroupMapping = import("./idpGroupMapping").IdpGroupMapping;
export const IdpGroupMapping: typeof import("./idpGroupMapping").IdpGroupMapping = null as any;
utilities.lazyLoad(exports, ["IdpGroupMapping"], () => require("./idpGroupMapping"));

export { ImportStandardTagsManagementArgs, ImportStandardTagsManagementState } from "./importStandardTagsManagement";
export type ImportStandardTagsManagement = import("./importStandardTagsManagement").ImportStandardTagsManagement;
export const ImportStandardTagsManagement: typeof import("./importStandardTagsManagement").ImportStandardTagsManagement = null as any;
utilities.lazyLoad(exports, ["ImportStandardTagsManagement"], () => require("./importStandardTagsManagement"));

export { NetworkSourceArgs, NetworkSourceState } from "./networkSource";
export type NetworkSource = import("./networkSource").NetworkSource;
export const NetworkSource: typeof import("./networkSource").NetworkSource = null as any;
utilities.lazyLoad(exports, ["NetworkSource"], () => require("./networkSource"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { SmtpCredentialArgs, SmtpCredentialState } from "./smtpCredential";
export type SmtpCredential = import("./smtpCredential").SmtpCredential;
export const SmtpCredential: typeof import("./smtpCredential").SmtpCredential = null as any;
utilities.lazyLoad(exports, ["SmtpCredential"], () => require("./smtpCredential"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TagDefaultArgs, TagDefaultState } from "./tagDefault";
export type TagDefault = import("./tagDefault").TagDefault;
export const TagDefault: typeof import("./tagDefault").TagDefault = null as any;
utilities.lazyLoad(exports, ["TagDefault"], () => require("./tagDefault"));

export { TagNamespaceArgs, TagNamespaceState } from "./tagNamespace";
export type TagNamespace = import("./tagNamespace").TagNamespace;
export const TagNamespace: typeof import("./tagNamespace").TagNamespace = null as any;
utilities.lazyLoad(exports, ["TagNamespace"], () => require("./tagNamespace"));

export { UiPasswordArgs, UiPasswordState } from "./uiPassword";
export type UiPassword = import("./uiPassword").UiPassword;
export const UiPassword: typeof import("./uiPassword").UiPassword = null as any;
utilities.lazyLoad(exports, ["UiPassword"], () => require("./uiPassword"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserCapabilitiesManagementArgs, UserCapabilitiesManagementState } from "./userCapabilitiesManagement";
export type UserCapabilitiesManagement = import("./userCapabilitiesManagement").UserCapabilitiesManagement;
export const UserCapabilitiesManagement: typeof import("./userCapabilitiesManagement").UserCapabilitiesManagement = null as any;
utilities.lazyLoad(exports, ["UserCapabilitiesManagement"], () => require("./userCapabilitiesManagement"));

export { UserGroupMembershipArgs, UserGroupMembershipState } from "./userGroupMembership";
export type UserGroupMembership = import("./userGroupMembership").UserGroupMembership;
export const UserGroupMembership: typeof import("./userGroupMembership").UserGroupMembership = null as any;
utilities.lazyLoad(exports, ["UserGroupMembership"], () => require("./userGroupMembership"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:Identity/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "oci:Identity/authToken:AuthToken":
                return new AuthToken(name, <any>undefined, { urn })
            case "oci:Identity/authenticationPolicy:AuthenticationPolicy":
                return new AuthenticationPolicy(name, <any>undefined, { urn })
            case "oci:Identity/compartment:Compartment":
                return new Compartment(name, <any>undefined, { urn })
            case "oci:Identity/customerSecretKey:CustomerSecretKey":
                return new CustomerSecretKey(name, <any>undefined, { urn })
            case "oci:Identity/dbCredential:DbCredential":
                return new DbCredential(name, <any>undefined, { urn })
            case "oci:Identity/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "oci:Identity/domainReplicationToRegion:DomainReplicationToRegion":
                return new DomainReplicationToRegion(name, <any>undefined, { urn })
            case "oci:Identity/domainsAccountRecoverySetting:DomainsAccountRecoverySetting":
                return new DomainsAccountRecoverySetting(name, <any>undefined, { urn })
            case "oci:Identity/domainsApiKey:DomainsApiKey":
                return new DomainsApiKey(name, <any>undefined, { urn })
            case "oci:Identity/domainsApp:DomainsApp":
                return new DomainsApp(name, <any>undefined, { urn })
            case "oci:Identity/domainsAppRole:DomainsAppRole":
                return new DomainsAppRole(name, <any>undefined, { urn })
            case "oci:Identity/domainsApprovalWorkflow:DomainsApprovalWorkflow":
                return new DomainsApprovalWorkflow(name, <any>undefined, { urn })
            case "oci:Identity/domainsApprovalWorkflowAssignment:DomainsApprovalWorkflowAssignment":
                return new DomainsApprovalWorkflowAssignment(name, <any>undefined, { urn })
            case "oci:Identity/domainsApprovalWorkflowStep:DomainsApprovalWorkflowStep":
                return new DomainsApprovalWorkflowStep(name, <any>undefined, { urn })
            case "oci:Identity/domainsAuthToken:DomainsAuthToken":
                return new DomainsAuthToken(name, <any>undefined, { urn })
            case "oci:Identity/domainsAuthenticationFactorSetting:DomainsAuthenticationFactorSetting":
                return new DomainsAuthenticationFactorSetting(name, <any>undefined, { urn })
            case "oci:Identity/domainsCloudGate:DomainsCloudGate":
                return new DomainsCloudGate(name, <any>undefined, { urn })
            case "oci:Identity/domainsCloudGateMapping:DomainsCloudGateMapping":
                return new DomainsCloudGateMapping(name, <any>undefined, { urn })
            case "oci:Identity/domainsCloudGateServer:DomainsCloudGateServer":
                return new DomainsCloudGateServer(name, <any>undefined, { urn })
            case "oci:Identity/domainsCondition:DomainsCondition":
                return new DomainsCondition(name, <any>undefined, { urn })
            case "oci:Identity/domainsCustomerSecretKey:DomainsCustomerSecretKey":
                return new DomainsCustomerSecretKey(name, <any>undefined, { urn })
            case "oci:Identity/domainsDynamicResourceGroup:DomainsDynamicResourceGroup":
                return new DomainsDynamicResourceGroup(name, <any>undefined, { urn })
            case "oci:Identity/domainsGrant:DomainsGrant":
                return new DomainsGrant(name, <any>undefined, { urn })
            case "oci:Identity/domainsGroup:DomainsGroup":
                return new DomainsGroup(name, <any>undefined, { urn })
            case "oci:Identity/domainsIdentityProvider:DomainsIdentityProvider":
                return new DomainsIdentityProvider(name, <any>undefined, { urn })
            case "oci:Identity/domainsIdentitySetting:DomainsIdentitySetting":
                return new DomainsIdentitySetting(name, <any>undefined, { urn })
            case "oci:Identity/domainsKmsiSetting:DomainsKmsiSetting":
                return new DomainsKmsiSetting(name, <any>undefined, { urn })
            case "oci:Identity/domainsMyApiKey:DomainsMyApiKey":
                return new DomainsMyApiKey(name, <any>undefined, { urn })
            case "oci:Identity/domainsMyAuthToken:DomainsMyAuthToken":
                return new DomainsMyAuthToken(name, <any>undefined, { urn })
            case "oci:Identity/domainsMyCustomerSecretKey:DomainsMyCustomerSecretKey":
                return new DomainsMyCustomerSecretKey(name, <any>undefined, { urn })
            case "oci:Identity/domainsMyOauth2clientCredential:DomainsMyOauth2clientCredential":
                return new DomainsMyOauth2clientCredential(name, <any>undefined, { urn })
            case "oci:Identity/domainsMyRequest:DomainsMyRequest":
                return new DomainsMyRequest(name, <any>undefined, { urn })
            case "oci:Identity/domainsMySmtpCredential:DomainsMySmtpCredential":
                return new DomainsMySmtpCredential(name, <any>undefined, { urn })
            case "oci:Identity/domainsMySupportAccount:DomainsMySupportAccount":
                return new DomainsMySupportAccount(name, <any>undefined, { urn })
            case "oci:Identity/domainsMyUserDbCredential:DomainsMyUserDbCredential":
                return new DomainsMyUserDbCredential(name, <any>undefined, { urn })
            case "oci:Identity/domainsNetworkPerimeter:DomainsNetworkPerimeter":
                return new DomainsNetworkPerimeter(name, <any>undefined, { urn })
            case "oci:Identity/domainsNotificationSetting:DomainsNotificationSetting":
                return new DomainsNotificationSetting(name, <any>undefined, { urn })
            case "oci:Identity/domainsOauth2clientCredential:DomainsOauth2clientCredential":
                return new DomainsOauth2clientCredential(name, <any>undefined, { urn })
            case "oci:Identity/domainsOauthClientCertificate:DomainsOauthClientCertificate":
                return new DomainsOauthClientCertificate(name, <any>undefined, { urn })
            case "oci:Identity/domainsOauthPartnerCertificate:DomainsOauthPartnerCertificate":
                return new DomainsOauthPartnerCertificate(name, <any>undefined, { urn })
            case "oci:Identity/domainsPasswordPolicy:DomainsPasswordPolicy":
                return new DomainsPasswordPolicy(name, <any>undefined, { urn })
            case "oci:Identity/domainsPolicy:DomainsPolicy":
                return new DomainsPolicy(name, <any>undefined, { urn })
            case "oci:Identity/domainsRule:DomainsRule":
                return new DomainsRule(name, <any>undefined, { urn })
            case "oci:Identity/domainsSecurityQuestion:DomainsSecurityQuestion":
                return new DomainsSecurityQuestion(name, <any>undefined, { urn })
            case "oci:Identity/domainsSecurityQuestionSetting:DomainsSecurityQuestionSetting":
                return new DomainsSecurityQuestionSetting(name, <any>undefined, { urn })
            case "oci:Identity/domainsSelfRegistrationProfile:DomainsSelfRegistrationProfile":
                return new DomainsSelfRegistrationProfile(name, <any>undefined, { urn })
            case "oci:Identity/domainsSetting:DomainsSetting":
                return new DomainsSetting(name, <any>undefined, { urn })
            case "oci:Identity/domainsSmtpCredential:DomainsSmtpCredential":
                return new DomainsSmtpCredential(name, <any>undefined, { urn })
            case "oci:Identity/domainsUser:DomainsUser":
                return new DomainsUser(name, <any>undefined, { urn })
            case "oci:Identity/domainsUserDbCredential:DomainsUserDbCredential":
                return new DomainsUserDbCredential(name, <any>undefined, { urn })
            case "oci:Identity/dynamicGroup:DynamicGroup":
                return new DynamicGroup(name, <any>undefined, { urn })
            case "oci:Identity/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "oci:Identity/identityProvider:IdentityProvider":
                return new IdentityProvider(name, <any>undefined, { urn })
            case "oci:Identity/idpGroupMapping:IdpGroupMapping":
                return new IdpGroupMapping(name, <any>undefined, { urn })
            case "oci:Identity/importStandardTagsManagement:ImportStandardTagsManagement":
                return new ImportStandardTagsManagement(name, <any>undefined, { urn })
            case "oci:Identity/networkSource:NetworkSource":
                return new NetworkSource(name, <any>undefined, { urn })
            case "oci:Identity/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "oci:Identity/smtpCredential:SmtpCredential":
                return new SmtpCredential(name, <any>undefined, { urn })
            case "oci:Identity/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "oci:Identity/tagDefault:TagDefault":
                return new TagDefault(name, <any>undefined, { urn })
            case "oci:Identity/tagNamespace:TagNamespace":
                return new TagNamespace(name, <any>undefined, { urn })
            case "oci:Identity/uiPassword:UiPassword":
                return new UiPassword(name, <any>undefined, { urn })
            case "oci:Identity/user:User":
                return new User(name, <any>undefined, { urn })
            case "oci:Identity/userCapabilitiesManagement:UserCapabilitiesManagement":
                return new UserCapabilitiesManagement(name, <any>undefined, { urn })
            case "oci:Identity/userGroupMembership:UserGroupMembership":
                return new UserGroupMembership(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "Identity/apiKey", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/authToken", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/authenticationPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/compartment", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/customerSecretKey", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/dbCredential", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domain", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainReplicationToRegion", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsAccountRecoverySetting", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsApiKey", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsApp", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsAppRole", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsApprovalWorkflow", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsApprovalWorkflowAssignment", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsApprovalWorkflowStep", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsAuthToken", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsAuthenticationFactorSetting", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsCloudGate", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsCloudGateMapping", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsCloudGateServer", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsCondition", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsCustomerSecretKey", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsDynamicResourceGroup", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsGrant", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsGroup", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsIdentityProvider", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsIdentitySetting", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsKmsiSetting", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsMyApiKey", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsMyAuthToken", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsMyCustomerSecretKey", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsMyOauth2clientCredential", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsMyRequest", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsMySmtpCredential", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsMySupportAccount", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsMyUserDbCredential", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsNetworkPerimeter", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsNotificationSetting", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsOauth2clientCredential", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsOauthClientCertificate", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsOauthPartnerCertificate", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsPasswordPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsRule", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsSecurityQuestion", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsSecurityQuestionSetting", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsSelfRegistrationProfile", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsSetting", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsSmtpCredential", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsUser", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainsUserDbCredential", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/dynamicGroup", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/group", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/identityProvider", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/idpGroupMapping", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/importStandardTagsManagement", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/networkSource", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/policy", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/smtpCredential", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/tag", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/tagDefault", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/tagNamespace", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/uiPassword", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/user", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/userCapabilitiesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/userGroupMembership", _module)
