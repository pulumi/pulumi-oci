// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./apiKey";
export * from "./authToken";
export * from "./authenticationPolicy";
export * from "./compartment";
export * from "./customerSecretKey";
export * from "./dbCredential";
export * from "./domain";
export * from "./domainReplicationToRegion";
export * from "./dynamicGroup";
export * from "./getAllowedDomainLicenseTypes";
export * from "./getApiKeys";
export * from "./getAuthTokens";
export * from "./getAuthenticationPolicy";
export * from "./getAvailabilityDomain";
export * from "./getAvailabilityDomains";
export * from "./getCompartment";
export * from "./getCompartments";
export * from "./getCostTrackingTags";
export * from "./getCustomerSecretKeys";
export * from "./getDbCredentials";
export * from "./getDomain";
export * from "./getDomains";
export * from "./getDynamicGroups";
export * from "./getFaultDomains";
export * from "./getGroup";
export * from "./getGroups";
export * from "./getIamWorkRequest";
export * from "./getIamWorkRequestErrors";
export * from "./getIamWorkRequestLogs";
export * from "./getIamWorkRequests";
export * from "./getIdentityProviderGroups";
export * from "./getIdentityProviders";
export * from "./getIdpGroupMappings";
export * from "./getNetworkSource";
export * from "./getNetworkSources";
export * from "./getPolicies";
export * from "./getRegionSubscriptions";
export * from "./getRegions";
export * from "./getSmtpCredentials";
export * from "./getSwiftPasswords";
export * from "./getTag";
export * from "./getTagDefault";
export * from "./getTagDefaults";
export * from "./getTagNamespaces";
export * from "./getTagStandardTagNamespaceTemplate";
export * from "./getTagStandardTagNamespaceTemplates";
export * from "./getTags";
export * from "./getTenancy";
export * from "./getUiPassword";
export * from "./getUser";
export * from "./getUserGroupMemberships";
export * from "./getUsers";
export * from "./group";
export * from "./identityProvider";
export * from "./idpGroupMapping";
export * from "./importStandardTagsManagement";
export * from "./networkSource";
export * from "./policy";
export * from "./smtpCredential";
export * from "./swiftPassword";
export * from "./tag";
export * from "./tagDefault";
export * from "./tagNamespace";
export * from "./uiPassword";
export * from "./user";
export * from "./userCapabilitiesManagement";
export * from "./userGroupMembership";

// Import resources to register:
import { ApiKey } from "./apiKey";
import { AuthToken } from "./authToken";
import { AuthenticationPolicy } from "./authenticationPolicy";
import { Compartment } from "./compartment";
import { CustomerSecretKey } from "./customerSecretKey";
import { DbCredential } from "./dbCredential";
import { Domain } from "./domain";
import { DomainReplicationToRegion } from "./domainReplicationToRegion";
import { DynamicGroup } from "./dynamicGroup";
import { Group } from "./group";
import { IdentityProvider } from "./identityProvider";
import { IdpGroupMapping } from "./idpGroupMapping";
import { ImportStandardTagsManagement } from "./importStandardTagsManagement";
import { NetworkSource } from "./networkSource";
import { Policy } from "./policy";
import { SmtpCredential } from "./smtpCredential";
import { SwiftPassword } from "./swiftPassword";
import { Tag } from "./tag";
import { TagDefault } from "./tagDefault";
import { TagNamespace } from "./tagNamespace";
import { UiPassword } from "./uiPassword";
import { User } from "./user";
import { UserCapabilitiesManagement } from "./userCapabilitiesManagement";
import { UserGroupMembership } from "./userGroupMembership";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:Identity/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "oci:Identity/authToken:AuthToken":
                return new AuthToken(name, <any>undefined, { urn })
            case "oci:Identity/authenticationPolicy:AuthenticationPolicy":
                return new AuthenticationPolicy(name, <any>undefined, { urn })
            case "oci:Identity/compartment:Compartment":
                return new Compartment(name, <any>undefined, { urn })
            case "oci:Identity/customerSecretKey:CustomerSecretKey":
                return new CustomerSecretKey(name, <any>undefined, { urn })
            case "oci:Identity/dbCredential:DbCredential":
                return new DbCredential(name, <any>undefined, { urn })
            case "oci:Identity/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "oci:Identity/domainReplicationToRegion:DomainReplicationToRegion":
                return new DomainReplicationToRegion(name, <any>undefined, { urn })
            case "oci:Identity/dynamicGroup:DynamicGroup":
                return new DynamicGroup(name, <any>undefined, { urn })
            case "oci:Identity/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "oci:Identity/identityProvider:IdentityProvider":
                return new IdentityProvider(name, <any>undefined, { urn })
            case "oci:Identity/idpGroupMapping:IdpGroupMapping":
                return new IdpGroupMapping(name, <any>undefined, { urn })
            case "oci:Identity/importStandardTagsManagement:ImportStandardTagsManagement":
                return new ImportStandardTagsManagement(name, <any>undefined, { urn })
            case "oci:Identity/networkSource:NetworkSource":
                return new NetworkSource(name, <any>undefined, { urn })
            case "oci:Identity/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "oci:Identity/smtpCredential:SmtpCredential":
                return new SmtpCredential(name, <any>undefined, { urn })
            case "oci:Identity/swiftPassword:SwiftPassword":
                return new SwiftPassword(name, <any>undefined, { urn })
            case "oci:Identity/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "oci:Identity/tagDefault:TagDefault":
                return new TagDefault(name, <any>undefined, { urn })
            case "oci:Identity/tagNamespace:TagNamespace":
                return new TagNamespace(name, <any>undefined, { urn })
            case "oci:Identity/uiPassword:UiPassword":
                return new UiPassword(name, <any>undefined, { urn })
            case "oci:Identity/user:User":
                return new User(name, <any>undefined, { urn })
            case "oci:Identity/userCapabilitiesManagement:UserCapabilitiesManagement":
                return new UserCapabilitiesManagement(name, <any>undefined, { urn })
            case "oci:Identity/userGroupMembership:UserGroupMembership":
                return new UserGroupMembership(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "Identity/apiKey", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/authToken", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/authenticationPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/compartment", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/customerSecretKey", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/dbCredential", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domain", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/domainReplicationToRegion", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/dynamicGroup", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/group", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/identityProvider", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/idpGroupMapping", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/importStandardTagsManagement", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/networkSource", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/policy", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/smtpCredential", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/swiftPassword", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/tag", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/tagDefault", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/tagNamespace", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/uiPassword", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/user", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/userCapabilitiesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "Identity/userGroupMembership", _module)
