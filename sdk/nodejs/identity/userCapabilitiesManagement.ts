// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the User Capabilities Management resource in Oracle Cloud Infrastructure Identity service.
 *
 * Manages the capabilities of the specified user.
 *
 * **Important:** Deleting the User Capabilities Management leaves the User resource in its existing state (rather than returning to its defaults)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testUserCapabilitiesManagement = new oci.identity.UserCapabilitiesManagement("testUserCapabilitiesManagement", {
 *     userId: oci_identity_user.user1.id,
 *     canUseApiKeys: true,
 *     canUseAuthTokens: true,
 *     canUseConsolePassword: false,
 *     canUseCustomerSecretKeys: true,
 *     canUseSmtpCredentials: true,
 * });
 * ```
 *
 * ## Import
 *
 * Users can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:Identity/userCapabilitiesManagement:UserCapabilitiesManagement test_user_capabilities_management "capabilities/{userId}"
 * ```
 */
export class UserCapabilitiesManagement extends pulumi.CustomResource {
    /**
     * Get an existing UserCapabilitiesManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserCapabilitiesManagementState, opts?: pulumi.CustomResourceOptions): UserCapabilitiesManagement {
        return new UserCapabilitiesManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Identity/userCapabilitiesManagement:UserCapabilitiesManagement';

    /**
     * Returns true if the given object is an instance of UserCapabilitiesManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserCapabilitiesManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserCapabilitiesManagement.__pulumiType;
    }

    /**
     * (Updatable) Indicates if the user can use API keys.
     */
    public readonly canUseApiKeys!: pulumi.Output<boolean | undefined>;
    /**
     * (Updatable) Indicates if the user can use SWIFT passwords / auth tokens.
     */
    public readonly canUseAuthTokens!: pulumi.Output<boolean | undefined>;
    /**
     * (Updatable) Indicates if the user can log in to the console.
     */
    public readonly canUseConsolePassword!: pulumi.Output<boolean | undefined>;
    /**
     * (Updatable) Indicates if the user can use SigV4 symmetric keys.
     */
    public readonly canUseCustomerSecretKeys!: pulumi.Output<boolean | undefined>;
    /**
     * (Updatable) Indicates if the user can use SMTP passwords.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly canUseSmtpCredentials!: pulumi.Output<boolean | undefined>;
    /**
     * The OCID of the user.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a UserCapabilitiesManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserCapabilitiesManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserCapabilitiesManagementArgs | UserCapabilitiesManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserCapabilitiesManagementState | undefined;
            resourceInputs["canUseApiKeys"] = state ? state.canUseApiKeys : undefined;
            resourceInputs["canUseAuthTokens"] = state ? state.canUseAuthTokens : undefined;
            resourceInputs["canUseConsolePassword"] = state ? state.canUseConsolePassword : undefined;
            resourceInputs["canUseCustomerSecretKeys"] = state ? state.canUseCustomerSecretKeys : undefined;
            resourceInputs["canUseSmtpCredentials"] = state ? state.canUseSmtpCredentials : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as UserCapabilitiesManagementArgs | undefined;
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["canUseApiKeys"] = args ? args.canUseApiKeys : undefined;
            resourceInputs["canUseAuthTokens"] = args ? args.canUseAuthTokens : undefined;
            resourceInputs["canUseConsolePassword"] = args ? args.canUseConsolePassword : undefined;
            resourceInputs["canUseCustomerSecretKeys"] = args ? args.canUseCustomerSecretKeys : undefined;
            resourceInputs["canUseSmtpCredentials"] = args ? args.canUseSmtpCredentials : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserCapabilitiesManagement.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserCapabilitiesManagement resources.
 */
export interface UserCapabilitiesManagementState {
    /**
     * (Updatable) Indicates if the user can use API keys.
     */
    canUseApiKeys?: pulumi.Input<boolean>;
    /**
     * (Updatable) Indicates if the user can use SWIFT passwords / auth tokens.
     */
    canUseAuthTokens?: pulumi.Input<boolean>;
    /**
     * (Updatable) Indicates if the user can log in to the console.
     */
    canUseConsolePassword?: pulumi.Input<boolean>;
    /**
     * (Updatable) Indicates if the user can use SigV4 symmetric keys.
     */
    canUseCustomerSecretKeys?: pulumi.Input<boolean>;
    /**
     * (Updatable) Indicates if the user can use SMTP passwords.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    canUseSmtpCredentials?: pulumi.Input<boolean>;
    /**
     * The OCID of the user.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserCapabilitiesManagement resource.
 */
export interface UserCapabilitiesManagementArgs {
    /**
     * (Updatable) Indicates if the user can use API keys.
     */
    canUseApiKeys?: pulumi.Input<boolean>;
    /**
     * (Updatable) Indicates if the user can use SWIFT passwords / auth tokens.
     */
    canUseAuthTokens?: pulumi.Input<boolean>;
    /**
     * (Updatable) Indicates if the user can log in to the console.
     */
    canUseConsolePassword?: pulumi.Input<boolean>;
    /**
     * (Updatable) Indicates if the user can use SigV4 symmetric keys.
     */
    canUseCustomerSecretKeys?: pulumi.Input<boolean>;
    /**
     * (Updatable) Indicates if the user can use SMTP passwords.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    canUseSmtpCredentials?: pulumi.Input<boolean>;
    /**
     * The OCID of the user.
     */
    userId: pulumi.Input<string>;
}
