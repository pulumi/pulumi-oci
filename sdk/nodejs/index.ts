// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./provider";
import { Provider } from "./provider";


// Export sub-modules:
import * as adm from "./adm";
import * as aidocument from "./aidocument";
import * as ailanguage from "./ailanguage";
import * as aivision from "./aivision";
import * as analytics from "./analytics";
import * as announcementsservice from "./announcementsservice";
import * as apigateway from "./apigateway";
import * as apm from "./apm";
import * as apmconfig from "./apmconfig";
import * as apmsynthetics from "./apmsynthetics";
import * as apmtraces from "./apmtraces";
import * as appmgmtcontrol from "./appmgmtcontrol";
import * as artifacts from "./artifacts";
import * as audit from "./audit";
import * as autoscaling from "./autoscaling";
import * as bastion from "./bastion";
import * as bigdataservice from "./bigdataservice";
import * as blockchain from "./blockchain";
import * as budget from "./budget";
import * as capacitymanagement from "./capacitymanagement";
import * as certificatesmanagement from "./certificatesmanagement";
import * as cloudbridge from "./cloudbridge";
import * as cloudguard from "./cloudguard";
import * as cloudmigrations from "./cloudmigrations";
import * as clusterplacementgroups from "./clusterplacementgroups";
import * as computecloud from "./computecloud";
import * as computeinstanceagent from "./computeinstanceagent";
import * as config from "./config";
import * as containerengine from "./containerengine";
import * as containerinstances from "./containerinstances";
import * as core from "./core";
import * as database from "./database";
import * as databasemanagement from "./databasemanagement";
import * as databasemigration from "./databasemigration";
import * as databasetools from "./databasetools";
import * as datacatalog from "./datacatalog";
import * as dataflow from "./dataflow";
import * as dataintegration from "./dataintegration";
import * as datalabellingservice from "./datalabellingservice";
import * as datasafe from "./datasafe";
import * as datascience from "./datascience";
import * as dblm from "./dblm";
import * as delegateaccesscontrol from "./delegateaccesscontrol";
import * as demandsignal from "./demandsignal";
import * as desktops from "./desktops";
import * as devops from "./devops";
import * as disasterrecovery from "./disasterrecovery";
import * as dns from "./dns";
import * as email from "./email";
import * as events from "./events";
import * as filestorage from "./filestorage";
import * as fleetappsmanagement from "./fleetappsmanagement";
import * as fleetsoftwareupdate from "./fleetsoftwareupdate";
import * as functions from "./functions";
import * as fusionapps from "./fusionapps";
import * as generativeai from "./generativeai";
import * as genericartifactscontent from "./genericartifactscontent";
import * as globallydistributeddatabase from "./globallydistributeddatabase";
import * as goldengate from "./goldengate";
import * as healthchecks from "./healthchecks";
import * as identity from "./identity";
import * as identitydataplane from "./identitydataplane";
import * as integration from "./integration";
import * as jms from "./jms";
import * as kms from "./kms";
import * as licensemanager from "./licensemanager";
import * as limits from "./limits";
import * as loadbalancer from "./loadbalancer";
import * as loganalytics from "./loganalytics";
import * as logging from "./logging";
import * as lustre from "./lustre";
import * as managementagent from "./managementagent";
import * as managementdashboard from "./managementdashboard";
import * as marketplace from "./marketplace";
import * as mediaservices from "./mediaservices";
import * as meteringcomputation from "./meteringcomputation";
import * as monitoring from "./monitoring";
import * as mysql from "./mysql";
import * as networkfirewall from "./networkfirewall";
import * as networkloadbalancer from "./networkloadbalancer";
import * as nosql from "./nosql";
import * as objectstorage from "./objectstorage";
import * as oce from "./oce";
import * as oci from "./oci";
import * as ocvp from "./ocvp";
import * as oda from "./oda";
import * as onesubsription from "./onesubsription";
import * as ons from "./ons";
import * as opa from "./opa";
import * as opensearch from "./opensearch";
import * as operatoraccesscontrol from "./operatoraccesscontrol";
import * as opsi from "./opsi";
import * as optimizer from "./optimizer";
import * as osmanagementhub from "./osmanagementhub";
import * as ospgateway from "./ospgateway";
import * as osubbillingschedule from "./osubbillingschedule";
import * as osuborganizationsubscription from "./osuborganizationsubscription";
import * as osubsubscription from "./osubsubscription";
import * as osubusage from "./osubusage";
import * as psql from "./psql";
import * as queue from "./queue";
import * as recoverymod from "./recoverymod";
import * as redis from "./redis";
import * as resourcemanager from "./resourcemanager";
import * as resourcescheduler from "./resourcescheduler";
import * as sch from "./sch";
import * as secrets from "./secrets";
import * as securityattribute from "./securityattribute";
import * as servicecatalog from "./servicecatalog";
import * as servicemanagerproxy from "./servicemanagerproxy";
import * as stackmonitoring from "./stackmonitoring";
import * as streaming from "./streaming";
import * as tenantmanagercontrolplane from "./tenantmanagercontrolplane";
import * as types from "./types";
import * as usageproxy from "./usageproxy";
import * as vault from "./vault";
import * as vbs from "./vbs";
import * as visualbuilder from "./visualbuilder";
import * as vnmonitoring from "./vnmonitoring";
import * as vulnerabilityscanning from "./vulnerabilityscanning";
import * as waa from "./waa";
import * as waas from "./waas";
import * as waf from "./waf";
import * as zpr from "./zpr";

export {
    adm,
    aidocument,
    ailanguage,
    aivision,
    analytics,
    announcementsservice,
    apigateway,
    apm,
    apmconfig,
    apmsynthetics,
    apmtraces,
    appmgmtcontrol,
    artifacts,
    audit,
    autoscaling,
    bastion,
    bigdataservice,
    blockchain,
    budget,
    capacitymanagement,
    certificatesmanagement,
    cloudbridge,
    cloudguard,
    cloudmigrations,
    clusterplacementgroups,
    computecloud,
    computeinstanceagent,
    config,
    containerengine,
    containerinstances,
    core,
    database,
    databasemanagement,
    databasemigration,
    databasetools,
    datacatalog,
    dataflow,
    dataintegration,
    datalabellingservice,
    datasafe,
    datascience,
    dblm,
    delegateaccesscontrol,
    demandsignal,
    desktops,
    devops,
    disasterrecovery,
    dns,
    email,
    events,
    filestorage,
    fleetappsmanagement,
    fleetsoftwareupdate,
    functions,
    fusionapps,
    generativeai,
    genericartifactscontent,
    globallydistributeddatabase,
    goldengate,
    healthchecks,
    identity,
    identitydataplane,
    integration,
    jms,
    kms,
    licensemanager,
    limits,
    loadbalancer,
    loganalytics,
    logging,
    lustre,
    managementagent,
    managementdashboard,
    marketplace,
    mediaservices,
    meteringcomputation,
    monitoring,
    mysql,
    networkfirewall,
    networkloadbalancer,
    nosql,
    objectstorage,
    oce,
    oci,
    ocvp,
    oda,
    onesubsription,
    ons,
    opa,
    opensearch,
    operatoraccesscontrol,
    opsi,
    optimizer,
    osmanagementhub,
    ospgateway,
    osubbillingschedule,
    osuborganizationsubscription,
    osubsubscription,
    osubusage,
    psql,
    queue,
    recoverymod,
    redis,
    resourcemanager,
    resourcescheduler,
    sch,
    secrets,
    securityattribute,
    servicecatalog,
    servicemanagerproxy,
    stackmonitoring,
    streaming,
    tenantmanagercontrolplane,
    types,
    usageproxy,
    vault,
    vbs,
    visualbuilder,
    vnmonitoring,
    vulnerabilityscanning,
    waa,
    waas,
    waf,
    zpr,
};
pulumi.runtime.registerResourcePackage("oci", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:oci") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
