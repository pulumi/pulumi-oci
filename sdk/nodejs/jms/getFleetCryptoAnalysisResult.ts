// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Fleet Crypto Analysis Result resource in Oracle Cloud Infrastructure Jms service.
 *
 * Retrieve the metadata for the result of a Crypto event analysis.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testFleetCryptoAnalysisResult = oci.Jms.getFleetCryptoAnalysisResult({
 *     cryptoAnalysisResultId: fleetCryptoAnalysisResultId,
 *     fleetId: testFleet.id,
 * });
 * ```
 */
export function getFleetCryptoAnalysisResult(args: GetFleetCryptoAnalysisResultArgs, opts?: pulumi.InvokeOptions): Promise<GetFleetCryptoAnalysisResultResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Jms/getFleetCryptoAnalysisResult:getFleetCryptoAnalysisResult", {
        "cryptoAnalysisResultId": args.cryptoAnalysisResultId,
        "fleetId": args.fleetId,
    }, opts);
}

/**
 * A collection of arguments for invoking getFleetCryptoAnalysisResult.
 */
export interface GetFleetCryptoAnalysisResultArgs {
    /**
     * The OCID of the analysis result.
     */
    cryptoAnalysisResultId: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     */
    fleetId: string;
}

/**
 * A collection of values returned by getFleetCryptoAnalysisResult.
 */
export interface GetFleetCryptoAnalysisResultResult {
    /**
     * The result aggregation mode
     */
    readonly aggregationMode: string;
    /**
     * The Object Storage bucket name of this analysis result.
     */
    readonly bucket: string;
    readonly cryptoAnalysisResultId: string;
    /**
     * The Crypto Roadmap version used to perform the analysis.
     */
    readonly cryptoRoadmapVersion: string;
    /**
     * Total number of findings with the analysis.
     */
    readonly findingCount: number;
    /**
     * The fleet OCID.
     */
    readonly fleetId: string;
    /**
     * The hostname of the managed instance.
     */
    readonly hostName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The managed instance OCID.
     */
    readonly managedInstanceId: string;
    /**
     * The Object Storage namespace of this analysis result.
     */
    readonly namespace: string;
    /**
     * Total number of non-compliant findings with the analysis. A non-compliant finding means the application won't work properly with the changes introduced by the Crypto Roadmap version used by the analysis.
     */
    readonly nonCompliantFindingCount: number;
    /**
     * The Object Storage object name of this analysis result.
     */
    readonly object: string;
    /**
     * Total number of summarized events. Summarized events are deduplicated events of interest.
     */
    readonly summarizedEventCount: number;
    /**
     * The time the result is compiled.
     */
    readonly timeCreated: string;
    /**
     * The time the JFR recording has finished.
     */
    readonly timeFinished: string;
    /**
     * Time of the first event in the analysis.
     */
    readonly timeFirstEvent: string;
    /**
     * Time of the last event in the analysis.
     */
    readonly timeLastEvent: string;
    /**
     * The time the JFR recording has started.
     */
    readonly timeStarted: string;
    /**
     * Total number of events in the analysis.
     */
    readonly totalEventCount: number;
    /**
     * The OCID of the work request to start the analysis.
     */
    readonly workRequestId: string;
}
/**
 * This data source provides details about a specific Fleet Crypto Analysis Result resource in Oracle Cloud Infrastructure Jms service.
 *
 * Retrieve the metadata for the result of a Crypto event analysis.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testFleetCryptoAnalysisResult = oci.Jms.getFleetCryptoAnalysisResult({
 *     cryptoAnalysisResultId: fleetCryptoAnalysisResultId,
 *     fleetId: testFleet.id,
 * });
 * ```
 */
export function getFleetCryptoAnalysisResultOutput(args: GetFleetCryptoAnalysisResultOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetFleetCryptoAnalysisResultResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:Jms/getFleetCryptoAnalysisResult:getFleetCryptoAnalysisResult", {
        "cryptoAnalysisResultId": args.cryptoAnalysisResultId,
        "fleetId": args.fleetId,
    }, opts);
}

/**
 * A collection of arguments for invoking getFleetCryptoAnalysisResult.
 */
export interface GetFleetCryptoAnalysisResultOutputArgs {
    /**
     * The OCID of the analysis result.
     */
    cryptoAnalysisResultId: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     */
    fleetId: pulumi.Input<string>;
}
