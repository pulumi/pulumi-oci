// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Plugin Error Analytics in Oracle Cloud Infrastructure Jms service.
 *
 * Returns a high level summary of PluginErrors.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testPluginErrorAnalytics = oci.Jms.getPluginErrorAnalytics({
 *     compartmentId: compartmentId,
 *     compartmentIdInSubtree: pluginErrorAnalyticCompartmentIdInSubtree,
 * });
 * ```
 */
export function getPluginErrorAnalytics(args?: GetPluginErrorAnalyticsArgs, opts?: pulumi.InvokeOptions): Promise<GetPluginErrorAnalyticsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Jms/getPluginErrorAnalytics:getPluginErrorAnalytics", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getPluginErrorAnalytics.
 */
export interface GetPluginErrorAnalyticsArgs {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
     */
    compartmentId?: string;
    /**
     * Flag to determine whether the info should be gathered only in the compartment or in the compartment and its subcompartments.
     */
    compartmentIdInSubtree?: boolean;
    filters?: inputs.Jms.GetPluginErrorAnalyticsFilter[];
}

/**
 * A collection of values returned by getPluginErrorAnalytics.
 */
export interface GetPluginErrorAnalyticsResult {
    readonly compartmentId?: string;
    readonly compartmentIdInSubtree?: boolean;
    readonly filters?: outputs.Jms.GetPluginErrorAnalyticsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The list of plugin_error_aggregation_collection.
     */
    readonly pluginErrorAggregationCollections: outputs.Jms.GetPluginErrorAnalyticsPluginErrorAggregationCollection[];
}
/**
 * This data source provides the list of Plugin Error Analytics in Oracle Cloud Infrastructure Jms service.
 *
 * Returns a high level summary of PluginErrors.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testPluginErrorAnalytics = oci.Jms.getPluginErrorAnalytics({
 *     compartmentId: compartmentId,
 *     compartmentIdInSubtree: pluginErrorAnalyticCompartmentIdInSubtree,
 * });
 * ```
 */
export function getPluginErrorAnalyticsOutput(args?: GetPluginErrorAnalyticsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetPluginErrorAnalyticsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:Jms/getPluginErrorAnalytics:getPluginErrorAnalytics", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getPluginErrorAnalytics.
 */
export interface GetPluginErrorAnalyticsOutputArgs {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * Flag to determine whether the info should be gathered only in the compartment or in the compartment and its subcompartments.
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    filters?: pulumi.Input<pulumi.Input<inputs.Jms.GetPluginErrorAnalyticsFilterArgs>[]>;
}
