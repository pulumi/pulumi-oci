// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Task Schedule resource in Oracle Cloud Infrastructure Jms service.
 *
 * Create a task schedule using the information provided.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testTaskSchedule = new oci.jms.TaskSchedule("test_task_schedule", {
 *     executionRecurrences: taskScheduleExecutionRecurrences,
 *     fleetId: testFleet.id,
 *     taskDetails: {
 *         taskType: taskScheduleTaskDetailsTaskType,
 *         addInstallationSiteTaskRequest: {
 *             installationSites: [{
 *                 artifactContentType: taskScheduleTaskDetailsAddInstallationSiteTaskRequestInstallationSitesArtifactContentType,
 *                 forceInstall: taskScheduleTaskDetailsAddInstallationSiteTaskRequestInstallationSitesForceInstall,
 *                 headlessMode: taskScheduleTaskDetailsAddInstallationSiteTaskRequestInstallationSitesHeadlessMode,
 *                 installationPath: taskScheduleTaskDetailsAddInstallationSiteTaskRequestInstallationSitesInstallationPath,
 *                 managedInstanceId: testManagedInstance.id,
 *                 releaseVersion: taskScheduleTaskDetailsAddInstallationSiteTaskRequestInstallationSitesReleaseVersion,
 *             }],
 *             postInstallationActions: taskScheduleTaskDetailsAddInstallationSiteTaskRequestPostInstallationActions,
 *         },
 *         cryptoTaskRequest: {
 *             recordingDurationInMinutes: taskScheduleTaskDetailsCryptoTaskRequestRecordingDurationInMinutes,
 *             targets: [{
 *                 applicationInstallationKey: taskScheduleTaskDetailsCryptoTaskRequestTargetsApplicationInstallationKey,
 *                 applicationKey: taskScheduleTaskDetailsCryptoTaskRequestTargetsApplicationKey,
 *                 containerKey: taskScheduleTaskDetailsCryptoTaskRequestTargetsContainerKey,
 *                 jreKey: taskScheduleTaskDetailsCryptoTaskRequestTargetsJreKey,
 *                 managedInstanceId: testManagedInstance.id,
 *             }],
 *             waitingPeriodInMinutes: taskScheduleTaskDetailsCryptoTaskRequestWaitingPeriodInMinutes,
 *         },
 *         deployedApplicationMigrationTaskRequest: {
 *             targets: [{
 *                 deployedApplicationInstallationKey: taskScheduleTaskDetailsDeployedApplicationMigrationTaskRequestTargetsDeployedApplicationInstallationKey,
 *                 excludePackagePrefixes: taskScheduleTaskDetailsDeployedApplicationMigrationTaskRequestTargetsExcludePackagePrefixes,
 *                 includePackagePrefixes: taskScheduleTaskDetailsDeployedApplicationMigrationTaskRequestTargetsIncludePackagePrefixes,
 *                 managedInstanceId: testManagedInstance.id,
 *                 sourceJdkVersion: taskScheduleTaskDetailsDeployedApplicationMigrationTaskRequestTargetsSourceJdkVersion,
 *                 targetJdkVersion: taskScheduleTaskDetailsDeployedApplicationMigrationTaskRequestTargetsTargetJdkVersion,
 *             }],
 *         },
 *         javaMigrationTaskRequest: {
 *             targets: [{
 *                 applicationInstallationKey: taskScheduleTaskDetailsJavaMigrationTaskRequestTargetsApplicationInstallationKey,
 *                 excludePackagePrefixes: taskScheduleTaskDetailsJavaMigrationTaskRequestTargetsExcludePackagePrefixes,
 *                 includePackagePrefixes: taskScheduleTaskDetailsJavaMigrationTaskRequestTargetsIncludePackagePrefixes,
 *                 managedInstanceId: testManagedInstance.id,
 *                 sourceJdkVersion: taskScheduleTaskDetailsJavaMigrationTaskRequestTargetsSourceJdkVersion,
 *                 targetJdkVersion: taskScheduleTaskDetailsJavaMigrationTaskRequestTargetsTargetJdkVersion,
 *             }],
 *         },
 *         jfrTaskRequest: {
 *             jfcProfileName: testProfile.name,
 *             jfcV1: taskScheduleTaskDetailsJfrTaskRequestJfcV1,
 *             jfcV2: taskScheduleTaskDetailsJfrTaskRequestJfcV2,
 *             recordingDurationInMinutes: taskScheduleTaskDetailsJfrTaskRequestRecordingDurationInMinutes,
 *             recordingSizeInMb: taskScheduleTaskDetailsJfrTaskRequestRecordingSizeInMb,
 *             targets: [{
 *                 applicationInstallationKey: taskScheduleTaskDetailsJfrTaskRequestTargetsApplicationInstallationKey,
 *                 applicationKey: taskScheduleTaskDetailsJfrTaskRequestTargetsApplicationKey,
 *                 containerKey: taskScheduleTaskDetailsJfrTaskRequestTargetsContainerKey,
 *                 jreKey: taskScheduleTaskDetailsJfrTaskRequestTargetsJreKey,
 *                 managedInstanceId: testManagedInstance.id,
 *             }],
 *             waitingPeriodInMinutes: taskScheduleTaskDetailsJfrTaskRequestWaitingPeriodInMinutes,
 *         },
 *         performanceTuningTaskRequest: {
 *             recordingDurationInMinutes: taskScheduleTaskDetailsPerformanceTuningTaskRequestRecordingDurationInMinutes,
 *             targets: [{
 *                 applicationInstallationKey: taskScheduleTaskDetailsPerformanceTuningTaskRequestTargetsApplicationInstallationKey,
 *                 applicationKey: taskScheduleTaskDetailsPerformanceTuningTaskRequestTargetsApplicationKey,
 *                 containerKey: taskScheduleTaskDetailsPerformanceTuningTaskRequestTargetsContainerKey,
 *                 jreKey: taskScheduleTaskDetailsPerformanceTuningTaskRequestTargetsJreKey,
 *                 managedInstanceId: testManagedInstance.id,
 *             }],
 *             waitingPeriodInMinutes: taskScheduleTaskDetailsPerformanceTuningTaskRequestWaitingPeriodInMinutes,
 *         },
 *         removeInstallationSiteTaskRequest: {
 *             installationSites: [{
 *                 installationKey: taskScheduleTaskDetailsRemoveInstallationSiteTaskRequestInstallationSitesInstallationKey,
 *                 managedInstanceId: testManagedInstance.id,
 *             }],
 *         },
 *         scanJavaServerTaskRequest: {
 *             managedInstanceIds: taskScheduleTaskDetailsScanJavaServerTaskRequestManagedInstanceIds,
 *         },
 *         scanLibraryTaskRequest: {
 *             dynamicScanDurationInMinutes: taskScheduleTaskDetailsScanLibraryTaskRequestDynamicScanDurationInMinutes,
 *             isDynamicScan: taskScheduleTaskDetailsScanLibraryTaskRequestIsDynamicScan,
 *             managedInstanceIds: taskScheduleTaskDetailsScanLibraryTaskRequestManagedInstanceIds,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * TaskSchedules can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:Jms/taskSchedule:TaskSchedule test_task_schedule "id"
 * ```
 */
export class TaskSchedule extends pulumi.CustomResource {
    /**
     * Get an existing TaskSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TaskScheduleState, opts?: pulumi.CustomResourceOptions): TaskSchedule {
        return new TaskSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Jms/taskSchedule:TaskSchedule';

    /**
     * Returns true if the given object is an instance of TaskSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TaskSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TaskSchedule.__pulumiType;
    }

    /**
     * Name of the task creator.
     */
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    /**
     * (Updatable) Recurrence specification for the task schedule execution (formatted according to [RFC-5545](https://icalendar.org/RFC-Specifications/iCalendar-RFC-5545/)). To run daily for 10 occurrences starts on September 2, 2024 09:00 EDT, it should be 'DTSTART;TZID=America/New_York:20240902T090000 RRULE:FREQ=DAILY;COUNT=10'. To run every 3 hours from 9:00 AM to 5:00 PM on August 5, 2024 EDT, it should be 'DTSTART;TZID=America/New_York:20240805T090000 RRULE:FREQ=HOURLY;INTERVAL=3;UNTIL=20240805T170000Z'.
     */
    declare public readonly executionRecurrences: pulumi.Output<string>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     */
    declare public readonly fleetId: pulumi.Output<string>;
    /**
     * The name of the task schedule.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * All possible status of task schedule.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * (Updatable) The minimum details of a task.
     */
    declare public readonly taskDetails: pulumi.Output<outputs.Jms.TaskScheduleTaskDetails>;
    /**
     * The date and time the task schedule was created (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * The date and time the task schedule ran last (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     */
    declare public /*out*/ readonly timeLastRun: pulumi.Output<string>;
    /**
     * The date and time the task schedule was last updated (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     */
    declare public /*out*/ readonly timeLastUpdated: pulumi.Output<string>;
    /**
     * The date and time the task schedule will run next (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     */
    declare public /*out*/ readonly timeNextRun: pulumi.Output<string>;

    /**
     * Create a TaskSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TaskScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TaskScheduleArgs | TaskScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TaskScheduleState | undefined;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["executionRecurrences"] = state?.executionRecurrences;
            resourceInputs["fleetId"] = state?.fleetId;
            resourceInputs["name"] = state?.name;
            resourceInputs["state"] = state?.state;
            resourceInputs["taskDetails"] = state?.taskDetails;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeLastRun"] = state?.timeLastRun;
            resourceInputs["timeLastUpdated"] = state?.timeLastUpdated;
            resourceInputs["timeNextRun"] = state?.timeNextRun;
        } else {
            const args = argsOrState as TaskScheduleArgs | undefined;
            if (args?.executionRecurrences === undefined && !opts.urn) {
                throw new Error("Missing required property 'executionRecurrences'");
            }
            if (args?.fleetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'fleetId'");
            }
            if (args?.taskDetails === undefined && !opts.urn) {
                throw new Error("Missing required property 'taskDetails'");
            }
            resourceInputs["executionRecurrences"] = args?.executionRecurrences;
            resourceInputs["fleetId"] = args?.fleetId;
            resourceInputs["taskDetails"] = args?.taskDetails;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeLastRun"] = undefined /*out*/;
            resourceInputs["timeLastUpdated"] = undefined /*out*/;
            resourceInputs["timeNextRun"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TaskSchedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TaskSchedule resources.
 */
export interface TaskScheduleState {
    /**
     * Name of the task creator.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * (Updatable) Recurrence specification for the task schedule execution (formatted according to [RFC-5545](https://icalendar.org/RFC-Specifications/iCalendar-RFC-5545/)). To run daily for 10 occurrences starts on September 2, 2024 09:00 EDT, it should be 'DTSTART;TZID=America/New_York:20240902T090000 RRULE:FREQ=DAILY;COUNT=10'. To run every 3 hours from 9:00 AM to 5:00 PM on August 5, 2024 EDT, it should be 'DTSTART;TZID=America/New_York:20240805T090000 RRULE:FREQ=HOURLY;INTERVAL=3;UNTIL=20240805T170000Z'.
     */
    executionRecurrences?: pulumi.Input<string>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     */
    fleetId?: pulumi.Input<string>;
    /**
     * The name of the task schedule.
     */
    name?: pulumi.Input<string>;
    /**
     * All possible status of task schedule.
     */
    state?: pulumi.Input<string>;
    /**
     * (Updatable) The minimum details of a task.
     */
    taskDetails?: pulumi.Input<inputs.Jms.TaskScheduleTaskDetails>;
    /**
     * The date and time the task schedule was created (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The date and time the task schedule ran last (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     */
    timeLastRun?: pulumi.Input<string>;
    /**
     * The date and time the task schedule was last updated (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     */
    timeLastUpdated?: pulumi.Input<string>;
    /**
     * The date and time the task schedule will run next (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     */
    timeNextRun?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TaskSchedule resource.
 */
export interface TaskScheduleArgs {
    /**
     * (Updatable) Recurrence specification for the task schedule execution (formatted according to [RFC-5545](https://icalendar.org/RFC-Specifications/iCalendar-RFC-5545/)). To run daily for 10 occurrences starts on September 2, 2024 09:00 EDT, it should be 'DTSTART;TZID=America/New_York:20240902T090000 RRULE:FREQ=DAILY;COUNT=10'. To run every 3 hours from 9:00 AM to 5:00 PM on August 5, 2024 EDT, it should be 'DTSTART;TZID=America/New_York:20240805T090000 RRULE:FREQ=HOURLY;INTERVAL=3;UNTIL=20240805T170000Z'.
     */
    executionRecurrences: pulumi.Input<string>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
     */
    fleetId: pulumi.Input<string>;
    /**
     * (Updatable) The minimum details of a task.
     */
    taskDetails: pulumi.Input<inputs.Jms.TaskScheduleTaskDetails>;
}
