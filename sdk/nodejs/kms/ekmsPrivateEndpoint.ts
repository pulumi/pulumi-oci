// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Ekms Private Endpoint resource in Oracle Cloud Infrastructure Kms service.
 *
 * Create a new EKMS private endpoint used to connect to external key manager system
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testEkmsPrivateEndpoint = new oci.kms.EkmsPrivateEndpoint("test_ekms_private_endpoint", {
 *     caBundle: ekmsPrivateEndpointCaBundle,
 *     compartmentId: compartmentId,
 *     displayName: ekmsPrivateEndpointDisplayName,
 *     externalKeyManagerIp: ekmsPrivateEndpointExternalKeyManagerIp,
 *     subnetId: testSubnet.id,
 *     definedTags: {
 *         "foo-namespace.bar-key": "value",
 *     },
 *     freeformTags: {
 *         "bar-key": "value",
 *     },
 *     port: ekmsPrivateEndpointPort,
 * });
 * ```
 *
 * ## Import
 *
 * EkmsPrivateEndpoints can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:Kms/ekmsPrivateEndpoint:EkmsPrivateEndpoint test_ekms_private_endpoint "id"
 * ```
 */
export class EkmsPrivateEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing EkmsPrivateEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EkmsPrivateEndpointState, opts?: pulumi.CustomResourceOptions): EkmsPrivateEndpoint {
        return new EkmsPrivateEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Kms/ekmsPrivateEndpoint:EkmsPrivateEndpoint';

    /**
     * Returns true if the given object is an instance of EkmsPrivateEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EkmsPrivateEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EkmsPrivateEndpoint.__pulumiType;
    }

    /**
     * CABundle to validate TLS certificate of the external key manager system in PEM format
     */
    declare public readonly caBundle: pulumi.Output<string>;
    /**
     * Compartment identifier.
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
     */
    declare public readonly definedTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) Display name of the EKMS private endpoint resource being created.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * External private IP to connect to from this EKMS private endpoint
     */
    declare public readonly externalKeyManagerIp: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    declare public readonly freeformTags: pulumi.Output<{[key: string]: string}>;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in 'Failed' state.
     */
    declare public /*out*/ readonly lifecycleDetails: pulumi.Output<string>;
    /**
     * The port of the external key manager system
     */
    declare public readonly port: pulumi.Output<number>;
    /**
     * The IP address in the customer's VCN for the EKMS private endpoint. This is taken from subnet
     */
    declare public /*out*/ readonly privateEndpointIp: pulumi.Output<string>;
    /**
     * The current state of the EKMS private endpoint resource.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The OCID of subnet in which the EKMS private endpoint is to be created 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly subnetId: pulumi.Output<string>;
    /**
     * The time the EKMS private endpoint was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * The time the EKMS private endpoint was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;

    /**
     * Create a EkmsPrivateEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EkmsPrivateEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EkmsPrivateEndpointArgs | EkmsPrivateEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EkmsPrivateEndpointState | undefined;
            resourceInputs["caBundle"] = state?.caBundle;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["definedTags"] = state?.definedTags;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["externalKeyManagerIp"] = state?.externalKeyManagerIp;
            resourceInputs["freeformTags"] = state?.freeformTags;
            resourceInputs["lifecycleDetails"] = state?.lifecycleDetails;
            resourceInputs["port"] = state?.port;
            resourceInputs["privateEndpointIp"] = state?.privateEndpointIp;
            resourceInputs["state"] = state?.state;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
        } else {
            const args = argsOrState as EkmsPrivateEndpointArgs | undefined;
            if (args?.caBundle === undefined && !opts.urn) {
                throw new Error("Missing required property 'caBundle'");
            }
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.externalKeyManagerIp === undefined && !opts.urn) {
                throw new Error("Missing required property 'externalKeyManagerIp'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["caBundle"] = args?.caBundle;
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["definedTags"] = args?.definedTags;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["externalKeyManagerIp"] = args?.externalKeyManagerIp;
            resourceInputs["freeformTags"] = args?.freeformTags;
            resourceInputs["port"] = args?.port;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["privateEndpointIp"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EkmsPrivateEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EkmsPrivateEndpoint resources.
 */
export interface EkmsPrivateEndpointState {
    /**
     * CABundle to validate TLS certificate of the external key manager system in PEM format
     */
    caBundle?: pulumi.Input<string>;
    /**
     * Compartment identifier.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Display name of the EKMS private endpoint resource being created.
     */
    displayName?: pulumi.Input<string>;
    /**
     * External private IP to connect to from this EKMS private endpoint
     */
    externalKeyManagerIp?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in 'Failed' state.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * The port of the external key manager system
     */
    port?: pulumi.Input<number>;
    /**
     * The IP address in the customer's VCN for the EKMS private endpoint. This is taken from subnet
     */
    privateEndpointIp?: pulumi.Input<string>;
    /**
     * The current state of the EKMS private endpoint resource.
     */
    state?: pulumi.Input<string>;
    /**
     * The OCID of subnet in which the EKMS private endpoint is to be created 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The time the EKMS private endpoint was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time the EKMS private endpoint was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     */
    timeUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EkmsPrivateEndpoint resource.
 */
export interface EkmsPrivateEndpointArgs {
    /**
     * CABundle to validate TLS certificate of the external key manager system in PEM format
     */
    caBundle: pulumi.Input<string>;
    /**
     * Compartment identifier.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Display name of the EKMS private endpoint resource being created.
     */
    displayName: pulumi.Input<string>;
    /**
     * External private IP to connect to from this EKMS private endpoint
     */
    externalKeyManagerIp: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The port of the external key manager system
     */
    port?: pulumi.Input<number>;
    /**
     * The OCID of subnet in which the EKMS private endpoint is to be created 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    subnetId: pulumi.Input<string>;
}
