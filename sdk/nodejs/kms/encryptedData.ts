// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Encrypted Data resource in Oracle Cloud Infrastructure Kms service.
 *
 * Encrypts data using the given [EncryptDataDetails](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/datatypes/EncryptDataDetails) resource.
 * Plaintext included in the example request is a base64-encoded value of a UTF-8 string.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testEncryptedData = new oci.kms.EncryptedData("test_encrypted_data", {
 *     cryptoEndpoint: encryptedDataCryptoEndpoint,
 *     keyId: testKey.id,
 *     plaintext: encryptedDataPlaintext,
 *     associatedData: encryptedDataAssociatedData,
 *     encryptionAlgorithm: encryptedDataEncryptionAlgorithm,
 *     keyVersionId: testKeyVersion.id,
 *     loggingContext: encryptedDataLoggingContext,
 * });
 * ```
 *
 * ## Import
 *
 * Import is not supported for this resource.
 */
export class EncryptedData extends pulumi.CustomResource {
    /**
     * Get an existing EncryptedData resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EncryptedDataState, opts?: pulumi.CustomResourceOptions): EncryptedData {
        return new EncryptedData(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Kms/encryptedData:EncryptedData';

    /**
     * Returns true if the given object is an instance of EncryptedData.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EncryptedData {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EncryptedData.__pulumiType;
    }

    /**
     * Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
     */
    declare public readonly associatedData: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The encrypted data.
     */
    declare public /*out*/ readonly ciphertext: pulumi.Output<string>;
    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
     */
    declare public readonly cryptoEndpoint: pulumi.Output<string>;
    /**
     * The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP). `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash and uses OAEP.
     */
    declare public readonly encryptionAlgorithm: pulumi.Output<string>;
    /**
     * The OCID of the key to encrypt with.
     */
    declare public readonly keyId: pulumi.Output<string>;
    /**
     * The OCID of the key version used to encrypt the ciphertext.
     */
    declare public readonly keyVersionId: pulumi.Output<string>;
    /**
     * Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
     */
    declare public readonly loggingContext: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The plaintext data to encrypt.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly plaintext: pulumi.Output<string>;

    /**
     * Create a EncryptedData resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EncryptedDataArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EncryptedDataArgs | EncryptedDataState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EncryptedDataState | undefined;
            resourceInputs["associatedData"] = state?.associatedData;
            resourceInputs["ciphertext"] = state?.ciphertext;
            resourceInputs["cryptoEndpoint"] = state?.cryptoEndpoint;
            resourceInputs["encryptionAlgorithm"] = state?.encryptionAlgorithm;
            resourceInputs["keyId"] = state?.keyId;
            resourceInputs["keyVersionId"] = state?.keyVersionId;
            resourceInputs["loggingContext"] = state?.loggingContext;
            resourceInputs["plaintext"] = state?.plaintext;
        } else {
            const args = argsOrState as EncryptedDataArgs | undefined;
            if (args?.cryptoEndpoint === undefined && !opts.urn) {
                throw new Error("Missing required property 'cryptoEndpoint'");
            }
            if (args?.keyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            if (args?.plaintext === undefined && !opts.urn) {
                throw new Error("Missing required property 'plaintext'");
            }
            resourceInputs["associatedData"] = args?.associatedData;
            resourceInputs["cryptoEndpoint"] = args?.cryptoEndpoint;
            resourceInputs["encryptionAlgorithm"] = args?.encryptionAlgorithm;
            resourceInputs["keyId"] = args?.keyId;
            resourceInputs["keyVersionId"] = args?.keyVersionId;
            resourceInputs["loggingContext"] = args?.loggingContext;
            resourceInputs["plaintext"] = args?.plaintext;
            resourceInputs["ciphertext"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EncryptedData.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EncryptedData resources.
 */
export interface EncryptedDataState {
    /**
     * Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
     */
    associatedData?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The encrypted data.
     */
    ciphertext?: pulumi.Input<string>;
    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
     */
    cryptoEndpoint?: pulumi.Input<string>;
    /**
     * The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP). `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash and uses OAEP.
     */
    encryptionAlgorithm?: pulumi.Input<string>;
    /**
     * The OCID of the key to encrypt with.
     */
    keyId?: pulumi.Input<string>;
    /**
     * The OCID of the key version used to encrypt the ciphertext.
     */
    keyVersionId?: pulumi.Input<string>;
    /**
     * Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
     */
    loggingContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The plaintext data to encrypt.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    plaintext?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EncryptedData resource.
 */
export interface EncryptedDataArgs {
    /**
     * Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
     */
    associatedData?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
     */
    cryptoEndpoint: pulumi.Input<string>;
    /**
     * The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP). `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash and uses OAEP.
     */
    encryptionAlgorithm?: pulumi.Input<string>;
    /**
     * The OCID of the key to encrypt with.
     */
    keyId: pulumi.Input<string>;
    /**
     * The OCID of the key version used to encrypt the ciphertext.
     */
    keyVersionId?: pulumi.Input<string>;
    /**
     * Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
     */
    loggingContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The plaintext data to encrypt.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    plaintext: pulumi.Input<string>;
}
