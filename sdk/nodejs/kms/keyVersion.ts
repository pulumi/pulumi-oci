// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Key Version resource in Oracle Cloud Infrastructure Kms service.
 *
 * Generates a new [KeyVersion](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/KeyVersion/) resource that provides new cryptographic
 * material for a master encryption key. The key must be in an `ENABLED` state to be rotated.
 *
 * As a management operation, this call is subject to a Key Management limit that applies to the total number
 * of requests across all  management write operations. Key Management might throttle this call to reject an
 * otherwise valid request when the total rate of management write operations exceeds 10 requests per second
 * for a given tenancy.
 *
 * ## Import
 *
 * KeyVersions can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:Kms/keyVersion:KeyVersion test_key_version "managementEndpoint/{managementEndpoint}/keys/{keyId}/keyVersions/{keyVersionId}"
 * ```
 */
export class KeyVersion extends pulumi.CustomResource {
    /**
     * Get an existing KeyVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyVersionState, opts?: pulumi.CustomResourceOptions): KeyVersion {
        return new KeyVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Kms/keyVersion:KeyVersion';

    /**
     * Returns true if the given object is an instance of KeyVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyVersion.__pulumiType;
    }

    /**
     * The OCID of the compartment that contains this key version.
     */
    declare public /*out*/ readonly compartmentId: pulumi.Output<string>;
    /**
     * Key reference data to be returned to the customer as a response.
     */
    declare public /*out*/ readonly externalKeyReferenceDetails: pulumi.Output<outputs.Kms.KeyVersionExternalKeyReferenceDetail[]>;
    /**
     * Key version ID associated with the external key.
     */
    declare public readonly externalKeyVersionId: pulumi.Output<string>;
    /**
     * An optional property indicating whether this keyversion is generated from auto rotatation.
     */
    declare public /*out*/ readonly isAutoRotated: pulumi.Output<boolean>;
    /**
     * A Boolean value that indicates whether the KeyVersion belongs to primary Vault or replica Vault.
     */
    declare public /*out*/ readonly isPrimary: pulumi.Output<boolean>;
    /**
     * The OCID of the key.
     */
    declare public readonly keyId: pulumi.Output<string>;
    declare public /*out*/ readonly keyVersionId: pulumi.Output<string>;
    /**
     * The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
     */
    declare public readonly managementEndpoint: pulumi.Output<string>;
    /**
     * The public key in PEM format. (This value pertains only to RSA and ECDSA keys.)
     */
    declare public /*out*/ readonly publicKey: pulumi.Output<string>;
    /**
     * KeyVersion replica details
     */
    declare public /*out*/ readonly replicaDetails: pulumi.Output<outputs.Kms.KeyVersionReplicaDetail[]>;
    declare public /*out*/ readonly restoredFromKeyId: pulumi.Output<string>;
    /**
     * The OCID of the key version from which this key version was restored.
     */
    declare public /*out*/ readonly restoredFromKeyVersionId: pulumi.Output<string>;
    /**
     * The key version's current lifecycle state.  Example: `ENABLED`
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The date and time this key version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: "2018-04-03T21:10:29.600Z"
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * (Updatable) An optional property for the deletion time of the key version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly timeOfDeletion: pulumi.Output<string>;
    /**
     * The OCID of the vault that contains this key version.
     */
    declare public /*out*/ readonly vaultId: pulumi.Output<string>;

    /**
     * Create a KeyVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyVersionArgs | KeyVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyVersionState | undefined;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["externalKeyReferenceDetails"] = state?.externalKeyReferenceDetails;
            resourceInputs["externalKeyVersionId"] = state?.externalKeyVersionId;
            resourceInputs["isAutoRotated"] = state?.isAutoRotated;
            resourceInputs["isPrimary"] = state?.isPrimary;
            resourceInputs["keyId"] = state?.keyId;
            resourceInputs["keyVersionId"] = state?.keyVersionId;
            resourceInputs["managementEndpoint"] = state?.managementEndpoint;
            resourceInputs["publicKey"] = state?.publicKey;
            resourceInputs["replicaDetails"] = state?.replicaDetails;
            resourceInputs["restoredFromKeyId"] = state?.restoredFromKeyId;
            resourceInputs["restoredFromKeyVersionId"] = state?.restoredFromKeyVersionId;
            resourceInputs["state"] = state?.state;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeOfDeletion"] = state?.timeOfDeletion;
            resourceInputs["vaultId"] = state?.vaultId;
        } else {
            const args = argsOrState as KeyVersionArgs | undefined;
            if (args?.keyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            if (args?.managementEndpoint === undefined && !opts.urn) {
                throw new Error("Missing required property 'managementEndpoint'");
            }
            resourceInputs["externalKeyVersionId"] = args?.externalKeyVersionId;
            resourceInputs["keyId"] = args?.keyId;
            resourceInputs["managementEndpoint"] = args?.managementEndpoint;
            resourceInputs["timeOfDeletion"] = args?.timeOfDeletion;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["externalKeyReferenceDetails"] = undefined /*out*/;
            resourceInputs["isAutoRotated"] = undefined /*out*/;
            resourceInputs["isPrimary"] = undefined /*out*/;
            resourceInputs["keyVersionId"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
            resourceInputs["replicaDetails"] = undefined /*out*/;
            resourceInputs["restoredFromKeyId"] = undefined /*out*/;
            resourceInputs["restoredFromKeyVersionId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["vaultId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyVersion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KeyVersion resources.
 */
export interface KeyVersionState {
    /**
     * The OCID of the compartment that contains this key version.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * Key reference data to be returned to the customer as a response.
     */
    externalKeyReferenceDetails?: pulumi.Input<pulumi.Input<inputs.Kms.KeyVersionExternalKeyReferenceDetail>[]>;
    /**
     * Key version ID associated with the external key.
     */
    externalKeyVersionId?: pulumi.Input<string>;
    /**
     * An optional property indicating whether this keyversion is generated from auto rotatation.
     */
    isAutoRotated?: pulumi.Input<boolean>;
    /**
     * A Boolean value that indicates whether the KeyVersion belongs to primary Vault or replica Vault.
     */
    isPrimary?: pulumi.Input<boolean>;
    /**
     * The OCID of the key.
     */
    keyId?: pulumi.Input<string>;
    keyVersionId?: pulumi.Input<string>;
    /**
     * The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
     */
    managementEndpoint?: pulumi.Input<string>;
    /**
     * The public key in PEM format. (This value pertains only to RSA and ECDSA keys.)
     */
    publicKey?: pulumi.Input<string>;
    /**
     * KeyVersion replica details
     */
    replicaDetails?: pulumi.Input<pulumi.Input<inputs.Kms.KeyVersionReplicaDetail>[]>;
    restoredFromKeyId?: pulumi.Input<string>;
    /**
     * The OCID of the key version from which this key version was restored.
     */
    restoredFromKeyVersionId?: pulumi.Input<string>;
    /**
     * The key version's current lifecycle state.  Example: `ENABLED`
     */
    state?: pulumi.Input<string>;
    /**
     * The date and time this key version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: "2018-04-03T21:10:29.600Z"
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * (Updatable) An optional property for the deletion time of the key version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    timeOfDeletion?: pulumi.Input<string>;
    /**
     * The OCID of the vault that contains this key version.
     */
    vaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeyVersion resource.
 */
export interface KeyVersionArgs {
    /**
     * Key version ID associated with the external key.
     */
    externalKeyVersionId?: pulumi.Input<string>;
    /**
     * The OCID of the key.
     */
    keyId: pulumi.Input<string>;
    /**
     * The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
     */
    managementEndpoint: pulumi.Input<string>;
    /**
     * (Updatable) An optional property for the deletion time of the key version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    timeOfDeletion?: pulumi.Input<string>;
}
