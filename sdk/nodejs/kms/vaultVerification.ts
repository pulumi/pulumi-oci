// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This source triggers action to create, update and delete replica for a vault in Oracle Cloud Infrastructure Kms service.
 *
 * A vault replica is a mirror of that vault in a different region in the same realm.
 * The vault replica and all the resources have same OCID with corresponding original ones.
 *
 * This only supports virtual private vault for now.
 * This supports only one replica in a region for a vault. Multiple replica will be supported in the future.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testReplication = new oci.kms.VaultVerification("testReplication", {
 *     vaultId: oci_kms_vault.test_vault.id,
 *     replicaRegion: _var.replica_region,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class VaultVerification extends pulumi.CustomResource {
    /**
     * Get an existing VaultVerification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VaultVerificationState, opts?: pulumi.CustomResourceOptions): VaultVerification {
        return new VaultVerification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Kms/vaultVerification:VaultVerification';

    /**
     * Returns true if the given object is an instance of VaultVerification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VaultVerification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VaultVerification.__pulumiType;
    }

    /**
     * (Updatable) The region to be created replica to. When updated,
     * replica will be deleted from old region, and created to updated region.
     */
    public readonly replicaRegion!: pulumi.Output<string>;
    /**
     * The OCID of the primary vault to create replica from.
     */
    public readonly vaultId!: pulumi.Output<string>;

    /**
     * Create a VaultVerification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VaultVerificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VaultVerificationArgs | VaultVerificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VaultVerificationState | undefined;
            resourceInputs["replicaRegion"] = state ? state.replicaRegion : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
        } else {
            const args = argsOrState as VaultVerificationArgs | undefined;
            if ((!args || args.replicaRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicaRegion'");
            }
            if ((!args || args.vaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultId'");
            }
            resourceInputs["replicaRegion"] = args ? args.replicaRegion : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VaultVerification.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VaultVerification resources.
 */
export interface VaultVerificationState {
    /**
     * (Updatable) The region to be created replica to. When updated,
     * replica will be deleted from old region, and created to updated region.
     */
    replicaRegion?: pulumi.Input<string>;
    /**
     * The OCID of the primary vault to create replica from.
     */
    vaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VaultVerification resource.
 */
export interface VaultVerificationArgs {
    /**
     * (Updatable) The region to be created replica to. When updated,
     * replica will be deleted from old region, and created to updated region.
     */
    replicaRegion: pulumi.Input<string>;
    /**
     * The OCID of the primary vault to create replica from.
     */
    vaultId: pulumi.Input<string>;
}
