// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Verify resource in Oracle Cloud Infrastructure Kms service.
 *
 * Verifies a digital signature that was generated by the [Sign](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/SignedData/Sign) operation
 * by using the public key of the same asymmetric key that was used to sign the data. If you want to validate the
 * digital signature outside of the service, you can do so by using the public key of the asymmetric key.
 * This operation is not supported for keys having protection mode `EXTERNAL`.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testVerify = new oci.kms.Verify("testVerify", {
 *     cryptoEndpoint: _var.verify_message_crypto_endpoint,
 *     keyId: oci_kms_key.test_key.id,
 *     keyVersionId: oci_kms_key_version.test_key_version.id,
 *     message: _var.verify_message,
 *     signature: _var.verify_signature,
 *     signingAlgorithm: _var.verify_signing_algorithm,
 *     messageType: _var.verify_message_type,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Verify can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:Kms/verify:Verify test_verify "id"
 * ```
 */
export class Verify extends pulumi.CustomResource {
    /**
     * Get an existing Verify resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VerifyState, opts?: pulumi.CustomResourceOptions): Verify {
        return new Verify(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Kms/verify:Verify';

    /**
     * Returns true if the given object is an instance of Verify.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Verify {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Verify.__pulumiType;
    }

    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,', 'GenerateDataEncryptionKey', 'Sign' and 'Verify' operations. see Vault Crypto endpoint.
     */
    public readonly cryptoEndpoint!: pulumi.Output<string>;
    /**
     * A Boolean value that indicates whether the signature was verified.
     */
    public /*out*/ readonly isSignatureValid!: pulumi.Output<boolean>;
    /**
     * The OCID of the key used to sign the message.
     */
    public readonly keyId!: pulumi.Output<string>;
    /**
     * The OCID of the key version used to sign the message.
     */
    public readonly keyVersionId!: pulumi.Output<string>;
    /**
     * The base64-encoded binary data object denoting the message or message digest to sign. You can have a message up to 4096 bytes in size. To sign a larger message, provide the message digest.
     */
    public readonly message!: pulumi.Output<string>;
    /**
     * Denotes whether the value of the message parameter is a raw message or a message digest. The default value, `RAW`, indicates a message. To indicate a message digest, use `DIGEST`.
     */
    public readonly messageType!: pulumi.Output<string>;
    /**
     * The base64-encoded binary data object denoting the cryptographic signature generated for the message.
     */
    public readonly signature!: pulumi.Output<string>;
    /**
     * The algorithm to use to sign the message or message digest. For RSA keys, supported signature schemes include PKCS #1 and RSASSA-PSS, along with different hashing algorithms. For ECDSA keys, ECDSA is the supported signature scheme with different hashing algorithms. When you pass a message digest for signing, ensure that you specify the same hashing algorithm as used when creating the message digest. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly signingAlgorithm!: pulumi.Output<string>;

    /**
     * Create a Verify resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VerifyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VerifyArgs | VerifyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VerifyState | undefined;
            resourceInputs["cryptoEndpoint"] = state ? state.cryptoEndpoint : undefined;
            resourceInputs["isSignatureValid"] = state ? state.isSignatureValid : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyVersionId"] = state ? state.keyVersionId : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["messageType"] = state ? state.messageType : undefined;
            resourceInputs["signature"] = state ? state.signature : undefined;
            resourceInputs["signingAlgorithm"] = state ? state.signingAlgorithm : undefined;
        } else {
            const args = argsOrState as VerifyArgs | undefined;
            if ((!args || args.cryptoEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cryptoEndpoint'");
            }
            if ((!args || args.keyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            if ((!args || args.keyVersionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVersionId'");
            }
            if ((!args || args.message === undefined) && !opts.urn) {
                throw new Error("Missing required property 'message'");
            }
            if ((!args || args.signature === undefined) && !opts.urn) {
                throw new Error("Missing required property 'signature'");
            }
            if ((!args || args.signingAlgorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'signingAlgorithm'");
            }
            resourceInputs["cryptoEndpoint"] = args ? args.cryptoEndpoint : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["keyVersionId"] = args ? args.keyVersionId : undefined;
            resourceInputs["message"] = args ? args.message : undefined;
            resourceInputs["messageType"] = args ? args.messageType : undefined;
            resourceInputs["signature"] = args ? args.signature : undefined;
            resourceInputs["signingAlgorithm"] = args ? args.signingAlgorithm : undefined;
            resourceInputs["isSignatureValid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Verify.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Verify resources.
 */
export interface VerifyState {
    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,', 'GenerateDataEncryptionKey', 'Sign' and 'Verify' operations. see Vault Crypto endpoint.
     */
    cryptoEndpoint?: pulumi.Input<string>;
    /**
     * A Boolean value that indicates whether the signature was verified.
     */
    isSignatureValid?: pulumi.Input<boolean>;
    /**
     * The OCID of the key used to sign the message.
     */
    keyId?: pulumi.Input<string>;
    /**
     * The OCID of the key version used to sign the message.
     */
    keyVersionId?: pulumi.Input<string>;
    /**
     * The base64-encoded binary data object denoting the message or message digest to sign. You can have a message up to 4096 bytes in size. To sign a larger message, provide the message digest.
     */
    message?: pulumi.Input<string>;
    /**
     * Denotes whether the value of the message parameter is a raw message or a message digest. The default value, `RAW`, indicates a message. To indicate a message digest, use `DIGEST`.
     */
    messageType?: pulumi.Input<string>;
    /**
     * The base64-encoded binary data object denoting the cryptographic signature generated for the message.
     */
    signature?: pulumi.Input<string>;
    /**
     * The algorithm to use to sign the message or message digest. For RSA keys, supported signature schemes include PKCS #1 and RSASSA-PSS, along with different hashing algorithms. For ECDSA keys, ECDSA is the supported signature scheme with different hashing algorithms. When you pass a message digest for signing, ensure that you specify the same hashing algorithm as used when creating the message digest. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    signingAlgorithm?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Verify resource.
 */
export interface VerifyArgs {
    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,', 'GenerateDataEncryptionKey', 'Sign' and 'Verify' operations. see Vault Crypto endpoint.
     */
    cryptoEndpoint: pulumi.Input<string>;
    /**
     * The OCID of the key used to sign the message.
     */
    keyId: pulumi.Input<string>;
    /**
     * The OCID of the key version used to sign the message.
     */
    keyVersionId: pulumi.Input<string>;
    /**
     * The base64-encoded binary data object denoting the message or message digest to sign. You can have a message up to 4096 bytes in size. To sign a larger message, provide the message digest.
     */
    message: pulumi.Input<string>;
    /**
     * Denotes whether the value of the message parameter is a raw message or a message digest. The default value, `RAW`, indicates a message. To indicate a message digest, use `DIGEST`.
     */
    messageType?: pulumi.Input<string>;
    /**
     * The base64-encoded binary data object denoting the cryptographic signature generated for the message.
     */
    signature: pulumi.Input<string>;
    /**
     * The algorithm to use to sign the message or message digest. For RSA keys, supported signature schemes include PKCS #1 and RSASSA-PSS, along with different hashing algorithms. For ECDSA keys, ECDSA is the supported signature scheme with different hashing algorithms. When you pass a message digest for signing, ensure that you specify the same hashing algorithm as used when creating the message digest. 
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    signingAlgorithm: pulumi.Input<string>;
}
