// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./backend";
export * from "./backendSet";
export * from "./certificate";
export * from "./getBackendHealth";
export * from "./getBackendSetHealth";
export * from "./getBackendSets";
export * from "./getBackends";
export * from "./getCertificates";
export * from "./getHealth";
export * from "./getHostnames";
export * from "./getListenerRules";
export * from "./getLoadBalancerRoutingPolicies";
export * from "./getLoadBalancerRoutingPolicy";
export * from "./getLoadBalancers";
export * from "./getPathRouteSets";
export * from "./getPolicies";
export * from "./getProtocols";
export * from "./getRuleSet";
export * from "./getRuleSets";
export * from "./getShapes";
export * from "./getSslCipherSuite";
export * from "./getSslCipherSuites";
export * from "./hostname";
export * from "./listener";
export * from "./loadBalancer";
export * from "./loadBalancerRoutingPolicy";
export * from "./pathRouteSet";
export * from "./ruleSet";
export * from "./sslCipherSuite";

// Import resources to register:
import { Backend } from "./backend";
import { BackendSet } from "./backendSet";
import { Certificate } from "./certificate";
import { Hostname } from "./hostname";
import { Listener } from "./listener";
import { LoadBalancer } from "./loadBalancer";
import { LoadBalancerRoutingPolicy } from "./loadBalancerRoutingPolicy";
import { PathRouteSet } from "./pathRouteSet";
import { RuleSet } from "./ruleSet";
import { SslCipherSuite } from "./sslCipherSuite";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:LoadBalancer/backend:Backend":
                return new Backend(name, <any>undefined, { urn })
            case "oci:LoadBalancer/backendSet:BackendSet":
                return new BackendSet(name, <any>undefined, { urn })
            case "oci:LoadBalancer/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "oci:LoadBalancer/hostname:Hostname":
                return new Hostname(name, <any>undefined, { urn })
            case "oci:LoadBalancer/listener:Listener":
                return new Listener(name, <any>undefined, { urn })
            case "oci:LoadBalancer/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "oci:LoadBalancer/loadBalancerRoutingPolicy:LoadBalancerRoutingPolicy":
                return new LoadBalancerRoutingPolicy(name, <any>undefined, { urn })
            case "oci:LoadBalancer/pathRouteSet:PathRouteSet":
                return new PathRouteSet(name, <any>undefined, { urn })
            case "oci:LoadBalancer/ruleSet:RuleSet":
                return new RuleSet(name, <any>undefined, { urn })
            case "oci:LoadBalancer/sslCipherSuite:SslCipherSuite":
                return new SslCipherSuite(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/backend", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/backendSet", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/certificate", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/hostname", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/listener", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/loadBalancer", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/loadBalancerRoutingPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/pathRouteSet", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/ruleSet", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/sslCipherSuite", _module)
