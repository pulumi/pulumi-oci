// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BackendArgs, BackendState } from "./backend";
export type Backend = import("./backend").Backend;
export const Backend: typeof import("./backend").Backend = null as any;
utilities.lazyLoad(exports, ["Backend"], () => require("./backend"));

export { BackendSetArgs, BackendSetState } from "./backendSet";
export type BackendSet = import("./backendSet").BackendSet;
export const BackendSet: typeof import("./backendSet").BackendSet = null as any;
utilities.lazyLoad(exports, ["BackendSet"], () => require("./backendSet"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { GetBackendHealthArgs, GetBackendHealthResult, GetBackendHealthOutputArgs } from "./getBackendHealth";
export const getBackendHealth: typeof import("./getBackendHealth").getBackendHealth = null as any;
export const getBackendHealthOutput: typeof import("./getBackendHealth").getBackendHealthOutput = null as any;
utilities.lazyLoad(exports, ["getBackendHealth","getBackendHealthOutput"], () => require("./getBackendHealth"));

export { GetBackendSetHealthArgs, GetBackendSetHealthResult, GetBackendSetHealthOutputArgs } from "./getBackendSetHealth";
export const getBackendSetHealth: typeof import("./getBackendSetHealth").getBackendSetHealth = null as any;
export const getBackendSetHealthOutput: typeof import("./getBackendSetHealth").getBackendSetHealthOutput = null as any;
utilities.lazyLoad(exports, ["getBackendSetHealth","getBackendSetHealthOutput"], () => require("./getBackendSetHealth"));

export { GetBackendSetsArgs, GetBackendSetsResult, GetBackendSetsOutputArgs } from "./getBackendSets";
export const getBackendSets: typeof import("./getBackendSets").getBackendSets = null as any;
export const getBackendSetsOutput: typeof import("./getBackendSets").getBackendSetsOutput = null as any;
utilities.lazyLoad(exports, ["getBackendSets","getBackendSetsOutput"], () => require("./getBackendSets"));

export { GetBackendsArgs, GetBackendsResult, GetBackendsOutputArgs } from "./getBackends";
export const getBackends: typeof import("./getBackends").getBackends = null as any;
export const getBackendsOutput: typeof import("./getBackends").getBackendsOutput = null as any;
utilities.lazyLoad(exports, ["getBackends","getBackendsOutput"], () => require("./getBackends"));

export { GetCertificatesArgs, GetCertificatesResult, GetCertificatesOutputArgs } from "./getCertificates";
export const getCertificates: typeof import("./getCertificates").getCertificates = null as any;
export const getCertificatesOutput: typeof import("./getCertificates").getCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getCertificates","getCertificatesOutput"], () => require("./getCertificates"));

export { GetHealthArgs, GetHealthResult, GetHealthOutputArgs } from "./getHealth";
export const getHealth: typeof import("./getHealth").getHealth = null as any;
export const getHealthOutput: typeof import("./getHealth").getHealthOutput = null as any;
utilities.lazyLoad(exports, ["getHealth","getHealthOutput"], () => require("./getHealth"));

export { GetHostnamesArgs, GetHostnamesResult, GetHostnamesOutputArgs } from "./getHostnames";
export const getHostnames: typeof import("./getHostnames").getHostnames = null as any;
export const getHostnamesOutput: typeof import("./getHostnames").getHostnamesOutput = null as any;
utilities.lazyLoad(exports, ["getHostnames","getHostnamesOutput"], () => require("./getHostnames"));

export { GetListenerRulesArgs, GetListenerRulesResult, GetListenerRulesOutputArgs } from "./getListenerRules";
export const getListenerRules: typeof import("./getListenerRules").getListenerRules = null as any;
export const getListenerRulesOutput: typeof import("./getListenerRules").getListenerRulesOutput = null as any;
utilities.lazyLoad(exports, ["getListenerRules","getListenerRulesOutput"], () => require("./getListenerRules"));

export { GetLoadBalancerRoutingPoliciesArgs, GetLoadBalancerRoutingPoliciesResult, GetLoadBalancerRoutingPoliciesOutputArgs } from "./getLoadBalancerRoutingPolicies";
export const getLoadBalancerRoutingPolicies: typeof import("./getLoadBalancerRoutingPolicies").getLoadBalancerRoutingPolicies = null as any;
export const getLoadBalancerRoutingPoliciesOutput: typeof import("./getLoadBalancerRoutingPolicies").getLoadBalancerRoutingPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerRoutingPolicies","getLoadBalancerRoutingPoliciesOutput"], () => require("./getLoadBalancerRoutingPolicies"));

export { GetLoadBalancerRoutingPolicyArgs, GetLoadBalancerRoutingPolicyResult, GetLoadBalancerRoutingPolicyOutputArgs } from "./getLoadBalancerRoutingPolicy";
export const getLoadBalancerRoutingPolicy: typeof import("./getLoadBalancerRoutingPolicy").getLoadBalancerRoutingPolicy = null as any;
export const getLoadBalancerRoutingPolicyOutput: typeof import("./getLoadBalancerRoutingPolicy").getLoadBalancerRoutingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerRoutingPolicy","getLoadBalancerRoutingPolicyOutput"], () => require("./getLoadBalancerRoutingPolicy"));

export { GetLoadBalancersArgs, GetLoadBalancersResult, GetLoadBalancersOutputArgs } from "./getLoadBalancers";
export const getLoadBalancers: typeof import("./getLoadBalancers").getLoadBalancers = null as any;
export const getLoadBalancersOutput: typeof import("./getLoadBalancers").getLoadBalancersOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancers","getLoadBalancersOutput"], () => require("./getLoadBalancers"));

export { GetPathRouteSetsArgs, GetPathRouteSetsResult, GetPathRouteSetsOutputArgs } from "./getPathRouteSets";
export const getPathRouteSets: typeof import("./getPathRouteSets").getPathRouteSets = null as any;
export const getPathRouteSetsOutput: typeof import("./getPathRouteSets").getPathRouteSetsOutput = null as any;
utilities.lazyLoad(exports, ["getPathRouteSets","getPathRouteSetsOutput"], () => require("./getPathRouteSets"));

export { GetPoliciesArgs, GetPoliciesResult, GetPoliciesOutputArgs } from "./getPolicies";
export const getPolicies: typeof import("./getPolicies").getPolicies = null as any;
export const getPoliciesOutput: typeof import("./getPolicies").getPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getPolicies","getPoliciesOutput"], () => require("./getPolicies"));

export { GetProtocolsArgs, GetProtocolsResult, GetProtocolsOutputArgs } from "./getProtocols";
export const getProtocols: typeof import("./getProtocols").getProtocols = null as any;
export const getProtocolsOutput: typeof import("./getProtocols").getProtocolsOutput = null as any;
utilities.lazyLoad(exports, ["getProtocols","getProtocolsOutput"], () => require("./getProtocols"));

export { GetRuleSetArgs, GetRuleSetResult, GetRuleSetOutputArgs } from "./getRuleSet";
export const getRuleSet: typeof import("./getRuleSet").getRuleSet = null as any;
export const getRuleSetOutput: typeof import("./getRuleSet").getRuleSetOutput = null as any;
utilities.lazyLoad(exports, ["getRuleSet","getRuleSetOutput"], () => require("./getRuleSet"));

export { GetRuleSetsArgs, GetRuleSetsResult, GetRuleSetsOutputArgs } from "./getRuleSets";
export const getRuleSets: typeof import("./getRuleSets").getRuleSets = null as any;
export const getRuleSetsOutput: typeof import("./getRuleSets").getRuleSetsOutput = null as any;
utilities.lazyLoad(exports, ["getRuleSets","getRuleSetsOutput"], () => require("./getRuleSets"));

export { GetShapesArgs, GetShapesResult, GetShapesOutputArgs } from "./getShapes";
export const getShapes: typeof import("./getShapes").getShapes = null as any;
export const getShapesOutput: typeof import("./getShapes").getShapesOutput = null as any;
utilities.lazyLoad(exports, ["getShapes","getShapesOutput"], () => require("./getShapes"));

export { GetSslCipherSuiteArgs, GetSslCipherSuiteResult, GetSslCipherSuiteOutputArgs } from "./getSslCipherSuite";
export const getSslCipherSuite: typeof import("./getSslCipherSuite").getSslCipherSuite = null as any;
export const getSslCipherSuiteOutput: typeof import("./getSslCipherSuite").getSslCipherSuiteOutput = null as any;
utilities.lazyLoad(exports, ["getSslCipherSuite","getSslCipherSuiteOutput"], () => require("./getSslCipherSuite"));

export { GetSslCipherSuitesArgs, GetSslCipherSuitesResult, GetSslCipherSuitesOutputArgs } from "./getSslCipherSuites";
export const getSslCipherSuites: typeof import("./getSslCipherSuites").getSslCipherSuites = null as any;
export const getSslCipherSuitesOutput: typeof import("./getSslCipherSuites").getSslCipherSuitesOutput = null as any;
utilities.lazyLoad(exports, ["getSslCipherSuites","getSslCipherSuitesOutput"], () => require("./getSslCipherSuites"));

export { HostnameArgs, HostnameState } from "./hostname";
export type Hostname = import("./hostname").Hostname;
export const Hostname: typeof import("./hostname").Hostname = null as any;
utilities.lazyLoad(exports, ["Hostname"], () => require("./hostname"));

export { ListenerArgs, ListenerState } from "./listener";
export type Listener = import("./listener").Listener;
export const Listener: typeof import("./listener").Listener = null as any;
utilities.lazyLoad(exports, ["Listener"], () => require("./listener"));

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { LoadBalancerRoutingPolicyArgs, LoadBalancerRoutingPolicyState } from "./loadBalancerRoutingPolicy";
export type LoadBalancerRoutingPolicy = import("./loadBalancerRoutingPolicy").LoadBalancerRoutingPolicy;
export const LoadBalancerRoutingPolicy: typeof import("./loadBalancerRoutingPolicy").LoadBalancerRoutingPolicy = null as any;
utilities.lazyLoad(exports, ["LoadBalancerRoutingPolicy"], () => require("./loadBalancerRoutingPolicy"));

export { PathRouteSetArgs, PathRouteSetState } from "./pathRouteSet";
export type PathRouteSet = import("./pathRouteSet").PathRouteSet;
export const PathRouteSet: typeof import("./pathRouteSet").PathRouteSet = null as any;
utilities.lazyLoad(exports, ["PathRouteSet"], () => require("./pathRouteSet"));

export { RuleSetArgs, RuleSetState } from "./ruleSet";
export type RuleSet = import("./ruleSet").RuleSet;
export const RuleSet: typeof import("./ruleSet").RuleSet = null as any;
utilities.lazyLoad(exports, ["RuleSet"], () => require("./ruleSet"));

export { SslCipherSuiteArgs, SslCipherSuiteState } from "./sslCipherSuite";
export type SslCipherSuite = import("./sslCipherSuite").SslCipherSuite;
export const SslCipherSuite: typeof import("./sslCipherSuite").SslCipherSuite = null as any;
utilities.lazyLoad(exports, ["SslCipherSuite"], () => require("./sslCipherSuite"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:LoadBalancer/backend:Backend":
                return new Backend(name, <any>undefined, { urn })
            case "oci:LoadBalancer/backendSet:BackendSet":
                return new BackendSet(name, <any>undefined, { urn })
            case "oci:LoadBalancer/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "oci:LoadBalancer/hostname:Hostname":
                return new Hostname(name, <any>undefined, { urn })
            case "oci:LoadBalancer/listener:Listener":
                return new Listener(name, <any>undefined, { urn })
            case "oci:LoadBalancer/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "oci:LoadBalancer/loadBalancerRoutingPolicy:LoadBalancerRoutingPolicy":
                return new LoadBalancerRoutingPolicy(name, <any>undefined, { urn })
            case "oci:LoadBalancer/pathRouteSet:PathRouteSet":
                return new PathRouteSet(name, <any>undefined, { urn })
            case "oci:LoadBalancer/ruleSet:RuleSet":
                return new RuleSet(name, <any>undefined, { urn })
            case "oci:LoadBalancer/sslCipherSuite:SslCipherSuite":
                return new SslCipherSuite(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/backend", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/backendSet", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/certificate", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/hostname", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/listener", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/loadBalancer", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/loadBalancerRoutingPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/pathRouteSet", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/ruleSet", _module)
pulumi.runtime.registerResourceModule("oci", "LoadBalancer/sslCipherSuite", _module)
