// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Log Analytics Entity Topology resource in Oracle Cloud Infrastructure Log Analytics service.
 *
 * Return a log analytics entity topology collection that contains a set of log analytics entities and a set of relationships between those, for the input source entity.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testLogAnalyticsEntityTopology = oci.LogAnalytics.getLogAnalyticsEntityTopology({
 *     logAnalyticsEntityId: testLogAnalyticsEntity.id,
 *     namespace: logAnalyticsEntityTopologyNamespace,
 *     context: logAnalyticsEntityTopologyContext,
 *     metadataEquals: logAnalyticsEntityTopologyMetadataEquals,
 *     state: logAnalyticsEntityTopologyState,
 * });
 * ```
 */
export function getLogAnalyticsEntityTopology(args: GetLogAnalyticsEntityTopologyArgs, opts?: pulumi.InvokeOptions): Promise<GetLogAnalyticsEntityTopologyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:LogAnalytics/getLogAnalyticsEntityTopology:getLogAnalyticsEntityTopology", {
        "context": args.context,
        "filters": args.filters,
        "logAnalyticsEntityId": args.logAnalyticsEntityId,
        "metadataEquals": args.metadataEquals,
        "namespace": args.namespace,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getLogAnalyticsEntityTopology.
 */
export interface GetLogAnalyticsEntityTopologyArgs {
    /**
     * A filter to return log analytics entity toplogy whose context matches the specified string.
     */
    context?: string;
    filters?: inputs.LogAnalytics.GetLogAnalyticsEntityTopologyFilter[];
    /**
     * The log analytics entity OCID.
     */
    logAnalyticsEntityId: string;
    /**
     * A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format "{name}:{value}:{type}".  All inputs are case-insensitive.
     */
    metadataEquals?: string[];
    /**
     * The Logging Analytics namespace used for the request.
     */
    namespace: string;
    /**
     * A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
     */
    state?: string;
}

/**
 * A collection of values returned by getLogAnalyticsEntityTopology.
 */
export interface GetLogAnalyticsEntityTopologyResult {
    readonly context?: string;
    readonly filters?: outputs.LogAnalytics.GetLogAnalyticsEntityTopologyFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * An array of entity metadata.
     */
    readonly items: outputs.LogAnalytics.GetLogAnalyticsEntityTopologyItem[];
    readonly logAnalyticsEntityId: string;
    readonly metadataEquals?: string[];
    readonly namespace: string;
    /**
     * The current state of the log analytics entity.
     */
    readonly state?: string;
}
/**
 * This data source provides details about a specific Log Analytics Entity Topology resource in Oracle Cloud Infrastructure Log Analytics service.
 *
 * Return a log analytics entity topology collection that contains a set of log analytics entities and a set of relationships between those, for the input source entity.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testLogAnalyticsEntityTopology = oci.LogAnalytics.getLogAnalyticsEntityTopology({
 *     logAnalyticsEntityId: testLogAnalyticsEntity.id,
 *     namespace: logAnalyticsEntityTopologyNamespace,
 *     context: logAnalyticsEntityTopologyContext,
 *     metadataEquals: logAnalyticsEntityTopologyMetadataEquals,
 *     state: logAnalyticsEntityTopologyState,
 * });
 * ```
 */
export function getLogAnalyticsEntityTopologyOutput(args: GetLogAnalyticsEntityTopologyOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetLogAnalyticsEntityTopologyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:LogAnalytics/getLogAnalyticsEntityTopology:getLogAnalyticsEntityTopology", {
        "context": args.context,
        "filters": args.filters,
        "logAnalyticsEntityId": args.logAnalyticsEntityId,
        "metadataEquals": args.metadataEquals,
        "namespace": args.namespace,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getLogAnalyticsEntityTopology.
 */
export interface GetLogAnalyticsEntityTopologyOutputArgs {
    /**
     * A filter to return log analytics entity toplogy whose context matches the specified string.
     */
    context?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.LogAnalytics.GetLogAnalyticsEntityTopologyFilterArgs>[]>;
    /**
     * The log analytics entity OCID.
     */
    logAnalyticsEntityId: pulumi.Input<string>;
    /**
     * A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format "{name}:{value}:{type}".  All inputs are case-insensitive.
     */
    metadataEquals?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Logging Analytics namespace used for the request.
     */
    namespace: pulumi.Input<string>;
    /**
     * A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
     */
    state?: pulumi.Input<string>;
}
