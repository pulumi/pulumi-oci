// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Log Analytics Entity Types in Oracle Cloud Infrastructure Log Analytics service.
 *
 * Return a list of log analytics entity types.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testLogAnalyticsEntityTypes = oci.LogAnalytics.getLogAnalyticsEntityTypes({
 *     namespace: logAnalyticsEntityTypeNamespace,
 *     cloudType: logAnalyticsEntityTypeCloudType,
 *     name: logAnalyticsEntityTypeName,
 *     nameContains: logAnalyticsEntityTypeNameContains,
 *     state: logAnalyticsEntityTypeState,
 * });
 * ```
 */
export function getLogAnalyticsEntityTypes(args: GetLogAnalyticsEntityTypesArgs, opts?: pulumi.InvokeOptions): Promise<GetLogAnalyticsEntityTypesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:LogAnalytics/getLogAnalyticsEntityTypes:getLogAnalyticsEntityTypes", {
        "cloudType": args.cloudType,
        "filters": args.filters,
        "name": args.name,
        "nameContains": args.nameContains,
        "namespace": args.namespace,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getLogAnalyticsEntityTypes.
 */
export interface GetLogAnalyticsEntityTypesArgs {
    /**
     * A filter to return CLOUD or NON_CLOUD entity types.
     */
    cloudType?: string;
    filters?: inputs.LogAnalytics.GetLogAnalyticsEntityTypesFilter[];
    /**
     * A filter to return only log analytics entity types whose name matches the entire name given. The match is case-insensitive.
     */
    name?: string;
    /**
     * A filter to return only log analytics entity types whose name or internalName contains name given. The match is case-insensitive.
     */
    nameContains?: string;
    /**
     * The Logging Analytics namespace used for the request.
     */
    namespace: string;
    /**
     * A filter to return only those log analytics entity types with the specified lifecycle state. The state value is case-insensitive.
     */
    state?: string;
}

/**
 * A collection of values returned by getLogAnalyticsEntityTypes.
 */
export interface GetLogAnalyticsEntityTypesResult {
    /**
     * Log analytics entity type group. This can be CLOUD (OCI) or NON_CLOUD otherwise.
     */
    readonly cloudType?: string;
    readonly filters?: outputs.LogAnalytics.GetLogAnalyticsEntityTypesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The list of log_analytics_entity_type_collection.
     */
    readonly logAnalyticsEntityTypeCollections: outputs.LogAnalytics.GetLogAnalyticsEntityTypesLogAnalyticsEntityTypeCollection[];
    /**
     * Log analytics entity type name.
     */
    readonly name?: string;
    readonly nameContains?: string;
    readonly namespace: string;
    /**
     * The current lifecycle state of the log analytics entity type.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Log Analytics Entity Types in Oracle Cloud Infrastructure Log Analytics service.
 *
 * Return a list of log analytics entity types.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testLogAnalyticsEntityTypes = oci.LogAnalytics.getLogAnalyticsEntityTypes({
 *     namespace: logAnalyticsEntityTypeNamespace,
 *     cloudType: logAnalyticsEntityTypeCloudType,
 *     name: logAnalyticsEntityTypeName,
 *     nameContains: logAnalyticsEntityTypeNameContains,
 *     state: logAnalyticsEntityTypeState,
 * });
 * ```
 */
export function getLogAnalyticsEntityTypesOutput(args: GetLogAnalyticsEntityTypesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetLogAnalyticsEntityTypesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:LogAnalytics/getLogAnalyticsEntityTypes:getLogAnalyticsEntityTypes", {
        "cloudType": args.cloudType,
        "filters": args.filters,
        "name": args.name,
        "nameContains": args.nameContains,
        "namespace": args.namespace,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getLogAnalyticsEntityTypes.
 */
export interface GetLogAnalyticsEntityTypesOutputArgs {
    /**
     * A filter to return CLOUD or NON_CLOUD entity types.
     */
    cloudType?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.LogAnalytics.GetLogAnalyticsEntityTypesFilterArgs>[]>;
    /**
     * A filter to return only log analytics entity types whose name matches the entire name given. The match is case-insensitive.
     */
    name?: pulumi.Input<string>;
    /**
     * A filter to return only log analytics entity types whose name or internalName contains name given. The match is case-insensitive.
     */
    nameContains?: pulumi.Input<string>;
    /**
     * The Logging Analytics namespace used for the request.
     */
    namespace: pulumi.Input<string>;
    /**
     * A filter to return only those log analytics entity types with the specified lifecycle state. The state value is case-insensitive.
     */
    state?: pulumi.Input<string>;
}
