// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Log Analytics Log Group resource in Oracle Cloud Infrastructure Log Analytics service.
 *
 * Gets detailed information about the specified log group such as display name, description, defined tags, and free-form tags.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testLogAnalyticsLogGroup = oci.LogAnalytics.getLogAnalyticsLogGroup({
 *     logAnalyticsLogGroupId: testLogAnalyticsLogGroupOciLogAnalyticsLogAnalyticsLogGroup.id,
 *     namespace: logAnalyticsLogGroupNamespace,
 * });
 * ```
 */
export function getLogAnalyticsLogGroup(args: GetLogAnalyticsLogGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetLogAnalyticsLogGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:LogAnalytics/getLogAnalyticsLogGroup:getLogAnalyticsLogGroup", {
        "logAnalyticsLogGroupId": args.logAnalyticsLogGroupId,
        "namespace": args.namespace,
    }, opts);
}

/**
 * A collection of arguments for invoking getLogAnalyticsLogGroup.
 */
export interface GetLogAnalyticsLogGroupArgs {
    /**
     * unique logAnalytics log group identifier
     */
    logAnalyticsLogGroupId: string;
    /**
     * The Logging Analytics namespace used for the request.
     */
    namespace: string;
}

/**
 * A collection of values returned by getLogAnalyticsLogGroup.
 */
export interface GetLogAnalyticsLogGroupResult {
    /**
     * Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    readonly compartmentId: string;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    readonly definedTags: {[key: string]: any};
    /**
     * Description for this resource.
     */
    readonly description: string;
    /**
     * A user-friendly name that is changeable and that does not have to be unique. Format: a leading alphanumeric, followed by zero or more alphanumerics, underscores, spaces, backslashes, or hyphens in any order). No trailing spaces allowed.
     */
    readonly displayName: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    readonly freeformTags: {[key: string]: any};
    /**
     * The log analytics entity OCID. This ID is a reference used by log analytics features and it represents a resource that is provisioned and managed by the customer on their premises or on the cloud.
     */
    readonly id: string;
    readonly logAnalyticsLogGroupId: string;
    readonly namespace: string;
    /**
     * The date and time the resource was created, in the format defined by RFC3339.
     */
    readonly timeCreated: string;
    /**
     * The date and time the resource was last updated, in the format defined by RFC3339.
     */
    readonly timeUpdated: string;
}
/**
 * This data source provides details about a specific Log Analytics Log Group resource in Oracle Cloud Infrastructure Log Analytics service.
 *
 * Gets detailed information about the specified log group such as display name, description, defined tags, and free-form tags.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testLogAnalyticsLogGroup = oci.LogAnalytics.getLogAnalyticsLogGroup({
 *     logAnalyticsLogGroupId: testLogAnalyticsLogGroupOciLogAnalyticsLogAnalyticsLogGroup.id,
 *     namespace: logAnalyticsLogGroupNamespace,
 * });
 * ```
 */
export function getLogAnalyticsLogGroupOutput(args: GetLogAnalyticsLogGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLogAnalyticsLogGroupResult> {
    return pulumi.output(args).apply((a: any) => getLogAnalyticsLogGroup(a, opts))
}

/**
 * A collection of arguments for invoking getLogAnalyticsLogGroup.
 */
export interface GetLogAnalyticsLogGroupOutputArgs {
    /**
     * unique logAnalytics log group identifier
     */
    logAnalyticsLogGroupId: pulumi.Input<string>;
    /**
     * The Logging Analytics namespace used for the request.
     */
    namespace: pulumi.Input<string>;
}
