// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Namespace Effective Properties in Oracle Cloud Infrastructure Log Analytics service.
 *
 * Returns a list of effective properties for the specified resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testNamespaceEffectiveProperties = oci.LogAnalytics.getNamespaceEffectiveProperties({
 *     namespace: namespaceEffectivePropertyNamespace,
 *     agentId: testAgent.id,
 *     entityId: testLogAnalyticsEntity.id,
 *     isIncludePatterns: namespaceEffectivePropertyIsIncludePatterns,
 *     name: namespaceEffectivePropertyName,
 *     patternId: testPattern.id,
 *     sourceName: namespaceEffectivePropertySourceName,
 * });
 * ```
 */
export function getNamespaceEffectiveProperties(args: GetNamespaceEffectivePropertiesArgs, opts?: pulumi.InvokeOptions): Promise<GetNamespaceEffectivePropertiesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:LogAnalytics/getNamespaceEffectiveProperties:getNamespaceEffectiveProperties", {
        "agentId": args.agentId,
        "entityId": args.entityId,
        "filters": args.filters,
        "isIncludePatterns": args.isIncludePatterns,
        "name": args.name,
        "namespace": args.namespace,
        "patternId": args.patternId,
        "sourceName": args.sourceName,
    }, opts);
}

/**
 * A collection of arguments for invoking getNamespaceEffectiveProperties.
 */
export interface GetNamespaceEffectivePropertiesArgs {
    /**
     * The agent ocid.
     */
    agentId?: string;
    /**
     * The entity ocid.
     */
    entityId?: string;
    filters?: inputs.LogAnalytics.GetNamespaceEffectivePropertiesFilter[];
    /**
     * The include pattern flag.
     */
    isIncludePatterns?: boolean;
    /**
     * The property name used for filtering.
     */
    name?: string;
    /**
     * The Logging Analytics namespace used for the request.
     */
    namespace: string;
    /**
     * The pattern id.
     */
    patternId?: number;
    /**
     * The source name.
     */
    sourceName?: string;
}

/**
 * A collection of values returned by getNamespaceEffectiveProperties.
 */
export interface GetNamespaceEffectivePropertiesResult {
    readonly agentId?: string;
    /**
     * The list of effective_property_collection.
     */
    readonly effectivePropertyCollections: outputs.LogAnalytics.GetNamespaceEffectivePropertiesEffectivePropertyCollection[];
    readonly entityId?: string;
    readonly filters?: outputs.LogAnalytics.GetNamespaceEffectivePropertiesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly isIncludePatterns?: boolean;
    /**
     * The property name.
     */
    readonly name?: string;
    readonly namespace: string;
    readonly patternId?: number;
    readonly sourceName?: string;
}
/**
 * This data source provides the list of Namespace Effective Properties in Oracle Cloud Infrastructure Log Analytics service.
 *
 * Returns a list of effective properties for the specified resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testNamespaceEffectiveProperties = oci.LogAnalytics.getNamespaceEffectiveProperties({
 *     namespace: namespaceEffectivePropertyNamespace,
 *     agentId: testAgent.id,
 *     entityId: testLogAnalyticsEntity.id,
 *     isIncludePatterns: namespaceEffectivePropertyIsIncludePatterns,
 *     name: namespaceEffectivePropertyName,
 *     patternId: testPattern.id,
 *     sourceName: namespaceEffectivePropertySourceName,
 * });
 * ```
 */
export function getNamespaceEffectivePropertiesOutput(args: GetNamespaceEffectivePropertiesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNamespaceEffectivePropertiesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:LogAnalytics/getNamespaceEffectiveProperties:getNamespaceEffectiveProperties", {
        "agentId": args.agentId,
        "entityId": args.entityId,
        "filters": args.filters,
        "isIncludePatterns": args.isIncludePatterns,
        "name": args.name,
        "namespace": args.namespace,
        "patternId": args.patternId,
        "sourceName": args.sourceName,
    }, opts);
}

/**
 * A collection of arguments for invoking getNamespaceEffectiveProperties.
 */
export interface GetNamespaceEffectivePropertiesOutputArgs {
    /**
     * The agent ocid.
     */
    agentId?: pulumi.Input<string>;
    /**
     * The entity ocid.
     */
    entityId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.LogAnalytics.GetNamespaceEffectivePropertiesFilterArgs>[]>;
    /**
     * The include pattern flag.
     */
    isIncludePatterns?: pulumi.Input<boolean>;
    /**
     * The property name used for filtering.
     */
    name?: pulumi.Input<string>;
    /**
     * The Logging Analytics namespace used for the request.
     */
    namespace: pulumi.Input<string>;
    /**
     * The pattern id.
     */
    patternId?: pulumi.Input<number>;
    /**
     * The source name.
     */
    sourceName?: pulumi.Input<string>;
}
