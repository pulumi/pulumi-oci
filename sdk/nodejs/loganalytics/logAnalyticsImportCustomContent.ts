// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Log Analytics Import Custom Content resource in Oracle Cloud Infrastructure Log Analytics service.
 *
 * Imports the specified custom content from the input in zip format.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testLogAnalyticsImportCustomContent = new oci.loganalytics.LogAnalyticsImportCustomContent("test_log_analytics_import_custom_content", {
 *     importCustomContentFile: logAnalyticsImportCustomContentImportCustomContentFile,
 *     namespace: logAnalyticsImportCustomContentNamespace,
 *     expect: logAnalyticsImportCustomContentExpect,
 *     isOverwrite: logAnalyticsImportCustomContentIsOverwrite,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Import is not supported for LogAnalyticsImportCustomContent
 */
export class LogAnalyticsImportCustomContent extends pulumi.CustomResource {
    /**
     * Get an existing LogAnalyticsImportCustomContent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogAnalyticsImportCustomContentState, opts?: pulumi.CustomResourceOptions): LogAnalyticsImportCustomContent {
        return new LogAnalyticsImportCustomContent(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:LogAnalytics/logAnalyticsImportCustomContent:LogAnalyticsImportCustomContent';

    /**
     * Returns true if the given object is an instance of LogAnalyticsImportCustomContent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogAnalyticsImportCustomContent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogAnalyticsImportCustomContent.__pulumiType;
    }

    /**
     * LogAnalyticsImportCustomChangeList
     */
    public /*out*/ readonly changeLists!: pulumi.Output<outputs.LogAnalytics.LogAnalyticsImportCustomContentChangeList[]>;
    /**
     * The content name.
     */
    public /*out*/ readonly contentName!: pulumi.Output<string>;
    /**
     * A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly expect!: pulumi.Output<string>;
    /**
     * The field names.
     */
    public /*out*/ readonly fieldNames!: pulumi.Output<string[]>;
    /**
     * Path to the file to upload which contains the custom content.
     */
    public readonly importCustomContentFile!: pulumi.Output<string>;
    /**
     * A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
     */
    public readonly isOverwrite!: pulumi.Output<boolean>;
    /**
     * The Logging Analytics namespace used for the request.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * The parser names.
     */
    public /*out*/ readonly parserNames!: pulumi.Output<string[]>;
    /**
     * The source names.
     */
    public /*out*/ readonly sourceNames!: pulumi.Output<string[]>;

    /**
     * Create a LogAnalyticsImportCustomContent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogAnalyticsImportCustomContentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogAnalyticsImportCustomContentArgs | LogAnalyticsImportCustomContentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogAnalyticsImportCustomContentState | undefined;
            resourceInputs["changeLists"] = state ? state.changeLists : undefined;
            resourceInputs["contentName"] = state ? state.contentName : undefined;
            resourceInputs["expect"] = state ? state.expect : undefined;
            resourceInputs["fieldNames"] = state ? state.fieldNames : undefined;
            resourceInputs["importCustomContentFile"] = state ? state.importCustomContentFile : undefined;
            resourceInputs["isOverwrite"] = state ? state.isOverwrite : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["parserNames"] = state ? state.parserNames : undefined;
            resourceInputs["sourceNames"] = state ? state.sourceNames : undefined;
        } else {
            const args = argsOrState as LogAnalyticsImportCustomContentArgs | undefined;
            if ((!args || args.importCustomContentFile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'importCustomContentFile'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["expect"] = args ? args.expect : undefined;
            resourceInputs["importCustomContentFile"] = args ? args.importCustomContentFile : undefined;
            resourceInputs["isOverwrite"] = args ? args.isOverwrite : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["changeLists"] = undefined /*out*/;
            resourceInputs["contentName"] = undefined /*out*/;
            resourceInputs["fieldNames"] = undefined /*out*/;
            resourceInputs["parserNames"] = undefined /*out*/;
            resourceInputs["sourceNames"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogAnalyticsImportCustomContent.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogAnalyticsImportCustomContent resources.
 */
export interface LogAnalyticsImportCustomContentState {
    /**
     * LogAnalyticsImportCustomChangeList
     */
    changeLists?: pulumi.Input<pulumi.Input<inputs.LogAnalytics.LogAnalyticsImportCustomContentChangeList>[]>;
    /**
     * The content name.
     */
    contentName?: pulumi.Input<string>;
    /**
     * A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    expect?: pulumi.Input<string>;
    /**
     * The field names.
     */
    fieldNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Path to the file to upload which contains the custom content.
     */
    importCustomContentFile?: pulumi.Input<string>;
    /**
     * A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
     */
    isOverwrite?: pulumi.Input<boolean>;
    /**
     * The Logging Analytics namespace used for the request.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The parser names.
     */
    parserNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The source names.
     */
    sourceNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a LogAnalyticsImportCustomContent resource.
 */
export interface LogAnalyticsImportCustomContentArgs {
    /**
     * A value of `100-continue` requests preliminary verification of the request method, path, and headers before the request body is sent. If no error results from such verification, the server will send a 100 (Continue) interim response to indicate readiness for the request body. The only allowed value for this parameter is "100-Continue" (case-insensitive).
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    expect?: pulumi.Input<string>;
    /**
     * Path to the file to upload which contains the custom content.
     */
    importCustomContentFile: pulumi.Input<string>;
    /**
     * A flag indicating whether or not to overwrite existing content if a conflict is found during import content operation.
     */
    isOverwrite?: pulumi.Input<boolean>;
    /**
     * The Logging Analytics namespace used for the request.
     */
    namespace: pulumi.Input<string>;
}
