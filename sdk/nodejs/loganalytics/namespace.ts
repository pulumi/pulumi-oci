// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Namespace resource in Oracle Cloud Infrastructure Log Analytics service.
 *
 * Onboards a tenancy with Log Analytics or Offboards a tenancy from Log Analytics functionality.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testNamespace = new oci.loganalytics.Namespace("test_namespace", {
 *     compartmentId: compartmentId,
 *     isOnboarded: isOnboarded,
 *     namespace: namespaceNamespace,
 * });
 * ```
 *
 * ## Import
 *
 * Namespace can be imported using the `compartment_id` and `namespace`, e.g.
 *
 * ```sh
 * $ pulumi import oci:LogAnalytics/namespace:Namespace test_namespace "compartmentId/{compartment_id}/namespace/{namespace}"
 * ```
 */
export class Namespace extends pulumi.CustomResource {
    /**
     * Get an existing Namespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamespaceState, opts?: pulumi.CustomResourceOptions): Namespace {
        return new Namespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:LogAnalytics/namespace:Namespace';

    /**
     * Returns true if the given object is an instance of Namespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Namespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Namespace.__pulumiType;
    }

    /**
     * The OCID of the root compartment i.e. OCID of the tenancy.
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * Use `true` if tenancy is to be onboarded to logging analytics and `false` if tenancy is to be offboarded
     */
    declare public readonly isOnboarded: pulumi.Output<boolean>;
    /**
     * The Log Analytics namespace used for the request.
     */
    declare public readonly namespace: pulumi.Output<string>;

    /**
     * Create a Namespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NamespaceArgs | NamespaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NamespaceState | undefined;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["isOnboarded"] = state?.isOnboarded;
            resourceInputs["namespace"] = state?.namespace;
        } else {
            const args = argsOrState as NamespaceArgs | undefined;
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.isOnboarded === undefined && !opts.urn) {
                throw new Error("Missing required property 'isOnboarded'");
            }
            if (args?.namespace === undefined && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["isOnboarded"] = args?.isOnboarded;
            resourceInputs["namespace"] = args?.namespace;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Namespace.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Namespace resources.
 */
export interface NamespaceState {
    /**
     * The OCID of the root compartment i.e. OCID of the tenancy.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * Use `true` if tenancy is to be onboarded to logging analytics and `false` if tenancy is to be offboarded
     */
    isOnboarded?: pulumi.Input<boolean>;
    /**
     * The Log Analytics namespace used for the request.
     */
    namespace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Namespace resource.
 */
export interface NamespaceArgs {
    /**
     * The OCID of the root compartment i.e. OCID of the tenancy.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * Use `true` if tenancy is to be onboarded to logging analytics and `false` if tenancy is to be offboarded
     */
    isOnboarded: pulumi.Input<boolean>;
    /**
     * The Log Analytics namespace used for the request.
     */
    namespace: pulumi.Input<string>;
}
