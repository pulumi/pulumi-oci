// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Namespace Lookup resource in Oracle Cloud Infrastructure Log Analytics service.
 *
 * Creates a lookup with the specified name, type and description. The csv file containing the lookup content is passed in as binary data in the request.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testNamespaceLookup = new oci.loganalytics.NamespaceLookup("test_namespace_lookup", {
 *     lookupName: namespaceLookupLookupName,
 *     namespace: namespaceLookupNamespace,
 *     registerLookupFile: namespaceLookupRegisterLookupFile,
 *     type: namespaceLookupType,
 *     categories: [{
 *         description: namespaceLookupCategoriesDescription,
 *         displayName: namespaceLookupCategoriesDisplayName,
 *         isSystem: namespaceLookupCategoriesIsSystem,
 *         name: namespaceLookupCategoriesName,
 *         type: namespaceLookupCategoriesType,
 *     }],
 *     charEncoding: namespaceLookupCharEncoding,
 *     compartmentId: namespaceLookupCompartmentId,
 *     defaultMatchValue: namespaceLookupDefaultMatchValue,
 *     definedTags: {
 *         "foo-namespace.bar-key": "value",
 *     },
 *     description: namespaceLookupDescription,
 *     fields: [{
 *         commonFieldName: namespaceLookupFieldsCommonFieldName,
 *         defaultMatchValue: namespaceLookupFieldsDefaultMatchValue,
 *         displayName: namespaceLookupFieldsDisplayName,
 *         isCommonField: namespaceLookupFieldsIsCommonField,
 *         matchOperator: namespaceLookupFieldsMatchOperator,
 *         name: namespaceLookupFieldsName,
 *         position: namespaceLookupFieldsPosition,
 *     }],
 *     freeformTags: {
 *         "bar-key": "value",
 *     },
 *     isHidden: namespaceLookupIsHidden,
 *     maxMatches: namespaceLookupMaxMatches,
 * });
 * ```
 *
 * ## Import
 *
 * NamespaceLookups can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:LogAnalytics/namespaceLookup:NamespaceLookup test_namespace_lookup "namespaces/{namespaceName}/lookups/{lookupName}"
 * ```
 */
export class NamespaceLookup extends pulumi.CustomResource {
    /**
     * Get an existing NamespaceLookup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamespaceLookupState, opts?: pulumi.CustomResourceOptions): NamespaceLookup {
        return new NamespaceLookup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:LogAnalytics/namespaceLookup:NamespaceLookup';

    /**
     * Returns true if the given object is an instance of NamespaceLookup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NamespaceLookup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NamespaceLookup.__pulumiType;
    }

    /**
     * The active edit version.
     */
    declare public /*out*/ readonly activeEditVersion: pulumi.Output<string>;
    /**
     * The canonical link.
     */
    declare public /*out*/ readonly canonicalLink: pulumi.Output<string>;
    /**
     * (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
     */
    declare public readonly categories: pulumi.Output<outputs.LogAnalytics.NamespaceLookupCategory[]>;
    /**
     * The character encoding of the uploaded file.
     */
    declare public readonly charEncoding: pulumi.Output<string | undefined>;
    /**
     * (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * (Updatable) The default match value.
     */
    declare public readonly defaultMatchValue: pulumi.Output<string | undefined>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    declare public readonly definedTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) The lookup description.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The edit version.
     */
    declare public /*out*/ readonly editVersion: pulumi.Output<string>;
    /**
     * (Updatable) The lookup fields.
     */
    declare public readonly fields: pulumi.Output<outputs.LogAnalytics.NamespaceLookupField[]>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    declare public readonly freeformTags: pulumi.Output<{[key: string]: string}>;
    /**
     * A flag indicating if the lookup is custom (user-defined) or built in.
     */
    declare public /*out*/ readonly isBuiltIn: pulumi.Output<string>;
    /**
     * A flag indicating whether or not the new lookup should be hidden.
     */
    declare public readonly isHidden: pulumi.Output<boolean>;
    /**
     * The lookup display name.
     */
    declare public /*out*/ readonly lookupDisplayName: pulumi.Output<string>;
    /**
     * The lookup OCID.
     */
    declare public /*out*/ readonly lookupId: pulumi.Output<string>;
    /**
     * The name of the lookup to operate on.
     */
    declare public readonly lookupName: pulumi.Output<string>;
    /**
     * The lookup reference as an integer.
     */
    declare public /*out*/ readonly lookupReference: pulumi.Output<string>;
    /**
     * The lookup reference as a string.
     */
    declare public /*out*/ readonly lookupReferenceString: pulumi.Output<string>;
    /**
     * (Updatable) The maximum number of matches.
     */
    declare public readonly maxMatches: pulumi.Output<string | undefined>;
    /**
     * The Logging Analytics namespace used for the request.
     */
    declare public readonly namespace: pulumi.Output<string>;
    /**
     * AutoLookups
     */
    declare public /*out*/ readonly referringSources: pulumi.Output<outputs.LogAnalytics.NamespaceLookupReferringSource[]>;
    /**
     * Path to the file containing data for lookup creation.
     */
    declare public readonly registerLookupFile: pulumi.Output<string>;
    /**
     * StatusSummary
     */
    declare public /*out*/ readonly statusSummaries: pulumi.Output<outputs.LogAnalytics.NamespaceLookupStatusSummary[]>;
    /**
     * The last updated date.
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;
    /**
     * The lookup type. Valid values are Lookup, Dictionary or Module.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a NamespaceLookup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamespaceLookupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NamespaceLookupArgs | NamespaceLookupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NamespaceLookupState | undefined;
            resourceInputs["activeEditVersion"] = state?.activeEditVersion;
            resourceInputs["canonicalLink"] = state?.canonicalLink;
            resourceInputs["categories"] = state?.categories;
            resourceInputs["charEncoding"] = state?.charEncoding;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["defaultMatchValue"] = state?.defaultMatchValue;
            resourceInputs["definedTags"] = state?.definedTags;
            resourceInputs["description"] = state?.description;
            resourceInputs["editVersion"] = state?.editVersion;
            resourceInputs["fields"] = state?.fields;
            resourceInputs["freeformTags"] = state?.freeformTags;
            resourceInputs["isBuiltIn"] = state?.isBuiltIn;
            resourceInputs["isHidden"] = state?.isHidden;
            resourceInputs["lookupDisplayName"] = state?.lookupDisplayName;
            resourceInputs["lookupId"] = state?.lookupId;
            resourceInputs["lookupName"] = state?.lookupName;
            resourceInputs["lookupReference"] = state?.lookupReference;
            resourceInputs["lookupReferenceString"] = state?.lookupReferenceString;
            resourceInputs["maxMatches"] = state?.maxMatches;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["referringSources"] = state?.referringSources;
            resourceInputs["registerLookupFile"] = state?.registerLookupFile;
            resourceInputs["statusSummaries"] = state?.statusSummaries;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as NamespaceLookupArgs | undefined;
            if (args?.lookupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'lookupName'");
            }
            if (args?.namespace === undefined && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if (args?.registerLookupFile === undefined && !opts.urn) {
                throw new Error("Missing required property 'registerLookupFile'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["categories"] = args?.categories;
            resourceInputs["charEncoding"] = args?.charEncoding;
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["defaultMatchValue"] = args?.defaultMatchValue;
            resourceInputs["definedTags"] = args?.definedTags;
            resourceInputs["description"] = args?.description;
            resourceInputs["fields"] = args?.fields;
            resourceInputs["freeformTags"] = args?.freeformTags;
            resourceInputs["isHidden"] = args?.isHidden;
            resourceInputs["lookupName"] = args?.lookupName;
            resourceInputs["maxMatches"] = args?.maxMatches;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["registerLookupFile"] = args?.registerLookupFile;
            resourceInputs["type"] = args?.type;
            resourceInputs["activeEditVersion"] = undefined /*out*/;
            resourceInputs["canonicalLink"] = undefined /*out*/;
            resourceInputs["editVersion"] = undefined /*out*/;
            resourceInputs["isBuiltIn"] = undefined /*out*/;
            resourceInputs["lookupDisplayName"] = undefined /*out*/;
            resourceInputs["lookupId"] = undefined /*out*/;
            resourceInputs["lookupReference"] = undefined /*out*/;
            resourceInputs["lookupReferenceString"] = undefined /*out*/;
            resourceInputs["referringSources"] = undefined /*out*/;
            resourceInputs["statusSummaries"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NamespaceLookup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NamespaceLookup resources.
 */
export interface NamespaceLookupState {
    /**
     * The active edit version.
     */
    activeEditVersion?: pulumi.Input<string>;
    /**
     * The canonical link.
     */
    canonicalLink?: pulumi.Input<string>;
    /**
     * (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.LogAnalytics.NamespaceLookupCategory>[]>;
    /**
     * The character encoding of the uploaded file.
     */
    charEncoding?: pulumi.Input<string>;
    /**
     * (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) The default match value.
     */
    defaultMatchValue?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) The lookup description.
     */
    description?: pulumi.Input<string>;
    /**
     * The edit version.
     */
    editVersion?: pulumi.Input<string>;
    /**
     * (Updatable) The lookup fields.
     */
    fields?: pulumi.Input<pulumi.Input<inputs.LogAnalytics.NamespaceLookupField>[]>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A flag indicating if the lookup is custom (user-defined) or built in.
     */
    isBuiltIn?: pulumi.Input<string>;
    /**
     * A flag indicating whether or not the new lookup should be hidden.
     */
    isHidden?: pulumi.Input<boolean>;
    /**
     * The lookup display name.
     */
    lookupDisplayName?: pulumi.Input<string>;
    /**
     * The lookup OCID.
     */
    lookupId?: pulumi.Input<string>;
    /**
     * The name of the lookup to operate on.
     */
    lookupName?: pulumi.Input<string>;
    /**
     * The lookup reference as an integer.
     */
    lookupReference?: pulumi.Input<string>;
    /**
     * The lookup reference as a string.
     */
    lookupReferenceString?: pulumi.Input<string>;
    /**
     * (Updatable) The maximum number of matches.
     */
    maxMatches?: pulumi.Input<string>;
    /**
     * The Logging Analytics namespace used for the request.
     */
    namespace?: pulumi.Input<string>;
    /**
     * AutoLookups
     */
    referringSources?: pulumi.Input<pulumi.Input<inputs.LogAnalytics.NamespaceLookupReferringSource>[]>;
    /**
     * Path to the file containing data for lookup creation.
     */
    registerLookupFile?: pulumi.Input<string>;
    /**
     * StatusSummary
     */
    statusSummaries?: pulumi.Input<pulumi.Input<inputs.LogAnalytics.NamespaceLookupStatusSummary>[]>;
    /**
     * The last updated date.
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * The lookup type. Valid values are Lookup, Dictionary or Module.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NamespaceLookup resource.
 */
export interface NamespaceLookupArgs {
    /**
     * (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
     */
    categories?: pulumi.Input<pulumi.Input<inputs.LogAnalytics.NamespaceLookupCategory>[]>;
    /**
     * The character encoding of the uploaded file.
     */
    charEncoding?: pulumi.Input<string>;
    /**
     * (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) The default match value.
     */
    defaultMatchValue?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) The lookup description.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) The lookup fields.
     */
    fields?: pulumi.Input<pulumi.Input<inputs.LogAnalytics.NamespaceLookupField>[]>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A flag indicating whether or not the new lookup should be hidden.
     */
    isHidden?: pulumi.Input<boolean>;
    /**
     * The name of the lookup to operate on.
     */
    lookupName: pulumi.Input<string>;
    /**
     * (Updatable) The maximum number of matches.
     */
    maxMatches?: pulumi.Input<string>;
    /**
     * The Logging Analytics namespace used for the request.
     */
    namespace: pulumi.Input<string>;
    /**
     * Path to the file containing data for lookup creation.
     */
    registerLookupFile: pulumi.Input<string>;
    /**
     * The lookup type. Valid values are Lookup, Dictionary or Module.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    type: pulumi.Input<string>;
}
