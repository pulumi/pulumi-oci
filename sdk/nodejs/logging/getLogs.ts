// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Logs in Oracle Cloud Infrastructure Logging service.
 *
 * Lists the specified log group's log objects.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testLogs = oci.Logging.getLogs({
 *     logGroupId: testLogGroup.id,
 *     displayName: logDisplayName,
 *     logType: logLogType,
 *     sourceResource: logSourceResource,
 *     sourceService: logSourceService,
 *     state: logState,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getLogs(args: GetLogsArgs, opts?: pulumi.InvokeOptions): Promise<GetLogsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Logging/getLogs:getLogs", {
        "displayName": args.displayName,
        "filters": args.filters,
        "logGroupId": args.logGroupId,
        "logType": args.logType,
        "sourceResource": args.sourceResource,
        "sourceService": args.sourceService,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getLogs.
 */
export interface GetLogsArgs {
    /**
     * Resource name.
     */
    displayName?: string;
    filters?: inputs.Logging.GetLogsFilter[];
    /**
     * OCID of a log group to work with.
     */
    logGroupId: string;
    /**
     * The logType that the log object is for, whether custom or service.
     */
    logType?: string;
    /**
     * Log object resource, which is a field of LogSummary.Configuration.Source.
     */
    sourceResource?: string;
    /**
     * Service that created the log object, which is a field of LogSummary.Configuration.Source.
     */
    sourceService?: string;
    /**
     * Lifecycle state of the log object
     */
    state?: string;
}

/**
 * A collection of values returned by getLogs.
 */
export interface GetLogsResult {
    /**
     * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
     */
    readonly displayName?: string;
    readonly filters?: outputs.Logging.GetLogsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Log group OCID.
     */
    readonly logGroupId: string;
    /**
     * The logType that the log object is for, whether custom or service.
     */
    readonly logType?: string;
    /**
     * The list of logs.
     */
    readonly logs: outputs.Logging.GetLogsLog[];
    readonly sourceResource?: string;
    readonly sourceService?: string;
    /**
     * The pipeline state.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Logs in Oracle Cloud Infrastructure Logging service.
 *
 * Lists the specified log group's log objects.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testLogs = oci.Logging.getLogs({
 *     logGroupId: testLogGroup.id,
 *     displayName: logDisplayName,
 *     logType: logLogType,
 *     sourceResource: logSourceResource,
 *     sourceService: logSourceService,
 *     state: logState,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getLogsOutput(args: GetLogsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLogsResult> {
    return pulumi.output(args).apply((a: any) => getLogs(a, opts))
}

/**
 * A collection of arguments for invoking getLogs.
 */
export interface GetLogsOutputArgs {
    /**
     * Resource name.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Logging.GetLogsFilterArgs>[]>;
    /**
     * OCID of a log group to work with.
     */
    logGroupId: pulumi.Input<string>;
    /**
     * The logType that the log object is for, whether custom or service.
     */
    logType?: pulumi.Input<string>;
    /**
     * Log object resource, which is a field of LogSummary.Configuration.Source.
     */
    sourceResource?: pulumi.Input<string>;
    /**
     * Service that created the log object, which is a field of LogSummary.Configuration.Source.
     */
    sourceService?: pulumi.Input<string>;
    /**
     * Lifecycle state of the log object
     */
    state?: pulumi.Input<string>;
}
