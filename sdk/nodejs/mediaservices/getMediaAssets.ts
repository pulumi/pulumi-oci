// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Media Assets in Oracle Cloud Infrastructure Media Services service.
 *
 * Returns a list of MediaAssetSummary.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMediaAssets = oci.MediaServices.getMediaAssets({
 *     bucket: mediaAssetBucket,
 *     compartmentId: compartmentId,
 *     displayName: mediaAssetDisplayName,
 *     distributionChannelId: testChannel.id,
 *     masterMediaAssetId: testMediaAsset.id,
 *     mediaWorkflowJobId: testMediaWorkflowJob.id,
 *     object: mediaAssetObject,
 *     parentMediaAssetId: testMediaAsset.id,
 *     sourceMediaWorkflowId: testMediaWorkflow.id,
 *     sourceMediaWorkflowVersion: mediaAssetSourceMediaWorkflowVersion,
 *     state: mediaAssetState,
 *     type: mediaAssetType,
 * });
 * ```
 */
export function getMediaAssets(args?: GetMediaAssetsArgs, opts?: pulumi.InvokeOptions): Promise<GetMediaAssetsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:MediaServices/getMediaAssets:getMediaAssets", {
        "bucket": args.bucket,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "distributionChannelId": args.distributionChannelId,
        "filters": args.filters,
        "masterMediaAssetId": args.masterMediaAssetId,
        "mediaWorkflowJobId": args.mediaWorkflowJobId,
        "object": args.object,
        "parentMediaAssetId": args.parentMediaAssetId,
        "sourceMediaWorkflowId": args.sourceMediaWorkflowId,
        "sourceMediaWorkflowVersion": args.sourceMediaWorkflowVersion,
        "state": args.state,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getMediaAssets.
 */
export interface GetMediaAssetsArgs {
    /**
     * Filter MediaAsset by the bucket where the object is stored.
     */
    bucket?: string;
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: string;
    /**
     * A filter to return only the resources that match the entire display name given.
     */
    displayName?: string;
    /**
     * Unique DistributionChannel identifier.
     */
    distributionChannelId?: string;
    filters?: inputs.MediaServices.GetMediaAssetsFilter[];
    /**
     * Unique MediaAsset identifier of the first asset upload.
     */
    masterMediaAssetId?: string;
    /**
     * The ID of the MediaWorkflowJob used to produce this asset, if this parameter is supplied then the workflow ID must also be supplied.
     */
    mediaWorkflowJobId?: string;
    /**
     * Filter MediaAsset by the name of the object in object storage.
     */
    object?: string;
    /**
     * Unique MediaAsset identifier of the asset from which this asset is derived.
     */
    parentMediaAssetId?: string;
    /**
     * The ID of the MediaWorkflow used to produce this asset.
     */
    sourceMediaWorkflowId?: string;
    /**
     * The version of the MediaWorkflow used to produce this asset.
     */
    sourceMediaWorkflowVersion?: string;
    /**
     * A filter to return only the resources with lifecycleState matching the given lifecycleState.
     */
    state?: string;
    /**
     * Filter MediaAsset by the asset type.
     */
    type?: string;
}

/**
 * A collection of values returned by getMediaAssets.
 */
export interface GetMediaAssetsResult {
    /**
     * The name of the object storage bucket where this represented asset is located.
     */
    readonly bucket?: string;
    /**
     * The compartment ID of the lock.
     */
    readonly compartmentId?: string;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    readonly displayName?: string;
    readonly distributionChannelId?: string;
    readonly filters?: outputs.MediaServices.GetMediaAssetsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The ID of the senior most asset from which this asset is derived.
     */
    readonly masterMediaAssetId?: string;
    /**
     * The list of media_asset_collection.
     */
    readonly mediaAssetCollections: outputs.MediaServices.GetMediaAssetsMediaAssetCollection[];
    /**
     * The ID of the MediaWorkflowJob used to produce this asset.
     */
    readonly mediaWorkflowJobId?: string;
    /**
     * The object storage object name that identifies this asset.
     */
    readonly object?: string;
    /**
     * The ID of the parent asset from which this asset is derived.
     */
    readonly parentMediaAssetId?: string;
    /**
     * The ID of the MediaWorkflow used to produce this asset.
     */
    readonly sourceMediaWorkflowId?: string;
    /**
     * The version of the MediaWorkflow used to produce this asset.
     */
    readonly sourceMediaWorkflowVersion?: string;
    /**
     * The current state of the MediaAsset.
     */
    readonly state?: string;
    /**
     * The type of the media asset.
     */
    readonly type?: string;
}
/**
 * This data source provides the list of Media Assets in Oracle Cloud Infrastructure Media Services service.
 *
 * Returns a list of MediaAssetSummary.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMediaAssets = oci.MediaServices.getMediaAssets({
 *     bucket: mediaAssetBucket,
 *     compartmentId: compartmentId,
 *     displayName: mediaAssetDisplayName,
 *     distributionChannelId: testChannel.id,
 *     masterMediaAssetId: testMediaAsset.id,
 *     mediaWorkflowJobId: testMediaWorkflowJob.id,
 *     object: mediaAssetObject,
 *     parentMediaAssetId: testMediaAsset.id,
 *     sourceMediaWorkflowId: testMediaWorkflow.id,
 *     sourceMediaWorkflowVersion: mediaAssetSourceMediaWorkflowVersion,
 *     state: mediaAssetState,
 *     type: mediaAssetType,
 * });
 * ```
 */
export function getMediaAssetsOutput(args?: GetMediaAssetsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMediaAssetsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:MediaServices/getMediaAssets:getMediaAssets", {
        "bucket": args.bucket,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "distributionChannelId": args.distributionChannelId,
        "filters": args.filters,
        "masterMediaAssetId": args.masterMediaAssetId,
        "mediaWorkflowJobId": args.mediaWorkflowJobId,
        "object": args.object,
        "parentMediaAssetId": args.parentMediaAssetId,
        "sourceMediaWorkflowId": args.sourceMediaWorkflowId,
        "sourceMediaWorkflowVersion": args.sourceMediaWorkflowVersion,
        "state": args.state,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getMediaAssets.
 */
export interface GetMediaAssetsOutputArgs {
    /**
     * Filter MediaAsset by the bucket where the object is stored.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A filter to return only the resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Unique DistributionChannel identifier.
     */
    distributionChannelId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.MediaServices.GetMediaAssetsFilterArgs>[]>;
    /**
     * Unique MediaAsset identifier of the first asset upload.
     */
    masterMediaAssetId?: pulumi.Input<string>;
    /**
     * The ID of the MediaWorkflowJob used to produce this asset, if this parameter is supplied then the workflow ID must also be supplied.
     */
    mediaWorkflowJobId?: pulumi.Input<string>;
    /**
     * Filter MediaAsset by the name of the object in object storage.
     */
    object?: pulumi.Input<string>;
    /**
     * Unique MediaAsset identifier of the asset from which this asset is derived.
     */
    parentMediaAssetId?: pulumi.Input<string>;
    /**
     * The ID of the MediaWorkflow used to produce this asset.
     */
    sourceMediaWorkflowId?: pulumi.Input<string>;
    /**
     * The version of the MediaWorkflow used to produce this asset.
     */
    sourceMediaWorkflowVersion?: pulumi.Input<string>;
    /**
     * A filter to return only the resources with lifecycleState matching the given lifecycleState.
     */
    state?: pulumi.Input<string>;
    /**
     * Filter MediaAsset by the asset type.
     */
    type?: pulumi.Input<string>;
}
