// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Media Workflow Job resource in Oracle Cloud Infrastructure Media Services service.
 *
 * Gets the MediaWorkflowJob.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMediaWorkflowJob = oci.MediaServices.getMediaWorkflowJob({
 *     mediaWorkflowJobId: oci_media_services_media_workflow_job.test_media_workflow_job.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getMediaWorkflowJob(args: GetMediaWorkflowJobArgs, opts?: pulumi.InvokeOptions): Promise<GetMediaWorkflowJobResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:MediaServices/getMediaWorkflowJob:getMediaWorkflowJob", {
        "mediaWorkflowJobId": args.mediaWorkflowJobId,
    }, opts);
}

/**
 * A collection of arguments for invoking getMediaWorkflowJob.
 */
export interface GetMediaWorkflowJobArgs {
    /**
     * Unique MediaWorkflowJob identifier.
     */
    mediaWorkflowJobId: string;
}

/**
 * A collection of values returned by getMediaWorkflowJob.
 */
export interface GetMediaWorkflowJobResult {
    /**
     * The compartment ID of the lock.
     */
    readonly compartmentId: string;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    readonly definedTags: {[key: string]: any};
    /**
     * Name of the Media Workflow Job. Does not have to be unique. Avoid entering confidential information.
     */
    readonly displayName: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    readonly freeformTags: {[key: string]: any};
    /**
     * The ID associated with the job output.
     */
    readonly id: string;
    readonly isLockOverride: boolean;
    /**
     * The lifecycle details of MediaWorkflowJob task.
     */
    readonly lifecycleDetails: string;
    /**
     * Locks associated with this resource.
     */
    readonly locks: outputs.MediaServices.GetMediaWorkflowJobLock[];
    /**
     * Configurations to be applied to this run of the workflow.
     */
    readonly mediaWorkflowConfigurationIds: string[];
    /**
     * The workflow to execute.
     */
    readonly mediaWorkflowId: string;
    readonly mediaWorkflowJobId: string;
    readonly mediaWorkflowName: string;
    /**
     * A list of JobOutput for the workflowJob.
     */
    readonly outputs: outputs.MediaServices.GetMediaWorkflowJobOutput[];
    /**
     * Parameters that override parameters specified in MediaWorkflowTaskDeclarations, the MediaWorkflow, the MediaWorkflow's MediaWorkflowConfigurations and the MediaWorkflowConfigurations of this MediaWorkflowJob. The parameters are given as JSON.  The top level and 2nd level elements must be JSON objects (vs arrays, scalars, etc). The top level keys refer to a task's key and the 2nd level keys refer to a parameter's name.
     */
    readonly parameters: string;
    /**
     * A JSON representation of the job as it will be run by the system. All the task declarations, configurations and parameters are merged. Parameter values are all fully resolved.
     */
    readonly runnable: string;
    /**
     * The current state of the MediaWorkflowJob task.
     */
    readonly state: string;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    readonly systemTags: {[key: string]: any};
    /**
     * Status of each task.
     */
    readonly taskLifecycleStates: outputs.MediaServices.GetMediaWorkflowJobTaskLifecycleState[];
    /**
     * Creation time of the job. An RFC3339 formatted datetime string.
     */
    readonly timeCreated: string;
    /**
     * Time when the job finished. An RFC3339 formatted datetime string.
     */
    readonly timeEnded: string;
    /**
     * Time when the job started to execute. An RFC3339 formatted datetime string.
     */
    readonly timeStarted: string;
    /**
     * Updated time of the job. An RFC3339 formatted datetime string.
     */
    readonly timeUpdated: string;
    readonly workflowIdentifierType: string;
}
/**
 * This data source provides details about a specific Media Workflow Job resource in Oracle Cloud Infrastructure Media Services service.
 *
 * Gets the MediaWorkflowJob.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMediaWorkflowJob = oci.MediaServices.getMediaWorkflowJob({
 *     mediaWorkflowJobId: oci_media_services_media_workflow_job.test_media_workflow_job.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getMediaWorkflowJobOutput(args: GetMediaWorkflowJobOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMediaWorkflowJobResult> {
    return pulumi.output(args).apply((a: any) => getMediaWorkflowJob(a, opts))
}

/**
 * A collection of arguments for invoking getMediaWorkflowJob.
 */
export interface GetMediaWorkflowJobOutputArgs {
    /**
     * Unique MediaWorkflowJob identifier.
     */
    mediaWorkflowJobId: pulumi.Input<string>;
}
