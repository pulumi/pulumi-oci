// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Media Workflow Jobs in Oracle Cloud Infrastructure Media Services service.
 *
 * Lists the MediaWorkflowJobs.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMediaWorkflowJobs = oci.MediaServices.getMediaWorkflowJobs({
 *     compartmentId: _var.compartment_id,
 *     displayName: _var.media_workflow_job_display_name,
 *     id: _var.media_workflow_job_id,
 *     mediaWorkflowId: oci_media_services_media_workflow.test_media_workflow.id,
 *     state: _var.media_workflow_job_state,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getMediaWorkflowJobs(args?: GetMediaWorkflowJobsArgs, opts?: pulumi.InvokeOptions): Promise<GetMediaWorkflowJobsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:MediaServices/getMediaWorkflowJobs:getMediaWorkflowJobs", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "mediaWorkflowId": args.mediaWorkflowId,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getMediaWorkflowJobs.
 */
export interface GetMediaWorkflowJobsArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: string;
    /**
     * A filter to return only the resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.MediaServices.GetMediaWorkflowJobsFilter[];
    /**
     * unique MediaWorkflowJob identifier
     */
    id?: string;
    /**
     * Unique MediaWorkflow identifier.
     */
    mediaWorkflowId?: string;
    /**
     * A filter to return only the resources with lifecycleState matching the given lifecycleState.
     */
    state?: string;
}

/**
 * A collection of values returned by getMediaWorkflowJobs.
 */
export interface GetMediaWorkflowJobsResult {
    /**
     * The compartment ID of the lock.
     */
    readonly compartmentId?: string;
    /**
     * Name of the Media Workflow Job. Does not have to be unique. Avoid entering confidential information.
     */
    readonly displayName?: string;
    readonly filters?: outputs.MediaServices.GetMediaWorkflowJobsFilter[];
    /**
     * The ID associated with the job output.
     */
    readonly id?: string;
    /**
     * The workflow to execute.
     */
    readonly mediaWorkflowId?: string;
    /**
     * The list of media_workflow_job_collection.
     */
    readonly mediaWorkflowJobCollections: outputs.MediaServices.GetMediaWorkflowJobsMediaWorkflowJobCollection[];
    /**
     * The current state of the MediaWorkflowJob task.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Media Workflow Jobs in Oracle Cloud Infrastructure Media Services service.
 *
 * Lists the MediaWorkflowJobs.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMediaWorkflowJobs = oci.MediaServices.getMediaWorkflowJobs({
 *     compartmentId: _var.compartment_id,
 *     displayName: _var.media_workflow_job_display_name,
 *     id: _var.media_workflow_job_id,
 *     mediaWorkflowId: oci_media_services_media_workflow.test_media_workflow.id,
 *     state: _var.media_workflow_job_state,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getMediaWorkflowJobsOutput(args?: GetMediaWorkflowJobsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMediaWorkflowJobsResult> {
    return pulumi.output(args).apply((a: any) => getMediaWorkflowJobs(a, opts))
}

/**
 * A collection of arguments for invoking getMediaWorkflowJobs.
 */
export interface GetMediaWorkflowJobsOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A filter to return only the resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.MediaServices.GetMediaWorkflowJobsFilterArgs>[]>;
    /**
     * unique MediaWorkflowJob identifier
     */
    id?: pulumi.Input<string>;
    /**
     * Unique MediaWorkflow identifier.
     */
    mediaWorkflowId?: pulumi.Input<string>;
    /**
     * A filter to return only the resources with lifecycleState matching the given lifecycleState.
     */
    state?: pulumi.Input<string>;
}
