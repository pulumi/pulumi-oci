// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Stream Distribution Channels in Oracle Cloud Infrastructure Media Services service.
 *
 * Lists the Stream Distribution Channels.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testStreamDistributionChannels = oci.MediaServices.getStreamDistributionChannels({
 *     compartmentId: compartmentId,
 *     displayName: streamDistributionChannelDisplayName,
 *     id: streamDistributionChannelId,
 *     state: streamDistributionChannelState,
 * });
 * ```
 */
export function getStreamDistributionChannels(args?: GetStreamDistributionChannelsArgs, opts?: pulumi.InvokeOptions): Promise<GetStreamDistributionChannelsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:MediaServices/getStreamDistributionChannels:getStreamDistributionChannels", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getStreamDistributionChannels.
 */
export interface GetStreamDistributionChannelsArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: string;
    /**
     * A filter to return only the resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.MediaServices.GetStreamDistributionChannelsFilter[];
    /**
     * Unique Stream Distribution Channel identifier.
     */
    id?: string;
    /**
     * A filter to return only the resources with lifecycleState matching the given lifecycleState.
     */
    state?: string;
}

/**
 * A collection of values returned by getStreamDistributionChannels.
 */
export interface GetStreamDistributionChannelsResult {
    /**
     * The compartment ID of the lock.
     */
    readonly compartmentId?: string;
    /**
     * Stream Distribution Channel display name. Avoid entering confidential information.
     */
    readonly displayName?: string;
    readonly filters?: outputs.MediaServices.GetStreamDistributionChannelsFilter[];
    /**
     * Unique identifier that is immutable on creation.
     */
    readonly id?: string;
    /**
     * The current state of the Stream Distribution Channel.
     */
    readonly state?: string;
    /**
     * The list of stream_distribution_channel_collection.
     */
    readonly streamDistributionChannelCollections: outputs.MediaServices.GetStreamDistributionChannelsStreamDistributionChannelCollection[];
}
/**
 * This data source provides the list of Stream Distribution Channels in Oracle Cloud Infrastructure Media Services service.
 *
 * Lists the Stream Distribution Channels.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testStreamDistributionChannels = oci.MediaServices.getStreamDistributionChannels({
 *     compartmentId: compartmentId,
 *     displayName: streamDistributionChannelDisplayName,
 *     id: streamDistributionChannelId,
 *     state: streamDistributionChannelState,
 * });
 * ```
 */
export function getStreamDistributionChannelsOutput(args?: GetStreamDistributionChannelsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetStreamDistributionChannelsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:MediaServices/getStreamDistributionChannels:getStreamDistributionChannels", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getStreamDistributionChannels.
 */
export interface GetStreamDistributionChannelsOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A filter to return only the resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.MediaServices.GetStreamDistributionChannelsFilterArgs>[]>;
    /**
     * Unique Stream Distribution Channel identifier.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to return only the resources with lifecycleState matching the given lifecycleState.
     */
    state?: pulumi.Input<string>;
}
