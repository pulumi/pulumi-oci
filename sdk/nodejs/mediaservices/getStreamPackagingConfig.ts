// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Stream Packaging Config resource in Oracle Cloud Infrastructure Media Services service.
 *
 * Gets a Stream Packaging Configuration by identifier.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testStreamPackagingConfig = oci.MediaServices.getStreamPackagingConfig({
 *     streamPackagingConfigId: oci_media_services_stream_packaging_config.test_stream_packaging_config.id,
 * });
 * ```
 */
export function getStreamPackagingConfig(args: GetStreamPackagingConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetStreamPackagingConfigResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:MediaServices/getStreamPackagingConfig:getStreamPackagingConfig", {
        "streamPackagingConfigId": args.streamPackagingConfigId,
    }, opts);
}

/**
 * A collection of arguments for invoking getStreamPackagingConfig.
 */
export interface GetStreamPackagingConfigArgs {
    /**
     * Unique Stream Packaging Configuration path identifier.
     */
    streamPackagingConfigId: string;
}

/**
 * A collection of values returned by getStreamPackagingConfig.
 */
export interface GetStreamPackagingConfigResult {
    /**
     * Compartment Identifier
     */
    readonly compartmentId?: string;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    readonly definedTags?: {[key: string]: any};
    /**
     * The name of the stream packaging configuration. Avoid entering confidential information.
     */
    readonly displayName?: string;
    /**
     * Unique identifier of the Distribution Channel that this stream packaging configuration belongs to.
     */
    readonly distributionChannelId?: string;
    /**
     * The encryption used by the stream packaging configuration.
     */
    readonly encryptions?: outputs.MediaServices.GetStreamPackagingConfigEncryption[];
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    readonly freeformTags?: {[key: string]: any};
    /**
     * Unique identifier that is immutable on creation.
     */
    readonly id?: string;
    /**
     * The duration in seconds for each fragment.
     */
    readonly segmentTimeInSeconds?: number;
    /**
     * The current state of the Packaging Configuration.
     */
    readonly state?: string;
    readonly streamPackagingConfigId: string;
    /**
     * The output format for the package.
     */
    readonly streamPackagingFormat?: string;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    readonly systemTags?: {[key: string]: any};
    /**
     * The time when the Packaging Configuration was created. An RFC3339 formatted datetime string.
     */
    readonly timeCreated?: string;
    /**
     * The time when the Packaging Configuration was updated. An RFC3339 formatted datetime string.
     */
    readonly timeUpdated?: string;
}
/**
 * This data source provides details about a specific Stream Packaging Config resource in Oracle Cloud Infrastructure Media Services service.
 *
 * Gets a Stream Packaging Configuration by identifier.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testStreamPackagingConfig = oci.MediaServices.getStreamPackagingConfig({
 *     streamPackagingConfigId: oci_media_services_stream_packaging_config.test_stream_packaging_config.id,
 * });
 * ```
 */
export function getStreamPackagingConfigOutput(args: GetStreamPackagingConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStreamPackagingConfigResult> {
    return pulumi.output(args).apply((a: any) => getStreamPackagingConfig(a, opts))
}

/**
 * A collection of arguments for invoking getStreamPackagingConfig.
 */
export interface GetStreamPackagingConfigOutputArgs {
    /**
     * Unique Stream Packaging Configuration path identifier.
     */
    streamPackagingConfigId: pulumi.Input<string>;
}
