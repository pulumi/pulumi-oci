// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Stream Packaging Configs in Oracle Cloud Infrastructure Media Services service.
 *
 * Lists the Stream Packaging Configurations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testStreamPackagingConfigs = oci.MediaServices.getStreamPackagingConfigs({
 *     distributionChannelId: testChannel.id,
 *     displayName: streamPackagingConfigDisplayName,
 *     state: streamPackagingConfigState,
 *     streamPackagingConfigId: testStreamPackagingConfig.id,
 * });
 * ```
 */
export function getStreamPackagingConfigs(args: GetStreamPackagingConfigsArgs, opts?: pulumi.InvokeOptions): Promise<GetStreamPackagingConfigsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:MediaServices/getStreamPackagingConfigs:getStreamPackagingConfigs", {
        "displayName": args.displayName,
        "distributionChannelId": args.distributionChannelId,
        "filters": args.filters,
        "state": args.state,
        "streamPackagingConfigId": args.streamPackagingConfigId,
    }, opts);
}

/**
 * A collection of arguments for invoking getStreamPackagingConfigs.
 */
export interface GetStreamPackagingConfigsArgs {
    /**
     * A filter to return only the resources that match the entire display name given.
     */
    displayName?: string;
    /**
     * Unique Stream Distribution Channel identifier.
     */
    distributionChannelId: string;
    filters?: inputs.MediaServices.GetStreamPackagingConfigsFilter[];
    /**
     * A filter to return only the resources with lifecycleState matching the given lifecycleState.
     */
    state?: string;
    /**
     * Unique Stream Packaging Configuration identifier.
     */
    streamPackagingConfigId?: string;
}

/**
 * A collection of values returned by getStreamPackagingConfigs.
 */
export interface GetStreamPackagingConfigsResult {
    /**
     * The name of the stream packaging configuration. Avoid entering confidential information.
     */
    readonly displayName?: string;
    /**
     * Unique identifier of the Distribution Channel that this stream packaging configuration belongs to.
     */
    readonly distributionChannelId: string;
    readonly filters?: outputs.MediaServices.GetStreamPackagingConfigsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The current state of the Packaging Configuration.
     */
    readonly state?: string;
    /**
     * The list of stream_packaging_config_collection.
     */
    readonly streamPackagingConfigCollections: outputs.MediaServices.GetStreamPackagingConfigsStreamPackagingConfigCollection[];
    readonly streamPackagingConfigId?: string;
}
/**
 * This data source provides the list of Stream Packaging Configs in Oracle Cloud Infrastructure Media Services service.
 *
 * Lists the Stream Packaging Configurations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testStreamPackagingConfigs = oci.MediaServices.getStreamPackagingConfigs({
 *     distributionChannelId: testChannel.id,
 *     displayName: streamPackagingConfigDisplayName,
 *     state: streamPackagingConfigState,
 *     streamPackagingConfigId: testStreamPackagingConfig.id,
 * });
 * ```
 */
export function getStreamPackagingConfigsOutput(args: GetStreamPackagingConfigsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetStreamPackagingConfigsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:MediaServices/getStreamPackagingConfigs:getStreamPackagingConfigs", {
        "displayName": args.displayName,
        "distributionChannelId": args.distributionChannelId,
        "filters": args.filters,
        "state": args.state,
        "streamPackagingConfigId": args.streamPackagingConfigId,
    }, opts);
}

/**
 * A collection of arguments for invoking getStreamPackagingConfigs.
 */
export interface GetStreamPackagingConfigsOutputArgs {
    /**
     * A filter to return only the resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Unique Stream Distribution Channel identifier.
     */
    distributionChannelId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.MediaServices.GetStreamPackagingConfigsFilterArgs>[]>;
    /**
     * A filter to return only the resources with lifecycleState matching the given lifecycleState.
     */
    state?: pulumi.Input<string>;
    /**
     * Unique Stream Packaging Configuration identifier.
     */
    streamPackagingConfigId?: pulumi.Input<string>;
}
