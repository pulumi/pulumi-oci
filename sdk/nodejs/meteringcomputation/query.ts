// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Query resource in Oracle Cloud Infrastructure Metering Computation service.
 *
 * Returns the created query.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testQuery = new oci.meteringcomputation.Query("test_query", {
 *     compartmentId: compartmentId,
 *     queryDefinition: {
 *         costAnalysisUi: {
 *             graph: queryQueryDefinitionCostAnalysisUiGraph,
 *             isCumulativeGraph: queryQueryDefinitionCostAnalysisUiIsCumulativeGraph,
 *         },
 *         displayName: queryQueryDefinitionDisplayName,
 *         reportQuery: {
 *             granularity: queryQueryDefinitionReportQueryGranularity,
 *             tenantId: testTenant.id,
 *             compartmentDepth: queryQueryDefinitionReportQueryCompartmentDepth,
 *             dateRangeName: queryQueryDefinitionReportQueryDateRangeName,
 *             filter: queryQueryDefinitionReportQueryFilter,
 *             forecast: {
 *                 timeForecastEnded: queryQueryDefinitionReportQueryForecastTimeForecastEnded,
 *                 forecastType: queryQueryDefinitionReportQueryForecastForecastType,
 *                 timeForecastStarted: queryQueryDefinitionReportQueryForecastTimeForecastStarted,
 *             },
 *             groupBies: queryQueryDefinitionReportQueryGroupBy,
 *             groupByTags: [{
 *                 key: queryQueryDefinitionReportQueryGroupByTagKey,
 *                 namespace: queryQueryDefinitionReportQueryGroupByTagNamespace,
 *                 value: queryQueryDefinitionReportQueryGroupByTagValue,
 *             }],
 *             isAggregateByTime: queryQueryDefinitionReportQueryIsAggregateByTime,
 *             queryType: queryQueryDefinitionReportQueryQueryType,
 *             timeUsageEnded: queryQueryDefinitionReportQueryTimeUsageEnded,
 *             timeUsageStarted: queryQueryDefinitionReportQueryTimeUsageStarted,
 *         },
 *         version: queryQueryDefinitionVersion,
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Queries can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:MeteringComputation/query:Query test_query "id"
 * ```
 */
export class Query extends pulumi.CustomResource {
    /**
     * Get an existing Query resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QueryState, opts?: pulumi.CustomResourceOptions): Query {
        return new Query(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:MeteringComputation/query:Query';

    /**
     * Returns true if the given object is an instance of Query.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Query {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Query.__pulumiType;
    }

    /**
     * The compartment OCID.
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * (Updatable) The common fields for queries.
     */
    public readonly queryDefinition!: pulumi.Output<outputs.MeteringComputation.QueryQueryDefinition>;

    /**
     * Create a Query resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QueryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QueryArgs | QueryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QueryState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["queryDefinition"] = state ? state.queryDefinition : undefined;
        } else {
            const args = argsOrState as QueryArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.queryDefinition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queryDefinition'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["queryDefinition"] = args ? args.queryDefinition : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Query.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Query resources.
 */
export interface QueryState {
    /**
     * The compartment OCID.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) The common fields for queries.
     */
    queryDefinition?: pulumi.Input<inputs.MeteringComputation.QueryQueryDefinition>;
}

/**
 * The set of arguments for constructing a Query resource.
 */
export interface QueryArgs {
    /**
     * The compartment OCID.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) The common fields for queries.
     */
    queryDefinition: pulumi.Input<inputs.MeteringComputation.QueryQueryDefinition>;
}
