// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Alarm Statuses in Oracle Cloud Infrastructure Monitoring service.
 *
 * List the status of each alarm in the specified compartment.
 * Status is collective, across all metric streams in the alarm.
 * To list alarm status for each metric stream, use [RetrieveDimensionStates](https://docs.cloud.oracle.com/iaas/api/#/en/monitoring/latest/AlarmDimensionStatesCollection/RetrieveDimensionStates).
 * Optionally filter by resource or status value.
 *
 * For more information, see
 * [Listing Alarm Statuses](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/list-alarm-status.htm).
 * For important limits information, see
 * [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
 *
 * This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
 * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
 * or transactions, per second (TPS) for a given tenancy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testAlarmStatuses = oci.Monitoring.getAlarmStatuses({
 *     compartmentId: compartmentId,
 *     compartmentIdInSubtree: alarmStatusCompartmentIdInSubtree,
 *     displayName: alarmStatusDisplayName,
 *     entityId: testEntity.id,
 *     resourceId: testResource.id,
 *     serviceName: testService.name,
 *     status: alarmStatusStatus,
 * });
 * ```
 */
export function getAlarmStatuses(args: GetAlarmStatusesArgs, opts?: pulumi.InvokeOptions): Promise<GetAlarmStatusesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Monitoring/getAlarmStatuses:getAlarmStatuses", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "displayName": args.displayName,
        "entityId": args.entityId,
        "filters": args.filters,
        "resourceId": args.resourceId,
        "serviceName": args.serviceName,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getAlarmStatuses.
 */
export interface GetAlarmStatusesArgs {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric that you are searching for. Use tenancyId to search in the root compartment.  Example: `ocid1.compartment.oc1..exampleuniqueID`
     */
    compartmentId: string;
    /**
     * When true, returns resources from all compartments and subcompartments. The parameter can only be set to true when compartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, returns resources from only the compartment specified in compartmentId. Default is false.
     */
    compartmentIdInSubtree?: boolean;
    /**
     * A filter to return only resources that match the given display name exactly. Use this filter to list an alarm by name. Alternatively, when you know the alarm OCID, use the GetAlarm operation.
     */
    displayName?: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the entity monitored by the metric that you are searching for.  Example: `ocid1.instance.oc1.phx.exampleuniqueID`
     */
    entityId?: string;
    filters?: inputs.Monitoring.GetAlarmStatusesFilter[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a resource that is monitored by the metric that you are searching for.  Example: `ocid1.instance.oc1.phx.exampleuniqueID`
     */
    resourceId?: string;
    /**
     * A filter to return only resources that match the given service name exactly. Use this filter to list all alarms containing metric streams that match the *exact* service-name dimension.  Example: `logging-analytics`
     */
    serviceName?: string;
    /**
     * The status of the metric stream to use for alarm filtering. For example, set `StatusQueryParam` to "FIRING" to filter results to metric streams of the alarm with that status. Default behaviour is to return alarms irrespective of metric streams' status.  Example: `FIRING`
     */
    status?: string;
}

/**
 * A collection of values returned by getAlarmStatuses.
 */
export interface GetAlarmStatusesResult {
    /**
     * The list of alarm_statuses.
     */
    readonly alarmStatuses: outputs.Monitoring.GetAlarmStatusesAlarmStatus[];
    readonly compartmentId: string;
    readonly compartmentIdInSubtree?: boolean;
    /**
     * The configured name of the alarm.  Example: `High CPU Utilization`
     */
    readonly displayName?: string;
    readonly entityId?: string;
    readonly filters?: outputs.Monitoring.GetAlarmStatusesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly resourceId?: string;
    readonly serviceName?: string;
    /**
     * The status of this alarm. Status is collective, across all metric streams in the alarm. To list alarm status for each metric stream, use [RetrieveDimensionStates](https://docs.cloud.oracle.com/iaas/api/#/en/monitoring/latest/AlarmDimensionStatesCollection/RetrieveDimensionStates).  Example: `FIRING`
     */
    readonly status?: string;
}
/**
 * This data source provides the list of Alarm Statuses in Oracle Cloud Infrastructure Monitoring service.
 *
 * List the status of each alarm in the specified compartment.
 * Status is collective, across all metric streams in the alarm.
 * To list alarm status for each metric stream, use [RetrieveDimensionStates](https://docs.cloud.oracle.com/iaas/api/#/en/monitoring/latest/AlarmDimensionStatesCollection/RetrieveDimensionStates).
 * Optionally filter by resource or status value.
 *
 * For more information, see
 * [Listing Alarm Statuses](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/list-alarm-status.htm).
 * For important limits information, see
 * [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
 *
 * This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
 * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
 * or transactions, per second (TPS) for a given tenancy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testAlarmStatuses = oci.Monitoring.getAlarmStatuses({
 *     compartmentId: compartmentId,
 *     compartmentIdInSubtree: alarmStatusCompartmentIdInSubtree,
 *     displayName: alarmStatusDisplayName,
 *     entityId: testEntity.id,
 *     resourceId: testResource.id,
 *     serviceName: testService.name,
 *     status: alarmStatusStatus,
 * });
 * ```
 */
export function getAlarmStatusesOutput(args: GetAlarmStatusesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAlarmStatusesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:Monitoring/getAlarmStatuses:getAlarmStatuses", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "displayName": args.displayName,
        "entityId": args.entityId,
        "filters": args.filters,
        "resourceId": args.resourceId,
        "serviceName": args.serviceName,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getAlarmStatuses.
 */
export interface GetAlarmStatusesOutputArgs {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric that you are searching for. Use tenancyId to search in the root compartment.  Example: `ocid1.compartment.oc1..exampleuniqueID`
     */
    compartmentId: pulumi.Input<string>;
    /**
     * When true, returns resources from all compartments and subcompartments. The parameter can only be set to true when compartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, returns resources from only the compartment specified in compartmentId. Default is false.
     */
    compartmentIdInSubtree?: pulumi.Input<boolean>;
    /**
     * A filter to return only resources that match the given display name exactly. Use this filter to list an alarm by name. Alternatively, when you know the alarm OCID, use the GetAlarm operation.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the entity monitored by the metric that you are searching for.  Example: `ocid1.instance.oc1.phx.exampleuniqueID`
     */
    entityId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Monitoring.GetAlarmStatusesFilterArgs>[]>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a resource that is monitored by the metric that you are searching for.  Example: `ocid1.instance.oc1.phx.exampleuniqueID`
     */
    resourceId?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the given service name exactly. Use this filter to list all alarms containing metric streams that match the *exact* service-name dimension.  Example: `logging-analytics`
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The status of the metric stream to use for alarm filtering. For example, set `StatusQueryParam` to "FIRING" to filter results to metric streams of the alarm with that status. Default behaviour is to return alarms irrespective of metric streams' status.  Example: `FIRING`
     */
    status?: pulumi.Input<string>;
}
