// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Alarm Suppression resource in Oracle Cloud Infrastructure Monitoring service.
 *
 * Gets the specified alarm suppression. For more information, see
 * [Getting an Alarm-wide Suppression](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/get-alarm-suppression.htm).
 *
 * For important limits information, see
 * [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
 *
 * This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
 * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
 * or transactions, per second (TPS) for a given tenancy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testAlarmSuppression = oci.Monitoring.getAlarmSuppression({
 *     alarmSuppressionId: testAlarmSuppressionOciMonitoringAlarmSuppression.id,
 * });
 * ```
 */
export function getAlarmSuppression(args: GetAlarmSuppressionArgs, opts?: pulumi.InvokeOptions): Promise<GetAlarmSuppressionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Monitoring/getAlarmSuppression:getAlarmSuppression", {
        "alarmSuppressionId": args.alarmSuppressionId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAlarmSuppression.
 */
export interface GetAlarmSuppressionArgs {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the alarm suppression.
     */
    alarmSuppressionId: string;
}

/**
 * A collection of values returned by getAlarmSuppression.
 */
export interface GetAlarmSuppressionResult {
    readonly alarmSuppressionId: string;
    /**
     * The target of the alarm suppression.
     */
    readonly alarmSuppressionTargets: outputs.Monitoring.GetAlarmSuppressionAlarmSuppressionTarget[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the alarm suppression.
     */
    readonly compartmentId: string;
    /**
     * Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"Operations.CostCenter": "42"}`
     */
    readonly definedTags: {[key: string]: string};
    /**
     * Human-readable reason for this alarm suppression. It does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    readonly description: string;
    /**
     * Configured dimension filter for suppressing alarm state entries that include the set of specified dimension key-value pairs.  Example: `{"resourceId": "instance.region1.phx.exampleuniqueID"}`
     */
    readonly dimensions: {[key: string]: string};
    /**
     * A user-friendly name for the alarm suppression. It does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    readonly displayName: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"Department": "Finance"}`
     */
    readonly freeformTags: {[key: string]: string};
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the alarm suppression.
     */
    readonly id: string;
    /**
     * The level of this alarm suppression. `ALARM` indicates a suppression of the entire alarm, regardless of dimension. `DIMENSION` indicates a suppression configured for specified dimensions.
     */
    readonly level: string;
    /**
     * The current lifecycle state of the alarm suppression.  Example: `DELETED`
     */
    readonly state: string;
    /**
     * Array of all preconditions for alarm suppression. Example: `[{ conditionType: "RECURRENCE", suppressionRecurrence: "FRQ=DAILY;BYHOUR=10", suppressionDuration: "PT1H" }]`
     */
    readonly suppressionConditions: outputs.Monitoring.GetAlarmSuppressionSuppressionCondition[];
    /**
     * The date and time the alarm suppression was created. Format defined by RFC3339.  Example: `2018-02-01T01:02:29.600Z`
     */
    readonly timeCreated: string;
    /**
     * The start date and time for the suppression to take place, inclusive. Format defined by RFC3339.  Example: `2018-02-01T01:02:29.600Z`
     */
    readonly timeSuppressFrom: string;
    /**
     * The end date and time for the suppression to take place, inclusive. Format defined by RFC3339.  Example: `2018-02-01T02:02:29.600Z`
     */
    readonly timeSuppressUntil: string;
    /**
     * The date and time the alarm suppression was last updated (deleted). Format defined by RFC3339.  Example: `2018-02-03T01:02:29.600Z`
     */
    readonly timeUpdated: string;
}
/**
 * This data source provides details about a specific Alarm Suppression resource in Oracle Cloud Infrastructure Monitoring service.
 *
 * Gets the specified alarm suppression. For more information, see
 * [Getting an Alarm-wide Suppression](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/get-alarm-suppression.htm).
 *
 * For important limits information, see
 * [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
 *
 * This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
 * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
 * or transactions, per second (TPS) for a given tenancy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testAlarmSuppression = oci.Monitoring.getAlarmSuppression({
 *     alarmSuppressionId: testAlarmSuppressionOciMonitoringAlarmSuppression.id,
 * });
 * ```
 */
export function getAlarmSuppressionOutput(args: GetAlarmSuppressionOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAlarmSuppressionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:Monitoring/getAlarmSuppression:getAlarmSuppression", {
        "alarmSuppressionId": args.alarmSuppressionId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAlarmSuppression.
 */
export interface GetAlarmSuppressionOutputArgs {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the alarm suppression.
     */
    alarmSuppressionId: pulumi.Input<string>;
}
