// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Mysql Configurations in Oracle Cloud Infrastructure MySQL Database service.
 *
 * Lists the Configurations available when creating a DB System.
 *
 * This may include DEFAULT configurations per Shape and CUSTOM configurations.
 *
 * The default sort order is a multi-part sort by:
 *   - shapeName, ascending
 *   - DEFAULT-before-CUSTOM
 *   - displayName ascending
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMysqlConfigurations = oci.Mysql.getMysqlConfigurations({
 *     compartmentId: compartmentId,
 *     configurationId: mysqlConfigurationId,
 *     displayName: mysqlConfigurationDisplayName,
 *     shapeName: mysqlShapeName,
 *     state: mysqlConfigurationState,
 *     types: mysqlConfigurationType,
 * });
 * ```
 */
export function getMysqlConfigurations(args: GetMysqlConfigurationsArgs, opts?: pulumi.InvokeOptions): Promise<GetMysqlConfigurationsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Mysql/getMysqlConfigurations:getMysqlConfigurations", {
        "compartmentId": args.compartmentId,
        "configurationId": args.configurationId,
        "displayName": args.displayName,
        "filters": args.filters,
        "shapeName": args.shapeName,
        "state": args.state,
        "types": args.types,
    }, opts);
}

/**
 * A collection of arguments for invoking getMysqlConfigurations.
 */
export interface GetMysqlConfigurationsArgs {
    /**
     * The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    compartmentId: string;
    /**
     * The requested Configuration instance.
     */
    configurationId?: string;
    /**
     * A filter to return only the resource matching the given display name exactly.
     */
    displayName?: string;
    filters?: inputs.Mysql.GetMysqlConfigurationsFilter[];
    /**
     * The requested Shape name.
     */
    shapeName?: string;
    /**
     * Configuration Lifecycle State
     */
    state?: string;
    /**
     * The requested Configuration types.
     */
    types?: string[];
}

/**
 * A collection of values returned by getMysqlConfigurations.
 */
export interface GetMysqlConfigurationsResult {
    /**
     * OCID of the Compartment the Configuration exists in.
     */
    readonly compartmentId: string;
    readonly configurationId?: string;
    /**
     * The list of configurations.
     */
    readonly configurations: outputs.Mysql.GetMysqlConfigurationsConfiguration[];
    /**
     * The display name of the Configuration.
     */
    readonly displayName?: string;
    readonly filters?: outputs.Mysql.GetMysqlConfigurationsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the associated Shape.
     */
    readonly shapeName?: string;
    /**
     * The current state of the Configuration.
     */
    readonly state?: string;
    /**
     * The Configuration type, DEFAULT or CUSTOM.
     */
    readonly types?: string[];
}
/**
 * This data source provides the list of Mysql Configurations in Oracle Cloud Infrastructure MySQL Database service.
 *
 * Lists the Configurations available when creating a DB System.
 *
 * This may include DEFAULT configurations per Shape and CUSTOM configurations.
 *
 * The default sort order is a multi-part sort by:
 *   - shapeName, ascending
 *   - DEFAULT-before-CUSTOM
 *   - displayName ascending
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMysqlConfigurations = oci.Mysql.getMysqlConfigurations({
 *     compartmentId: compartmentId,
 *     configurationId: mysqlConfigurationId,
 *     displayName: mysqlConfigurationDisplayName,
 *     shapeName: mysqlShapeName,
 *     state: mysqlConfigurationState,
 *     types: mysqlConfigurationType,
 * });
 * ```
 */
export function getMysqlConfigurationsOutput(args: GetMysqlConfigurationsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMysqlConfigurationsResult> {
    return pulumi.output(args).apply((a: any) => getMysqlConfigurations(a, opts))
}

/**
 * A collection of arguments for invoking getMysqlConfigurations.
 */
export interface GetMysqlConfigurationsOutputArgs {
    /**
     * The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    compartmentId: pulumi.Input<string>;
    /**
     * The requested Configuration instance.
     */
    configurationId?: pulumi.Input<string>;
    /**
     * A filter to return only the resource matching the given display name exactly.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Mysql.GetMysqlConfigurationsFilterArgs>[]>;
    /**
     * The requested Shape name.
     */
    shapeName?: pulumi.Input<string>;
    /**
     * Configuration Lifecycle State
     */
    state?: pulumi.Input<string>;
    /**
     * The requested Configuration types.
     */
    types?: pulumi.Input<pulumi.Input<string>[]>;
}
