// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Mysql Configuration resource in Oracle Cloud Infrastructure MySQL Database service.
 *
 * Creates a new Configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMysqlConfiguration = new oci.mysql.MysqlConfiguration("testMysqlConfiguration", {
 *     compartmentId: _var.compartment_id,
 *     shapeName: oci_mysql_shape.test_shape.name,
 *     definedTags: {
 *         "foo-namespace.bar-key": "value",
 *     },
 *     description: _var.mysql_configuration_description,
 *     displayName: _var.mysql_configuration_display_name,
 *     freeformTags: {
 *         "bar-key": "value",
 *     },
 *     initVariables: {
 *         lowerCaseTableNames: _var.mysql_configuration_init_variables_lower_case_table_names,
 *     },
 *     parentConfigurationId: oci_audit_configuration.test_configuration.id,
 *     variables: {
 *         autocommit: _var.mysql_configuration_variables_autocommit,
 *         bigTables: _var.mysql_configuration_variables_big_tables,
 *         binlogExpireLogsSeconds: _var.mysql_configuration_variables_binlog_expire_logs_seconds,
 *         binlogRowMetadata: _var.mysql_configuration_variables_binlog_row_metadata,
 *         binlogRowValueOptions: _var.mysql_configuration_variables_binlog_row_value_options,
 *         binlogTransactionCompression: _var.mysql_configuration_variables_binlog_transaction_compression,
 *         completionType: _var.mysql_configuration_variables_completion_type,
 *         connectTimeout: _var.mysql_configuration_variables_connect_timeout,
 *         connectionMemoryChunkSize: _var.mysql_configuration_variables_connection_memory_chunk_size,
 *         connectionMemoryLimit: _var.mysql_configuration_variables_connection_memory_limit,
 *         cteMaxRecursionDepth: _var.mysql_configuration_variables_cte_max_recursion_depth,
 *         defaultAuthenticationPlugin: _var.mysql_configuration_variables_default_authentication_plugin,
 *         foreignKeyChecks: _var.mysql_configuration_variables_foreign_key_checks,
 *         generatedRandomPasswordLength: _var.mysql_configuration_variables_generated_random_password_length,
 *         globalConnectionMemoryLimit: _var.mysql_configuration_variables_global_connection_memory_limit,
 *         globalConnectionMemoryTracking: _var.mysql_configuration_variables_global_connection_memory_tracking,
 *         groupReplicationConsistency: _var.mysql_configuration_variables_group_replication_consistency,
 *         informationSchemaStatsExpiry: _var.mysql_configuration_variables_information_schema_stats_expiry,
 *         innodbBufferPoolDumpPct: _var.mysql_configuration_variables_innodb_buffer_pool_dump_pct,
 *         innodbBufferPoolInstances: _var.mysql_configuration_variables_innodb_buffer_pool_instances,
 *         innodbBufferPoolSize: _var.mysql_configuration_variables_innodb_buffer_pool_size,
 *         innodbDdlBufferSize: _var.mysql_configuration_variables_innodb_ddl_buffer_size,
 *         innodbDdlThreads: _var.mysql_configuration_variables_innodb_ddl_threads,
 *         innodbFtEnableStopword: _var.mysql_configuration_variables_innodb_ft_enable_stopword,
 *         innodbFtMaxTokenSize: _var.mysql_configuration_variables_innodb_ft_max_token_size,
 *         innodbFtMinTokenSize: _var.mysql_configuration_variables_innodb_ft_min_token_size,
 *         innodbFtNumWordOptimize: _var.mysql_configuration_variables_innodb_ft_num_word_optimize,
 *         innodbFtResultCacheLimit: _var.mysql_configuration_variables_innodb_ft_result_cache_limit,
 *         innodbFtServerStopwordTable: _var.mysql_configuration_variables_innodb_ft_server_stopword_table,
 *         innodbLockWaitTimeout: _var.mysql_configuration_variables_innodb_lock_wait_timeout,
 *         innodbLogWriterThreads: _var.mysql_configuration_variables_innodb_log_writer_threads,
 *         innodbMaxPurgeLag: _var.mysql_configuration_variables_innodb_max_purge_lag,
 *         innodbMaxPurgeLagDelay: _var.mysql_configuration_variables_innodb_max_purge_lag_delay,
 *         innodbStatsPersistentSamplePages: _var.mysql_configuration_variables_innodb_stats_persistent_sample_pages,
 *         innodbStatsTransientSamplePages: _var.mysql_configuration_variables_innodb_stats_transient_sample_pages,
 *         interactiveTimeout: _var.mysql_configuration_variables_interactive_timeout,
 *         localInfile: _var.mysql_configuration_variables_local_infile,
 *         mandatoryRoles: _var.mysql_configuration_variables_mandatory_roles,
 *         maxAllowedPacket: _var.mysql_configuration_variables_max_allowed_packet,
 *         maxBinlogCacheSize: _var.mysql_configuration_variables_max_binlog_cache_size,
 *         maxConnectErrors: _var.mysql_configuration_variables_max_connect_errors,
 *         maxConnections: _var.mysql_configuration_variables_max_connections,
 *         maxExecutionTime: _var.mysql_configuration_variables_max_execution_time,
 *         maxHeapTableSize: _var.mysql_configuration_variables_max_heap_table_size,
 *         maxPreparedStmtCount: _var.mysql_configuration_variables_max_prepared_stmt_count,
 *         mysqlFirewallMode: _var.mysql_configuration_variables_mysql_firewall_mode,
 *         mysqlZstdDefaultCompressionLevel: _var.mysql_configuration_variables_mysql_zstd_default_compression_level,
 *         mysqlxConnectTimeout: _var.mysql_configuration_variables_mysqlx_connect_timeout,
 *         mysqlxDeflateDefaultCompressionLevel: _var.mysql_configuration_variables_mysqlx_deflate_default_compression_level,
 *         mysqlxDeflateMaxClientCompressionLevel: _var.mysql_configuration_variables_mysqlx_deflate_max_client_compression_level,
 *         mysqlxDocumentIdUniquePrefix: _var.mysql_configuration_variables_mysqlx_document_id_unique_prefix,
 *         mysqlxEnableHelloNotice: _var.mysql_configuration_variables_mysqlx_enable_hello_notice,
 *         mysqlxIdleWorkerThreadTimeout: _var.mysql_configuration_variables_mysqlx_idle_worker_thread_timeout,
 *         mysqlxInteractiveTimeout: _var.mysql_configuration_variables_mysqlx_interactive_timeout,
 *         mysqlxLz4defaultCompressionLevel: _var.mysql_configuration_variables_mysqlx_lz4default_compression_level,
 *         mysqlxLz4maxClientCompressionLevel: _var.mysql_configuration_variables_mysqlx_lz4max_client_compression_level,
 *         mysqlxMaxAllowedPacket: _var.mysql_configuration_variables_mysqlx_max_allowed_packet,
 *         mysqlxMinWorkerThreads: _var.mysql_configuration_variables_mysqlx_min_worker_threads,
 *         mysqlxReadTimeout: _var.mysql_configuration_variables_mysqlx_read_timeout,
 *         mysqlxWaitTimeout: _var.mysql_configuration_variables_mysqlx_wait_timeout,
 *         mysqlxWriteTimeout: _var.mysql_configuration_variables_mysqlx_write_timeout,
 *         mysqlxZstdDefaultCompressionLevel: _var.mysql_configuration_variables_mysqlx_zstd_default_compression_level,
 *         mysqlxZstdMaxClientCompressionLevel: _var.mysql_configuration_variables_mysqlx_zstd_max_client_compression_level,
 *         netReadTimeout: _var.mysql_configuration_variables_net_read_timeout,
 *         netWriteTimeout: _var.mysql_configuration_variables_net_write_timeout,
 *         parserMaxMemSize: _var.mysql_configuration_variables_parser_max_mem_size,
 *         queryAllocBlockSize: _var.mysql_configuration_variables_query_alloc_block_size,
 *         queryPreallocSize: _var.mysql_configuration_variables_query_prealloc_size,
 *         regexpTimeLimit: _var.mysql_configuration_variables_regexp_time_limit,
 *         sortBufferSize: _var.mysql_configuration_variables_sort_buffer_size,
 *         sqlMode: _var.mysql_configuration_variables_sql_mode,
 *         sqlRequirePrimaryKey: _var.mysql_configuration_variables_sql_require_primary_key,
 *         sqlWarnings: _var.mysql_configuration_variables_sql_warnings,
 *         threadPoolDedicatedListeners: _var.mysql_configuration_variables_thread_pool_dedicated_listeners,
 *         threadPoolMaxTransactionsLimit: _var.mysql_configuration_variables_thread_pool_max_transactions_limit,
 *         timeZone: _var.mysql_configuration_variables_time_zone,
 *         tmpTableSize: _var.mysql_configuration_variables_tmp_table_size,
 *         transactionIsolation: _var.mysql_configuration_variables_transaction_isolation,
 *         waitTimeout: _var.mysql_configuration_variables_wait_timeout,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * MysqlConfigurations can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:Mysql/mysqlConfiguration:MysqlConfiguration test_mysql_configuration "configurations/{configurationId}"
 * ```
 */
export class MysqlConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing MysqlConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MysqlConfigurationState, opts?: pulumi.CustomResourceOptions): MysqlConfiguration {
        return new MysqlConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Mysql/mysqlConfiguration:MysqlConfiguration';

    /**
     * Returns true if the given object is an instance of MysqlConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MysqlConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MysqlConfiguration.__pulumiType;
    }

    /**
     * The OCID of the compartment.
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    public readonly definedTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * (Updatable) User-provided data about the Configuration.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * (Updatable) The display name of the Configuration.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    public readonly freeformTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
     */
    public readonly initVariables!: pulumi.Output<outputs.Mysql.MysqlConfigurationInitVariables>;
    /**
     * The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
     */
    public readonly parentConfigurationId!: pulumi.Output<string>;
    /**
     * The name of the associated Shape.
     */
    public readonly shapeName!: pulumi.Output<string>;
    /**
     * The current state of the Configuration.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    /**
     * The Configuration type, DEFAULT or CUSTOM.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * User-defined service variables.
     */
    public readonly variables!: pulumi.Output<outputs.Mysql.MysqlConfigurationVariables>;

    /**
     * Create a MysqlConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MysqlConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MysqlConfigurationArgs | MysqlConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MysqlConfigurationState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["initVariables"] = state ? state.initVariables : undefined;
            resourceInputs["parentConfigurationId"] = state ? state.parentConfigurationId : undefined;
            resourceInputs["shapeName"] = state ? state.shapeName : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["variables"] = state ? state.variables : undefined;
        } else {
            const args = argsOrState as MysqlConfigurationArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.shapeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shapeName'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["initVariables"] = args ? args.initVariables : undefined;
            resourceInputs["parentConfigurationId"] = args ? args.parentConfigurationId : undefined;
            resourceInputs["shapeName"] = args ? args.shapeName : undefined;
            resourceInputs["variables"] = args ? args.variables : undefined;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MysqlConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MysqlConfiguration resources.
 */
export interface MysqlConfigurationState {
    /**
     * The OCID of the compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) User-provided data about the Configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) The display name of the Configuration.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
     */
    initVariables?: pulumi.Input<inputs.Mysql.MysqlConfigurationInitVariables>;
    /**
     * The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
     */
    parentConfigurationId?: pulumi.Input<string>;
    /**
     * The name of the associated Shape.
     */
    shapeName?: pulumi.Input<string>;
    /**
     * The current state of the Configuration.
     */
    state?: pulumi.Input<string>;
    /**
     * The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * The Configuration type, DEFAULT or CUSTOM.
     */
    type?: pulumi.Input<string>;
    /**
     * User-defined service variables.
     */
    variables?: pulumi.Input<inputs.Mysql.MysqlConfigurationVariables>;
}

/**
 * The set of arguments for constructing a MysqlConfiguration resource.
 */
export interface MysqlConfigurationArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) User-provided data about the Configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) The display name of the Configuration.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
     */
    initVariables?: pulumi.Input<inputs.Mysql.MysqlConfigurationInitVariables>;
    /**
     * The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
     */
    parentConfigurationId?: pulumi.Input<string>;
    /**
     * The name of the associated Shape.
     */
    shapeName: pulumi.Input<string>;
    /**
     * User-defined service variables.
     */
    variables?: pulumi.Input<inputs.Mysql.MysqlConfigurationVariables>;
}
