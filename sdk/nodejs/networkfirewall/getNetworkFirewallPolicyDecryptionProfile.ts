// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Network Firewall Policy Decryption Profile resource in Oracle Cloud Infrastructure Network Firewall service.
 *
 * Get Decryption Profile by the given name in the context of network firewall policy.
 */
export function getNetworkFirewallPolicyDecryptionProfile(args: GetNetworkFirewallPolicyDecryptionProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkFirewallPolicyDecryptionProfileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:NetworkFirewall/getNetworkFirewallPolicyDecryptionProfile:getNetworkFirewallPolicyDecryptionProfile", {
        "name": args.name,
        "networkFirewallPolicyId": args.networkFirewallPolicyId,
    }, opts);
}

/**
 * A collection of arguments for invoking getNetworkFirewallPolicyDecryptionProfile.
 */
export interface GetNetworkFirewallPolicyDecryptionProfileArgs {
    /**
     * Unique Name of the decryption profile.
     */
    name: string;
    /**
     * Unique Network Firewall Policy identifier
     */
    networkFirewallPolicyId: string;
}

/**
 * A collection of values returned by getNetworkFirewallPolicyDecryptionProfile.
 */
export interface GetNetworkFirewallPolicyDecryptionProfileResult {
    /**
     * Whether to block sessions if the server's certificate uses extensions other than key usage and/or extended key usage.
     */
    readonly areCertificateExtensionsRestricted: boolean;
    readonly id: string;
    /**
     * Whether to automatically append SAN to impersonating certificate if server certificate is missing SAN.
     */
    readonly isAutoIncludeAltName: boolean;
    /**
     * Whether to block sessions if server's certificate is expired.
     */
    readonly isExpiredCertificateBlocked: boolean;
    /**
     * Whether to block sessions if the firewall is temporarily unable to decrypt their traffic.
     */
    readonly isOutOfCapacityBlocked: boolean;
    /**
     * Whether to block sessions if the revocation status check for server's certificate does not succeed within the maximum allowed time (defaulting to 5 seconds).
     */
    readonly isRevocationStatusTimeoutBlocked: boolean;
    /**
     * Whether to block sessions if the revocation status check for server's certificate results in "unknown".
     */
    readonly isUnknownRevocationStatusBlocked: boolean;
    /**
     * Whether to block sessions if SSL cipher suite is not supported.
     */
    readonly isUnsupportedCipherBlocked: boolean;
    /**
     * Whether to block sessions if SSL version is not supported.
     */
    readonly isUnsupportedVersionBlocked: boolean;
    /**
     * Whether to block sessions if server's certificate is issued by an untrusted certificate authority (CA).
     */
    readonly isUntrustedIssuerBlocked: boolean;
    /**
     * Unique Name of the decryption profile.
     */
    readonly name: string;
    readonly networkFirewallPolicyId: string;
    /**
     * OCID of the Network Firewall Policy this decryption profile belongs to.
     */
    readonly parentResourceId: string;
    /**
     * Describes the type of Decryption Profile SslForwardProxy or SslInboundInspection.
     */
    readonly type: string;
}
/**
 * This data source provides details about a specific Network Firewall Policy Decryption Profile resource in Oracle Cloud Infrastructure Network Firewall service.
 *
 * Get Decryption Profile by the given name in the context of network firewall policy.
 */
export function getNetworkFirewallPolicyDecryptionProfileOutput(args: GetNetworkFirewallPolicyDecryptionProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkFirewallPolicyDecryptionProfileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:NetworkFirewall/getNetworkFirewallPolicyDecryptionProfile:getNetworkFirewallPolicyDecryptionProfile", {
        "name": args.name,
        "networkFirewallPolicyId": args.networkFirewallPolicyId,
    }, opts);
}

/**
 * A collection of arguments for invoking getNetworkFirewallPolicyDecryptionProfile.
 */
export interface GetNetworkFirewallPolicyDecryptionProfileOutputArgs {
    /**
     * Unique Name of the decryption profile.
     */
    name: pulumi.Input<string>;
    /**
     * Unique Network Firewall Policy identifier
     */
    networkFirewallPolicyId: pulumi.Input<string>;
}
