// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Network Firewall Policy Tunnel Inspection Rule resource in Oracle Cloud Infrastructure Network Firewall service.
 *
 * Get tunnel inspection rule by the given name in the context of network firewall policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testNetworkFirewallPolicyTunnelInspectionRule = oci.NetworkFirewall.getNetworkFirewallPolicyTunnelInspectionRule({
 *     networkFirewallPolicyId: testNetworkFirewallPolicy.id,
 *     tunnelInspectionRuleName: testRule.name,
 * });
 * ```
 */
export function getNetworkFirewallPolicyTunnelInspectionRule(args: GetNetworkFirewallPolicyTunnelInspectionRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkFirewallPolicyTunnelInspectionRuleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:NetworkFirewall/getNetworkFirewallPolicyTunnelInspectionRule:getNetworkFirewallPolicyTunnelInspectionRule", {
        "networkFirewallPolicyId": args.networkFirewallPolicyId,
        "tunnelInspectionRuleName": args.tunnelInspectionRuleName,
    }, opts);
}

/**
 * A collection of arguments for invoking getNetworkFirewallPolicyTunnelInspectionRule.
 */
export interface GetNetworkFirewallPolicyTunnelInspectionRuleArgs {
    /**
     * Unique Network Firewall Policy identifier
     */
    networkFirewallPolicyId: string;
    /**
     * Unique identifier for Tunnel Inspection Rules in the network firewall policy.
     */
    tunnelInspectionRuleName: string;
}

/**
 * A collection of values returned by getNetworkFirewallPolicyTunnelInspectionRule.
 */
export interface GetNetworkFirewallPolicyTunnelInspectionRuleResult {
    /**
     * Types of Inspect Action on the Traffic flow.
     * * INSPECT - Inspect the traffic.
     * * INSPECT_AND_CAPTURE_LOG - Inspect and capture logs for the traffic.
     */
    readonly action: string;
    /**
     * Criteria to evaluate against incoming network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic.
     */
    readonly conditions: outputs.NetworkFirewall.GetNetworkFirewallPolicyTunnelInspectionRuleCondition[];
    readonly id: string;
    /**
     * Name for the Tunnel Inspection Rule, must be unique within the policy.
     */
    readonly name: string;
    readonly networkFirewallPolicyId: string;
    /**
     * OCID of the Network Firewall Policy this Tunnel Inspection Rule belongs to.
     */
    readonly parentResourceId: string;
    /**
     * An object which defines the position of the rule.
     */
    readonly positions: outputs.NetworkFirewall.GetNetworkFirewallPolicyTunnelInspectionRulePosition[];
    /**
     * The priority order in which this rule should be evaluated
     */
    readonly priorityOrder: string;
    /**
     * Vxlan Inspect profile used in Vxlan Tunnel Inspection Rules.
     */
    readonly profiles: outputs.NetworkFirewall.GetNetworkFirewallPolicyTunnelInspectionRuleProfile[];
    /**
     * Types of Tunnel Inspection Protocol to be applied on the traffic.
     * * VXLAN - VXLAN Tunnel Inspection Protocol will be applied on the traffic.
     */
    readonly protocol: string;
    readonly tunnelInspectionRuleName: string;
}
/**
 * This data source provides details about a specific Network Firewall Policy Tunnel Inspection Rule resource in Oracle Cloud Infrastructure Network Firewall service.
 *
 * Get tunnel inspection rule by the given name in the context of network firewall policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testNetworkFirewallPolicyTunnelInspectionRule = oci.NetworkFirewall.getNetworkFirewallPolicyTunnelInspectionRule({
 *     networkFirewallPolicyId: testNetworkFirewallPolicy.id,
 *     tunnelInspectionRuleName: testRule.name,
 * });
 * ```
 */
export function getNetworkFirewallPolicyTunnelInspectionRuleOutput(args: GetNetworkFirewallPolicyTunnelInspectionRuleOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNetworkFirewallPolicyTunnelInspectionRuleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:NetworkFirewall/getNetworkFirewallPolicyTunnelInspectionRule:getNetworkFirewallPolicyTunnelInspectionRule", {
        "networkFirewallPolicyId": args.networkFirewallPolicyId,
        "tunnelInspectionRuleName": args.tunnelInspectionRuleName,
    }, opts);
}

/**
 * A collection of arguments for invoking getNetworkFirewallPolicyTunnelInspectionRule.
 */
export interface GetNetworkFirewallPolicyTunnelInspectionRuleOutputArgs {
    /**
     * Unique Network Firewall Policy identifier
     */
    networkFirewallPolicyId: pulumi.Input<string>;
    /**
     * Unique identifier for Tunnel Inspection Rules in the network firewall policy.
     */
    tunnelInspectionRuleName: pulumi.Input<string>;
}
