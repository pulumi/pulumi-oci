// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Network Firewall Policy Decryption Rule resource in Oracle Cloud Infrastructure Network Firewall service.
 *
 * Creates a new Decryption Rule for the Network Firewall Policy.
 *
 * ## Import
 *
 * NetworkFirewallPolicyDecryptionRules can be imported using the `name`, e.g.
 *
 * ```sh
 * $ pulumi import oci:NetworkFirewall/networkFirewallPolicyDecryptionRule:NetworkFirewallPolicyDecryptionRule test_network_firewall_policy_decryption_rule "networkFirewallPolicies/{networkFirewallPolicyId}/decryptionRules/{decryptionRuleName}"
 * ```
 */
export class NetworkFirewallPolicyDecryptionRule extends pulumi.CustomResource {
    /**
     * Get an existing NetworkFirewallPolicyDecryptionRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkFirewallPolicyDecryptionRuleState, opts?: pulumi.CustomResourceOptions): NetworkFirewallPolicyDecryptionRule {
        return new NetworkFirewallPolicyDecryptionRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:NetworkFirewall/networkFirewallPolicyDecryptionRule:NetworkFirewallPolicyDecryptionRule';

    /**
     * Returns true if the given object is an instance of NetworkFirewallPolicyDecryptionRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkFirewallPolicyDecryptionRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkFirewallPolicyDecryptionRule.__pulumiType;
    }

    /**
     * (Updatable) Action:
     * * NO_DECRYPT - Matching traffic is not decrypted.
     * * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
     */
    declare public readonly action: pulumi.Output<string>;
    /**
     * (Updatable) Match criteria used in Decryption Rule used on the firewall policy rules. The resources mentioned must already be present in the policy before being referenced in the rule.
     */
    declare public readonly condition: pulumi.Output<outputs.NetworkFirewall.NetworkFirewallPolicyDecryptionRuleCondition>;
    /**
     * (Updatable) The name of the decryption profile to use.
     */
    declare public readonly decryptionProfile: pulumi.Output<string | undefined>;
    /**
     * Name for the decryption rule, must be unique within the policy.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Unique Network Firewall Policy identifier
     */
    declare public readonly networkFirewallPolicyId: pulumi.Output<string>;
    /**
     * OCID of the Network Firewall Policy this decryption rule belongs to.
     */
    declare public /*out*/ readonly parentResourceId: pulumi.Output<string>;
    /**
     * (Updatable) An object which defines the position of the rule. Only one of `afterRule` or `beforeRule` should be provided.
     */
    declare public readonly position: pulumi.Output<outputs.NetworkFirewall.NetworkFirewallPolicyDecryptionRulePosition>;
    declare public readonly priorityOrder: pulumi.Output<string | undefined>;
    /**
     * (Updatable) The name of a mapped secret. Its `type` must match that of the specified decryption profile.
     */
    declare public readonly secret: pulumi.Output<string | undefined>;

    /**
     * Create a NetworkFirewallPolicyDecryptionRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkFirewallPolicyDecryptionRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkFirewallPolicyDecryptionRuleArgs | NetworkFirewallPolicyDecryptionRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkFirewallPolicyDecryptionRuleState | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["condition"] = state?.condition;
            resourceInputs["decryptionProfile"] = state?.decryptionProfile;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkFirewallPolicyId"] = state?.networkFirewallPolicyId;
            resourceInputs["parentResourceId"] = state?.parentResourceId;
            resourceInputs["position"] = state?.position;
            resourceInputs["priorityOrder"] = state?.priorityOrder;
            resourceInputs["secret"] = state?.secret;
        } else {
            const args = argsOrState as NetworkFirewallPolicyDecryptionRuleArgs | undefined;
            if (args?.action === undefined && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if (args?.condition === undefined && !opts.urn) {
                throw new Error("Missing required property 'condition'");
            }
            if (args?.networkFirewallPolicyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkFirewallPolicyId'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["condition"] = args?.condition;
            resourceInputs["decryptionProfile"] = args?.decryptionProfile;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkFirewallPolicyId"] = args?.networkFirewallPolicyId;
            resourceInputs["position"] = args?.position;
            resourceInputs["priorityOrder"] = args?.priorityOrder;
            resourceInputs["secret"] = args?.secret;
            resourceInputs["parentResourceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkFirewallPolicyDecryptionRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkFirewallPolicyDecryptionRule resources.
 */
export interface NetworkFirewallPolicyDecryptionRuleState {
    /**
     * (Updatable) Action:
     * * NO_DECRYPT - Matching traffic is not decrypted.
     * * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
     */
    action?: pulumi.Input<string>;
    /**
     * (Updatable) Match criteria used in Decryption Rule used on the firewall policy rules. The resources mentioned must already be present in the policy before being referenced in the rule.
     */
    condition?: pulumi.Input<inputs.NetworkFirewall.NetworkFirewallPolicyDecryptionRuleCondition>;
    /**
     * (Updatable) The name of the decryption profile to use.
     */
    decryptionProfile?: pulumi.Input<string>;
    /**
     * Name for the decryption rule, must be unique within the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique Network Firewall Policy identifier
     */
    networkFirewallPolicyId?: pulumi.Input<string>;
    /**
     * OCID of the Network Firewall Policy this decryption rule belongs to.
     */
    parentResourceId?: pulumi.Input<string>;
    /**
     * (Updatable) An object which defines the position of the rule. Only one of `afterRule` or `beforeRule` should be provided.
     */
    position?: pulumi.Input<inputs.NetworkFirewall.NetworkFirewallPolicyDecryptionRulePosition>;
    priorityOrder?: pulumi.Input<string>;
    /**
     * (Updatable) The name of a mapped secret. Its `type` must match that of the specified decryption profile.
     */
    secret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkFirewallPolicyDecryptionRule resource.
 */
export interface NetworkFirewallPolicyDecryptionRuleArgs {
    /**
     * (Updatable) Action:
     * * NO_DECRYPT - Matching traffic is not decrypted.
     * * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
     */
    action: pulumi.Input<string>;
    /**
     * (Updatable) Match criteria used in Decryption Rule used on the firewall policy rules. The resources mentioned must already be present in the policy before being referenced in the rule.
     */
    condition: pulumi.Input<inputs.NetworkFirewall.NetworkFirewallPolicyDecryptionRuleCondition>;
    /**
     * (Updatable) The name of the decryption profile to use.
     */
    decryptionProfile?: pulumi.Input<string>;
    /**
     * Name for the decryption rule, must be unique within the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique Network Firewall Policy identifier
     */
    networkFirewallPolicyId: pulumi.Input<string>;
    /**
     * (Updatable) An object which defines the position of the rule. Only one of `afterRule` or `beforeRule` should be provided.
     */
    position?: pulumi.Input<inputs.NetworkFirewall.NetworkFirewallPolicyDecryptionRulePosition>;
    priorityOrder?: pulumi.Input<string>;
    /**
     * (Updatable) The name of a mapped secret. Its `type` must match that of the specified decryption profile.
     */
    secret?: pulumi.Input<string>;
}
