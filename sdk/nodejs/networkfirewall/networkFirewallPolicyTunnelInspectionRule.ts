// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Network Firewall Policy Tunnel Inspection Rule resource in Oracle Cloud Infrastructure Network Firewall service.
 *
 * Creates a new tunnel inspection rule for the network firewall policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testNetworkFirewallPolicyTunnelInspectionRule = new oci.networkfirewall.NetworkFirewallPolicyTunnelInspectionRule("test_network_firewall_policy_tunnel_inspection_rule", {
 *     condition: {
 *         destinationAddresses: networkFirewallPolicyTunnelInspectionRuleConditionDestinationAddress,
 *         sourceAddresses: networkFirewallPolicyTunnelInspectionRuleConditionSourceAddress,
 *     },
 *     name: networkFirewallPolicyTunnelInspectionRuleName,
 *     networkFirewallPolicyId: testNetworkFirewallPolicy.id,
 *     protocol: networkFirewallPolicyTunnelInspectionRuleProtocol,
 *     action: networkFirewallPolicyTunnelInspectionRuleAction,
 *     position: {
 *         afterRule: networkFirewallPolicyTunnelInspectionRulePositionAfterRule,
 *         beforeRule: networkFirewallPolicyTunnelInspectionRulePositionBeforeRule,
 *     },
 *     profile: {
 *         mustReturnTrafficToSource: networkFirewallPolicyTunnelInspectionRuleProfileMustReturnTrafficToSource,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * NetworkFirewallPolicyTunnelInspectionRules can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:NetworkFirewall/networkFirewallPolicyTunnelInspectionRule:NetworkFirewallPolicyTunnelInspectionRule test_network_firewall_policy_tunnel_inspection_rule "networkFirewallPolicies/{networkFirewallPolicyId}/tunnelInspectionRules/{tunnelInspectionRuleName}"
 * ```
 */
export class NetworkFirewallPolicyTunnelInspectionRule extends pulumi.CustomResource {
    /**
     * Get an existing NetworkFirewallPolicyTunnelInspectionRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkFirewallPolicyTunnelInspectionRuleState, opts?: pulumi.CustomResourceOptions): NetworkFirewallPolicyTunnelInspectionRule {
        return new NetworkFirewallPolicyTunnelInspectionRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:NetworkFirewall/networkFirewallPolicyTunnelInspectionRule:NetworkFirewallPolicyTunnelInspectionRule';

    /**
     * Returns true if the given object is an instance of NetworkFirewallPolicyTunnelInspectionRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkFirewallPolicyTunnelInspectionRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkFirewallPolicyTunnelInspectionRule.__pulumiType;
    }

    /**
     * (Updatable) Types of Inspect Action on the traffic flow.
     * * INSPECT - Inspect the traffic.
     * * INSPECT_AND_CAPTURE_LOG - Inspect and capture logs for the traffic.
     */
    declare public readonly action: pulumi.Output<string>;
    /**
     * (Updatable) Criteria to evaluate against incoming network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic.
     */
    declare public readonly condition: pulumi.Output<outputs.NetworkFirewall.NetworkFirewallPolicyTunnelInspectionRuleCondition>;
    /**
     * Name for the Tunnel Inspection Rule, must be unique within the policy.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Unique Network Firewall Policy identifier
     */
    declare public readonly networkFirewallPolicyId: pulumi.Output<string>;
    /**
     * OCID of the Network Firewall Policy this Tunnel Inspection Rule belongs to.
     */
    declare public /*out*/ readonly parentResourceId: pulumi.Output<string>;
    /**
     * (Updatable) An object which defines the position of the rule.
     */
    declare public readonly position: pulumi.Output<outputs.NetworkFirewall.NetworkFirewallPolicyTunnelInspectionRulePosition>;
    /**
     * The priority order in which this rule should be evaluated
     */
    declare public /*out*/ readonly priorityOrder: pulumi.Output<string>;
    /**
     * (Updatable) Vxlan Inspect profile used in Vxlan Tunnel Inspection Rules.
     */
    declare public readonly profile: pulumi.Output<outputs.NetworkFirewall.NetworkFirewallPolicyTunnelInspectionRuleProfile>;
    /**
     * (Updatable) Types of Tunnel Inspection Protocol to be applied on the traffic.
     * * VXLAN - VXLAN Tunnel Inspection Protocol will be applied on the traffic.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly protocol: pulumi.Output<string>;

    /**
     * Create a NetworkFirewallPolicyTunnelInspectionRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkFirewallPolicyTunnelInspectionRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkFirewallPolicyTunnelInspectionRuleArgs | NetworkFirewallPolicyTunnelInspectionRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkFirewallPolicyTunnelInspectionRuleState | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["condition"] = state?.condition;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkFirewallPolicyId"] = state?.networkFirewallPolicyId;
            resourceInputs["parentResourceId"] = state?.parentResourceId;
            resourceInputs["position"] = state?.position;
            resourceInputs["priorityOrder"] = state?.priorityOrder;
            resourceInputs["profile"] = state?.profile;
            resourceInputs["protocol"] = state?.protocol;
        } else {
            const args = argsOrState as NetworkFirewallPolicyTunnelInspectionRuleArgs | undefined;
            if (args?.condition === undefined && !opts.urn) {
                throw new Error("Missing required property 'condition'");
            }
            if (args?.networkFirewallPolicyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkFirewallPolicyId'");
            }
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["condition"] = args?.condition;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkFirewallPolicyId"] = args?.networkFirewallPolicyId;
            resourceInputs["position"] = args?.position;
            resourceInputs["profile"] = args?.profile;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["parentResourceId"] = undefined /*out*/;
            resourceInputs["priorityOrder"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkFirewallPolicyTunnelInspectionRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkFirewallPolicyTunnelInspectionRule resources.
 */
export interface NetworkFirewallPolicyTunnelInspectionRuleState {
    /**
     * (Updatable) Types of Inspect Action on the traffic flow.
     * * INSPECT - Inspect the traffic.
     * * INSPECT_AND_CAPTURE_LOG - Inspect and capture logs for the traffic.
     */
    action?: pulumi.Input<string>;
    /**
     * (Updatable) Criteria to evaluate against incoming network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic.
     */
    condition?: pulumi.Input<inputs.NetworkFirewall.NetworkFirewallPolicyTunnelInspectionRuleCondition>;
    /**
     * Name for the Tunnel Inspection Rule, must be unique within the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique Network Firewall Policy identifier
     */
    networkFirewallPolicyId?: pulumi.Input<string>;
    /**
     * OCID of the Network Firewall Policy this Tunnel Inspection Rule belongs to.
     */
    parentResourceId?: pulumi.Input<string>;
    /**
     * (Updatable) An object which defines the position of the rule.
     */
    position?: pulumi.Input<inputs.NetworkFirewall.NetworkFirewallPolicyTunnelInspectionRulePosition>;
    /**
     * The priority order in which this rule should be evaluated
     */
    priorityOrder?: pulumi.Input<string>;
    /**
     * (Updatable) Vxlan Inspect profile used in Vxlan Tunnel Inspection Rules.
     */
    profile?: pulumi.Input<inputs.NetworkFirewall.NetworkFirewallPolicyTunnelInspectionRuleProfile>;
    /**
     * (Updatable) Types of Tunnel Inspection Protocol to be applied on the traffic.
     * * VXLAN - VXLAN Tunnel Inspection Protocol will be applied on the traffic.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    protocol?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkFirewallPolicyTunnelInspectionRule resource.
 */
export interface NetworkFirewallPolicyTunnelInspectionRuleArgs {
    /**
     * (Updatable) Types of Inspect Action on the traffic flow.
     * * INSPECT - Inspect the traffic.
     * * INSPECT_AND_CAPTURE_LOG - Inspect and capture logs for the traffic.
     */
    action?: pulumi.Input<string>;
    /**
     * (Updatable) Criteria to evaluate against incoming network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic.
     */
    condition: pulumi.Input<inputs.NetworkFirewall.NetworkFirewallPolicyTunnelInspectionRuleCondition>;
    /**
     * Name for the Tunnel Inspection Rule, must be unique within the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique Network Firewall Policy identifier
     */
    networkFirewallPolicyId: pulumi.Input<string>;
    /**
     * (Updatable) An object which defines the position of the rule.
     */
    position?: pulumi.Input<inputs.NetworkFirewall.NetworkFirewallPolicyTunnelInspectionRulePosition>;
    /**
     * (Updatable) Vxlan Inspect profile used in Vxlan Tunnel Inspection Rules.
     */
    profile?: pulumi.Input<inputs.NetworkFirewall.NetworkFirewallPolicyTunnelInspectionRuleProfile>;
    /**
     * (Updatable) Types of Tunnel Inspection Protocol to be applied on the traffic.
     * * VXLAN - VXLAN Tunnel Inspection Protocol will be applied on the traffic.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    protocol: pulumi.Input<string>;
}
