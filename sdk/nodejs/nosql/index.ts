// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ConfigurationArgs, ConfigurationState } from "./configuration";
export type Configuration = import("./configuration").Configuration;
export const Configuration: typeof import("./configuration").Configuration = null as any;
utilities.lazyLoad(exports, ["Configuration"], () => require("./configuration"));

export { GetConfigurationArgs, GetConfigurationResult, GetConfigurationOutputArgs } from "./getConfiguration";
export const getConfiguration: typeof import("./getConfiguration").getConfiguration = null as any;
export const getConfigurationOutput: typeof import("./getConfiguration").getConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getConfiguration","getConfigurationOutput"], () => require("./getConfiguration"));

export { GetIndexArgs, GetIndexResult, GetIndexOutputArgs } from "./getIndex";
export const getIndex: typeof import("./getIndex").getIndex = null as any;
export const getIndexOutput: typeof import("./getIndex").getIndexOutput = null as any;
utilities.lazyLoad(exports, ["getIndex","getIndexOutput"], () => require("./getIndex"));

export { GetIndexesArgs, GetIndexesResult, GetIndexesOutputArgs } from "./getIndexes";
export const getIndexes: typeof import("./getIndexes").getIndexes = null as any;
export const getIndexesOutput: typeof import("./getIndexes").getIndexesOutput = null as any;
utilities.lazyLoad(exports, ["getIndexes","getIndexesOutput"], () => require("./getIndexes"));

export { GetTableArgs, GetTableResult, GetTableOutputArgs } from "./getTable";
export const getTable: typeof import("./getTable").getTable = null as any;
export const getTableOutput: typeof import("./getTable").getTableOutput = null as any;
utilities.lazyLoad(exports, ["getTable","getTableOutput"], () => require("./getTable"));

export { GetTablesArgs, GetTablesResult, GetTablesOutputArgs } from "./getTables";
export const getTables: typeof import("./getTables").getTables = null as any;
export const getTablesOutput: typeof import("./getTables").getTablesOutput = null as any;
utilities.lazyLoad(exports, ["getTables","getTablesOutput"], () => require("./getTables"));

export { IndexArgs, IndexState } from "./index_";
export type Index = import("./index_").Index;
export const Index: typeof import("./index_").Index = null as any;
utilities.lazyLoad(exports, ["Index"], () => require("./index_"));

export { TableArgs, TableState } from "./table";
export type Table = import("./table").Table;
export const Table: typeof import("./table").Table = null as any;
utilities.lazyLoad(exports, ["Table"], () => require("./table"));

export { TableReplicaArgs, TableReplicaState } from "./tableReplica";
export type TableReplica = import("./tableReplica").TableReplica;
export const TableReplica: typeof import("./tableReplica").TableReplica = null as any;
utilities.lazyLoad(exports, ["TableReplica"], () => require("./tableReplica"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:Nosql/configuration:Configuration":
                return new Configuration(name, <any>undefined, { urn })
            case "oci:Nosql/index:Index":
                return new Index(name, <any>undefined, { urn })
            case "oci:Nosql/table:Table":
                return new Table(name, <any>undefined, { urn })
            case "oci:Nosql/tableReplica:TableReplica":
                return new TableReplica(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "Nosql/configuration", _module)
pulumi.runtime.registerResourceModule("oci", "Nosql/index", _module)
pulumi.runtime.registerResourceModule("oci", "Nosql/table", _module)
pulumi.runtime.registerResourceModule("oci", "Nosql/tableReplica", _module)
