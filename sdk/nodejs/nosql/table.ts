// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Table resource in Oracle Cloud Infrastructure NoSQL Database service.
 *
 * Create a new table.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testTable = new oci.nosql.Table("test_table", {
 *     compartmentId: compartmentId,
 *     ddlStatement: tableDdlStatement,
 *     name: tableName,
 *     definedTags: tableDefinedTags,
 *     freeformTags: {
 *         "bar-key": "value",
 *     },
 *     isAutoReclaimable: tableIsAutoReclaimable,
 *     tableLimits: {
 *         maxReadUnits: tableTableLimitsMaxReadUnits,
 *         maxStorageInGbs: tableTableLimitsMaxStorageInGbs,
 *         maxWriteUnits: tableTableLimitsMaxWriteUnits,
 *         capacityMode: tableTableLimitsCapacityMode,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Tables can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:Nosql/table:Table test_table "id"
 * ```
 */
export class Table extends pulumi.CustomResource {
    /**
     * Get an existing Table resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TableState, opts?: pulumi.CustomResourceOptions): Table {
        return new Table(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Nosql/table:Table';

    /**
     * Returns true if the given object is an instance of Table.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Table {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Table.__pulumiType;
    }

    /**
     * (Updatable) Compartment Identifier.
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * (Updatable) CREATE TABLE DDL statement. While updating an existing table, note that the column order should not be changed, and new columns can only be appended at the end of the table.
     */
    declare public readonly ddlStatement: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
     */
    declare public readonly definedTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    declare public readonly freeformTags: pulumi.Output<{[key: string]: string}>;
    /**
     * True if table can be reclaimed after an idle period.
     */
    declare public readonly isAutoReclaimable: pulumi.Output<boolean>;
    /**
     * True if this table is currently a member of a replication set.
     */
    declare public /*out*/ readonly isMultiRegion: pulumi.Output<boolean>;
    /**
     * A message describing the current state in more detail.
     */
    declare public /*out*/ readonly lifecycleDetails: pulumi.Output<string>;
    /**
     * If this table is in a replication set, this value represents the progress of the initialization of the replica's data.  A value of 100 indicates that initialization has completed.
     */
    declare public /*out*/ readonly localReplicaInitializationInPercent: pulumi.Output<number>;
    /**
     * Table name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * An array of Replica listing this table's replicas, if any
     */
    declare public /*out*/ readonly replicas: pulumi.Output<outputs.Nosql.TableReplica[]>;
    /**
     * The current state of this table's schema. Available states are MUTABLE - The schema can be changed. The table is not eligible for replication. FROZEN - The schema is immutable. The table is eligible for replication.
     */
    declare public /*out*/ readonly schemaState: pulumi.Output<string>;
    /**
     * The table schema information as a JSON object.
     */
    declare public /*out*/ readonly schemas: pulumi.Output<outputs.Nosql.TableSchema[]>;
    /**
     * The state of a table.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
     */
    declare public /*out*/ readonly systemTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) Throughput and storage limits configuration of a table. It is required for top level table, must be null for child table as child table shares its top parent table's limits.
     */
    declare public readonly tableLimits: pulumi.Output<outputs.Nosql.TableTableLimits>;
    /**
     * The time the the table was created. An RFC3339 formatted datetime string.
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
     */
    declare public /*out*/ readonly timeOfExpiration: pulumi.Output<string>;
    /**
     * The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;

    /**
     * Create a Table resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TableArgs | TableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TableState | undefined;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["ddlStatement"] = state?.ddlStatement;
            resourceInputs["definedTags"] = state?.definedTags;
            resourceInputs["freeformTags"] = state?.freeformTags;
            resourceInputs["isAutoReclaimable"] = state?.isAutoReclaimable;
            resourceInputs["isMultiRegion"] = state?.isMultiRegion;
            resourceInputs["lifecycleDetails"] = state?.lifecycleDetails;
            resourceInputs["localReplicaInitializationInPercent"] = state?.localReplicaInitializationInPercent;
            resourceInputs["name"] = state?.name;
            resourceInputs["replicas"] = state?.replicas;
            resourceInputs["schemaState"] = state?.schemaState;
            resourceInputs["schemas"] = state?.schemas;
            resourceInputs["state"] = state?.state;
            resourceInputs["systemTags"] = state?.systemTags;
            resourceInputs["tableLimits"] = state?.tableLimits;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeOfExpiration"] = state?.timeOfExpiration;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
        } else {
            const args = argsOrState as TableArgs | undefined;
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.ddlStatement === undefined && !opts.urn) {
                throw new Error("Missing required property 'ddlStatement'");
            }
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["ddlStatement"] = args?.ddlStatement;
            resourceInputs["definedTags"] = args?.definedTags;
            resourceInputs["freeformTags"] = args?.freeformTags;
            resourceInputs["isAutoReclaimable"] = args?.isAutoReclaimable;
            resourceInputs["name"] = args?.name;
            resourceInputs["tableLimits"] = args?.tableLimits;
            resourceInputs["isMultiRegion"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["localReplicaInitializationInPercent"] = undefined /*out*/;
            resourceInputs["replicas"] = undefined /*out*/;
            resourceInputs["schemaState"] = undefined /*out*/;
            resourceInputs["schemas"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeOfExpiration"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Table.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Table resources.
 */
export interface TableState {
    /**
     * (Updatable) Compartment Identifier.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) CREATE TABLE DDL statement. While updating an existing table, note that the column order should not be changed, and new columns can only be appended at the end of the table.
     */
    ddlStatement?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * True if table can be reclaimed after an idle period.
     */
    isAutoReclaimable?: pulumi.Input<boolean>;
    /**
     * True if this table is currently a member of a replication set.
     */
    isMultiRegion?: pulumi.Input<boolean>;
    /**
     * A message describing the current state in more detail.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * If this table is in a replication set, this value represents the progress of the initialization of the replica's data.  A value of 100 indicates that initialization has completed.
     */
    localReplicaInitializationInPercent?: pulumi.Input<number>;
    /**
     * Table name.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of Replica listing this table's replicas, if any
     */
    replicas?: pulumi.Input<pulumi.Input<inputs.Nosql.TableReplica>[]>;
    /**
     * The current state of this table's schema. Available states are MUTABLE - The schema can be changed. The table is not eligible for replication. FROZEN - The schema is immutable. The table is eligible for replication.
     */
    schemaState?: pulumi.Input<string>;
    /**
     * The table schema information as a JSON object.
     */
    schemas?: pulumi.Input<pulumi.Input<inputs.Nosql.TableSchema>[]>;
    /**
     * The state of a table.
     */
    state?: pulumi.Input<string>;
    /**
     * Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
     */
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Throughput and storage limits configuration of a table. It is required for top level table, must be null for child table as child table shares its top parent table's limits.
     */
    tableLimits?: pulumi.Input<inputs.Nosql.TableTableLimits>;
    /**
     * The time the the table was created. An RFC3339 formatted datetime string.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
     */
    timeOfExpiration?: pulumi.Input<string>;
    /**
     * The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
     */
    timeUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Table resource.
 */
export interface TableArgs {
    /**
     * (Updatable) Compartment Identifier.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) CREATE TABLE DDL statement. While updating an existing table, note that the column order should not be changed, and new columns can only be appended at the end of the table.
     */
    ddlStatement: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * True if table can be reclaimed after an idle period.
     */
    isAutoReclaimable?: pulumi.Input<boolean>;
    /**
     * Table name.
     */
    name?: pulumi.Input<string>;
    /**
     * (Updatable) Throughput and storage limits configuration of a table. It is required for top level table, must be null for child table as child table shares its top parent table's limits.
     */
    tableLimits?: pulumi.Input<inputs.Nosql.TableTableLimits>;
}
