// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class PrivateEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing PrivateEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivateEndpointState, opts?: pulumi.CustomResourceOptions): PrivateEndpoint {
        return new PrivateEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:ObjectStorage/privateEndpoint:PrivateEndpoint';

    /**
     * Returns true if the given object is an instance of PrivateEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivateEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivateEndpoint.__pulumiType;
    }

    declare public readonly accessTargets: pulumi.Output<outputs.ObjectStorage.PrivateEndpointAccessTarget[]>;
    declare public readonly additionalPrefixes: pulumi.Output<string[] | undefined>;
    declare public readonly compartmentId: pulumi.Output<string>;
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    declare public readonly definedTags: pulumi.Output<{[key: string]: string}>;
    declare public /*out*/ readonly etag: pulumi.Output<string>;
    declare public readonly fqdns: pulumi.Output<{[key: string]: {[key: string]: {[key: string]: string}}} | undefined>;
    declare public readonly freeformTags: pulumi.Output<{[key: string]: string}>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly namespace: pulumi.Output<string>;
    declare public readonly nsgIds: pulumi.Output<string[] | undefined>;
    declare public readonly prefix: pulumi.Output<string>;
    declare public readonly privateEndpointIp: pulumi.Output<string>;
    declare public readonly state: pulumi.Output<string>;
    declare public readonly subnetId: pulumi.Output<string>;
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    declare public /*out*/ readonly timeModified: pulumi.Output<string>;

    /**
     * Create a PrivateEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivateEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivateEndpointArgs | PrivateEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivateEndpointState | undefined;
            resourceInputs["accessTargets"] = state?.accessTargets;
            resourceInputs["additionalPrefixes"] = state?.additionalPrefixes;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["definedTags"] = state?.definedTags;
            resourceInputs["etag"] = state?.etag;
            resourceInputs["fqdns"] = state?.fqdns;
            resourceInputs["freeformTags"] = state?.freeformTags;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["nsgIds"] = state?.nsgIds;
            resourceInputs["prefix"] = state?.prefix;
            resourceInputs["privateEndpointIp"] = state?.privateEndpointIp;
            resourceInputs["state"] = state?.state;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeModified"] = state?.timeModified;
        } else {
            const args = argsOrState as PrivateEndpointArgs | undefined;
            if (args?.accessTargets === undefined && !opts.urn) {
                throw new Error("Missing required property 'accessTargets'");
            }
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.namespace === undefined && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if (args?.prefix === undefined && !opts.urn) {
                throw new Error("Missing required property 'prefix'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["accessTargets"] = args?.accessTargets;
            resourceInputs["additionalPrefixes"] = args?.additionalPrefixes;
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["definedTags"] = args?.definedTags;
            resourceInputs["fqdns"] = args?.fqdns;
            resourceInputs["freeformTags"] = args?.freeformTags;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["nsgIds"] = args?.nsgIds;
            resourceInputs["prefix"] = args?.prefix;
            resourceInputs["privateEndpointIp"] = args?.privateEndpointIp;
            resourceInputs["state"] = args?.state;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeModified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrivateEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PrivateEndpoint resources.
 */
export interface PrivateEndpointState {
    accessTargets?: pulumi.Input<pulumi.Input<inputs.ObjectStorage.PrivateEndpointAccessTarget>[]>;
    additionalPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    compartmentId?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    etag?: pulumi.Input<string>;
    fqdns?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: pulumi.Input<string>}>}>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    prefix?: pulumi.Input<string>;
    privateEndpointIp?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    timeCreated?: pulumi.Input<string>;
    timeModified?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PrivateEndpoint resource.
 */
export interface PrivateEndpointArgs {
    accessTargets: pulumi.Input<pulumi.Input<inputs.ObjectStorage.PrivateEndpointAccessTarget>[]>;
    additionalPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    compartmentId: pulumi.Input<string>;
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    fqdns?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: pulumi.Input<string>}>}>}>;
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    nsgIds?: pulumi.Input<pulumi.Input<string>[]>;
    prefix: pulumi.Input<string>;
    privateEndpointIp?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}
