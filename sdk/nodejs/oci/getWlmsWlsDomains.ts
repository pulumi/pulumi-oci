// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Wls Domains in Oracle Cloud Infrastructure Wlms service.
 *
 * Gets all WebLogic domains in a given compartment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testWlsDomains = oci.oci.getWlmsWlsDomains({
 *     compartmentId: compartmentId,
 *     displayName: wlsDomainDisplayName,
 *     id: wlsDomainId,
 *     middlewareType: wlsDomainMiddlewareType,
 *     patchReadinessStatus: wlsDomainPatchReadinessStatus,
 *     state: wlsDomainState,
 *     weblogicVersion: wlsDomainWeblogicVersion,
 * });
 * ```
 */
export function getWlmsWlsDomains(args?: GetWlmsWlsDomainsArgs, opts?: pulumi.InvokeOptions): Promise<GetWlmsWlsDomainsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:oci/getWlmsWlsDomains:getWlmsWlsDomains", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "middlewareType": args.middlewareType,
        "patchReadinessStatus": args.patchReadinessStatus,
        "state": args.state,
        "weblogicVersion": args.weblogicVersion,
    }, opts);
}

/**
 * A collection of arguments for invoking getWlmsWlsDomains.
 */
export interface GetWlmsWlsDomainsArgs {
    /**
     * The OCID of the compartment that contains the resources to list. This filter returns  only resources contained within the specified compartment.
     */
    compartmentId?: string;
    /**
     * The display name.
     */
    displayName?: string;
    filters?: inputs.oci.GetWlmsWlsDomainsFilter[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the WebLogic domain.
     */
    id?: string;
    /**
     * A filter to return WebLogic domains based on the type of middleware of the WebLogic domain.
     */
    middlewareType?: string;
    /**
     * A filter to return domains based on the patch readiness status.
     */
    patchReadinessStatus?: string;
    /**
     * A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
     */
    state?: string;
    /**
     * A filter to return WebLogic domains based on the WebLogic version.
     */
    weblogicVersion?: string;
}

/**
 * A collection of values returned by getWlmsWlsDomains.
 */
export interface GetWlmsWlsDomainsResult {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    readonly compartmentId?: string;
    /**
     * A user-friendly name that does not have to be unique and is changeable.
     */
    readonly displayName?: string;
    readonly filters?: outputs.oci.GetWlmsWlsDomainsFilter[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the WebLogic domain.
     */
    readonly id?: string;
    /**
     * The middleware type on the administration server of the WebLogic domain.
     */
    readonly middlewareType?: string;
    /**
     * The patch readiness status of the WebLogic domain.
     */
    readonly patchReadinessStatus?: string;
    /**
     * The current state of the WebLogic service domain.
     */
    readonly state?: string;
    /**
     * The version of the WebLogic domain.
     */
    readonly weblogicVersion?: string;
    /**
     * The list of wls_domain_collection.
     */
    readonly wlsDomainCollections: outputs.oci.GetWlmsWlsDomainsWlsDomainCollection[];
}
/**
 * This data source provides the list of Wls Domains in Oracle Cloud Infrastructure Wlms service.
 *
 * Gets all WebLogic domains in a given compartment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testWlsDomains = oci.oci.getWlmsWlsDomains({
 *     compartmentId: compartmentId,
 *     displayName: wlsDomainDisplayName,
 *     id: wlsDomainId,
 *     middlewareType: wlsDomainMiddlewareType,
 *     patchReadinessStatus: wlsDomainPatchReadinessStatus,
 *     state: wlsDomainState,
 *     weblogicVersion: wlsDomainWeblogicVersion,
 * });
 * ```
 */
export function getWlmsWlsDomainsOutput(args?: GetWlmsWlsDomainsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetWlmsWlsDomainsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:oci/getWlmsWlsDomains:getWlmsWlsDomains", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "middlewareType": args.middlewareType,
        "patchReadinessStatus": args.patchReadinessStatus,
        "state": args.state,
        "weblogicVersion": args.weblogicVersion,
    }, opts);
}

/**
 * A collection of arguments for invoking getWlmsWlsDomains.
 */
export interface GetWlmsWlsDomainsOutputArgs {
    /**
     * The OCID of the compartment that contains the resources to list. This filter returns  only resources contained within the specified compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * The display name.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.oci.GetWlmsWlsDomainsFilterArgs>[]>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the WebLogic domain.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to return WebLogic domains based on the type of middleware of the WebLogic domain.
     */
    middlewareType?: pulumi.Input<string>;
    /**
     * A filter to return domains based on the patch readiness status.
     */
    patchReadinessStatus?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
     */
    state?: pulumi.Input<string>;
    /**
     * A filter to return WebLogic domains based on the WebLogic version.
     */
    weblogicVersion?: pulumi.Input<string>;
}
