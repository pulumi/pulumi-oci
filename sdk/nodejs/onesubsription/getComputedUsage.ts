// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Computed Usage resource in Oracle Cloud Infrastructure Onesubscription service.
 *
 * This is an API which returns Computed Usage corresponding to the id passed
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testComputedUsage = oci.OneSubsription.getComputedUsage({
 *     compartmentId: _var.compartment_id,
 *     computedUsageId: oci_onesubscription_computed_usage.test_computed_usage.id,
 *     fields: _var.computed_usage_fields,
 * });
 * ```
 */
export function getComputedUsage(args: GetComputedUsageArgs, opts?: pulumi.InvokeOptions): Promise<GetComputedUsageResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:OneSubsription/getComputedUsage:getComputedUsage", {
        "compartmentId": args.compartmentId,
        "computedUsageId": args.computedUsageId,
        "fields": args.fields,
    }, opts);
}

/**
 * A collection of arguments for invoking getComputedUsage.
 */
export interface GetComputedUsageArgs {
    /**
     * The OCID of the root compartment.
     */
    compartmentId: string;
    /**
     * The Computed Usage Id
     */
    computedUsageId: string;
    /**
     * Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. This parameter is used to control what fields to return.
     */
    fields?: string[];
}

/**
 * A collection of values returned by getComputedUsage.
 */
export interface GetComputedUsageResult {
    /**
     * Subscribed service commitmentId.
     */
    readonly commitmentServiceId?: string;
    readonly compartmentId: string;
    /**
     * SPM Internal compute records source .
     */
    readonly computeSource?: string;
    readonly computedUsageId: string;
    /**
     * Computed Line Amount not rounded
     */
    readonly cost?: string;
    /**
     * Computed Line Amount rounded.
     */
    readonly costRounded?: string;
    /**
     * Currency code
     */
    readonly currencyCode?: string;
    /**
     * Data Center Attribute as sent by MQS to SPM.
     */
    readonly dataCenter?: string;
    readonly fields?: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id?: string;
    /**
     * Invoicing status for the aggregated compute usage
     */
    readonly isInvoiced?: boolean;
    /**
     * MQS Identfier send to SPM , SPM does not transform this attribute and is received as is.
     */
    readonly mqsMessageId?: string;
    /**
     * Net Unit Price for the product in consideration, price actual.
     */
    readonly netUnitPrice?: string;
    /**
     * SPM Internal Original usage Line number identifier in SPM coming from Metered Services entity.
     */
    readonly originalUsageNumber?: string;
    /**
     * Product description
     */
    readonly parentProducts?: outputs.OneSubsription.GetComputedUsageParentProduct[];
    /**
     * Subscribed service line parent id
     */
    readonly parentSubscribedServiceId?: string;
    /**
     * Subscription plan number
     */
    readonly planNumber?: string;
    /**
     * Product description
     */
    readonly products?: outputs.OneSubsription.GetComputedUsageProduct[];
    /**
     * Total Quantity that was used for computation
     */
    readonly quantity?: string;
    /**
     * Ratecard Id at subscribed service level
     */
    readonly rateCardId?: string;
    /**
     * References the tier in the ratecard for that usage (OCI will be using the same reference to cross-reference for correctness on the usage csv report), comes from Entity OBSCNTR_IPT_PRODUCTTIER.
     */
    readonly rateCardTierdId?: string;
    /**
     * Computed Usage created time, expressed in RFC 3339 timestamp format.
     */
    readonly timeCreated?: string;
    /**
     * Metered Service date, expressed in RFC 3339 timestamp format.
     */
    readonly timeMeteredOn?: string;
    /**
     * Usae computation date, expressed in RFC 3339 timestamp format.
     */
    readonly timeOfArrival?: string;
    /**
     * Computed Usage updated time, expressed in RFC 3339 timestamp format.
     */
    readonly timeUpdated?: string;
    /**
     * Usage compute type in SPM.
     */
    readonly type?: string;
    /**
     * Unit of Messure
     */
    readonly unitOfMeasure?: string;
    /**
     * SPM Internal usage Line number identifier in SPM coming from Metered Services entity.
     */
    readonly usageNumber?: string;
}
/**
 * This data source provides details about a specific Computed Usage resource in Oracle Cloud Infrastructure Onesubscription service.
 *
 * This is an API which returns Computed Usage corresponding to the id passed
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testComputedUsage = oci.OneSubsription.getComputedUsage({
 *     compartmentId: _var.compartment_id,
 *     computedUsageId: oci_onesubscription_computed_usage.test_computed_usage.id,
 *     fields: _var.computed_usage_fields,
 * });
 * ```
 */
export function getComputedUsageOutput(args: GetComputedUsageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetComputedUsageResult> {
    return pulumi.output(args).apply((a: any) => getComputedUsage(a, opts))
}

/**
 * A collection of arguments for invoking getComputedUsage.
 */
export interface GetComputedUsageOutputArgs {
    /**
     * The OCID of the root compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * The Computed Usage Id
     */
    computedUsageId: pulumi.Input<string>;
    /**
     * Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. This parameter is used to control what fields to return.
     */
    fields?: pulumi.Input<pulumi.Input<string>[]>;
}
