// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Subscribed Services in Oracle Cloud Infrastructure Onesubscription service.
 *
 * This list API returns all subscribed services for given Subscription ID
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSubscribedServices = oci.OneSubsription.getSubscribedServices({
 *     compartmentId: _var.compartment_id,
 *     subscriptionId: oci_onesubscription_subscription.test_subscription.id,
 *     orderLineId: oci_onesubscription_order_line.test_order_line.id,
 *     status: _var.subscribed_service_status,
 * });
 * ```
 */
export function getSubscribedServices(args: GetSubscribedServicesArgs, opts?: pulumi.InvokeOptions): Promise<GetSubscribedServicesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("oci:OneSubsription/getSubscribedServices:getSubscribedServices", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "orderLineId": args.orderLineId,
        "status": args.status,
        "subscriptionId": args.subscriptionId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSubscribedServices.
 */
export interface GetSubscribedServicesArgs {
    /**
     * The OCID of the root compartment.
     */
    compartmentId: string;
    filters?: inputs.OneSubsription.GetSubscribedServicesFilter[];
    /**
     * Order Line identifier at subscribed service level . This identifier is originated in Order Management module. Default is null.
     */
    orderLineId?: string;
    /**
     * This param is used to filter subscribed services based on its status
     */
    status?: string;
    /**
     * Line level Subscription Id
     */
    subscriptionId: string;
}

/**
 * A collection of values returned by getSubscribedServices.
 */
export interface GetSubscribedServicesResult {
    readonly compartmentId: string;
    readonly filters?: outputs.OneSubsription.GetSubscribedServicesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Sales Order Line Id associated to the subscribed service
     */
    readonly orderLineId?: string;
    /**
     * Subscribed service status
     */
    readonly status?: string;
    /**
     * The list of subscribed_services.
     */
    readonly subscribedServices: outputs.OneSubsription.GetSubscribedServicesSubscribedService[];
    /**
     * Subscription ID associated to the subscribed service
     */
    readonly subscriptionId: string;
}

export function getSubscribedServicesOutput(args: GetSubscribedServicesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSubscribedServicesResult> {
    return pulumi.output(args).apply(a => getSubscribedServices(a, opts))
}

/**
 * A collection of arguments for invoking getSubscribedServices.
 */
export interface GetSubscribedServicesOutputArgs {
    /**
     * The OCID of the root compartment.
     */
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.OneSubsription.GetSubscribedServicesFilterArgs>[]>;
    /**
     * Order Line identifier at subscribed service level . This identifier is originated in Order Management module. Default is null.
     */
    orderLineId?: pulumi.Input<string>;
    /**
     * This param is used to filter subscribed services based on its status
     */
    status?: pulumi.Input<string>;
    /**
     * Line level Subscription Id
     */
    subscriptionId: pulumi.Input<string>;
}
