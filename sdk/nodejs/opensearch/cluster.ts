// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Opensearch Cluster resource in Oracle Cloud Infrastructure Opensearch service.
 *
 * Creates a new OpensearchCluster.
 *
 * ## Prerequisites
 *
 * The below policies must be created in compartment before creating OpensearchCluster
 *
 * ##### {Compartment-Name} - Name of  your compartment
 *
 * For latest documentation on OpenSearch use please refer to https://docs.oracle.com/en-us/iaas/Content/search-opensearch/home.htm\
 * Required permissions: https://docs.oracle.com/en-us/iaas/Content/search-opensearch/Concepts/ocisearchpermissions.htm
 *
 * ## Import
 *
 * OpensearchClusters can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:Opensearch/cluster:Cluster test_opensearch_cluster "id"
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Opensearch/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The availability domains to distribute the cluser nodes across.
     */
    public /*out*/ readonly availabilityDomains!: pulumi.Output<string[]>;
    /**
     * The OCID of the compartment to create the cluster in.
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * (Updatable) An optional property when incremented triggers Configure Outbound Cluster. Could be set to any integer value.
     */
    public readonly configureOutboundClusterTrigger!: pulumi.Output<number | undefined>;
    /**
     * (Updatable) The number of data nodes to configure for the cluster.
     */
    public readonly dataNodeCount!: pulumi.Output<number>;
    /**
     * The bare metal shape for the cluster's data nodes.
     */
    public readonly dataNodeHostBareMetalShape!: pulumi.Output<string>;
    /**
     * (Updatable) The amount of memory in GB, to configure per node for the cluster's data nodes.
     */
    public readonly dataNodeHostMemoryGb!: pulumi.Output<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluster's data nodes.
     */
    public readonly dataNodeHostOcpuCount!: pulumi.Output<number>;
    /**
     * TThe instance type for the cluster's data nodes.
     */
    public readonly dataNodeHostType!: pulumi.Output<string>;
    /**
     * (Updatable) The amount of storage in GB, to configure per node for the cluster's data nodes.
     */
    public readonly dataNodeStorageGb!: pulumi.Output<number>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    public readonly definedTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) The name of the cluster. Avoid entering confidential information.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The fully qualified domain name (FQDN) for the cluster's API endpoint.
     */
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    public readonly freeformTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * List of inbound clusters that will be queried using cross cluster search
     */
    public readonly inboundClusterIds!: pulumi.Output<string[]>;
    /**
     * Additional information about the current lifecycle state of the cluster.
     */
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    /**
     * (Updatable) Details for creation of maintenance details
     */
    public readonly maintenanceDetails!: pulumi.Output<outputs.Opensearch.ClusterMaintenanceDetails>;
    /**
     * (Updatable) The number of master nodes to configure for the cluster.
     */
    public readonly masterNodeCount!: pulumi.Output<number>;
    /**
     * The bare metal shape for the cluster's master nodes.
     */
    public readonly masterNodeHostBareMetalShape!: pulumi.Output<string>;
    /**
     * (Updatable) The amount of memory in GB, to configure per node for the cluster's master nodes.
     */
    public readonly masterNodeHostMemoryGb!: pulumi.Output<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluser's master nodes.
     */
    public readonly masterNodeHostOcpuCount!: pulumi.Output<number>;
    /**
     * The instance type for the cluster's master nodes.
     */
    public readonly masterNodeHostType!: pulumi.Output<string>;
    /**
     * The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
     */
    public /*out*/ readonly opendashboardFqdn!: pulumi.Output<string>;
    /**
     * (Updatable) The number of OpenSearch Dashboard nodes to configure for the cluster.
     */
    public readonly opendashboardNodeCount!: pulumi.Output<number>;
    /**
     * (Updatable) The amount of memory in GB, to configure for the cluster's OpenSearch Dashboard nodes.
     */
    public readonly opendashboardNodeHostMemoryGb!: pulumi.Output<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluster's OpenSearch Dashboard nodes.
     */
    public readonly opendashboardNodeHostOcpuCount!: pulumi.Output<number>;
    /**
     * The private IP address for the cluster's OpenSearch Dashboard.
     */
    public /*out*/ readonly opendashboardPrivateIp!: pulumi.Output<string>;
    /**
     * The fully qualified domain name (FQDN) for the cluster's API endpoint.
     */
    public /*out*/ readonly opensearchFqdn!: pulumi.Output<string>;
    /**
     * The cluster's private IP address.
     */
    public /*out*/ readonly opensearchPrivateIp!: pulumi.Output<string>;
    /**
     * (Updatable) This configuration is used for passing request details to connect outbound cluster(s) to the inbound cluster (coordinating cluster)
     */
    public readonly outboundClusterConfig!: pulumi.Output<outputs.Opensearch.ClusterOutboundClusterConfig>;
    /**
     * (Updatable) The customer IP addresses of the endpoint in customer VCN
     */
    public readonly reverseConnectionEndpointCustomerIps!: pulumi.Output<string[]>;
    /**
     * The list of reverse connection endpoints.
     */
    public /*out*/ readonly reverseConnectionEndpoints!: pulumi.Output<outputs.Opensearch.ClusterReverseConnectionEndpoint[]>;
    /**
     * (Updatable) The name of the master user that are used to manage security config
     */
    public readonly securityMasterUserName!: pulumi.Output<string>;
    /**
     * (Updatable) The password hash of the master user that are used to manage security config
     */
    public readonly securityMasterUserPasswordHash!: pulumi.Output<string>;
    /**
     * (Updatable) The security mode of the cluster.
     */
    public readonly securityMode!: pulumi.Output<string>;
    /**
     * (Updatable) The version of the software the cluster is running.
     */
    public readonly softwareVersion!: pulumi.Output<string>;
    /**
     * The current state of the cluster.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The OCID for the compartment where the cluster's subnet is located.
     */
    public readonly subnetCompartmentId!: pulumi.Output<string>;
    /**
     * The OCID of the cluster's subnet.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    public readonly systemTags!: pulumi.Output<{[key: string]: string}>;
    /**
     * The amount of time in milliseconds since the cluster was created.
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The amount of time in milliseconds since the cluster was updated.
     */
    public /*out*/ readonly timeDeleted!: pulumi.Output<string>;
    /**
     * The amount of time in milliseconds since the cluster was updated.
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    /**
     * The size in GB of the cluster's total storage.
     */
    public /*out*/ readonly totalStorageGb!: pulumi.Output<number>;
    /**
     * An optional property to upgrade the major version of the cluster. This workflow upgrades the cluster without creating a clone. If you want to create a clone and upgrade the clone for testing please use SDK or CLI.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly upgradeMajorVersionTrigger!: pulumi.Output<number>;
    /**
     * The OCID for the compartment where the cluster's VCN is located.
     */
    public readonly vcnCompartmentId!: pulumi.Output<string>;
    /**
     * The OCID of the cluster's VCN.
     */
    public readonly vcnId!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["availabilityDomains"] = state ? state.availabilityDomains : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["configureOutboundClusterTrigger"] = state ? state.configureOutboundClusterTrigger : undefined;
            resourceInputs["dataNodeCount"] = state ? state.dataNodeCount : undefined;
            resourceInputs["dataNodeHostBareMetalShape"] = state ? state.dataNodeHostBareMetalShape : undefined;
            resourceInputs["dataNodeHostMemoryGb"] = state ? state.dataNodeHostMemoryGb : undefined;
            resourceInputs["dataNodeHostOcpuCount"] = state ? state.dataNodeHostOcpuCount : undefined;
            resourceInputs["dataNodeHostType"] = state ? state.dataNodeHostType : undefined;
            resourceInputs["dataNodeStorageGb"] = state ? state.dataNodeStorageGb : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["inboundClusterIds"] = state ? state.inboundClusterIds : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["maintenanceDetails"] = state ? state.maintenanceDetails : undefined;
            resourceInputs["masterNodeCount"] = state ? state.masterNodeCount : undefined;
            resourceInputs["masterNodeHostBareMetalShape"] = state ? state.masterNodeHostBareMetalShape : undefined;
            resourceInputs["masterNodeHostMemoryGb"] = state ? state.masterNodeHostMemoryGb : undefined;
            resourceInputs["masterNodeHostOcpuCount"] = state ? state.masterNodeHostOcpuCount : undefined;
            resourceInputs["masterNodeHostType"] = state ? state.masterNodeHostType : undefined;
            resourceInputs["opendashboardFqdn"] = state ? state.opendashboardFqdn : undefined;
            resourceInputs["opendashboardNodeCount"] = state ? state.opendashboardNodeCount : undefined;
            resourceInputs["opendashboardNodeHostMemoryGb"] = state ? state.opendashboardNodeHostMemoryGb : undefined;
            resourceInputs["opendashboardNodeHostOcpuCount"] = state ? state.opendashboardNodeHostOcpuCount : undefined;
            resourceInputs["opendashboardPrivateIp"] = state ? state.opendashboardPrivateIp : undefined;
            resourceInputs["opensearchFqdn"] = state ? state.opensearchFqdn : undefined;
            resourceInputs["opensearchPrivateIp"] = state ? state.opensearchPrivateIp : undefined;
            resourceInputs["outboundClusterConfig"] = state ? state.outboundClusterConfig : undefined;
            resourceInputs["reverseConnectionEndpointCustomerIps"] = state ? state.reverseConnectionEndpointCustomerIps : undefined;
            resourceInputs["reverseConnectionEndpoints"] = state ? state.reverseConnectionEndpoints : undefined;
            resourceInputs["securityMasterUserName"] = state ? state.securityMasterUserName : undefined;
            resourceInputs["securityMasterUserPasswordHash"] = state ? state.securityMasterUserPasswordHash : undefined;
            resourceInputs["securityMode"] = state ? state.securityMode : undefined;
            resourceInputs["softwareVersion"] = state ? state.softwareVersion : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetCompartmentId"] = state ? state.subnetCompartmentId : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeDeleted"] = state ? state.timeDeleted : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["totalStorageGb"] = state ? state.totalStorageGb : undefined;
            resourceInputs["upgradeMajorVersionTrigger"] = state ? state.upgradeMajorVersionTrigger : undefined;
            resourceInputs["vcnCompartmentId"] = state ? state.vcnCompartmentId : undefined;
            resourceInputs["vcnId"] = state ? state.vcnId : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.dataNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataNodeCount'");
            }
            if ((!args || args.dataNodeHostMemoryGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataNodeHostMemoryGb'");
            }
            if ((!args || args.dataNodeHostOcpuCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataNodeHostOcpuCount'");
            }
            if ((!args || args.dataNodeHostType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataNodeHostType'");
            }
            if ((!args || args.dataNodeStorageGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataNodeStorageGb'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.masterNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterNodeCount'");
            }
            if ((!args || args.masterNodeHostMemoryGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterNodeHostMemoryGb'");
            }
            if ((!args || args.masterNodeHostOcpuCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterNodeHostOcpuCount'");
            }
            if ((!args || args.masterNodeHostType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterNodeHostType'");
            }
            if ((!args || args.opendashboardNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'opendashboardNodeCount'");
            }
            if ((!args || args.opendashboardNodeHostMemoryGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'opendashboardNodeHostMemoryGb'");
            }
            if ((!args || args.opendashboardNodeHostOcpuCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'opendashboardNodeHostOcpuCount'");
            }
            if ((!args || args.softwareVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'softwareVersion'");
            }
            if ((!args || args.subnetCompartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetCompartmentId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vcnCompartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcnCompartmentId'");
            }
            if ((!args || args.vcnId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcnId'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["configureOutboundClusterTrigger"] = args ? args.configureOutboundClusterTrigger : undefined;
            resourceInputs["dataNodeCount"] = args ? args.dataNodeCount : undefined;
            resourceInputs["dataNodeHostBareMetalShape"] = args ? args.dataNodeHostBareMetalShape : undefined;
            resourceInputs["dataNodeHostMemoryGb"] = args ? args.dataNodeHostMemoryGb : undefined;
            resourceInputs["dataNodeHostOcpuCount"] = args ? args.dataNodeHostOcpuCount : undefined;
            resourceInputs["dataNodeHostType"] = args ? args.dataNodeHostType : undefined;
            resourceInputs["dataNodeStorageGb"] = args ? args.dataNodeStorageGb : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["inboundClusterIds"] = args ? args.inboundClusterIds : undefined;
            resourceInputs["maintenanceDetails"] = args ? args.maintenanceDetails : undefined;
            resourceInputs["masterNodeCount"] = args ? args.masterNodeCount : undefined;
            resourceInputs["masterNodeHostBareMetalShape"] = args ? args.masterNodeHostBareMetalShape : undefined;
            resourceInputs["masterNodeHostMemoryGb"] = args ? args.masterNodeHostMemoryGb : undefined;
            resourceInputs["masterNodeHostOcpuCount"] = args ? args.masterNodeHostOcpuCount : undefined;
            resourceInputs["masterNodeHostType"] = args ? args.masterNodeHostType : undefined;
            resourceInputs["opendashboardNodeCount"] = args ? args.opendashboardNodeCount : undefined;
            resourceInputs["opendashboardNodeHostMemoryGb"] = args ? args.opendashboardNodeHostMemoryGb : undefined;
            resourceInputs["opendashboardNodeHostOcpuCount"] = args ? args.opendashboardNodeHostOcpuCount : undefined;
            resourceInputs["outboundClusterConfig"] = args ? args.outboundClusterConfig : undefined;
            resourceInputs["reverseConnectionEndpointCustomerIps"] = args ? args.reverseConnectionEndpointCustomerIps : undefined;
            resourceInputs["securityMasterUserName"] = args ? args.securityMasterUserName : undefined;
            resourceInputs["securityMasterUserPasswordHash"] = args?.securityMasterUserPasswordHash ? pulumi.secret(args.securityMasterUserPasswordHash) : undefined;
            resourceInputs["securityMode"] = args ? args.securityMode : undefined;
            resourceInputs["softwareVersion"] = args ? args.softwareVersion : undefined;
            resourceInputs["subnetCompartmentId"] = args ? args.subnetCompartmentId : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["systemTags"] = args ? args.systemTags : undefined;
            resourceInputs["upgradeMajorVersionTrigger"] = args ? args.upgradeMajorVersionTrigger : undefined;
            resourceInputs["vcnCompartmentId"] = args ? args.vcnCompartmentId : undefined;
            resourceInputs["vcnId"] = args ? args.vcnId : undefined;
            resourceInputs["availabilityDomains"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["opendashboardFqdn"] = undefined /*out*/;
            resourceInputs["opendashboardPrivateIp"] = undefined /*out*/;
            resourceInputs["opensearchFqdn"] = undefined /*out*/;
            resourceInputs["opensearchPrivateIp"] = undefined /*out*/;
            resourceInputs["reverseConnectionEndpoints"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeDeleted"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["totalStorageGb"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["securityMasterUserPasswordHash"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * The availability domains to distribute the cluser nodes across.
     */
    availabilityDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The OCID of the compartment to create the cluster in.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) An optional property when incremented triggers Configure Outbound Cluster. Could be set to any integer value.
     */
    configureOutboundClusterTrigger?: pulumi.Input<number>;
    /**
     * (Updatable) The number of data nodes to configure for the cluster.
     */
    dataNodeCount?: pulumi.Input<number>;
    /**
     * The bare metal shape for the cluster's data nodes.
     */
    dataNodeHostBareMetalShape?: pulumi.Input<string>;
    /**
     * (Updatable) The amount of memory in GB, to configure per node for the cluster's data nodes.
     */
    dataNodeHostMemoryGb?: pulumi.Input<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluster's data nodes.
     */
    dataNodeHostOcpuCount?: pulumi.Input<number>;
    /**
     * TThe instance type for the cluster's data nodes.
     */
    dataNodeHostType?: pulumi.Input<string>;
    /**
     * (Updatable) The amount of storage in GB, to configure per node for the cluster's data nodes.
     */
    dataNodeStorageGb?: pulumi.Input<number>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) The name of the cluster. Avoid entering confidential information.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The fully qualified domain name (FQDN) for the cluster's API endpoint.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of inbound clusters that will be queried using cross cluster search
     */
    inboundClusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Additional information about the current lifecycle state of the cluster.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * (Updatable) Details for creation of maintenance details
     */
    maintenanceDetails?: pulumi.Input<inputs.Opensearch.ClusterMaintenanceDetails>;
    /**
     * (Updatable) The number of master nodes to configure for the cluster.
     */
    masterNodeCount?: pulumi.Input<number>;
    /**
     * The bare metal shape for the cluster's master nodes.
     */
    masterNodeHostBareMetalShape?: pulumi.Input<string>;
    /**
     * (Updatable) The amount of memory in GB, to configure per node for the cluster's master nodes.
     */
    masterNodeHostMemoryGb?: pulumi.Input<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluser's master nodes.
     */
    masterNodeHostOcpuCount?: pulumi.Input<number>;
    /**
     * The instance type for the cluster's master nodes.
     */
    masterNodeHostType?: pulumi.Input<string>;
    /**
     * The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
     */
    opendashboardFqdn?: pulumi.Input<string>;
    /**
     * (Updatable) The number of OpenSearch Dashboard nodes to configure for the cluster.
     */
    opendashboardNodeCount?: pulumi.Input<number>;
    /**
     * (Updatable) The amount of memory in GB, to configure for the cluster's OpenSearch Dashboard nodes.
     */
    opendashboardNodeHostMemoryGb?: pulumi.Input<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluster's OpenSearch Dashboard nodes.
     */
    opendashboardNodeHostOcpuCount?: pulumi.Input<number>;
    /**
     * The private IP address for the cluster's OpenSearch Dashboard.
     */
    opendashboardPrivateIp?: pulumi.Input<string>;
    /**
     * The fully qualified domain name (FQDN) for the cluster's API endpoint.
     */
    opensearchFqdn?: pulumi.Input<string>;
    /**
     * The cluster's private IP address.
     */
    opensearchPrivateIp?: pulumi.Input<string>;
    /**
     * (Updatable) This configuration is used for passing request details to connect outbound cluster(s) to the inbound cluster (coordinating cluster)
     */
    outboundClusterConfig?: pulumi.Input<inputs.Opensearch.ClusterOutboundClusterConfig>;
    /**
     * (Updatable) The customer IP addresses of the endpoint in customer VCN
     */
    reverseConnectionEndpointCustomerIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of reverse connection endpoints.
     */
    reverseConnectionEndpoints?: pulumi.Input<pulumi.Input<inputs.Opensearch.ClusterReverseConnectionEndpoint>[]>;
    /**
     * (Updatable) The name of the master user that are used to manage security config
     */
    securityMasterUserName?: pulumi.Input<string>;
    /**
     * (Updatable) The password hash of the master user that are used to manage security config
     */
    securityMasterUserPasswordHash?: pulumi.Input<string>;
    /**
     * (Updatable) The security mode of the cluster.
     */
    securityMode?: pulumi.Input<string>;
    /**
     * (Updatable) The version of the software the cluster is running.
     */
    softwareVersion?: pulumi.Input<string>;
    /**
     * The current state of the cluster.
     */
    state?: pulumi.Input<string>;
    /**
     * The OCID for the compartment where the cluster's subnet is located.
     */
    subnetCompartmentId?: pulumi.Input<string>;
    /**
     * The OCID of the cluster's subnet.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The amount of time in milliseconds since the cluster was created.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The amount of time in milliseconds since the cluster was updated.
     */
    timeDeleted?: pulumi.Input<string>;
    /**
     * The amount of time in milliseconds since the cluster was updated.
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * The size in GB of the cluster's total storage.
     */
    totalStorageGb?: pulumi.Input<number>;
    /**
     * An optional property to upgrade the major version of the cluster. This workflow upgrades the cluster without creating a clone. If you want to create a clone and upgrade the clone for testing please use SDK or CLI.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    upgradeMajorVersionTrigger?: pulumi.Input<number>;
    /**
     * The OCID for the compartment where the cluster's VCN is located.
     */
    vcnCompartmentId?: pulumi.Input<string>;
    /**
     * The OCID of the cluster's VCN.
     */
    vcnId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The OCID of the compartment to create the cluster in.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) An optional property when incremented triggers Configure Outbound Cluster. Could be set to any integer value.
     */
    configureOutboundClusterTrigger?: pulumi.Input<number>;
    /**
     * (Updatable) The number of data nodes to configure for the cluster.
     */
    dataNodeCount: pulumi.Input<number>;
    /**
     * The bare metal shape for the cluster's data nodes.
     */
    dataNodeHostBareMetalShape?: pulumi.Input<string>;
    /**
     * (Updatable) The amount of memory in GB, to configure per node for the cluster's data nodes.
     */
    dataNodeHostMemoryGb: pulumi.Input<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluster's data nodes.
     */
    dataNodeHostOcpuCount: pulumi.Input<number>;
    /**
     * TThe instance type for the cluster's data nodes.
     */
    dataNodeHostType: pulumi.Input<string>;
    /**
     * (Updatable) The amount of storage in GB, to configure per node for the cluster's data nodes.
     */
    dataNodeStorageGb: pulumi.Input<number>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) The name of the cluster. Avoid entering confidential information.
     */
    displayName: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of inbound clusters that will be queried using cross cluster search
     */
    inboundClusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Updatable) Details for creation of maintenance details
     */
    maintenanceDetails?: pulumi.Input<inputs.Opensearch.ClusterMaintenanceDetails>;
    /**
     * (Updatable) The number of master nodes to configure for the cluster.
     */
    masterNodeCount: pulumi.Input<number>;
    /**
     * The bare metal shape for the cluster's master nodes.
     */
    masterNodeHostBareMetalShape?: pulumi.Input<string>;
    /**
     * (Updatable) The amount of memory in GB, to configure per node for the cluster's master nodes.
     */
    masterNodeHostMemoryGb: pulumi.Input<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluser's master nodes.
     */
    masterNodeHostOcpuCount: pulumi.Input<number>;
    /**
     * The instance type for the cluster's master nodes.
     */
    masterNodeHostType: pulumi.Input<string>;
    /**
     * (Updatable) The number of OpenSearch Dashboard nodes to configure for the cluster.
     */
    opendashboardNodeCount: pulumi.Input<number>;
    /**
     * (Updatable) The amount of memory in GB, to configure for the cluster's OpenSearch Dashboard nodes.
     */
    opendashboardNodeHostMemoryGb: pulumi.Input<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluster's OpenSearch Dashboard nodes.
     */
    opendashboardNodeHostOcpuCount: pulumi.Input<number>;
    /**
     * (Updatable) This configuration is used for passing request details to connect outbound cluster(s) to the inbound cluster (coordinating cluster)
     */
    outboundClusterConfig?: pulumi.Input<inputs.Opensearch.ClusterOutboundClusterConfig>;
    /**
     * (Updatable) The customer IP addresses of the endpoint in customer VCN
     */
    reverseConnectionEndpointCustomerIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Updatable) The name of the master user that are used to manage security config
     */
    securityMasterUserName?: pulumi.Input<string>;
    /**
     * (Updatable) The password hash of the master user that are used to manage security config
     */
    securityMasterUserPasswordHash?: pulumi.Input<string>;
    /**
     * (Updatable) The security mode of the cluster.
     */
    securityMode?: pulumi.Input<string>;
    /**
     * (Updatable) The version of the software the cluster is running.
     */
    softwareVersion: pulumi.Input<string>;
    /**
     * The OCID for the compartment where the cluster's subnet is located.
     */
    subnetCompartmentId: pulumi.Input<string>;
    /**
     * The OCID of the cluster's subnet.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An optional property to upgrade the major version of the cluster. This workflow upgrades the cluster without creating a clone. If you want to create a clone and upgrade the clone for testing please use SDK or CLI.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    upgradeMajorVersionTrigger?: pulumi.Input<number>;
    /**
     * The OCID for the compartment where the cluster's VCN is located.
     */
    vcnCompartmentId: pulumi.Input<string>;
    /**
     * The OCID of the cluster's VCN.
     */
    vcnId: pulumi.Input<string>;
}
