// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Opensearch Cluster resource in Oracle Cloud Infrastructure Opensearch service.
 *
 * Creates a new OpensearchCluster.
 *
 * ## Prerequisites
 *
 * The below policies must be created in compartment before creating OpensearchCluster
 *
 * ##### {Compartment-Name} - Name of  your compartment
 *
 * For latest documentation on OpenSearch use please refer to https://docs.oracle.com/en-us/iaas/Content/search-opensearch/home.htm\
 * Required permissions: https://docs.oracle.com/en-us/iaas/Content/search-opensearch/Concepts/ocisearchpermissions.htm
 *
 * ## Import
 *
 * OpensearchClusters can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:Opensearch/cluster:Cluster test_opensearch_cluster "id"
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Opensearch/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The availability domains to distribute the cluser nodes across.
     */
    declare public /*out*/ readonly availabilityDomains: pulumi.Output<string[]>;
    /**
     * The OCID of the compartment to create the cluster in.
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * (Updatable) An optional property when incremented triggers Configure Outbound Cluster. Could be set to any integer value.
     */
    declare public readonly configureOutboundClusterTrigger: pulumi.Output<number | undefined>;
    /**
     * (Updatable) The number of data nodes to configure for the cluster.
     */
    declare public readonly dataNodeCount: pulumi.Output<number>;
    /**
     * The bare metal shape for the cluster's data nodes.
     */
    declare public readonly dataNodeHostBareMetalShape: pulumi.Output<string>;
    /**
     * (Updatable) The amount of memory in GB, to configure per node for the cluster's data nodes.
     */
    declare public readonly dataNodeHostMemoryGb: pulumi.Output<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluster's data nodes.
     */
    declare public readonly dataNodeHostOcpuCount: pulumi.Output<number>;
    /**
     * (Updatable) The node shape for the cluster's data nodes.
     */
    declare public readonly dataNodeHostShape: pulumi.Output<string>;
    /**
     * TThe instance type for the cluster's data nodes.
     */
    declare public readonly dataNodeHostType: pulumi.Output<string>;
    /**
     * (Updatable) The amount of storage in GB, to configure per node for the cluster's data nodes.
     */
    declare public readonly dataNodeStorageGb: pulumi.Output<number>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    declare public readonly definedTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) The name of the cluster. Avoid entering confidential information.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * The fully qualified domain name (FQDN) for the cluster's API endpoint.
     */
    declare public /*out*/ readonly fqdn: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    declare public readonly freeformTags: pulumi.Output<{[key: string]: string}>;
    /**
     * List of inbound clusters that will be queried using cross cluster search
     */
    declare public readonly inboundClusterIds: pulumi.Output<string[]>;
    /**
     * Additional information about the current lifecycle state of the cluster.
     */
    declare public /*out*/ readonly lifecycleDetails: pulumi.Output<string>;
    /**
     * (Updatable) Details for creation of maintenance details
     */
    declare public readonly maintenanceDetails: pulumi.Output<outputs.Opensearch.ClusterMaintenanceDetails>;
    /**
     * (Updatable) The number of master nodes to configure for the cluster.
     */
    declare public readonly masterNodeCount: pulumi.Output<number>;
    /**
     * The bare metal shape for the cluster's master nodes.
     */
    declare public readonly masterNodeHostBareMetalShape: pulumi.Output<string>;
    /**
     * (Updatable) The amount of memory in GB, to configure per node for the cluster's master nodes.
     */
    declare public readonly masterNodeHostMemoryGb: pulumi.Output<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluser's master nodes.
     */
    declare public readonly masterNodeHostOcpuCount: pulumi.Output<number>;
    /**
     * (Updatable) The node shape for the cluster's master nodes.
     */
    declare public readonly masterNodeHostShape: pulumi.Output<string>;
    /**
     * The instance type for the cluster's master nodes.
     */
    declare public readonly masterNodeHostType: pulumi.Output<string>;
    /**
     * The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
     */
    declare public /*out*/ readonly opendashboardFqdn: pulumi.Output<string>;
    /**
     * (Updatable) The number of OpenSearch Dashboard nodes to configure for the cluster.
     */
    declare public readonly opendashboardNodeCount: pulumi.Output<number>;
    /**
     * (Updatable) The amount of memory in GB, to configure for the cluster's OpenSearch Dashboard nodes.
     */
    declare public readonly opendashboardNodeHostMemoryGb: pulumi.Output<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluster's OpenSearch Dashboard nodes.
     */
    declare public readonly opendashboardNodeHostOcpuCount: pulumi.Output<number>;
    /**
     * (Updatable) The node shape for the cluster's OpenSearch Dashboard nodes.
     */
    declare public readonly opendashboardNodeHostShape: pulumi.Output<string>;
    /**
     * The private IP address for the cluster's OpenSearch Dashboard.
     */
    declare public /*out*/ readonly opendashboardPrivateIp: pulumi.Output<string>;
    /**
     * The fully qualified domain name (FQDN) for the cluster's API endpoint.
     */
    declare public /*out*/ readonly opensearchFqdn: pulumi.Output<string>;
    /**
     * The cluster's private IP address.
     */
    declare public /*out*/ readonly opensearchPrivateIp: pulumi.Output<string>;
    /**
     * (Updatable) This configuration is used for passing request details to connect outbound cluster(s) to the inbound cluster (coordinating cluster)
     */
    declare public readonly outboundClusterConfig: pulumi.Output<outputs.Opensearch.ClusterOutboundClusterConfig>;
    /**
     * (Updatable) The customer IP addresses of the endpoint in customer VCN
     */
    declare public readonly reverseConnectionEndpointCustomerIps: pulumi.Output<string[]>;
    /**
     * The list of reverse connection endpoints.
     */
    declare public /*out*/ readonly reverseConnectionEndpoints: pulumi.Output<outputs.Opensearch.ClusterReverseConnectionEndpoint[]>;
    /**
     * (Updatable) The number of search nodes configured for the cluster.
     */
    declare public readonly searchNodeCount: pulumi.Output<number>;
    /**
     * (Updatable) The amount of memory in GB, for the cluster's search nodes.
     */
    declare public readonly searchNodeHostMemoryGb: pulumi.Output<number>;
    /**
     * (Updatable) The number of OCPUs configured for the cluster's search nodes.
     */
    declare public readonly searchNodeHostOcpuCount: pulumi.Output<number>;
    /**
     * (Updatable) The node shape for the cluster's search nodes.
     */
    declare public readonly searchNodeHostShape: pulumi.Output<string>;
    /**
     * The instance type for the cluster's search nodes.
     */
    declare public readonly searchNodeHostType: pulumi.Output<string>;
    /**
     * (Updatable) The amount of storage in GB, to configure per node for the cluster's search nodes.
     */
    declare public readonly searchNodeStorageGb: pulumi.Output<number>;
    /**
     * (Updatable) The name of the master user that are used to manage security config
     */
    declare public readonly securityMasterUserName: pulumi.Output<string>;
    /**
     * (Updatable) The password hash of the master user that are used to manage security config
     */
    declare public readonly securityMasterUserPasswordHash: pulumi.Output<string>;
    /**
     * (Updatable) The security mode of the cluster.
     */
    declare public readonly securityMode: pulumi.Output<string>;
    /**
     * SAML policy is optionally used for Opensearch cluster to config SAML authentication
     */
    declare public readonly securitySamlConfig: pulumi.Output<outputs.Opensearch.ClusterSecuritySamlConfig>;
    /**
     * (Updatable) The version of the software the cluster is running.
     */
    declare public readonly softwareVersion: pulumi.Output<string>;
    /**
     * The current state of the cluster.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The OCID for the compartment where the cluster's subnet is located.
     */
    declare public readonly subnetCompartmentId: pulumi.Output<string>;
    /**
     * The OCID of the cluster's subnet.
     */
    declare public readonly subnetId: pulumi.Output<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    declare public readonly systemTags: pulumi.Output<{[key: string]: string}>;
    /**
     * The amount of time in milliseconds since the cluster was created.
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * The amount of time in milliseconds since the cluster was updated.
     */
    declare public /*out*/ readonly timeDeleted: pulumi.Output<string>;
    /**
     * The amount of time in milliseconds since the cluster was updated.
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;
    /**
     * The size in GB of the cluster's total storage.
     */
    declare public /*out*/ readonly totalStorageGb: pulumi.Output<number>;
    /**
     * An optional property to upgrade the major version of the cluster. This workflow upgrades the cluster without creating a clone. If you want to create a clone and upgrade the clone for testing please use SDK or CLI.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly upgradeMajorVersionTrigger: pulumi.Output<number>;
    /**
     * The OCID for the compartment where the cluster's VCN is located.
     */
    declare public readonly vcnCompartmentId: pulumi.Output<string>;
    /**
     * The OCID of the cluster's VCN.
     */
    declare public readonly vcnId: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["availabilityDomains"] = state?.availabilityDomains;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["configureOutboundClusterTrigger"] = state?.configureOutboundClusterTrigger;
            resourceInputs["dataNodeCount"] = state?.dataNodeCount;
            resourceInputs["dataNodeHostBareMetalShape"] = state?.dataNodeHostBareMetalShape;
            resourceInputs["dataNodeHostMemoryGb"] = state?.dataNodeHostMemoryGb;
            resourceInputs["dataNodeHostOcpuCount"] = state?.dataNodeHostOcpuCount;
            resourceInputs["dataNodeHostShape"] = state?.dataNodeHostShape;
            resourceInputs["dataNodeHostType"] = state?.dataNodeHostType;
            resourceInputs["dataNodeStorageGb"] = state?.dataNodeStorageGb;
            resourceInputs["definedTags"] = state?.definedTags;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["fqdn"] = state?.fqdn;
            resourceInputs["freeformTags"] = state?.freeformTags;
            resourceInputs["inboundClusterIds"] = state?.inboundClusterIds;
            resourceInputs["lifecycleDetails"] = state?.lifecycleDetails;
            resourceInputs["maintenanceDetails"] = state?.maintenanceDetails;
            resourceInputs["masterNodeCount"] = state?.masterNodeCount;
            resourceInputs["masterNodeHostBareMetalShape"] = state?.masterNodeHostBareMetalShape;
            resourceInputs["masterNodeHostMemoryGb"] = state?.masterNodeHostMemoryGb;
            resourceInputs["masterNodeHostOcpuCount"] = state?.masterNodeHostOcpuCount;
            resourceInputs["masterNodeHostShape"] = state?.masterNodeHostShape;
            resourceInputs["masterNodeHostType"] = state?.masterNodeHostType;
            resourceInputs["opendashboardFqdn"] = state?.opendashboardFqdn;
            resourceInputs["opendashboardNodeCount"] = state?.opendashboardNodeCount;
            resourceInputs["opendashboardNodeHostMemoryGb"] = state?.opendashboardNodeHostMemoryGb;
            resourceInputs["opendashboardNodeHostOcpuCount"] = state?.opendashboardNodeHostOcpuCount;
            resourceInputs["opendashboardNodeHostShape"] = state?.opendashboardNodeHostShape;
            resourceInputs["opendashboardPrivateIp"] = state?.opendashboardPrivateIp;
            resourceInputs["opensearchFqdn"] = state?.opensearchFqdn;
            resourceInputs["opensearchPrivateIp"] = state?.opensearchPrivateIp;
            resourceInputs["outboundClusterConfig"] = state?.outboundClusterConfig;
            resourceInputs["reverseConnectionEndpointCustomerIps"] = state?.reverseConnectionEndpointCustomerIps;
            resourceInputs["reverseConnectionEndpoints"] = state?.reverseConnectionEndpoints;
            resourceInputs["searchNodeCount"] = state?.searchNodeCount;
            resourceInputs["searchNodeHostMemoryGb"] = state?.searchNodeHostMemoryGb;
            resourceInputs["searchNodeHostOcpuCount"] = state?.searchNodeHostOcpuCount;
            resourceInputs["searchNodeHostShape"] = state?.searchNodeHostShape;
            resourceInputs["searchNodeHostType"] = state?.searchNodeHostType;
            resourceInputs["searchNodeStorageGb"] = state?.searchNodeStorageGb;
            resourceInputs["securityMasterUserName"] = state?.securityMasterUserName;
            resourceInputs["securityMasterUserPasswordHash"] = state?.securityMasterUserPasswordHash;
            resourceInputs["securityMode"] = state?.securityMode;
            resourceInputs["securitySamlConfig"] = state?.securitySamlConfig;
            resourceInputs["softwareVersion"] = state?.softwareVersion;
            resourceInputs["state"] = state?.state;
            resourceInputs["subnetCompartmentId"] = state?.subnetCompartmentId;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["systemTags"] = state?.systemTags;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeDeleted"] = state?.timeDeleted;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
            resourceInputs["totalStorageGb"] = state?.totalStorageGb;
            resourceInputs["upgradeMajorVersionTrigger"] = state?.upgradeMajorVersionTrigger;
            resourceInputs["vcnCompartmentId"] = state?.vcnCompartmentId;
            resourceInputs["vcnId"] = state?.vcnId;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.dataNodeCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataNodeCount'");
            }
            if (args?.dataNodeHostMemoryGb === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataNodeHostMemoryGb'");
            }
            if (args?.dataNodeHostOcpuCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataNodeHostOcpuCount'");
            }
            if (args?.dataNodeHostType === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataNodeHostType'");
            }
            if (args?.dataNodeStorageGb === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataNodeStorageGb'");
            }
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.masterNodeCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterNodeCount'");
            }
            if (args?.masterNodeHostMemoryGb === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterNodeHostMemoryGb'");
            }
            if (args?.masterNodeHostOcpuCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterNodeHostOcpuCount'");
            }
            if (args?.masterNodeHostType === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterNodeHostType'");
            }
            if (args?.opendashboardNodeCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'opendashboardNodeCount'");
            }
            if (args?.opendashboardNodeHostMemoryGb === undefined && !opts.urn) {
                throw new Error("Missing required property 'opendashboardNodeHostMemoryGb'");
            }
            if (args?.opendashboardNodeHostOcpuCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'opendashboardNodeHostOcpuCount'");
            }
            if (args?.softwareVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'softwareVersion'");
            }
            if (args?.subnetCompartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetCompartmentId'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if (args?.vcnCompartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vcnCompartmentId'");
            }
            if (args?.vcnId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vcnId'");
            }
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["configureOutboundClusterTrigger"] = args?.configureOutboundClusterTrigger;
            resourceInputs["dataNodeCount"] = args?.dataNodeCount;
            resourceInputs["dataNodeHostBareMetalShape"] = args?.dataNodeHostBareMetalShape;
            resourceInputs["dataNodeHostMemoryGb"] = args?.dataNodeHostMemoryGb;
            resourceInputs["dataNodeHostOcpuCount"] = args?.dataNodeHostOcpuCount;
            resourceInputs["dataNodeHostShape"] = args?.dataNodeHostShape;
            resourceInputs["dataNodeHostType"] = args?.dataNodeHostType;
            resourceInputs["dataNodeStorageGb"] = args?.dataNodeStorageGb;
            resourceInputs["definedTags"] = args?.definedTags;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["freeformTags"] = args?.freeformTags;
            resourceInputs["inboundClusterIds"] = args?.inboundClusterIds;
            resourceInputs["maintenanceDetails"] = args?.maintenanceDetails;
            resourceInputs["masterNodeCount"] = args?.masterNodeCount;
            resourceInputs["masterNodeHostBareMetalShape"] = args?.masterNodeHostBareMetalShape;
            resourceInputs["masterNodeHostMemoryGb"] = args?.masterNodeHostMemoryGb;
            resourceInputs["masterNodeHostOcpuCount"] = args?.masterNodeHostOcpuCount;
            resourceInputs["masterNodeHostShape"] = args?.masterNodeHostShape;
            resourceInputs["masterNodeHostType"] = args?.masterNodeHostType;
            resourceInputs["opendashboardNodeCount"] = args?.opendashboardNodeCount;
            resourceInputs["opendashboardNodeHostMemoryGb"] = args?.opendashboardNodeHostMemoryGb;
            resourceInputs["opendashboardNodeHostOcpuCount"] = args?.opendashboardNodeHostOcpuCount;
            resourceInputs["opendashboardNodeHostShape"] = args?.opendashboardNodeHostShape;
            resourceInputs["outboundClusterConfig"] = args?.outboundClusterConfig;
            resourceInputs["reverseConnectionEndpointCustomerIps"] = args?.reverseConnectionEndpointCustomerIps;
            resourceInputs["searchNodeCount"] = args?.searchNodeCount;
            resourceInputs["searchNodeHostMemoryGb"] = args?.searchNodeHostMemoryGb;
            resourceInputs["searchNodeHostOcpuCount"] = args?.searchNodeHostOcpuCount;
            resourceInputs["searchNodeHostShape"] = args?.searchNodeHostShape;
            resourceInputs["searchNodeHostType"] = args?.searchNodeHostType;
            resourceInputs["searchNodeStorageGb"] = args?.searchNodeStorageGb;
            resourceInputs["securityMasterUserName"] = args?.securityMasterUserName;
            resourceInputs["securityMasterUserPasswordHash"] = args?.securityMasterUserPasswordHash ? pulumi.secret(args.securityMasterUserPasswordHash) : undefined;
            resourceInputs["securityMode"] = args?.securityMode;
            resourceInputs["securitySamlConfig"] = args?.securitySamlConfig ? pulumi.secret(args.securitySamlConfig) : undefined;
            resourceInputs["softwareVersion"] = args?.softwareVersion;
            resourceInputs["subnetCompartmentId"] = args?.subnetCompartmentId;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["systemTags"] = args?.systemTags;
            resourceInputs["upgradeMajorVersionTrigger"] = args?.upgradeMajorVersionTrigger;
            resourceInputs["vcnCompartmentId"] = args?.vcnCompartmentId;
            resourceInputs["vcnId"] = args?.vcnId;
            resourceInputs["availabilityDomains"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["opendashboardFqdn"] = undefined /*out*/;
            resourceInputs["opendashboardPrivateIp"] = undefined /*out*/;
            resourceInputs["opensearchFqdn"] = undefined /*out*/;
            resourceInputs["opensearchPrivateIp"] = undefined /*out*/;
            resourceInputs["reverseConnectionEndpoints"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeDeleted"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
            resourceInputs["totalStorageGb"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["securityMasterUserPasswordHash", "securitySamlConfig"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * The availability domains to distribute the cluser nodes across.
     */
    availabilityDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The OCID of the compartment to create the cluster in.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) An optional property when incremented triggers Configure Outbound Cluster. Could be set to any integer value.
     */
    configureOutboundClusterTrigger?: pulumi.Input<number>;
    /**
     * (Updatable) The number of data nodes to configure for the cluster.
     */
    dataNodeCount?: pulumi.Input<number>;
    /**
     * The bare metal shape for the cluster's data nodes.
     */
    dataNodeHostBareMetalShape?: pulumi.Input<string>;
    /**
     * (Updatable) The amount of memory in GB, to configure per node for the cluster's data nodes.
     */
    dataNodeHostMemoryGb?: pulumi.Input<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluster's data nodes.
     */
    dataNodeHostOcpuCount?: pulumi.Input<number>;
    /**
     * (Updatable) The node shape for the cluster's data nodes.
     */
    dataNodeHostShape?: pulumi.Input<string>;
    /**
     * TThe instance type for the cluster's data nodes.
     */
    dataNodeHostType?: pulumi.Input<string>;
    /**
     * (Updatable) The amount of storage in GB, to configure per node for the cluster's data nodes.
     */
    dataNodeStorageGb?: pulumi.Input<number>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) The name of the cluster. Avoid entering confidential information.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The fully qualified domain name (FQDN) for the cluster's API endpoint.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of inbound clusters that will be queried using cross cluster search
     */
    inboundClusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Additional information about the current lifecycle state of the cluster.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * (Updatable) Details for creation of maintenance details
     */
    maintenanceDetails?: pulumi.Input<inputs.Opensearch.ClusterMaintenanceDetails>;
    /**
     * (Updatable) The number of master nodes to configure for the cluster.
     */
    masterNodeCount?: pulumi.Input<number>;
    /**
     * The bare metal shape for the cluster's master nodes.
     */
    masterNodeHostBareMetalShape?: pulumi.Input<string>;
    /**
     * (Updatable) The amount of memory in GB, to configure per node for the cluster's master nodes.
     */
    masterNodeHostMemoryGb?: pulumi.Input<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluser's master nodes.
     */
    masterNodeHostOcpuCount?: pulumi.Input<number>;
    /**
     * (Updatable) The node shape for the cluster's master nodes.
     */
    masterNodeHostShape?: pulumi.Input<string>;
    /**
     * The instance type for the cluster's master nodes.
     */
    masterNodeHostType?: pulumi.Input<string>;
    /**
     * The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
     */
    opendashboardFqdn?: pulumi.Input<string>;
    /**
     * (Updatable) The number of OpenSearch Dashboard nodes to configure for the cluster.
     */
    opendashboardNodeCount?: pulumi.Input<number>;
    /**
     * (Updatable) The amount of memory in GB, to configure for the cluster's OpenSearch Dashboard nodes.
     */
    opendashboardNodeHostMemoryGb?: pulumi.Input<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluster's OpenSearch Dashboard nodes.
     */
    opendashboardNodeHostOcpuCount?: pulumi.Input<number>;
    /**
     * (Updatable) The node shape for the cluster's OpenSearch Dashboard nodes.
     */
    opendashboardNodeHostShape?: pulumi.Input<string>;
    /**
     * The private IP address for the cluster's OpenSearch Dashboard.
     */
    opendashboardPrivateIp?: pulumi.Input<string>;
    /**
     * The fully qualified domain name (FQDN) for the cluster's API endpoint.
     */
    opensearchFqdn?: pulumi.Input<string>;
    /**
     * The cluster's private IP address.
     */
    opensearchPrivateIp?: pulumi.Input<string>;
    /**
     * (Updatable) This configuration is used for passing request details to connect outbound cluster(s) to the inbound cluster (coordinating cluster)
     */
    outboundClusterConfig?: pulumi.Input<inputs.Opensearch.ClusterOutboundClusterConfig>;
    /**
     * (Updatable) The customer IP addresses of the endpoint in customer VCN
     */
    reverseConnectionEndpointCustomerIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of reverse connection endpoints.
     */
    reverseConnectionEndpoints?: pulumi.Input<pulumi.Input<inputs.Opensearch.ClusterReverseConnectionEndpoint>[]>;
    /**
     * (Updatable) The number of search nodes configured for the cluster.
     */
    searchNodeCount?: pulumi.Input<number>;
    /**
     * (Updatable) The amount of memory in GB, for the cluster's search nodes.
     */
    searchNodeHostMemoryGb?: pulumi.Input<number>;
    /**
     * (Updatable) The number of OCPUs configured for the cluster's search nodes.
     */
    searchNodeHostOcpuCount?: pulumi.Input<number>;
    /**
     * (Updatable) The node shape for the cluster's search nodes.
     */
    searchNodeHostShape?: pulumi.Input<string>;
    /**
     * The instance type for the cluster's search nodes.
     */
    searchNodeHostType?: pulumi.Input<string>;
    /**
     * (Updatable) The amount of storage in GB, to configure per node for the cluster's search nodes.
     */
    searchNodeStorageGb?: pulumi.Input<number>;
    /**
     * (Updatable) The name of the master user that are used to manage security config
     */
    securityMasterUserName?: pulumi.Input<string>;
    /**
     * (Updatable) The password hash of the master user that are used to manage security config
     */
    securityMasterUserPasswordHash?: pulumi.Input<string>;
    /**
     * (Updatable) The security mode of the cluster.
     */
    securityMode?: pulumi.Input<string>;
    /**
     * SAML policy is optionally used for Opensearch cluster to config SAML authentication
     */
    securitySamlConfig?: pulumi.Input<inputs.Opensearch.ClusterSecuritySamlConfig>;
    /**
     * (Updatable) The version of the software the cluster is running.
     */
    softwareVersion?: pulumi.Input<string>;
    /**
     * The current state of the cluster.
     */
    state?: pulumi.Input<string>;
    /**
     * The OCID for the compartment where the cluster's subnet is located.
     */
    subnetCompartmentId?: pulumi.Input<string>;
    /**
     * The OCID of the cluster's subnet.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The amount of time in milliseconds since the cluster was created.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The amount of time in milliseconds since the cluster was updated.
     */
    timeDeleted?: pulumi.Input<string>;
    /**
     * The amount of time in milliseconds since the cluster was updated.
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * The size in GB of the cluster's total storage.
     */
    totalStorageGb?: pulumi.Input<number>;
    /**
     * An optional property to upgrade the major version of the cluster. This workflow upgrades the cluster without creating a clone. If you want to create a clone and upgrade the clone for testing please use SDK or CLI.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    upgradeMajorVersionTrigger?: pulumi.Input<number>;
    /**
     * The OCID for the compartment where the cluster's VCN is located.
     */
    vcnCompartmentId?: pulumi.Input<string>;
    /**
     * The OCID of the cluster's VCN.
     */
    vcnId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The OCID of the compartment to create the cluster in.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) An optional property when incremented triggers Configure Outbound Cluster. Could be set to any integer value.
     */
    configureOutboundClusterTrigger?: pulumi.Input<number>;
    /**
     * (Updatable) The number of data nodes to configure for the cluster.
     */
    dataNodeCount: pulumi.Input<number>;
    /**
     * The bare metal shape for the cluster's data nodes.
     */
    dataNodeHostBareMetalShape?: pulumi.Input<string>;
    /**
     * (Updatable) The amount of memory in GB, to configure per node for the cluster's data nodes.
     */
    dataNodeHostMemoryGb: pulumi.Input<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluster's data nodes.
     */
    dataNodeHostOcpuCount: pulumi.Input<number>;
    /**
     * (Updatable) The node shape for the cluster's data nodes.
     */
    dataNodeHostShape?: pulumi.Input<string>;
    /**
     * TThe instance type for the cluster's data nodes.
     */
    dataNodeHostType: pulumi.Input<string>;
    /**
     * (Updatable) The amount of storage in GB, to configure per node for the cluster's data nodes.
     */
    dataNodeStorageGb: pulumi.Input<number>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) The name of the cluster. Avoid entering confidential information.
     */
    displayName: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of inbound clusters that will be queried using cross cluster search
     */
    inboundClusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Updatable) Details for creation of maintenance details
     */
    maintenanceDetails?: pulumi.Input<inputs.Opensearch.ClusterMaintenanceDetails>;
    /**
     * (Updatable) The number of master nodes to configure for the cluster.
     */
    masterNodeCount: pulumi.Input<number>;
    /**
     * The bare metal shape for the cluster's master nodes.
     */
    masterNodeHostBareMetalShape?: pulumi.Input<string>;
    /**
     * (Updatable) The amount of memory in GB, to configure per node for the cluster's master nodes.
     */
    masterNodeHostMemoryGb: pulumi.Input<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluser's master nodes.
     */
    masterNodeHostOcpuCount: pulumi.Input<number>;
    /**
     * (Updatable) The node shape for the cluster's master nodes.
     */
    masterNodeHostShape?: pulumi.Input<string>;
    /**
     * The instance type for the cluster's master nodes.
     */
    masterNodeHostType: pulumi.Input<string>;
    /**
     * (Updatable) The number of OpenSearch Dashboard nodes to configure for the cluster.
     */
    opendashboardNodeCount: pulumi.Input<number>;
    /**
     * (Updatable) The amount of memory in GB, to configure for the cluster's OpenSearch Dashboard nodes.
     */
    opendashboardNodeHostMemoryGb: pulumi.Input<number>;
    /**
     * (Updatable) The number of OCPUs to configure for the cluster's OpenSearch Dashboard nodes.
     */
    opendashboardNodeHostOcpuCount: pulumi.Input<number>;
    /**
     * (Updatable) The node shape for the cluster's OpenSearch Dashboard nodes.
     */
    opendashboardNodeHostShape?: pulumi.Input<string>;
    /**
     * (Updatable) This configuration is used for passing request details to connect outbound cluster(s) to the inbound cluster (coordinating cluster)
     */
    outboundClusterConfig?: pulumi.Input<inputs.Opensearch.ClusterOutboundClusterConfig>;
    /**
     * (Updatable) The customer IP addresses of the endpoint in customer VCN
     */
    reverseConnectionEndpointCustomerIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Updatable) The number of search nodes configured for the cluster.
     */
    searchNodeCount?: pulumi.Input<number>;
    /**
     * (Updatable) The amount of memory in GB, for the cluster's search nodes.
     */
    searchNodeHostMemoryGb?: pulumi.Input<number>;
    /**
     * (Updatable) The number of OCPUs configured for the cluster's search nodes.
     */
    searchNodeHostOcpuCount?: pulumi.Input<number>;
    /**
     * (Updatable) The node shape for the cluster's search nodes.
     */
    searchNodeHostShape?: pulumi.Input<string>;
    /**
     * The instance type for the cluster's search nodes.
     */
    searchNodeHostType?: pulumi.Input<string>;
    /**
     * (Updatable) The amount of storage in GB, to configure per node for the cluster's search nodes.
     */
    searchNodeStorageGb?: pulumi.Input<number>;
    /**
     * (Updatable) The name of the master user that are used to manage security config
     */
    securityMasterUserName?: pulumi.Input<string>;
    /**
     * (Updatable) The password hash of the master user that are used to manage security config
     */
    securityMasterUserPasswordHash?: pulumi.Input<string>;
    /**
     * (Updatable) The security mode of the cluster.
     */
    securityMode?: pulumi.Input<string>;
    /**
     * SAML policy is optionally used for Opensearch cluster to config SAML authentication
     */
    securitySamlConfig?: pulumi.Input<inputs.Opensearch.ClusterSecuritySamlConfig>;
    /**
     * (Updatable) The version of the software the cluster is running.
     */
    softwareVersion: pulumi.Input<string>;
    /**
     * The OCID for the compartment where the cluster's subnet is located.
     */
    subnetCompartmentId: pulumi.Input<string>;
    /**
     * The OCID of the cluster's subnet.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An optional property to upgrade the major version of the cluster. This workflow upgrades the cluster without creating a clone. If you want to create a clone and upgrade the clone for testing please use SDK or CLI.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    upgradeMajorVersionTrigger?: pulumi.Input<number>;
    /**
     * The OCID for the compartment where the cluster's VCN is located.
     */
    vcnCompartmentId: pulumi.Input<string>;
    /**
     * The OCID of the cluster's VCN.
     */
    vcnId: pulumi.Input<string>;
}
