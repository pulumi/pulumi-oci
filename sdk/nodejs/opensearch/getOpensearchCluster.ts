// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Opensearch Cluster resource in Oracle Cloud Infrastructure Opensearch service.
 *
 * Gets a OpensearchCluster by identifier
 *
 * ## Prerequisites
 *
 * The below policies must be created in compartment before creating OpensearchCluster
 *
 * ##### {Compartment-Name} - Name of  your compartment
 *
 * For latest documentation on OpenSearch use please refer to https://docs.oracle.com/en-us/iaas/Content/search-opensearch/home.htm\
 * Required permissions: https://docs.oracle.com/en-us/iaas/Content/search-opensearch/Concepts/ocisearchpermissions.htm
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testOpensearchCluster = oci.Opensearch.getOpensearchCluster({
 *     opensearchClusterId: testOpensearchClusterOciOpensearchOpensearchCluster.id,
 * });
 * ```
 */
export function getOpensearchCluster(args: GetOpensearchClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetOpensearchClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Opensearch/getOpensearchCluster:getOpensearchCluster", {
        "opensearchClusterId": args.opensearchClusterId,
    }, opts);
}

/**
 * A collection of arguments for invoking getOpensearchCluster.
 */
export interface GetOpensearchClusterArgs {
    /**
     * unique OpensearchCluster identifier
     */
    opensearchClusterId: string;
}

/**
 * A collection of values returned by getOpensearchCluster.
 */
export interface GetOpensearchClusterResult {
    /**
     * The availability domains to distribute the cluser nodes across.
     */
    readonly availabilityDomains: string[];
    /**
     * The OCID of the compartment where the cluster is located.
     */
    readonly compartmentId: string;
    /**
     * The number of data nodes configured for the cluster.
     */
    readonly dataNodeCount: number;
    /**
     * The bare metal shape for the cluster's data nodes.
     */
    readonly dataNodeHostBareMetalShape: string;
    /**
     * The amount of memory in GB, for the cluster's data nodes.
     */
    readonly dataNodeHostMemoryGb: number;
    /**
     * The number of OCPUs configured for the cluster's data nodes.
     */
    readonly dataNodeHostOcpuCount: number;
    /**
     * The instance type for the cluster's data nodes.
     */
    readonly dataNodeHostType: string;
    /**
     * The amount of storage in GB, to configure per node for the cluster's data nodes.
     */
    readonly dataNodeStorageGb: number;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    readonly definedTags: {[key: string]: string};
    /**
     * The name of the cluster. Avoid entering confidential information.
     */
    readonly displayName: string;
    /**
     * The fully qualified domain name (FQDN) for the cluster's API endpoint.
     */
    readonly fqdn: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    readonly freeformTags: {[key: string]: string};
    /**
     * The OCID of the cluster.
     */
    readonly id: string;
    /**
     * Additional information about the current lifecycle state of the cluster.
     */
    readonly lifecycleDetails: string;
    /**
     * The number of master nodes configured for the cluster.
     */
    readonly masterNodeCount: number;
    /**
     * The bare metal shape for the cluster's master nodes.
     */
    readonly masterNodeHostBareMetalShape: string;
    /**
     * The amount of memory in GB, for the cluster's master nodes.
     */
    readonly masterNodeHostMemoryGb: number;
    /**
     * The number of OCPUs configured for cluster's master nodes.
     */
    readonly masterNodeHostOcpuCount: number;
    /**
     * The instance type for the cluster's master nodes.
     */
    readonly masterNodeHostType: string;
    /**
     * The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
     */
    readonly opendashboardFqdn: string;
    /**
     * The number of OpenSearch Dashboard nodes configured for the cluster.
     */
    readonly opendashboardNodeCount: number;
    /**
     * The amount of memory in GB, for the cluster's OpenSearch Dashboard nodes.
     */
    readonly opendashboardNodeHostMemoryGb: number;
    /**
     * The amount of memory in GB, for the cluster's OpenSearch Dashboard nodes.
     */
    readonly opendashboardNodeHostOcpuCount: number;
    /**
     * The private IP address for the cluster's OpenSearch Dashboard.
     */
    readonly opendashboardPrivateIp: string;
    readonly opensearchClusterId: string;
    /**
     * The fully qualified domain name (FQDN) for the cluster's API endpoint.
     */
    readonly opensearchFqdn: string;
    /**
     * The cluster's private IP address.
     */
    readonly opensearchPrivateIp: string;
    /**
     * The name of the master user that are used to manage security config
     */
    readonly securityMasterUserName: string;
    /**
     * The password hash of the master user that are used to manage security config
     */
    readonly securityMasterUserPasswordHash: string;
    /**
     * The security mode of the cluster.
     */
    readonly securityMode: string;
    /**
     * The software version the cluster is running.
     */
    readonly softwareVersion: string;
    /**
     * The current state of the cluster.
     */
    readonly state: string;
    /**
     * The OCID for the compartment where the cluster's subnet is located.
     */
    readonly subnetCompartmentId: string;
    /**
     * The OCID of the cluster's subnet.
     */
    readonly subnetId: string;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    readonly systemTags: {[key: string]: string};
    /**
     * The amount of time in milliseconds since the cluster was created.
     */
    readonly timeCreated: string;
    /**
     * The amount of time in milliseconds since the cluster was updated.
     */
    readonly timeDeleted: string;
    /**
     * The amount of time in milliseconds since the cluster was updated.
     */
    readonly timeUpdated: string;
    /**
     * The size in GB of the cluster's total storage.
     */
    readonly totalStorageGb: number;
    /**
     * The OCID for the compartment where the cluster's VCN is located.
     */
    readonly vcnCompartmentId: string;
    /**
     * The OCID of the cluster's VCN.
     */
    readonly vcnId: string;
}
/**
 * This data source provides details about a specific Opensearch Cluster resource in Oracle Cloud Infrastructure Opensearch service.
 *
 * Gets a OpensearchCluster by identifier
 *
 * ## Prerequisites
 *
 * The below policies must be created in compartment before creating OpensearchCluster
 *
 * ##### {Compartment-Name} - Name of  your compartment
 *
 * For latest documentation on OpenSearch use please refer to https://docs.oracle.com/en-us/iaas/Content/search-opensearch/home.htm\
 * Required permissions: https://docs.oracle.com/en-us/iaas/Content/search-opensearch/Concepts/ocisearchpermissions.htm
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testOpensearchCluster = oci.Opensearch.getOpensearchCluster({
 *     opensearchClusterId: testOpensearchClusterOciOpensearchOpensearchCluster.id,
 * });
 * ```
 */
export function getOpensearchClusterOutput(args: GetOpensearchClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOpensearchClusterResult> {
    return pulumi.output(args).apply((a: any) => getOpensearchCluster(a, opts))
}

/**
 * A collection of arguments for invoking getOpensearchCluster.
 */
export interface GetOpensearchClusterOutputArgs {
    /**
     * unique OpensearchCluster identifier
     */
    opensearchClusterId: pulumi.Input<string>;
}
