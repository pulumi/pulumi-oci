// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Categories in Oracle Cloud Infrastructure Optimizer service.
 *
 * Lists the supported Cloud Advisor categories.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testCategories = oci.Optimizer.getCategories({
 *     compartmentId: _var.compartment_id,
 *     compartmentIdInSubtree: _var.category_compartment_id_in_subtree,
 *     childTenancyIds: _var.category_child_tenancy_ids,
 *     includeOrganization: _var.category_include_organization,
 *     name: _var.category_name,
 *     state: _var.category_state,
 * });
 * ```
 */
export function getCategories(args: GetCategoriesArgs, opts?: pulumi.InvokeOptions): Promise<GetCategoriesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Optimizer/getCategories:getCategories", {
        "childTenancyIds": args.childTenancyIds,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "includeOrganization": args.includeOrganization,
        "name": args.name,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getCategories.
 */
export interface GetCategoriesArgs {
    /**
     * A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A. 
     *
     * If this list contains a tenancy id that isn't part of the organization of parent P, the request will  fail. That is, let's say there is an organization with parent P with children A and B, and also one  other tenant T that isn't part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
     *
     * It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
     *
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     */
    childTenancyIds?: string[];
    /**
     * The OCID of the compartment.
     */
    compartmentId: string;
    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     *
     * Can only be set to true when performing ListCompartments on the tenancy (root compartment).
     */
    compartmentIdInSubtree: boolean;
    filters?: inputs.Optimizer.GetCategoriesFilter[];
    /**
     * When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
     *
     * Please note that this parameter shouldn't be used along with childTenancyIds parameter. If you would like  to get results specifically for parent P and only child A, use the childTenancyIds parameter and populate the list with tenancy id of P and A.
     *
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     */
    includeOrganization?: boolean;
    /**
     * Optional. A filter that returns results that match the name specified.
     */
    name?: string;
    /**
     * A filter that returns results that match the lifecycle state specified.
     */
    state?: string;
}

/**
 * A collection of values returned by getCategories.
 */
export interface GetCategoriesResult {
    /**
     * The list of category_collection.
     */
    readonly categoryCollections?: outputs.Optimizer.GetCategoriesCategoryCollection[];
    readonly childTenancyIds?: string[];
    /**
     * The OCID of the tenancy. The tenancy is the root compartment.
     */
    readonly compartmentId: string;
    readonly compartmentIdInSubtree: boolean;
    readonly filters?: outputs.Optimizer.GetCategoriesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id?: string;
    readonly includeOrganization?: boolean;
    /**
     * The name assigned to the category.
     */
    readonly name?: string;
    /**
     * The category's current state.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Categories in Oracle Cloud Infrastructure Optimizer service.
 *
 * Lists the supported Cloud Advisor categories.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testCategories = oci.Optimizer.getCategories({
 *     compartmentId: _var.compartment_id,
 *     compartmentIdInSubtree: _var.category_compartment_id_in_subtree,
 *     childTenancyIds: _var.category_child_tenancy_ids,
 *     includeOrganization: _var.category_include_organization,
 *     name: _var.category_name,
 *     state: _var.category_state,
 * });
 * ```
 */
export function getCategoriesOutput(args: GetCategoriesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCategoriesResult> {
    return pulumi.output(args).apply((a: any) => getCategories(a, opts))
}

/**
 * A collection of arguments for invoking getCategories.
 */
export interface GetCategoriesOutputArgs {
    /**
     * A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A. 
     *
     * If this list contains a tenancy id that isn't part of the organization of parent P, the request will  fail. That is, let's say there is an organization with parent P with children A and B, and also one  other tenant T that isn't part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
     *
     * It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
     *
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     */
    childTenancyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The OCID of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     *
     * Can only be set to true when performing ListCompartments on the tenancy (root compartment).
     */
    compartmentIdInSubtree: pulumi.Input<boolean>;
    filters?: pulumi.Input<pulumi.Input<inputs.Optimizer.GetCategoriesFilterArgs>[]>;
    /**
     * When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
     *
     * Please note that this parameter shouldn't be used along with childTenancyIds parameter. If you would like  to get results specifically for parent P and only child A, use the childTenancyIds parameter and populate the list with tenancy id of P and A.
     *
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     */
    includeOrganization?: pulumi.Input<boolean>;
    /**
     * Optional. A filter that returns results that match the name specified.
     */
    name?: pulumi.Input<string>;
    /**
     * A filter that returns results that match the lifecycle state specified.
     */
    state?: pulumi.Input<string>;
}
