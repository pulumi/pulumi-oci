// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Histories in Oracle Cloud Infrastructure Optimizer service.
 *
 * Lists changes to the recommendations based on user activity.
 * For example, lists when recommendations have been implemented, dismissed, postponed, or reactivated.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testHistories = oci.Optimizer.getHistories({
 *     compartmentId: _var.compartment_id,
 *     compartmentIdInSubtree: _var.history_compartment_id_in_subtree,
 *     includeResourceMetadata: _var.history_include_resource_metadata,
 *     name: _var.history_name,
 *     recommendationId: oci_optimizer_recommendation.test_recommendation.id,
 *     recommendationName: oci_optimizer_recommendation.test_recommendation.name,
 *     resourceType: _var.history_resource_type,
 *     state: _var.history_state,
 *     status: _var.history_status,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getHistories(args: GetHistoriesArgs, opts?: pulumi.InvokeOptions): Promise<GetHistoriesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Optimizer/getHistories:getHistories", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "includeResourceMetadata": args.includeResourceMetadata,
        "name": args.name,
        "recommendationId": args.recommendationId,
        "recommendationName": args.recommendationName,
        "resourceType": args.resourceType,
        "state": args.state,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getHistories.
 */
export interface GetHistoriesArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: string;
    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     *
     * Can only be set to true when performing ListCompartments on the tenancy (root compartment).
     */
    compartmentIdInSubtree: boolean;
    filters?: inputs.Optimizer.GetHistoriesFilter[];
    /**
     * Supplement additional resource information in extended metadata response.
     */
    includeResourceMetadata?: boolean;
    /**
     * Optional. A filter that returns results that match the name specified.
     */
    name?: string;
    /**
     * The unique OCID associated with the recommendation.
     */
    recommendationId?: string;
    /**
     * Optional. A filter that returns results that match the recommendation name specified.
     */
    recommendationName?: string;
    /**
     * Optional. A filter that returns results that match the resource type specified.
     */
    resourceType?: string;
    /**
     * A filter that returns results that match the lifecycle state specified.
     */
    state?: string;
    /**
     * A filter that returns recommendations that match the status specified.
     */
    status?: string;
}

/**
 * A collection of values returned by getHistories.
 */
export interface GetHistoriesResult {
    /**
     * The OCID of the compartment.
     */
    readonly compartmentId: string;
    readonly compartmentIdInSubtree: boolean;
    readonly filters?: outputs.Optimizer.GetHistoriesFilter[];
    /**
     * The list of history_collection.
     */
    readonly historyCollections: outputs.Optimizer.GetHistoriesHistoryCollection[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly includeResourceMetadata?: boolean;
    /**
     * The name assigned to the resource.
     */
    readonly name?: string;
    /**
     * The unique OCID associated with the recommendation.
     */
    readonly recommendationId?: string;
    /**
     * The name assigned to the recommendation.
     */
    readonly recommendationName?: string;
    /**
     * The kind of resource.
     */
    readonly resourceType?: string;
    /**
     * The recommendation history's current state.
     */
    readonly state?: string;
    /**
     * The current status of the resource action.
     */
    readonly status?: string;
}
/**
 * This data source provides the list of Histories in Oracle Cloud Infrastructure Optimizer service.
 *
 * Lists changes to the recommendations based on user activity.
 * For example, lists when recommendations have been implemented, dismissed, postponed, or reactivated.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testHistories = oci.Optimizer.getHistories({
 *     compartmentId: _var.compartment_id,
 *     compartmentIdInSubtree: _var.history_compartment_id_in_subtree,
 *     includeResourceMetadata: _var.history_include_resource_metadata,
 *     name: _var.history_name,
 *     recommendationId: oci_optimizer_recommendation.test_recommendation.id,
 *     recommendationName: oci_optimizer_recommendation.test_recommendation.name,
 *     resourceType: _var.history_resource_type,
 *     state: _var.history_state,
 *     status: _var.history_status,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getHistoriesOutput(args: GetHistoriesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHistoriesResult> {
    return pulumi.output(args).apply((a: any) => getHistories(a, opts))
}

/**
 * A collection of arguments for invoking getHistories.
 */
export interface GetHistoriesOutputArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     *
     * Can only be set to true when performing ListCompartments on the tenancy (root compartment).
     */
    compartmentIdInSubtree: pulumi.Input<boolean>;
    filters?: pulumi.Input<pulumi.Input<inputs.Optimizer.GetHistoriesFilterArgs>[]>;
    /**
     * Supplement additional resource information in extended metadata response.
     */
    includeResourceMetadata?: pulumi.Input<boolean>;
    /**
     * Optional. A filter that returns results that match the name specified.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique OCID associated with the recommendation.
     */
    recommendationId?: pulumi.Input<string>;
    /**
     * Optional. A filter that returns results that match the recommendation name specified.
     */
    recommendationName?: pulumi.Input<string>;
    /**
     * Optional. A filter that returns results that match the resource type specified.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * A filter that returns results that match the lifecycle state specified.
     */
    state?: pulumi.Input<string>;
    /**
     * A filter that returns recommendations that match the status specified.
     */
    status?: pulumi.Input<string>;
}
