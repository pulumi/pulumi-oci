// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Profiles in Oracle Cloud Infrastructure Optimizer service.
 *
 * Lists the existing profiles.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testProfiles = oci.Optimizer.getProfiles({
 *     compartmentId: _var.compartment_id,
 *     name: _var.profile_name,
 *     state: _var.profile_state,
 * });
 * ```
 */
export function getProfiles(args: GetProfilesArgs, opts?: pulumi.InvokeOptions): Promise<GetProfilesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("oci:Optimizer/getProfiles:getProfiles", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "name": args.name,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getProfiles.
 */
export interface GetProfilesArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: string;
    filters?: inputs.Optimizer.GetProfilesFilter[];
    /**
     * Optional. A filter that returns results that match the name specified.
     */
    name?: string;
    /**
     * A filter that returns results that match the lifecycle state specified.
     */
    state?: string;
}

/**
 * A collection of values returned by getProfiles.
 */
export interface GetProfilesResult {
    /**
     * The OCID of the tenancy. The tenancy is the root compartment.
     */
    readonly compartmentId: string;
    readonly filters?: outputs.Optimizer.GetProfilesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name assigned to the profile. Avoid entering confidential information.
     */
    readonly name?: string;
    /**
     * The list of profile_collection.
     */
    readonly profileCollections: outputs.Optimizer.GetProfilesProfileCollection[];
    /**
     * The profile's current state.
     */
    readonly state?: string;
}

export function getProfilesOutput(args: GetProfilesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProfilesResult> {
    return pulumi.output(args).apply(a => getProfiles(a, opts))
}

/**
 * A collection of arguments for invoking getProfiles.
 */
export interface GetProfilesOutputArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Optimizer.GetProfilesFilterArgs>[]>;
    /**
     * Optional. A filter that returns results that match the name specified.
     */
    name?: pulumi.Input<string>;
    /**
     * A filter that returns results that match the lifecycle state specified.
     */
    state?: pulumi.Input<string>;
}
