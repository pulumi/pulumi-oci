// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Recommendation Strategies in Oracle Cloud Infrastructure Optimizer service.
 *
 * Lists the existing strategies.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRecommendationStrategies = oci.Optimizer.getRecommendationStrategies({
 *     compartmentId: compartmentId,
 *     compartmentIdInSubtree: recommendationStrategyCompartmentIdInSubtree,
 *     name: recommendationStrategyName,
 *     recommendationName: testRecommendation.name,
 * });
 * ```
 */
export function getRecommendationStrategies(args: GetRecommendationStrategiesArgs, opts?: pulumi.InvokeOptions): Promise<GetRecommendationStrategiesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Optimizer/getRecommendationStrategies:getRecommendationStrategies", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "name": args.name,
        "recommendationName": args.recommendationName,
    }, opts);
}

/**
 * A collection of arguments for invoking getRecommendationStrategies.
 */
export interface GetRecommendationStrategiesArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: string;
    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     *
     * Can only be set to true when performing ListCompartments on the tenancy (root compartment).
     */
    compartmentIdInSubtree: boolean;
    filters?: inputs.Optimizer.GetRecommendationStrategiesFilter[];
    /**
     * Optional. A filter that returns results that match the name specified.
     */
    name?: string;
    /**
     * Optional. A filter that returns results that match the recommendation name specified.
     */
    recommendationName?: string;
}

/**
 * A collection of values returned by getRecommendationStrategies.
 */
export interface GetRecommendationStrategiesResult {
    readonly compartmentId: string;
    readonly compartmentIdInSubtree: boolean;
    readonly filters?: outputs.Optimizer.GetRecommendationStrategiesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the strategy parameter.
     */
    readonly name?: string;
    readonly recommendationName?: string;
    /**
     * The list of recommendation_strategy_collection.
     */
    readonly recommendationStrategyCollections: outputs.Optimizer.GetRecommendationStrategiesRecommendationStrategyCollection[];
}
/**
 * This data source provides the list of Recommendation Strategies in Oracle Cloud Infrastructure Optimizer service.
 *
 * Lists the existing strategies.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRecommendationStrategies = oci.Optimizer.getRecommendationStrategies({
 *     compartmentId: compartmentId,
 *     compartmentIdInSubtree: recommendationStrategyCompartmentIdInSubtree,
 *     name: recommendationStrategyName,
 *     recommendationName: testRecommendation.name,
 * });
 * ```
 */
export function getRecommendationStrategiesOutput(args: GetRecommendationStrategiesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRecommendationStrategiesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:Optimizer/getRecommendationStrategies:getRecommendationStrategies", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "name": args.name,
        "recommendationName": args.recommendationName,
    }, opts);
}

/**
 * A collection of arguments for invoking getRecommendationStrategies.
 */
export interface GetRecommendationStrategiesOutputArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     *
     * Can only be set to true when performing ListCompartments on the tenancy (root compartment).
     */
    compartmentIdInSubtree: pulumi.Input<boolean>;
    filters?: pulumi.Input<pulumi.Input<inputs.Optimizer.GetRecommendationStrategiesFilterArgs>[]>;
    /**
     * Optional. A filter that returns results that match the name specified.
     */
    name?: pulumi.Input<string>;
    /**
     * Optional. A filter that returns results that match the recommendation name specified.
     */
    recommendationName?: pulumi.Input<string>;
}
