// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Recommendations in Oracle Cloud Infrastructure Optimizer service.
 *
 * Lists the Cloud Advisor recommendations that are currently supported.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRecommendations = oci.Optimizer.getRecommendations({
 *     compartmentId: compartmentId,
 *     compartmentIdInSubtree: recommendationCompartmentIdInSubtree,
 *     categoryId: testCategory.id,
 *     categoryName: testCategory.name,
 *     childTenancyIds: recommendationChildTenancyIds,
 *     includeOrganization: recommendationIncludeOrganization,
 *     name: recommendationName,
 *     state: recommendationState,
 *     status: recommendationStatus,
 * });
 * ```
 */
export function getRecommendations(args: GetRecommendationsArgs, opts?: pulumi.InvokeOptions): Promise<GetRecommendationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Optimizer/getRecommendations:getRecommendations", {
        "categoryId": args.categoryId,
        "categoryName": args.categoryName,
        "childTenancyIds": args.childTenancyIds,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "includeOrganization": args.includeOrganization,
        "name": args.name,
        "state": args.state,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getRecommendations.
 */
export interface GetRecommendationsArgs {
    /**
     * The unique OCID associated with the category.
     */
    categoryId?: string;
    /**
     * Optional. A filter that returns results that match the category name specified.
     */
    categoryName?: string;
    /**
     * A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A. 
     *
     * If this list contains a tenancy id that isn't part of the organization of parent P, the request will  fail. That is, let's say there is an organization with parent P with children A and B, and also one  other tenant T that isn't part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
     *
     * It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
     *
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     */
    childTenancyIds?: string[];
    /**
     * The OCID of the compartment.
     */
    compartmentId: string;
    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     *
     * Can only be set to true when performing ListCompartments on the tenancy (root compartment).
     */
    compartmentIdInSubtree: boolean;
    filters?: inputs.Optimizer.GetRecommendationsFilter[];
    /**
     * When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
     *
     * Please note that this parameter shouldn't be used along with childTenancyIds parameter. If you would like  to get results specifically for parent P and only child A, use the childTenancyIds parameter and populate the list with tenancy id of P and A.
     *
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     */
    includeOrganization?: boolean;
    /**
     * Optional. A filter that returns results that match the name specified.
     */
    name?: string;
    /**
     * A filter that returns results that match the lifecycle state specified.
     */
    state?: string;
    /**
     * A filter that returns recommendations that match the status specified.
     */
    status?: string;
}

/**
 * A collection of values returned by getRecommendations.
 */
export interface GetRecommendationsResult {
    /**
     * The unique OCID associated with the category.
     */
    readonly categoryId?: string;
    readonly categoryName?: string;
    readonly childTenancyIds?: string[];
    /**
     * The OCID of the tenancy. The tenancy is the root compartment.
     */
    readonly compartmentId: string;
    readonly compartmentIdInSubtree: boolean;
    readonly filters?: outputs.Optimizer.GetRecommendationsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly includeOrganization?: boolean;
    /**
     * The name of the profile level.
     */
    readonly name?: string;
    /**
     * The list of recommendation_collection.
     */
    readonly recommendationCollections: outputs.Optimizer.GetRecommendationsRecommendationCollection[];
    /**
     * The recommendation's current state.
     */
    readonly state?: string;
    /**
     * The current status of the recommendation.
     */
    readonly status?: string;
}
/**
 * This data source provides the list of Recommendations in Oracle Cloud Infrastructure Optimizer service.
 *
 * Lists the Cloud Advisor recommendations that are currently supported.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRecommendations = oci.Optimizer.getRecommendations({
 *     compartmentId: compartmentId,
 *     compartmentIdInSubtree: recommendationCompartmentIdInSubtree,
 *     categoryId: testCategory.id,
 *     categoryName: testCategory.name,
 *     childTenancyIds: recommendationChildTenancyIds,
 *     includeOrganization: recommendationIncludeOrganization,
 *     name: recommendationName,
 *     state: recommendationState,
 *     status: recommendationStatus,
 * });
 * ```
 */
export function getRecommendationsOutput(args: GetRecommendationsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRecommendationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:Optimizer/getRecommendations:getRecommendations", {
        "categoryId": args.categoryId,
        "categoryName": args.categoryName,
        "childTenancyIds": args.childTenancyIds,
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "includeOrganization": args.includeOrganization,
        "name": args.name,
        "state": args.state,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getRecommendations.
 */
export interface GetRecommendationsOutputArgs {
    /**
     * The unique OCID associated with the category.
     */
    categoryId?: pulumi.Input<string>;
    /**
     * Optional. A filter that returns results that match the category name specified.
     */
    categoryName?: pulumi.Input<string>;
    /**
     * A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A. 
     *
     * If this list contains a tenancy id that isn't part of the organization of parent P, the request will  fail. That is, let's say there is an organization with parent P with children A and B, and also one  other tenant T that isn't part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
     *
     * It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
     *
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     */
    childTenancyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The OCID of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     *
     * Can only be set to true when performing ListCompartments on the tenancy (root compartment).
     */
    compartmentIdInSubtree: pulumi.Input<boolean>;
    filters?: pulumi.Input<pulumi.Input<inputs.Optimizer.GetRecommendationsFilterArgs>[]>;
    /**
     * When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
     *
     * Please note that this parameter shouldn't be used along with childTenancyIds parameter. If you would like  to get results specifically for parent P and only child A, use the childTenancyIds parameter and populate the list with tenancy id of P and A.
     *
     * When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
     */
    includeOrganization?: pulumi.Input<boolean>;
    /**
     * Optional. A filter that returns results that match the name specified.
     */
    name?: pulumi.Input<string>;
    /**
     * A filter that returns results that match the lifecycle state specified.
     */
    state?: pulumi.Input<string>;
    /**
     * A filter that returns recommendations that match the status specified.
     */
    status?: pulumi.Input<string>;
}
