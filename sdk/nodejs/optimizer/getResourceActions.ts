// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Resource Actions in Oracle Cloud Infrastructure Optimizer service.
 *
 * Lists the Cloud Advisor resource actions that are supported by the specified recommendation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testResourceActions = oci.Optimizer.getResourceActions({
 *     compartmentId: _var.compartment_id,
 *     compartmentIdInSubtree: _var.resource_action_compartment_id_in_subtree,
 *     recommendationId: oci_optimizer_recommendation.test_recommendation.id,
 *     name: _var.resource_action_name,
 *     resourceType: _var.resource_action_resource_type,
 *     state: _var.resource_action_state,
 *     status: _var.resource_action_status,
 * });
 * ```
 */
export function getResourceActions(args: GetResourceActionsArgs, opts?: pulumi.InvokeOptions): Promise<GetResourceActionsResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("oci:Optimizer/getResourceActions:getResourceActions", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "name": args.name,
        "recommendationId": args.recommendationId,
        "resourceType": args.resourceType,
        "state": args.state,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getResourceActions.
 */
export interface GetResourceActionsArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: string;
    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     */
    compartmentIdInSubtree: boolean;
    filters?: inputs.Optimizer.GetResourceActionsFilter[];
    /**
     * Optional. A filter that returns results that match the name specified.
     */
    name?: string;
    /**
     * The unique OCID associated with the recommendation.
     */
    recommendationId: string;
    /**
     * Optional. A filter that returns results that match the resource type specified.
     */
    resourceType?: string;
    /**
     * A filter that returns results that match the lifecycle state specified.
     */
    state?: string;
    /**
     * A filter that returns recommendations that match the status specified.
     */
    status?: string;
}

/**
 * A collection of values returned by getResourceActions.
 */
export interface GetResourceActionsResult {
    /**
     * The OCID of the compartment.
     */
    readonly compartmentId: string;
    readonly compartmentIdInSubtree: boolean;
    readonly filters?: outputs.Optimizer.GetResourceActionsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name assigned to the resource.
     */
    readonly name?: string;
    /**
     * The unique OCID associated with the recommendation.
     */
    readonly recommendationId: string;
    /**
     * The list of resource_action_collection.
     */
    readonly resourceActionCollections: outputs.Optimizer.GetResourceActionsResourceActionCollection[];
    /**
     * The kind of resource.
     */
    readonly resourceType?: string;
    /**
     * The resource action's current state.
     */
    readonly state?: string;
    /**
     * The current status of the resource action.
     */
    readonly status?: string;
}

export function getResourceActionsOutput(args: GetResourceActionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetResourceActionsResult> {
    return pulumi.output(args).apply(a => getResourceActions(a, opts))
}

/**
 * A collection of arguments for invoking getResourceActions.
 */
export interface GetResourceActionsOutputArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     */
    compartmentIdInSubtree: pulumi.Input<boolean>;
    filters?: pulumi.Input<pulumi.Input<inputs.Optimizer.GetResourceActionsFilterArgs>[]>;
    /**
     * Optional. A filter that returns results that match the name specified.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique OCID associated with the recommendation.
     */
    recommendationId: pulumi.Input<string>;
    /**
     * Optional. A filter that returns results that match the resource type specified.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * A filter that returns results that match the lifecycle state specified.
     */
    state?: pulumi.Input<string>;
    /**
     * A filter that returns recommendations that match the status specified.
     */
    status?: pulumi.Input<string>;
}
