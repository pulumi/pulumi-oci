// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Recommendation resource in Oracle Cloud Infrastructure Optimizer service.
 *
 * Updates the recommendation that corresponds to the specified OCID.
 * Use this operation to implement the following actions:
 *
 *   * Postpone recommendation
 *   * Dismiss recommendation
 *   * Reactivate recommendation
 *
 * ## Import
 *
 * Recommendations can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:Optimizer/recommendation:Recommendation test_recommendation "id"
 * ```
 */
export class Recommendation extends pulumi.CustomResource {
    /**
     * Get an existing Recommendation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecommendationState, opts?: pulumi.CustomResourceOptions): Recommendation {
        return new Recommendation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Optimizer/recommendation:Recommendation';

    /**
     * Returns true if the given object is an instance of Recommendation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Recommendation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Recommendation.__pulumiType;
    }

    /**
     * The unique OCID associated with the category.
     */
    public /*out*/ readonly categoryId!: pulumi.Output<string>;
    /**
     * The OCID of the tenancy. The tenancy is the root compartment.
     */
    public /*out*/ readonly compartmentId!: pulumi.Output<string>;
    /**
     * Text describing the recommendation.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * The estimated cost savings, in dollars, for the recommendation.
     */
    public /*out*/ readonly estimatedCostSaving!: pulumi.Output<number>;
    /**
     * Additional metadata key/value pairs for the recommendation.
     */
    public /*out*/ readonly extendedMetadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * The level of importance assigned to the recommendation.
     */
    public /*out*/ readonly importance!: pulumi.Output<string>;
    /**
     * The name of the profile level.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The unique OCID associated with the recommendation.
     */
    public readonly recommendationId!: pulumi.Output<string>;
    /**
     * An array of `ResourceCount` objects grouped by the status of the resource actions.
     */
    public /*out*/ readonly resourceCounts!: pulumi.Output<outputs.Optimizer.RecommendationResourceCount[]>;
    /**
     * The recommendation's current state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * (Updatable) The status of the recommendation.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
     */
    public /*out*/ readonly supportedLevels!: pulumi.Output<outputs.Optimizer.RecommendationSupportedLevel[]>;
    /**
     * The date and time the recommendation details were created, in the format defined by RFC3339.
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The date and time that the recommendation entered its current status. The format is defined by RFC3339.
     */
    public /*out*/ readonly timeStatusBegin!: pulumi.Output<string>;
    /**
     * (Updatable) The date and time the current status will change. The format is defined by RFC3339.
     *
     * For example, "The current `postponed` status of the recommendation will end and change to `pending` on this date and time."
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly timeStatusEnd!: pulumi.Output<string>;
    /**
     * The date and time the recommendation details were last updated, in the format defined by RFC3339.
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;

    /**
     * Create a Recommendation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecommendationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecommendationArgs | RecommendationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecommendationState | undefined;
            resourceInputs["categoryId"] = state ? state.categoryId : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["estimatedCostSaving"] = state ? state.estimatedCostSaving : undefined;
            resourceInputs["extendedMetadata"] = state ? state.extendedMetadata : undefined;
            resourceInputs["importance"] = state ? state.importance : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recommendationId"] = state ? state.recommendationId : undefined;
            resourceInputs["resourceCounts"] = state ? state.resourceCounts : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["supportedLevels"] = state ? state.supportedLevels : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeStatusBegin"] = state ? state.timeStatusBegin : undefined;
            resourceInputs["timeStatusEnd"] = state ? state.timeStatusEnd : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
        } else {
            const args = argsOrState as RecommendationArgs | undefined;
            if ((!args || args.recommendationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recommendationId'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            resourceInputs["recommendationId"] = args ? args.recommendationId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeStatusEnd"] = args ? args.timeStatusEnd : undefined;
            resourceInputs["categoryId"] = undefined /*out*/;
            resourceInputs["compartmentId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["estimatedCostSaving"] = undefined /*out*/;
            resourceInputs["extendedMetadata"] = undefined /*out*/;
            resourceInputs["importance"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["resourceCounts"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["supportedLevels"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeStatusBegin"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Recommendation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Recommendation resources.
 */
export interface RecommendationState {
    /**
     * The unique OCID associated with the category.
     */
    categoryId?: pulumi.Input<string>;
    /**
     * The OCID of the tenancy. The tenancy is the root compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * Text describing the recommendation.
     */
    description?: pulumi.Input<string>;
    /**
     * The estimated cost savings, in dollars, for the recommendation.
     */
    estimatedCostSaving?: pulumi.Input<number>;
    /**
     * Additional metadata key/value pairs for the recommendation.
     */
    extendedMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The level of importance assigned to the recommendation.
     */
    importance?: pulumi.Input<string>;
    /**
     * The name of the profile level.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique OCID associated with the recommendation.
     */
    recommendationId?: pulumi.Input<string>;
    /**
     * An array of `ResourceCount` objects grouped by the status of the resource actions.
     */
    resourceCounts?: pulumi.Input<pulumi.Input<inputs.Optimizer.RecommendationResourceCount>[]>;
    /**
     * The recommendation's current state.
     */
    state?: pulumi.Input<string>;
    /**
     * (Updatable) The status of the recommendation.
     */
    status?: pulumi.Input<string>;
    /**
     * Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
     */
    supportedLevels?: pulumi.Input<pulumi.Input<inputs.Optimizer.RecommendationSupportedLevel>[]>;
    /**
     * The date and time the recommendation details were created, in the format defined by RFC3339.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The date and time that the recommendation entered its current status. The format is defined by RFC3339.
     */
    timeStatusBegin?: pulumi.Input<string>;
    /**
     * (Updatable) The date and time the current status will change. The format is defined by RFC3339.
     *
     * For example, "The current `postponed` status of the recommendation will end and change to `pending` on this date and time."
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    timeStatusEnd?: pulumi.Input<string>;
    /**
     * The date and time the recommendation details were last updated, in the format defined by RFC3339.
     */
    timeUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Recommendation resource.
 */
export interface RecommendationArgs {
    /**
     * The unique OCID associated with the recommendation.
     */
    recommendationId: pulumi.Input<string>;
    /**
     * (Updatable) The status of the recommendation.
     */
    status: pulumi.Input<string>;
    /**
     * (Updatable) The date and time the current status will change. The format is defined by RFC3339.
     *
     * For example, "The current `postponed` status of the recommendation will end and change to `pending` on this date and time."
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    timeStatusEnd?: pulumi.Input<string>;
}
