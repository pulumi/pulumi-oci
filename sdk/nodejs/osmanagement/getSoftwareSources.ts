// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Software Sources in Oracle Cloud Infrastructure OS Management service.
 *
 * Returns a list of all Software Sources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSoftwareSources = oci.OsManagement.getSoftwareSources({
 *     compartmentId: _var.compartment_id,
 *     displayName: _var.software_source_display_name,
 *     state: _var.software_source_state,
 * });
 * ```
 */
export function getSoftwareSources(args: GetSoftwareSourcesArgs, opts?: pulumi.InvokeOptions): Promise<GetSoftwareSourcesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("oci:OsManagement/getSoftwareSources:getSoftwareSources", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getSoftwareSources.
 */
export interface GetSoftwareSourcesArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: string;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
     */
    displayName?: string;
    filters?: inputs.OsManagement.GetSoftwareSourcesFilter[];
    /**
     * The current lifecycle state for the object.
     */
    state?: string;
}

/**
 * A collection of values returned by getSoftwareSources.
 */
export interface GetSoftwareSourcesResult {
    /**
     * OCID for the Compartment
     */
    readonly compartmentId: string;
    /**
     * User friendly name for the software source
     */
    readonly displayName?: string;
    readonly filters?: outputs.OsManagement.GetSoftwareSourcesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The list of software_sources.
     */
    readonly softwareSources: outputs.OsManagement.GetSoftwareSourcesSoftwareSource[];
    /**
     * The current state of the Software Source.
     */
    readonly state?: string;
}

export function getSoftwareSourcesOutput(args: GetSoftwareSourcesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSoftwareSourcesResult> {
    return pulumi.output(args).apply(a => getSoftwareSources(a, opts))
}

/**
 * A collection of arguments for invoking getSoftwareSources.
 */
export interface GetSoftwareSourcesOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.OsManagement.GetSoftwareSourcesFilterArgs>[]>;
    /**
     * The current lifecycle state for the object.
     */
    state?: pulumi.Input<string>;
}
