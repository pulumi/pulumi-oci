// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetManagedInstanceArgs, GetManagedInstanceResult, GetManagedInstanceOutputArgs } from "./getManagedInstance";
export const getManagedInstance: typeof import("./getManagedInstance").getManagedInstance = null as any;
export const getManagedInstanceOutput: typeof import("./getManagedInstance").getManagedInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstance","getManagedInstanceOutput"], () => require("./getManagedInstance"));

export { GetManagedInstanceEventReportArgs, GetManagedInstanceEventReportResult, GetManagedInstanceEventReportOutputArgs } from "./getManagedInstanceEventReport";
export const getManagedInstanceEventReport: typeof import("./getManagedInstanceEventReport").getManagedInstanceEventReport = null as any;
export const getManagedInstanceEventReportOutput: typeof import("./getManagedInstanceEventReport").getManagedInstanceEventReportOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceEventReport","getManagedInstanceEventReportOutput"], () => require("./getManagedInstanceEventReport"));

export { GetManagedInstanceGroupArgs, GetManagedInstanceGroupResult, GetManagedInstanceGroupOutputArgs } from "./getManagedInstanceGroup";
export const getManagedInstanceGroup: typeof import("./getManagedInstanceGroup").getManagedInstanceGroup = null as any;
export const getManagedInstanceGroupOutput: typeof import("./getManagedInstanceGroup").getManagedInstanceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceGroup","getManagedInstanceGroupOutput"], () => require("./getManagedInstanceGroup"));

export { GetManagedInstanceGroupsArgs, GetManagedInstanceGroupsResult, GetManagedInstanceGroupsOutputArgs } from "./getManagedInstanceGroups";
export const getManagedInstanceGroups: typeof import("./getManagedInstanceGroups").getManagedInstanceGroups = null as any;
export const getManagedInstanceGroupsOutput: typeof import("./getManagedInstanceGroups").getManagedInstanceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceGroups","getManagedInstanceGroupsOutput"], () => require("./getManagedInstanceGroups"));

export { GetManagedInstanceModuleStreamsArgs, GetManagedInstanceModuleStreamsResult, GetManagedInstanceModuleStreamsOutputArgs } from "./getManagedInstanceModuleStreams";
export const getManagedInstanceModuleStreams: typeof import("./getManagedInstanceModuleStreams").getManagedInstanceModuleStreams = null as any;
export const getManagedInstanceModuleStreamsOutput: typeof import("./getManagedInstanceModuleStreams").getManagedInstanceModuleStreamsOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceModuleStreams","getManagedInstanceModuleStreamsOutput"], () => require("./getManagedInstanceModuleStreams"));

export { GetManagedInstanceStreamProfileArgs, GetManagedInstanceStreamProfileResult, GetManagedInstanceStreamProfileOutputArgs } from "./getManagedInstanceStreamProfile";
export const getManagedInstanceStreamProfile: typeof import("./getManagedInstanceStreamProfile").getManagedInstanceStreamProfile = null as any;
export const getManagedInstanceStreamProfileOutput: typeof import("./getManagedInstanceStreamProfile").getManagedInstanceStreamProfileOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceStreamProfile","getManagedInstanceStreamProfileOutput"], () => require("./getManagedInstanceStreamProfile"));

export { GetManagedInstancesArgs, GetManagedInstancesResult, GetManagedInstancesOutputArgs } from "./getManagedInstances";
export const getManagedInstances: typeof import("./getManagedInstances").getManagedInstances = null as any;
export const getManagedInstancesOutput: typeof import("./getManagedInstances").getManagedInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstances","getManagedInstancesOutput"], () => require("./getManagedInstances"));

export { GetSoftwareSourceArgs, GetSoftwareSourceResult, GetSoftwareSourceOutputArgs } from "./getSoftwareSource";
export const getSoftwareSource: typeof import("./getSoftwareSource").getSoftwareSource = null as any;
export const getSoftwareSourceOutput: typeof import("./getSoftwareSource").getSoftwareSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSource","getSoftwareSourceOutput"], () => require("./getSoftwareSource"));

export { GetSoftwareSourceModuleStreamArgs, GetSoftwareSourceModuleStreamResult, GetSoftwareSourceModuleStreamOutputArgs } from "./getSoftwareSourceModuleStream";
export const getSoftwareSourceModuleStream: typeof import("./getSoftwareSourceModuleStream").getSoftwareSourceModuleStream = null as any;
export const getSoftwareSourceModuleStreamOutput: typeof import("./getSoftwareSourceModuleStream").getSoftwareSourceModuleStreamOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceModuleStream","getSoftwareSourceModuleStreamOutput"], () => require("./getSoftwareSourceModuleStream"));

export { GetSoftwareSourceModuleStreamProfileArgs, GetSoftwareSourceModuleStreamProfileResult, GetSoftwareSourceModuleStreamProfileOutputArgs } from "./getSoftwareSourceModuleStreamProfile";
export const getSoftwareSourceModuleStreamProfile: typeof import("./getSoftwareSourceModuleStreamProfile").getSoftwareSourceModuleStreamProfile = null as any;
export const getSoftwareSourceModuleStreamProfileOutput: typeof import("./getSoftwareSourceModuleStreamProfile").getSoftwareSourceModuleStreamProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceModuleStreamProfile","getSoftwareSourceModuleStreamProfileOutput"], () => require("./getSoftwareSourceModuleStreamProfile"));

export { GetSoftwareSourceStreamProfileArgs, GetSoftwareSourceStreamProfileResult, GetSoftwareSourceStreamProfileOutputArgs } from "./getSoftwareSourceStreamProfile";
export const getSoftwareSourceStreamProfile: typeof import("./getSoftwareSourceStreamProfile").getSoftwareSourceStreamProfile = null as any;
export const getSoftwareSourceStreamProfileOutput: typeof import("./getSoftwareSourceStreamProfile").getSoftwareSourceStreamProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceStreamProfile","getSoftwareSourceStreamProfileOutput"], () => require("./getSoftwareSourceStreamProfile"));

export { GetSoftwareSourcesArgs, GetSoftwareSourcesResult, GetSoftwareSourcesOutputArgs } from "./getSoftwareSources";
export const getSoftwareSources: typeof import("./getSoftwareSources").getSoftwareSources = null as any;
export const getSoftwareSourcesOutput: typeof import("./getSoftwareSources").getSoftwareSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSources","getSoftwareSourcesOutput"], () => require("./getSoftwareSources"));

export { ManagedInstanceArgs, ManagedInstanceState } from "./managedInstance";
export type ManagedInstance = import("./managedInstance").ManagedInstance;
export const ManagedInstance: typeof import("./managedInstance").ManagedInstance = null as any;
utilities.lazyLoad(exports, ["ManagedInstance"], () => require("./managedInstance"));

export { ManagedInstanceGroupArgs, ManagedInstanceGroupState } from "./managedInstanceGroup";
export type ManagedInstanceGroup = import("./managedInstanceGroup").ManagedInstanceGroup;
export const ManagedInstanceGroup: typeof import("./managedInstanceGroup").ManagedInstanceGroup = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceGroup"], () => require("./managedInstanceGroup"));

export { ManagedInstanceManagementArgs, ManagedInstanceManagementState } from "./managedInstanceManagement";
export type ManagedInstanceManagement = import("./managedInstanceManagement").ManagedInstanceManagement;
export const ManagedInstanceManagement: typeof import("./managedInstanceManagement").ManagedInstanceManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceManagement"], () => require("./managedInstanceManagement"));

export { SoftwareSourceArgs, SoftwareSourceState } from "./softwareSource";
export type SoftwareSource = import("./softwareSource").SoftwareSource;
export const SoftwareSource: typeof import("./softwareSource").SoftwareSource = null as any;
utilities.lazyLoad(exports, ["SoftwareSource"], () => require("./softwareSource"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:OsManagement/managedInstance:ManagedInstance":
                return new ManagedInstance(name, <any>undefined, { urn })
            case "oci:OsManagement/managedInstanceGroup:ManagedInstanceGroup":
                return new ManagedInstanceGroup(name, <any>undefined, { urn })
            case "oci:OsManagement/managedInstanceManagement:ManagedInstanceManagement":
                return new ManagedInstanceManagement(name, <any>undefined, { urn })
            case "oci:OsManagement/softwareSource:SoftwareSource":
                return new SoftwareSource(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "OsManagement/managedInstance", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagement/managedInstanceGroup", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagement/managedInstanceManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagement/softwareSource", _module)
