// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Errata in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists all of the currently available errata. Filter the list against a variety of criteria including but not
 * limited to its name, classification type, advisory severity, and OS family.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testErrata = oci.OsManagementHub.getErrata({
 *     compartmentId: compartmentId,
 *     advisorySeverities: erratumAdvisorySeverity,
 *     advisoryTypes: erratumAdvisoryType,
 *     classificationTypes: erratumClassificationType,
 *     names: erratumName,
 *     nameContains: erratumNameContains,
 *     osFamily: erratumOsFamily,
 *     timeIssueDateEnd: erratumTimeIssueDateEnd,
 *     timeIssueDateStart: erratumTimeIssueDateStart,
 * });
 * ```
 */
export function getErrata(args: GetErrataArgs, opts?: pulumi.InvokeOptions): Promise<GetErrataResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:OsManagementHub/getErrata:getErrata", {
        "advisorySeverities": args.advisorySeverities,
        "advisoryTypes": args.advisoryTypes,
        "classificationTypes": args.classificationTypes,
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "nameContains": args.nameContains,
        "names": args.names,
        "osFamily": args.osFamily,
        "timeIssueDateEnd": args.timeIssueDateEnd,
        "timeIssueDateStart": args.timeIssueDateStart,
    }, opts);
}

/**
 * A collection of arguments for invoking getErrata.
 */
export interface GetErrataArgs {
    /**
     * The advisory severity.
     */
    advisorySeverities?: string[];
    /**
     * A filter to return only errata that match the given advisory types.
     */
    advisoryTypes?: string[];
    /**
     * A filter to return only packages that match the given update classification type.
     */
    classificationTypes?: string[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
     */
    compartmentId: string;
    filters?: inputs.OsManagementHub.GetErrataFilter[];
    /**
     * A filter to return resources that may partially match the erratum name given.
     */
    nameContains?: string;
    /**
     * The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
     */
    names?: string[];
    /**
     * A filter to return only resources that match the given operating system family.
     */
    osFamily?: string;
    /**
     * The issue date before which to list all errata, in ISO 8601 format  Example: 2017-07-14T02:40:00.000Z
     */
    timeIssueDateEnd?: string;
    /**
     * The issue date after which to list all errata, in ISO 8601 format  Example: 2017-07-14T02:40:00.000Z
     */
    timeIssueDateStart?: string;
}

/**
 * A collection of values returned by getErrata.
 */
export interface GetErrataResult {
    /**
     * The severity for a security advisory, otherwise, null.
     */
    readonly advisorySeverities?: string[];
    /**
     * The advisory type of the erratum.
     */
    readonly advisoryTypes?: string[];
    /**
     * Type of the erratum. This property is deprecated and it will be removed in a future API release. Please refer to the advisoryType property instead.
     */
    readonly classificationTypes?: string[];
    readonly compartmentId: string;
    /**
     * The list of erratum_collection.
     */
    readonly erratumCollections: outputs.OsManagementHub.GetErrataErratumCollection[];
    readonly filters?: outputs.OsManagementHub.GetErrataFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly nameContains?: string;
    /**
     * Unique identifier for the package. Note that this is not an OCID.
     */
    readonly names?: string[];
    readonly osFamily?: string;
    readonly timeIssueDateEnd?: string;
    readonly timeIssueDateStart?: string;
}
/**
 * This data source provides the list of Errata in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists all of the currently available errata. Filter the list against a variety of criteria including but not
 * limited to its name, classification type, advisory severity, and OS family.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testErrata = oci.OsManagementHub.getErrata({
 *     compartmentId: compartmentId,
 *     advisorySeverities: erratumAdvisorySeverity,
 *     advisoryTypes: erratumAdvisoryType,
 *     classificationTypes: erratumClassificationType,
 *     names: erratumName,
 *     nameContains: erratumNameContains,
 *     osFamily: erratumOsFamily,
 *     timeIssueDateEnd: erratumTimeIssueDateEnd,
 *     timeIssueDateStart: erratumTimeIssueDateStart,
 * });
 * ```
 */
export function getErrataOutput(args: GetErrataOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetErrataResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:OsManagementHub/getErrata:getErrata", {
        "advisorySeverities": args.advisorySeverities,
        "advisoryTypes": args.advisoryTypes,
        "classificationTypes": args.classificationTypes,
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "nameContains": args.nameContains,
        "names": args.names,
        "osFamily": args.osFamily,
        "timeIssueDateEnd": args.timeIssueDateEnd,
        "timeIssueDateStart": args.timeIssueDateStart,
    }, opts);
}

/**
 * A collection of arguments for invoking getErrata.
 */
export interface GetErrataOutputArgs {
    /**
     * The advisory severity.
     */
    advisorySeverities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to return only errata that match the given advisory types.
     */
    advisoryTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to return only packages that match the given update classification type.
     */
    classificationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
     */
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.OsManagementHub.GetErrataFilterArgs>[]>;
    /**
     * A filter to return resources that may partially match the erratum name given.
     */
    nameContains?: pulumi.Input<string>;
    /**
     * The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to return only resources that match the given operating system family.
     */
    osFamily?: pulumi.Input<string>;
    /**
     * The issue date before which to list all errata, in ISO 8601 format  Example: 2017-07-14T02:40:00.000Z
     */
    timeIssueDateEnd?: pulumi.Input<string>;
    /**
     * The issue date after which to list all errata, in ISO 8601 format  Example: 2017-07-14T02:40:00.000Z
     */
    timeIssueDateStart?: pulumi.Input<string>;
}
