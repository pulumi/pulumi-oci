// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Lifecycle Environments in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists lifecycle environments that match the specified compartment or lifecycle environment OCID. Filter the list
 * against a variety of criteria including but not limited to its name, status, architecture, and OS family.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testLifecycleEnvironments = oci.OsManagementHub.getLifecycleEnvironments({
 *     archType: lifecycleEnvironmentArchType,
 *     compartmentId: compartmentId,
 *     displayNames: lifecycleEnvironmentDisplayName,
 *     displayNameContains: lifecycleEnvironmentDisplayNameContains,
 *     lifecycleEnvironmentId: testLifecycleEnvironment.id,
 *     locations: lifecycleEnvironmentLocation,
 *     locationNotEqualTos: lifecycleEnvironmentLocationNotEqualTo,
 *     osFamily: lifecycleEnvironmentOsFamily,
 *     state: lifecycleEnvironmentState,
 * });
 * ```
 */
export function getLifecycleEnvironments(args?: GetLifecycleEnvironmentsArgs, opts?: pulumi.InvokeOptions): Promise<GetLifecycleEnvironmentsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:OsManagementHub/getLifecycleEnvironments:getLifecycleEnvironments", {
        "archType": args.archType,
        "compartmentId": args.compartmentId,
        "displayNameContains": args.displayNameContains,
        "displayNames": args.displayNames,
        "filters": args.filters,
        "lifecycleEnvironmentId": args.lifecycleEnvironmentId,
        "locationNotEqualTos": args.locationNotEqualTos,
        "locations": args.locations,
        "osFamily": args.osFamily,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getLifecycleEnvironments.
 */
export interface GetLifecycleEnvironmentsArgs {
    /**
     * A filter to return only profiles that match the given archType.
     */
    archType?: string;
    /**
     * (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
     */
    compartmentId?: string;
    /**
     * A filter to return resources that may partially match the given display name.
     */
    displayNameContains?: string;
    /**
     * A filter to return resources that match the given display names.
     */
    displayNames?: string[];
    filters?: inputs.OsManagementHub.GetLifecycleEnvironmentsFilter[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the lifecycle environment.
     */
    lifecycleEnvironmentId?: string;
    /**
     * A filter to return only resources whose location does not match the given value.
     */
    locationNotEqualTos?: string[];
    /**
     * A filter to return only resources whose location matches the given value.
     */
    locations?: string[];
    /**
     * A filter to return only resources that match the given operating system family.
     */
    osFamily?: string;
    /**
     * A filter to return only the lifecycle environments that match the display name given.
     */
    state?: string;
}

/**
 * A collection of values returned by getLifecycleEnvironments.
 */
export interface GetLifecycleEnvironmentsResult {
    /**
     * The CPU architecture of the managed instances in the lifecycle stage.
     */
    readonly archType?: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the lifecycle stage.
     */
    readonly compartmentId?: string;
    readonly displayNameContains?: string;
    /**
     * Software source name.
     */
    readonly displayNames?: string[];
    readonly filters?: outputs.OsManagementHub.GetLifecycleEnvironmentsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The list of lifecycle_environment_collection.
     */
    readonly lifecycleEnvironmentCollections: outputs.OsManagementHub.GetLifecycleEnvironmentsLifecycleEnvironmentCollection[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the lifecycle environment that contains the lifecycle stage.
     */
    readonly lifecycleEnvironmentId?: string;
    readonly locationNotEqualTos?: string[];
    /**
     * The location of managed instances associated with the lifecycle stage.
     */
    readonly locations?: string[];
    /**
     * The operating system of the managed instances in the lifecycle stage.
     */
    readonly osFamily?: string;
    /**
     * The current state of the lifecycle environment.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Lifecycle Environments in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists lifecycle environments that match the specified compartment or lifecycle environment OCID. Filter the list
 * against a variety of criteria including but not limited to its name, status, architecture, and OS family.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testLifecycleEnvironments = oci.OsManagementHub.getLifecycleEnvironments({
 *     archType: lifecycleEnvironmentArchType,
 *     compartmentId: compartmentId,
 *     displayNames: lifecycleEnvironmentDisplayName,
 *     displayNameContains: lifecycleEnvironmentDisplayNameContains,
 *     lifecycleEnvironmentId: testLifecycleEnvironment.id,
 *     locations: lifecycleEnvironmentLocation,
 *     locationNotEqualTos: lifecycleEnvironmentLocationNotEqualTo,
 *     osFamily: lifecycleEnvironmentOsFamily,
 *     state: lifecycleEnvironmentState,
 * });
 * ```
 */
export function getLifecycleEnvironmentsOutput(args?: GetLifecycleEnvironmentsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLifecycleEnvironmentsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:OsManagementHub/getLifecycleEnvironments:getLifecycleEnvironments", {
        "archType": args.archType,
        "compartmentId": args.compartmentId,
        "displayNameContains": args.displayNameContains,
        "displayNames": args.displayNames,
        "filters": args.filters,
        "lifecycleEnvironmentId": args.lifecycleEnvironmentId,
        "locationNotEqualTos": args.locationNotEqualTos,
        "locations": args.locations,
        "osFamily": args.osFamily,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getLifecycleEnvironments.
 */
export interface GetLifecycleEnvironmentsOutputArgs {
    /**
     * A filter to return only profiles that match the given archType.
     */
    archType?: pulumi.Input<string>;
    /**
     * (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A filter to return resources that may partially match the given display name.
     */
    displayNameContains?: pulumi.Input<string>;
    /**
     * A filter to return resources that match the given display names.
     */
    displayNames?: pulumi.Input<pulumi.Input<string>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.OsManagementHub.GetLifecycleEnvironmentsFilterArgs>[]>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the lifecycle environment.
     */
    lifecycleEnvironmentId?: pulumi.Input<string>;
    /**
     * A filter to return only resources whose location does not match the given value.
     */
    locationNotEqualTos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to return only resources whose location matches the given value.
     */
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to return only resources that match the given operating system family.
     */
    osFamily?: pulumi.Input<string>;
    /**
     * A filter to return only the lifecycle environments that match the display name given.
     */
    state?: pulumi.Input<string>;
}
