// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Profiles in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists registration profiles that match the specified compartment or profile OCID. Filter the list against a
 * variety of criteria including but not limited to its name, status, vendor name, and architecture type.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testProfiles = oci.OsManagementHub.getProfiles({
 *     archType: profileArchType,
 *     compartmentId: compartmentId,
 *     displayNames: profileDisplayName,
 *     displayNameContains: profileDisplayNameContains,
 *     osFamily: profileOsFamily,
 *     profileId: testProfile.id,
 *     profileTypes: profileProfileType,
 *     state: profileState,
 *     vendorName: profileVendorName,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getProfiles(args?: GetProfilesArgs, opts?: pulumi.InvokeOptions): Promise<GetProfilesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:OsManagementHub/getProfiles:getProfiles", {
        "archType": args.archType,
        "compartmentId": args.compartmentId,
        "displayNameContains": args.displayNameContains,
        "displayNames": args.displayNames,
        "filters": args.filters,
        "osFamily": args.osFamily,
        "profileId": args.profileId,
        "profileTypes": args.profileTypes,
        "state": args.state,
        "vendorName": args.vendorName,
    }, opts);
}

/**
 * A collection of arguments for invoking getProfiles.
 */
export interface GetProfilesArgs {
    /**
     * A filter to return only profiles that match the given archType.
     */
    archType?: string;
    /**
     * The OCID of the compartment that contains the resources to list.
     */
    compartmentId?: string;
    /**
     * A filter to return resources that may partially match the given display name.
     */
    displayNameContains?: string;
    /**
     * A filter to return resources that match the given display names.
     */
    displayNames?: string[];
    filters?: inputs.OsManagementHub.GetProfilesFilter[];
    /**
     * A filter to return only profiles that match the given osFamily.
     */
    osFamily?: string;
    /**
     * The OCID of the registration profile.
     */
    profileId?: string;
    /**
     * A filter to return registration profiles that match the given profileType.
     */
    profileTypes?: string[];
    /**
     * A filter to return only registration profile whose lifecycleState matches the given lifecycleState.
     */
    state?: string;
    /**
     * A filter to return only profiles that match the given vendorName.
     */
    vendorName?: string;
}

/**
 * A collection of values returned by getProfiles.
 */
export interface GetProfilesResult {
    /**
     * The architecture type.
     */
    readonly archType?: string;
    /**
     * The OCID of the tenancy containing the registration profile.
     */
    readonly compartmentId?: string;
    readonly displayNameContains?: string;
    /**
     * Software source name.
     */
    readonly displayNames?: string[];
    readonly filters?: outputs.OsManagementHub.GetProfilesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The operating system family.
     */
    readonly osFamily?: string;
    /**
     * The list of profile_collection.
     */
    readonly profileCollections: outputs.OsManagementHub.GetProfilesProfileCollection[];
    readonly profileId?: string;
    /**
     * The type of Profile. One of SOFTWARESOURCE, GROUP or LIFECYCLE.
     */
    readonly profileTypes?: string[];
    /**
     * The current state of the registration profile.
     */
    readonly state?: string;
    /**
     * The software source vendor name.
     */
    readonly vendorName?: string;
}
/**
 * This data source provides the list of Profiles in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists registration profiles that match the specified compartment or profile OCID. Filter the list against a
 * variety of criteria including but not limited to its name, status, vendor name, and architecture type.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testProfiles = oci.OsManagementHub.getProfiles({
 *     archType: profileArchType,
 *     compartmentId: compartmentId,
 *     displayNames: profileDisplayName,
 *     displayNameContains: profileDisplayNameContains,
 *     osFamily: profileOsFamily,
 *     profileId: testProfile.id,
 *     profileTypes: profileProfileType,
 *     state: profileState,
 *     vendorName: profileVendorName,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getProfilesOutput(args?: GetProfilesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProfilesResult> {
    return pulumi.output(args).apply((a: any) => getProfiles(a, opts))
}

/**
 * A collection of arguments for invoking getProfiles.
 */
export interface GetProfilesOutputArgs {
    /**
     * A filter to return only profiles that match the given archType.
     */
    archType?: pulumi.Input<string>;
    /**
     * The OCID of the compartment that contains the resources to list.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A filter to return resources that may partially match the given display name.
     */
    displayNameContains?: pulumi.Input<string>;
    /**
     * A filter to return resources that match the given display names.
     */
    displayNames?: pulumi.Input<pulumi.Input<string>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.OsManagementHub.GetProfilesFilterArgs>[]>;
    /**
     * A filter to return only profiles that match the given osFamily.
     */
    osFamily?: pulumi.Input<string>;
    /**
     * The OCID of the registration profile.
     */
    profileId?: pulumi.Input<string>;
    /**
     * A filter to return registration profiles that match the given profileType.
     */
    profileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to return only registration profile whose lifecycleState matches the given lifecycleState.
     */
    state?: pulumi.Input<string>;
    /**
     * A filter to return only profiles that match the given vendorName.
     */
    vendorName?: pulumi.Input<string>;
}
