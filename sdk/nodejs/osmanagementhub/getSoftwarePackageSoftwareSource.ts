// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Software Package Software Source in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists the software sources in the tenancy that contain the software package. Filter the list against a
 * variety of criteria including but not limited to its name, type, architecture, and OS family.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSoftwarePackageSoftwareSource = oci.OsManagementHub.getSoftwarePackageSoftwareSource({
 *     compartmentId: compartmentId,
 *     softwarePackageName: testSoftwarePackage.name,
 *     archTypes: softwarePackageSoftwareSourceArchType,
 *     availabilities: softwarePackageSoftwareSourceAvailability,
 *     availabilityAnywheres: softwarePackageSoftwareSourceAvailabilityAnywhere,
 *     availabilityAtOcis: softwarePackageSoftwareSourceAvailabilityAtOci,
 *     displayName: softwarePackageSoftwareSourceDisplayName,
 *     displayNameContains: softwarePackageSoftwareSourceDisplayNameContains,
 *     osFamilies: softwarePackageSoftwareSourceOsFamily,
 *     softwareSourceTypes: softwarePackageSoftwareSourceSoftwareSourceType,
 *     states: softwarePackageSoftwareSourceState,
 * });
 * ```
 */
export function getSoftwarePackageSoftwareSource(args: GetSoftwarePackageSoftwareSourceArgs, opts?: pulumi.InvokeOptions): Promise<GetSoftwarePackageSoftwareSourceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:OsManagementHub/getSoftwarePackageSoftwareSource:getSoftwarePackageSoftwareSource", {
        "archTypes": args.archTypes,
        "availabilities": args.availabilities,
        "availabilityAnywheres": args.availabilityAnywheres,
        "availabilityAtOcis": args.availabilityAtOcis,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "displayNameContains": args.displayNameContains,
        "filters": args.filters,
        "osFamilies": args.osFamilies,
        "softwarePackageName": args.softwarePackageName,
        "softwareSourceTypes": args.softwareSourceTypes,
        "states": args.states,
    }, opts);
}

/**
 * A collection of arguments for invoking getSoftwarePackageSoftwareSource.
 */
export interface GetSoftwarePackageSoftwareSourceArgs {
    /**
     * A filter to return only instances whose architecture type matches the given architecture.
     */
    archTypes?: string[];
    /**
     * The availabilities of the software source in a non-OCI environment for a tenancy.
     */
    availabilities?: string[];
    /**
     * The availabilities of the software source. Use this query parameter to filter across availabilities in different environments.
     */
    availabilityAnywheres?: string[];
    /**
     * The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
     */
    availabilityAtOcis?: string[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
     */
    compartmentId: string;
    /**
     * A filter to return resources that match the given user-friendly name.
     */
    displayName?: string;
    /**
     * A filter to return resources that may partially match the given display name.
     */
    displayNameContains?: string;
    filters?: inputs.OsManagementHub.GetSoftwarePackageSoftwareSourceFilter[];
    /**
     * A filter to return only resources that match the given operating system family.
     */
    osFamilies?: string[];
    /**
     * The name of the software package.
     */
    softwarePackageName: string;
    /**
     * The type of the software source.
     */
    softwareSourceTypes?: string[];
    /**
     * A filter to return only software sources whose state matches the given state.
     */
    states?: string[];
}

/**
 * A collection of values returned by getSoftwarePackageSoftwareSource.
 */
export interface GetSoftwarePackageSoftwareSourceResult {
    /**
     * The architecture type supported by the software source.
     */
    readonly archTypes?: string[];
    /**
     * Availability of the software source (for non-OCI environments).
     */
    readonly availabilities?: string[];
    readonly availabilityAnywheres?: string[];
    /**
     * Availability of the software source (for Oracle Cloud Infrastructure environments).
     */
    readonly availabilityAtOcis?: string[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
     */
    readonly compartmentId: string;
    /**
     * User-friendly name.
     */
    readonly displayName?: string;
    readonly displayNameContains?: string;
    readonly filters?: outputs.OsManagementHub.GetSoftwarePackageSoftwareSourceFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The OS family the software source belongs to.
     */
    readonly osFamilies?: string[];
    readonly softwarePackageName: string;
    /**
     * The list of software_source_collection.
     */
    readonly softwareSourceCollections: outputs.OsManagementHub.GetSoftwarePackageSoftwareSourceSoftwareSourceCollection[];
    /**
     * Type of software source.
     */
    readonly softwareSourceTypes?: string[];
    /**
     * The current state of the software source.
     */
    readonly states?: string[];
}
/**
 * This data source provides the list of Software Package Software Source in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists the software sources in the tenancy that contain the software package. Filter the list against a
 * variety of criteria including but not limited to its name, type, architecture, and OS family.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSoftwarePackageSoftwareSource = oci.OsManagementHub.getSoftwarePackageSoftwareSource({
 *     compartmentId: compartmentId,
 *     softwarePackageName: testSoftwarePackage.name,
 *     archTypes: softwarePackageSoftwareSourceArchType,
 *     availabilities: softwarePackageSoftwareSourceAvailability,
 *     availabilityAnywheres: softwarePackageSoftwareSourceAvailabilityAnywhere,
 *     availabilityAtOcis: softwarePackageSoftwareSourceAvailabilityAtOci,
 *     displayName: softwarePackageSoftwareSourceDisplayName,
 *     displayNameContains: softwarePackageSoftwareSourceDisplayNameContains,
 *     osFamilies: softwarePackageSoftwareSourceOsFamily,
 *     softwareSourceTypes: softwarePackageSoftwareSourceSoftwareSourceType,
 *     states: softwarePackageSoftwareSourceState,
 * });
 * ```
 */
export function getSoftwarePackageSoftwareSourceOutput(args: GetSoftwarePackageSoftwareSourceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSoftwarePackageSoftwareSourceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:OsManagementHub/getSoftwarePackageSoftwareSource:getSoftwarePackageSoftwareSource", {
        "archTypes": args.archTypes,
        "availabilities": args.availabilities,
        "availabilityAnywheres": args.availabilityAnywheres,
        "availabilityAtOcis": args.availabilityAtOcis,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "displayNameContains": args.displayNameContains,
        "filters": args.filters,
        "osFamilies": args.osFamilies,
        "softwarePackageName": args.softwarePackageName,
        "softwareSourceTypes": args.softwareSourceTypes,
        "states": args.states,
    }, opts);
}

/**
 * A collection of arguments for invoking getSoftwarePackageSoftwareSource.
 */
export interface GetSoftwarePackageSoftwareSourceOutputArgs {
    /**
     * A filter to return only instances whose architecture type matches the given architecture.
     */
    archTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The availabilities of the software source in a non-OCI environment for a tenancy.
     */
    availabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The availabilities of the software source. Use this query parameter to filter across availabilities in different environments.
     */
    availabilityAnywheres?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
     */
    availabilityAtOcis?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * A filter to return resources that match the given user-friendly name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * A filter to return resources that may partially match the given display name.
     */
    displayNameContains?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.OsManagementHub.GetSoftwarePackageSoftwareSourceFilterArgs>[]>;
    /**
     * A filter to return only resources that match the given operating system family.
     */
    osFamilies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the software package.
     */
    softwarePackageName: pulumi.Input<string>;
    /**
     * The type of the software source.
     */
    softwareSourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to return only software sources whose state matches the given state.
     */
    states?: pulumi.Input<pulumi.Input<string>[]>;
}
