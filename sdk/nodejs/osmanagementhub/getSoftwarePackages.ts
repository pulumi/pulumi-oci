// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Software Packages in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists software packages available through the OS Management Hub service.  Filter the list against a variety of criteria
 * including but not limited to its name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSoftwarePackages = oci.OsManagementHub.getSoftwarePackages({
 *     architecture: softwarePackageArchitecture,
 *     displayName: softwarePackageDisplayName,
 *     displayNameContains: softwarePackageDisplayNameContains,
 *     isLatest: softwarePackageIsLatest,
 *     osFamily: softwarePackageOsFamily,
 *     version: softwarePackageVersion,
 * });
 * ```
 */
export function getSoftwarePackages(args?: GetSoftwarePackagesArgs, opts?: pulumi.InvokeOptions): Promise<GetSoftwarePackagesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:OsManagementHub/getSoftwarePackages:getSoftwarePackages", {
        "architecture": args.architecture,
        "displayName": args.displayName,
        "displayNameContains": args.displayNameContains,
        "filters": args.filters,
        "isLatest": args.isLatest,
        "osFamily": args.osFamily,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getSoftwarePackages.
 */
export interface GetSoftwarePackagesArgs {
    /**
     * A filter to return software packages that match the given architecture.
     */
    architecture?: string;
    /**
     * A filter to return resources that match the given user-friendly name.
     */
    displayName?: string;
    /**
     * A filter to return resources that may partially match the given display name.
     */
    displayNameContains?: string;
    filters?: inputs.OsManagementHub.GetSoftwarePackagesFilter[];
    /**
     * Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
     */
    isLatest?: boolean;
    /**
     * A filter to return only resources that match the given operating system family.
     */
    osFamily?: string;
    /**
     * A filter to return software packages that match the given version.
     */
    version?: string;
}

/**
 * A collection of values returned by getSoftwarePackages.
 */
export interface GetSoftwarePackagesResult {
    /**
     * The architecture for which this software was built
     */
    readonly architecture?: string;
    /**
     * Software source name.
     */
    readonly displayName?: string;
    readonly displayNameContains?: string;
    readonly filters?: outputs.OsManagementHub.GetSoftwarePackagesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Indicates whether this package is the latest version.
     */
    readonly isLatest?: boolean;
    readonly osFamily?: string;
    /**
     * The list of software_package_collection.
     */
    readonly softwarePackageCollections: outputs.OsManagementHub.GetSoftwarePackagesSoftwarePackageCollection[];
    /**
     * Version of the package.
     */
    readonly version?: string;
}
/**
 * This data source provides the list of Software Packages in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists software packages available through the OS Management Hub service.  Filter the list against a variety of criteria
 * including but not limited to its name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSoftwarePackages = oci.OsManagementHub.getSoftwarePackages({
 *     architecture: softwarePackageArchitecture,
 *     displayName: softwarePackageDisplayName,
 *     displayNameContains: softwarePackageDisplayNameContains,
 *     isLatest: softwarePackageIsLatest,
 *     osFamily: softwarePackageOsFamily,
 *     version: softwarePackageVersion,
 * });
 * ```
 */
export function getSoftwarePackagesOutput(args?: GetSoftwarePackagesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSoftwarePackagesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:OsManagementHub/getSoftwarePackages:getSoftwarePackages", {
        "architecture": args.architecture,
        "displayName": args.displayName,
        "displayNameContains": args.displayNameContains,
        "filters": args.filters,
        "isLatest": args.isLatest,
        "osFamily": args.osFamily,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getSoftwarePackages.
 */
export interface GetSoftwarePackagesOutputArgs {
    /**
     * A filter to return software packages that match the given architecture.
     */
    architecture?: pulumi.Input<string>;
    /**
     * A filter to return resources that match the given user-friendly name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * A filter to return resources that may partially match the given display name.
     */
    displayNameContains?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.OsManagementHub.GetSoftwarePackagesFilterArgs>[]>;
    /**
     * Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
     */
    isLatest?: pulumi.Input<boolean>;
    /**
     * A filter to return only resources that match the given operating system family.
     */
    osFamily?: pulumi.Input<string>;
    /**
     * A filter to return software packages that match the given version.
     */
    version?: pulumi.Input<string>;
}
