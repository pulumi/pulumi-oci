// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Software Source resource in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Returns information about the specified software source.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSoftwareSource = oci.OsManagementHub.getSoftwareSource({
 *     softwareSourceId: testSoftwareSourceOciOsManagementHubSoftwareSource.id,
 * });
 * ```
 */
export function getSoftwareSource(args: GetSoftwareSourceArgs, opts?: pulumi.InvokeOptions): Promise<GetSoftwareSourceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:OsManagementHub/getSoftwareSource:getSoftwareSource", {
        "softwareSourceId": args.softwareSourceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSoftwareSource.
 */
export interface GetSoftwareSourceArgs {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
     */
    softwareSourceId: string;
}

/**
 * A collection of values returned by getSoftwareSource.
 */
export interface GetSoftwareSourceResult {
    /**
     * Advanced repository options for the software source
     */
    readonly advancedRepoOptions: string;
    /**
     * The architecture type supported by the software source.
     */
    readonly archType: string;
    /**
     * Availability of the software source (for non-OCI environments).
     */
    readonly availability: string;
    /**
     * Availability of the software source (for Oracle Cloud Infrastructure environments).
     */
    readonly availabilityAtOci: string;
    /**
     * The yum repository checksum type used by this software source.
     */
    readonly checksumType: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
     */
    readonly compartmentId: string;
    /**
     * Provides the information used to apply filters to a vendor software source to create or update a custom software source.
     */
    readonly customSoftwareSourceFilters: outputs.OsManagementHub.GetSoftwareSourceCustomSoftwareSourceFilter[];
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
     */
    readonly definedTags: {[key: string]: string};
    /**
     * User-specified description for the software source.
     */
    readonly description: string;
    /**
     * User-friendly name.
     */
    readonly displayName: string;
    /**
     * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
     */
    readonly freeformTags: {[key: string]: string};
    /**
     * Fingerprint of the GPG key for this software source.
     */
    readonly gpgKeyFingerprint: string;
    /**
     * ID of the GPG key for this software source.
     */
    readonly gpgKeyId: string;
    /**
     * URI of the GPG key for this software source.
     */
    readonly gpgKeyUrl: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.
     */
    readonly id: string;
    /**
     * Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
     */
    readonly isAutoResolveDependencies: boolean;
    /**
     * Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
     */
    readonly isAutomaticallyUpdated: boolean;
    /**
     * Indicates whether the service should create the software source from a list of packages provided by the user.
     */
    readonly isCreatedFromPackageList: boolean;
    /**
     * Whether signature verification should be done for the software source
     */
    readonly isGpgCheckEnabled: boolean;
    /**
     * Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
     * * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
     * * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
     * * For a package filter that does not specify a version, this will include only the latest available version of the package.
     * * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
     * * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
     */
    readonly isLatestContentOnly: boolean;
    /**
     * Indicates whether the software source is required for the Autonomous Linux service.
     */
    readonly isMandatoryForAutonomousLinux: boolean;
    /**
     * Indicates if this software source can be mirrored to a management station.
     */
    readonly isMirrorSyncAllowed: boolean;
    /**
     * Indicates if SSL validation is enabled for the software source.
     */
    readonly isSslVerifyEnabled: boolean;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment. This property applies only to replicated vendor software sources.
     */
    readonly originSoftwareSourceId: string;
    /**
     * The OS family of the software source.
     */
    readonly osFamily: string;
    /**
     * Number of packages the software source contains.
     */
    readonly packageCount: string;
    /**
     * The packages in the software source.
     */
    readonly packages: string[];
    /**
     * The repository ID for the software source.
     */
    readonly repoId: string;
    /**
     * The size of the software source in bytes (B).
     */
    readonly size: number;
    readonly softwareSourceId: string;
    /**
     * Identifies how the versioned custom software source was created.
     */
    readonly softwareSourceSubType: string;
    /**
     * Type of software source.
     */
    readonly softwareSourceType: string;
    /**
     * The version to assign to this custom software source.
     */
    readonly softwareSourceVersion: string;
    /**
     * The current state of the software source.
     */
    readonly state: string;
    /**
     * System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    readonly systemTags: {[key: string]: string};
    /**
     * The date and time the software source was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     */
    readonly timeCreated: string;
    /**
     * The date and time the metadata for this software source was last updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
     */
    readonly timeMetadataUpdated: string;
    /**
     * URL for the repository. For vendor software sources, this is the URL to the regional yum server. For custom software sources, this is 'custom/<repoId>'.
     */
    readonly url: string;
    /**
     * Name of the vendor providing the software source.
     */
    readonly vendorName: string;
    /**
     * List of vendor software sources that are used for the basis of the versioned custom software source.
     */
    readonly vendorSoftwareSources: outputs.OsManagementHub.GetSoftwareSourceVendorSoftwareSource[];
}
/**
 * This data source provides details about a specific Software Source resource in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Returns information about the specified software source.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSoftwareSource = oci.OsManagementHub.getSoftwareSource({
 *     softwareSourceId: testSoftwareSourceOciOsManagementHubSoftwareSource.id,
 * });
 * ```
 */
export function getSoftwareSourceOutput(args: GetSoftwareSourceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSoftwareSourceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:OsManagementHub/getSoftwareSource:getSoftwareSource", {
        "softwareSourceId": args.softwareSourceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSoftwareSource.
 */
export interface GetSoftwareSourceOutputArgs {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
     */
    softwareSourceId: pulumi.Input<string>;
}
