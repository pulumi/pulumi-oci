// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Software Source Module Stream Profiles in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists module stream profiles from the specified software source OCID. Filter the list against a variety of
 * criteria including but not limited to its module name, stream name, and (profile) name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSoftwareSourceModuleStreamProfiles = oci.OsManagementHub.getSoftwareSourceModuleStreamProfiles({
 *     softwareSourceId: oci_os_management_hub_software_source.test_software_source.id,
 *     moduleName: _var.software_source_module_stream_profile_module_name,
 *     name: _var.software_source_module_stream_profile_name,
 *     streamName: oci_streaming_stream.test_stream.name,
 * });
 * ```
 */
export function getSoftwareSourceModuleStreamProfiles(args: GetSoftwareSourceModuleStreamProfilesArgs, opts?: pulumi.InvokeOptions): Promise<GetSoftwareSourceModuleStreamProfilesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:OsManagementHub/getSoftwareSourceModuleStreamProfiles:getSoftwareSourceModuleStreamProfiles", {
        "filters": args.filters,
        "moduleName": args.moduleName,
        "name": args.name,
        "softwareSourceId": args.softwareSourceId,
        "streamName": args.streamName,
    }, opts);
}

/**
 * A collection of arguments for invoking getSoftwareSourceModuleStreamProfiles.
 */
export interface GetSoftwareSourceModuleStreamProfilesArgs {
    filters?: inputs.OsManagementHub.GetSoftwareSourceModuleStreamProfilesFilter[];
    /**
     * The name of a module. This parameter is required if a streamName is specified.
     */
    moduleName?: string;
    /**
     * The name of the entity to be queried.
     */
    name?: string;
    /**
     * The software source OCID.
     */
    softwareSourceId: string;
    /**
     * The name of the stream of the containing module.  This parameter is required if a profileName is specified.
     */
    streamName?: string;
}

/**
 * A collection of values returned by getSoftwareSourceModuleStreamProfiles.
 */
export interface GetSoftwareSourceModuleStreamProfilesResult {
    readonly filters?: outputs.OsManagementHub.GetSoftwareSourceModuleStreamProfilesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the module that contains the stream profile.
     */
    readonly moduleName?: string;
    /**
     * The list of module_stream_profile_collection.
     */
    readonly moduleStreamProfileCollections: outputs.OsManagementHub.GetSoftwareSourceModuleStreamProfilesModuleStreamProfileCollection[];
    /**
     * The name of the profile.
     */
    readonly name?: string;
    readonly softwareSourceId: string;
    /**
     * The name of the stream that contains the profile.
     */
    readonly streamName?: string;
}
/**
 * This data source provides the list of Software Source Module Stream Profiles in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists module stream profiles from the specified software source OCID. Filter the list against a variety of
 * criteria including but not limited to its module name, stream name, and (profile) name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSoftwareSourceModuleStreamProfiles = oci.OsManagementHub.getSoftwareSourceModuleStreamProfiles({
 *     softwareSourceId: oci_os_management_hub_software_source.test_software_source.id,
 *     moduleName: _var.software_source_module_stream_profile_module_name,
 *     name: _var.software_source_module_stream_profile_name,
 *     streamName: oci_streaming_stream.test_stream.name,
 * });
 * ```
 */
export function getSoftwareSourceModuleStreamProfilesOutput(args: GetSoftwareSourceModuleStreamProfilesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSoftwareSourceModuleStreamProfilesResult> {
    return pulumi.output(args).apply((a: any) => getSoftwareSourceModuleStreamProfiles(a, opts))
}

/**
 * A collection of arguments for invoking getSoftwareSourceModuleStreamProfiles.
 */
export interface GetSoftwareSourceModuleStreamProfilesOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.OsManagementHub.GetSoftwareSourceModuleStreamProfilesFilterArgs>[]>;
    /**
     * The name of a module. This parameter is required if a streamName is specified.
     */
    moduleName?: pulumi.Input<string>;
    /**
     * The name of the entity to be queried.
     */
    name?: pulumi.Input<string>;
    /**
     * The software source OCID.
     */
    softwareSourceId: pulumi.Input<string>;
    /**
     * The name of the stream of the containing module.  This parameter is required if a profileName is specified.
     */
    streamName?: pulumi.Input<string>;
}
