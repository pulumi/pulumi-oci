// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Software Sources in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists software sources that match the specified tenancy or software source OCID. Filter the list against a
 * variety of criteria including but not limited to its name, status, architecture, and OS family.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSoftwareSources = oci.OsManagementHub.getSoftwareSources({
 *     archTypes: _var.software_source_arch_type,
 *     availabilities: _var.software_source_availability,
 *     compartmentId: _var.compartment_id,
 *     displayName: _var.software_source_display_name,
 *     displayNameContains: _var.software_source_display_name_contains,
 *     displayNameNotEqualTos: _var.software_source_display_name_not_equal_to,
 *     osFamilies: _var.software_source_os_family,
 *     softwareSourceId: oci_os_management_hub_software_source.test_software_source.id,
 *     softwareSourceTypes: _var.software_source_software_source_type,
 *     states: _var.software_source_state,
 *     vendorName: _var.software_source_vendor_name,
 * });
 * ```
 */
export function getSoftwareSources(args?: GetSoftwareSourcesArgs, opts?: pulumi.InvokeOptions): Promise<GetSoftwareSourcesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:OsManagementHub/getSoftwareSources:getSoftwareSources", {
        "archTypes": args.archTypes,
        "availabilities": args.availabilities,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "displayNameContains": args.displayNameContains,
        "displayNameNotEqualTos": args.displayNameNotEqualTos,
        "filters": args.filters,
        "osFamilies": args.osFamilies,
        "softwareSourceId": args.softwareSourceId,
        "softwareSourceTypes": args.softwareSourceTypes,
        "states": args.states,
        "vendorName": args.vendorName,
    }, opts);
}

/**
 * A collection of arguments for invoking getSoftwareSources.
 */
export interface GetSoftwareSourcesArgs {
    /**
     * A filter to return only instances whose architecture type matches the given architecture.
     */
    archTypes?: string[];
    /**
     * The availabilities of the software source for a tenant.
     */
    availabilities?: string[];
    /**
     * The OCID of the compartment that contains the resources to list.
     */
    compartmentId?: string;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
     */
    displayName?: string;
    /**
     * A filter to return resources that may partially match the given display name.
     */
    displayNameContains?: string;
    /**
     * A multi filter to return resources that do not contains the given display names.
     */
    displayNameNotEqualTos?: string[];
    filters?: inputs.OsManagementHub.GetSoftwareSourcesFilter[];
    /**
     * A filter to return only instances whose OS family type matches the given OS family.
     */
    osFamilies?: string[];
    /**
     * The OCID for the software source.
     */
    softwareSourceId?: string;
    /**
     * The type of the software source.
     */
    softwareSourceTypes?: string[];
    /**
     * A filter to return only resources whose lifecycleState matches the given lifecycleStates.
     */
    states?: string[];
    /**
     * A filter to return only profiles that match the given vendorName.
     */
    vendorName?: string;
}

/**
 * A collection of values returned by getSoftwareSources.
 */
export interface GetSoftwareSourcesResult {
    /**
     * The architecture type supported by the software source.
     */
    readonly archTypes?: string[];
    /**
     * Possible availabilities of a software source.
     */
    readonly availabilities?: string[];
    /**
     * The OCID of the tenancy containing the software source.
     */
    readonly compartmentId?: string;
    /**
     * User friendly name.
     */
    readonly displayName?: string;
    readonly displayNameContains?: string;
    readonly displayNameNotEqualTos?: string[];
    readonly filters?: outputs.OsManagementHub.GetSoftwareSourcesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The OS family the software source belongs to.
     */
    readonly osFamilies?: string[];
    /**
     * The list of software_source_collection.
     */
    readonly softwareSourceCollections: outputs.OsManagementHub.GetSoftwareSourcesSoftwareSourceCollection[];
    readonly softwareSourceId?: string;
    /**
     * Type of the software source.
     */
    readonly softwareSourceTypes?: string[];
    /**
     * The current state of the software source.
     */
    readonly states?: string[];
    /**
     * Name of the vendor providing the software source.
     */
    readonly vendorName?: string;
}
/**
 * This data source provides the list of Software Sources in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists software sources that match the specified tenancy or software source OCID. Filter the list against a
 * variety of criteria including but not limited to its name, status, architecture, and OS family.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSoftwareSources = oci.OsManagementHub.getSoftwareSources({
 *     archTypes: _var.software_source_arch_type,
 *     availabilities: _var.software_source_availability,
 *     compartmentId: _var.compartment_id,
 *     displayName: _var.software_source_display_name,
 *     displayNameContains: _var.software_source_display_name_contains,
 *     displayNameNotEqualTos: _var.software_source_display_name_not_equal_to,
 *     osFamilies: _var.software_source_os_family,
 *     softwareSourceId: oci_os_management_hub_software_source.test_software_source.id,
 *     softwareSourceTypes: _var.software_source_software_source_type,
 *     states: _var.software_source_state,
 *     vendorName: _var.software_source_vendor_name,
 * });
 * ```
 */
export function getSoftwareSourcesOutput(args?: GetSoftwareSourcesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSoftwareSourcesResult> {
    return pulumi.output(args).apply((a: any) => getSoftwareSources(a, opts))
}

/**
 * A collection of arguments for invoking getSoftwareSources.
 */
export interface GetSoftwareSourcesOutputArgs {
    /**
     * A filter to return only instances whose architecture type matches the given architecture.
     */
    archTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The availabilities of the software source for a tenant.
     */
    availabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The OCID of the compartment that contains the resources to list.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
     */
    displayName?: pulumi.Input<string>;
    /**
     * A filter to return resources that may partially match the given display name.
     */
    displayNameContains?: pulumi.Input<string>;
    /**
     * A multi filter to return resources that do not contains the given display names.
     */
    displayNameNotEqualTos?: pulumi.Input<pulumi.Input<string>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.OsManagementHub.GetSoftwareSourcesFilterArgs>[]>;
    /**
     * A filter to return only instances whose OS family type matches the given OS family.
     */
    osFamilies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The OCID for the software source.
     */
    softwareSourceId?: pulumi.Input<string>;
    /**
     * The type of the software source.
     */
    softwareSourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to return only resources whose lifecycleState matches the given lifecycleStates.
     */
    states?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to return only profiles that match the given vendorName.
     */
    vendorName?: pulumi.Input<string>;
}
