// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Software Sources in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists software sources that match the specified tenancy or software source [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against a
 * variety of criteria including but not limited to its name, status, architecture, and OS family.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSoftwareSources = oci.OsManagementHub.getSoftwareSources({
 *     archTypes: softwareSourceArchType,
 *     availabilities: softwareSourceAvailability,
 *     availabilityAnywheres: softwareSourceAvailabilityAnywhere,
 *     availabilityAtOcis: softwareSourceAvailabilityAtOci,
 *     compartmentId: compartmentId,
 *     displayName: softwareSourceDisplayName,
 *     displayNameContains: softwareSourceDisplayNameContains,
 *     displayNameNotEqualTos: softwareSourceDisplayNameNotEqualTo,
 *     isMandatoryForAutonomousLinux: softwareSourceIsMandatoryForAutonomousLinux,
 *     osFamilies: softwareSourceOsFamily,
 *     softwareSourceId: testSoftwareSource.id,
 *     softwareSourceTypes: softwareSourceSoftwareSourceType,
 *     states: softwareSourceState,
 *     vendorName: softwareSourceVendorName,
 * });
 * ```
 */
export function getSoftwareSources(args?: GetSoftwareSourcesArgs, opts?: pulumi.InvokeOptions): Promise<GetSoftwareSourcesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:OsManagementHub/getSoftwareSources:getSoftwareSources", {
        "archTypes": args.archTypes,
        "availabilities": args.availabilities,
        "availabilityAnywheres": args.availabilityAnywheres,
        "availabilityAtOcis": args.availabilityAtOcis,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "displayNameContains": args.displayNameContains,
        "displayNameNotEqualTos": args.displayNameNotEqualTos,
        "filters": args.filters,
        "isMandatoryForAutonomousLinux": args.isMandatoryForAutonomousLinux,
        "osFamilies": args.osFamilies,
        "softwareSourceId": args.softwareSourceId,
        "softwareSourceTypes": args.softwareSourceTypes,
        "states": args.states,
        "vendorName": args.vendorName,
    }, opts);
}

/**
 * A collection of arguments for invoking getSoftwareSources.
 */
export interface GetSoftwareSourcesArgs {
    /**
     * A filter to return only instances whose architecture type matches the given architecture.
     */
    archTypes?: string[];
    /**
     * The availabilities of the software source in a non-OCI environment for a tenancy.
     */
    availabilities?: string[];
    /**
     * The availabilities of the software source. Use this query parameter to filter across availabilities in different environments.
     */
    availabilityAnywheres?: string[];
    /**
     * The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
     */
    availabilityAtOcis?: string[];
    /**
     * (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
     */
    compartmentId?: string;
    /**
     * A filter to return resources that match the given user-friendly name.
     */
    displayName?: string;
    /**
     * A filter to return resources that may partially match the given display name.
     */
    displayNameContains?: string;
    /**
     * A multi filter to return resources that do not contains the given display names.
     */
    displayNameNotEqualTos?: string[];
    filters?: inputs.OsManagementHub.GetSoftwareSourcesFilter[];
    /**
     * Indicates whether the software source is mandatory for the Autonomous Linux service.
     */
    isMandatoryForAutonomousLinux?: boolean;
    /**
     * A filter to return only resources that match the given operating system family.
     */
    osFamilies?: string[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the software source.
     */
    softwareSourceId?: string;
    /**
     * The type of the software source.
     */
    softwareSourceTypes?: string[];
    /**
     * A filter to return only software sources whose state matches the given state.
     */
    states?: string[];
    /**
     * A filter to return only resources that match the given vendor name.
     */
    vendorName?: string;
}

/**
 * A collection of values returned by getSoftwareSources.
 */
export interface GetSoftwareSourcesResult {
    /**
     * The architecture type supported by the software source.
     */
    readonly archTypes?: string[];
    /**
     * Availability of the software source (for non-OCI environments).
     */
    readonly availabilities?: string[];
    readonly availabilityAnywheres?: string[];
    /**
     * Availability of the software source (for Oracle Cloud Infrastructure environments).
     */
    readonly availabilityAtOcis?: string[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
     */
    readonly compartmentId?: string;
    /**
     * User-friendly name.
     */
    readonly displayName?: string;
    readonly displayNameContains?: string;
    readonly displayNameNotEqualTos?: string[];
    readonly filters?: outputs.OsManagementHub.GetSoftwareSourcesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Indicates whether the software source is required for the Autonomous Linux service.
     */
    readonly isMandatoryForAutonomousLinux?: boolean;
    /**
     * The OS family the software source belongs to.
     */
    readonly osFamilies?: string[];
    /**
     * The list of software_source_collection.
     */
    readonly softwareSourceCollections: outputs.OsManagementHub.GetSoftwareSourcesSoftwareSourceCollection[];
    readonly softwareSourceId?: string;
    /**
     * Type of software source.
     */
    readonly softwareSourceTypes?: string[];
    /**
     * The current state of the software source.
     */
    readonly states?: string[];
    /**
     * Name of the vendor providing the software source.
     */
    readonly vendorName?: string;
}
/**
 * This data source provides the list of Software Sources in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Lists software sources that match the specified tenancy or software source [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against a
 * variety of criteria including but not limited to its name, status, architecture, and OS family.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSoftwareSources = oci.OsManagementHub.getSoftwareSources({
 *     archTypes: softwareSourceArchType,
 *     availabilities: softwareSourceAvailability,
 *     availabilityAnywheres: softwareSourceAvailabilityAnywhere,
 *     availabilityAtOcis: softwareSourceAvailabilityAtOci,
 *     compartmentId: compartmentId,
 *     displayName: softwareSourceDisplayName,
 *     displayNameContains: softwareSourceDisplayNameContains,
 *     displayNameNotEqualTos: softwareSourceDisplayNameNotEqualTo,
 *     isMandatoryForAutonomousLinux: softwareSourceIsMandatoryForAutonomousLinux,
 *     osFamilies: softwareSourceOsFamily,
 *     softwareSourceId: testSoftwareSource.id,
 *     softwareSourceTypes: softwareSourceSoftwareSourceType,
 *     states: softwareSourceState,
 *     vendorName: softwareSourceVendorName,
 * });
 * ```
 */
export function getSoftwareSourcesOutput(args?: GetSoftwareSourcesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSoftwareSourcesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:OsManagementHub/getSoftwareSources:getSoftwareSources", {
        "archTypes": args.archTypes,
        "availabilities": args.availabilities,
        "availabilityAnywheres": args.availabilityAnywheres,
        "availabilityAtOcis": args.availabilityAtOcis,
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "displayNameContains": args.displayNameContains,
        "displayNameNotEqualTos": args.displayNameNotEqualTos,
        "filters": args.filters,
        "isMandatoryForAutonomousLinux": args.isMandatoryForAutonomousLinux,
        "osFamilies": args.osFamilies,
        "softwareSourceId": args.softwareSourceId,
        "softwareSourceTypes": args.softwareSourceTypes,
        "states": args.states,
        "vendorName": args.vendorName,
    }, opts);
}

/**
 * A collection of arguments for invoking getSoftwareSources.
 */
export interface GetSoftwareSourcesOutputArgs {
    /**
     * A filter to return only instances whose architecture type matches the given architecture.
     */
    archTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The availabilities of the software source in a non-OCI environment for a tenancy.
     */
    availabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The availabilities of the software source. Use this query parameter to filter across availabilities in different environments.
     */
    availabilityAnywheres?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
     */
    availabilityAtOcis?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A filter to return resources that match the given user-friendly name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * A filter to return resources that may partially match the given display name.
     */
    displayNameContains?: pulumi.Input<string>;
    /**
     * A multi filter to return resources that do not contains the given display names.
     */
    displayNameNotEqualTos?: pulumi.Input<pulumi.Input<string>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.OsManagementHub.GetSoftwareSourcesFilterArgs>[]>;
    /**
     * Indicates whether the software source is mandatory for the Autonomous Linux service.
     */
    isMandatoryForAutonomousLinux?: pulumi.Input<boolean>;
    /**
     * A filter to return only resources that match the given operating system family.
     */
    osFamilies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the software source.
     */
    softwareSourceId?: pulumi.Input<string>;
    /**
     * The type of the software source.
     */
    softwareSourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to return only software sources whose state matches the given state.
     */
    states?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to return only resources that match the given vendor name.
     */
    vendorName?: pulumi.Input<string>;
}
