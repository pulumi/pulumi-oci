// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { EventArgs, EventState } from "./event";
export type Event = import("./event").Event;
export const Event: typeof import("./event").Event = null as any;
utilities.lazyLoad(exports, ["Event"], () => require("./event"));

export { GetEntitlementsArgs, GetEntitlementsResult, GetEntitlementsOutputArgs } from "./getEntitlements";
export const getEntitlements: typeof import("./getEntitlements").getEntitlements = null as any;
export const getEntitlementsOutput: typeof import("./getEntitlements").getEntitlementsOutput = null as any;
utilities.lazyLoad(exports, ["getEntitlements","getEntitlementsOutput"], () => require("./getEntitlements"));

export { GetErrataArgs, GetErrataResult, GetErrataOutputArgs } from "./getErrata";
export const getErrata: typeof import("./getErrata").getErrata = null as any;
export const getErrataOutput: typeof import("./getErrata").getErrataOutput = null as any;
utilities.lazyLoad(exports, ["getErrata","getErrataOutput"], () => require("./getErrata"));

export { GetErratumArgs, GetErratumResult, GetErratumOutputArgs } from "./getErratum";
export const getErratum: typeof import("./getErratum").getErratum = null as any;
export const getErratumOutput: typeof import("./getErratum").getErratumOutput = null as any;
utilities.lazyLoad(exports, ["getErratum","getErratumOutput"], () => require("./getErratum"));

export { GetEventArgs, GetEventResult, GetEventOutputArgs } from "./getEvent";
export const getEvent: typeof import("./getEvent").getEvent = null as any;
export const getEventOutput: typeof import("./getEvent").getEventOutput = null as any;
utilities.lazyLoad(exports, ["getEvent","getEventOutput"], () => require("./getEvent"));

export { GetEventsArgs, GetEventsResult, GetEventsOutputArgs } from "./getEvents";
export const getEvents: typeof import("./getEvents").getEvents = null as any;
export const getEventsOutput: typeof import("./getEvents").getEventsOutput = null as any;
utilities.lazyLoad(exports, ["getEvents","getEventsOutput"], () => require("./getEvents"));

export { GetLifecycleEnvironmentArgs, GetLifecycleEnvironmentResult, GetLifecycleEnvironmentOutputArgs } from "./getLifecycleEnvironment";
export const getLifecycleEnvironment: typeof import("./getLifecycleEnvironment").getLifecycleEnvironment = null as any;
export const getLifecycleEnvironmentOutput: typeof import("./getLifecycleEnvironment").getLifecycleEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getLifecycleEnvironment","getLifecycleEnvironmentOutput"], () => require("./getLifecycleEnvironment"));

export { GetLifecycleEnvironmentsArgs, GetLifecycleEnvironmentsResult, GetLifecycleEnvironmentsOutputArgs } from "./getLifecycleEnvironments";
export const getLifecycleEnvironments: typeof import("./getLifecycleEnvironments").getLifecycleEnvironments = null as any;
export const getLifecycleEnvironmentsOutput: typeof import("./getLifecycleEnvironments").getLifecycleEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getLifecycleEnvironments","getLifecycleEnvironmentsOutput"], () => require("./getLifecycleEnvironments"));

export { GetLifecycleStageArgs, GetLifecycleStageResult, GetLifecycleStageOutputArgs } from "./getLifecycleStage";
export const getLifecycleStage: typeof import("./getLifecycleStage").getLifecycleStage = null as any;
export const getLifecycleStageOutput: typeof import("./getLifecycleStage").getLifecycleStageOutput = null as any;
utilities.lazyLoad(exports, ["getLifecycleStage","getLifecycleStageOutput"], () => require("./getLifecycleStage"));

export { GetLifecycleStagesArgs, GetLifecycleStagesResult, GetLifecycleStagesOutputArgs } from "./getLifecycleStages";
export const getLifecycleStages: typeof import("./getLifecycleStages").getLifecycleStages = null as any;
export const getLifecycleStagesOutput: typeof import("./getLifecycleStages").getLifecycleStagesOutput = null as any;
utilities.lazyLoad(exports, ["getLifecycleStages","getLifecycleStagesOutput"], () => require("./getLifecycleStages"));

export { GetManagedInstanceArgs, GetManagedInstanceResult, GetManagedInstanceOutputArgs } from "./getManagedInstance";
export const getManagedInstance: typeof import("./getManagedInstance").getManagedInstance = null as any;
export const getManagedInstanceOutput: typeof import("./getManagedInstance").getManagedInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstance","getManagedInstanceOutput"], () => require("./getManagedInstance"));

export { GetManagedInstanceAvailablePackagesArgs, GetManagedInstanceAvailablePackagesResult, GetManagedInstanceAvailablePackagesOutputArgs } from "./getManagedInstanceAvailablePackages";
export const getManagedInstanceAvailablePackages: typeof import("./getManagedInstanceAvailablePackages").getManagedInstanceAvailablePackages = null as any;
export const getManagedInstanceAvailablePackagesOutput: typeof import("./getManagedInstanceAvailablePackages").getManagedInstanceAvailablePackagesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceAvailablePackages","getManagedInstanceAvailablePackagesOutput"], () => require("./getManagedInstanceAvailablePackages"));

export { GetManagedInstanceAvailableSoftwareSourcesArgs, GetManagedInstanceAvailableSoftwareSourcesResult, GetManagedInstanceAvailableSoftwareSourcesOutputArgs } from "./getManagedInstanceAvailableSoftwareSources";
export const getManagedInstanceAvailableSoftwareSources: typeof import("./getManagedInstanceAvailableSoftwareSources").getManagedInstanceAvailableSoftwareSources = null as any;
export const getManagedInstanceAvailableSoftwareSourcesOutput: typeof import("./getManagedInstanceAvailableSoftwareSources").getManagedInstanceAvailableSoftwareSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceAvailableSoftwareSources","getManagedInstanceAvailableSoftwareSourcesOutput"], () => require("./getManagedInstanceAvailableSoftwareSources"));

export { GetManagedInstanceAvailableWindowsUpdatesArgs, GetManagedInstanceAvailableWindowsUpdatesResult, GetManagedInstanceAvailableWindowsUpdatesOutputArgs } from "./getManagedInstanceAvailableWindowsUpdates";
export const getManagedInstanceAvailableWindowsUpdates: typeof import("./getManagedInstanceAvailableWindowsUpdates").getManagedInstanceAvailableWindowsUpdates = null as any;
export const getManagedInstanceAvailableWindowsUpdatesOutput: typeof import("./getManagedInstanceAvailableWindowsUpdates").getManagedInstanceAvailableWindowsUpdatesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceAvailableWindowsUpdates","getManagedInstanceAvailableWindowsUpdatesOutput"], () => require("./getManagedInstanceAvailableWindowsUpdates"));

export { GetManagedInstanceErrataArgs, GetManagedInstanceErrataResult, GetManagedInstanceErrataOutputArgs } from "./getManagedInstanceErrata";
export const getManagedInstanceErrata: typeof import("./getManagedInstanceErrata").getManagedInstanceErrata = null as any;
export const getManagedInstanceErrataOutput: typeof import("./getManagedInstanceErrata").getManagedInstanceErrataOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceErrata","getManagedInstanceErrataOutput"], () => require("./getManagedInstanceErrata"));

export { GetManagedInstanceGroupArgs, GetManagedInstanceGroupResult, GetManagedInstanceGroupOutputArgs } from "./getManagedInstanceGroup";
export const getManagedInstanceGroup: typeof import("./getManagedInstanceGroup").getManagedInstanceGroup = null as any;
export const getManagedInstanceGroupOutput: typeof import("./getManagedInstanceGroup").getManagedInstanceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceGroup","getManagedInstanceGroupOutput"], () => require("./getManagedInstanceGroup"));

export { GetManagedInstanceGroupAvailableModulesArgs, GetManagedInstanceGroupAvailableModulesResult, GetManagedInstanceGroupAvailableModulesOutputArgs } from "./getManagedInstanceGroupAvailableModules";
export const getManagedInstanceGroupAvailableModules: typeof import("./getManagedInstanceGroupAvailableModules").getManagedInstanceGroupAvailableModules = null as any;
export const getManagedInstanceGroupAvailableModulesOutput: typeof import("./getManagedInstanceGroupAvailableModules").getManagedInstanceGroupAvailableModulesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceGroupAvailableModules","getManagedInstanceGroupAvailableModulesOutput"], () => require("./getManagedInstanceGroupAvailableModules"));

export { GetManagedInstanceGroupAvailablePackagesArgs, GetManagedInstanceGroupAvailablePackagesResult, GetManagedInstanceGroupAvailablePackagesOutputArgs } from "./getManagedInstanceGroupAvailablePackages";
export const getManagedInstanceGroupAvailablePackages: typeof import("./getManagedInstanceGroupAvailablePackages").getManagedInstanceGroupAvailablePackages = null as any;
export const getManagedInstanceGroupAvailablePackagesOutput: typeof import("./getManagedInstanceGroupAvailablePackages").getManagedInstanceGroupAvailablePackagesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceGroupAvailablePackages","getManagedInstanceGroupAvailablePackagesOutput"], () => require("./getManagedInstanceGroupAvailablePackages"));

export { GetManagedInstanceGroupAvailableSoftwareSourcesArgs, GetManagedInstanceGroupAvailableSoftwareSourcesResult, GetManagedInstanceGroupAvailableSoftwareSourcesOutputArgs } from "./getManagedInstanceGroupAvailableSoftwareSources";
export const getManagedInstanceGroupAvailableSoftwareSources: typeof import("./getManagedInstanceGroupAvailableSoftwareSources").getManagedInstanceGroupAvailableSoftwareSources = null as any;
export const getManagedInstanceGroupAvailableSoftwareSourcesOutput: typeof import("./getManagedInstanceGroupAvailableSoftwareSources").getManagedInstanceGroupAvailableSoftwareSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceGroupAvailableSoftwareSources","getManagedInstanceGroupAvailableSoftwareSourcesOutput"], () => require("./getManagedInstanceGroupAvailableSoftwareSources"));

export { GetManagedInstanceGroupInstalledPackagesArgs, GetManagedInstanceGroupInstalledPackagesResult, GetManagedInstanceGroupInstalledPackagesOutputArgs } from "./getManagedInstanceGroupInstalledPackages";
export const getManagedInstanceGroupInstalledPackages: typeof import("./getManagedInstanceGroupInstalledPackages").getManagedInstanceGroupInstalledPackages = null as any;
export const getManagedInstanceGroupInstalledPackagesOutput: typeof import("./getManagedInstanceGroupInstalledPackages").getManagedInstanceGroupInstalledPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceGroupInstalledPackages","getManagedInstanceGroupInstalledPackagesOutput"], () => require("./getManagedInstanceGroupInstalledPackages"));

export { GetManagedInstanceGroupModulesArgs, GetManagedInstanceGroupModulesResult, GetManagedInstanceGroupModulesOutputArgs } from "./getManagedInstanceGroupModules";
export const getManagedInstanceGroupModules: typeof import("./getManagedInstanceGroupModules").getManagedInstanceGroupModules = null as any;
export const getManagedInstanceGroupModulesOutput: typeof import("./getManagedInstanceGroupModules").getManagedInstanceGroupModulesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceGroupModules","getManagedInstanceGroupModulesOutput"], () => require("./getManagedInstanceGroupModules"));

export { GetManagedInstanceGroupsArgs, GetManagedInstanceGroupsResult, GetManagedInstanceGroupsOutputArgs } from "./getManagedInstanceGroups";
export const getManagedInstanceGroups: typeof import("./getManagedInstanceGroups").getManagedInstanceGroups = null as any;
export const getManagedInstanceGroupsOutput: typeof import("./getManagedInstanceGroups").getManagedInstanceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceGroups","getManagedInstanceGroupsOutput"], () => require("./getManagedInstanceGroups"));

export { GetManagedInstanceInstalledPackagesArgs, GetManagedInstanceInstalledPackagesResult, GetManagedInstanceInstalledPackagesOutputArgs } from "./getManagedInstanceInstalledPackages";
export const getManagedInstanceInstalledPackages: typeof import("./getManagedInstanceInstalledPackages").getManagedInstanceInstalledPackages = null as any;
export const getManagedInstanceInstalledPackagesOutput: typeof import("./getManagedInstanceInstalledPackages").getManagedInstanceInstalledPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceInstalledPackages","getManagedInstanceInstalledPackagesOutput"], () => require("./getManagedInstanceInstalledPackages"));

export { GetManagedInstanceInstalledWindowsUpdatesArgs, GetManagedInstanceInstalledWindowsUpdatesResult, GetManagedInstanceInstalledWindowsUpdatesOutputArgs } from "./getManagedInstanceInstalledWindowsUpdates";
export const getManagedInstanceInstalledWindowsUpdates: typeof import("./getManagedInstanceInstalledWindowsUpdates").getManagedInstanceInstalledWindowsUpdates = null as any;
export const getManagedInstanceInstalledWindowsUpdatesOutput: typeof import("./getManagedInstanceInstalledWindowsUpdates").getManagedInstanceInstalledWindowsUpdatesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceInstalledWindowsUpdates","getManagedInstanceInstalledWindowsUpdatesOutput"], () => require("./getManagedInstanceInstalledWindowsUpdates"));

export { GetManagedInstanceModulesArgs, GetManagedInstanceModulesResult, GetManagedInstanceModulesOutputArgs } from "./getManagedInstanceModules";
export const getManagedInstanceModules: typeof import("./getManagedInstanceModules").getManagedInstanceModules = null as any;
export const getManagedInstanceModulesOutput: typeof import("./getManagedInstanceModules").getManagedInstanceModulesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceModules","getManagedInstanceModulesOutput"], () => require("./getManagedInstanceModules"));

export { GetManagedInstanceUpdatablePackagesArgs, GetManagedInstanceUpdatablePackagesResult, GetManagedInstanceUpdatablePackagesOutputArgs } from "./getManagedInstanceUpdatablePackages";
export const getManagedInstanceUpdatablePackages: typeof import("./getManagedInstanceUpdatablePackages").getManagedInstanceUpdatablePackages = null as any;
export const getManagedInstanceUpdatablePackagesOutput: typeof import("./getManagedInstanceUpdatablePackages").getManagedInstanceUpdatablePackagesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceUpdatablePackages","getManagedInstanceUpdatablePackagesOutput"], () => require("./getManagedInstanceUpdatablePackages"));

export { GetManagedInstancesArgs, GetManagedInstancesResult, GetManagedInstancesOutputArgs } from "./getManagedInstances";
export const getManagedInstances: typeof import("./getManagedInstances").getManagedInstances = null as any;
export const getManagedInstancesOutput: typeof import("./getManagedInstances").getManagedInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstances","getManagedInstancesOutput"], () => require("./getManagedInstances"));

export { GetManagementStationArgs, GetManagementStationResult, GetManagementStationOutputArgs } from "./getManagementStation";
export const getManagementStation: typeof import("./getManagementStation").getManagementStation = null as any;
export const getManagementStationOutput: typeof import("./getManagementStation").getManagementStationOutput = null as any;
utilities.lazyLoad(exports, ["getManagementStation","getManagementStationOutput"], () => require("./getManagementStation"));

export { GetManagementStationMirrorsArgs, GetManagementStationMirrorsResult, GetManagementStationMirrorsOutputArgs } from "./getManagementStationMirrors";
export const getManagementStationMirrors: typeof import("./getManagementStationMirrors").getManagementStationMirrors = null as any;
export const getManagementStationMirrorsOutput: typeof import("./getManagementStationMirrors").getManagementStationMirrorsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementStationMirrors","getManagementStationMirrorsOutput"], () => require("./getManagementStationMirrors"));

export { GetManagementStationsArgs, GetManagementStationsResult, GetManagementStationsOutputArgs } from "./getManagementStations";
export const getManagementStations: typeof import("./getManagementStations").getManagementStations = null as any;
export const getManagementStationsOutput: typeof import("./getManagementStations").getManagementStationsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementStations","getManagementStationsOutput"], () => require("./getManagementStations"));

export { GetProfileArgs, GetProfileResult, GetProfileOutputArgs } from "./getProfile";
export const getProfile: typeof import("./getProfile").getProfile = null as any;
export const getProfileOutput: typeof import("./getProfile").getProfileOutput = null as any;
utilities.lazyLoad(exports, ["getProfile","getProfileOutput"], () => require("./getProfile"));

export { GetProfileAvailableSoftwareSourcesArgs, GetProfileAvailableSoftwareSourcesResult, GetProfileAvailableSoftwareSourcesOutputArgs } from "./getProfileAvailableSoftwareSources";
export const getProfileAvailableSoftwareSources: typeof import("./getProfileAvailableSoftwareSources").getProfileAvailableSoftwareSources = null as any;
export const getProfileAvailableSoftwareSourcesOutput: typeof import("./getProfileAvailableSoftwareSources").getProfileAvailableSoftwareSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getProfileAvailableSoftwareSources","getProfileAvailableSoftwareSourcesOutput"], () => require("./getProfileAvailableSoftwareSources"));

export { GetProfileVersionArgs, GetProfileVersionResult, GetProfileVersionOutputArgs } from "./getProfileVersion";
export const getProfileVersion: typeof import("./getProfileVersion").getProfileVersion = null as any;
export const getProfileVersionOutput: typeof import("./getProfileVersion").getProfileVersionOutput = null as any;
utilities.lazyLoad(exports, ["getProfileVersion","getProfileVersionOutput"], () => require("./getProfileVersion"));

export { GetProfilesArgs, GetProfilesResult, GetProfilesOutputArgs } from "./getProfiles";
export const getProfiles: typeof import("./getProfiles").getProfiles = null as any;
export const getProfilesOutput: typeof import("./getProfiles").getProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getProfiles","getProfilesOutput"], () => require("./getProfiles"));

export { GetScheduledJobArgs, GetScheduledJobResult, GetScheduledJobOutputArgs } from "./getScheduledJob";
export const getScheduledJob: typeof import("./getScheduledJob").getScheduledJob = null as any;
export const getScheduledJobOutput: typeof import("./getScheduledJob").getScheduledJobOutput = null as any;
utilities.lazyLoad(exports, ["getScheduledJob","getScheduledJobOutput"], () => require("./getScheduledJob"));

export { GetScheduledJobsArgs, GetScheduledJobsResult, GetScheduledJobsOutputArgs } from "./getScheduledJobs";
export const getScheduledJobs: typeof import("./getScheduledJobs").getScheduledJobs = null as any;
export const getScheduledJobsOutput: typeof import("./getScheduledJobs").getScheduledJobsOutput = null as any;
utilities.lazyLoad(exports, ["getScheduledJobs","getScheduledJobsOutput"], () => require("./getScheduledJobs"));

export { GetSoftwarePackageArgs, GetSoftwarePackageResult, GetSoftwarePackageOutputArgs } from "./getSoftwarePackage";
export const getSoftwarePackage: typeof import("./getSoftwarePackage").getSoftwarePackage = null as any;
export const getSoftwarePackageOutput: typeof import("./getSoftwarePackage").getSoftwarePackageOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwarePackage","getSoftwarePackageOutput"], () => require("./getSoftwarePackage"));

export { GetSoftwarePackageSoftwareSourceArgs, GetSoftwarePackageSoftwareSourceResult, GetSoftwarePackageSoftwareSourceOutputArgs } from "./getSoftwarePackageSoftwareSource";
export const getSoftwarePackageSoftwareSource: typeof import("./getSoftwarePackageSoftwareSource").getSoftwarePackageSoftwareSource = null as any;
export const getSoftwarePackageSoftwareSourceOutput: typeof import("./getSoftwarePackageSoftwareSource").getSoftwarePackageSoftwareSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwarePackageSoftwareSource","getSoftwarePackageSoftwareSourceOutput"], () => require("./getSoftwarePackageSoftwareSource"));

export { GetSoftwarePackagesArgs, GetSoftwarePackagesResult, GetSoftwarePackagesOutputArgs } from "./getSoftwarePackages";
export const getSoftwarePackages: typeof import("./getSoftwarePackages").getSoftwarePackages = null as any;
export const getSoftwarePackagesOutput: typeof import("./getSoftwarePackages").getSoftwarePackagesOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwarePackages","getSoftwarePackagesOutput"], () => require("./getSoftwarePackages"));

export { GetSoftwareSourceArgs, GetSoftwareSourceResult, GetSoftwareSourceOutputArgs } from "./getSoftwareSource";
export const getSoftwareSource: typeof import("./getSoftwareSource").getSoftwareSource = null as any;
export const getSoftwareSourceOutput: typeof import("./getSoftwareSource").getSoftwareSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSource","getSoftwareSourceOutput"], () => require("./getSoftwareSource"));

export { GetSoftwareSourceAvailableSoftwarePackagesArgs, GetSoftwareSourceAvailableSoftwarePackagesResult, GetSoftwareSourceAvailableSoftwarePackagesOutputArgs } from "./getSoftwareSourceAvailableSoftwarePackages";
export const getSoftwareSourceAvailableSoftwarePackages: typeof import("./getSoftwareSourceAvailableSoftwarePackages").getSoftwareSourceAvailableSoftwarePackages = null as any;
export const getSoftwareSourceAvailableSoftwarePackagesOutput: typeof import("./getSoftwareSourceAvailableSoftwarePackages").getSoftwareSourceAvailableSoftwarePackagesOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceAvailableSoftwarePackages","getSoftwareSourceAvailableSoftwarePackagesOutput"], () => require("./getSoftwareSourceAvailableSoftwarePackages"));

export { GetSoftwareSourceManifestArgs, GetSoftwareSourceManifestResult, GetSoftwareSourceManifestOutputArgs } from "./getSoftwareSourceManifest";
export const getSoftwareSourceManifest: typeof import("./getSoftwareSourceManifest").getSoftwareSourceManifest = null as any;
export const getSoftwareSourceManifestOutput: typeof import("./getSoftwareSourceManifest").getSoftwareSourceManifestOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceManifest","getSoftwareSourceManifestOutput"], () => require("./getSoftwareSourceManifest"));

export { GetSoftwareSourceModuleStreamArgs, GetSoftwareSourceModuleStreamResult, GetSoftwareSourceModuleStreamOutputArgs } from "./getSoftwareSourceModuleStream";
export const getSoftwareSourceModuleStream: typeof import("./getSoftwareSourceModuleStream").getSoftwareSourceModuleStream = null as any;
export const getSoftwareSourceModuleStreamOutput: typeof import("./getSoftwareSourceModuleStream").getSoftwareSourceModuleStreamOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceModuleStream","getSoftwareSourceModuleStreamOutput"], () => require("./getSoftwareSourceModuleStream"));

export { GetSoftwareSourceModuleStreamProfileArgs, GetSoftwareSourceModuleStreamProfileResult, GetSoftwareSourceModuleStreamProfileOutputArgs } from "./getSoftwareSourceModuleStreamProfile";
export const getSoftwareSourceModuleStreamProfile: typeof import("./getSoftwareSourceModuleStreamProfile").getSoftwareSourceModuleStreamProfile = null as any;
export const getSoftwareSourceModuleStreamProfileOutput: typeof import("./getSoftwareSourceModuleStreamProfile").getSoftwareSourceModuleStreamProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceModuleStreamProfile","getSoftwareSourceModuleStreamProfileOutput"], () => require("./getSoftwareSourceModuleStreamProfile"));

export { GetSoftwareSourceModuleStreamProfilesArgs, GetSoftwareSourceModuleStreamProfilesResult, GetSoftwareSourceModuleStreamProfilesOutputArgs } from "./getSoftwareSourceModuleStreamProfiles";
export const getSoftwareSourceModuleStreamProfiles: typeof import("./getSoftwareSourceModuleStreamProfiles").getSoftwareSourceModuleStreamProfiles = null as any;
export const getSoftwareSourceModuleStreamProfilesOutput: typeof import("./getSoftwareSourceModuleStreamProfiles").getSoftwareSourceModuleStreamProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceModuleStreamProfiles","getSoftwareSourceModuleStreamProfilesOutput"], () => require("./getSoftwareSourceModuleStreamProfiles"));

export { GetSoftwareSourceModuleStreamsArgs, GetSoftwareSourceModuleStreamsResult, GetSoftwareSourceModuleStreamsOutputArgs } from "./getSoftwareSourceModuleStreams";
export const getSoftwareSourceModuleStreams: typeof import("./getSoftwareSourceModuleStreams").getSoftwareSourceModuleStreams = null as any;
export const getSoftwareSourceModuleStreamsOutput: typeof import("./getSoftwareSourceModuleStreams").getSoftwareSourceModuleStreamsOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceModuleStreams","getSoftwareSourceModuleStreamsOutput"], () => require("./getSoftwareSourceModuleStreams"));

export { GetSoftwareSourcePackageGroupArgs, GetSoftwareSourcePackageGroupResult, GetSoftwareSourcePackageGroupOutputArgs } from "./getSoftwareSourcePackageGroup";
export const getSoftwareSourcePackageGroup: typeof import("./getSoftwareSourcePackageGroup").getSoftwareSourcePackageGroup = null as any;
export const getSoftwareSourcePackageGroupOutput: typeof import("./getSoftwareSourcePackageGroup").getSoftwareSourcePackageGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourcePackageGroup","getSoftwareSourcePackageGroupOutput"], () => require("./getSoftwareSourcePackageGroup"));

export { GetSoftwareSourcePackageGroupsArgs, GetSoftwareSourcePackageGroupsResult, GetSoftwareSourcePackageGroupsOutputArgs } from "./getSoftwareSourcePackageGroups";
export const getSoftwareSourcePackageGroups: typeof import("./getSoftwareSourcePackageGroups").getSoftwareSourcePackageGroups = null as any;
export const getSoftwareSourcePackageGroupsOutput: typeof import("./getSoftwareSourcePackageGroups").getSoftwareSourcePackageGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourcePackageGroups","getSoftwareSourcePackageGroupsOutput"], () => require("./getSoftwareSourcePackageGroups"));

export { GetSoftwareSourceSoftwarePackageArgs, GetSoftwareSourceSoftwarePackageResult, GetSoftwareSourceSoftwarePackageOutputArgs } from "./getSoftwareSourceSoftwarePackage";
export const getSoftwareSourceSoftwarePackage: typeof import("./getSoftwareSourceSoftwarePackage").getSoftwareSourceSoftwarePackage = null as any;
export const getSoftwareSourceSoftwarePackageOutput: typeof import("./getSoftwareSourceSoftwarePackage").getSoftwareSourceSoftwarePackageOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceSoftwarePackage","getSoftwareSourceSoftwarePackageOutput"], () => require("./getSoftwareSourceSoftwarePackage"));

export { GetSoftwareSourceSoftwarePackagesArgs, GetSoftwareSourceSoftwarePackagesResult, GetSoftwareSourceSoftwarePackagesOutputArgs } from "./getSoftwareSourceSoftwarePackages";
export const getSoftwareSourceSoftwarePackages: typeof import("./getSoftwareSourceSoftwarePackages").getSoftwareSourceSoftwarePackages = null as any;
export const getSoftwareSourceSoftwarePackagesOutput: typeof import("./getSoftwareSourceSoftwarePackages").getSoftwareSourceSoftwarePackagesOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceSoftwarePackages","getSoftwareSourceSoftwarePackagesOutput"], () => require("./getSoftwareSourceSoftwarePackages"));

export { GetSoftwareSourceVendorsArgs, GetSoftwareSourceVendorsResult, GetSoftwareSourceVendorsOutputArgs } from "./getSoftwareSourceVendors";
export const getSoftwareSourceVendors: typeof import("./getSoftwareSourceVendors").getSoftwareSourceVendors = null as any;
export const getSoftwareSourceVendorsOutput: typeof import("./getSoftwareSourceVendors").getSoftwareSourceVendorsOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceVendors","getSoftwareSourceVendorsOutput"], () => require("./getSoftwareSourceVendors"));

export { GetSoftwareSourcesArgs, GetSoftwareSourcesResult, GetSoftwareSourcesOutputArgs } from "./getSoftwareSources";
export const getSoftwareSources: typeof import("./getSoftwareSources").getSoftwareSources = null as any;
export const getSoftwareSourcesOutput: typeof import("./getSoftwareSources").getSoftwareSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSources","getSoftwareSourcesOutput"], () => require("./getSoftwareSources"));

export { GetWindowsUpdateArgs, GetWindowsUpdateResult, GetWindowsUpdateOutputArgs } from "./getWindowsUpdate";
export const getWindowsUpdate: typeof import("./getWindowsUpdate").getWindowsUpdate = null as any;
export const getWindowsUpdateOutput: typeof import("./getWindowsUpdate").getWindowsUpdateOutput = null as any;
utilities.lazyLoad(exports, ["getWindowsUpdate","getWindowsUpdateOutput"], () => require("./getWindowsUpdate"));

export { GetWindowsUpdatesArgs, GetWindowsUpdatesResult, GetWindowsUpdatesOutputArgs } from "./getWindowsUpdates";
export const getWindowsUpdates: typeof import("./getWindowsUpdates").getWindowsUpdates = null as any;
export const getWindowsUpdatesOutput: typeof import("./getWindowsUpdates").getWindowsUpdatesOutput = null as any;
utilities.lazyLoad(exports, ["getWindowsUpdates","getWindowsUpdatesOutput"], () => require("./getWindowsUpdates"));

export { LifecycleEnvironmentArgs, LifecycleEnvironmentState } from "./lifecycleEnvironment";
export type LifecycleEnvironment = import("./lifecycleEnvironment").LifecycleEnvironment;
export const LifecycleEnvironment: typeof import("./lifecycleEnvironment").LifecycleEnvironment = null as any;
utilities.lazyLoad(exports, ["LifecycleEnvironment"], () => require("./lifecycleEnvironment"));

export { LifecycleStageAttachManagedInstancesManagementArgs, LifecycleStageAttachManagedInstancesManagementState } from "./lifecycleStageAttachManagedInstancesManagement";
export type LifecycleStageAttachManagedInstancesManagement = import("./lifecycleStageAttachManagedInstancesManagement").LifecycleStageAttachManagedInstancesManagement;
export const LifecycleStageAttachManagedInstancesManagement: typeof import("./lifecycleStageAttachManagedInstancesManagement").LifecycleStageAttachManagedInstancesManagement = null as any;
utilities.lazyLoad(exports, ["LifecycleStageAttachManagedInstancesManagement"], () => require("./lifecycleStageAttachManagedInstancesManagement"));

export { LifecycleStageDetachManagedInstancesManagementArgs, LifecycleStageDetachManagedInstancesManagementState } from "./lifecycleStageDetachManagedInstancesManagement";
export type LifecycleStageDetachManagedInstancesManagement = import("./lifecycleStageDetachManagedInstancesManagement").LifecycleStageDetachManagedInstancesManagement;
export const LifecycleStageDetachManagedInstancesManagement: typeof import("./lifecycleStageDetachManagedInstancesManagement").LifecycleStageDetachManagedInstancesManagement = null as any;
utilities.lazyLoad(exports, ["LifecycleStageDetachManagedInstancesManagement"], () => require("./lifecycleStageDetachManagedInstancesManagement"));

export { LifecycleStagePromoteSoftwareSourceManagementArgs, LifecycleStagePromoteSoftwareSourceManagementState } from "./lifecycleStagePromoteSoftwareSourceManagement";
export type LifecycleStagePromoteSoftwareSourceManagement = import("./lifecycleStagePromoteSoftwareSourceManagement").LifecycleStagePromoteSoftwareSourceManagement;
export const LifecycleStagePromoteSoftwareSourceManagement: typeof import("./lifecycleStagePromoteSoftwareSourceManagement").LifecycleStagePromoteSoftwareSourceManagement = null as any;
utilities.lazyLoad(exports, ["LifecycleStagePromoteSoftwareSourceManagement"], () => require("./lifecycleStagePromoteSoftwareSourceManagement"));

export { LifecycleStageRebootManagementArgs, LifecycleStageRebootManagementState } from "./lifecycleStageRebootManagement";
export type LifecycleStageRebootManagement = import("./lifecycleStageRebootManagement").LifecycleStageRebootManagement;
export const LifecycleStageRebootManagement: typeof import("./lifecycleStageRebootManagement").LifecycleStageRebootManagement = null as any;
utilities.lazyLoad(exports, ["LifecycleStageRebootManagement"], () => require("./lifecycleStageRebootManagement"));

export { ManagedInstanceArgs, ManagedInstanceState } from "./managedInstance";
export type ManagedInstance = import("./managedInstance").ManagedInstance;
export const ManagedInstance: typeof import("./managedInstance").ManagedInstance = null as any;
utilities.lazyLoad(exports, ["ManagedInstance"], () => require("./managedInstance"));

export { ManagedInstanceAttachProfileManagementArgs, ManagedInstanceAttachProfileManagementState } from "./managedInstanceAttachProfileManagement";
export type ManagedInstanceAttachProfileManagement = import("./managedInstanceAttachProfileManagement").ManagedInstanceAttachProfileManagement;
export const ManagedInstanceAttachProfileManagement: typeof import("./managedInstanceAttachProfileManagement").ManagedInstanceAttachProfileManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceAttachProfileManagement"], () => require("./managedInstanceAttachProfileManagement"));

export { ManagedInstanceDetachProfileManagementArgs, ManagedInstanceDetachProfileManagementState } from "./managedInstanceDetachProfileManagement";
export type ManagedInstanceDetachProfileManagement = import("./managedInstanceDetachProfileManagement").ManagedInstanceDetachProfileManagement;
export const ManagedInstanceDetachProfileManagement: typeof import("./managedInstanceDetachProfileManagement").ManagedInstanceDetachProfileManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceDetachProfileManagement"], () => require("./managedInstanceDetachProfileManagement"));

export { ManagedInstanceGroupArgs, ManagedInstanceGroupState } from "./managedInstanceGroup";
export type ManagedInstanceGroup = import("./managedInstanceGroup").ManagedInstanceGroup;
export const ManagedInstanceGroup: typeof import("./managedInstanceGroup").ManagedInstanceGroup = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceGroup"], () => require("./managedInstanceGroup"));

export { ManagedInstanceGroupAttachManagedInstancesManagementArgs, ManagedInstanceGroupAttachManagedInstancesManagementState } from "./managedInstanceGroupAttachManagedInstancesManagement";
export type ManagedInstanceGroupAttachManagedInstancesManagement = import("./managedInstanceGroupAttachManagedInstancesManagement").ManagedInstanceGroupAttachManagedInstancesManagement;
export const ManagedInstanceGroupAttachManagedInstancesManagement: typeof import("./managedInstanceGroupAttachManagedInstancesManagement").ManagedInstanceGroupAttachManagedInstancesManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceGroupAttachManagedInstancesManagement"], () => require("./managedInstanceGroupAttachManagedInstancesManagement"));

export { ManagedInstanceGroupAttachSoftwareSourcesManagementArgs, ManagedInstanceGroupAttachSoftwareSourcesManagementState } from "./managedInstanceGroupAttachSoftwareSourcesManagement";
export type ManagedInstanceGroupAttachSoftwareSourcesManagement = import("./managedInstanceGroupAttachSoftwareSourcesManagement").ManagedInstanceGroupAttachSoftwareSourcesManagement;
export const ManagedInstanceGroupAttachSoftwareSourcesManagement: typeof import("./managedInstanceGroupAttachSoftwareSourcesManagement").ManagedInstanceGroupAttachSoftwareSourcesManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceGroupAttachSoftwareSourcesManagement"], () => require("./managedInstanceGroupAttachSoftwareSourcesManagement"));

export { ManagedInstanceGroupDetachManagedInstancesManagementArgs, ManagedInstanceGroupDetachManagedInstancesManagementState } from "./managedInstanceGroupDetachManagedInstancesManagement";
export type ManagedInstanceGroupDetachManagedInstancesManagement = import("./managedInstanceGroupDetachManagedInstancesManagement").ManagedInstanceGroupDetachManagedInstancesManagement;
export const ManagedInstanceGroupDetachManagedInstancesManagement: typeof import("./managedInstanceGroupDetachManagedInstancesManagement").ManagedInstanceGroupDetachManagedInstancesManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceGroupDetachManagedInstancesManagement"], () => require("./managedInstanceGroupDetachManagedInstancesManagement"));

export { ManagedInstanceGroupDetachSoftwareSourcesManagementArgs, ManagedInstanceGroupDetachSoftwareSourcesManagementState } from "./managedInstanceGroupDetachSoftwareSourcesManagement";
export type ManagedInstanceGroupDetachSoftwareSourcesManagement = import("./managedInstanceGroupDetachSoftwareSourcesManagement").ManagedInstanceGroupDetachSoftwareSourcesManagement;
export const ManagedInstanceGroupDetachSoftwareSourcesManagement: typeof import("./managedInstanceGroupDetachSoftwareSourcesManagement").ManagedInstanceGroupDetachSoftwareSourcesManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceGroupDetachSoftwareSourcesManagement"], () => require("./managedInstanceGroupDetachSoftwareSourcesManagement"));

export { ManagedInstanceGroupInstallPackagesManagementArgs, ManagedInstanceGroupInstallPackagesManagementState } from "./managedInstanceGroupInstallPackagesManagement";
export type ManagedInstanceGroupInstallPackagesManagement = import("./managedInstanceGroupInstallPackagesManagement").ManagedInstanceGroupInstallPackagesManagement;
export const ManagedInstanceGroupInstallPackagesManagement: typeof import("./managedInstanceGroupInstallPackagesManagement").ManagedInstanceGroupInstallPackagesManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceGroupInstallPackagesManagement"], () => require("./managedInstanceGroupInstallPackagesManagement"));

export { ManagedInstanceGroupInstallWindowsUpdatesManagementArgs, ManagedInstanceGroupInstallWindowsUpdatesManagementState } from "./managedInstanceGroupInstallWindowsUpdatesManagement";
export type ManagedInstanceGroupInstallWindowsUpdatesManagement = import("./managedInstanceGroupInstallWindowsUpdatesManagement").ManagedInstanceGroupInstallWindowsUpdatesManagement;
export const ManagedInstanceGroupInstallWindowsUpdatesManagement: typeof import("./managedInstanceGroupInstallWindowsUpdatesManagement").ManagedInstanceGroupInstallWindowsUpdatesManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceGroupInstallWindowsUpdatesManagement"], () => require("./managedInstanceGroupInstallWindowsUpdatesManagement"));

export { ManagedInstanceGroupManageModuleStreamsManagementArgs, ManagedInstanceGroupManageModuleStreamsManagementState } from "./managedInstanceGroupManageModuleStreamsManagement";
export type ManagedInstanceGroupManageModuleStreamsManagement = import("./managedInstanceGroupManageModuleStreamsManagement").ManagedInstanceGroupManageModuleStreamsManagement;
export const ManagedInstanceGroupManageModuleStreamsManagement: typeof import("./managedInstanceGroupManageModuleStreamsManagement").ManagedInstanceGroupManageModuleStreamsManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceGroupManageModuleStreamsManagement"], () => require("./managedInstanceGroupManageModuleStreamsManagement"));

export { ManagedInstanceGroupRebootManagementArgs, ManagedInstanceGroupRebootManagementState } from "./managedInstanceGroupRebootManagement";
export type ManagedInstanceGroupRebootManagement = import("./managedInstanceGroupRebootManagement").ManagedInstanceGroupRebootManagement;
export const ManagedInstanceGroupRebootManagement: typeof import("./managedInstanceGroupRebootManagement").ManagedInstanceGroupRebootManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceGroupRebootManagement"], () => require("./managedInstanceGroupRebootManagement"));

export { ManagedInstanceGroupRemovePackagesManagementArgs, ManagedInstanceGroupRemovePackagesManagementState } from "./managedInstanceGroupRemovePackagesManagement";
export type ManagedInstanceGroupRemovePackagesManagement = import("./managedInstanceGroupRemovePackagesManagement").ManagedInstanceGroupRemovePackagesManagement;
export const ManagedInstanceGroupRemovePackagesManagement: typeof import("./managedInstanceGroupRemovePackagesManagement").ManagedInstanceGroupRemovePackagesManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceGroupRemovePackagesManagement"], () => require("./managedInstanceGroupRemovePackagesManagement"));

export { ManagedInstanceGroupUpdateAllPackagesManagementArgs, ManagedInstanceGroupUpdateAllPackagesManagementState } from "./managedInstanceGroupUpdateAllPackagesManagement";
export type ManagedInstanceGroupUpdateAllPackagesManagement = import("./managedInstanceGroupUpdateAllPackagesManagement").ManagedInstanceGroupUpdateAllPackagesManagement;
export const ManagedInstanceGroupUpdateAllPackagesManagement: typeof import("./managedInstanceGroupUpdateAllPackagesManagement").ManagedInstanceGroupUpdateAllPackagesManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceGroupUpdateAllPackagesManagement"], () => require("./managedInstanceGroupUpdateAllPackagesManagement"));

export { ManagedInstanceInstallWindowsUpdatesManagementArgs, ManagedInstanceInstallWindowsUpdatesManagementState } from "./managedInstanceInstallWindowsUpdatesManagement";
export type ManagedInstanceInstallWindowsUpdatesManagement = import("./managedInstanceInstallWindowsUpdatesManagement").ManagedInstanceInstallWindowsUpdatesManagement;
export const ManagedInstanceInstallWindowsUpdatesManagement: typeof import("./managedInstanceInstallWindowsUpdatesManagement").ManagedInstanceInstallWindowsUpdatesManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceInstallWindowsUpdatesManagement"], () => require("./managedInstanceInstallWindowsUpdatesManagement"));

export { ManagedInstanceRebootManagementArgs, ManagedInstanceRebootManagementState } from "./managedInstanceRebootManagement";
export type ManagedInstanceRebootManagement = import("./managedInstanceRebootManagement").ManagedInstanceRebootManagement;
export const ManagedInstanceRebootManagement: typeof import("./managedInstanceRebootManagement").ManagedInstanceRebootManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceRebootManagement"], () => require("./managedInstanceRebootManagement"));

export { ManagedInstanceUpdatePackagesManagementArgs, ManagedInstanceUpdatePackagesManagementState } from "./managedInstanceUpdatePackagesManagement";
export type ManagedInstanceUpdatePackagesManagement = import("./managedInstanceUpdatePackagesManagement").ManagedInstanceUpdatePackagesManagement;
export const ManagedInstanceUpdatePackagesManagement: typeof import("./managedInstanceUpdatePackagesManagement").ManagedInstanceUpdatePackagesManagement = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceUpdatePackagesManagement"], () => require("./managedInstanceUpdatePackagesManagement"));

export { ManagementStationArgs, ManagementStationState } from "./managementStation";
export type ManagementStation = import("./managementStation").ManagementStation;
export const ManagementStation: typeof import("./managementStation").ManagementStation = null as any;
utilities.lazyLoad(exports, ["ManagementStation"], () => require("./managementStation"));

export { ManagementStationAssociateManagedInstancesManagementArgs, ManagementStationAssociateManagedInstancesManagementState } from "./managementStationAssociateManagedInstancesManagement";
export type ManagementStationAssociateManagedInstancesManagement = import("./managementStationAssociateManagedInstancesManagement").ManagementStationAssociateManagedInstancesManagement;
export const ManagementStationAssociateManagedInstancesManagement: typeof import("./managementStationAssociateManagedInstancesManagement").ManagementStationAssociateManagedInstancesManagement = null as any;
utilities.lazyLoad(exports, ["ManagementStationAssociateManagedInstancesManagement"], () => require("./managementStationAssociateManagedInstancesManagement"));

export { ManagementStationMirrorSynchronizeManagementArgs, ManagementStationMirrorSynchronizeManagementState } from "./managementStationMirrorSynchronizeManagement";
export type ManagementStationMirrorSynchronizeManagement = import("./managementStationMirrorSynchronizeManagement").ManagementStationMirrorSynchronizeManagement;
export const ManagementStationMirrorSynchronizeManagement: typeof import("./managementStationMirrorSynchronizeManagement").ManagementStationMirrorSynchronizeManagement = null as any;
utilities.lazyLoad(exports, ["ManagementStationMirrorSynchronizeManagement"], () => require("./managementStationMirrorSynchronizeManagement"));

export { ManagementStationRefreshManagementArgs, ManagementStationRefreshManagementState } from "./managementStationRefreshManagement";
export type ManagementStationRefreshManagement = import("./managementStationRefreshManagement").ManagementStationRefreshManagement;
export const ManagementStationRefreshManagement: typeof import("./managementStationRefreshManagement").ManagementStationRefreshManagement = null as any;
utilities.lazyLoad(exports, ["ManagementStationRefreshManagement"], () => require("./managementStationRefreshManagement"));

export { ManagementStationSynchronizeMirrorsManagementArgs, ManagementStationSynchronizeMirrorsManagementState } from "./managementStationSynchronizeMirrorsManagement";
export type ManagementStationSynchronizeMirrorsManagement = import("./managementStationSynchronizeMirrorsManagement").ManagementStationSynchronizeMirrorsManagement;
export const ManagementStationSynchronizeMirrorsManagement: typeof import("./managementStationSynchronizeMirrorsManagement").ManagementStationSynchronizeMirrorsManagement = null as any;
utilities.lazyLoad(exports, ["ManagementStationSynchronizeMirrorsManagement"], () => require("./managementStationSynchronizeMirrorsManagement"));

export { ProfileArgs, ProfileState } from "./profile";
export type Profile = import("./profile").Profile;
export const Profile: typeof import("./profile").Profile = null as any;
utilities.lazyLoad(exports, ["Profile"], () => require("./profile"));

export { ProfileAttachLifecycleStageManagementArgs, ProfileAttachLifecycleStageManagementState } from "./profileAttachLifecycleStageManagement";
export type ProfileAttachLifecycleStageManagement = import("./profileAttachLifecycleStageManagement").ProfileAttachLifecycleStageManagement;
export const ProfileAttachLifecycleStageManagement: typeof import("./profileAttachLifecycleStageManagement").ProfileAttachLifecycleStageManagement = null as any;
utilities.lazyLoad(exports, ["ProfileAttachLifecycleStageManagement"], () => require("./profileAttachLifecycleStageManagement"));

export { ProfileAttachManagedInstanceGroupManagementArgs, ProfileAttachManagedInstanceGroupManagementState } from "./profileAttachManagedInstanceGroupManagement";
export type ProfileAttachManagedInstanceGroupManagement = import("./profileAttachManagedInstanceGroupManagement").ProfileAttachManagedInstanceGroupManagement;
export const ProfileAttachManagedInstanceGroupManagement: typeof import("./profileAttachManagedInstanceGroupManagement").ProfileAttachManagedInstanceGroupManagement = null as any;
utilities.lazyLoad(exports, ["ProfileAttachManagedInstanceGroupManagement"], () => require("./profileAttachManagedInstanceGroupManagement"));

export { ProfileAttachManagementStationManagementArgs, ProfileAttachManagementStationManagementState } from "./profileAttachManagementStationManagement";
export type ProfileAttachManagementStationManagement = import("./profileAttachManagementStationManagement").ProfileAttachManagementStationManagement;
export const ProfileAttachManagementStationManagement: typeof import("./profileAttachManagementStationManagement").ProfileAttachManagementStationManagement = null as any;
utilities.lazyLoad(exports, ["ProfileAttachManagementStationManagement"], () => require("./profileAttachManagementStationManagement"));

export { ProfileAttachSoftwareSourcesManagementArgs, ProfileAttachSoftwareSourcesManagementState } from "./profileAttachSoftwareSourcesManagement";
export type ProfileAttachSoftwareSourcesManagement = import("./profileAttachSoftwareSourcesManagement").ProfileAttachSoftwareSourcesManagement;
export const ProfileAttachSoftwareSourcesManagement: typeof import("./profileAttachSoftwareSourcesManagement").ProfileAttachSoftwareSourcesManagement = null as any;
utilities.lazyLoad(exports, ["ProfileAttachSoftwareSourcesManagement"], () => require("./profileAttachSoftwareSourcesManagement"));

export { ProfileDetachSoftwareSourcesManagementArgs, ProfileDetachSoftwareSourcesManagementState } from "./profileDetachSoftwareSourcesManagement";
export type ProfileDetachSoftwareSourcesManagement = import("./profileDetachSoftwareSourcesManagement").ProfileDetachSoftwareSourcesManagement;
export const ProfileDetachSoftwareSourcesManagement: typeof import("./profileDetachSoftwareSourcesManagement").ProfileDetachSoftwareSourcesManagement = null as any;
utilities.lazyLoad(exports, ["ProfileDetachSoftwareSourcesManagement"], () => require("./profileDetachSoftwareSourcesManagement"));

export { ScheduledJobArgs, ScheduledJobState } from "./scheduledJob";
export type ScheduledJob = import("./scheduledJob").ScheduledJob;
export const ScheduledJob: typeof import("./scheduledJob").ScheduledJob = null as any;
utilities.lazyLoad(exports, ["ScheduledJob"], () => require("./scheduledJob"));

export { SoftwareSourceArgs, SoftwareSourceState } from "./softwareSource";
export type SoftwareSource = import("./softwareSource").SoftwareSource;
export const SoftwareSource: typeof import("./softwareSource").SoftwareSource = null as any;
utilities.lazyLoad(exports, ["SoftwareSource"], () => require("./softwareSource"));

export { SoftwareSourceAddPackagesManagementArgs, SoftwareSourceAddPackagesManagementState } from "./softwareSourceAddPackagesManagement";
export type SoftwareSourceAddPackagesManagement = import("./softwareSourceAddPackagesManagement").SoftwareSourceAddPackagesManagement;
export const SoftwareSourceAddPackagesManagement: typeof import("./softwareSourceAddPackagesManagement").SoftwareSourceAddPackagesManagement = null as any;
utilities.lazyLoad(exports, ["SoftwareSourceAddPackagesManagement"], () => require("./softwareSourceAddPackagesManagement"));

export { SoftwareSourceChangeAvailabilityManagementArgs, SoftwareSourceChangeAvailabilityManagementState } from "./softwareSourceChangeAvailabilityManagement";
export type SoftwareSourceChangeAvailabilityManagement = import("./softwareSourceChangeAvailabilityManagement").SoftwareSourceChangeAvailabilityManagement;
export const SoftwareSourceChangeAvailabilityManagement: typeof import("./softwareSourceChangeAvailabilityManagement").SoftwareSourceChangeAvailabilityManagement = null as any;
utilities.lazyLoad(exports, ["SoftwareSourceChangeAvailabilityManagement"], () => require("./softwareSourceChangeAvailabilityManagement"));

export { SoftwareSourceGenerateMetadataManagementArgs, SoftwareSourceGenerateMetadataManagementState } from "./softwareSourceGenerateMetadataManagement";
export type SoftwareSourceGenerateMetadataManagement = import("./softwareSourceGenerateMetadataManagement").SoftwareSourceGenerateMetadataManagement;
export const SoftwareSourceGenerateMetadataManagement: typeof import("./softwareSourceGenerateMetadataManagement").SoftwareSourceGenerateMetadataManagement = null as any;
utilities.lazyLoad(exports, ["SoftwareSourceGenerateMetadataManagement"], () => require("./softwareSourceGenerateMetadataManagement"));

export { SoftwareSourceManifestArgs, SoftwareSourceManifestState } from "./softwareSourceManifest";
export type SoftwareSourceManifest = import("./softwareSourceManifest").SoftwareSourceManifest;
export const SoftwareSourceManifest: typeof import("./softwareSourceManifest").SoftwareSourceManifest = null as any;
utilities.lazyLoad(exports, ["SoftwareSourceManifest"], () => require("./softwareSourceManifest"));

export { SoftwareSourceRemovePackagesManagementArgs, SoftwareSourceRemovePackagesManagementState } from "./softwareSourceRemovePackagesManagement";
export type SoftwareSourceRemovePackagesManagement = import("./softwareSourceRemovePackagesManagement").SoftwareSourceRemovePackagesManagement;
export const SoftwareSourceRemovePackagesManagement: typeof import("./softwareSourceRemovePackagesManagement").SoftwareSourceRemovePackagesManagement = null as any;
utilities.lazyLoad(exports, ["SoftwareSourceRemovePackagesManagement"], () => require("./softwareSourceRemovePackagesManagement"));

export { SoftwareSourceReplacePackagesManagementArgs, SoftwareSourceReplacePackagesManagementState } from "./softwareSourceReplacePackagesManagement";
export type SoftwareSourceReplacePackagesManagement = import("./softwareSourceReplacePackagesManagement").SoftwareSourceReplacePackagesManagement;
export const SoftwareSourceReplacePackagesManagement: typeof import("./softwareSourceReplacePackagesManagement").SoftwareSourceReplacePackagesManagement = null as any;
utilities.lazyLoad(exports, ["SoftwareSourceReplacePackagesManagement"], () => require("./softwareSourceReplacePackagesManagement"));

export { WorkRequestRerunManagementArgs, WorkRequestRerunManagementState } from "./workRequestRerunManagement";
export type WorkRequestRerunManagement = import("./workRequestRerunManagement").WorkRequestRerunManagement;
export const WorkRequestRerunManagement: typeof import("./workRequestRerunManagement").WorkRequestRerunManagement = null as any;
utilities.lazyLoad(exports, ["WorkRequestRerunManagement"], () => require("./workRequestRerunManagement"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:OsManagementHub/event:Event":
                return new Event(name, <any>undefined, { urn })
            case "oci:OsManagementHub/lifecycleEnvironment:LifecycleEnvironment":
                return new LifecycleEnvironment(name, <any>undefined, { urn })
            case "oci:OsManagementHub/lifecycleStageAttachManagedInstancesManagement:LifecycleStageAttachManagedInstancesManagement":
                return new LifecycleStageAttachManagedInstancesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/lifecycleStageDetachManagedInstancesManagement:LifecycleStageDetachManagedInstancesManagement":
                return new LifecycleStageDetachManagedInstancesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/lifecycleStagePromoteSoftwareSourceManagement:LifecycleStagePromoteSoftwareSourceManagement":
                return new LifecycleStagePromoteSoftwareSourceManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/lifecycleStageRebootManagement:LifecycleStageRebootManagement":
                return new LifecycleStageRebootManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstance:ManagedInstance":
                return new ManagedInstance(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceAttachProfileManagement:ManagedInstanceAttachProfileManagement":
                return new ManagedInstanceAttachProfileManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceDetachProfileManagement:ManagedInstanceDetachProfileManagement":
                return new ManagedInstanceDetachProfileManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceGroup:ManagedInstanceGroup":
                return new ManagedInstanceGroup(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceGroupAttachManagedInstancesManagement:ManagedInstanceGroupAttachManagedInstancesManagement":
                return new ManagedInstanceGroupAttachManagedInstancesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceGroupAttachSoftwareSourcesManagement:ManagedInstanceGroupAttachSoftwareSourcesManagement":
                return new ManagedInstanceGroupAttachSoftwareSourcesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceGroupDetachManagedInstancesManagement:ManagedInstanceGroupDetachManagedInstancesManagement":
                return new ManagedInstanceGroupDetachManagedInstancesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceGroupDetachSoftwareSourcesManagement:ManagedInstanceGroupDetachSoftwareSourcesManagement":
                return new ManagedInstanceGroupDetachSoftwareSourcesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceGroupInstallPackagesManagement:ManagedInstanceGroupInstallPackagesManagement":
                return new ManagedInstanceGroupInstallPackagesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceGroupInstallWindowsUpdatesManagement:ManagedInstanceGroupInstallWindowsUpdatesManagement":
                return new ManagedInstanceGroupInstallWindowsUpdatesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceGroupManageModuleStreamsManagement:ManagedInstanceGroupManageModuleStreamsManagement":
                return new ManagedInstanceGroupManageModuleStreamsManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceGroupRebootManagement:ManagedInstanceGroupRebootManagement":
                return new ManagedInstanceGroupRebootManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceGroupRemovePackagesManagement:ManagedInstanceGroupRemovePackagesManagement":
                return new ManagedInstanceGroupRemovePackagesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceGroupUpdateAllPackagesManagement:ManagedInstanceGroupUpdateAllPackagesManagement":
                return new ManagedInstanceGroupUpdateAllPackagesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceInstallWindowsUpdatesManagement:ManagedInstanceInstallWindowsUpdatesManagement":
                return new ManagedInstanceInstallWindowsUpdatesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceRebootManagement:ManagedInstanceRebootManagement":
                return new ManagedInstanceRebootManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceUpdatePackagesManagement:ManagedInstanceUpdatePackagesManagement":
                return new ManagedInstanceUpdatePackagesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managementStation:ManagementStation":
                return new ManagementStation(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managementStationAssociateManagedInstancesManagement:ManagementStationAssociateManagedInstancesManagement":
                return new ManagementStationAssociateManagedInstancesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managementStationMirrorSynchronizeManagement:ManagementStationMirrorSynchronizeManagement":
                return new ManagementStationMirrorSynchronizeManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managementStationRefreshManagement:ManagementStationRefreshManagement":
                return new ManagementStationRefreshManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managementStationSynchronizeMirrorsManagement:ManagementStationSynchronizeMirrorsManagement":
                return new ManagementStationSynchronizeMirrorsManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/profile:Profile":
                return new Profile(name, <any>undefined, { urn })
            case "oci:OsManagementHub/profileAttachLifecycleStageManagement:ProfileAttachLifecycleStageManagement":
                return new ProfileAttachLifecycleStageManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/profileAttachManagedInstanceGroupManagement:ProfileAttachManagedInstanceGroupManagement":
                return new ProfileAttachManagedInstanceGroupManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/profileAttachManagementStationManagement:ProfileAttachManagementStationManagement":
                return new ProfileAttachManagementStationManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/profileAttachSoftwareSourcesManagement:ProfileAttachSoftwareSourcesManagement":
                return new ProfileAttachSoftwareSourcesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/profileDetachSoftwareSourcesManagement:ProfileDetachSoftwareSourcesManagement":
                return new ProfileDetachSoftwareSourcesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/scheduledJob:ScheduledJob":
                return new ScheduledJob(name, <any>undefined, { urn })
            case "oci:OsManagementHub/softwareSource:SoftwareSource":
                return new SoftwareSource(name, <any>undefined, { urn })
            case "oci:OsManagementHub/softwareSourceAddPackagesManagement:SoftwareSourceAddPackagesManagement":
                return new SoftwareSourceAddPackagesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/softwareSourceChangeAvailabilityManagement:SoftwareSourceChangeAvailabilityManagement":
                return new SoftwareSourceChangeAvailabilityManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/softwareSourceGenerateMetadataManagement:SoftwareSourceGenerateMetadataManagement":
                return new SoftwareSourceGenerateMetadataManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/softwareSourceManifest:SoftwareSourceManifest":
                return new SoftwareSourceManifest(name, <any>undefined, { urn })
            case "oci:OsManagementHub/softwareSourceRemovePackagesManagement:SoftwareSourceRemovePackagesManagement":
                return new SoftwareSourceRemovePackagesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/softwareSourceReplacePackagesManagement:SoftwareSourceReplacePackagesManagement":
                return new SoftwareSourceReplacePackagesManagement(name, <any>undefined, { urn })
            case "oci:OsManagementHub/workRequestRerunManagement:WorkRequestRerunManagement":
                return new WorkRequestRerunManagement(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/event", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/lifecycleEnvironment", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/lifecycleStageAttachManagedInstancesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/lifecycleStageDetachManagedInstancesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/lifecycleStagePromoteSoftwareSourceManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/lifecycleStageRebootManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstance", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceAttachProfileManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceDetachProfileManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceGroup", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceGroupAttachManagedInstancesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceGroupAttachSoftwareSourcesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceGroupDetachManagedInstancesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceGroupDetachSoftwareSourcesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceGroupInstallPackagesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceGroupInstallWindowsUpdatesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceGroupManageModuleStreamsManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceGroupRebootManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceGroupRemovePackagesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceGroupUpdateAllPackagesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceInstallWindowsUpdatesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceRebootManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceUpdatePackagesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managementStation", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managementStationAssociateManagedInstancesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managementStationMirrorSynchronizeManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managementStationRefreshManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managementStationSynchronizeMirrorsManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/profile", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/profileAttachLifecycleStageManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/profileAttachManagedInstanceGroupManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/profileAttachManagementStationManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/profileAttachSoftwareSourcesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/profileDetachSoftwareSourcesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/scheduledJob", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/softwareSource", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/softwareSourceAddPackagesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/softwareSourceChangeAvailabilityManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/softwareSourceGenerateMetadataManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/softwareSourceManifest", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/softwareSourceRemovePackagesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/softwareSourceReplacePackagesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/workRequestRerunManagement", _module)
