// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetLifecycleEnvironmentArgs, GetLifecycleEnvironmentResult, GetLifecycleEnvironmentOutputArgs } from "./getLifecycleEnvironment";
export const getLifecycleEnvironment: typeof import("./getLifecycleEnvironment").getLifecycleEnvironment = null as any;
export const getLifecycleEnvironmentOutput: typeof import("./getLifecycleEnvironment").getLifecycleEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getLifecycleEnvironment","getLifecycleEnvironmentOutput"], () => require("./getLifecycleEnvironment"));

export { GetLifecycleEnvironmentsArgs, GetLifecycleEnvironmentsResult, GetLifecycleEnvironmentsOutputArgs } from "./getLifecycleEnvironments";
export const getLifecycleEnvironments: typeof import("./getLifecycleEnvironments").getLifecycleEnvironments = null as any;
export const getLifecycleEnvironmentsOutput: typeof import("./getLifecycleEnvironments").getLifecycleEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getLifecycleEnvironments","getLifecycleEnvironmentsOutput"], () => require("./getLifecycleEnvironments"));

export { GetLifecycleStageArgs, GetLifecycleStageResult, GetLifecycleStageOutputArgs } from "./getLifecycleStage";
export const getLifecycleStage: typeof import("./getLifecycleStage").getLifecycleStage = null as any;
export const getLifecycleStageOutput: typeof import("./getLifecycleStage").getLifecycleStageOutput = null as any;
utilities.lazyLoad(exports, ["getLifecycleStage","getLifecycleStageOutput"], () => require("./getLifecycleStage"));

export { GetLifecycleStagesArgs, GetLifecycleStagesResult, GetLifecycleStagesOutputArgs } from "./getLifecycleStages";
export const getLifecycleStages: typeof import("./getLifecycleStages").getLifecycleStages = null as any;
export const getLifecycleStagesOutput: typeof import("./getLifecycleStages").getLifecycleStagesOutput = null as any;
utilities.lazyLoad(exports, ["getLifecycleStages","getLifecycleStagesOutput"], () => require("./getLifecycleStages"));

export { GetManagedInstanceGroupArgs, GetManagedInstanceGroupResult, GetManagedInstanceGroupOutputArgs } from "./getManagedInstanceGroup";
export const getManagedInstanceGroup: typeof import("./getManagedInstanceGroup").getManagedInstanceGroup = null as any;
export const getManagedInstanceGroupOutput: typeof import("./getManagedInstanceGroup").getManagedInstanceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceGroup","getManagedInstanceGroupOutput"], () => require("./getManagedInstanceGroup"));

export { GetManagedInstanceGroupAvailableModulesArgs, GetManagedInstanceGroupAvailableModulesResult, GetManagedInstanceGroupAvailableModulesOutputArgs } from "./getManagedInstanceGroupAvailableModules";
export const getManagedInstanceGroupAvailableModules: typeof import("./getManagedInstanceGroupAvailableModules").getManagedInstanceGroupAvailableModules = null as any;
export const getManagedInstanceGroupAvailableModulesOutput: typeof import("./getManagedInstanceGroupAvailableModules").getManagedInstanceGroupAvailableModulesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceGroupAvailableModules","getManagedInstanceGroupAvailableModulesOutput"], () => require("./getManagedInstanceGroupAvailableModules"));

export { GetManagedInstanceGroupAvailablePackagesArgs, GetManagedInstanceGroupAvailablePackagesResult, GetManagedInstanceGroupAvailablePackagesOutputArgs } from "./getManagedInstanceGroupAvailablePackages";
export const getManagedInstanceGroupAvailablePackages: typeof import("./getManagedInstanceGroupAvailablePackages").getManagedInstanceGroupAvailablePackages = null as any;
export const getManagedInstanceGroupAvailablePackagesOutput: typeof import("./getManagedInstanceGroupAvailablePackages").getManagedInstanceGroupAvailablePackagesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceGroupAvailablePackages","getManagedInstanceGroupAvailablePackagesOutput"], () => require("./getManagedInstanceGroupAvailablePackages"));

export { GetManagedInstanceGroupAvailableSoftwareSourcesArgs, GetManagedInstanceGroupAvailableSoftwareSourcesResult, GetManagedInstanceGroupAvailableSoftwareSourcesOutputArgs } from "./getManagedInstanceGroupAvailableSoftwareSources";
export const getManagedInstanceGroupAvailableSoftwareSources: typeof import("./getManagedInstanceGroupAvailableSoftwareSources").getManagedInstanceGroupAvailableSoftwareSources = null as any;
export const getManagedInstanceGroupAvailableSoftwareSourcesOutput: typeof import("./getManagedInstanceGroupAvailableSoftwareSources").getManagedInstanceGroupAvailableSoftwareSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceGroupAvailableSoftwareSources","getManagedInstanceGroupAvailableSoftwareSourcesOutput"], () => require("./getManagedInstanceGroupAvailableSoftwareSources"));

export { GetManagedInstanceGroupsArgs, GetManagedInstanceGroupsResult, GetManagedInstanceGroupsOutputArgs } from "./getManagedInstanceGroups";
export const getManagedInstanceGroups: typeof import("./getManagedInstanceGroups").getManagedInstanceGroups = null as any;
export const getManagedInstanceGroupsOutput: typeof import("./getManagedInstanceGroups").getManagedInstanceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getManagedInstanceGroups","getManagedInstanceGroupsOutput"], () => require("./getManagedInstanceGroups"));

export { GetManagementStationArgs, GetManagementStationResult, GetManagementStationOutputArgs } from "./getManagementStation";
export const getManagementStation: typeof import("./getManagementStation").getManagementStation = null as any;
export const getManagementStationOutput: typeof import("./getManagementStation").getManagementStationOutput = null as any;
utilities.lazyLoad(exports, ["getManagementStation","getManagementStationOutput"], () => require("./getManagementStation"));

export { GetManagementStationMirrorsArgs, GetManagementStationMirrorsResult, GetManagementStationMirrorsOutputArgs } from "./getManagementStationMirrors";
export const getManagementStationMirrors: typeof import("./getManagementStationMirrors").getManagementStationMirrors = null as any;
export const getManagementStationMirrorsOutput: typeof import("./getManagementStationMirrors").getManagementStationMirrorsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementStationMirrors","getManagementStationMirrorsOutput"], () => require("./getManagementStationMirrors"));

export { GetManagementStationsArgs, GetManagementStationsResult, GetManagementStationsOutputArgs } from "./getManagementStations";
export const getManagementStations: typeof import("./getManagementStations").getManagementStations = null as any;
export const getManagementStationsOutput: typeof import("./getManagementStations").getManagementStationsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementStations","getManagementStationsOutput"], () => require("./getManagementStations"));

export { GetProfileArgs, GetProfileResult, GetProfileOutputArgs } from "./getProfile";
export const getProfile: typeof import("./getProfile").getProfile = null as any;
export const getProfileOutput: typeof import("./getProfile").getProfileOutput = null as any;
utilities.lazyLoad(exports, ["getProfile","getProfileOutput"], () => require("./getProfile"));

export { GetProfilesArgs, GetProfilesResult, GetProfilesOutputArgs } from "./getProfiles";
export const getProfiles: typeof import("./getProfiles").getProfiles = null as any;
export const getProfilesOutput: typeof import("./getProfiles").getProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getProfiles","getProfilesOutput"], () => require("./getProfiles"));

export { GetSoftwareSourceArgs, GetSoftwareSourceResult, GetSoftwareSourceOutputArgs } from "./getSoftwareSource";
export const getSoftwareSource: typeof import("./getSoftwareSource").getSoftwareSource = null as any;
export const getSoftwareSourceOutput: typeof import("./getSoftwareSource").getSoftwareSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSource","getSoftwareSourceOutput"], () => require("./getSoftwareSource"));

export { GetSoftwareSourceModuleStreamArgs, GetSoftwareSourceModuleStreamResult, GetSoftwareSourceModuleStreamOutputArgs } from "./getSoftwareSourceModuleStream";
export const getSoftwareSourceModuleStream: typeof import("./getSoftwareSourceModuleStream").getSoftwareSourceModuleStream = null as any;
export const getSoftwareSourceModuleStreamOutput: typeof import("./getSoftwareSourceModuleStream").getSoftwareSourceModuleStreamOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceModuleStream","getSoftwareSourceModuleStreamOutput"], () => require("./getSoftwareSourceModuleStream"));

export { GetSoftwareSourceModuleStreamProfileArgs, GetSoftwareSourceModuleStreamProfileResult, GetSoftwareSourceModuleStreamProfileOutputArgs } from "./getSoftwareSourceModuleStreamProfile";
export const getSoftwareSourceModuleStreamProfile: typeof import("./getSoftwareSourceModuleStreamProfile").getSoftwareSourceModuleStreamProfile = null as any;
export const getSoftwareSourceModuleStreamProfileOutput: typeof import("./getSoftwareSourceModuleStreamProfile").getSoftwareSourceModuleStreamProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceModuleStreamProfile","getSoftwareSourceModuleStreamProfileOutput"], () => require("./getSoftwareSourceModuleStreamProfile"));

export { GetSoftwareSourceModuleStreamProfilesArgs, GetSoftwareSourceModuleStreamProfilesResult, GetSoftwareSourceModuleStreamProfilesOutputArgs } from "./getSoftwareSourceModuleStreamProfiles";
export const getSoftwareSourceModuleStreamProfiles: typeof import("./getSoftwareSourceModuleStreamProfiles").getSoftwareSourceModuleStreamProfiles = null as any;
export const getSoftwareSourceModuleStreamProfilesOutput: typeof import("./getSoftwareSourceModuleStreamProfiles").getSoftwareSourceModuleStreamProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceModuleStreamProfiles","getSoftwareSourceModuleStreamProfilesOutput"], () => require("./getSoftwareSourceModuleStreamProfiles"));

export { GetSoftwareSourceModuleStreamsArgs, GetSoftwareSourceModuleStreamsResult, GetSoftwareSourceModuleStreamsOutputArgs } from "./getSoftwareSourceModuleStreams";
export const getSoftwareSourceModuleStreams: typeof import("./getSoftwareSourceModuleStreams").getSoftwareSourceModuleStreams = null as any;
export const getSoftwareSourceModuleStreamsOutput: typeof import("./getSoftwareSourceModuleStreams").getSoftwareSourceModuleStreamsOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceModuleStreams","getSoftwareSourceModuleStreamsOutput"], () => require("./getSoftwareSourceModuleStreams"));

export { GetSoftwareSourcePackageGroupArgs, GetSoftwareSourcePackageGroupResult, GetSoftwareSourcePackageGroupOutputArgs } from "./getSoftwareSourcePackageGroup";
export const getSoftwareSourcePackageGroup: typeof import("./getSoftwareSourcePackageGroup").getSoftwareSourcePackageGroup = null as any;
export const getSoftwareSourcePackageGroupOutput: typeof import("./getSoftwareSourcePackageGroup").getSoftwareSourcePackageGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourcePackageGroup","getSoftwareSourcePackageGroupOutput"], () => require("./getSoftwareSourcePackageGroup"));

export { GetSoftwareSourcePackageGroupsArgs, GetSoftwareSourcePackageGroupsResult, GetSoftwareSourcePackageGroupsOutputArgs } from "./getSoftwareSourcePackageGroups";
export const getSoftwareSourcePackageGroups: typeof import("./getSoftwareSourcePackageGroups").getSoftwareSourcePackageGroups = null as any;
export const getSoftwareSourcePackageGroupsOutput: typeof import("./getSoftwareSourcePackageGroups").getSoftwareSourcePackageGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourcePackageGroups","getSoftwareSourcePackageGroupsOutput"], () => require("./getSoftwareSourcePackageGroups"));

export { GetSoftwareSourceSoftwarePackageArgs, GetSoftwareSourceSoftwarePackageResult, GetSoftwareSourceSoftwarePackageOutputArgs } from "./getSoftwareSourceSoftwarePackage";
export const getSoftwareSourceSoftwarePackage: typeof import("./getSoftwareSourceSoftwarePackage").getSoftwareSourceSoftwarePackage = null as any;
export const getSoftwareSourceSoftwarePackageOutput: typeof import("./getSoftwareSourceSoftwarePackage").getSoftwareSourceSoftwarePackageOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceSoftwarePackage","getSoftwareSourceSoftwarePackageOutput"], () => require("./getSoftwareSourceSoftwarePackage"));

export { GetSoftwareSourceSoftwarePackagesArgs, GetSoftwareSourceSoftwarePackagesResult, GetSoftwareSourceSoftwarePackagesOutputArgs } from "./getSoftwareSourceSoftwarePackages";
export const getSoftwareSourceSoftwarePackages: typeof import("./getSoftwareSourceSoftwarePackages").getSoftwareSourceSoftwarePackages = null as any;
export const getSoftwareSourceSoftwarePackagesOutput: typeof import("./getSoftwareSourceSoftwarePackages").getSoftwareSourceSoftwarePackagesOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceSoftwarePackages","getSoftwareSourceSoftwarePackagesOutput"], () => require("./getSoftwareSourceSoftwarePackages"));

export { GetSoftwareSourceVendorsArgs, GetSoftwareSourceVendorsResult, GetSoftwareSourceVendorsOutputArgs } from "./getSoftwareSourceVendors";
export const getSoftwareSourceVendors: typeof import("./getSoftwareSourceVendors").getSoftwareSourceVendors = null as any;
export const getSoftwareSourceVendorsOutput: typeof import("./getSoftwareSourceVendors").getSoftwareSourceVendorsOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSourceVendors","getSoftwareSourceVendorsOutput"], () => require("./getSoftwareSourceVendors"));

export { GetSoftwareSourcesArgs, GetSoftwareSourcesResult, GetSoftwareSourcesOutputArgs } from "./getSoftwareSources";
export const getSoftwareSources: typeof import("./getSoftwareSources").getSoftwareSources = null as any;
export const getSoftwareSourcesOutput: typeof import("./getSoftwareSources").getSoftwareSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSources","getSoftwareSourcesOutput"], () => require("./getSoftwareSources"));

export { LifecycleEnvironmentArgs, LifecycleEnvironmentState } from "./lifecycleEnvironment";
export type LifecycleEnvironment = import("./lifecycleEnvironment").LifecycleEnvironment;
export const LifecycleEnvironment: typeof import("./lifecycleEnvironment").LifecycleEnvironment = null as any;
utilities.lazyLoad(exports, ["LifecycleEnvironment"], () => require("./lifecycleEnvironment"));

export { ManagedInstanceGroupArgs, ManagedInstanceGroupState } from "./managedInstanceGroup";
export type ManagedInstanceGroup = import("./managedInstanceGroup").ManagedInstanceGroup;
export const ManagedInstanceGroup: typeof import("./managedInstanceGroup").ManagedInstanceGroup = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceGroup"], () => require("./managedInstanceGroup"));

export { ManagementStationArgs, ManagementStationState } from "./managementStation";
export type ManagementStation = import("./managementStation").ManagementStation;
export const ManagementStation: typeof import("./managementStation").ManagementStation = null as any;
utilities.lazyLoad(exports, ["ManagementStation"], () => require("./managementStation"));

export { ProfileArgs, ProfileState } from "./profile";
export type Profile = import("./profile").Profile;
export const Profile: typeof import("./profile").Profile = null as any;
utilities.lazyLoad(exports, ["Profile"], () => require("./profile"));

export { SoftwareSourceArgs, SoftwareSourceState } from "./softwareSource";
export type SoftwareSource = import("./softwareSource").SoftwareSource;
export const SoftwareSource: typeof import("./softwareSource").SoftwareSource = null as any;
utilities.lazyLoad(exports, ["SoftwareSource"], () => require("./softwareSource"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:OsManagementHub/lifecycleEnvironment:LifecycleEnvironment":
                return new LifecycleEnvironment(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managedInstanceGroup:ManagedInstanceGroup":
                return new ManagedInstanceGroup(name, <any>undefined, { urn })
            case "oci:OsManagementHub/managementStation:ManagementStation":
                return new ManagementStation(name, <any>undefined, { urn })
            case "oci:OsManagementHub/profile:Profile":
                return new Profile(name, <any>undefined, { urn })
            case "oci:OsManagementHub/softwareSource:SoftwareSource":
                return new SoftwareSource(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/lifecycleEnvironment", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managedInstanceGroup", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/managementStation", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/profile", _module)
pulumi.runtime.registerResourceModule("oci", "OsManagementHub/softwareSource", _module)
