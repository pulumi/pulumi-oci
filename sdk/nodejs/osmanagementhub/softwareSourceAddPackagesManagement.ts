// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Software Source Add Packages Management resource in Oracle Cloud Infrastructure Os Management Hub service.
 *
 * Adds packages to a software source. This operation can only be done for custom and versioned custom software sources that are not created using filters.
 * For a versioned custom software source, you can only add packages when the source is created. Once content is added to a versioned custom software source, it is immutable.
 * Packages can be of the format:
 *   * name (for example: git). If isLatestContentOnly is true, only the latest version of the package will be added, otherwise all versions of the package will be added.
 *   * name-version-release.architecture (for example: git-2.43.5-1.el8_10.x86_64)
 *   * name-epoch:version-release.architecture (for example: git-0:2.43.5-1.el8_10.x86_64)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSoftwareSourceAddPackagesManagement = new oci.osmanagementhub.SoftwareSourceAddPackagesManagement("test_software_source_add_packages_management", {
 *     packages: softwareSourceAddPackagesManagementPackages,
 *     softwareSourceId: testSoftwareSource.id,
 *     isContinueOnMissingPackages: softwareSourceAddPackagesManagementIsContinueOnMissingPackages,
 * });
 * ```
 *
 * ## Import
 *
 * SoftwareSourceAddPackagesManagement can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:OsManagementHub/softwareSourceAddPackagesManagement:SoftwareSourceAddPackagesManagement test_software_source_add_packages_management "id"
 * ```
 */
export class SoftwareSourceAddPackagesManagement extends pulumi.CustomResource {
    /**
     * Get an existing SoftwareSourceAddPackagesManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SoftwareSourceAddPackagesManagementState, opts?: pulumi.CustomResourceOptions): SoftwareSourceAddPackagesManagement {
        return new SoftwareSourceAddPackagesManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:OsManagementHub/softwareSourceAddPackagesManagement:SoftwareSourceAddPackagesManagement';

    /**
     * Returns true if the given object is an instance of SoftwareSourceAddPackagesManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SoftwareSourceAddPackagesManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SoftwareSourceAddPackagesManagement.__pulumiType;
    }

    /**
     * Indicates whether the service should generate a custom software source when the package list contains invalid values. When set to true, the service ignores any invalid packages and generates the custom software source with using the valid packages.
     */
    declare public readonly isContinueOnMissingPackages: pulumi.Output<boolean>;
    /**
     * List of packages specified by the name of the package (N) or the full package name (NVRA or NEVRA).
     */
    declare public readonly packages: pulumi.Output<string[]>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly softwareSourceId: pulumi.Output<string>;

    /**
     * Create a SoftwareSourceAddPackagesManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SoftwareSourceAddPackagesManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SoftwareSourceAddPackagesManagementArgs | SoftwareSourceAddPackagesManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SoftwareSourceAddPackagesManagementState | undefined;
            resourceInputs["isContinueOnMissingPackages"] = state?.isContinueOnMissingPackages;
            resourceInputs["packages"] = state?.packages;
            resourceInputs["softwareSourceId"] = state?.softwareSourceId;
        } else {
            const args = argsOrState as SoftwareSourceAddPackagesManagementArgs | undefined;
            if (args?.packages === undefined && !opts.urn) {
                throw new Error("Missing required property 'packages'");
            }
            if (args?.softwareSourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'softwareSourceId'");
            }
            resourceInputs["isContinueOnMissingPackages"] = args?.isContinueOnMissingPackages;
            resourceInputs["packages"] = args?.packages;
            resourceInputs["softwareSourceId"] = args?.softwareSourceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SoftwareSourceAddPackagesManagement.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SoftwareSourceAddPackagesManagement resources.
 */
export interface SoftwareSourceAddPackagesManagementState {
    /**
     * Indicates whether the service should generate a custom software source when the package list contains invalid values. When set to true, the service ignores any invalid packages and generates the custom software source with using the valid packages.
     */
    isContinueOnMissingPackages?: pulumi.Input<boolean>;
    /**
     * List of packages specified by the name of the package (N) or the full package name (NVRA or NEVRA).
     */
    packages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    softwareSourceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SoftwareSourceAddPackagesManagement resource.
 */
export interface SoftwareSourceAddPackagesManagementArgs {
    /**
     * Indicates whether the service should generate a custom software source when the package list contains invalid values. When set to true, the service ignores any invalid packages and generates the custom software source with using the valid packages.
     */
    isContinueOnMissingPackages?: pulumi.Input<boolean>;
    /**
     * List of packages specified by the name of the package (N) or the full package name (NVRA or NEVRA).
     */
    packages: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    softwareSourceId: pulumi.Input<string>;
}
