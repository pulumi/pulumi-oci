// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Configurations in Oracle Cloud Infrastructure Psql service.
 *
 * Returns a list of configurations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testConfigurations = oci.Psql.getConfigurations({
 *     compartmentId: compartmentId,
 *     configType: configurationConfigType,
 *     configurationId: testConfiguration.id,
 *     dbVersion: configurationDbVersion,
 *     displayName: configurationDisplayName,
 *     shape: configurationShape,
 *     state: configurationState,
 * });
 * ```
 */
export function getConfigurations(args?: GetConfigurationsArgs, opts?: pulumi.InvokeOptions): Promise<GetConfigurationsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Psql/getConfigurations:getConfigurations", {
        "compartmentId": args.compartmentId,
        "configType": args.configType,
        "configurationId": args.configurationId,
        "dbVersion": args.dbVersion,
        "displayName": args.displayName,
        "filters": args.filters,
        "shape": args.shape,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getConfigurations.
 */
export interface GetConfigurationsArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: string;
    /**
     * A filter to return only resources if their `configType` matches the given `configType`.
     */
    configType?: string;
    /**
     * A unique identifier for the configuration.
     */
    configurationId?: string;
    /**
     * Version of the PostgreSQL database, such as 14.9.
     */
    dbVersion?: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.Psql.GetConfigurationsFilter[];
    /**
     * The name of the shape for the configuration. Example: `VM.Standard.E4.Flex`
     */
    shape?: string;
    /**
     * A filter to return only resources if their `lifecycleState` matches the given `lifecycleState`.
     */
    state?: string;
}

/**
 * A collection of values returned by getConfigurations.
 */
export interface GetConfigurationsResult {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the configuration.
     */
    readonly compartmentId?: string;
    /**
     * The type of configuration. Either user-created or a default configuration.
     */
    readonly configType?: string;
    /**
     * The list of configuration_collection.
     */
    readonly configurationCollections: outputs.Psql.GetConfigurationsConfigurationCollection[];
    readonly configurationId?: string;
    /**
     * Version of the PostgreSQL database.
     */
    readonly dbVersion?: string;
    /**
     * A user-friendly display name for the configuration. Avoid entering confidential information.
     */
    readonly displayName?: string;
    readonly filters?: outputs.Psql.GetConfigurationsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the shape for the configuration. Example: `VM.Standard.E4.Flex`
     */
    readonly shape?: string;
    /**
     * The current state of the configuration.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Configurations in Oracle Cloud Infrastructure Psql service.
 *
 * Returns a list of configurations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testConfigurations = oci.Psql.getConfigurations({
 *     compartmentId: compartmentId,
 *     configType: configurationConfigType,
 *     configurationId: testConfiguration.id,
 *     dbVersion: configurationDbVersion,
 *     displayName: configurationDisplayName,
 *     shape: configurationShape,
 *     state: configurationState,
 * });
 * ```
 */
export function getConfigurationsOutput(args?: GetConfigurationsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetConfigurationsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:Psql/getConfigurations:getConfigurations", {
        "compartmentId": args.compartmentId,
        "configType": args.configType,
        "configurationId": args.configurationId,
        "dbVersion": args.dbVersion,
        "displayName": args.displayName,
        "filters": args.filters,
        "shape": args.shape,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getConfigurations.
 */
export interface GetConfigurationsOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A filter to return only resources if their `configType` matches the given `configType`.
     */
    configType?: pulumi.Input<string>;
    /**
     * A unique identifier for the configuration.
     */
    configurationId?: pulumi.Input<string>;
    /**
     * Version of the PostgreSQL database, such as 14.9.
     */
    dbVersion?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Psql.GetConfigurationsFilterArgs>[]>;
    /**
     * The name of the shape for the configuration. Example: `VM.Standard.E4.Flex`
     */
    shape?: pulumi.Input<string>;
    /**
     * A filter to return only resources if their `lifecycleState` matches the given `lifecycleState`.
     */
    state?: pulumi.Input<string>;
}
