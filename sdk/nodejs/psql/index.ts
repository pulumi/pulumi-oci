// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BackupArgs, BackupState } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));

export { ConfigurationArgs, ConfigurationState } from "./configuration";
export type Configuration = import("./configuration").Configuration;
export const Configuration: typeof import("./configuration").Configuration = null as any;
utilities.lazyLoad(exports, ["Configuration"], () => require("./configuration"));

export { DbSystemArgs, DbSystemState } from "./dbSystem";
export type DbSystem = import("./dbSystem").DbSystem;
export const DbSystem: typeof import("./dbSystem").DbSystem = null as any;
utilities.lazyLoad(exports, ["DbSystem"], () => require("./dbSystem"));

export { GetBackupArgs, GetBackupResult, GetBackupOutputArgs } from "./getBackup";
export const getBackup: typeof import("./getBackup").getBackup = null as any;
export const getBackupOutput: typeof import("./getBackup").getBackupOutput = null as any;
utilities.lazyLoad(exports, ["getBackup","getBackupOutput"], () => require("./getBackup"));

export { GetBackupsArgs, GetBackupsResult, GetBackupsOutputArgs } from "./getBackups";
export const getBackups: typeof import("./getBackups").getBackups = null as any;
export const getBackupsOutput: typeof import("./getBackups").getBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getBackups","getBackupsOutput"], () => require("./getBackups"));

export { GetConfigurationArgs, GetConfigurationResult, GetConfigurationOutputArgs } from "./getConfiguration";
export const getConfiguration: typeof import("./getConfiguration").getConfiguration = null as any;
export const getConfigurationOutput: typeof import("./getConfiguration").getConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getConfiguration","getConfigurationOutput"], () => require("./getConfiguration"));

export { GetConfigurationsArgs, GetConfigurationsResult, GetConfigurationsOutputArgs } from "./getConfigurations";
export const getConfigurations: typeof import("./getConfigurations").getConfigurations = null as any;
export const getConfigurationsOutput: typeof import("./getConfigurations").getConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurations","getConfigurationsOutput"], () => require("./getConfigurations"));

export { GetDbSystemArgs, GetDbSystemResult, GetDbSystemOutputArgs } from "./getDbSystem";
export const getDbSystem: typeof import("./getDbSystem").getDbSystem = null as any;
export const getDbSystemOutput: typeof import("./getDbSystem").getDbSystemOutput = null as any;
utilities.lazyLoad(exports, ["getDbSystem","getDbSystemOutput"], () => require("./getDbSystem"));

export { GetDbSystemConnectionDetailArgs, GetDbSystemConnectionDetailResult, GetDbSystemConnectionDetailOutputArgs } from "./getDbSystemConnectionDetail";
export const getDbSystemConnectionDetail: typeof import("./getDbSystemConnectionDetail").getDbSystemConnectionDetail = null as any;
export const getDbSystemConnectionDetailOutput: typeof import("./getDbSystemConnectionDetail").getDbSystemConnectionDetailOutput = null as any;
utilities.lazyLoad(exports, ["getDbSystemConnectionDetail","getDbSystemConnectionDetailOutput"], () => require("./getDbSystemConnectionDetail"));

export { GetDbSystemPrimaryDbInstanceArgs, GetDbSystemPrimaryDbInstanceResult, GetDbSystemPrimaryDbInstanceOutputArgs } from "./getDbSystemPrimaryDbInstance";
export const getDbSystemPrimaryDbInstance: typeof import("./getDbSystemPrimaryDbInstance").getDbSystemPrimaryDbInstance = null as any;
export const getDbSystemPrimaryDbInstanceOutput: typeof import("./getDbSystemPrimaryDbInstance").getDbSystemPrimaryDbInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getDbSystemPrimaryDbInstance","getDbSystemPrimaryDbInstanceOutput"], () => require("./getDbSystemPrimaryDbInstance"));

export { GetDbSystemsArgs, GetDbSystemsResult, GetDbSystemsOutputArgs } from "./getDbSystems";
export const getDbSystems: typeof import("./getDbSystems").getDbSystems = null as any;
export const getDbSystemsOutput: typeof import("./getDbSystems").getDbSystemsOutput = null as any;
utilities.lazyLoad(exports, ["getDbSystems","getDbSystemsOutput"], () => require("./getDbSystems"));

export { GetDefaultConfigurationArgs, GetDefaultConfigurationResult, GetDefaultConfigurationOutputArgs } from "./getDefaultConfiguration";
export const getDefaultConfiguration: typeof import("./getDefaultConfiguration").getDefaultConfiguration = null as any;
export const getDefaultConfigurationOutput: typeof import("./getDefaultConfiguration").getDefaultConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultConfiguration","getDefaultConfigurationOutput"], () => require("./getDefaultConfiguration"));

export { GetDefaultConfigurationsArgs, GetDefaultConfigurationsResult, GetDefaultConfigurationsOutputArgs } from "./getDefaultConfigurations";
export const getDefaultConfigurations: typeof import("./getDefaultConfigurations").getDefaultConfigurations = null as any;
export const getDefaultConfigurationsOutput: typeof import("./getDefaultConfigurations").getDefaultConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultConfigurations","getDefaultConfigurationsOutput"], () => require("./getDefaultConfigurations"));

export { GetShapesArgs, GetShapesResult, GetShapesOutputArgs } from "./getShapes";
export const getShapes: typeof import("./getShapes").getShapes = null as any;
export const getShapesOutput: typeof import("./getShapes").getShapesOutput = null as any;
utilities.lazyLoad(exports, ["getShapes","getShapesOutput"], () => require("./getShapes"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:Psql/backup:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "oci:Psql/configuration:Configuration":
                return new Configuration(name, <any>undefined, { urn })
            case "oci:Psql/dbSystem:DbSystem":
                return new DbSystem(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "Psql/backup", _module)
pulumi.runtime.registerResourceModule("oci", "Psql/configuration", _module)
pulumi.runtime.registerResourceModule("oci", "Psql/dbSystem", _module)
