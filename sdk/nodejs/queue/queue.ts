// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Queue resource in Oracle Cloud Infrastructure Queue service.
 *
 * Creates a new Queue.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testQueue = new oci.queue.Queue("testQueue", {
 *     compartmentId: _var.compartment_id,
 *     displayName: _var.queue_display_name,
 *     customEncryptionKeyId: oci_kms_key.test_key.id,
 *     deadLetterQueueDeliveryCount: _var.queue_dead_letter_queue_delivery_count,
 *     definedTags: {
 *         "foo-namespace.bar-key": "value",
 *     },
 *     freeformTags: {
 *         "bar-key": "value",
 *     },
 *     retentionInSeconds: _var.queue_retention_in_seconds,
 *     timeoutInSeconds: _var.queue_timeout_in_seconds,
 *     visibilityInSeconds: _var.queue_visibility_in_seconds,
 * });
 * ```
 *
 * ## Import
 *
 * Queues can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:Queue/queue:Queue test_queue "id"
 * ```
 */
export class Queue extends pulumi.CustomResource {
    /**
     * Get an existing Queue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QueueState, opts?: pulumi.CustomResourceOptions): Queue {
        return new Queue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Queue/queue:Queue';

    /**
     * Returns true if the given object is an instance of Queue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Queue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Queue.__pulumiType;
    }

    /**
     * (Updatable) Compartment Identifier
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * (Updatable) Id of the custom master encryption key which will be used to encrypt messages content
     */
    public readonly customEncryptionKeyId!: pulumi.Output<string>;
    /**
     * (Updatable) The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
     */
    public readonly deadLetterQueueDeliveryCount!: pulumi.Output<number>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    public readonly definedTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * (Updatable) Queue Identifier
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    public readonly freeformTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    public /*out*/ readonly lifecycleDetails!: pulumi.Output<string>;
    /**
     * The endpoint to use to consume or publish messages in the queue.
     */
    public /*out*/ readonly messagesEndpoint!: pulumi.Output<string>;
    public readonly purgeQueue!: pulumi.Output<boolean | undefined>;
    public readonly purgeType!: pulumi.Output<string | undefined>;
    /**
     * The retention period of the messages in the queue, in seconds.
     */
    public readonly retentionInSeconds!: pulumi.Output<number>;
    /**
     * The current state of the Queue.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    public /*out*/ readonly systemTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * The time the the Queue was created. An RFC3339 formatted datetime string
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The time the Queue was updated. An RFC3339 formatted datetime string
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;
    /**
     * (Updatable) The default polling timeout of the messages in the queue, in seconds.
     */
    public readonly timeoutInSeconds!: pulumi.Output<number>;
    /**
     * (Updatable) The default visibility of the messages consumed from the queue.
     */
    public readonly visibilityInSeconds!: pulumi.Output<number>;

    /**
     * Create a Queue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QueueArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QueueArgs | QueueState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QueueState | undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["customEncryptionKeyId"] = state ? state.customEncryptionKeyId : undefined;
            resourceInputs["deadLetterQueueDeliveryCount"] = state ? state.deadLetterQueueDeliveryCount : undefined;
            resourceInputs["definedTags"] = state ? state.definedTags : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["freeformTags"] = state ? state.freeformTags : undefined;
            resourceInputs["lifecycleDetails"] = state ? state.lifecycleDetails : undefined;
            resourceInputs["messagesEndpoint"] = state ? state.messagesEndpoint : undefined;
            resourceInputs["purgeQueue"] = state ? state.purgeQueue : undefined;
            resourceInputs["purgeType"] = state ? state.purgeType : undefined;
            resourceInputs["retentionInSeconds"] = state ? state.retentionInSeconds : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["systemTags"] = state ? state.systemTags : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
            resourceInputs["timeoutInSeconds"] = state ? state.timeoutInSeconds : undefined;
            resourceInputs["visibilityInSeconds"] = state ? state.visibilityInSeconds : undefined;
        } else {
            const args = argsOrState as QueueArgs | undefined;
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["customEncryptionKeyId"] = args ? args.customEncryptionKeyId : undefined;
            resourceInputs["deadLetterQueueDeliveryCount"] = args ? args.deadLetterQueueDeliveryCount : undefined;
            resourceInputs["definedTags"] = args ? args.definedTags : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["freeformTags"] = args ? args.freeformTags : undefined;
            resourceInputs["purgeQueue"] = args ? args.purgeQueue : undefined;
            resourceInputs["purgeType"] = args ? args.purgeType : undefined;
            resourceInputs["retentionInSeconds"] = args ? args.retentionInSeconds : undefined;
            resourceInputs["timeoutInSeconds"] = args ? args.timeoutInSeconds : undefined;
            resourceInputs["visibilityInSeconds"] = args ? args.visibilityInSeconds : undefined;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["messagesEndpoint"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Queue.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Queue resources.
 */
export interface QueueState {
    /**
     * (Updatable) Compartment Identifier
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) Id of the custom master encryption key which will be used to encrypt messages content
     */
    customEncryptionKeyId?: pulumi.Input<string>;
    /**
     * (Updatable) The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
     */
    deadLetterQueueDeliveryCount?: pulumi.Input<number>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) Queue Identifier
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * The endpoint to use to consume or publish messages in the queue.
     */
    messagesEndpoint?: pulumi.Input<string>;
    purgeQueue?: pulumi.Input<boolean>;
    purgeType?: pulumi.Input<string>;
    /**
     * The retention period of the messages in the queue, in seconds.
     */
    retentionInSeconds?: pulumi.Input<number>;
    /**
     * The current state of the Queue.
     */
    state?: pulumi.Input<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    systemTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The time the the Queue was created. An RFC3339 formatted datetime string
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time the Queue was updated. An RFC3339 formatted datetime string
     */
    timeUpdated?: pulumi.Input<string>;
    /**
     * (Updatable) The default polling timeout of the messages in the queue, in seconds.
     */
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * (Updatable) The default visibility of the messages consumed from the queue.
     */
    visibilityInSeconds?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Queue resource.
 */
export interface QueueArgs {
    /**
     * (Updatable) Compartment Identifier
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Id of the custom master encryption key which will be used to encrypt messages content
     */
    customEncryptionKeyId?: pulumi.Input<string>;
    /**
     * (Updatable) The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
     */
    deadLetterQueueDeliveryCount?: pulumi.Input<number>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * (Updatable) Queue Identifier
     */
    displayName: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: any}>;
    purgeQueue?: pulumi.Input<boolean>;
    purgeType?: pulumi.Input<string>;
    /**
     * The retention period of the messages in the queue, in seconds.
     */
    retentionInSeconds?: pulumi.Input<number>;
    /**
     * (Updatable) The default polling timeout of the messages in the queue, in seconds.
     */
    timeoutInSeconds?: pulumi.Input<number>;
    /**
     * (Updatable) The default visibility of the messages consumed from the queue.
     */
    visibilityInSeconds?: pulumi.Input<number>;
}
