// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Oci Cache Config Sets in Oracle Cloud Infrastructure Redis service.
 *
 * Lists the Oracle Cloud Infrastructure Cache Config Sets in the specified compartment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testOciCacheConfigSets = oci.Redis.getOciCacheConfigSets({
 *     compartmentId: compartmentId,
 *     displayName: ociCacheConfigSetDisplayName,
 *     id: ociCacheConfigSetId,
 *     softwareVersion: ociCacheConfigSetSoftwareVersion,
 *     state: ociCacheConfigSetState,
 * });
 * ```
 */
export function getOciCacheConfigSets(args?: GetOciCacheConfigSetsArgs, opts?: pulumi.InvokeOptions): Promise<GetOciCacheConfigSetsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Redis/getOciCacheConfigSets:getOciCacheConfigSets", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "softwareVersion": args.softwareVersion,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getOciCacheConfigSets.
 */
export interface GetOciCacheConfigSetsArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.Redis.GetOciCacheConfigSetsFilter[];
    /**
     * Unique Oracle Cloud Infrastructure Cache Config Set identifier.
     */
    id?: string;
    /**
     * A filter to return the Oracle Cloud Infrastructure Cache Config Set resources, whose software version matches with the given software version.
     */
    softwareVersion?: string;
    /**
     * A filter to return the Oracle Cloud Infrastructure Cache Config Set resources, whose lifecycle state matches with the given lifecycle state.
     */
    state?: string;
}

/**
 * A collection of values returned by getOciCacheConfigSets.
 */
export interface GetOciCacheConfigSetsResult {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the compartment that contains the Oracle Cloud Infrastructure Cache Config Set.
     */
    readonly compartmentId?: string;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    readonly displayName?: string;
    readonly filters?: outputs.Redis.GetOciCacheConfigSetsFilter[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the Oracle Cloud Infrastructure Cache Config Set.
     */
    readonly id?: string;
    /**
     * The list of oci_cache_config_set_collection.
     */
    readonly ociCacheConfigSetCollections: outputs.Redis.GetOciCacheConfigSetsOciCacheConfigSetCollection[];
    /**
     * The Oracle Cloud Infrastructure Cache engine version that the cluster is running.
     */
    readonly softwareVersion?: string;
    /**
     * The current state of the Oracle Cloud Infrastructure Cache Config Set.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Oci Cache Config Sets in Oracle Cloud Infrastructure Redis service.
 *
 * Lists the Oracle Cloud Infrastructure Cache Config Sets in the specified compartment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testOciCacheConfigSets = oci.Redis.getOciCacheConfigSets({
 *     compartmentId: compartmentId,
 *     displayName: ociCacheConfigSetDisplayName,
 *     id: ociCacheConfigSetId,
 *     softwareVersion: ociCacheConfigSetSoftwareVersion,
 *     state: ociCacheConfigSetState,
 * });
 * ```
 */
export function getOciCacheConfigSetsOutput(args?: GetOciCacheConfigSetsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetOciCacheConfigSetsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:Redis/getOciCacheConfigSets:getOciCacheConfigSets", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "softwareVersion": args.softwareVersion,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getOciCacheConfigSets.
 */
export interface GetOciCacheConfigSetsOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Redis.GetOciCacheConfigSetsFilterArgs>[]>;
    /**
     * Unique Oracle Cloud Infrastructure Cache Config Set identifier.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to return the Oracle Cloud Infrastructure Cache Config Set resources, whose software version matches with the given software version.
     */
    softwareVersion?: pulumi.Input<string>;
    /**
     * A filter to return the Oracle Cloud Infrastructure Cache Config Set resources, whose lifecycle state matches with the given lifecycle state.
     */
    state?: pulumi.Input<string>;
}
