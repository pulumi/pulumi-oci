// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Oci Cache Default Config Sets in Oracle Cloud Infrastructure Redis service.
 *
 * Lists the Oracle Cloud Infrastructure Cache Default Config Sets in the specified compartment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testOciCacheDefaultConfigSets = oci.Redis.getOciCacheDefaultConfigSets({
 *     compartmentId: compartmentId,
 *     displayName: ociCacheDefaultConfigSetDisplayName,
 *     id: ociCacheDefaultConfigSetId,
 *     softwareVersion: ociCacheDefaultConfigSetSoftwareVersion,
 *     state: ociCacheDefaultConfigSetState,
 * });
 * ```
 */
export function getOciCacheDefaultConfigSets(args: GetOciCacheDefaultConfigSetsArgs, opts?: pulumi.InvokeOptions): Promise<GetOciCacheDefaultConfigSetsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Redis/getOciCacheDefaultConfigSets:getOciCacheDefaultConfigSets", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "softwareVersion": args.softwareVersion,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getOciCacheDefaultConfigSets.
 */
export interface GetOciCacheDefaultConfigSetsArgs {
    /**
     * The unique identifier for the compartment.
     */
    compartmentId: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.Redis.GetOciCacheDefaultConfigSetsFilter[];
    /**
     * Unique Oracle Cloud Infrastructure Cache Default Config Set identifier.
     */
    id?: string;
    /**
     * A filter to return the Oracle Cloud Infrastructure Cache Config Set resources, whose software version matches with the given software version.
     */
    softwareVersion?: string;
    /**
     * A filter to return the Oracle Cloud Infrastructure Cache Default Config Set resources, whose lifecycle state matches with the given lifecycle state.
     */
    state?: string;
}

/**
 * A collection of values returned by getOciCacheDefaultConfigSets.
 */
export interface GetOciCacheDefaultConfigSetsResult {
    readonly compartmentId: string;
    /**
     * A user-friendly name of the Oracle Cloud Infrastructure Cache Default Config Set.
     */
    readonly displayName?: string;
    readonly filters?: outputs.Redis.GetOciCacheDefaultConfigSetsFilter[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the Oracle Cloud Infrastructure Cache Default Config Set.
     */
    readonly id?: string;
    /**
     * The list of oci_cache_default_config_set_collection.
     */
    readonly ociCacheDefaultConfigSetCollections: outputs.Redis.GetOciCacheDefaultConfigSetsOciCacheDefaultConfigSetCollection[];
    /**
     * The engine version of the Oracle Cloud Infrastructure Cache Default Config Set.
     */
    readonly softwareVersion?: string;
    /**
     * The current state of the Oracle Cloud Infrastructure Cache Default Config Set.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Oci Cache Default Config Sets in Oracle Cloud Infrastructure Redis service.
 *
 * Lists the Oracle Cloud Infrastructure Cache Default Config Sets in the specified compartment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testOciCacheDefaultConfigSets = oci.Redis.getOciCacheDefaultConfigSets({
 *     compartmentId: compartmentId,
 *     displayName: ociCacheDefaultConfigSetDisplayName,
 *     id: ociCacheDefaultConfigSetId,
 *     softwareVersion: ociCacheDefaultConfigSetSoftwareVersion,
 *     state: ociCacheDefaultConfigSetState,
 * });
 * ```
 */
export function getOciCacheDefaultConfigSetsOutput(args: GetOciCacheDefaultConfigSetsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetOciCacheDefaultConfigSetsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:Redis/getOciCacheDefaultConfigSets:getOciCacheDefaultConfigSets", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "softwareVersion": args.softwareVersion,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getOciCacheDefaultConfigSets.
 */
export interface GetOciCacheDefaultConfigSetsOutputArgs {
    /**
     * The unique identifier for the compartment.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Redis.GetOciCacheDefaultConfigSetsFilterArgs>[]>;
    /**
     * Unique Oracle Cloud Infrastructure Cache Default Config Set identifier.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to return the Oracle Cloud Infrastructure Cache Config Set resources, whose software version matches with the given software version.
     */
    softwareVersion?: pulumi.Input<string>;
    /**
     * A filter to return the Oracle Cloud Infrastructure Cache Default Config Set resources, whose lifecycle state matches with the given lifecycle state.
     */
    state?: pulumi.Input<string>;
}
