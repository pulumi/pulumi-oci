// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Oci Cache Users in Oracle Cloud Infrastructure Redis service.
 *
 * Lists the Oracle Cloud Infrastructure Cache users based on the supplied parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testOciCacheUsers = oci.Redis.getOciCacheUsers({
 *     compartmentId: compartmentId,
 *     name: ociCacheUserName,
 *     state: ociCacheUserState,
 * });
 * ```
 */
export function getOciCacheUsers(args?: GetOciCacheUsersArgs, opts?: pulumi.InvokeOptions): Promise<GetOciCacheUsersResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Redis/getOciCacheUsers:getOciCacheUsers", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "name": args.name,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getOciCacheUsers.
 */
export interface GetOciCacheUsersArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: string;
    filters?: inputs.Redis.GetOciCacheUsersFilter[];
    /**
     * A filter to return the resources that match with the given Oracle Cloud Infrastructure cache user name.
     */
    name?: string;
    /**
     * A filter to return the resources, whose lifecycleState matches with the given lifecycleState.
     */
    state?: string;
}

/**
 * A collection of values returned by getOciCacheUsers.
 */
export interface GetOciCacheUsersResult {
    /**
     * Oracle Cloud Infrastructure Cache user compartment ID.
     */
    readonly compartmentId?: string;
    readonly filters?: outputs.Redis.GetOciCacheUsersFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Oracle Cloud Infrastructure Cache user name.
     */
    readonly name?: string;
    /**
     * The list of oci_cache_user_collection.
     */
    readonly ociCacheUserCollections: outputs.Redis.GetOciCacheUsersOciCacheUserCollection[];
    /**
     * Oracle Cloud Infrastructure Cache user lifecycle state.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Oci Cache Users in Oracle Cloud Infrastructure Redis service.
 *
 * Lists the Oracle Cloud Infrastructure Cache users based on the supplied parameters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testOciCacheUsers = oci.Redis.getOciCacheUsers({
 *     compartmentId: compartmentId,
 *     name: ociCacheUserName,
 *     state: ociCacheUserState,
 * });
 * ```
 */
export function getOciCacheUsersOutput(args?: GetOciCacheUsersOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetOciCacheUsersResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:Redis/getOciCacheUsers:getOciCacheUsers", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "name": args.name,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getOciCacheUsers.
 */
export interface GetOciCacheUsersOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Redis.GetOciCacheUsersFilterArgs>[]>;
    /**
     * A filter to return the resources that match with the given Oracle Cloud Infrastructure cache user name.
     */
    name?: pulumi.Input<string>;
    /**
     * A filter to return the resources, whose lifecycleState matches with the given lifecycleState.
     */
    state?: pulumi.Input<string>;
}
