// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Redis Clusters in Oracle Cloud Infrastructure Redis service.
 *
 * Lists the Redis clusters in the specified compartment. A Redis cluster is a memory-based storage solution. For more information, see [OCI Caching Service with Redis](https://docs.cloud.oracle.com/iaas/Content/redis/home.htm).
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRedisClusters = oci.Redis.getRedisClusters({
 *     compartmentId: compartmentId,
 *     displayName: redisClusterDisplayName,
 *     id: redisClusterId,
 *     state: redisClusterState,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getRedisClusters(args?: GetRedisClustersArgs, opts?: pulumi.InvokeOptions): Promise<GetRedisClustersResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Redis/getRedisClusters:getRedisClusters", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "id": args.id,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getRedisClusters.
 */
export interface GetRedisClustersArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.Redis.GetRedisClustersFilter[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the Redis cluster.
     */
    id?: string;
    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     */
    state?: string;
}

/**
 * A collection of values returned by getRedisClusters.
 */
export interface GetRedisClustersResult {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the compartment that contains the Redis cluster.
     */
    readonly compartmentId?: string;
    /**
     * A user-friendly name of a Redis cluster node.
     */
    readonly displayName?: string;
    readonly filters?: outputs.Redis.GetRedisClustersFilter[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the Redis cluster.
     */
    readonly id?: string;
    /**
     * The list of redis_cluster_collection.
     */
    readonly redisClusterCollections: outputs.Redis.GetRedisClustersRedisClusterCollection[];
    /**
     * The current state of the Redis cluster.
     */
    readonly state?: string;
}
/**
 * This data source provides the list of Redis Clusters in Oracle Cloud Infrastructure Redis service.
 *
 * Lists the Redis clusters in the specified compartment. A Redis cluster is a memory-based storage solution. For more information, see [OCI Caching Service with Redis](https://docs.cloud.oracle.com/iaas/Content/redis/home.htm).
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testRedisClusters = oci.Redis.getRedisClusters({
 *     compartmentId: compartmentId,
 *     displayName: redisClusterDisplayName,
 *     id: redisClusterId,
 *     state: redisClusterState,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getRedisClustersOutput(args?: GetRedisClustersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRedisClustersResult> {
    return pulumi.output(args).apply((a: any) => getRedisClusters(a, opts))
}

/**
 * A collection of arguments for invoking getRedisClusters.
 */
export interface GetRedisClustersOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.Redis.GetRedisClustersFilterArgs>[]>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the Redis cluster.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     */
    state?: pulumi.Input<string>;
}
