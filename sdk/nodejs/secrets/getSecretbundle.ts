// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Secretbundle resource in Oracle Cloud Infrastructure Secrets service.
 *
 * Gets a secret bundle that matches either the specified `stage`, `label`, or `versionNumber` parameter.
 * If none of these parameters are provided, the bundle for the secret version marked as `CURRENT` will be returned.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSecretbundle = oci.Secrets.getSecretbundle({
 *     secretId: testSecret.id,
 *     secretVersionName: testSecretVersion.name,
 *     stage: secretbundleStage,
 *     versionNumber: secretbundleVersionNumber,
 * });
 * ```
 */
export function getSecretbundle(args: GetSecretbundleArgs, opts?: pulumi.InvokeOptions): Promise<GetSecretbundleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Secrets/getSecretbundle:getSecretbundle", {
        "secretId": args.secretId,
        "secretVersionName": args.secretVersionName,
        "stage": args.stage,
        "versionNumber": args.versionNumber,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecretbundle.
 */
export interface GetSecretbundleArgs {
    /**
     * The OCID of the secret.
     */
    secretId: string;
    /**
     * The name of the secret. (This might be referred to as the name of the secret version. Names are unique across the different versions of a secret.)
     */
    secretVersionName?: string;
    /**
     * The rotation state of the secret version.
     */
    stage?: string;
    /**
     * The version number of the secret.
     */
    versionNumber?: string;
}

/**
 * A collection of values returned by getSecretbundle.
 */
export interface GetSecretbundleResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Customer-provided contextual metadata for the secret.
     */
    readonly metadata: {[key: string]: any};
    /**
     * The contents of the secret.
     */
    readonly secretBundleContents: outputs.Secrets.GetSecretbundleSecretBundleContent[];
    /**
     * The OCID of the secret.
     */
    readonly secretId: string;
    readonly secretVersionName?: string;
    readonly stage?: string;
    /**
     * A list of possible rotation states for the secret version.
     */
    readonly stages: string[];
    /**
     * The time when the secret bundle was created.
     */
    readonly timeCreated: string;
    /**
     * An optional property indicating when to delete the secret version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     */
    readonly timeOfDeletion: string;
    /**
     * An optional property indicating when the secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     */
    readonly timeOfExpiry: string;
    /**
     * The name of the secret version. Labels are unique across the different versions of a particular secret.
     */
    readonly versionName: string;
    /**
     * The version number of the secret.
     */
    readonly versionNumber: string;
}
/**
 * This data source provides details about a specific Secretbundle resource in Oracle Cloud Infrastructure Secrets service.
 *
 * Gets a secret bundle that matches either the specified `stage`, `label`, or `versionNumber` parameter.
 * If none of these parameters are provided, the bundle for the secret version marked as `CURRENT` will be returned.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSecretbundle = oci.Secrets.getSecretbundle({
 *     secretId: testSecret.id,
 *     secretVersionName: testSecretVersion.name,
 *     stage: secretbundleStage,
 *     versionNumber: secretbundleVersionNumber,
 * });
 * ```
 */
export function getSecretbundleOutput(args: GetSecretbundleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSecretbundleResult> {
    return pulumi.output(args).apply((a: any) => getSecretbundle(a, opts))
}

/**
 * A collection of arguments for invoking getSecretbundle.
 */
export interface GetSecretbundleOutputArgs {
    /**
     * The OCID of the secret.
     */
    secretId: pulumi.Input<string>;
    /**
     * The name of the secret. (This might be referred to as the name of the secret version. Names are unique across the different versions of a secret.)
     */
    secretVersionName?: pulumi.Input<string>;
    /**
     * The rotation state of the secret version.
     */
    stage?: pulumi.Input<string>;
    /**
     * The version number of the secret.
     */
    versionNumber?: pulumi.Input<string>;
}
