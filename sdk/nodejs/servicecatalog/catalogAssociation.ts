// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource provides the Service Catalog Association resource in Oracle Cloud Infrastructure Service Catalog service.
 *
 * Creates an association between service catalog and a resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testServiceCatalogAssociation = new oci.servicecatalog.CatalogAssociation("test_service_catalog_association", {
 *     entityId: testEntity.id,
 *     serviceCatalogId: testServiceCatalog.id,
 *     entityType: serviceCatalogAssociationEntityType,
 * });
 * ```
 *
 * ## Import
 *
 * ServiceCatalogAssociations can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:ServiceCatalog/catalogAssociation:CatalogAssociation test_service_catalog_association "id"
 * ```
 */
export class CatalogAssociation extends pulumi.CustomResource {
    /**
     * Get an existing CatalogAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogAssociationState, opts?: pulumi.CustomResourceOptions): CatalogAssociation {
        return new CatalogAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:ServiceCatalog/catalogAssociation:CatalogAssociation';

    /**
     * Returns true if the given object is an instance of CatalogAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CatalogAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CatalogAssociation.__pulumiType;
    }

    /**
     * Identifier of the entity being associated with service catalog.
     */
    public readonly entityId!: pulumi.Output<string>;
    /**
     * The type of the entity that is associated with the service catalog.
     */
    public readonly entityType!: pulumi.Output<string>;
    /**
     * Identifier of the service catalog.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly serviceCatalogId!: pulumi.Output<string>;
    /**
     * Timestamp of when the resource was associated with service catalog.
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;

    /**
     * Create a CatalogAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CatalogAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogAssociationArgs | CatalogAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CatalogAssociationState | undefined;
            resourceInputs["entityId"] = state ? state.entityId : undefined;
            resourceInputs["entityType"] = state ? state.entityType : undefined;
            resourceInputs["serviceCatalogId"] = state ? state.serviceCatalogId : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
        } else {
            const args = argsOrState as CatalogAssociationArgs | undefined;
            if ((!args || args.entityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityId'");
            }
            if ((!args || args.serviceCatalogId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceCatalogId'");
            }
            resourceInputs["entityId"] = args ? args.entityId : undefined;
            resourceInputs["entityType"] = args ? args.entityType : undefined;
            resourceInputs["serviceCatalogId"] = args ? args.serviceCatalogId : undefined;
            resourceInputs["timeCreated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CatalogAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CatalogAssociation resources.
 */
export interface CatalogAssociationState {
    /**
     * Identifier of the entity being associated with service catalog.
     */
    entityId?: pulumi.Input<string>;
    /**
     * The type of the entity that is associated with the service catalog.
     */
    entityType?: pulumi.Input<string>;
    /**
     * Identifier of the service catalog.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    serviceCatalogId?: pulumi.Input<string>;
    /**
     * Timestamp of when the resource was associated with service catalog.
     */
    timeCreated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CatalogAssociation resource.
 */
export interface CatalogAssociationArgs {
    /**
     * Identifier of the entity being associated with service catalog.
     */
    entityId: pulumi.Input<string>;
    /**
     * The type of the entity that is associated with the service catalog.
     */
    entityType?: pulumi.Input<string>;
    /**
     * Identifier of the service catalog.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    serviceCatalogId: pulumi.Input<string>;
}
