// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Virtual Deployments in Oracle Cloud Infrastructure Service Mesh service.
 *
 * Returns a list of VirtualDeployments.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testVirtualDeployments = oci.ServiceMesh.getVirtualDeployments({
 *     compartmentId: compartmentId,
 *     id: virtualDeploymentId,
 *     name: virtualDeploymentName,
 *     state: virtualDeploymentState,
 *     virtualServiceId: testVirtualService.id,
 * });
 * ```
 */
export function getVirtualDeployments(args: GetVirtualDeploymentsArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualDeploymentsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:ServiceMesh/getVirtualDeployments:getVirtualDeployments", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "id": args.id,
        "name": args.name,
        "state": args.state,
        "virtualServiceId": args.virtualServiceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVirtualDeployments.
 */
export interface GetVirtualDeploymentsArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: string;
    filters?: inputs.ServiceMesh.GetVirtualDeploymentsFilter[];
    /**
     * Unique VirtualDeployment identifier.
     */
    id?: string;
    /**
     * A filter to return only resources that match the entire name given.
     */
    name?: string;
    /**
     * A filter to return only resources that match the life cycle state given.
     */
    state?: string;
    /**
     * Unique VirtualService identifier.
     */
    virtualServiceId?: string;
}

/**
 * A collection of values returned by getVirtualDeployments.
 */
export interface GetVirtualDeploymentsResult {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    readonly compartmentId: string;
    readonly filters?: outputs.ServiceMesh.GetVirtualDeploymentsFilter[];
    /**
     * Unique identifier that is immutable on creation.
     */
    readonly id?: string;
    /**
     * A user-friendly name. The name must be unique within the same virtual service and cannot be changed after creation. Avoid entering confidential information.  Example: `My unique resource name`
     */
    readonly name?: string;
    /**
     * The current state of the Resource.
     */
    readonly state?: string;
    /**
     * The list of virtual_deployment_collection.
     */
    readonly virtualDeploymentCollections: outputs.ServiceMesh.GetVirtualDeploymentsVirtualDeploymentCollection[];
    /**
     * The OCID of the virtual service in which this virtual deployment is created.
     */
    readonly virtualServiceId?: string;
}
/**
 * This data source provides the list of Virtual Deployments in Oracle Cloud Infrastructure Service Mesh service.
 *
 * Returns a list of VirtualDeployments.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testVirtualDeployments = oci.ServiceMesh.getVirtualDeployments({
 *     compartmentId: compartmentId,
 *     id: virtualDeploymentId,
 *     name: virtualDeploymentName,
 *     state: virtualDeploymentState,
 *     virtualServiceId: testVirtualService.id,
 * });
 * ```
 */
export function getVirtualDeploymentsOutput(args: GetVirtualDeploymentsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVirtualDeploymentsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:ServiceMesh/getVirtualDeployments:getVirtualDeployments", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "id": args.id,
        "name": args.name,
        "state": args.state,
        "virtualServiceId": args.virtualServiceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVirtualDeployments.
 */
export interface GetVirtualDeploymentsOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.ServiceMesh.GetVirtualDeploymentsFilterArgs>[]>;
    /**
     * Unique VirtualDeployment identifier.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire name given.
     */
    name?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the life cycle state given.
     */
    state?: pulumi.Input<string>;
    /**
     * Unique VirtualService identifier.
     */
    virtualServiceId?: pulumi.Input<string>;
}
