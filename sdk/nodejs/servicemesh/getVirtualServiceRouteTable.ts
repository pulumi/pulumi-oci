// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Virtual Service Route Table resource in Oracle Cloud Infrastructure Service Mesh service.
 *
 * Gets a VirtualServiceRouteTable by identifier.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testVirtualServiceRouteTable = oci.ServiceMesh.getVirtualServiceRouteTable({
 *     virtualServiceRouteTableId: oci_service_mesh_virtual_service_route_table.test_virtual_service_route_table.id,
 * });
 * ```
 */
export function getVirtualServiceRouteTable(args: GetVirtualServiceRouteTableArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualServiceRouteTableResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("oci:ServiceMesh/getVirtualServiceRouteTable:getVirtualServiceRouteTable", {
        "virtualServiceRouteTableId": args.virtualServiceRouteTableId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVirtualServiceRouteTable.
 */
export interface GetVirtualServiceRouteTableArgs {
    /**
     * Unique VirtualServiceRouteTable identifier.
     */
    virtualServiceRouteTableId: string;
}

/**
 * A collection of values returned by getVirtualServiceRouteTable.
 */
export interface GetVirtualServiceRouteTableResult {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    readonly compartmentId: string;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    readonly definedTags: {[key: string]: any};
    /**
     * Description of the resource. It can be changed after creation. Avoid entering confidential information.  Example: `This is my new resource`
     */
    readonly description: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    readonly freeformTags: {[key: string]: any};
    /**
     * Unique identifier that is immutable on creation.
     */
    readonly id: string;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed state.
     */
    readonly lifecycleDetails: string;
    /**
     * A user-friendly name. The name must be unique within the same virtual service and cannot be changed after creation. Avoid entering confidential information.  Example: `My unique resource name`
     */
    readonly name: string;
    /**
     * The priority of the route table. Lower value means higher priority. The routes are declared based on the priority.
     */
    readonly priority: number;
    /**
     * The route rules for the virtual service.
     */
    readonly routeRules: outputs.ServiceMesh.GetVirtualServiceRouteTableRouteRule[];
    /**
     * The current state of the Resource.
     */
    readonly state: string;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    readonly systemTags: {[key: string]: any};
    /**
     * The time when this resource was created in an RFC3339 formatted datetime string.
     */
    readonly timeCreated: string;
    /**
     * The time when this resource was updated in an RFC3339 formatted datetime string.
     */
    readonly timeUpdated: string;
    /**
     * The OCID of the virtual service in which this virtual service route table is created.
     */
    readonly virtualServiceId: string;
    readonly virtualServiceRouteTableId: string;
}

export function getVirtualServiceRouteTableOutput(args: GetVirtualServiceRouteTableOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualServiceRouteTableResult> {
    return pulumi.output(args).apply(a => getVirtualServiceRouteTable(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualServiceRouteTable.
 */
export interface GetVirtualServiceRouteTableOutputArgs {
    /**
     * Unique VirtualServiceRouteTable identifier.
     */
    virtualServiceRouteTableId: pulumi.Input<string>;
}
