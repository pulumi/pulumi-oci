// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Virtual Service Route Tables in Oracle Cloud Infrastructure Service Mesh service.
 *
 * Returns a list of VirtualServiceRouteTable objects.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testVirtualServiceRouteTables = oci.ServiceMesh.getVirtualServiceRouteTables({
 *     compartmentId: _var.compartment_id,
 *     id: _var.virtual_service_route_table_id,
 *     name: _var.virtual_service_route_table_name,
 *     state: _var.virtual_service_route_table_state,
 *     virtualServiceId: oci_service_mesh_virtual_service.test_virtual_service.id,
 * });
 * ```
 */
export function getVirtualServiceRouteTables(args: GetVirtualServiceRouteTablesArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualServiceRouteTablesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:ServiceMesh/getVirtualServiceRouteTables:getVirtualServiceRouteTables", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "id": args.id,
        "name": args.name,
        "state": args.state,
        "virtualServiceId": args.virtualServiceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVirtualServiceRouteTables.
 */
export interface GetVirtualServiceRouteTablesArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: string;
    filters?: inputs.ServiceMesh.GetVirtualServiceRouteTablesFilter[];
    /**
     * Unique VirtualServiceRouteTable identifier.
     */
    id?: string;
    /**
     * A filter to return only resources that match the entire name given.
     */
    name?: string;
    /**
     * A filter to return only resources that match the life cycle state given.
     */
    state?: string;
    /**
     * Unique VirtualService identifier.
     */
    virtualServiceId?: string;
}

/**
 * A collection of values returned by getVirtualServiceRouteTables.
 */
export interface GetVirtualServiceRouteTablesResult {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    readonly compartmentId: string;
    readonly filters?: outputs.ServiceMesh.GetVirtualServiceRouteTablesFilter[];
    /**
     * Unique identifier that is immutable on creation.
     */
    readonly id?: string;
    /**
     * A user-friendly name. The name must be unique within the same virtual service and cannot be changed after creation. Avoid entering confidential information.  Example: `My unique resource name`
     */
    readonly name?: string;
    /**
     * The current state of the Resource.
     */
    readonly state?: string;
    /**
     * The OCID of the virtual service in which this virtual service route table is created.
     */
    readonly virtualServiceId?: string;
    /**
     * The list of virtual_service_route_table_collection.
     */
    readonly virtualServiceRouteTableCollections?: outputs.ServiceMesh.GetVirtualServiceRouteTablesVirtualServiceRouteTableCollection[];
}
/**
 * This data source provides the list of Virtual Service Route Tables in Oracle Cloud Infrastructure Service Mesh service.
 *
 * Returns a list of VirtualServiceRouteTable objects.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testVirtualServiceRouteTables = oci.ServiceMesh.getVirtualServiceRouteTables({
 *     compartmentId: _var.compartment_id,
 *     id: _var.virtual_service_route_table_id,
 *     name: _var.virtual_service_route_table_name,
 *     state: _var.virtual_service_route_table_state,
 *     virtualServiceId: oci_service_mesh_virtual_service.test_virtual_service.id,
 * });
 * ```
 */
export function getVirtualServiceRouteTablesOutput(args: GetVirtualServiceRouteTablesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualServiceRouteTablesResult> {
    return pulumi.output(args).apply((a: any) => getVirtualServiceRouteTables(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualServiceRouteTables.
 */
export interface GetVirtualServiceRouteTablesOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.ServiceMesh.GetVirtualServiceRouteTablesFilterArgs>[]>;
    /**
     * Unique VirtualServiceRouteTable identifier.
     */
    id?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire name given.
     */
    name?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the life cycle state given.
     */
    state?: pulumi.Input<string>;
    /**
     * Unique VirtualService identifier.
     */
    virtualServiceId?: pulumi.Input<string>;
}
