// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Virtual Services in Oracle Cloud Infrastructure Service Mesh service.
 *
 * Returns a list of VirtualService objects.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testVirtualServices = oci.ServiceMesh.getVirtualServices({
 *     compartmentId: compartmentId,
 *     id: virtualServiceId,
 *     meshId: testMesh.id,
 *     name: virtualServiceName,
 *     state: virtualServiceState,
 * });
 * ```
 */
export function getVirtualServices(args: GetVirtualServicesArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualServicesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:ServiceMesh/getVirtualServices:getVirtualServices", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "id": args.id,
        "meshId": args.meshId,
        "name": args.name,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getVirtualServices.
 */
export interface GetVirtualServicesArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: string;
    filters?: inputs.ServiceMesh.GetVirtualServicesFilter[];
    /**
     * Unique VirtualService identifier.
     */
    id?: string;
    /**
     * Unique Mesh identifier.
     */
    meshId?: string;
    /**
     * A filter to return only resources that match the entire name given.
     */
    name?: string;
    /**
     * A filter to return only resources that match the life cycle state given.
     */
    state?: string;
}

/**
 * A collection of values returned by getVirtualServices.
 */
export interface GetVirtualServicesResult {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    readonly compartmentId: string;
    readonly filters?: outputs.ServiceMesh.GetVirtualServicesFilter[];
    /**
     * Unique identifier that is immutable on creation.
     */
    readonly id?: string;
    /**
     * The OCID of the service mesh in which this virtual service is created.
     */
    readonly meshId?: string;
    /**
     * A user-friendly name. The name has to be unique within the same service mesh and cannot be changed after creation. Avoid entering confidential information.  Example: `My unique resource name`
     */
    readonly name?: string;
    /**
     * The current state of the Resource.
     */
    readonly state?: string;
    /**
     * The list of virtual_service_collection.
     */
    readonly virtualServiceCollections: outputs.ServiceMesh.GetVirtualServicesVirtualServiceCollection[];
}
/**
 * This data source provides the list of Virtual Services in Oracle Cloud Infrastructure Service Mesh service.
 *
 * Returns a list of VirtualService objects.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testVirtualServices = oci.ServiceMesh.getVirtualServices({
 *     compartmentId: compartmentId,
 *     id: virtualServiceId,
 *     meshId: testMesh.id,
 *     name: virtualServiceName,
 *     state: virtualServiceState,
 * });
 * ```
 */
export function getVirtualServicesOutput(args: GetVirtualServicesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualServicesResult> {
    return pulumi.output(args).apply((a: any) => getVirtualServices(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualServices.
 */
export interface GetVirtualServicesOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.ServiceMesh.GetVirtualServicesFilterArgs>[]>;
    /**
     * Unique VirtualService identifier.
     */
    id?: pulumi.Input<string>;
    /**
     * Unique Mesh identifier.
     */
    meshId?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire name given.
     */
    name?: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the life cycle state given.
     */
    state?: pulumi.Input<string>;
}
