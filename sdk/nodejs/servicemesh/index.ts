// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessPolicyArgs, AccessPolicyState } from "./accessPolicy";
export type AccessPolicy = import("./accessPolicy").AccessPolicy;
export const AccessPolicy: typeof import("./accessPolicy").AccessPolicy = null as any;
utilities.lazyLoad(exports, ["AccessPolicy"], () => require("./accessPolicy"));

export { GetAccessPoliciesArgs, GetAccessPoliciesResult, GetAccessPoliciesOutputArgs } from "./getAccessPolicies";
export const getAccessPolicies: typeof import("./getAccessPolicies").getAccessPolicies = null as any;
export const getAccessPoliciesOutput: typeof import("./getAccessPolicies").getAccessPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPolicies","getAccessPoliciesOutput"], () => require("./getAccessPolicies"));

export { GetAccessPolicyArgs, GetAccessPolicyResult, GetAccessPolicyOutputArgs } from "./getAccessPolicy";
export const getAccessPolicy: typeof import("./getAccessPolicy").getAccessPolicy = null as any;
export const getAccessPolicyOutput: typeof import("./getAccessPolicy").getAccessPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPolicy","getAccessPolicyOutput"], () => require("./getAccessPolicy"));

export { GetIngressGatewayArgs, GetIngressGatewayResult, GetIngressGatewayOutputArgs } from "./getIngressGateway";
export const getIngressGateway: typeof import("./getIngressGateway").getIngressGateway = null as any;
export const getIngressGatewayOutput: typeof import("./getIngressGateway").getIngressGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getIngressGateway","getIngressGatewayOutput"], () => require("./getIngressGateway"));

export { GetIngressGatewayRouteTableArgs, GetIngressGatewayRouteTableResult, GetIngressGatewayRouteTableOutputArgs } from "./getIngressGatewayRouteTable";
export const getIngressGatewayRouteTable: typeof import("./getIngressGatewayRouteTable").getIngressGatewayRouteTable = null as any;
export const getIngressGatewayRouteTableOutput: typeof import("./getIngressGatewayRouteTable").getIngressGatewayRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getIngressGatewayRouteTable","getIngressGatewayRouteTableOutput"], () => require("./getIngressGatewayRouteTable"));

export { GetIngressGatewayRouteTablesArgs, GetIngressGatewayRouteTablesResult, GetIngressGatewayRouteTablesOutputArgs } from "./getIngressGatewayRouteTables";
export const getIngressGatewayRouteTables: typeof import("./getIngressGatewayRouteTables").getIngressGatewayRouteTables = null as any;
export const getIngressGatewayRouteTablesOutput: typeof import("./getIngressGatewayRouteTables").getIngressGatewayRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getIngressGatewayRouteTables","getIngressGatewayRouteTablesOutput"], () => require("./getIngressGatewayRouteTables"));

export { GetIngressGatewaysArgs, GetIngressGatewaysResult, GetIngressGatewaysOutputArgs } from "./getIngressGateways";
export const getIngressGateways: typeof import("./getIngressGateways").getIngressGateways = null as any;
export const getIngressGatewaysOutput: typeof import("./getIngressGateways").getIngressGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getIngressGateways","getIngressGatewaysOutput"], () => require("./getIngressGateways"));

export { GetMeshArgs, GetMeshResult, GetMeshOutputArgs } from "./getMesh";
export const getMesh: typeof import("./getMesh").getMesh = null as any;
export const getMeshOutput: typeof import("./getMesh").getMeshOutput = null as any;
utilities.lazyLoad(exports, ["getMesh","getMeshOutput"], () => require("./getMesh"));

export { GetMeshesArgs, GetMeshesResult, GetMeshesOutputArgs } from "./getMeshes";
export const getMeshes: typeof import("./getMeshes").getMeshes = null as any;
export const getMeshesOutput: typeof import("./getMeshes").getMeshesOutput = null as any;
utilities.lazyLoad(exports, ["getMeshes","getMeshesOutput"], () => require("./getMeshes"));

export { GetProxyDetailResult } from "./getProxyDetail";
export const getProxyDetail: typeof import("./getProxyDetail").getProxyDetail = null as any;
export const getProxyDetailOutput: typeof import("./getProxyDetail").getProxyDetailOutput = null as any;
utilities.lazyLoad(exports, ["getProxyDetail","getProxyDetailOutput"], () => require("./getProxyDetail"));

export { GetVirtualDeploymentArgs, GetVirtualDeploymentResult, GetVirtualDeploymentOutputArgs } from "./getVirtualDeployment";
export const getVirtualDeployment: typeof import("./getVirtualDeployment").getVirtualDeployment = null as any;
export const getVirtualDeploymentOutput: typeof import("./getVirtualDeployment").getVirtualDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualDeployment","getVirtualDeploymentOutput"], () => require("./getVirtualDeployment"));

export { GetVirtualDeploymentsArgs, GetVirtualDeploymentsResult, GetVirtualDeploymentsOutputArgs } from "./getVirtualDeployments";
export const getVirtualDeployments: typeof import("./getVirtualDeployments").getVirtualDeployments = null as any;
export const getVirtualDeploymentsOutput: typeof import("./getVirtualDeployments").getVirtualDeploymentsOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualDeployments","getVirtualDeploymentsOutput"], () => require("./getVirtualDeployments"));

export { GetVirtualServiceArgs, GetVirtualServiceResult, GetVirtualServiceOutputArgs } from "./getVirtualService";
export const getVirtualService: typeof import("./getVirtualService").getVirtualService = null as any;
export const getVirtualServiceOutput: typeof import("./getVirtualService").getVirtualServiceOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualService","getVirtualServiceOutput"], () => require("./getVirtualService"));

export { GetVirtualServiceRouteTableArgs, GetVirtualServiceRouteTableResult, GetVirtualServiceRouteTableOutputArgs } from "./getVirtualServiceRouteTable";
export const getVirtualServiceRouteTable: typeof import("./getVirtualServiceRouteTable").getVirtualServiceRouteTable = null as any;
export const getVirtualServiceRouteTableOutput: typeof import("./getVirtualServiceRouteTable").getVirtualServiceRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualServiceRouteTable","getVirtualServiceRouteTableOutput"], () => require("./getVirtualServiceRouteTable"));

export { GetVirtualServiceRouteTablesArgs, GetVirtualServiceRouteTablesResult, GetVirtualServiceRouteTablesOutputArgs } from "./getVirtualServiceRouteTables";
export const getVirtualServiceRouteTables: typeof import("./getVirtualServiceRouteTables").getVirtualServiceRouteTables = null as any;
export const getVirtualServiceRouteTablesOutput: typeof import("./getVirtualServiceRouteTables").getVirtualServiceRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualServiceRouteTables","getVirtualServiceRouteTablesOutput"], () => require("./getVirtualServiceRouteTables"));

export { GetVirtualServicesArgs, GetVirtualServicesResult, GetVirtualServicesOutputArgs } from "./getVirtualServices";
export const getVirtualServices: typeof import("./getVirtualServices").getVirtualServices = null as any;
export const getVirtualServicesOutput: typeof import("./getVirtualServices").getVirtualServicesOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualServices","getVirtualServicesOutput"], () => require("./getVirtualServices"));

export { IngressGatewayArgs, IngressGatewayState } from "./ingressGateway";
export type IngressGateway = import("./ingressGateway").IngressGateway;
export const IngressGateway: typeof import("./ingressGateway").IngressGateway = null as any;
utilities.lazyLoad(exports, ["IngressGateway"], () => require("./ingressGateway"));

export { IngressGatewayRouteTableArgs, IngressGatewayRouteTableState } from "./ingressGatewayRouteTable";
export type IngressGatewayRouteTable = import("./ingressGatewayRouteTable").IngressGatewayRouteTable;
export const IngressGatewayRouteTable: typeof import("./ingressGatewayRouteTable").IngressGatewayRouteTable = null as any;
utilities.lazyLoad(exports, ["IngressGatewayRouteTable"], () => require("./ingressGatewayRouteTable"));

export { MeshArgs, MeshState } from "./mesh";
export type Mesh = import("./mesh").Mesh;
export const Mesh: typeof import("./mesh").Mesh = null as any;
utilities.lazyLoad(exports, ["Mesh"], () => require("./mesh"));

export { VirtualDeploymentArgs, VirtualDeploymentState } from "./virtualDeployment";
export type VirtualDeployment = import("./virtualDeployment").VirtualDeployment;
export const VirtualDeployment: typeof import("./virtualDeployment").VirtualDeployment = null as any;
utilities.lazyLoad(exports, ["VirtualDeployment"], () => require("./virtualDeployment"));

export { VirtualServiceArgs, VirtualServiceState } from "./virtualService";
export type VirtualService = import("./virtualService").VirtualService;
export const VirtualService: typeof import("./virtualService").VirtualService = null as any;
utilities.lazyLoad(exports, ["VirtualService"], () => require("./virtualService"));

export { VirtualServiceRouteTableArgs, VirtualServiceRouteTableState } from "./virtualServiceRouteTable";
export type VirtualServiceRouteTable = import("./virtualServiceRouteTable").VirtualServiceRouteTable;
export const VirtualServiceRouteTable: typeof import("./virtualServiceRouteTable").VirtualServiceRouteTable = null as any;
utilities.lazyLoad(exports, ["VirtualServiceRouteTable"], () => require("./virtualServiceRouteTable"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:ServiceMesh/accessPolicy:AccessPolicy":
                return new AccessPolicy(name, <any>undefined, { urn })
            case "oci:ServiceMesh/ingressGateway:IngressGateway":
                return new IngressGateway(name, <any>undefined, { urn })
            case "oci:ServiceMesh/ingressGatewayRouteTable:IngressGatewayRouteTable":
                return new IngressGatewayRouteTable(name, <any>undefined, { urn })
            case "oci:ServiceMesh/mesh:Mesh":
                return new Mesh(name, <any>undefined, { urn })
            case "oci:ServiceMesh/virtualDeployment:VirtualDeployment":
                return new VirtualDeployment(name, <any>undefined, { urn })
            case "oci:ServiceMesh/virtualService:VirtualService":
                return new VirtualService(name, <any>undefined, { urn })
            case "oci:ServiceMesh/virtualServiceRouteTable:VirtualServiceRouteTable":
                return new VirtualServiceRouteTable(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "ServiceMesh/accessPolicy", _module)
pulumi.runtime.registerResourceModule("oci", "ServiceMesh/ingressGateway", _module)
pulumi.runtime.registerResourceModule("oci", "ServiceMesh/ingressGatewayRouteTable", _module)
pulumi.runtime.registerResourceModule("oci", "ServiceMesh/mesh", _module)
pulumi.runtime.registerResourceModule("oci", "ServiceMesh/virtualDeployment", _module)
pulumi.runtime.registerResourceModule("oci", "ServiceMesh/virtualService", _module)
pulumi.runtime.registerResourceModule("oci", "ServiceMesh/virtualServiceRouteTable", _module)
