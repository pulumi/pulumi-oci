// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Configs in Oracle Cloud Infrastructure Stack Monitoring service.
 *
 * Get a list of configurations in a compartment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testConfigs = oci.StackMonitoring.getConfigs({
 *     compartmentId: compartmentId,
 *     displayName: configDisplayName,
 *     state: configState,
 *     type: configType,
 * });
 * ```
 */
export function getConfigs(args: GetConfigsArgs, opts?: pulumi.InvokeOptions): Promise<GetConfigsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:StackMonitoring/getConfigs:getConfigs", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "state": args.state,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getConfigs.
 */
export interface GetConfigsArgs {
    /**
     * The ID of the compartment in which data is listed.
     */
    compartmentId: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.StackMonitoring.GetConfigsFilter[];
    /**
     * The current state of the Config.
     */
    state?: string;
    /**
     * A filter to return only configuration items for a given config type. The only valid config type is `"AUTO_PROMOTE"`
     */
    type?: string;
}

/**
 * A collection of values returned by getConfigs.
 */
export interface GetConfigsResult {
    /**
     * The OCID of the compartment containing the configuration.
     */
    readonly compartmentId: string;
    /**
     * The list of config_collection.
     */
    readonly configCollections: outputs.StackMonitoring.GetConfigsConfigCollection[];
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    readonly displayName?: string;
    readonly filters?: outputs.StackMonitoring.GetConfigsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The current state of the configuration.
     */
    readonly state?: string;
    readonly type?: string;
}
/**
 * This data source provides the list of Configs in Oracle Cloud Infrastructure Stack Monitoring service.
 *
 * Get a list of configurations in a compartment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testConfigs = oci.StackMonitoring.getConfigs({
 *     compartmentId: compartmentId,
 *     displayName: configDisplayName,
 *     state: configState,
 *     type: configType,
 * });
 * ```
 */
export function getConfigsOutput(args: GetConfigsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConfigsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:StackMonitoring/getConfigs:getConfigs", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "state": args.state,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getConfigs.
 */
export interface GetConfigsOutputArgs {
    /**
     * The ID of the compartment in which data is listed.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.StackMonitoring.GetConfigsFilterArgs>[]>;
    /**
     * The current state of the Config.
     */
    state?: pulumi.Input<string>;
    /**
     * A filter to return only configuration items for a given config type. The only valid config type is `"AUTO_PROMOTE"`
     */
    type?: pulumi.Input<string>;
}
