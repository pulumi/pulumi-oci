// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Metric Extensions in Oracle Cloud Infrastructure Stack Monitoring service.
 *
 * Returns a list of metric extensions
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMetricExtensions = oci.StackMonitoring.getMetricExtensions({
 *     compartmentId: compartmentId,
 *     enabledOnResourceId: testResource.id,
 *     name: metricExtensionName,
 *     resourceType: metricExtensionResourceType,
 *     state: metricExtensionState,
 *     status: metricExtensionStatus,
 * });
 * ```
 */
export function getMetricExtensions(args: GetMetricExtensionsArgs, opts?: pulumi.InvokeOptions): Promise<GetMetricExtensionsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:StackMonitoring/getMetricExtensions:getMetricExtensions", {
        "compartmentId": args.compartmentId,
        "enabledOnResourceId": args.enabledOnResourceId,
        "filters": args.filters,
        "name": args.name,
        "resourceType": args.resourceType,
        "state": args.state,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getMetricExtensions.
 */
export interface GetMetricExtensionsArgs {
    /**
     * The ID of the compartment in which data is listed.
     */
    compartmentId: string;
    /**
     * A filter to return metric extensions based on input resource Id on which metric extension is enabled
     */
    enabledOnResourceId?: string;
    filters?: inputs.StackMonitoring.GetMetricExtensionsFilter[];
    /**
     * A filter to return resources based on name.
     */
    name?: string;
    /**
     * A filter to return resources based on resource type.
     */
    resourceType?: string;
    /**
     * A filter to return metric extensions based on Lifecycle State
     */
    state?: string;
    /**
     * A filter to return resources based on status e.g. Draft or Published
     */
    status?: string;
}

/**
 * A collection of values returned by getMetricExtensions.
 */
export interface GetMetricExtensionsResult {
    /**
     * Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     */
    readonly compartmentId: string;
    readonly enabledOnResourceId?: string;
    readonly filters?: outputs.StackMonitoring.GetMetricExtensionsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The list of metric_extension_collection.
     */
    readonly metricExtensionCollections: outputs.StackMonitoring.GetMetricExtensionsMetricExtensionCollection[];
    /**
     * Name of the script file
     */
    readonly name?: string;
    /**
     * Resource type to which Metric Extension applies
     */
    readonly resourceType?: string;
    /**
     * The current lifecycle state of the metric extension
     */
    readonly state?: string;
    /**
     * The current status of the metric extension i.e. whether it is Draft or Published
     */
    readonly status?: string;
}
/**
 * This data source provides the list of Metric Extensions in Oracle Cloud Infrastructure Stack Monitoring service.
 *
 * Returns a list of metric extensions
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMetricExtensions = oci.StackMonitoring.getMetricExtensions({
 *     compartmentId: compartmentId,
 *     enabledOnResourceId: testResource.id,
 *     name: metricExtensionName,
 *     resourceType: metricExtensionResourceType,
 *     state: metricExtensionState,
 *     status: metricExtensionStatus,
 * });
 * ```
 */
export function getMetricExtensionsOutput(args: GetMetricExtensionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMetricExtensionsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:StackMonitoring/getMetricExtensions:getMetricExtensions", {
        "compartmentId": args.compartmentId,
        "enabledOnResourceId": args.enabledOnResourceId,
        "filters": args.filters,
        "name": args.name,
        "resourceType": args.resourceType,
        "state": args.state,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getMetricExtensions.
 */
export interface GetMetricExtensionsOutputArgs {
    /**
     * The ID of the compartment in which data is listed.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * A filter to return metric extensions based on input resource Id on which metric extension is enabled
     */
    enabledOnResourceId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.StackMonitoring.GetMetricExtensionsFilterArgs>[]>;
    /**
     * A filter to return resources based on name.
     */
    name?: pulumi.Input<string>;
    /**
     * A filter to return resources based on resource type.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * A filter to return metric extensions based on Lifecycle State
     */
    state?: pulumi.Input<string>;
    /**
     * A filter to return resources based on status e.g. Draft or Published
     */
    status?: pulumi.Input<string>;
}
