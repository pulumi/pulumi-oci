// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Monitoring Template Alarm Conditions in Oracle Cloud Infrastructure Stack Monitoring service.
 *
 * Returns a list of Alarm Conditions.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMonitoringTemplateAlarmConditions = oci.StackMonitoring.getMonitoringTemplateAlarmConditions({
 *     monitoringTemplateId: testMonitoringTemplate.id,
 *     metricNames: testMetric.name,
 *     resourceTypes: monitoringTemplateAlarmConditionResourceTypes,
 *     state: monitoringTemplateAlarmConditionState,
 *     status: monitoringTemplateAlarmConditionStatus,
 * });
 * ```
 */
export function getMonitoringTemplateAlarmConditions(args: GetMonitoringTemplateAlarmConditionsArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitoringTemplateAlarmConditionsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:StackMonitoring/getMonitoringTemplateAlarmConditions:getMonitoringTemplateAlarmConditions", {
        "alarmConditionId": args.alarmConditionId,
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "metricNames": args.metricNames,
        "monitoringTemplateId": args.monitoringTemplateId,
        "resourceTypes": args.resourceTypes,
        "state": args.state,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getMonitoringTemplateAlarmConditions.
 */
export interface GetMonitoringTemplateAlarmConditionsArgs {
    alarmConditionId: string;
    compartmentId?: string;
    filters?: inputs.StackMonitoring.GetMonitoringTemplateAlarmConditionsFilter[];
    /**
     * metricName filter.
     */
    metricNames?: string[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitoring template.
     */
    monitoringTemplateId: string;
    /**
     * Multiple resource types filter.
     */
    resourceTypes?: string[];
    /**
     * A filter to return alarm condition based on Lifecycle State.
     */
    state?: string;
    /**
     * A filter to return alarm condition based on input status.
     */
    status?: string;
}

/**
 * A collection of values returned by getMonitoringTemplateAlarmConditions.
 */
export interface GetMonitoringTemplateAlarmConditionsResult {
    /**
     * The list of alarm_condition_collection.
     */
    readonly alarmConditionCollections: outputs.StackMonitoring.GetMonitoringTemplateAlarmConditionsAlarmConditionCollection[];
    readonly alarmConditionId: string;
    readonly compartmentId?: string;
    readonly filters?: outputs.StackMonitoring.GetMonitoringTemplateAlarmConditionsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The metric name.
     */
    readonly metricNames?: string[];
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitoring template.
     */
    readonly monitoringTemplateId: string;
    readonly resourceTypes?: string[];
    /**
     * The current lifecycle state of the monitoring template
     */
    readonly state?: string;
    /**
     * The current status of the monitoring template i.e. whether it is Published or Unpublished
     */
    readonly status?: string;
}
/**
 * This data source provides the list of Monitoring Template Alarm Conditions in Oracle Cloud Infrastructure Stack Monitoring service.
 *
 * Returns a list of Alarm Conditions.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMonitoringTemplateAlarmConditions = oci.StackMonitoring.getMonitoringTemplateAlarmConditions({
 *     monitoringTemplateId: testMonitoringTemplate.id,
 *     metricNames: testMetric.name,
 *     resourceTypes: monitoringTemplateAlarmConditionResourceTypes,
 *     state: monitoringTemplateAlarmConditionState,
 *     status: monitoringTemplateAlarmConditionStatus,
 * });
 * ```
 */
export function getMonitoringTemplateAlarmConditionsOutput(args: GetMonitoringTemplateAlarmConditionsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMonitoringTemplateAlarmConditionsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:StackMonitoring/getMonitoringTemplateAlarmConditions:getMonitoringTemplateAlarmConditions", {
        "alarmConditionId": args.alarmConditionId,
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "metricNames": args.metricNames,
        "monitoringTemplateId": args.monitoringTemplateId,
        "resourceTypes": args.resourceTypes,
        "state": args.state,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getMonitoringTemplateAlarmConditions.
 */
export interface GetMonitoringTemplateAlarmConditionsOutputArgs {
    alarmConditionId: pulumi.Input<string>;
    compartmentId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.StackMonitoring.GetMonitoringTemplateAlarmConditionsFilterArgs>[]>;
    /**
     * metricName filter.
     */
    metricNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitoring template.
     */
    monitoringTemplateId: pulumi.Input<string>;
    /**
     * Multiple resource types filter.
     */
    resourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A filter to return alarm condition based on Lifecycle State.
     */
    state?: pulumi.Input<string>;
    /**
     * A filter to return alarm condition based on input status.
     */
    status?: pulumi.Input<string>;
}
