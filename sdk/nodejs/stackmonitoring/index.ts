// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BaselineableMetricArgs, BaselineableMetricState } from "./baselineableMetric";
export type BaselineableMetric = import("./baselineableMetric").BaselineableMetric;
export const BaselineableMetric: typeof import("./baselineableMetric").BaselineableMetric = null as any;
utilities.lazyLoad(exports, ["BaselineableMetric"], () => require("./baselineableMetric"));

export { ConfigArgs, ConfigState } from "./config";
export type Config = import("./config").Config;
export const Config: typeof import("./config").Config = null as any;
utilities.lazyLoad(exports, ["Config"], () => require("./config"));

export { DiscoveryJobArgs, DiscoveryJobState } from "./discoveryJob";
export type DiscoveryJob = import("./discoveryJob").DiscoveryJob;
export const DiscoveryJob: typeof import("./discoveryJob").DiscoveryJob = null as any;
utilities.lazyLoad(exports, ["DiscoveryJob"], () => require("./discoveryJob"));

export { GetBaselineableMetricArgs, GetBaselineableMetricResult, GetBaselineableMetricOutputArgs } from "./getBaselineableMetric";
export const getBaselineableMetric: typeof import("./getBaselineableMetric").getBaselineableMetric = null as any;
export const getBaselineableMetricOutput: typeof import("./getBaselineableMetric").getBaselineableMetricOutput = null as any;
utilities.lazyLoad(exports, ["getBaselineableMetric","getBaselineableMetricOutput"], () => require("./getBaselineableMetric"));

export { GetBaselineableMetricsArgs, GetBaselineableMetricsResult, GetBaselineableMetricsOutputArgs } from "./getBaselineableMetrics";
export const getBaselineableMetrics: typeof import("./getBaselineableMetrics").getBaselineableMetrics = null as any;
export const getBaselineableMetricsOutput: typeof import("./getBaselineableMetrics").getBaselineableMetricsOutput = null as any;
utilities.lazyLoad(exports, ["getBaselineableMetrics","getBaselineableMetricsOutput"], () => require("./getBaselineableMetrics"));

export { GetBaselineableMetricsEvaluateArgs, GetBaselineableMetricsEvaluateResult, GetBaselineableMetricsEvaluateOutputArgs } from "./getBaselineableMetricsEvaluate";
export const getBaselineableMetricsEvaluate: typeof import("./getBaselineableMetricsEvaluate").getBaselineableMetricsEvaluate = null as any;
export const getBaselineableMetricsEvaluateOutput: typeof import("./getBaselineableMetricsEvaluate").getBaselineableMetricsEvaluateOutput = null as any;
utilities.lazyLoad(exports, ["getBaselineableMetricsEvaluate","getBaselineableMetricsEvaluateOutput"], () => require("./getBaselineableMetricsEvaluate"));

export { GetConfigArgs, GetConfigResult, GetConfigOutputArgs } from "./getConfig";
export const getConfig: typeof import("./getConfig").getConfig = null as any;
export const getConfigOutput: typeof import("./getConfig").getConfigOutput = null as any;
utilities.lazyLoad(exports, ["getConfig","getConfigOutput"], () => require("./getConfig"));

export { GetConfigsArgs, GetConfigsResult, GetConfigsOutputArgs } from "./getConfigs";
export const getConfigs: typeof import("./getConfigs").getConfigs = null as any;
export const getConfigsOutput: typeof import("./getConfigs").getConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getConfigs","getConfigsOutput"], () => require("./getConfigs"));

export { GetDefinedMonitoringTemplatesArgs, GetDefinedMonitoringTemplatesResult, GetDefinedMonitoringTemplatesOutputArgs } from "./getDefinedMonitoringTemplates";
export const getDefinedMonitoringTemplates: typeof import("./getDefinedMonitoringTemplates").getDefinedMonitoringTemplates = null as any;
export const getDefinedMonitoringTemplatesOutput: typeof import("./getDefinedMonitoringTemplates").getDefinedMonitoringTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getDefinedMonitoringTemplates","getDefinedMonitoringTemplatesOutput"], () => require("./getDefinedMonitoringTemplates"));

export { GetDiscoveryJobArgs, GetDiscoveryJobResult, GetDiscoveryJobOutputArgs } from "./getDiscoveryJob";
export const getDiscoveryJob: typeof import("./getDiscoveryJob").getDiscoveryJob = null as any;
export const getDiscoveryJobOutput: typeof import("./getDiscoveryJob").getDiscoveryJobOutput = null as any;
utilities.lazyLoad(exports, ["getDiscoveryJob","getDiscoveryJobOutput"], () => require("./getDiscoveryJob"));

export { GetDiscoveryJobLogsArgs, GetDiscoveryJobLogsResult, GetDiscoveryJobLogsOutputArgs } from "./getDiscoveryJobLogs";
export const getDiscoveryJobLogs: typeof import("./getDiscoveryJobLogs").getDiscoveryJobLogs = null as any;
export const getDiscoveryJobLogsOutput: typeof import("./getDiscoveryJobLogs").getDiscoveryJobLogsOutput = null as any;
utilities.lazyLoad(exports, ["getDiscoveryJobLogs","getDiscoveryJobLogsOutput"], () => require("./getDiscoveryJobLogs"));

export { GetDiscoveryJobsArgs, GetDiscoveryJobsResult, GetDiscoveryJobsOutputArgs } from "./getDiscoveryJobs";
export const getDiscoveryJobs: typeof import("./getDiscoveryJobs").getDiscoveryJobs = null as any;
export const getDiscoveryJobsOutput: typeof import("./getDiscoveryJobs").getDiscoveryJobsOutput = null as any;
utilities.lazyLoad(exports, ["getDiscoveryJobs","getDiscoveryJobsOutput"], () => require("./getDiscoveryJobs"));

export { GetMaintenanceWindowArgs, GetMaintenanceWindowResult, GetMaintenanceWindowOutputArgs } from "./getMaintenanceWindow";
export const getMaintenanceWindow: typeof import("./getMaintenanceWindow").getMaintenanceWindow = null as any;
export const getMaintenanceWindowOutput: typeof import("./getMaintenanceWindow").getMaintenanceWindowOutput = null as any;
utilities.lazyLoad(exports, ["getMaintenanceWindow","getMaintenanceWindowOutput"], () => require("./getMaintenanceWindow"));

export { GetMaintenanceWindowsArgs, GetMaintenanceWindowsResult, GetMaintenanceWindowsOutputArgs } from "./getMaintenanceWindows";
export const getMaintenanceWindows: typeof import("./getMaintenanceWindows").getMaintenanceWindows = null as any;
export const getMaintenanceWindowsOutput: typeof import("./getMaintenanceWindows").getMaintenanceWindowsOutput = null as any;
utilities.lazyLoad(exports, ["getMaintenanceWindows","getMaintenanceWindowsOutput"], () => require("./getMaintenanceWindows"));

export { GetMetricExtensionArgs, GetMetricExtensionResult, GetMetricExtensionOutputArgs } from "./getMetricExtension";
export const getMetricExtension: typeof import("./getMetricExtension").getMetricExtension = null as any;
export const getMetricExtensionOutput: typeof import("./getMetricExtension").getMetricExtensionOutput = null as any;
utilities.lazyLoad(exports, ["getMetricExtension","getMetricExtensionOutput"], () => require("./getMetricExtension"));

export { GetMetricExtensionsArgs, GetMetricExtensionsResult, GetMetricExtensionsOutputArgs } from "./getMetricExtensions";
export const getMetricExtensions: typeof import("./getMetricExtensions").getMetricExtensions = null as any;
export const getMetricExtensionsOutput: typeof import("./getMetricExtensions").getMetricExtensionsOutput = null as any;
utilities.lazyLoad(exports, ["getMetricExtensions","getMetricExtensionsOutput"], () => require("./getMetricExtensions"));

export { GetMonitoredResourceArgs, GetMonitoredResourceResult, GetMonitoredResourceOutputArgs } from "./getMonitoredResource";
export const getMonitoredResource: typeof import("./getMonitoredResource").getMonitoredResource = null as any;
export const getMonitoredResourceOutput: typeof import("./getMonitoredResource").getMonitoredResourceOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoredResource","getMonitoredResourceOutput"], () => require("./getMonitoredResource"));

export { GetMonitoredResourceTaskArgs, GetMonitoredResourceTaskResult, GetMonitoredResourceTaskOutputArgs } from "./getMonitoredResourceTask";
export const getMonitoredResourceTask: typeof import("./getMonitoredResourceTask").getMonitoredResourceTask = null as any;
export const getMonitoredResourceTaskOutput: typeof import("./getMonitoredResourceTask").getMonitoredResourceTaskOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoredResourceTask","getMonitoredResourceTaskOutput"], () => require("./getMonitoredResourceTask"));

export { GetMonitoredResourceTasksArgs, GetMonitoredResourceTasksResult, GetMonitoredResourceTasksOutputArgs } from "./getMonitoredResourceTasks";
export const getMonitoredResourceTasks: typeof import("./getMonitoredResourceTasks").getMonitoredResourceTasks = null as any;
export const getMonitoredResourceTasksOutput: typeof import("./getMonitoredResourceTasks").getMonitoredResourceTasksOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoredResourceTasks","getMonitoredResourceTasksOutput"], () => require("./getMonitoredResourceTasks"));

export { GetMonitoredResourceTypeArgs, GetMonitoredResourceTypeResult, GetMonitoredResourceTypeOutputArgs } from "./getMonitoredResourceType";
export const getMonitoredResourceType: typeof import("./getMonitoredResourceType").getMonitoredResourceType = null as any;
export const getMonitoredResourceTypeOutput: typeof import("./getMonitoredResourceType").getMonitoredResourceTypeOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoredResourceType","getMonitoredResourceTypeOutput"], () => require("./getMonitoredResourceType"));

export { GetMonitoredResourceTypesArgs, GetMonitoredResourceTypesResult, GetMonitoredResourceTypesOutputArgs } from "./getMonitoredResourceTypes";
export const getMonitoredResourceTypes: typeof import("./getMonitoredResourceTypes").getMonitoredResourceTypes = null as any;
export const getMonitoredResourceTypesOutput: typeof import("./getMonitoredResourceTypes").getMonitoredResourceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoredResourceTypes","getMonitoredResourceTypesOutput"], () => require("./getMonitoredResourceTypes"));

export { GetMonitoredResourcesArgs, GetMonitoredResourcesResult, GetMonitoredResourcesOutputArgs } from "./getMonitoredResources";
export const getMonitoredResources: typeof import("./getMonitoredResources").getMonitoredResources = null as any;
export const getMonitoredResourcesOutput: typeof import("./getMonitoredResources").getMonitoredResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoredResources","getMonitoredResourcesOutput"], () => require("./getMonitoredResources"));

export { GetMonitoringTemplateArgs, GetMonitoringTemplateResult, GetMonitoringTemplateOutputArgs } from "./getMonitoringTemplate";
export const getMonitoringTemplate: typeof import("./getMonitoringTemplate").getMonitoringTemplate = null as any;
export const getMonitoringTemplateOutput: typeof import("./getMonitoringTemplate").getMonitoringTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringTemplate","getMonitoringTemplateOutput"], () => require("./getMonitoringTemplate"));

export { GetMonitoringTemplateAlarmConditionArgs, GetMonitoringTemplateAlarmConditionResult, GetMonitoringTemplateAlarmConditionOutputArgs } from "./getMonitoringTemplateAlarmCondition";
export const getMonitoringTemplateAlarmCondition: typeof import("./getMonitoringTemplateAlarmCondition").getMonitoringTemplateAlarmCondition = null as any;
export const getMonitoringTemplateAlarmConditionOutput: typeof import("./getMonitoringTemplateAlarmCondition").getMonitoringTemplateAlarmConditionOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringTemplateAlarmCondition","getMonitoringTemplateAlarmConditionOutput"], () => require("./getMonitoringTemplateAlarmCondition"));

export { GetMonitoringTemplateAlarmConditionsArgs, GetMonitoringTemplateAlarmConditionsResult, GetMonitoringTemplateAlarmConditionsOutputArgs } from "./getMonitoringTemplateAlarmConditions";
export const getMonitoringTemplateAlarmConditions: typeof import("./getMonitoringTemplateAlarmConditions").getMonitoringTemplateAlarmConditions = null as any;
export const getMonitoringTemplateAlarmConditionsOutput: typeof import("./getMonitoringTemplateAlarmConditions").getMonitoringTemplateAlarmConditionsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringTemplateAlarmConditions","getMonitoringTemplateAlarmConditionsOutput"], () => require("./getMonitoringTemplateAlarmConditions"));

export { GetMonitoringTemplatesArgs, GetMonitoringTemplatesResult, GetMonitoringTemplatesOutputArgs } from "./getMonitoringTemplates";
export const getMonitoringTemplates: typeof import("./getMonitoringTemplates").getMonitoringTemplates = null as any;
export const getMonitoringTemplatesOutput: typeof import("./getMonitoringTemplates").getMonitoringTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringTemplates","getMonitoringTemplatesOutput"], () => require("./getMonitoringTemplates"));

export { GetProcessSetArgs, GetProcessSetResult, GetProcessSetOutputArgs } from "./getProcessSet";
export const getProcessSet: typeof import("./getProcessSet").getProcessSet = null as any;
export const getProcessSetOutput: typeof import("./getProcessSet").getProcessSetOutput = null as any;
utilities.lazyLoad(exports, ["getProcessSet","getProcessSetOutput"], () => require("./getProcessSet"));

export { GetProcessSetsArgs, GetProcessSetsResult, GetProcessSetsOutputArgs } from "./getProcessSets";
export const getProcessSets: typeof import("./getProcessSets").getProcessSets = null as any;
export const getProcessSetsOutput: typeof import("./getProcessSets").getProcessSetsOutput = null as any;
utilities.lazyLoad(exports, ["getProcessSets","getProcessSetsOutput"], () => require("./getProcessSets"));

export { MaintenanceWindowArgs, MaintenanceWindowState } from "./maintenanceWindow";
export type MaintenanceWindow = import("./maintenanceWindow").MaintenanceWindow;
export const MaintenanceWindow: typeof import("./maintenanceWindow").MaintenanceWindow = null as any;
utilities.lazyLoad(exports, ["MaintenanceWindow"], () => require("./maintenanceWindow"));

export { MaintenanceWindowsRetryFailedOperationArgs, MaintenanceWindowsRetryFailedOperationState } from "./maintenanceWindowsRetryFailedOperation";
export type MaintenanceWindowsRetryFailedOperation = import("./maintenanceWindowsRetryFailedOperation").MaintenanceWindowsRetryFailedOperation;
export const MaintenanceWindowsRetryFailedOperation: typeof import("./maintenanceWindowsRetryFailedOperation").MaintenanceWindowsRetryFailedOperation = null as any;
utilities.lazyLoad(exports, ["MaintenanceWindowsRetryFailedOperation"], () => require("./maintenanceWindowsRetryFailedOperation"));

export { MaintenanceWindowsStopArgs, MaintenanceWindowsStopState } from "./maintenanceWindowsStop";
export type MaintenanceWindowsStop = import("./maintenanceWindowsStop").MaintenanceWindowsStop;
export const MaintenanceWindowsStop: typeof import("./maintenanceWindowsStop").MaintenanceWindowsStop = null as any;
utilities.lazyLoad(exports, ["MaintenanceWindowsStop"], () => require("./maintenanceWindowsStop"));

export { MetricExtensionArgs, MetricExtensionState } from "./metricExtension";
export type MetricExtension = import("./metricExtension").MetricExtension;
export const MetricExtension: typeof import("./metricExtension").MetricExtension = null as any;
utilities.lazyLoad(exports, ["MetricExtension"], () => require("./metricExtension"));

export { MetricExtensionMetricExtensionOnGivenResourcesManagementArgs, MetricExtensionMetricExtensionOnGivenResourcesManagementState } from "./metricExtensionMetricExtensionOnGivenResourcesManagement";
export type MetricExtensionMetricExtensionOnGivenResourcesManagement = import("./metricExtensionMetricExtensionOnGivenResourcesManagement").MetricExtensionMetricExtensionOnGivenResourcesManagement;
export const MetricExtensionMetricExtensionOnGivenResourcesManagement: typeof import("./metricExtensionMetricExtensionOnGivenResourcesManagement").MetricExtensionMetricExtensionOnGivenResourcesManagement = null as any;
utilities.lazyLoad(exports, ["MetricExtensionMetricExtensionOnGivenResourcesManagement"], () => require("./metricExtensionMetricExtensionOnGivenResourcesManagement"));

export { MetricExtensionsTestManagementArgs, MetricExtensionsTestManagementState } from "./metricExtensionsTestManagement";
export type MetricExtensionsTestManagement = import("./metricExtensionsTestManagement").MetricExtensionsTestManagement;
export const MetricExtensionsTestManagement: typeof import("./metricExtensionsTestManagement").MetricExtensionsTestManagement = null as any;
utilities.lazyLoad(exports, ["MetricExtensionsTestManagement"], () => require("./metricExtensionsTestManagement"));

export { MonitoredResourceArgs, MonitoredResourceState } from "./monitoredResource";
export type MonitoredResource = import("./monitoredResource").MonitoredResource;
export const MonitoredResource: typeof import("./monitoredResource").MonitoredResource = null as any;
utilities.lazyLoad(exports, ["MonitoredResource"], () => require("./monitoredResource"));

export { MonitoredResourceTaskArgs, MonitoredResourceTaskState } from "./monitoredResourceTask";
export type MonitoredResourceTask = import("./monitoredResourceTask").MonitoredResourceTask;
export const MonitoredResourceTask: typeof import("./monitoredResourceTask").MonitoredResourceTask = null as any;
utilities.lazyLoad(exports, ["MonitoredResourceTask"], () => require("./monitoredResourceTask"));

export { MonitoredResourceTypeArgs, MonitoredResourceTypeState } from "./monitoredResourceType";
export type MonitoredResourceType = import("./monitoredResourceType").MonitoredResourceType;
export const MonitoredResourceType: typeof import("./monitoredResourceType").MonitoredResourceType = null as any;
utilities.lazyLoad(exports, ["MonitoredResourceType"], () => require("./monitoredResourceType"));

export { MonitoredResourcesAssociateMonitoredResourceArgs, MonitoredResourcesAssociateMonitoredResourceState } from "./monitoredResourcesAssociateMonitoredResource";
export type MonitoredResourcesAssociateMonitoredResource = import("./monitoredResourcesAssociateMonitoredResource").MonitoredResourcesAssociateMonitoredResource;
export const MonitoredResourcesAssociateMonitoredResource: typeof import("./monitoredResourcesAssociateMonitoredResource").MonitoredResourcesAssociateMonitoredResource = null as any;
utilities.lazyLoad(exports, ["MonitoredResourcesAssociateMonitoredResource"], () => require("./monitoredResourcesAssociateMonitoredResource"));

export { MonitoredResourcesListMemberArgs, MonitoredResourcesListMemberState } from "./monitoredResourcesListMember";
export type MonitoredResourcesListMember = import("./monitoredResourcesListMember").MonitoredResourcesListMember;
export const MonitoredResourcesListMember: typeof import("./monitoredResourcesListMember").MonitoredResourcesListMember = null as any;
utilities.lazyLoad(exports, ["MonitoredResourcesListMember"], () => require("./monitoredResourcesListMember"));

export { MonitoredResourcesSearchArgs, MonitoredResourcesSearchState } from "./monitoredResourcesSearch";
export type MonitoredResourcesSearch = import("./monitoredResourcesSearch").MonitoredResourcesSearch;
export const MonitoredResourcesSearch: typeof import("./monitoredResourcesSearch").MonitoredResourcesSearch = null as any;
utilities.lazyLoad(exports, ["MonitoredResourcesSearch"], () => require("./monitoredResourcesSearch"));

export { MonitoredResourcesSearchAssociationArgs, MonitoredResourcesSearchAssociationState } from "./monitoredResourcesSearchAssociation";
export type MonitoredResourcesSearchAssociation = import("./monitoredResourcesSearchAssociation").MonitoredResourcesSearchAssociation;
export const MonitoredResourcesSearchAssociation: typeof import("./monitoredResourcesSearchAssociation").MonitoredResourcesSearchAssociation = null as any;
utilities.lazyLoad(exports, ["MonitoredResourcesSearchAssociation"], () => require("./monitoredResourcesSearchAssociation"));

export { MonitoringTemplateArgs, MonitoringTemplateState } from "./monitoringTemplate";
export type MonitoringTemplate = import("./monitoringTemplate").MonitoringTemplate;
export const MonitoringTemplate: typeof import("./monitoringTemplate").MonitoringTemplate = null as any;
utilities.lazyLoad(exports, ["MonitoringTemplate"], () => require("./monitoringTemplate"));

export { MonitoringTemplateAlarmConditionArgs, MonitoringTemplateAlarmConditionState } from "./monitoringTemplateAlarmCondition";
export type MonitoringTemplateAlarmCondition = import("./monitoringTemplateAlarmCondition").MonitoringTemplateAlarmCondition;
export const MonitoringTemplateAlarmCondition: typeof import("./monitoringTemplateAlarmCondition").MonitoringTemplateAlarmCondition = null as any;
utilities.lazyLoad(exports, ["MonitoringTemplateAlarmCondition"], () => require("./monitoringTemplateAlarmCondition"));

export { MonitoringTemplateMonitoringTemplateOnGivenResourcesManagementArgs, MonitoringTemplateMonitoringTemplateOnGivenResourcesManagementState } from "./monitoringTemplateMonitoringTemplateOnGivenResourcesManagement";
export type MonitoringTemplateMonitoringTemplateOnGivenResourcesManagement = import("./monitoringTemplateMonitoringTemplateOnGivenResourcesManagement").MonitoringTemplateMonitoringTemplateOnGivenResourcesManagement;
export const MonitoringTemplateMonitoringTemplateOnGivenResourcesManagement: typeof import("./monitoringTemplateMonitoringTemplateOnGivenResourcesManagement").MonitoringTemplateMonitoringTemplateOnGivenResourcesManagement = null as any;
utilities.lazyLoad(exports, ["MonitoringTemplateMonitoringTemplateOnGivenResourcesManagement"], () => require("./monitoringTemplateMonitoringTemplateOnGivenResourcesManagement"));

export { ProcessSetArgs, ProcessSetState } from "./processSet";
export type ProcessSet = import("./processSet").ProcessSet;
export const ProcessSet: typeof import("./processSet").ProcessSet = null as any;
utilities.lazyLoad(exports, ["ProcessSet"], () => require("./processSet"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:StackMonitoring/baselineableMetric:BaselineableMetric":
                return new BaselineableMetric(name, <any>undefined, { urn })
            case "oci:StackMonitoring/config:Config":
                return new Config(name, <any>undefined, { urn })
            case "oci:StackMonitoring/discoveryJob:DiscoveryJob":
                return new DiscoveryJob(name, <any>undefined, { urn })
            case "oci:StackMonitoring/maintenanceWindow:MaintenanceWindow":
                return new MaintenanceWindow(name, <any>undefined, { urn })
            case "oci:StackMonitoring/maintenanceWindowsRetryFailedOperation:MaintenanceWindowsRetryFailedOperation":
                return new MaintenanceWindowsRetryFailedOperation(name, <any>undefined, { urn })
            case "oci:StackMonitoring/maintenanceWindowsStop:MaintenanceWindowsStop":
                return new MaintenanceWindowsStop(name, <any>undefined, { urn })
            case "oci:StackMonitoring/metricExtension:MetricExtension":
                return new MetricExtension(name, <any>undefined, { urn })
            case "oci:StackMonitoring/metricExtensionMetricExtensionOnGivenResourcesManagement:MetricExtensionMetricExtensionOnGivenResourcesManagement":
                return new MetricExtensionMetricExtensionOnGivenResourcesManagement(name, <any>undefined, { urn })
            case "oci:StackMonitoring/metricExtensionsTestManagement:MetricExtensionsTestManagement":
                return new MetricExtensionsTestManagement(name, <any>undefined, { urn })
            case "oci:StackMonitoring/monitoredResource:MonitoredResource":
                return new MonitoredResource(name, <any>undefined, { urn })
            case "oci:StackMonitoring/monitoredResourceTask:MonitoredResourceTask":
                return new MonitoredResourceTask(name, <any>undefined, { urn })
            case "oci:StackMonitoring/monitoredResourceType:MonitoredResourceType":
                return new MonitoredResourceType(name, <any>undefined, { urn })
            case "oci:StackMonitoring/monitoredResourcesAssociateMonitoredResource:MonitoredResourcesAssociateMonitoredResource":
                return new MonitoredResourcesAssociateMonitoredResource(name, <any>undefined, { urn })
            case "oci:StackMonitoring/monitoredResourcesListMember:MonitoredResourcesListMember":
                return new MonitoredResourcesListMember(name, <any>undefined, { urn })
            case "oci:StackMonitoring/monitoredResourcesSearch:MonitoredResourcesSearch":
                return new MonitoredResourcesSearch(name, <any>undefined, { urn })
            case "oci:StackMonitoring/monitoredResourcesSearchAssociation:MonitoredResourcesSearchAssociation":
                return new MonitoredResourcesSearchAssociation(name, <any>undefined, { urn })
            case "oci:StackMonitoring/monitoringTemplate:MonitoringTemplate":
                return new MonitoringTemplate(name, <any>undefined, { urn })
            case "oci:StackMonitoring/monitoringTemplateAlarmCondition:MonitoringTemplateAlarmCondition":
                return new MonitoringTemplateAlarmCondition(name, <any>undefined, { urn })
            case "oci:StackMonitoring/monitoringTemplateMonitoringTemplateOnGivenResourcesManagement:MonitoringTemplateMonitoringTemplateOnGivenResourcesManagement":
                return new MonitoringTemplateMonitoringTemplateOnGivenResourcesManagement(name, <any>undefined, { urn })
            case "oci:StackMonitoring/processSet:ProcessSet":
                return new ProcessSet(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/baselineableMetric", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/config", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/discoveryJob", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/maintenanceWindow", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/maintenanceWindowsRetryFailedOperation", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/maintenanceWindowsStop", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/metricExtension", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/metricExtensionMetricExtensionOnGivenResourcesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/metricExtensionsTestManagement", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/monitoredResource", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/monitoredResourceTask", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/monitoredResourceType", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/monitoredResourcesAssociateMonitoredResource", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/monitoredResourcesListMember", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/monitoredResourcesSearch", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/monitoredResourcesSearchAssociation", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/monitoringTemplate", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/monitoringTemplateAlarmCondition", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/monitoringTemplateMonitoringTemplateOnGivenResourcesManagement", _module)
pulumi.runtime.registerResourceModule("oci", "StackMonitoring/processSet", _module)
