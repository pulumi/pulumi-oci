// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Maintenance Window resource in Oracle Cloud Infrastructure Stack Monitoring service.
 *
 * Creates a new Maintenance Window for the given resources. It will create also the
 * Alarms Suppression for each alarm that the resource migth trigger.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMaintenanceWindow = new oci.stackmonitoring.MaintenanceWindow("test_maintenance_window", {
 *     compartmentId: compartmentId,
 *     name: maintenanceWindowName,
 *     resources: [{
 *         resourceId: testResource.id,
 *         areMembersIncluded: maintenanceWindowResourcesAreMembersIncluded,
 *     }],
 *     schedule: {
 *         scheduleType: maintenanceWindowScheduleScheduleType,
 *         maintenanceWindowDuration: maintenanceWindowScheduleMaintenanceWindowDuration,
 *         maintenanceWindowRecurrences: maintenanceWindowScheduleMaintenanceWindowRecurrences,
 *         timeMaintenanceWindowEnd: maintenanceWindowScheduleTimeMaintenanceWindowEnd,
 *         timeMaintenanceWindowStart: maintenanceWindowScheduleTimeMaintenanceWindowStart,
 *     },
 *     definedTags: {
 *         "foo-namespace.bar-key": "value",
 *     },
 *     description: maintenanceWindowDescription,
 *     freeformTags: {
 *         "bar-key": "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * MaintenanceWindows can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:StackMonitoring/maintenanceWindow:MaintenanceWindow test_maintenance_window "id"
 * ```
 */
export class MaintenanceWindow extends pulumi.CustomResource {
    /**
     * Get an existing MaintenanceWindow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MaintenanceWindowState, opts?: pulumi.CustomResourceOptions): MaintenanceWindow {
        return new MaintenanceWindow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:StackMonitoring/maintenanceWindow:MaintenanceWindow';

    /**
     * Returns true if the given object is an instance of MaintenanceWindow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MaintenanceWindow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MaintenanceWindow.__pulumiType;
    }

    /**
     * Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    declare public readonly definedTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) Maintenance Window description.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    declare public readonly freeformTags: pulumi.Output<{[key: string]: string}>;
    /**
     * Lifecycle Details of the Maintenance Window.
     */
    declare public /*out*/ readonly lifecycleDetails: pulumi.Output<string>;
    /**
     * Maintenance Window name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * (Updatable) List of resource Ids which are part of the Maintenance Window
     */
    declare public readonly resources: pulumi.Output<outputs.StackMonitoring.MaintenanceWindowResource[]>;
    /**
     * List of resource details that are part of the Maintenance Window.
     */
    declare public /*out*/ readonly resourcesDetails: pulumi.Output<outputs.StackMonitoring.MaintenanceWindowResourcesDetail[]>;
    /**
     * (Updatable) Schedule information of the Maintenance Window
     */
    declare public readonly schedule: pulumi.Output<outputs.StackMonitoring.MaintenanceWindowSchedule>;
    /**
     * Lifecycle state of the monitored resource.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    declare public /*out*/ readonly systemTags: pulumi.Output<{[key: string]: string}>;
    /**
     * The time the the maintenance window was created. An RFC3339 formatted datetime string
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * The time the the mainteance window was updated. An RFC3339 formatted datetime string
     */
    declare public /*out*/ readonly timeUpdated: pulumi.Output<string>;

    /**
     * Create a MaintenanceWindow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MaintenanceWindowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MaintenanceWindowArgs | MaintenanceWindowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MaintenanceWindowState | undefined;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["definedTags"] = state?.definedTags;
            resourceInputs["description"] = state?.description;
            resourceInputs["freeformTags"] = state?.freeformTags;
            resourceInputs["lifecycleDetails"] = state?.lifecycleDetails;
            resourceInputs["name"] = state?.name;
            resourceInputs["resources"] = state?.resources;
            resourceInputs["resourcesDetails"] = state?.resourcesDetails;
            resourceInputs["schedule"] = state?.schedule;
            resourceInputs["state"] = state?.state;
            resourceInputs["systemTags"] = state?.systemTags;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeUpdated"] = state?.timeUpdated;
        } else {
            const args = argsOrState as MaintenanceWindowArgs | undefined;
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.resources === undefined && !opts.urn) {
                throw new Error("Missing required property 'resources'");
            }
            if (args?.schedule === undefined && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["definedTags"] = args?.definedTags;
            resourceInputs["description"] = args?.description;
            resourceInputs["freeformTags"] = args?.freeformTags;
            resourceInputs["name"] = args?.name;
            resourceInputs["resources"] = args?.resources;
            resourceInputs["schedule"] = args?.schedule;
            resourceInputs["lifecycleDetails"] = undefined /*out*/;
            resourceInputs["resourcesDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["systemTags"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MaintenanceWindow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MaintenanceWindow resources.
 */
export interface MaintenanceWindowState {
    /**
     * Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Maintenance Window description.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Lifecycle Details of the Maintenance Window.
     */
    lifecycleDetails?: pulumi.Input<string>;
    /**
     * Maintenance Window name.
     */
    name?: pulumi.Input<string>;
    /**
     * (Updatable) List of resource Ids which are part of the Maintenance Window
     */
    resources?: pulumi.Input<pulumi.Input<inputs.StackMonitoring.MaintenanceWindowResource>[]>;
    /**
     * List of resource details that are part of the Maintenance Window.
     */
    resourcesDetails?: pulumi.Input<pulumi.Input<inputs.StackMonitoring.MaintenanceWindowResourcesDetail>[]>;
    /**
     * (Updatable) Schedule information of the Maintenance Window
     */
    schedule?: pulumi.Input<inputs.StackMonitoring.MaintenanceWindowSchedule>;
    /**
     * Lifecycle state of the monitored resource.
     */
    state?: pulumi.Input<string>;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    systemTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time the the maintenance window was created. An RFC3339 formatted datetime string
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The time the the mainteance window was updated. An RFC3339 formatted datetime string
     */
    timeUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MaintenanceWindow resource.
 */
export interface MaintenanceWindowArgs {
    /**
     * Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) Maintenance Window description.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maintenance Window name.
     */
    name?: pulumi.Input<string>;
    /**
     * (Updatable) List of resource Ids which are part of the Maintenance Window
     */
    resources: pulumi.Input<pulumi.Input<inputs.StackMonitoring.MaintenanceWindowResource>[]>;
    /**
     * (Updatable) Schedule information of the Maintenance Window
     */
    schedule: pulumi.Input<inputs.StackMonitoring.MaintenanceWindowSchedule>;
}
