// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Metric Extension resource in Oracle Cloud Infrastructure Stack Monitoring service.
 *
 * Creates a new metric extension resource for a given compartment
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testMetricExtension = new oci.stackmonitoring.MetricExtension("test_metric_extension", {
 *     collectionRecurrences: metricExtensionCollectionRecurrences,
 *     compartmentId: compartmentId,
 *     displayName: metricExtensionDisplayName,
 *     metricLists: [{
 *         dataType: metricExtensionMetricListDataType,
 *         name: metricExtensionMetricListName,
 *         computeExpression: metricExtensionMetricListComputeExpression,
 *         displayName: metricExtensionMetricListDisplayName,
 *         isDimension: metricExtensionMetricListIsDimension,
 *         isHidden: metricExtensionMetricListIsHidden,
 *         metricCategory: metricExtensionMetricListMetricCategory,
 *         unit: metricExtensionMetricListUnit,
 *     }],
 *     name: metricExtensionName,
 *     queryProperties: {
 *         collectionMethod: metricExtensionQueryPropertiesCollectionMethod,
 *         arguments: metricExtensionQueryPropertiesArguments,
 *         autoRowPrefix: metricExtensionQueryPropertiesAutoRowPrefix,
 *         command: metricExtensionQueryPropertiesCommand,
 *         delimiter: metricExtensionQueryPropertiesDelimiter,
 *         identityMetric: metricExtensionQueryPropertiesIdentityMetric,
 *         inParamDetails: [{
 *             inParamPosition: metricExtensionQueryPropertiesInParamDetailsInParamPosition,
 *             inParamValue: metricExtensionQueryPropertiesInParamDetailsInParamValue,
 *         }],
 *         isMetricServiceEnabled: metricExtensionQueryPropertiesIsMetricServiceEnabled,
 *         jmxAttributes: metricExtensionQueryPropertiesJmxAttributes,
 *         managedBeanQuery: metricExtensionQueryPropertiesManagedBeanQuery,
 *         outParamDetails: {
 *             outParamName: metricExtensionQueryPropertiesOutParamDetailsOutParamName,
 *             outParamPosition: metricExtensionQueryPropertiesOutParamDetailsOutParamPosition,
 *             outParamType: metricExtensionQueryPropertiesOutParamDetailsOutParamType,
 *         },
 *         protocolType: metricExtensionQueryPropertiesProtocolType,
 *         responseContentType: metricExtensionQueryPropertiesResponseContentType,
 *         scriptDetails: {
 *             content: metricExtensionQueryPropertiesScriptDetailsContent,
 *             name: metricExtensionQueryPropertiesScriptDetailsName,
 *         },
 *         sqlDetails: {
 *             content: metricExtensionQueryPropertiesSqlDetailsContent,
 *             scriptFileName: metricExtensionQueryPropertiesSqlDetailsScriptFileName,
 *         },
 *         sqlType: metricExtensionQueryPropertiesSqlType,
 *         startsWith: metricExtensionQueryPropertiesStartsWith,
 *         url: metricExtensionQueryPropertiesUrl,
 *     },
 *     resourceType: metricExtensionResourceType,
 *     description: metricExtensionDescription,
 * });
 * ```
 *
 * ## Import
 *
 * MetricExtensions can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:StackMonitoring/metricExtension:MetricExtension test_metric_extension "id"
 * ```
 */
export class MetricExtension extends pulumi.CustomResource {
    /**
     * Get an existing MetricExtension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricExtensionState, opts?: pulumi.CustomResourceOptions): MetricExtension {
        return new MetricExtension(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:StackMonitoring/metricExtension:MetricExtension';

    /**
     * Returns true if the given object is an instance of MetricExtension.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricExtension {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricExtension.__pulumiType;
    }

    /**
     * Type of possible collection methods.
     */
    public /*out*/ readonly collectionMethod!: pulumi.Output<string>;
    /**
     * (Updatable) Schedule of metric extension should use RFC 5545 format i.e. recur-rule-part = "FREQ";INTERVAL where FREQ rule part identifies the type of recurrence rule. Valid values are "MINUTELY","HOURLY","DAILY" to specify repeating events based on an interval of a minute, an hour and a day or more. Example- FREQ=DAILY;INTERVAL=1
     */
    public readonly collectionRecurrences!: pulumi.Output<string>;
    /**
     * (Updatable) Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     */
    public readonly compartmentId!: pulumi.Output<string>;
    /**
     * Created by user
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * (Updatable) Description of the metric extension.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * (Updatable) Metric Extension display name.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * List of resource details objects having resourceIds on which this metric extension is enabled.
     */
    public /*out*/ readonly enabledOnResources!: pulumi.Output<outputs.StackMonitoring.MetricExtensionEnabledOnResource[]>;
    /**
     * Count of resources on which this metric extension is enabled.
     */
    public /*out*/ readonly enabledOnResourcesCount!: pulumi.Output<number>;
    /**
     * Last updated by user
     */
    public /*out*/ readonly lastUpdatedBy!: pulumi.Output<string>;
    /**
     * (Updatable) List of metrics which are part of this metric extension
     */
    public readonly metricLists!: pulumi.Output<outputs.StackMonitoring.MetricExtensionMetricList[]>;
    /**
     * Metric Extension Resource name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * (Updatable) An optional property when set to `true` triggers Publish of a metric extension. Once set to `true`, it cannot be changed back to `false`. Update of publishTrigger cannot be combined with other updates in the same request. A metric extension cannot be tested and its definition cannot be updated once it is marked published or publishTrigger is updated to `true`.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    public readonly publishTrigger!: pulumi.Output<boolean | undefined>;
    /**
     * (Updatable) Collection method and query properties details of metric extension
     */
    public readonly queryProperties!: pulumi.Output<outputs.StackMonitoring.MetricExtensionQueryProperties>;
    /**
     * Resource type to which Metric Extension applies
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * The URI path that the user can do a GET on to access the metric extension metadata
     */
    public /*out*/ readonly resourceUri!: pulumi.Output<string>;
    /**
     * The current lifecycle state of the metric extension
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The current status of the metric extension i.e. whether it is Draft or Published
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Tenant Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     */
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    /**
     * Metric Extension creation time. An RFC3339 formatted datetime string.
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * Metric Extension update time. An RFC3339 formatted datetime string.
     */
    public /*out*/ readonly timeUpdated!: pulumi.Output<string>;

    /**
     * Create a MetricExtension resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricExtensionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricExtensionArgs | MetricExtensionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetricExtensionState | undefined;
            resourceInputs["collectionMethod"] = state ? state.collectionMethod : undefined;
            resourceInputs["collectionRecurrences"] = state ? state.collectionRecurrences : undefined;
            resourceInputs["compartmentId"] = state ? state.compartmentId : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enabledOnResources"] = state ? state.enabledOnResources : undefined;
            resourceInputs["enabledOnResourcesCount"] = state ? state.enabledOnResourcesCount : undefined;
            resourceInputs["lastUpdatedBy"] = state ? state.lastUpdatedBy : undefined;
            resourceInputs["metricLists"] = state ? state.metricLists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publishTrigger"] = state ? state.publishTrigger : undefined;
            resourceInputs["queryProperties"] = state ? state.queryProperties : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["resourceUri"] = state ? state.resourceUri : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeCreated"] = state ? state.timeCreated : undefined;
            resourceInputs["timeUpdated"] = state ? state.timeUpdated : undefined;
        } else {
            const args = argsOrState as MetricExtensionArgs | undefined;
            if ((!args || args.collectionRecurrences === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collectionRecurrences'");
            }
            if ((!args || args.compartmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.metricLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricLists'");
            }
            if ((!args || args.queryProperties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queryProperties'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["collectionRecurrences"] = args ? args.collectionRecurrences : undefined;
            resourceInputs["compartmentId"] = args ? args.compartmentId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["metricLists"] = args ? args.metricLists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publishTrigger"] = args ? args.publishTrigger : undefined;
            resourceInputs["queryProperties"] = args ? args.queryProperties : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["collectionMethod"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["enabledOnResources"] = undefined /*out*/;
            resourceInputs["enabledOnResourcesCount"] = undefined /*out*/;
            resourceInputs["lastUpdatedBy"] = undefined /*out*/;
            resourceInputs["resourceUri"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetricExtension.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetricExtension resources.
 */
export interface MetricExtensionState {
    /**
     * Type of possible collection methods.
     */
    collectionMethod?: pulumi.Input<string>;
    /**
     * (Updatable) Schedule of metric extension should use RFC 5545 format i.e. recur-rule-part = "FREQ";INTERVAL where FREQ rule part identifies the type of recurrence rule. Valid values are "MINUTELY","HOURLY","DAILY" to specify repeating events based on an interval of a minute, an hour and a day or more. Example- FREQ=DAILY;INTERVAL=1
     */
    collectionRecurrences?: pulumi.Input<string>;
    /**
     * (Updatable) Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * Created by user
     */
    createdBy?: pulumi.Input<string>;
    /**
     * (Updatable) Description of the metric extension.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) Metric Extension display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * List of resource details objects having resourceIds on which this metric extension is enabled.
     */
    enabledOnResources?: pulumi.Input<pulumi.Input<inputs.StackMonitoring.MetricExtensionEnabledOnResource>[]>;
    /**
     * Count of resources on which this metric extension is enabled.
     */
    enabledOnResourcesCount?: pulumi.Input<number>;
    /**
     * Last updated by user
     */
    lastUpdatedBy?: pulumi.Input<string>;
    /**
     * (Updatable) List of metrics which are part of this metric extension
     */
    metricLists?: pulumi.Input<pulumi.Input<inputs.StackMonitoring.MetricExtensionMetricList>[]>;
    /**
     * Metric Extension Resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * (Updatable) An optional property when set to `true` triggers Publish of a metric extension. Once set to `true`, it cannot be changed back to `false`. Update of publishTrigger cannot be combined with other updates in the same request. A metric extension cannot be tested and its definition cannot be updated once it is marked published or publishTrigger is updated to `true`.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    publishTrigger?: pulumi.Input<boolean>;
    /**
     * (Updatable) Collection method and query properties details of metric extension
     */
    queryProperties?: pulumi.Input<inputs.StackMonitoring.MetricExtensionQueryProperties>;
    /**
     * Resource type to which Metric Extension applies
     */
    resourceType?: pulumi.Input<string>;
    /**
     * The URI path that the user can do a GET on to access the metric extension metadata
     */
    resourceUri?: pulumi.Input<string>;
    /**
     * The current lifecycle state of the metric extension
     */
    state?: pulumi.Input<string>;
    /**
     * The current status of the metric extension i.e. whether it is Draft or Published
     */
    status?: pulumi.Input<string>;
    /**
     * Tenant Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Metric Extension creation time. An RFC3339 formatted datetime string.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * Metric Extension update time. An RFC3339 formatted datetime string.
     */
    timeUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetricExtension resource.
 */
export interface MetricExtensionArgs {
    /**
     * (Updatable) Schedule of metric extension should use RFC 5545 format i.e. recur-rule-part = "FREQ";INTERVAL where FREQ rule part identifies the type of recurrence rule. Valid values are "MINUTELY","HOURLY","DAILY" to specify repeating events based on an interval of a minute, an hour and a day or more. Example- FREQ=DAILY;INTERVAL=1
     */
    collectionRecurrences: pulumi.Input<string>;
    /**
     * (Updatable) Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Description of the metric extension.
     */
    description?: pulumi.Input<string>;
    /**
     * (Updatable) Metric Extension display name.
     */
    displayName: pulumi.Input<string>;
    /**
     * (Updatable) List of metrics which are part of this metric extension
     */
    metricLists: pulumi.Input<pulumi.Input<inputs.StackMonitoring.MetricExtensionMetricList>[]>;
    /**
     * Metric Extension Resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * (Updatable) An optional property when set to `true` triggers Publish of a metric extension. Once set to `true`, it cannot be changed back to `false`. Update of publishTrigger cannot be combined with other updates in the same request. A metric extension cannot be tested and its definition cannot be updated once it is marked published or publishTrigger is updated to `true`.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    publishTrigger?: pulumi.Input<boolean>;
    /**
     * (Updatable) Collection method and query properties details of metric extension
     */
    queryProperties: pulumi.Input<inputs.StackMonitoring.MetricExtensionQueryProperties>;
    /**
     * Resource type to which Metric Extension applies
     */
    resourceType: pulumi.Input<string>;
}
