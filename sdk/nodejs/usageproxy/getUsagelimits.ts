// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Usagelimits in Oracle Cloud Infrastructure Usage Proxy service.
 *
 * Returns the list of usage limit for the subscription ID and tenant ID.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testUsagelimits = oci.UsageProxy.getUsagelimits({
 *     compartmentId: compartmentId,
 *     subscriptionId: testSubscription.id,
 *     limitType: usagelimitLimitType,
 *     resourceType: usagelimitResourceType,
 *     serviceType: usagelimitServiceType,
 * });
 * ```
 */
export function getUsagelimits(args: GetUsagelimitsArgs, opts?: pulumi.InvokeOptions): Promise<GetUsagelimitsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:UsageProxy/getUsagelimits:getUsagelimits", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "limitType": args.limitType,
        "resourceType": args.resourceType,
        "serviceType": args.serviceType,
        "subscriptionId": args.subscriptionId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUsagelimits.
 */
export interface GetUsagelimitsArgs {
    /**
     * The OCID of the root compartment.
     */
    compartmentId: string;
    filters?: inputs.UsageProxy.GetUsagelimitsFilter[];
    /**
     * Hard or soft limit. Hard limits lead to breaches, soft to alerts.
     */
    limitType?: string;
    /**
     * Resource Name.
     */
    resourceType?: string;
    /**
     * Service Name.
     */
    serviceType?: string;
    /**
     * The subscription ID for which rewards information is requested for.
     */
    subscriptionId: string;
}

/**
 * A collection of values returned by getUsagelimits.
 */
export interface GetUsagelimitsResult {
    readonly compartmentId: string;
    readonly filters?: outputs.UsageProxy.GetUsagelimitsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The limit type of the usage limit
     */
    readonly limitType?: string;
    readonly resourceType?: string;
    readonly serviceType?: string;
    readonly subscriptionId: string;
    /**
     * The list of usage_limit_collection.
     */
    readonly usageLimitCollections: outputs.UsageProxy.GetUsagelimitsUsageLimitCollection[];
}
/**
 * This data source provides the list of Usagelimits in Oracle Cloud Infrastructure Usage Proxy service.
 *
 * Returns the list of usage limit for the subscription ID and tenant ID.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testUsagelimits = oci.UsageProxy.getUsagelimits({
 *     compartmentId: compartmentId,
 *     subscriptionId: testSubscription.id,
 *     limitType: usagelimitLimitType,
 *     resourceType: usagelimitResourceType,
 *     serviceType: usagelimitServiceType,
 * });
 * ```
 */
export function getUsagelimitsOutput(args: GetUsagelimitsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUsagelimitsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:UsageProxy/getUsagelimits:getUsagelimits", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "limitType": args.limitType,
        "resourceType": args.resourceType,
        "serviceType": args.serviceType,
        "subscriptionId": args.subscriptionId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUsagelimits.
 */
export interface GetUsagelimitsOutputArgs {
    /**
     * The OCID of the root compartment.
     */
    compartmentId: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.UsageProxy.GetUsagelimitsFilterArgs>[]>;
    /**
     * Hard or soft limit. Hard limits lead to breaches, soft to alerts.
     */
    limitType?: pulumi.Input<string>;
    /**
     * Resource Name.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Service Name.
     */
    serviceType?: pulumi.Input<string>;
    /**
     * The subscription ID for which rewards information is requested for.
     */
    subscriptionId: pulumi.Input<string>;
}
