// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Secret Version resource in Oracle Cloud Infrastructure Vault service.
 *
 * Gets information about the specified version of a secret.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSecretVersion = oci.Vault.getSecretVersion({
 *     secretId: testSecret.id,
 *     secretVersionNumber: secretVersionSecretVersionNumber,
 * });
 * ```
 */
export function getSecretVersion(args: GetSecretVersionArgs, opts?: pulumi.InvokeOptions): Promise<GetSecretVersionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:Vault/getSecretVersion:getSecretVersion", {
        "secretId": args.secretId,
        "secretVersionNumber": args.secretVersionNumber,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecretVersion.
 */
export interface GetSecretVersionArgs {
    /**
     * The OCID of the secret.
     */
    secretId: string;
    /**
     * The version number of the secret.
     */
    secretVersionNumber: string;
}

/**
 * A collection of values returned by getSecretVersion.
 */
export interface GetSecretVersionResult {
    /**
     * The content type of the secret version's secret contents.
     */
    readonly contentType: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the secret version. A name is unique across versions of a secret.
     */
    readonly name: string;
    /**
     * The OCID of the secret.
     */
    readonly secretId: string;
    readonly secretVersionNumber: string;
    /**
     * A list of possible rotation states for the secret version. A secret version marked `CURRENT` is currently in use. A secret version marked `PENDING` is staged and available for use, but has not been applied on the target system and, therefore, has not been rotated into current, active use. The secret most recently uploaded to a vault is always marked `LATEST`. (The first version of a secret is always marked as both `CURRENT` and `LATEST`.) A secret version marked `PREVIOUS` is the secret version that was most recently marked `CURRENT`, before the last secret version rotation. A secret version marked `DEPRECATED` is neither current, pending, nor the previous one in use. Only secret versions marked `DEPRECATED` can be scheduled for deletion.
     */
    readonly stages: string[];
    /**
     * A optional property indicating when the secret version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     */
    readonly timeCreated: string;
    /**
     * An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     */
    readonly timeOfCurrentVersionExpiry: string;
    /**
     * An optional property indicating when to delete the secret version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
     */
    readonly timeOfDeletion: string;
    /**
     * The version number of the secret.
     */
    readonly versionNumber: string;
}
/**
 * This data source provides details about a specific Secret Version resource in Oracle Cloud Infrastructure Vault service.
 *
 * Gets information about the specified version of a secret.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSecretVersion = oci.Vault.getSecretVersion({
 *     secretId: testSecret.id,
 *     secretVersionNumber: secretVersionSecretVersionNumber,
 * });
 * ```
 */
export function getSecretVersionOutput(args: GetSecretVersionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSecretVersionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("oci:Vault/getSecretVersion:getSecretVersion", {
        "secretId": args.secretId,
        "secretVersionNumber": args.secretVersionNumber,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecretVersion.
 */
export interface GetSecretVersionOutputArgs {
    /**
     * The OCID of the secret.
     */
    secretId: pulumi.Input<string>;
    /**
     * The version number of the secret.
     */
    secretVersionNumber: pulumi.Input<string>;
}
