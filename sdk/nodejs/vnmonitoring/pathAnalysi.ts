// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Path Analysi resource in Oracle Cloud Infrastructure Vn Monitoring service.
 *
 * Use this method to initiate a [Network Path Analyzer](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/path_analyzer.htm) analysis. This method returns
 * an opc-work-request-id, and you can poll the status of the work request until it either fails or succeeds.
 *
 * If the work request status is successful, use [ListWorkRequestResults](https://docs.cloud.oracle.com/iaas/api/#/en/VnConfigAdvisor/latest/WorkRequestResult/ListWorkRequestResults)
 * with the work request ID to ask for the successful analysis results. If the work request status is failed, use
 * [ListWorkRequestErrors](https://docs.cloud.oracle.com/iaas/api/#/en/VnConfigAdvisor/latest/WorkRequestError/ListWorkRequestErrors)
 * with the work request ID to ask for the analysis failure information. The information
 * returned from either of these methods can be used to build a final report.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testPathAnalysi = new oci.vnmonitoring.PathAnalysi("test_path_analysi", {
 *     type: pathAnalysiType,
 *     cacheControl: pathAnalysiCacheControl,
 *     compartmentId: compartmentId,
 *     destinationEndpoint: {
 *         type: pathAnalysiDestinationEndpointType,
 *         address: pathAnalysiDestinationEndpointAddress,
 *         instanceId: testInstance.id,
 *         listenerId: testListener.id,
 *         loadBalancerId: testLoadBalancer.id,
 *         networkLoadBalancerId: testNetworkLoadBalancer.id,
 *         subnetId: testSubnet.id,
 *         vlanId: testVlan.id,
 *         vnicId: testVnicAttachment.id,
 *     },
 *     pathAnalyzerTestId: testPathAnalyzerTest.id,
 *     protocol: pathAnalysiProtocol,
 *     protocolParameters: {
 *         type: pathAnalysiProtocolParametersType,
 *         destinationPort: pathAnalysiProtocolParametersDestinationPort,
 *         icmpCode: pathAnalysiProtocolParametersIcmpCode,
 *         icmpType: pathAnalysiProtocolParametersIcmpType,
 *         sourcePort: pathAnalysiProtocolParametersSourcePort,
 *     },
 *     queryOptions: {
 *         isBiDirectionalAnalysis: pathAnalysiQueryOptionsIsBiDirectionalAnalysis,
 *     },
 *     sourceEndpoint: {
 *         type: pathAnalysiSourceEndpointType,
 *         address: pathAnalysiSourceEndpointAddress,
 *         instanceId: testInstance.id,
 *         listenerId: testListener.id,
 *         loadBalancerId: testLoadBalancer.id,
 *         networkLoadBalancerId: testNetworkLoadBalancer.id,
 *         subnetId: testSubnet.id,
 *         vlanId: testVlan.id,
 *         vnicId: testVnicAttachment.id,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * PathAnalysis can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import oci:VnMonitoring/pathAnalysi:PathAnalysi test_path_analysi "id"
 * ```
 */
export class PathAnalysi extends pulumi.CustomResource {
    /**
     * Get an existing PathAnalysi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PathAnalysiState, opts?: pulumi.CustomResourceOptions): PathAnalysi {
        return new PathAnalysi(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:VnMonitoring/pathAnalysi:PathAnalysi';

    /**
     * Returns true if the given object is an instance of PathAnalysi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PathAnalysi {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PathAnalysi.__pulumiType;
    }

    /**
     * The Cache-Control HTTP header holds directives (instructions) for caching in both requests and responses.
     */
    declare public readonly cacheControl: pulumi.Output<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment.
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * Information describing a source or destination in a `PathAnalyzerTest` resource.
     */
    declare public readonly destinationEndpoint: pulumi.Output<outputs.VnMonitoring.PathAnalysiDestinationEndpoint>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
     */
    declare public readonly pathAnalyzerTestId: pulumi.Output<string>;
    /**
     * The IP protocol to used for the path analysis.
     */
    declare public readonly protocol: pulumi.Output<number>;
    /**
     * Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
     */
    declare public readonly protocolParameters: pulumi.Output<outputs.VnMonitoring.PathAnalysiProtocolParameters>;
    /**
     * Defines the query options required for a `PathAnalyzerTest` resource.
     */
    declare public readonly queryOptions: pulumi.Output<outputs.VnMonitoring.PathAnalysiQueryOptions>;
    /**
     * Information describing a source or destination in a `PathAnalyzerTest` resource.
     */
    declare public readonly sourceEndpoint: pulumi.Output<outputs.VnMonitoring.PathAnalysiSourceEndpoint>;
    /**
     * The type of the `PathAnalysis` query.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a PathAnalysi resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PathAnalysiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PathAnalysiArgs | PathAnalysiState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PathAnalysiState | undefined;
            resourceInputs["cacheControl"] = state?.cacheControl;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["destinationEndpoint"] = state?.destinationEndpoint;
            resourceInputs["pathAnalyzerTestId"] = state?.pathAnalyzerTestId;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["protocolParameters"] = state?.protocolParameters;
            resourceInputs["queryOptions"] = state?.queryOptions;
            resourceInputs["sourceEndpoint"] = state?.sourceEndpoint;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as PathAnalysiArgs | undefined;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["cacheControl"] = args?.cacheControl;
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["destinationEndpoint"] = args?.destinationEndpoint;
            resourceInputs["pathAnalyzerTestId"] = args?.pathAnalyzerTestId;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["protocolParameters"] = args?.protocolParameters;
            resourceInputs["queryOptions"] = args?.queryOptions;
            resourceInputs["sourceEndpoint"] = args?.sourceEndpoint;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PathAnalysi.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PathAnalysi resources.
 */
export interface PathAnalysiState {
    /**
     * The Cache-Control HTTP header holds directives (instructions) for caching in both requests and responses.
     */
    cacheControl?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * Information describing a source or destination in a `PathAnalyzerTest` resource.
     */
    destinationEndpoint?: pulumi.Input<inputs.VnMonitoring.PathAnalysiDestinationEndpoint>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
     */
    pathAnalyzerTestId?: pulumi.Input<string>;
    /**
     * The IP protocol to used for the path analysis.
     */
    protocol?: pulumi.Input<number>;
    /**
     * Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
     */
    protocolParameters?: pulumi.Input<inputs.VnMonitoring.PathAnalysiProtocolParameters>;
    /**
     * Defines the query options required for a `PathAnalyzerTest` resource.
     */
    queryOptions?: pulumi.Input<inputs.VnMonitoring.PathAnalysiQueryOptions>;
    /**
     * Information describing a source or destination in a `PathAnalyzerTest` resource.
     */
    sourceEndpoint?: pulumi.Input<inputs.VnMonitoring.PathAnalysiSourceEndpoint>;
    /**
     * The type of the `PathAnalysis` query.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PathAnalysi resource.
 */
export interface PathAnalysiArgs {
    /**
     * The Cache-Control HTTP header holds directives (instructions) for caching in both requests and responses.
     */
    cacheControl?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * Information describing a source or destination in a `PathAnalyzerTest` resource.
     */
    destinationEndpoint?: pulumi.Input<inputs.VnMonitoring.PathAnalysiDestinationEndpoint>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
     */
    pathAnalyzerTestId?: pulumi.Input<string>;
    /**
     * The IP protocol to used for the path analysis.
     */
    protocol?: pulumi.Input<number>;
    /**
     * Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
     */
    protocolParameters?: pulumi.Input<inputs.VnMonitoring.PathAnalysiProtocolParameters>;
    /**
     * Defines the query options required for a `PathAnalyzerTest` resource.
     */
    queryOptions?: pulumi.Input<inputs.VnMonitoring.PathAnalysiQueryOptions>;
    /**
     * Information describing a source or destination in a `PathAnalyzerTest` resource.
     */
    sourceEndpoint?: pulumi.Input<inputs.VnMonitoring.PathAnalysiSourceEndpoint>;
    /**
     * The type of the `PathAnalysis` query.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    type: pulumi.Input<string>;
}
