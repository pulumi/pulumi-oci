// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides details about a specific Container Scan Recipe resource in Oracle Cloud Infrastructure Vulnerability Scanning service.
 *
 * Retrieves a ContainerScanRecipe identified by the recipe ID. A recipe determines the types of security issues that you want scanned.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testContainerScanRecipe = oci.VulnerabilityScanning.getContainerScanRecipe({
 *     containerScanRecipeId: oci_vulnerability_scanning_container_scan_recipe.test_container_scan_recipe.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getContainerScanRecipe(args: GetContainerScanRecipeArgs, opts?: pulumi.InvokeOptions): Promise<GetContainerScanRecipeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("oci:VulnerabilityScanning/getContainerScanRecipe:getContainerScanRecipe", {
        "containerScanRecipeId": args.containerScanRecipeId,
    }, opts);
}

/**
 * A collection of arguments for invoking getContainerScanRecipe.
 */
export interface GetContainerScanRecipeArgs {
    /**
     * unique ContainerScanRecipe identifier
     */
    containerScanRecipeId: string;
}

/**
 * A collection of values returned by getContainerScanRecipe.
 */
export interface GetContainerScanRecipeResult {
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan recipe's compartment
     */
    readonly compartmentId: string;
    readonly containerScanRecipeId: string;
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
     */
    readonly definedTags: {[key: string]: any};
    /**
     * User friendly name of container scan recipe
     */
    readonly displayName: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
     */
    readonly freeformTags: {[key: string]: any};
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of container scan recipe. Immutable and generated on creation.
     */
    readonly id: string;
    /**
     * This field is set equal to the number of images we want to scan in the first go when the recipe is created
     */
    readonly imageCount: number;
    /**
     * A collection of container scan settings
     */
    readonly scanSettings: outputs.VulnerabilityScanning.GetContainerScanRecipeScanSetting[];
    /**
     * The current state of the config.
     */
    readonly state: string;
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
     */
    readonly systemTags: {[key: string]: any};
    /**
     * Date and time the recipe was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     */
    readonly timeCreated: string;
    /**
     * Date and time the recipe was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
     */
    readonly timeUpdated: string;
}
/**
 * This data source provides details about a specific Container Scan Recipe resource in Oracle Cloud Infrastructure Vulnerability Scanning service.
 *
 * Retrieves a ContainerScanRecipe identified by the recipe ID. A recipe determines the types of security issues that you want scanned.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testContainerScanRecipe = oci.VulnerabilityScanning.getContainerScanRecipe({
 *     containerScanRecipeId: oci_vulnerability_scanning_container_scan_recipe.test_container_scan_recipe.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getContainerScanRecipeOutput(args: GetContainerScanRecipeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetContainerScanRecipeResult> {
    return pulumi.output(args).apply((a: any) => getContainerScanRecipe(a, opts))
}

/**
 * A collection of arguments for invoking getContainerScanRecipe.
 */
export interface GetContainerScanRecipeOutputArgs {
    /**
     * unique ContainerScanRecipe identifier
     */
    containerScanRecipeId: pulumi.Input<string>;
}
