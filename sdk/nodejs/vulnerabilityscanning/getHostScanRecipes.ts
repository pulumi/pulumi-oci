// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Host Scan Recipes in Oracle Cloud Infrastructure Vulnerability Scanning service.
 *
 * Retrieves a list of HostScanRecipeSummary objects in a compartment. A recipe determines the types of security issues that you want scanned, and how often to scan.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testHostScanRecipes = oci.VulnerabilityScanning.getHostScanRecipes({
 *     compartmentId: _var.compartment_id,
 *     displayName: _var.host_scan_recipe_display_name,
 *     state: _var.host_scan_recipe_state,
 * });
 * ```
 */
export function getHostScanRecipes(args: GetHostScanRecipesArgs, opts?: pulumi.InvokeOptions): Promise<GetHostScanRecipesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("oci:VulnerabilityScanning/getHostScanRecipes:getHostScanRecipes", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getHostScanRecipes.
 */
export interface GetHostScanRecipesArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.VulnerabilityScanning.GetHostScanRecipesFilter[];
    /**
     * A filter to return only resources whose lifecycleState matches the given lifecycleState.
     */
    state?: string;
}

/**
 * A collection of values returned by getHostScanRecipes.
 */
export interface GetHostScanRecipesResult {
    /**
     * Compartment ID of the scan recipe
     */
    readonly compartmentId: string;
    /**
     * Recipe identifier, which can be renamed
     */
    readonly displayName?: string;
    readonly filters?: outputs.VulnerabilityScanning.GetHostScanRecipesFilter[];
    /**
     * The list of host_scan_recipe_summary_collection.
     */
    readonly hostScanRecipeSummaryCollections: outputs.VulnerabilityScanning.GetHostScanRecipesHostScanRecipeSummaryCollection[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The current state of the config.
     */
    readonly state?: string;
}

export function getHostScanRecipesOutput(args: GetHostScanRecipesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHostScanRecipesResult> {
    return pulumi.output(args).apply(a => getHostScanRecipes(a, opts))
}

/**
 * A collection of arguments for invoking getHostScanRecipes.
 */
export interface GetHostScanRecipesOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.VulnerabilityScanning.GetHostScanRecipesFilterArgs>[]>;
    /**
     * A filter to return only resources whose lifecycleState matches the given lifecycleState.
     */
    state?: pulumi.Input<string>;
}
