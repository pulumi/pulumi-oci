// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides the list of Host Scan Targets in Oracle Cloud Infrastructure Vulnerability Scanning service.
 *
 * Retrieves a list of HostScanTargetSummary objects in a compartment. A host scan target is a collection of compute instances that you want routinely scanned for security vulnerabilities.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testHostScanTargets = oci.VulnerabilityScanning.getHostScanTargets({
 *     compartmentId: _var.compartment_id,
 *     displayName: _var.host_scan_target_display_name,
 *     state: _var.host_scan_target_state,
 * });
 * ```
 */
export function getHostScanTargets(args: GetHostScanTargetsArgs, opts?: pulumi.InvokeOptions): Promise<GetHostScanTargetsResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("oci:VulnerabilityScanning/getHostScanTargets:getHostScanTargets", {
        "compartmentId": args.compartmentId,
        "displayName": args.displayName,
        "filters": args.filters,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getHostScanTargets.
 */
export interface GetHostScanTargetsArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: string;
    filters?: inputs.VulnerabilityScanning.GetHostScanTargetsFilter[];
    /**
     * A filter to return only resources whose lifecycleState matches the given lifecycleState.
     */
    state?: string;
}

/**
 * A collection of values returned by getHostScanTargets.
 */
export interface GetHostScanTargetsResult {
    /**
     * Compartment ID of the object (this).
     */
    readonly compartmentId: string;
    /**
     * Target identifier, which can be renamed.
     */
    readonly displayName?: string;
    readonly filters?: outputs.VulnerabilityScanning.GetHostScanTargetsFilter[];
    /**
     * The list of host_scan_target_summary_collection.
     */
    readonly hostScanTargetSummaryCollections: outputs.VulnerabilityScanning.GetHostScanTargetsHostScanTargetSummaryCollection[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The current state of the config.
     */
    readonly state?: string;
}

export function getHostScanTargetsOutput(args: GetHostScanTargetsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHostScanTargetsResult> {
    return pulumi.output(args).apply(a => getHostScanTargets(a, opts))
}

/**
 * A collection of arguments for invoking getHostScanTargets.
 */
export interface GetHostScanTargetsOutputArgs {
    /**
     * The ID of the compartment in which to list resources.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    displayName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.VulnerabilityScanning.GetHostScanTargetsFilterArgs>[]>;
    /**
     * A filter to return only resources whose lifecycleState matches the given lifecycleState.
     */
    state?: pulumi.Input<string>;
}
