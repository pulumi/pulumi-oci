// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ContainerScanRecipeArgs, ContainerScanRecipeState } from "./containerScanRecipe";
export type ContainerScanRecipe = import("./containerScanRecipe").ContainerScanRecipe;
export const ContainerScanRecipe: typeof import("./containerScanRecipe").ContainerScanRecipe = null as any;
utilities.lazyLoad(exports, ["ContainerScanRecipe"], () => require("./containerScanRecipe"));

export { ContainerScanTargetArgs, ContainerScanTargetState } from "./containerScanTarget";
export type ContainerScanTarget = import("./containerScanTarget").ContainerScanTarget;
export const ContainerScanTarget: typeof import("./containerScanTarget").ContainerScanTarget = null as any;
utilities.lazyLoad(exports, ["ContainerScanTarget"], () => require("./containerScanTarget"));

export { GetContainerScanRecipeArgs, GetContainerScanRecipeResult, GetContainerScanRecipeOutputArgs } from "./getContainerScanRecipe";
export const getContainerScanRecipe: typeof import("./getContainerScanRecipe").getContainerScanRecipe = null as any;
export const getContainerScanRecipeOutput: typeof import("./getContainerScanRecipe").getContainerScanRecipeOutput = null as any;
utilities.lazyLoad(exports, ["getContainerScanRecipe","getContainerScanRecipeOutput"], () => require("./getContainerScanRecipe"));

export { GetContainerScanRecipesArgs, GetContainerScanRecipesResult, GetContainerScanRecipesOutputArgs } from "./getContainerScanRecipes";
export const getContainerScanRecipes: typeof import("./getContainerScanRecipes").getContainerScanRecipes = null as any;
export const getContainerScanRecipesOutput: typeof import("./getContainerScanRecipes").getContainerScanRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getContainerScanRecipes","getContainerScanRecipesOutput"], () => require("./getContainerScanRecipes"));

export { GetContainerScanTargetArgs, GetContainerScanTargetResult, GetContainerScanTargetOutputArgs } from "./getContainerScanTarget";
export const getContainerScanTarget: typeof import("./getContainerScanTarget").getContainerScanTarget = null as any;
export const getContainerScanTargetOutput: typeof import("./getContainerScanTarget").getContainerScanTargetOutput = null as any;
utilities.lazyLoad(exports, ["getContainerScanTarget","getContainerScanTargetOutput"], () => require("./getContainerScanTarget"));

export { GetContainerScanTargetsArgs, GetContainerScanTargetsResult, GetContainerScanTargetsOutputArgs } from "./getContainerScanTargets";
export const getContainerScanTargets: typeof import("./getContainerScanTargets").getContainerScanTargets = null as any;
export const getContainerScanTargetsOutput: typeof import("./getContainerScanTargets").getContainerScanTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getContainerScanTargets","getContainerScanTargetsOutput"], () => require("./getContainerScanTargets"));

export { GetHostScanRecipeArgs, GetHostScanRecipeResult, GetHostScanRecipeOutputArgs } from "./getHostScanRecipe";
export const getHostScanRecipe: typeof import("./getHostScanRecipe").getHostScanRecipe = null as any;
export const getHostScanRecipeOutput: typeof import("./getHostScanRecipe").getHostScanRecipeOutput = null as any;
utilities.lazyLoad(exports, ["getHostScanRecipe","getHostScanRecipeOutput"], () => require("./getHostScanRecipe"));

export { GetHostScanRecipesArgs, GetHostScanRecipesResult, GetHostScanRecipesOutputArgs } from "./getHostScanRecipes";
export const getHostScanRecipes: typeof import("./getHostScanRecipes").getHostScanRecipes = null as any;
export const getHostScanRecipesOutput: typeof import("./getHostScanRecipes").getHostScanRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getHostScanRecipes","getHostScanRecipesOutput"], () => require("./getHostScanRecipes"));

export { GetHostScanTargetArgs, GetHostScanTargetResult, GetHostScanTargetOutputArgs } from "./getHostScanTarget";
export const getHostScanTarget: typeof import("./getHostScanTarget").getHostScanTarget = null as any;
export const getHostScanTargetOutput: typeof import("./getHostScanTarget").getHostScanTargetOutput = null as any;
utilities.lazyLoad(exports, ["getHostScanTarget","getHostScanTargetOutput"], () => require("./getHostScanTarget"));

export { GetHostScanTargetErrorsArgs, GetHostScanTargetErrorsResult, GetHostScanTargetErrorsOutputArgs } from "./getHostScanTargetErrors";
export const getHostScanTargetErrors: typeof import("./getHostScanTargetErrors").getHostScanTargetErrors = null as any;
export const getHostScanTargetErrorsOutput: typeof import("./getHostScanTargetErrors").getHostScanTargetErrorsOutput = null as any;
utilities.lazyLoad(exports, ["getHostScanTargetErrors","getHostScanTargetErrorsOutput"], () => require("./getHostScanTargetErrors"));

export { GetHostScanTargetsArgs, GetHostScanTargetsResult, GetHostScanTargetsOutputArgs } from "./getHostScanTargets";
export const getHostScanTargets: typeof import("./getHostScanTargets").getHostScanTargets = null as any;
export const getHostScanTargetsOutput: typeof import("./getHostScanTargets").getHostScanTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getHostScanTargets","getHostScanTargetsOutput"], () => require("./getHostScanTargets"));

export { HostScanRecipeArgs, HostScanRecipeState } from "./hostScanRecipe";
export type HostScanRecipe = import("./hostScanRecipe").HostScanRecipe;
export const HostScanRecipe: typeof import("./hostScanRecipe").HostScanRecipe = null as any;
utilities.lazyLoad(exports, ["HostScanRecipe"], () => require("./hostScanRecipe"));

export { HostScanTargetArgs, HostScanTargetState } from "./hostScanTarget";
export type HostScanTarget = import("./hostScanTarget").HostScanTarget;
export const HostScanTarget: typeof import("./hostScanTarget").HostScanTarget = null as any;
utilities.lazyLoad(exports, ["HostScanTarget"], () => require("./hostScanTarget"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:VulnerabilityScanning/containerScanRecipe:ContainerScanRecipe":
                return new ContainerScanRecipe(name, <any>undefined, { urn })
            case "oci:VulnerabilityScanning/containerScanTarget:ContainerScanTarget":
                return new ContainerScanTarget(name, <any>undefined, { urn })
            case "oci:VulnerabilityScanning/hostScanRecipe:HostScanRecipe":
                return new HostScanRecipe(name, <any>undefined, { urn })
            case "oci:VulnerabilityScanning/hostScanTarget:HostScanTarget":
                return new HostScanTarget(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "VulnerabilityScanning/containerScanRecipe", _module)
pulumi.runtime.registerResourceModule("oci", "VulnerabilityScanning/containerScanTarget", _module)
pulumi.runtime.registerResourceModule("oci", "VulnerabilityScanning/hostScanRecipe", _module)
pulumi.runtime.registerResourceModule("oci", "VulnerabilityScanning/hostScanTarget", _module)
