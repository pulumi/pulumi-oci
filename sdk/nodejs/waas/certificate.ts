// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource provides the Certificate resource in Oracle Cloud Infrastructure Web Application Acceleration and Security service.
 *
 * Allows an SSL certificate to be added to a WAAS policy. The Web Application Firewall terminates SSL connections to inspect requests in runtime, and then re-encrypts requests before sending them to the origin for fulfillment.
 *
 * For more information, see [WAF Settings](https://docs.cloud.oracle.com/iaas/Content/WAF/Tasks/wafsettings.htm).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testCertificate = new oci.waas.Certificate("test_certificate", {
 *     certificateData: certificateCertificateData,
 *     compartmentId: compartmentId,
 *     privateKeyData: certificatePrivateKeyData,
 *     definedTags: {
 *         "Operations.CostCenter": "42",
 *     },
 *     displayName: certificateDisplayName,
 *     freeformTags: {
 *         Department: "Finance",
 *     },
 *     isTrustVerificationDisabled: certificateIsTrustVerificationDisabled,
 * });
 * ```
 *
 * ## Import
 *
 * Import is not supported for this resource.
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:Waas/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * The data of the SSL certificate.
     *
     * **Note:** Many SSL certificate providers require an intermediate certificate chain to ensure a trusted status. If your SSL certificate requires an intermediate certificate chain, please append the intermediate certificate key in the `certificateData` field after the leaf certificate issued by the SSL certificate provider. If you are unsure if your certificate requires an intermediate certificate chain, see your certificate provider's documentation.
     *
     * The example below shows an intermediate certificate appended to a leaf certificate.
     */
    declare public readonly certificateData: pulumi.Output<string>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the SSL certificate.
     */
    declare public readonly compartmentId: pulumi.Output<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
     */
    declare public readonly definedTags: pulumi.Output<{[key: string]: string}>;
    /**
     * (Updatable) A user-friendly name for the SSL certificate. The name can be changed and does not need to be unique.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * Additional attributes associated with users or public keys for managing relationships between Certificate Authorities.
     */
    declare public /*out*/ readonly extensions: pulumi.Output<outputs.Waas.CertificateExtension[]>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
     */
    declare public readonly freeformTags: pulumi.Output<{[key: string]: string}>;
    /**
     * Set to `true` if the SSL certificate is self-signed.
     */
    declare public readonly isTrustVerificationDisabled: pulumi.Output<boolean>;
    declare public /*out*/ readonly issuedBy: pulumi.Output<string>;
    /**
     * The issuer of the certificate.
     */
    declare public /*out*/ readonly issuerNames: pulumi.Output<outputs.Waas.CertificateIssuerName[]>;
    /**
     * The private key of the SSL certificate.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    declare public readonly privateKeyData: pulumi.Output<string>;
    /**
     * Information about the public key and the algorithm used by the public key.
     */
    declare public /*out*/ readonly publicKeyInfos: pulumi.Output<outputs.Waas.CertificatePublicKeyInfo[]>;
    /**
     * A unique, positive integer assigned by the Certificate Authority (CA). The issuer name and serial number identify a unique certificate.
     */
    declare public /*out*/ readonly serialNumber: pulumi.Output<string>;
    /**
     * The identifier for the cryptographic algorithm used by the Certificate Authority (CA) to sign this certificate.
     */
    declare public /*out*/ readonly signatureAlgorithm: pulumi.Output<string>;
    /**
     * The current lifecycle state of the SSL certificate.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * The entity to be secured by the certificate.
     */
    declare public /*out*/ readonly subjectNames: pulumi.Output<outputs.Waas.CertificateSubjectName[]>;
    /**
     * The date and time the certificate was created, expressed in RFC 3339 timestamp format.
     */
    declare public /*out*/ readonly timeCreated: pulumi.Output<string>;
    /**
     * The date and time the certificate will expire, expressed in RFC 3339 timestamp format.
     */
    declare public /*out*/ readonly timeNotValidAfter: pulumi.Output<string>;
    /**
     * The date and time the certificate will become valid, expressed in RFC 3339 timestamp format.
     */
    declare public /*out*/ readonly timeNotValidBefore: pulumi.Output<string>;
    /**
     * The version of the encoded certificate.
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["certificateData"] = state?.certificateData;
            resourceInputs["compartmentId"] = state?.compartmentId;
            resourceInputs["definedTags"] = state?.definedTags;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["extensions"] = state?.extensions;
            resourceInputs["freeformTags"] = state?.freeformTags;
            resourceInputs["isTrustVerificationDisabled"] = state?.isTrustVerificationDisabled;
            resourceInputs["issuedBy"] = state?.issuedBy;
            resourceInputs["issuerNames"] = state?.issuerNames;
            resourceInputs["privateKeyData"] = state?.privateKeyData;
            resourceInputs["publicKeyInfos"] = state?.publicKeyInfos;
            resourceInputs["serialNumber"] = state?.serialNumber;
            resourceInputs["signatureAlgorithm"] = state?.signatureAlgorithm;
            resourceInputs["state"] = state?.state;
            resourceInputs["subjectNames"] = state?.subjectNames;
            resourceInputs["timeCreated"] = state?.timeCreated;
            resourceInputs["timeNotValidAfter"] = state?.timeNotValidAfter;
            resourceInputs["timeNotValidBefore"] = state?.timeNotValidBefore;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if (args?.certificateData === undefined && !opts.urn) {
                throw new Error("Missing required property 'certificateData'");
            }
            if (args?.compartmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'compartmentId'");
            }
            if (args?.privateKeyData === undefined && !opts.urn) {
                throw new Error("Missing required property 'privateKeyData'");
            }
            resourceInputs["certificateData"] = args?.certificateData;
            resourceInputs["compartmentId"] = args?.compartmentId;
            resourceInputs["definedTags"] = args?.definedTags;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["freeformTags"] = args?.freeformTags;
            resourceInputs["isTrustVerificationDisabled"] = args?.isTrustVerificationDisabled;
            resourceInputs["privateKeyData"] = args?.privateKeyData ? pulumi.secret(args.privateKeyData) : undefined;
            resourceInputs["extensions"] = undefined /*out*/;
            resourceInputs["issuedBy"] = undefined /*out*/;
            resourceInputs["issuerNames"] = undefined /*out*/;
            resourceInputs["publicKeyInfos"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
            resourceInputs["signatureAlgorithm"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["subjectNames"] = undefined /*out*/;
            resourceInputs["timeCreated"] = undefined /*out*/;
            resourceInputs["timeNotValidAfter"] = undefined /*out*/;
            resourceInputs["timeNotValidBefore"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKeyData"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * The data of the SSL certificate.
     *
     * **Note:** Many SSL certificate providers require an intermediate certificate chain to ensure a trusted status. If your SSL certificate requires an intermediate certificate chain, please append the intermediate certificate key in the `certificateData` field after the leaf certificate issued by the SSL certificate provider. If you are unsure if your certificate requires an intermediate certificate chain, see your certificate provider's documentation.
     *
     * The example below shows an intermediate certificate appended to a leaf certificate.
     */
    certificateData?: pulumi.Input<string>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the SSL certificate.
     */
    compartmentId?: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A user-friendly name for the SSL certificate. The name can be changed and does not need to be unique.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Additional attributes associated with users or public keys for managing relationships between Certificate Authorities.
     */
    extensions?: pulumi.Input<pulumi.Input<inputs.Waas.CertificateExtension>[]>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Set to `true` if the SSL certificate is self-signed.
     */
    isTrustVerificationDisabled?: pulumi.Input<boolean>;
    issuedBy?: pulumi.Input<string>;
    /**
     * The issuer of the certificate.
     */
    issuerNames?: pulumi.Input<pulumi.Input<inputs.Waas.CertificateIssuerName>[]>;
    /**
     * The private key of the SSL certificate.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    privateKeyData?: pulumi.Input<string>;
    /**
     * Information about the public key and the algorithm used by the public key.
     */
    publicKeyInfos?: pulumi.Input<pulumi.Input<inputs.Waas.CertificatePublicKeyInfo>[]>;
    /**
     * A unique, positive integer assigned by the Certificate Authority (CA). The issuer name and serial number identify a unique certificate.
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * The identifier for the cryptographic algorithm used by the Certificate Authority (CA) to sign this certificate.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * The current lifecycle state of the SSL certificate.
     */
    state?: pulumi.Input<string>;
    /**
     * The entity to be secured by the certificate.
     */
    subjectNames?: pulumi.Input<pulumi.Input<inputs.Waas.CertificateSubjectName>[]>;
    /**
     * The date and time the certificate was created, expressed in RFC 3339 timestamp format.
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The date and time the certificate will expire, expressed in RFC 3339 timestamp format.
     */
    timeNotValidAfter?: pulumi.Input<string>;
    /**
     * The date and time the certificate will become valid, expressed in RFC 3339 timestamp format.
     */
    timeNotValidBefore?: pulumi.Input<string>;
    /**
     * The version of the encoded certificate.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * The data of the SSL certificate.
     *
     * **Note:** Many SSL certificate providers require an intermediate certificate chain to ensure a trusted status. If your SSL certificate requires an intermediate certificate chain, please append the intermediate certificate key in the `certificateData` field after the leaf certificate issued by the SSL certificate provider. If you are unsure if your certificate requires an intermediate certificate chain, see your certificate provider's documentation.
     *
     * The example below shows an intermediate certificate appended to a leaf certificate.
     */
    certificateData: pulumi.Input<string>;
    /**
     * (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the SSL certificate.
     */
    compartmentId: pulumi.Input<string>;
    /**
     * (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
     */
    definedTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Updatable) A user-friendly name for the SSL certificate. The name can be changed and does not need to be unique.
     */
    displayName?: pulumi.Input<string>;
    /**
     * (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
     */
    freeformTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Set to `true` if the SSL certificate is self-signed.
     */
    isTrustVerificationDisabled?: pulumi.Input<boolean>;
    /**
     * The private key of the SSL certificate.
     *
     *
     * ** IMPORTANT **
     * Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
     */
    privateKeyData: pulumi.Input<string>;
}
