// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AddressListArgs, AddressListState } from "./addressList";
export type AddressList = import("./addressList").AddressList;
export const AddressList: typeof import("./addressList").AddressList = null as any;
utilities.lazyLoad(exports, ["AddressList"], () => require("./addressList"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CustomProtectionRuleArgs, CustomProtectionRuleState } from "./customProtectionRule";
export type CustomProtectionRule = import("./customProtectionRule").CustomProtectionRule;
export const CustomProtectionRule: typeof import("./customProtectionRule").CustomProtectionRule = null as any;
utilities.lazyLoad(exports, ["CustomProtectionRule"], () => require("./customProtectionRule"));

export { GetAddressListArgs, GetAddressListResult, GetAddressListOutputArgs } from "./getAddressList";
export const getAddressList: typeof import("./getAddressList").getAddressList = null as any;
export const getAddressListOutput: typeof import("./getAddressList").getAddressListOutput = null as any;
utilities.lazyLoad(exports, ["getAddressList","getAddressListOutput"], () => require("./getAddressList"));

export { GetAddressListsArgs, GetAddressListsResult, GetAddressListsOutputArgs } from "./getAddressLists";
export const getAddressLists: typeof import("./getAddressLists").getAddressLists = null as any;
export const getAddressListsOutput: typeof import("./getAddressLists").getAddressListsOutput = null as any;
utilities.lazyLoad(exports, ["getAddressLists","getAddressListsOutput"], () => require("./getAddressLists"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetCertificatesArgs, GetCertificatesResult, GetCertificatesOutputArgs } from "./getCertificates";
export const getCertificates: typeof import("./getCertificates").getCertificates = null as any;
export const getCertificatesOutput: typeof import("./getCertificates").getCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getCertificates","getCertificatesOutput"], () => require("./getCertificates"));

export { GetCustomProtectionRuleArgs, GetCustomProtectionRuleResult, GetCustomProtectionRuleOutputArgs } from "./getCustomProtectionRule";
export const getCustomProtectionRule: typeof import("./getCustomProtectionRule").getCustomProtectionRule = null as any;
export const getCustomProtectionRuleOutput: typeof import("./getCustomProtectionRule").getCustomProtectionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCustomProtectionRule","getCustomProtectionRuleOutput"], () => require("./getCustomProtectionRule"));

export { GetCustomProtectionRulesArgs, GetCustomProtectionRulesResult, GetCustomProtectionRulesOutputArgs } from "./getCustomProtectionRules";
export const getCustomProtectionRules: typeof import("./getCustomProtectionRules").getCustomProtectionRules = null as any;
export const getCustomProtectionRulesOutput: typeof import("./getCustomProtectionRules").getCustomProtectionRulesOutput = null as any;
utilities.lazyLoad(exports, ["getCustomProtectionRules","getCustomProtectionRulesOutput"], () => require("./getCustomProtectionRules"));

export { GetEdgeSubnetsArgs, GetEdgeSubnetsResult, GetEdgeSubnetsOutputArgs } from "./getEdgeSubnets";
export const getEdgeSubnets: typeof import("./getEdgeSubnets").getEdgeSubnets = null as any;
export const getEdgeSubnetsOutput: typeof import("./getEdgeSubnets").getEdgeSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeSubnets","getEdgeSubnetsOutput"], () => require("./getEdgeSubnets"));

export { GetHttpRedirectArgs, GetHttpRedirectResult, GetHttpRedirectOutputArgs } from "./getHttpRedirect";
export const getHttpRedirect: typeof import("./getHttpRedirect").getHttpRedirect = null as any;
export const getHttpRedirectOutput: typeof import("./getHttpRedirect").getHttpRedirectOutput = null as any;
utilities.lazyLoad(exports, ["getHttpRedirect","getHttpRedirectOutput"], () => require("./getHttpRedirect"));

export { GetHttpRedirectsArgs, GetHttpRedirectsResult, GetHttpRedirectsOutputArgs } from "./getHttpRedirects";
export const getHttpRedirects: typeof import("./getHttpRedirects").getHttpRedirects = null as any;
export const getHttpRedirectsOutput: typeof import("./getHttpRedirects").getHttpRedirectsOutput = null as any;
utilities.lazyLoad(exports, ["getHttpRedirects","getHttpRedirectsOutput"], () => require("./getHttpRedirects"));

export { GetProtectionRuleArgs, GetProtectionRuleResult, GetProtectionRuleOutputArgs } from "./getProtectionRule";
export const getProtectionRule: typeof import("./getProtectionRule").getProtectionRule = null as any;
export const getProtectionRuleOutput: typeof import("./getProtectionRule").getProtectionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getProtectionRule","getProtectionRuleOutput"], () => require("./getProtectionRule"));

export { GetProtectionRulesArgs, GetProtectionRulesResult, GetProtectionRulesOutputArgs } from "./getProtectionRules";
export const getProtectionRules: typeof import("./getProtectionRules").getProtectionRules = null as any;
export const getProtectionRulesOutput: typeof import("./getProtectionRules").getProtectionRulesOutput = null as any;
utilities.lazyLoad(exports, ["getProtectionRules","getProtectionRulesOutput"], () => require("./getProtectionRules"));

export { GetWaasPoliciesArgs, GetWaasPoliciesResult, GetWaasPoliciesOutputArgs } from "./getWaasPolicies";
export const getWaasPolicies: typeof import("./getWaasPolicies").getWaasPolicies = null as any;
export const getWaasPoliciesOutput: typeof import("./getWaasPolicies").getWaasPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getWaasPolicies","getWaasPoliciesOutput"], () => require("./getWaasPolicies"));

export { GetWaasPolicyArgs, GetWaasPolicyResult, GetWaasPolicyOutputArgs } from "./getWaasPolicy";
export const getWaasPolicy: typeof import("./getWaasPolicy").getWaasPolicy = null as any;
export const getWaasPolicyOutput: typeof import("./getWaasPolicy").getWaasPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getWaasPolicy","getWaasPolicyOutput"], () => require("./getWaasPolicy"));

export { HttpRedirectArgs, HttpRedirectState } from "./httpRedirect";
export type HttpRedirect = import("./httpRedirect").HttpRedirect;
export const HttpRedirect: typeof import("./httpRedirect").HttpRedirect = null as any;
utilities.lazyLoad(exports, ["HttpRedirect"], () => require("./httpRedirect"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { ProtectionRuleArgs, ProtectionRuleState } from "./protectionRule";
export type ProtectionRule = import("./protectionRule").ProtectionRule;
export const ProtectionRule: typeof import("./protectionRule").ProtectionRule = null as any;
utilities.lazyLoad(exports, ["ProtectionRule"], () => require("./protectionRule"));

export { PurgeCacheArgs, PurgeCacheState } from "./purgeCache";
export type PurgeCache = import("./purgeCache").PurgeCache;
export const PurgeCache: typeof import("./purgeCache").PurgeCache = null as any;
utilities.lazyLoad(exports, ["PurgeCache"], () => require("./purgeCache"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "oci:Waas/addressList:AddressList":
                return new AddressList(name, <any>undefined, { urn })
            case "oci:Waas/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "oci:Waas/customProtectionRule:CustomProtectionRule":
                return new CustomProtectionRule(name, <any>undefined, { urn })
            case "oci:Waas/httpRedirect:HttpRedirect":
                return new HttpRedirect(name, <any>undefined, { urn })
            case "oci:Waas/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "oci:Waas/protectionRule:ProtectionRule":
                return new ProtectionRule(name, <any>undefined, { urn })
            case "oci:Waas/purgeCache:PurgeCache":
                return new PurgeCache(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("oci", "Waas/addressList", _module)
pulumi.runtime.registerResourceModule("oci", "Waas/certificate", _module)
pulumi.runtime.registerResourceModule("oci", "Waas/customProtectionRule", _module)
pulumi.runtime.registerResourceModule("oci", "Waas/httpRedirect", _module)
pulumi.runtime.registerResourceModule("oci", "Waas/policy", _module)
pulumi.runtime.registerResourceModule("oci", "Waas/protectionRule", _module)
pulumi.runtime.registerResourceModule("oci", "Waas/purgeCache", _module)
