# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRemediationRecipeResult',
    'AwaitableGetRemediationRecipeResult',
    'get_remediation_recipe',
    'get_remediation_recipe_output',
]

@pulumi.output_type
class GetRemediationRecipeResult:
    """
    A collection of values returned by getRemediationRecipe.
    """
    def __init__(__self__, compartment_id=None, defined_tags=None, detect_configurations=None, display_name=None, freeform_tags=None, id=None, is_run_triggered_on_kb_change=None, knowledge_base_id=None, network_configurations=None, remediation_recipe_id=None, scm_configurations=None, state=None, system_tags=None, time_created=None, time_updated=None, verify_configurations=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if detect_configurations and not isinstance(detect_configurations, list):
            raise TypeError("Expected argument 'detect_configurations' to be a list")
        pulumi.set(__self__, "detect_configurations", detect_configurations)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_run_triggered_on_kb_change and not isinstance(is_run_triggered_on_kb_change, bool):
            raise TypeError("Expected argument 'is_run_triggered_on_kb_change' to be a bool")
        pulumi.set(__self__, "is_run_triggered_on_kb_change", is_run_triggered_on_kb_change)
        if knowledge_base_id and not isinstance(knowledge_base_id, str):
            raise TypeError("Expected argument 'knowledge_base_id' to be a str")
        pulumi.set(__self__, "knowledge_base_id", knowledge_base_id)
        if network_configurations and not isinstance(network_configurations, list):
            raise TypeError("Expected argument 'network_configurations' to be a list")
        pulumi.set(__self__, "network_configurations", network_configurations)
        if remediation_recipe_id and not isinstance(remediation_recipe_id, str):
            raise TypeError("Expected argument 'remediation_recipe_id' to be a str")
        pulumi.set(__self__, "remediation_recipe_id", remediation_recipe_id)
        if scm_configurations and not isinstance(scm_configurations, list):
            raise TypeError("Expected argument 'scm_configurations' to be a list")
        pulumi.set(__self__, "scm_configurations", scm_configurations)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if system_tags and not isinstance(system_tags, dict):
            raise TypeError("Expected argument 'system_tags' to be a dict")
        pulumi.set(__self__, "system_tags", system_tags)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)
        if verify_configurations and not isinstance(verify_configurations, list):
            raise TypeError("Expected argument 'verify_configurations' to be a list")
        pulumi.set(__self__, "verify_configurations", verify_configurations)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="detectConfigurations")
    def detect_configurations(self) -> Optional[Sequence['outputs.GetRemediationRecipeDetectConfigurationResult']]:
        return pulumi.get(self, "detect_configurations")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRunTriggeredOnKbChange")
    def is_run_triggered_on_kb_change(self) -> Optional[bool]:
        return pulumi.get(self, "is_run_triggered_on_kb_change")

    @property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> Optional[str]:
        return pulumi.get(self, "knowledge_base_id")

    @property
    @pulumi.getter(name="networkConfigurations")
    def network_configurations(self) -> Optional[Sequence['outputs.GetRemediationRecipeNetworkConfigurationResult']]:
        return pulumi.get(self, "network_configurations")

    @property
    @pulumi.getter(name="remediationRecipeId")
    def remediation_recipe_id(self) -> str:
        return pulumi.get(self, "remediation_recipe_id")

    @property
    @pulumi.getter(name="scmConfigurations")
    def scm_configurations(self) -> Optional[Sequence['outputs.GetRemediationRecipeScmConfigurationResult']]:
        return pulumi.get(self, "scm_configurations")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="verifyConfigurations")
    def verify_configurations(self) -> Optional[Sequence['outputs.GetRemediationRecipeVerifyConfigurationResult']]:
        return pulumi.get(self, "verify_configurations")


class AwaitableGetRemediationRecipeResult(GetRemediationRecipeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRemediationRecipeResult(
            compartment_id=self.compartment_id,
            defined_tags=self.defined_tags,
            detect_configurations=self.detect_configurations,
            display_name=self.display_name,
            freeform_tags=self.freeform_tags,
            id=self.id,
            is_run_triggered_on_kb_change=self.is_run_triggered_on_kb_change,
            knowledge_base_id=self.knowledge_base_id,
            network_configurations=self.network_configurations,
            remediation_recipe_id=self.remediation_recipe_id,
            scm_configurations=self.scm_configurations,
            state=self.state,
            system_tags=self.system_tags,
            time_created=self.time_created,
            time_updated=self.time_updated,
            verify_configurations=self.verify_configurations)


def get_remediation_recipe(remediation_recipe_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRemediationRecipeResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['remediationRecipeId'] = remediation_recipe_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Adm/getRemediationRecipe:getRemediationRecipe', __args__, opts=opts, typ=GetRemediationRecipeResult).value

    return AwaitableGetRemediationRecipeResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        detect_configurations=pulumi.get(__ret__, 'detect_configurations'),
        display_name=pulumi.get(__ret__, 'display_name'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        id=pulumi.get(__ret__, 'id'),
        is_run_triggered_on_kb_change=pulumi.get(__ret__, 'is_run_triggered_on_kb_change'),
        knowledge_base_id=pulumi.get(__ret__, 'knowledge_base_id'),
        network_configurations=pulumi.get(__ret__, 'network_configurations'),
        remediation_recipe_id=pulumi.get(__ret__, 'remediation_recipe_id'),
        scm_configurations=pulumi.get(__ret__, 'scm_configurations'),
        state=pulumi.get(__ret__, 'state'),
        system_tags=pulumi.get(__ret__, 'system_tags'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_updated=pulumi.get(__ret__, 'time_updated'),
        verify_configurations=pulumi.get(__ret__, 'verify_configurations'))


@_utilities.lift_output_func(get_remediation_recipe)
def get_remediation_recipe_output(remediation_recipe_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRemediationRecipeResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
