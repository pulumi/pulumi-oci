# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetVulnerabilityAuditApplicationDependencyVulnerabilitiesResult',
    'AwaitableGetVulnerabilityAuditApplicationDependencyVulnerabilitiesResult',
    'get_vulnerability_audit_application_dependency_vulnerabilities',
    'get_vulnerability_audit_application_dependency_vulnerabilities_output',
]

@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyVulnerabilitiesResult:
    """
    A collection of values returned by getVulnerabilityAuditApplicationDependencyVulnerabilities.
    """
    def __init__(__self__, application_dependency_vulnerability_collections=None, cvss_v2greater_than_or_equal=None, cvss_v3greater_than_or_equal=None, depth=None, filters=None, gav=None, id=None, root_node_id=None, sort_by=None, vulnerability_audit_id=None, vulnerability_id=None):
        if application_dependency_vulnerability_collections and not isinstance(application_dependency_vulnerability_collections, list):
            raise TypeError("Expected argument 'application_dependency_vulnerability_collections' to be a list")
        pulumi.set(__self__, "application_dependency_vulnerability_collections", application_dependency_vulnerability_collections)
        if cvss_v2greater_than_or_equal and not isinstance(cvss_v2greater_than_or_equal, float):
            raise TypeError("Expected argument 'cvss_v2greater_than_or_equal' to be a float")
        pulumi.set(__self__, "cvss_v2greater_than_or_equal", cvss_v2greater_than_or_equal)
        if cvss_v3greater_than_or_equal and not isinstance(cvss_v3greater_than_or_equal, float):
            raise TypeError("Expected argument 'cvss_v3greater_than_or_equal' to be a float")
        pulumi.set(__self__, "cvss_v3greater_than_or_equal", cvss_v3greater_than_or_equal)
        if depth and not isinstance(depth, int):
            raise TypeError("Expected argument 'depth' to be a int")
        pulumi.set(__self__, "depth", depth)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if gav and not isinstance(gav, str):
            raise TypeError("Expected argument 'gav' to be a str")
        pulumi.set(__self__, "gav", gav)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if root_node_id and not isinstance(root_node_id, str):
            raise TypeError("Expected argument 'root_node_id' to be a str")
        pulumi.set(__self__, "root_node_id", root_node_id)
        if sort_by and not isinstance(sort_by, str):
            raise TypeError("Expected argument 'sort_by' to be a str")
        pulumi.set(__self__, "sort_by", sort_by)
        if vulnerability_audit_id and not isinstance(vulnerability_audit_id, str):
            raise TypeError("Expected argument 'vulnerability_audit_id' to be a str")
        pulumi.set(__self__, "vulnerability_audit_id", vulnerability_audit_id)
        if vulnerability_id and not isinstance(vulnerability_id, str):
            raise TypeError("Expected argument 'vulnerability_id' to be a str")
        pulumi.set(__self__, "vulnerability_id", vulnerability_id)

    @property
    @pulumi.getter(name="applicationDependencyVulnerabilityCollections")
    def application_dependency_vulnerability_collections(self) -> Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionResult']:
        """
        The list of VulnerabilityAuditApplicationDependencyVulnerability.
        """
        return pulumi.get(self, "application_dependency_vulnerability_collections")

    @property
    @pulumi.getter(name="cvssV2greaterThanOrEqual")
    def cvss_v2greater_than_or_equal(self) -> Optional[float]:
        return pulumi.get(self, "cvss_v2greater_than_or_equal")

    @property
    @pulumi.getter(name="cvssV3greaterThanOrEqual")
    def cvss_v3greater_than_or_equal(self) -> Optional[float]:
        return pulumi.get(self, "cvss_v3greater_than_or_equal")

    @property
    @pulumi.getter
    def depth(self) -> Optional[int]:
        return pulumi.get(self, "depth")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilitiesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def gav(self) -> Optional[str]:
        """
        Group Artifact Version (GAV) identifier (Group:Artifact:Version), for example org.graalvm.nativeimage:svm:21.1.0.
        """
        return pulumi.get(self, "gav")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="rootNodeId")
    def root_node_id(self) -> Optional[str]:
        return pulumi.get(self, "root_node_id")

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> Optional[str]:
        return pulumi.get(self, "sort_by")

    @property
    @pulumi.getter(name="vulnerabilityAuditId")
    def vulnerability_audit_id(self) -> str:
        return pulumi.get(self, "vulnerability_audit_id")

    @property
    @pulumi.getter(name="vulnerabilityId")
    def vulnerability_id(self) -> Optional[str]:
        return pulumi.get(self, "vulnerability_id")


class AwaitableGetVulnerabilityAuditApplicationDependencyVulnerabilitiesResult(GetVulnerabilityAuditApplicationDependencyVulnerabilitiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVulnerabilityAuditApplicationDependencyVulnerabilitiesResult(
            application_dependency_vulnerability_collections=self.application_dependency_vulnerability_collections,
            cvss_v2greater_than_or_equal=self.cvss_v2greater_than_or_equal,
            cvss_v3greater_than_or_equal=self.cvss_v3greater_than_or_equal,
            depth=self.depth,
            filters=self.filters,
            gav=self.gav,
            id=self.id,
            root_node_id=self.root_node_id,
            sort_by=self.sort_by,
            vulnerability_audit_id=self.vulnerability_audit_id,
            vulnerability_id=self.vulnerability_id)


def get_vulnerability_audit_application_dependency_vulnerabilities(cvss_v2greater_than_or_equal: Optional[float] = None,
                                                                   cvss_v3greater_than_or_equal: Optional[float] = None,
                                                                   depth: Optional[int] = None,
                                                                   filters: Optional[Sequence[pulumi.InputType['GetVulnerabilityAuditApplicationDependencyVulnerabilitiesFilterArgs']]] = None,
                                                                   gav: Optional[str] = None,
                                                                   root_node_id: Optional[str] = None,
                                                                   sort_by: Optional[str] = None,
                                                                   vulnerability_audit_id: Optional[str] = None,
                                                                   vulnerability_id: Optional[str] = None,
                                                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVulnerabilityAuditApplicationDependencyVulnerabilitiesResult:
    """
    This data source provides the list of Vulnerability Audit Application Dependency Vulnerabilities in Oracle Cloud Infrastructure ADM service.

    Returns a list of Application Dependencies with their associated vulnerabilities.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_vulnerability_audit_application_dependency_vulnerabilities = oci.Adm.get_vulnerability_audit_application_dependency_vulnerabilities(vulnerability_audit_id=oci_adm_vulnerability_audit["test_vulnerability_audit"]["id"],
        cvss_v2greater_than_or_equal=var["vulnerability_audit_application_dependency_vulnerability_cvss_v2greater_than_or_equal"],
        cvss_v3greater_than_or_equal=var["vulnerability_audit_application_dependency_vulnerability_cvss_v3greater_than_or_equal"],
        depth=var["vulnerability_audit_application_dependency_vulnerability_depth"],
        gav=var["vulnerability_audit_application_dependency_vulnerability_gav"],
        root_node_id=oci_adm_root_node["test_root_node"]["id"],
        vulnerability_id=oci_adm_vulnerability["test_vulnerability"]["id"])
    ```


    :param float cvss_v2greater_than_or_equal: A filter that returns only Vulnerability Audits that have a Common Vulnerability Scoring System Version 2 (CVSS V2) greater or equal than the specified value.
    :param float cvss_v3greater_than_or_equal: A filter that returns only Vulnerability Audits that have a Common Vulnerability Scoring System Version 3 (CVSS V3) greater or equal than the specified value.
    :param int depth: A filter to limit depth of the application dependencies tree traversal. Additionally query parameters such as "cvssV2GreaterThanOrEqual", "cvssV3GreaterThanOrEqual", "gav" and "vulnerabilityId" can't be used in conjunction with this latter.
    :param str gav: A filter to return only resources that match the entire GAV (Group Artifact Version) identifier given.
    :param str root_node_id: A filter to override the top level root identifier with the new given value. The application dependency tree will only be traversed from the given node. Query parameters "cvssV2GreaterThanOrEqual", "cvssV3GreaterThanOrEqual", "gav" and "vulnerabilityId" cannot be used in conjunction with this parameter.
    :param str vulnerability_audit_id: Unique Vulnerability Audit identifier path parameter.
    :param str vulnerability_id: A filter to return only Vulnerability Audits that match the specified id.
    """
    __args__ = dict()
    __args__['cvssV2greaterThanOrEqual'] = cvss_v2greater_than_or_equal
    __args__['cvssV3greaterThanOrEqual'] = cvss_v3greater_than_or_equal
    __args__['depth'] = depth
    __args__['filters'] = filters
    __args__['gav'] = gav
    __args__['rootNodeId'] = root_node_id
    __args__['sortBy'] = sort_by
    __args__['vulnerabilityAuditId'] = vulnerability_audit_id
    __args__['vulnerabilityId'] = vulnerability_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Adm/getVulnerabilityAuditApplicationDependencyVulnerabilities:getVulnerabilityAuditApplicationDependencyVulnerabilities', __args__, opts=opts, typ=GetVulnerabilityAuditApplicationDependencyVulnerabilitiesResult).value

    return AwaitableGetVulnerabilityAuditApplicationDependencyVulnerabilitiesResult(
        application_dependency_vulnerability_collections=pulumi.get(__ret__, 'application_dependency_vulnerability_collections'),
        cvss_v2greater_than_or_equal=pulumi.get(__ret__, 'cvss_v2greater_than_or_equal'),
        cvss_v3greater_than_or_equal=pulumi.get(__ret__, 'cvss_v3greater_than_or_equal'),
        depth=pulumi.get(__ret__, 'depth'),
        filters=pulumi.get(__ret__, 'filters'),
        gav=pulumi.get(__ret__, 'gav'),
        id=pulumi.get(__ret__, 'id'),
        root_node_id=pulumi.get(__ret__, 'root_node_id'),
        sort_by=pulumi.get(__ret__, 'sort_by'),
        vulnerability_audit_id=pulumi.get(__ret__, 'vulnerability_audit_id'),
        vulnerability_id=pulumi.get(__ret__, 'vulnerability_id'))


@_utilities.lift_output_func(get_vulnerability_audit_application_dependency_vulnerabilities)
def get_vulnerability_audit_application_dependency_vulnerabilities_output(cvss_v2greater_than_or_equal: Optional[pulumi.Input[Optional[float]]] = None,
                                                                          cvss_v3greater_than_or_equal: Optional[pulumi.Input[Optional[float]]] = None,
                                                                          depth: Optional[pulumi.Input[Optional[int]]] = None,
                                                                          filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetVulnerabilityAuditApplicationDependencyVulnerabilitiesFilterArgs']]]]] = None,
                                                                          gav: Optional[pulumi.Input[Optional[str]]] = None,
                                                                          root_node_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                                          sort_by: Optional[pulumi.Input[Optional[str]]] = None,
                                                                          vulnerability_audit_id: Optional[pulumi.Input[str]] = None,
                                                                          vulnerability_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVulnerabilityAuditApplicationDependencyVulnerabilitiesResult]:
    """
    This data source provides the list of Vulnerability Audit Application Dependency Vulnerabilities in Oracle Cloud Infrastructure ADM service.

    Returns a list of Application Dependencies with their associated vulnerabilities.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_vulnerability_audit_application_dependency_vulnerabilities = oci.Adm.get_vulnerability_audit_application_dependency_vulnerabilities(vulnerability_audit_id=oci_adm_vulnerability_audit["test_vulnerability_audit"]["id"],
        cvss_v2greater_than_or_equal=var["vulnerability_audit_application_dependency_vulnerability_cvss_v2greater_than_or_equal"],
        cvss_v3greater_than_or_equal=var["vulnerability_audit_application_dependency_vulnerability_cvss_v3greater_than_or_equal"],
        depth=var["vulnerability_audit_application_dependency_vulnerability_depth"],
        gav=var["vulnerability_audit_application_dependency_vulnerability_gav"],
        root_node_id=oci_adm_root_node["test_root_node"]["id"],
        vulnerability_id=oci_adm_vulnerability["test_vulnerability"]["id"])
    ```


    :param float cvss_v2greater_than_or_equal: A filter that returns only Vulnerability Audits that have a Common Vulnerability Scoring System Version 2 (CVSS V2) greater or equal than the specified value.
    :param float cvss_v3greater_than_or_equal: A filter that returns only Vulnerability Audits that have a Common Vulnerability Scoring System Version 3 (CVSS V3) greater or equal than the specified value.
    :param int depth: A filter to limit depth of the application dependencies tree traversal. Additionally query parameters such as "cvssV2GreaterThanOrEqual", "cvssV3GreaterThanOrEqual", "gav" and "vulnerabilityId" can't be used in conjunction with this latter.
    :param str gav: A filter to return only resources that match the entire GAV (Group Artifact Version) identifier given.
    :param str root_node_id: A filter to override the top level root identifier with the new given value. The application dependency tree will only be traversed from the given node. Query parameters "cvssV2GreaterThanOrEqual", "cvssV3GreaterThanOrEqual", "gav" and "vulnerabilityId" cannot be used in conjunction with this parameter.
    :param str vulnerability_audit_id: Unique Vulnerability Audit identifier path parameter.
    :param str vulnerability_id: A filter to return only Vulnerability Audits that match the specified id.
    """
    ...
