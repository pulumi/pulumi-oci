# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'VulnerabilityAuditApplicationDependency',
    'VulnerabilityAuditConfiguration',
    'VulnerabilityAuditVulnerability',
    'GetKnowledgebasesFilterResult',
    'GetKnowledgebasesKnowledgeBaseCollectionResult',
    'GetKnowledgebasesKnowledgeBaseCollectionItemResult',
    'GetVulnerabilityAuditApplicationDependencyResult',
    'GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionResult',
    'GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemResult',
    'GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemItemResult',
    'GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemItemVulnerabilityResult',
    'GetVulnerabilityAuditApplicationDependencyVulnerabilitiesFilterResult',
    'GetVulnerabilityAuditApplicationDependencyVulnerabilityItemResult',
    'GetVulnerabilityAuditApplicationDependencyVulnerabilityItemVulnerabilityResult',
    'GetVulnerabilityAuditConfigurationResult',
    'GetVulnerabilityAuditVulnerabilityResult',
    'GetVulnerabilityAuditsFilterResult',
    'GetVulnerabilityAuditsVulnerabilityAuditCollectionResult',
    'GetVulnerabilityAuditsVulnerabilityAuditCollectionItemResult',
    'GetVulnerabilityAuditsVulnerabilityAuditCollectionItemApplicationDependencyResult',
    'GetVulnerabilityAuditsVulnerabilityAuditCollectionItemConfigurationResult',
    'GetVulnerabilityAuditsVulnerabilityAuditCollectionItemVulnerabilityResult',
]

@pulumi.output_type
class VulnerabilityAuditApplicationDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationDependencyNodeIds":
            suggest = "application_dependency_node_ids"
        elif key == "nodeId":
            suggest = "node_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VulnerabilityAuditApplicationDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VulnerabilityAuditApplicationDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VulnerabilityAuditApplicationDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_dependency_node_ids: Sequence[str],
                 gav: str,
                 node_id: str):
        """
        :param Sequence[str] application_dependency_node_ids: List of (Application Dependencies) node identifiers on which this node depends.
        :param str gav: Unique Group Artifact Version (GAV) identifier (Group:Artifact:Version).
        :param str node_id: Unique identifier of an Application Dependency node.
        """
        pulumi.set(__self__, "application_dependency_node_ids", application_dependency_node_ids)
        pulumi.set(__self__, "gav", gav)
        pulumi.set(__self__, "node_id", node_id)

    @property
    @pulumi.getter(name="applicationDependencyNodeIds")
    def application_dependency_node_ids(self) -> Sequence[str]:
        """
        List of (Application Dependencies) node identifiers on which this node depends.
        """
        return pulumi.get(self, "application_dependency_node_ids")

    @property
    @pulumi.getter
    def gav(self) -> str:
        """
        Unique Group Artifact Version (GAV) identifier (Group:Artifact:Version).
        """
        return pulumi.get(self, "gav")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        """
        Unique identifier of an Application Dependency node.
        """
        return pulumi.get(self, "node_id")


@pulumi.output_type
class VulnerabilityAuditConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxPermissibleCvssV2score":
            suggest = "max_permissible_cvss_v2score"
        elif key == "maxPermissibleCvssV3score":
            suggest = "max_permissible_cvss_v3score"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VulnerabilityAuditConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VulnerabilityAuditConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VulnerabilityAuditConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclusions: Optional[Sequence[str]] = None,
                 max_permissible_cvss_v2score: Optional[float] = None,
                 max_permissible_cvss_v3score: Optional[float] = None):
        """
        :param Sequence[str] exclusions: Pattern to exclude artifacts from audit.
        :param float max_permissible_cvss_v2score: The minimum CVSS V2 score for a vulnerability to be considered by the audit as failed.
        :param float max_permissible_cvss_v3score: The minimum CVSS V3 score for a vulnerability to be considered by the audit as failed.
        """
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if max_permissible_cvss_v2score is not None:
            pulumi.set(__self__, "max_permissible_cvss_v2score", max_permissible_cvss_v2score)
        if max_permissible_cvss_v3score is not None:
            pulumi.set(__self__, "max_permissible_cvss_v3score", max_permissible_cvss_v3score)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        """
        Pattern to exclude artifacts from audit.
        """
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter(name="maxPermissibleCvssV2score")
    def max_permissible_cvss_v2score(self) -> Optional[float]:
        """
        The minimum CVSS V2 score for a vulnerability to be considered by the audit as failed.
        """
        return pulumi.get(self, "max_permissible_cvss_v2score")

    @property
    @pulumi.getter(name="maxPermissibleCvssV3score")
    def max_permissible_cvss_v3score(self) -> Optional[float]:
        """
        The minimum CVSS V3 score for a vulnerability to be considered by the audit as failed.
        """
        return pulumi.get(self, "max_permissible_cvss_v3score")


@pulumi.output_type
class VulnerabilityAuditVulnerability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cvssV2score":
            suggest = "cvss_v2score"
        elif key == "cvssV3score":
            suggest = "cvss_v3score"
        elif key == "isIgnored":
            suggest = "is_ignored"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VulnerabilityAuditVulnerability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VulnerabilityAuditVulnerability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VulnerabilityAuditVulnerability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cvss_v2score: Optional[float] = None,
                 cvss_v3score: Optional[float] = None,
                 id: Optional[str] = None,
                 is_ignored: Optional[bool] = None):
        """
        :param float cvss_v2score: Common Vulnerability Scoring System (CVSS) Version 2.
        :param float cvss_v3score: Common Vulnerability Scoring System (CVSS) Version 3.
        :param str id: Unique vulnerability identifier.
        :param bool is_ignored: Indicates if the vulnerability was ignored according to the audit configuration.
        """
        if cvss_v2score is not None:
            pulumi.set(__self__, "cvss_v2score", cvss_v2score)
        if cvss_v3score is not None:
            pulumi.set(__self__, "cvss_v3score", cvss_v3score)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_ignored is not None:
            pulumi.set(__self__, "is_ignored", is_ignored)

    @property
    @pulumi.getter(name="cvssV2score")
    def cvss_v2score(self) -> Optional[float]:
        """
        Common Vulnerability Scoring System (CVSS) Version 2.
        """
        return pulumi.get(self, "cvss_v2score")

    @property
    @pulumi.getter(name="cvssV3score")
    def cvss_v3score(self) -> Optional[float]:
        """
        Common Vulnerability Scoring System (CVSS) Version 3.
        """
        return pulumi.get(self, "cvss_v3score")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique vulnerability identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIgnored")
    def is_ignored(self) -> Optional[bool]:
        """
        Indicates if the vulnerability was ignored according to the audit configuration.
        """
        return pulumi.get(self, "is_ignored")


@pulumi.output_type
class GetKnowledgebasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetKnowledgebasesKnowledgeBaseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetKnowledgebasesKnowledgeBaseCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetKnowledgebasesKnowledgeBaseCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetKnowledgebasesKnowledgeBaseCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: A filter to return only resources that belong to the specified compartment identifier.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: A filter to return only resources that match the specified identifier.
        :param str state: A filter to return only Knowledge Bases that match the specified lifecycleState.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The creation date and time of the Knowledge Base (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        :param str time_updated: The date and time the Knowledge Base was last updated (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        A filter to return only resources that belong to the specified compartment identifier.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        A filter to return only resources that match the specified identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only Knowledge Bases that match the specified lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The creation date and time of the Knowledge Base (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the Knowledge Base was last updated (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyResult(dict):
    def __init__(__self__, *,
                 application_dependency_node_ids: Sequence[str],
                 gav: str,
                 node_id: str):
        pulumi.set(__self__, "application_dependency_node_ids", application_dependency_node_ids)
        pulumi.set(__self__, "gav", gav)
        pulumi.set(__self__, "node_id", node_id)

    @property
    @pulumi.getter(name="applicationDependencyNodeIds")
    def application_dependency_node_ids(self) -> Sequence[str]:
        return pulumi.get(self, "application_dependency_node_ids")

    @property
    @pulumi.getter
    def gav(self) -> str:
        return pulumi.get(self, "gav")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        return pulumi.get(self, "node_id")


@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemResult']):
        """
        :param Sequence['GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemArgs'] items: List of Vulnerability Audit summaries.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemResult']:
        """
        List of Vulnerability Audit summaries.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemItemResult']):
        """
        :param Sequence['GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemItemArgs'] items: List of Vulnerability Audit summaries.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemItemResult']:
        """
        List of Vulnerability Audit summaries.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 application_dependency_node_ids: Sequence[str],
                 gav: str,
                 is_found_in_knowledge_base: bool,
                 node_id: str,
                 vulnerabilities: Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemItemVulnerabilityResult']):
        """
        :param Sequence[str] application_dependency_node_ids: List of (Application Dependencies) node identifiers on which this node depends.
        :param str gav: A filter to return only resources that match the entire GAV (Group Artifact Version) identifier given.
        :param bool is_found_in_knowledge_base: Indicates if the artifact is found in the knowledge base.
        :param str node_id: Unique identifier of an Application Dependency node.
        :param Sequence['GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemItemVulnerabilityArgs'] vulnerabilities: List of vulnerabilities for the Application Dependency.
        """
        pulumi.set(__self__, "application_dependency_node_ids", application_dependency_node_ids)
        pulumi.set(__self__, "gav", gav)
        pulumi.set(__self__, "is_found_in_knowledge_base", is_found_in_knowledge_base)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "vulnerabilities", vulnerabilities)

    @property
    @pulumi.getter(name="applicationDependencyNodeIds")
    def application_dependency_node_ids(self) -> Sequence[str]:
        """
        List of (Application Dependencies) node identifiers on which this node depends.
        """
        return pulumi.get(self, "application_dependency_node_ids")

    @property
    @pulumi.getter
    def gav(self) -> str:
        """
        A filter to return only resources that match the entire GAV (Group Artifact Version) identifier given.
        """
        return pulumi.get(self, "gav")

    @property
    @pulumi.getter(name="isFoundInKnowledgeBase")
    def is_found_in_knowledge_base(self) -> bool:
        """
        Indicates if the artifact is found in the knowledge base.
        """
        return pulumi.get(self, "is_found_in_knowledge_base")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        """
        Unique identifier of an Application Dependency node.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter
    def vulnerabilities(self) -> Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemItemVulnerabilityResult']:
        """
        List of vulnerabilities for the Application Dependency.
        """
        return pulumi.get(self, "vulnerabilities")


@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemItemVulnerabilityResult(dict):
    def __init__(__self__, *,
                 cvss_v2score: float,
                 cvss_v3score: float,
                 id: str,
                 is_ignored: bool):
        """
        :param float cvss_v2score: Common Vulnerability Scoring System (CVSS) Version 2.
        :param float cvss_v3score: Common Vulnerability Scoring System (CVSS) Version 3.
        :param str id: Unique vulnerability identifier.
        :param bool is_ignored: Indicates if the vulnerability was ignored according to the audit configuration.
        """
        pulumi.set(__self__, "cvss_v2score", cvss_v2score)
        pulumi.set(__self__, "cvss_v3score", cvss_v3score)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_ignored", is_ignored)

    @property
    @pulumi.getter(name="cvssV2score")
    def cvss_v2score(self) -> float:
        """
        Common Vulnerability Scoring System (CVSS) Version 2.
        """
        return pulumi.get(self, "cvss_v2score")

    @property
    @pulumi.getter(name="cvssV3score")
    def cvss_v3score(self) -> float:
        """
        Common Vulnerability Scoring System (CVSS) Version 3.
        """
        return pulumi.get(self, "cvss_v3score")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique vulnerability identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIgnored")
    def is_ignored(self) -> bool:
        """
        Indicates if the vulnerability was ignored according to the audit configuration.
        """
        return pulumi.get(self, "is_ignored")


@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyVulnerabilitiesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyVulnerabilityItemResult(dict):
    def __init__(__self__, *,
                 application_dependency_node_ids: Sequence[str],
                 gav: str,
                 is_found_in_knowledge_base: bool,
                 node_id: str,
                 vulnerabilities: Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilityItemVulnerabilityResult']):
        """
        :param Sequence[str] application_dependency_node_ids: List of (Application Dependencies) node identifiers on which this node depends.
        :param str gav: A filter to return only resources that match the entire GAV (Group Artifact Version) identifier given.
        :param bool is_found_in_knowledge_base: Indicates if the artifact is found in the knowledge base.
        :param str node_id: Unique identifier of an Application Dependency node.
        :param Sequence['GetVulnerabilityAuditApplicationDependencyVulnerabilityItemVulnerabilityArgs'] vulnerabilities: List of vulnerabilities for the Application Dependency.
        """
        pulumi.set(__self__, "application_dependency_node_ids", application_dependency_node_ids)
        pulumi.set(__self__, "gav", gav)
        pulumi.set(__self__, "is_found_in_knowledge_base", is_found_in_knowledge_base)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "vulnerabilities", vulnerabilities)

    @property
    @pulumi.getter(name="applicationDependencyNodeIds")
    def application_dependency_node_ids(self) -> Sequence[str]:
        """
        List of (Application Dependencies) node identifiers on which this node depends.
        """
        return pulumi.get(self, "application_dependency_node_ids")

    @property
    @pulumi.getter
    def gav(self) -> str:
        """
        A filter to return only resources that match the entire GAV (Group Artifact Version) identifier given.
        """
        return pulumi.get(self, "gav")

    @property
    @pulumi.getter(name="isFoundInKnowledgeBase")
    def is_found_in_knowledge_base(self) -> bool:
        """
        Indicates if the artifact is found in the knowledge base.
        """
        return pulumi.get(self, "is_found_in_knowledge_base")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        """
        Unique identifier of an Application Dependency node.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter
    def vulnerabilities(self) -> Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilityItemVulnerabilityResult']:
        """
        List of vulnerabilities for the Application Dependency.
        """
        return pulumi.get(self, "vulnerabilities")


@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyVulnerabilityItemVulnerabilityResult(dict):
    def __init__(__self__, *,
                 cvss_v2score: float,
                 cvss_v3score: float,
                 id: str,
                 is_ignored: bool):
        """
        :param float cvss_v2score: Common Vulnerability Scoring System (CVSS) Version 2.
        :param float cvss_v3score: Common Vulnerability Scoring System (CVSS) Version 3.
        :param str id: Unique vulnerability identifier.
        :param bool is_ignored: Indicates if the vulnerability was ignored according to the audit configuration.
        """
        pulumi.set(__self__, "cvss_v2score", cvss_v2score)
        pulumi.set(__self__, "cvss_v3score", cvss_v3score)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_ignored", is_ignored)

    @property
    @pulumi.getter(name="cvssV2score")
    def cvss_v2score(self) -> float:
        """
        Common Vulnerability Scoring System (CVSS) Version 2.
        """
        return pulumi.get(self, "cvss_v2score")

    @property
    @pulumi.getter(name="cvssV3score")
    def cvss_v3score(self) -> float:
        """
        Common Vulnerability Scoring System (CVSS) Version 3.
        """
        return pulumi.get(self, "cvss_v3score")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique vulnerability identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIgnored")
    def is_ignored(self) -> bool:
        """
        Indicates if the vulnerability was ignored according to the audit configuration.
        """
        return pulumi.get(self, "is_ignored")


@pulumi.output_type
class GetVulnerabilityAuditConfigurationResult(dict):
    def __init__(__self__, *,
                 exclusions: Sequence[str],
                 max_permissible_cvss_v2score: float,
                 max_permissible_cvss_v3score: float):
        """
        :param Sequence[str] exclusions: Pattern to exclude artifacts from audit.
        :param float max_permissible_cvss_v2score: The minimum CVSS V2 score for a vulnerability to be considered by the audit as failed.
        :param float max_permissible_cvss_v3score: The minimum CVSS V3 score for a vulnerability to be considered by the audit as failed.
        """
        pulumi.set(__self__, "exclusions", exclusions)
        pulumi.set(__self__, "max_permissible_cvss_v2score", max_permissible_cvss_v2score)
        pulumi.set(__self__, "max_permissible_cvss_v3score", max_permissible_cvss_v3score)

    @property
    @pulumi.getter
    def exclusions(self) -> Sequence[str]:
        """
        Pattern to exclude artifacts from audit.
        """
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter(name="maxPermissibleCvssV2score")
    def max_permissible_cvss_v2score(self) -> float:
        """
        The minimum CVSS V2 score for a vulnerability to be considered by the audit as failed.
        """
        return pulumi.get(self, "max_permissible_cvss_v2score")

    @property
    @pulumi.getter(name="maxPermissibleCvssV3score")
    def max_permissible_cvss_v3score(self) -> float:
        """
        The minimum CVSS V3 score for a vulnerability to be considered by the audit as failed.
        """
        return pulumi.get(self, "max_permissible_cvss_v3score")


@pulumi.output_type
class GetVulnerabilityAuditVulnerabilityResult(dict):
    def __init__(__self__, *,
                 cvss_v2score: float,
                 cvss_v3score: float,
                 id: str,
                 is_ignored: bool):
        """
        :param float cvss_v2score: Common Vulnerability Scoring System (CVSS) Version 2.
        :param float cvss_v3score: Common Vulnerability Scoring System (CVSS) Version 3.
        :param str id: Unique vulnerability identifier.
        :param bool is_ignored: Indicates if the vulnerability was ignored according to the audit configuration.
        """
        pulumi.set(__self__, "cvss_v2score", cvss_v2score)
        pulumi.set(__self__, "cvss_v3score", cvss_v3score)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_ignored", is_ignored)

    @property
    @pulumi.getter(name="cvssV2score")
    def cvss_v2score(self) -> float:
        """
        Common Vulnerability Scoring System (CVSS) Version 2.
        """
        return pulumi.get(self, "cvss_v2score")

    @property
    @pulumi.getter(name="cvssV3score")
    def cvss_v3score(self) -> float:
        """
        Common Vulnerability Scoring System (CVSS) Version 3.
        """
        return pulumi.get(self, "cvss_v3score")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique vulnerability identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIgnored")
    def is_ignored(self) -> bool:
        """
        Indicates if the vulnerability was ignored according to the audit configuration.
        """
        return pulumi.get(self, "is_ignored")


@pulumi.output_type
class GetVulnerabilityAuditsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVulnerabilityAuditsVulnerabilityAuditCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetVulnerabilityAuditsVulnerabilityAuditCollectionItemResult(dict):
    def __init__(__self__, *,
                 application_dependencies: Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemApplicationDependencyResult'],
                 build_type: str,
                 compartment_id: str,
                 configurations: Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemConfigurationResult'],
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_success: bool,
                 knowledge_base_id: str,
                 max_observed_cvss_v2score: float,
                 max_observed_cvss_v3score: float,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str,
                 vulnerabilities: Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemVulnerabilityResult'],
                 vulnerable_artifacts_count: int):
        """
        :param str build_type: The type of the build tool.
        :param str compartment_id: A filter to return only resources that belong to the specified compartment identifier.
        :param Sequence['GetVulnerabilityAuditsVulnerabilityAuditCollectionItemConfigurationArgs'] configurations: Configuration for a Vulnerability Audit type: object
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: A filter to return only resources that match the specified identifier.
        :param bool is_success: A filter to return only successful or failed Vulnerability Audits.
        :param str knowledge_base_id: A filter to return only Vulnerability Audits that were created against the specified knowledge base.
        :param float max_observed_cvss_v2score: Maximum Common Vulnerability Scoring System Version 2 score of vulnerabilities.
        :param float max_observed_cvss_v3score: Maximum Common Vulnerability Scoring System Version 3 score of vulnerabilities.
        :param str state: A filter to return only Vulnerability Audits that match the specified lifecycleState.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The creation date and time of the Vulnerability Audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        :param str time_updated: The update date and time of the Vulnerability Audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        :param Sequence['GetVulnerabilityAuditsVulnerabilityAuditCollectionItemVulnerabilityArgs'] vulnerabilities: List of vulnerabilities found in the Vulnerability Audit.
        :param int vulnerable_artifacts_count: Count of vulnerable artifacts.
        """
        pulumi.set(__self__, "application_dependencies", application_dependencies)
        pulumi.set(__self__, "build_type", build_type)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "configurations", configurations)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_success", is_success)
        pulumi.set(__self__, "knowledge_base_id", knowledge_base_id)
        pulumi.set(__self__, "max_observed_cvss_v2score", max_observed_cvss_v2score)
        pulumi.set(__self__, "max_observed_cvss_v3score", max_observed_cvss_v3score)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "vulnerabilities", vulnerabilities)
        pulumi.set(__self__, "vulnerable_artifacts_count", vulnerable_artifacts_count)

    @property
    @pulumi.getter(name="applicationDependencies")
    def application_dependencies(self) -> Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemApplicationDependencyResult']:
        return pulumi.get(self, "application_dependencies")

    @property
    @pulumi.getter(name="buildType")
    def build_type(self) -> str:
        """
        The type of the build tool.
        """
        return pulumi.get(self, "build_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        A filter to return only resources that belong to the specified compartment identifier.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemConfigurationResult']:
        """
        Configuration for a Vulnerability Audit type: object
        """
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        A filter to return only resources that match the specified identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> bool:
        """
        A filter to return only successful or failed Vulnerability Audits.
        """
        return pulumi.get(self, "is_success")

    @property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> str:
        """
        A filter to return only Vulnerability Audits that were created against the specified knowledge base.
        """
        return pulumi.get(self, "knowledge_base_id")

    @property
    @pulumi.getter(name="maxObservedCvssV2score")
    def max_observed_cvss_v2score(self) -> float:
        """
        Maximum Common Vulnerability Scoring System Version 2 score of vulnerabilities.
        """
        return pulumi.get(self, "max_observed_cvss_v2score")

    @property
    @pulumi.getter(name="maxObservedCvssV3score")
    def max_observed_cvss_v3score(self) -> float:
        """
        Maximum Common Vulnerability Scoring System Version 3 score of vulnerabilities.
        """
        return pulumi.get(self, "max_observed_cvss_v3score")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only Vulnerability Audits that match the specified lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The creation date and time of the Vulnerability Audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The update date and time of the Vulnerability Audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def vulnerabilities(self) -> Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemVulnerabilityResult']:
        """
        List of vulnerabilities found in the Vulnerability Audit.
        """
        return pulumi.get(self, "vulnerabilities")

    @property
    @pulumi.getter(name="vulnerableArtifactsCount")
    def vulnerable_artifacts_count(self) -> int:
        """
        Count of vulnerable artifacts.
        """
        return pulumi.get(self, "vulnerable_artifacts_count")


@pulumi.output_type
class GetVulnerabilityAuditsVulnerabilityAuditCollectionItemApplicationDependencyResult(dict):
    def __init__(__self__, *,
                 application_dependency_node_ids: Sequence[str],
                 gav: str,
                 node_id: str):
        pulumi.set(__self__, "application_dependency_node_ids", application_dependency_node_ids)
        pulumi.set(__self__, "gav", gav)
        pulumi.set(__self__, "node_id", node_id)

    @property
    @pulumi.getter(name="applicationDependencyNodeIds")
    def application_dependency_node_ids(self) -> Sequence[str]:
        return pulumi.get(self, "application_dependency_node_ids")

    @property
    @pulumi.getter
    def gav(self) -> str:
        return pulumi.get(self, "gav")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        return pulumi.get(self, "node_id")


@pulumi.output_type
class GetVulnerabilityAuditsVulnerabilityAuditCollectionItemConfigurationResult(dict):
    def __init__(__self__, *,
                 exclusions: Sequence[str],
                 max_permissible_cvss_v2score: float,
                 max_permissible_cvss_v3score: float):
        """
        :param Sequence[str] exclusions: Pattern to exclude artifacts from audit.
        :param float max_permissible_cvss_v2score: The minimum CVSS V2 score for a vulnerability to be considered by the audit as failed.
        :param float max_permissible_cvss_v3score: The minimum CVSS V3 score for a vulnerability to be considered by the audit as failed.
        """
        pulumi.set(__self__, "exclusions", exclusions)
        pulumi.set(__self__, "max_permissible_cvss_v2score", max_permissible_cvss_v2score)
        pulumi.set(__self__, "max_permissible_cvss_v3score", max_permissible_cvss_v3score)

    @property
    @pulumi.getter
    def exclusions(self) -> Sequence[str]:
        """
        Pattern to exclude artifacts from audit.
        """
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter(name="maxPermissibleCvssV2score")
    def max_permissible_cvss_v2score(self) -> float:
        """
        The minimum CVSS V2 score for a vulnerability to be considered by the audit as failed.
        """
        return pulumi.get(self, "max_permissible_cvss_v2score")

    @property
    @pulumi.getter(name="maxPermissibleCvssV3score")
    def max_permissible_cvss_v3score(self) -> float:
        """
        The minimum CVSS V3 score for a vulnerability to be considered by the audit as failed.
        """
        return pulumi.get(self, "max_permissible_cvss_v3score")


@pulumi.output_type
class GetVulnerabilityAuditsVulnerabilityAuditCollectionItemVulnerabilityResult(dict):
    def __init__(__self__, *,
                 cvss_v2score: float,
                 cvss_v3score: float,
                 id: str,
                 is_ignored: bool):
        """
        :param float cvss_v2score: Common Vulnerability Scoring System (CVSS) Version 2.
        :param float cvss_v3score: Common Vulnerability Scoring System (CVSS) Version 3.
        :param str id: A filter to return only resources that match the specified identifier.
        :param bool is_ignored: Indicates if the vulnerability was ignored according to the audit configuration.
        """
        pulumi.set(__self__, "cvss_v2score", cvss_v2score)
        pulumi.set(__self__, "cvss_v3score", cvss_v3score)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_ignored", is_ignored)

    @property
    @pulumi.getter(name="cvssV2score")
    def cvss_v2score(self) -> float:
        """
        Common Vulnerability Scoring System (CVSS) Version 2.
        """
        return pulumi.get(self, "cvss_v2score")

    @property
    @pulumi.getter(name="cvssV3score")
    def cvss_v3score(self) -> float:
        """
        Common Vulnerability Scoring System (CVSS) Version 3.
        """
        return pulumi.get(self, "cvss_v3score")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        A filter to return only resources that match the specified identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIgnored")
    def is_ignored(self) -> bool:
        """
        Indicates if the vulnerability was ignored according to the audit configuration.
        """
        return pulumi.get(self, "is_ignored")


