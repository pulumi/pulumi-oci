# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'RemediationRecipeDetectConfiguration',
    'RemediationRecipeNetworkConfiguration',
    'RemediationRecipeScmConfiguration',
    'RemediationRecipeVerifyConfiguration',
    'RemediationRunStage',
    'VulnerabilityAuditApplicationDependency',
    'VulnerabilityAuditConfiguration',
    'VulnerabilityAuditSource',
    'VulnerabilityAuditVulnerability',
    'GetKnowledgebasesFilterResult',
    'GetKnowledgebasesKnowledgeBaseCollectionResult',
    'GetKnowledgebasesKnowledgeBaseCollectionItemResult',
    'GetRemediationRecipeDetectConfigurationResult',
    'GetRemediationRecipeNetworkConfigurationResult',
    'GetRemediationRecipeScmConfigurationResult',
    'GetRemediationRecipeVerifyConfigurationResult',
    'GetRemediationRecipesFilterResult',
    'GetRemediationRecipesRemediationRecipeCollectionResult',
    'GetRemediationRecipesRemediationRecipeCollectionItemResult',
    'GetRemediationRecipesRemediationRecipeCollectionItemDetectConfigurationResult',
    'GetRemediationRecipesRemediationRecipeCollectionItemNetworkConfigurationResult',
    'GetRemediationRecipesRemediationRecipeCollectionItemScmConfigurationResult',
    'GetRemediationRecipesRemediationRecipeCollectionItemVerifyConfigurationResult',
    'GetRemediationRunApplicationDependencyRecommendationsApplicationDependencyRecommendationCollectionResult',
    'GetRemediationRunApplicationDependencyRecommendationsApplicationDependencyRecommendationCollectionItemResult',
    'GetRemediationRunApplicationDependencyRecommendationsFilterResult',
    'GetRemediationRunStageResult',
    'GetRemediationRunStagePipelinePropertyResult',
    'GetRemediationRunStagePullRequestPropertyResult',
    'GetRemediationRunStagesFilterResult',
    'GetRemediationRunStagesRemediationRunStageCollectionResult',
    'GetRemediationRunStagesRemediationRunStageCollectionItemResult',
    'GetRemediationRunStagesRemediationRunStageCollectionItemPipelinePropertyResult',
    'GetRemediationRunStagesRemediationRunStageCollectionItemPullRequestPropertyResult',
    'GetRemediationRunsFilterResult',
    'GetRemediationRunsRemediationRunCollectionResult',
    'GetRemediationRunsRemediationRunCollectionItemResult',
    'GetRemediationRunsRemediationRunCollectionItemStageResult',
    'GetVulnerabilityAuditApplicationDependencyResult',
    'GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionResult',
    'GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemResult',
    'GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerabilityResult',
    'GetVulnerabilityAuditApplicationDependencyVulnerabilitiesFilterResult',
    'GetVulnerabilityAuditApplicationDependencyVulnerabilityItemResult',
    'GetVulnerabilityAuditApplicationDependencyVulnerabilityItemVulnerabilityResult',
    'GetVulnerabilityAuditConfigurationResult',
    'GetVulnerabilityAuditSourceResult',
    'GetVulnerabilityAuditVulnerabilityResult',
    'GetVulnerabilityAuditsFilterResult',
    'GetVulnerabilityAuditsVulnerabilityAuditCollectionResult',
    'GetVulnerabilityAuditsVulnerabilityAuditCollectionItemResult',
    'GetVulnerabilityAuditsVulnerabilityAuditCollectionItemApplicationDependencyResult',
    'GetVulnerabilityAuditsVulnerabilityAuditCollectionItemConfigurationResult',
    'GetVulnerabilityAuditsVulnerabilityAuditCollectionItemSourceResult',
    'GetVulnerabilityAuditsVulnerabilityAuditCollectionItemVulnerabilityResult',
]

@pulumi.output_type
class RemediationRecipeDetectConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxPermissibleCvssV2score":
            suggest = "max_permissible_cvss_v2score"
        elif key == "maxPermissibleCvssV3score":
            suggest = "max_permissible_cvss_v3score"
        elif key == "upgradePolicy":
            suggest = "upgrade_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RemediationRecipeDetectConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RemediationRecipeDetectConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RemediationRecipeDetectConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclusions: Optional[Sequence[str]] = None,
                 max_permissible_cvss_v2score: Optional[float] = None,
                 max_permissible_cvss_v3score: Optional[float] = None,
                 upgrade_policy: Optional[str] = None):
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if max_permissible_cvss_v2score is not None:
            pulumi.set(__self__, "max_permissible_cvss_v2score", max_permissible_cvss_v2score)
        if max_permissible_cvss_v3score is not None:
            pulumi.set(__self__, "max_permissible_cvss_v3score", max_permissible_cvss_v3score)
        if upgrade_policy is not None:
            pulumi.set(__self__, "upgrade_policy", upgrade_policy)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter(name="maxPermissibleCvssV2score")
    def max_permissible_cvss_v2score(self) -> Optional[float]:
        return pulumi.get(self, "max_permissible_cvss_v2score")

    @property
    @pulumi.getter(name="maxPermissibleCvssV3score")
    def max_permissible_cvss_v3score(self) -> Optional[float]:
        return pulumi.get(self, "max_permissible_cvss_v3score")

    @property
    @pulumi.getter(name="upgradePolicy")
    def upgrade_policy(self) -> Optional[str]:
        return pulumi.get(self, "upgrade_policy")


@pulumi.output_type
class RemediationRecipeNetworkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "nsgIds":
            suggest = "nsg_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RemediationRecipeNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RemediationRecipeNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RemediationRecipeNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 nsg_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")


@pulumi.output_type
class RemediationRecipeScmConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isAutomergeEnabled":
            suggest = "is_automerge_enabled"
        elif key == "scmType":
            suggest = "scm_type"
        elif key == "buildFileLocation":
            suggest = "build_file_location"
        elif key == "externalScmType":
            suggest = "external_scm_type"
        elif key == "ociCodeRepositoryId":
            suggest = "oci_code_repository_id"
        elif key == "patSecretId":
            suggest = "pat_secret_id"
        elif key == "repositoryUrl":
            suggest = "repository_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RemediationRecipeScmConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RemediationRecipeScmConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RemediationRecipeScmConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch: str,
                 is_automerge_enabled: bool,
                 scm_type: str,
                 build_file_location: Optional[str] = None,
                 external_scm_type: Optional[str] = None,
                 oci_code_repository_id: Optional[str] = None,
                 pat_secret_id: Optional[str] = None,
                 repository_url: Optional[str] = None,
                 username: Optional[str] = None):
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "is_automerge_enabled", is_automerge_enabled)
        pulumi.set(__self__, "scm_type", scm_type)
        if build_file_location is not None:
            pulumi.set(__self__, "build_file_location", build_file_location)
        if external_scm_type is not None:
            pulumi.set(__self__, "external_scm_type", external_scm_type)
        if oci_code_repository_id is not None:
            pulumi.set(__self__, "oci_code_repository_id", oci_code_repository_id)
        if pat_secret_id is not None:
            pulumi.set(__self__, "pat_secret_id", pat_secret_id)
        if repository_url is not None:
            pulumi.set(__self__, "repository_url", repository_url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def branch(self) -> str:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="isAutomergeEnabled")
    def is_automerge_enabled(self) -> bool:
        return pulumi.get(self, "is_automerge_enabled")

    @property
    @pulumi.getter(name="scmType")
    def scm_type(self) -> str:
        return pulumi.get(self, "scm_type")

    @property
    @pulumi.getter(name="buildFileLocation")
    def build_file_location(self) -> Optional[str]:
        return pulumi.get(self, "build_file_location")

    @property
    @pulumi.getter(name="externalScmType")
    def external_scm_type(self) -> Optional[str]:
        return pulumi.get(self, "external_scm_type")

    @property
    @pulumi.getter(name="ociCodeRepositoryId")
    def oci_code_repository_id(self) -> Optional[str]:
        return pulumi.get(self, "oci_code_repository_id")

    @property
    @pulumi.getter(name="patSecretId")
    def pat_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "pat_secret_id")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> Optional[str]:
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class RemediationRecipeVerifyConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buildServiceType":
            suggest = "build_service_type"
        elif key == "additionalParameters":
            suggest = "additional_parameters"
        elif key == "jenkinsUrl":
            suggest = "jenkins_url"
        elif key == "jobName":
            suggest = "job_name"
        elif key == "patSecretId":
            suggest = "pat_secret_id"
        elif key == "pipelineId":
            suggest = "pipeline_id"
        elif key == "repositoryUrl":
            suggest = "repository_url"
        elif key == "triggerSecretId":
            suggest = "trigger_secret_id"
        elif key == "workflowName":
            suggest = "workflow_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RemediationRecipeVerifyConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RemediationRecipeVerifyConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RemediationRecipeVerifyConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 build_service_type: str,
                 additional_parameters: Optional[Mapping[str, Any]] = None,
                 jenkins_url: Optional[str] = None,
                 job_name: Optional[str] = None,
                 pat_secret_id: Optional[str] = None,
                 pipeline_id: Optional[str] = None,
                 repository_url: Optional[str] = None,
                 trigger_secret_id: Optional[str] = None,
                 username: Optional[str] = None,
                 workflow_name: Optional[str] = None):
        pulumi.set(__self__, "build_service_type", build_service_type)
        if additional_parameters is not None:
            pulumi.set(__self__, "additional_parameters", additional_parameters)
        if jenkins_url is not None:
            pulumi.set(__self__, "jenkins_url", jenkins_url)
        if job_name is not None:
            pulumi.set(__self__, "job_name", job_name)
        if pat_secret_id is not None:
            pulumi.set(__self__, "pat_secret_id", pat_secret_id)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if repository_url is not None:
            pulumi.set(__self__, "repository_url", repository_url)
        if trigger_secret_id is not None:
            pulumi.set(__self__, "trigger_secret_id", trigger_secret_id)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if workflow_name is not None:
            pulumi.set(__self__, "workflow_name", workflow_name)

    @property
    @pulumi.getter(name="buildServiceType")
    def build_service_type(self) -> str:
        return pulumi.get(self, "build_service_type")

    @property
    @pulumi.getter(name="additionalParameters")
    def additional_parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_parameters")

    @property
    @pulumi.getter(name="jenkinsUrl")
    def jenkins_url(self) -> Optional[str]:
        return pulumi.get(self, "jenkins_url")

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[str]:
        return pulumi.get(self, "job_name")

    @property
    @pulumi.getter(name="patSecretId")
    def pat_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "pat_secret_id")

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[str]:
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> Optional[str]:
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="triggerSecretId")
    def trigger_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "trigger_secret_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> Optional[str]:
        return pulumi.get(self, "workflow_name")


@pulumi.output_type
class RemediationRunStage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeCreated":
            suggest = "time_created"
        elif key == "timeFinished":
            suggest = "time_finished"
        elif key == "timeStarted":
            suggest = "time_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RemediationRunStage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RemediationRunStage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RemediationRunStage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 summary: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None,
                 type: Optional[str] = None):
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class VulnerabilityAuditApplicationDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeId":
            suggest = "node_id"
        elif key == "applicationDependencyNodeIds":
            suggest = "application_dependency_node_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VulnerabilityAuditApplicationDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VulnerabilityAuditApplicationDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VulnerabilityAuditApplicationDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gav: str,
                 node_id: str,
                 application_dependency_node_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "gav", gav)
        pulumi.set(__self__, "node_id", node_id)
        if application_dependency_node_ids is not None:
            pulumi.set(__self__, "application_dependency_node_ids", application_dependency_node_ids)

    @property
    @pulumi.getter
    def gav(self) -> str:
        return pulumi.get(self, "gav")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="applicationDependencyNodeIds")
    def application_dependency_node_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "application_dependency_node_ids")


@pulumi.output_type
class VulnerabilityAuditConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxPermissibleCvssV2score":
            suggest = "max_permissible_cvss_v2score"
        elif key == "maxPermissibleCvssV3score":
            suggest = "max_permissible_cvss_v3score"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VulnerabilityAuditConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VulnerabilityAuditConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VulnerabilityAuditConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclusions: Optional[Sequence[str]] = None,
                 max_permissible_cvss_v2score: Optional[float] = None,
                 max_permissible_cvss_v3score: Optional[float] = None):
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if max_permissible_cvss_v2score is not None:
            pulumi.set(__self__, "max_permissible_cvss_v2score", max_permissible_cvss_v2score)
        if max_permissible_cvss_v3score is not None:
            pulumi.set(__self__, "max_permissible_cvss_v3score", max_permissible_cvss_v3score)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter(name="maxPermissibleCvssV2score")
    def max_permissible_cvss_v2score(self) -> Optional[float]:
        return pulumi.get(self, "max_permissible_cvss_v2score")

    @property
    @pulumi.getter(name="maxPermissibleCvssV3score")
    def max_permissible_cvss_v3score(self) -> Optional[float]:
        return pulumi.get(self, "max_permissible_cvss_v3score")


@pulumi.output_type
class VulnerabilityAuditSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ociResourceId":
            suggest = "oci_resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VulnerabilityAuditSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VulnerabilityAuditSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VulnerabilityAuditSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 description: Optional[str] = None,
                 oci_resource_id: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if oci_resource_id is not None:
            pulumi.set(__self__, "oci_resource_id", oci_resource_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ociResourceId")
    def oci_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "oci_resource_id")


@pulumi.output_type
class VulnerabilityAuditVulnerability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cvssV2score":
            suggest = "cvss_v2score"
        elif key == "cvssV3score":
            suggest = "cvss_v3score"
        elif key == "isIgnored":
            suggest = "is_ignored"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VulnerabilityAuditVulnerability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VulnerabilityAuditVulnerability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VulnerabilityAuditVulnerability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cvss_v2score: Optional[float] = None,
                 cvss_v3score: Optional[float] = None,
                 id: Optional[str] = None,
                 is_ignored: Optional[bool] = None):
        if cvss_v2score is not None:
            pulumi.set(__self__, "cvss_v2score", cvss_v2score)
        if cvss_v3score is not None:
            pulumi.set(__self__, "cvss_v3score", cvss_v3score)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_ignored is not None:
            pulumi.set(__self__, "is_ignored", is_ignored)

    @property
    @pulumi.getter(name="cvssV2score")
    def cvss_v2score(self) -> Optional[float]:
        return pulumi.get(self, "cvss_v2score")

    @property
    @pulumi.getter(name="cvssV3score")
    def cvss_v3score(self) -> Optional[float]:
        return pulumi.get(self, "cvss_v3score")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIgnored")
    def is_ignored(self) -> Optional[bool]:
        return pulumi.get(self, "is_ignored")


@pulumi.output_type
class GetKnowledgebasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetKnowledgebasesKnowledgeBaseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetKnowledgebasesKnowledgeBaseCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetKnowledgebasesKnowledgeBaseCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetKnowledgebasesKnowledgeBaseCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetRemediationRecipeDetectConfigurationResult(dict):
    def __init__(__self__, *,
                 exclusions: Optional[Sequence[str]] = None,
                 max_permissible_cvss_v2score: Optional[float] = None,
                 max_permissible_cvss_v3score: Optional[float] = None,
                 upgrade_policy: Optional[str] = None):
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if max_permissible_cvss_v2score is not None:
            pulumi.set(__self__, "max_permissible_cvss_v2score", max_permissible_cvss_v2score)
        if max_permissible_cvss_v3score is not None:
            pulumi.set(__self__, "max_permissible_cvss_v3score", max_permissible_cvss_v3score)
        if upgrade_policy is not None:
            pulumi.set(__self__, "upgrade_policy", upgrade_policy)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter(name="maxPermissibleCvssV2score")
    def max_permissible_cvss_v2score(self) -> Optional[float]:
        return pulumi.get(self, "max_permissible_cvss_v2score")

    @property
    @pulumi.getter(name="maxPermissibleCvssV3score")
    def max_permissible_cvss_v3score(self) -> Optional[float]:
        return pulumi.get(self, "max_permissible_cvss_v3score")

    @property
    @pulumi.getter(name="upgradePolicy")
    def upgrade_policy(self) -> Optional[str]:
        return pulumi.get(self, "upgrade_policy")


@pulumi.output_type
class GetRemediationRecipeNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 nsg_ids: Optional[Sequence[str]] = None,
                 subnet_id: Optional[str] = None):
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetRemediationRecipeScmConfigurationResult(dict):
    def __init__(__self__, *,
                 branch: Optional[str] = None,
                 build_file_location: Optional[str] = None,
                 external_scm_type: Optional[str] = None,
                 is_automerge_enabled: Optional[bool] = None,
                 oci_code_repository_id: Optional[str] = None,
                 pat_secret_id: Optional[str] = None,
                 repository_url: Optional[str] = None,
                 scm_type: Optional[str] = None,
                 username: Optional[str] = None):
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if build_file_location is not None:
            pulumi.set(__self__, "build_file_location", build_file_location)
        if external_scm_type is not None:
            pulumi.set(__self__, "external_scm_type", external_scm_type)
        if is_automerge_enabled is not None:
            pulumi.set(__self__, "is_automerge_enabled", is_automerge_enabled)
        if oci_code_repository_id is not None:
            pulumi.set(__self__, "oci_code_repository_id", oci_code_repository_id)
        if pat_secret_id is not None:
            pulumi.set(__self__, "pat_secret_id", pat_secret_id)
        if repository_url is not None:
            pulumi.set(__self__, "repository_url", repository_url)
        if scm_type is not None:
            pulumi.set(__self__, "scm_type", scm_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def branch(self) -> Optional[str]:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="buildFileLocation")
    def build_file_location(self) -> Optional[str]:
        return pulumi.get(self, "build_file_location")

    @property
    @pulumi.getter(name="externalScmType")
    def external_scm_type(self) -> Optional[str]:
        return pulumi.get(self, "external_scm_type")

    @property
    @pulumi.getter(name="isAutomergeEnabled")
    def is_automerge_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_automerge_enabled")

    @property
    @pulumi.getter(name="ociCodeRepositoryId")
    def oci_code_repository_id(self) -> Optional[str]:
        return pulumi.get(self, "oci_code_repository_id")

    @property
    @pulumi.getter(name="patSecretId")
    def pat_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "pat_secret_id")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> Optional[str]:
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="scmType")
    def scm_type(self) -> Optional[str]:
        return pulumi.get(self, "scm_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetRemediationRecipeVerifyConfigurationResult(dict):
    def __init__(__self__, *,
                 additional_parameters: Optional[Mapping[str, Any]] = None,
                 build_service_type: Optional[str] = None,
                 jenkins_url: Optional[str] = None,
                 job_name: Optional[str] = None,
                 pat_secret_id: Optional[str] = None,
                 pipeline_id: Optional[str] = None,
                 repository_url: Optional[str] = None,
                 trigger_secret_id: Optional[str] = None,
                 username: Optional[str] = None,
                 workflow_name: Optional[str] = None):
        if additional_parameters is not None:
            pulumi.set(__self__, "additional_parameters", additional_parameters)
        if build_service_type is not None:
            pulumi.set(__self__, "build_service_type", build_service_type)
        if jenkins_url is not None:
            pulumi.set(__self__, "jenkins_url", jenkins_url)
        if job_name is not None:
            pulumi.set(__self__, "job_name", job_name)
        if pat_secret_id is not None:
            pulumi.set(__self__, "pat_secret_id", pat_secret_id)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if repository_url is not None:
            pulumi.set(__self__, "repository_url", repository_url)
        if trigger_secret_id is not None:
            pulumi.set(__self__, "trigger_secret_id", trigger_secret_id)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if workflow_name is not None:
            pulumi.set(__self__, "workflow_name", workflow_name)

    @property
    @pulumi.getter(name="additionalParameters")
    def additional_parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_parameters")

    @property
    @pulumi.getter(name="buildServiceType")
    def build_service_type(self) -> Optional[str]:
        return pulumi.get(self, "build_service_type")

    @property
    @pulumi.getter(name="jenkinsUrl")
    def jenkins_url(self) -> Optional[str]:
        return pulumi.get(self, "jenkins_url")

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[str]:
        return pulumi.get(self, "job_name")

    @property
    @pulumi.getter(name="patSecretId")
    def pat_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "pat_secret_id")

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[str]:
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> Optional[str]:
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="triggerSecretId")
    def trigger_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "trigger_secret_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> Optional[str]:
        return pulumi.get(self, "workflow_name")


@pulumi.output_type
class GetRemediationRecipesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRemediationRecipesRemediationRecipeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRemediationRecipesRemediationRecipeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRemediationRecipesRemediationRecipeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRemediationRecipesRemediationRecipeCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 detect_configurations: Optional[Sequence['outputs.GetRemediationRecipesRemediationRecipeCollectionItemDetectConfigurationResult']] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_run_triggered_on_kb_change: Optional[bool] = None,
                 knowledge_base_id: Optional[str] = None,
                 network_configurations: Optional[Sequence['outputs.GetRemediationRecipesRemediationRecipeCollectionItemNetworkConfigurationResult']] = None,
                 scm_configurations: Optional[Sequence['outputs.GetRemediationRecipesRemediationRecipeCollectionItemScmConfigurationResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 verify_configurations: Optional[Sequence['outputs.GetRemediationRecipesRemediationRecipeCollectionItemVerifyConfigurationResult']] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if detect_configurations is not None:
            pulumi.set(__self__, "detect_configurations", detect_configurations)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_run_triggered_on_kb_change is not None:
            pulumi.set(__self__, "is_run_triggered_on_kb_change", is_run_triggered_on_kb_change)
        if knowledge_base_id is not None:
            pulumi.set(__self__, "knowledge_base_id", knowledge_base_id)
        if network_configurations is not None:
            pulumi.set(__self__, "network_configurations", network_configurations)
        if scm_configurations is not None:
            pulumi.set(__self__, "scm_configurations", scm_configurations)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if verify_configurations is not None:
            pulumi.set(__self__, "verify_configurations", verify_configurations)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="detectConfigurations")
    def detect_configurations(self) -> Optional[Sequence['outputs.GetRemediationRecipesRemediationRecipeCollectionItemDetectConfigurationResult']]:
        return pulumi.get(self, "detect_configurations")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRunTriggeredOnKbChange")
    def is_run_triggered_on_kb_change(self) -> Optional[bool]:
        return pulumi.get(self, "is_run_triggered_on_kb_change")

    @property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> Optional[str]:
        return pulumi.get(self, "knowledge_base_id")

    @property
    @pulumi.getter(name="networkConfigurations")
    def network_configurations(self) -> Optional[Sequence['outputs.GetRemediationRecipesRemediationRecipeCollectionItemNetworkConfigurationResult']]:
        return pulumi.get(self, "network_configurations")

    @property
    @pulumi.getter(name="scmConfigurations")
    def scm_configurations(self) -> Optional[Sequence['outputs.GetRemediationRecipesRemediationRecipeCollectionItemScmConfigurationResult']]:
        return pulumi.get(self, "scm_configurations")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="verifyConfigurations")
    def verify_configurations(self) -> Optional[Sequence['outputs.GetRemediationRecipesRemediationRecipeCollectionItemVerifyConfigurationResult']]:
        return pulumi.get(self, "verify_configurations")


@pulumi.output_type
class GetRemediationRecipesRemediationRecipeCollectionItemDetectConfigurationResult(dict):
    def __init__(__self__, *,
                 exclusions: Optional[Sequence[str]] = None,
                 max_permissible_cvss_v2score: Optional[float] = None,
                 max_permissible_cvss_v3score: Optional[float] = None,
                 upgrade_policy: Optional[str] = None):
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if max_permissible_cvss_v2score is not None:
            pulumi.set(__self__, "max_permissible_cvss_v2score", max_permissible_cvss_v2score)
        if max_permissible_cvss_v3score is not None:
            pulumi.set(__self__, "max_permissible_cvss_v3score", max_permissible_cvss_v3score)
        if upgrade_policy is not None:
            pulumi.set(__self__, "upgrade_policy", upgrade_policy)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter(name="maxPermissibleCvssV2score")
    def max_permissible_cvss_v2score(self) -> Optional[float]:
        return pulumi.get(self, "max_permissible_cvss_v2score")

    @property
    @pulumi.getter(name="maxPermissibleCvssV3score")
    def max_permissible_cvss_v3score(self) -> Optional[float]:
        return pulumi.get(self, "max_permissible_cvss_v3score")

    @property
    @pulumi.getter(name="upgradePolicy")
    def upgrade_policy(self) -> Optional[str]:
        return pulumi.get(self, "upgrade_policy")


@pulumi.output_type
class GetRemediationRecipesRemediationRecipeCollectionItemNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 nsg_ids: Optional[Sequence[str]] = None,
                 subnet_id: Optional[str] = None):
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetRemediationRecipesRemediationRecipeCollectionItemScmConfigurationResult(dict):
    def __init__(__self__, *,
                 branch: Optional[str] = None,
                 build_file_location: Optional[str] = None,
                 external_scm_type: Optional[str] = None,
                 is_automerge_enabled: Optional[bool] = None,
                 oci_code_repository_id: Optional[str] = None,
                 pat_secret_id: Optional[str] = None,
                 repository_url: Optional[str] = None,
                 scm_type: Optional[str] = None,
                 username: Optional[str] = None):
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if build_file_location is not None:
            pulumi.set(__self__, "build_file_location", build_file_location)
        if external_scm_type is not None:
            pulumi.set(__self__, "external_scm_type", external_scm_type)
        if is_automerge_enabled is not None:
            pulumi.set(__self__, "is_automerge_enabled", is_automerge_enabled)
        if oci_code_repository_id is not None:
            pulumi.set(__self__, "oci_code_repository_id", oci_code_repository_id)
        if pat_secret_id is not None:
            pulumi.set(__self__, "pat_secret_id", pat_secret_id)
        if repository_url is not None:
            pulumi.set(__self__, "repository_url", repository_url)
        if scm_type is not None:
            pulumi.set(__self__, "scm_type", scm_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def branch(self) -> Optional[str]:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="buildFileLocation")
    def build_file_location(self) -> Optional[str]:
        return pulumi.get(self, "build_file_location")

    @property
    @pulumi.getter(name="externalScmType")
    def external_scm_type(self) -> Optional[str]:
        return pulumi.get(self, "external_scm_type")

    @property
    @pulumi.getter(name="isAutomergeEnabled")
    def is_automerge_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_automerge_enabled")

    @property
    @pulumi.getter(name="ociCodeRepositoryId")
    def oci_code_repository_id(self) -> Optional[str]:
        return pulumi.get(self, "oci_code_repository_id")

    @property
    @pulumi.getter(name="patSecretId")
    def pat_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "pat_secret_id")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> Optional[str]:
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="scmType")
    def scm_type(self) -> Optional[str]:
        return pulumi.get(self, "scm_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetRemediationRecipesRemediationRecipeCollectionItemVerifyConfigurationResult(dict):
    def __init__(__self__, *,
                 additional_parameters: Optional[Mapping[str, Any]] = None,
                 build_service_type: Optional[str] = None,
                 jenkins_url: Optional[str] = None,
                 job_name: Optional[str] = None,
                 pat_secret_id: Optional[str] = None,
                 pipeline_id: Optional[str] = None,
                 repository_url: Optional[str] = None,
                 trigger_secret_id: Optional[str] = None,
                 username: Optional[str] = None,
                 workflow_name: Optional[str] = None):
        if additional_parameters is not None:
            pulumi.set(__self__, "additional_parameters", additional_parameters)
        if build_service_type is not None:
            pulumi.set(__self__, "build_service_type", build_service_type)
        if jenkins_url is not None:
            pulumi.set(__self__, "jenkins_url", jenkins_url)
        if job_name is not None:
            pulumi.set(__self__, "job_name", job_name)
        if pat_secret_id is not None:
            pulumi.set(__self__, "pat_secret_id", pat_secret_id)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if repository_url is not None:
            pulumi.set(__self__, "repository_url", repository_url)
        if trigger_secret_id is not None:
            pulumi.set(__self__, "trigger_secret_id", trigger_secret_id)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if workflow_name is not None:
            pulumi.set(__self__, "workflow_name", workflow_name)

    @property
    @pulumi.getter(name="additionalParameters")
    def additional_parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_parameters")

    @property
    @pulumi.getter(name="buildServiceType")
    def build_service_type(self) -> Optional[str]:
        return pulumi.get(self, "build_service_type")

    @property
    @pulumi.getter(name="jenkinsUrl")
    def jenkins_url(self) -> Optional[str]:
        return pulumi.get(self, "jenkins_url")

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[str]:
        return pulumi.get(self, "job_name")

    @property
    @pulumi.getter(name="patSecretId")
    def pat_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "pat_secret_id")

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[str]:
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> Optional[str]:
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="triggerSecretId")
    def trigger_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "trigger_secret_id")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> Optional[str]:
        return pulumi.get(self, "workflow_name")


@pulumi.output_type
class GetRemediationRunApplicationDependencyRecommendationsApplicationDependencyRecommendationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRemediationRunApplicationDependencyRecommendationsApplicationDependencyRecommendationCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRemediationRunApplicationDependencyRecommendationsApplicationDependencyRecommendationCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRemediationRunApplicationDependencyRecommendationsApplicationDependencyRecommendationCollectionItemResult(dict):
    def __init__(__self__, *,
                 application_dependency_node_ids: Optional[Sequence[str]] = None,
                 gav: Optional[str] = None,
                 node_id: Optional[str] = None,
                 recommended_gav: Optional[str] = None):
        if application_dependency_node_ids is not None:
            pulumi.set(__self__, "application_dependency_node_ids", application_dependency_node_ids)
        if gav is not None:
            pulumi.set(__self__, "gav", gav)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)
        if recommended_gav is not None:
            pulumi.set(__self__, "recommended_gav", recommended_gav)

    @property
    @pulumi.getter(name="applicationDependencyNodeIds")
    def application_dependency_node_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "application_dependency_node_ids")

    @property
    @pulumi.getter
    def gav(self) -> Optional[str]:
        return pulumi.get(self, "gav")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[str]:
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="recommendedGav")
    def recommended_gav(self) -> Optional[str]:
        return pulumi.get(self, "recommended_gav")


@pulumi.output_type
class GetRemediationRunApplicationDependencyRecommendationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRemediationRunStageResult(dict):
    def __init__(__self__, *,
                 summary: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None,
                 type: Optional[str] = None):
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRemediationRunStagePipelinePropertyResult(dict):
    def __init__(__self__, *,
                 pipeline_identifier: Optional[str] = None,
                 pipeline_url: Optional[str] = None):
        if pipeline_identifier is not None:
            pulumi.set(__self__, "pipeline_identifier", pipeline_identifier)
        if pipeline_url is not None:
            pulumi.set(__self__, "pipeline_url", pipeline_url)

    @property
    @pulumi.getter(name="pipelineIdentifier")
    def pipeline_identifier(self) -> Optional[str]:
        return pulumi.get(self, "pipeline_identifier")

    @property
    @pulumi.getter(name="pipelineUrl")
    def pipeline_url(self) -> Optional[str]:
        return pulumi.get(self, "pipeline_url")


@pulumi.output_type
class GetRemediationRunStagePullRequestPropertyResult(dict):
    def __init__(__self__, *,
                 pull_request_identifier: Optional[str] = None,
                 pull_request_url: Optional[str] = None):
        if pull_request_identifier is not None:
            pulumi.set(__self__, "pull_request_identifier", pull_request_identifier)
        if pull_request_url is not None:
            pulumi.set(__self__, "pull_request_url", pull_request_url)

    @property
    @pulumi.getter(name="pullRequestIdentifier")
    def pull_request_identifier(self) -> Optional[str]:
        return pulumi.get(self, "pull_request_identifier")

    @property
    @pulumi.getter(name="pullRequestUrl")
    def pull_request_url(self) -> Optional[str]:
        return pulumi.get(self, "pull_request_url")


@pulumi.output_type
class GetRemediationRunStagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRemediationRunStagesRemediationRunStageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRemediationRunStagesRemediationRunStageCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRemediationRunStagesRemediationRunStageCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRemediationRunStagesRemediationRunStageCollectionItemResult(dict):
    def __init__(__self__, *,
                 audit_id: Optional[str] = None,
                 next_stage_type: Optional[str] = None,
                 pipeline_properties: Optional[Sequence['outputs.GetRemediationRunStagesRemediationRunStageCollectionItemPipelinePropertyResult']] = None,
                 previous_stage_type: Optional[str] = None,
                 pull_request_properties: Optional[Sequence['outputs.GetRemediationRunStagesRemediationRunStageCollectionItemPullRequestPropertyResult']] = None,
                 recommended_updates_count: Optional[int] = None,
                 remediation_run_id: Optional[str] = None,
                 status: Optional[str] = None,
                 summary: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None,
                 type: Optional[str] = None):
        if audit_id is not None:
            pulumi.set(__self__, "audit_id", audit_id)
        if next_stage_type is not None:
            pulumi.set(__self__, "next_stage_type", next_stage_type)
        if pipeline_properties is not None:
            pulumi.set(__self__, "pipeline_properties", pipeline_properties)
        if previous_stage_type is not None:
            pulumi.set(__self__, "previous_stage_type", previous_stage_type)
        if pull_request_properties is not None:
            pulumi.set(__self__, "pull_request_properties", pull_request_properties)
        if recommended_updates_count is not None:
            pulumi.set(__self__, "recommended_updates_count", recommended_updates_count)
        if remediation_run_id is not None:
            pulumi.set(__self__, "remediation_run_id", remediation_run_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="auditId")
    def audit_id(self) -> Optional[str]:
        return pulumi.get(self, "audit_id")

    @property
    @pulumi.getter(name="nextStageType")
    def next_stage_type(self) -> Optional[str]:
        return pulumi.get(self, "next_stage_type")

    @property
    @pulumi.getter(name="pipelineProperties")
    def pipeline_properties(self) -> Optional[Sequence['outputs.GetRemediationRunStagesRemediationRunStageCollectionItemPipelinePropertyResult']]:
        return pulumi.get(self, "pipeline_properties")

    @property
    @pulumi.getter(name="previousStageType")
    def previous_stage_type(self) -> Optional[str]:
        return pulumi.get(self, "previous_stage_type")

    @property
    @pulumi.getter(name="pullRequestProperties")
    def pull_request_properties(self) -> Optional[Sequence['outputs.GetRemediationRunStagesRemediationRunStageCollectionItemPullRequestPropertyResult']]:
        return pulumi.get(self, "pull_request_properties")

    @property
    @pulumi.getter(name="recommendedUpdatesCount")
    def recommended_updates_count(self) -> Optional[int]:
        return pulumi.get(self, "recommended_updates_count")

    @property
    @pulumi.getter(name="remediationRunId")
    def remediation_run_id(self) -> Optional[str]:
        return pulumi.get(self, "remediation_run_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRemediationRunStagesRemediationRunStageCollectionItemPipelinePropertyResult(dict):
    def __init__(__self__, *,
                 pipeline_identifier: Optional[str] = None,
                 pipeline_url: Optional[str] = None):
        if pipeline_identifier is not None:
            pulumi.set(__self__, "pipeline_identifier", pipeline_identifier)
        if pipeline_url is not None:
            pulumi.set(__self__, "pipeline_url", pipeline_url)

    @property
    @pulumi.getter(name="pipelineIdentifier")
    def pipeline_identifier(self) -> Optional[str]:
        return pulumi.get(self, "pipeline_identifier")

    @property
    @pulumi.getter(name="pipelineUrl")
    def pipeline_url(self) -> Optional[str]:
        return pulumi.get(self, "pipeline_url")


@pulumi.output_type
class GetRemediationRunStagesRemediationRunStageCollectionItemPullRequestPropertyResult(dict):
    def __init__(__self__, *,
                 pull_request_identifier: Optional[str] = None,
                 pull_request_url: Optional[str] = None):
        if pull_request_identifier is not None:
            pulumi.set(__self__, "pull_request_identifier", pull_request_identifier)
        if pull_request_url is not None:
            pulumi.set(__self__, "pull_request_url", pull_request_url)

    @property
    @pulumi.getter(name="pullRequestIdentifier")
    def pull_request_identifier(self) -> Optional[str]:
        return pulumi.get(self, "pull_request_identifier")

    @property
    @pulumi.getter(name="pullRequestUrl")
    def pull_request_url(self) -> Optional[str]:
        return pulumi.get(self, "pull_request_url")


@pulumi.output_type
class GetRemediationRunsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRemediationRunsRemediationRunCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRemediationRunsRemediationRunCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRemediationRunsRemediationRunCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRemediationRunsRemediationRunCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 current_stage_type: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 remediation_recipe_id: Optional[str] = None,
                 remediation_run_source: Optional[str] = None,
                 stages: Optional[Sequence['outputs.GetRemediationRunsRemediationRunCollectionItemStageResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if current_stage_type is not None:
            pulumi.set(__self__, "current_stage_type", current_stage_type)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if remediation_recipe_id is not None:
            pulumi.set(__self__, "remediation_recipe_id", remediation_recipe_id)
        if remediation_run_source is not None:
            pulumi.set(__self__, "remediation_run_source", remediation_run_source)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="currentStageType")
    def current_stage_type(self) -> Optional[str]:
        return pulumi.get(self, "current_stage_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="remediationRecipeId")
    def remediation_recipe_id(self) -> Optional[str]:
        return pulumi.get(self, "remediation_recipe_id")

    @property
    @pulumi.getter(name="remediationRunSource")
    def remediation_run_source(self) -> Optional[str]:
        return pulumi.get(self, "remediation_run_source")

    @property
    @pulumi.getter
    def stages(self) -> Optional[Sequence['outputs.GetRemediationRunsRemediationRunCollectionItemStageResult']]:
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetRemediationRunsRemediationRunCollectionItemStageResult(dict):
    def __init__(__self__, *,
                 summary: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None,
                 type: Optional[str] = None):
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyResult(dict):
    def __init__(__self__, *,
                 application_dependency_node_ids: Optional[Sequence[str]] = None,
                 gav: Optional[str] = None,
                 node_id: Optional[str] = None):
        if application_dependency_node_ids is not None:
            pulumi.set(__self__, "application_dependency_node_ids", application_dependency_node_ids)
        if gav is not None:
            pulumi.set(__self__, "gav", gav)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)

    @property
    @pulumi.getter(name="applicationDependencyNodeIds")
    def application_dependency_node_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "application_dependency_node_ids")

    @property
    @pulumi.getter
    def gav(self) -> Optional[str]:
        return pulumi.get(self, "gav")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[str]:
        return pulumi.get(self, "node_id")


@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemResult(dict):
    def __init__(__self__, *,
                 application_dependency_node_ids: Optional[Sequence[str]] = None,
                 gav: Optional[str] = None,
                 is_found_in_knowledge_base: Optional[bool] = None,
                 node_id: Optional[str] = None,
                 vulnerabilities: Optional[Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerabilityResult']] = None):
        if application_dependency_node_ids is not None:
            pulumi.set(__self__, "application_dependency_node_ids", application_dependency_node_ids)
        if gav is not None:
            pulumi.set(__self__, "gav", gav)
        if is_found_in_knowledge_base is not None:
            pulumi.set(__self__, "is_found_in_knowledge_base", is_found_in_knowledge_base)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)
        if vulnerabilities is not None:
            pulumi.set(__self__, "vulnerabilities", vulnerabilities)

    @property
    @pulumi.getter(name="applicationDependencyNodeIds")
    def application_dependency_node_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "application_dependency_node_ids")

    @property
    @pulumi.getter
    def gav(self) -> Optional[str]:
        return pulumi.get(self, "gav")

    @property
    @pulumi.getter(name="isFoundInKnowledgeBase")
    def is_found_in_knowledge_base(self) -> Optional[bool]:
        return pulumi.get(self, "is_found_in_knowledge_base")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[str]:
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter
    def vulnerabilities(self) -> Optional[Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerabilityResult']]:
        return pulumi.get(self, "vulnerabilities")


@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyVulnerabilitiesApplicationDependencyVulnerabilityCollectionItemVulnerabilityResult(dict):
    def __init__(__self__, *,
                 cvss_v2score: Optional[float] = None,
                 cvss_v3score: Optional[float] = None,
                 id: Optional[str] = None,
                 is_ignored: Optional[bool] = None):
        if cvss_v2score is not None:
            pulumi.set(__self__, "cvss_v2score", cvss_v2score)
        if cvss_v3score is not None:
            pulumi.set(__self__, "cvss_v3score", cvss_v3score)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_ignored is not None:
            pulumi.set(__self__, "is_ignored", is_ignored)

    @property
    @pulumi.getter(name="cvssV2score")
    def cvss_v2score(self) -> Optional[float]:
        return pulumi.get(self, "cvss_v2score")

    @property
    @pulumi.getter(name="cvssV3score")
    def cvss_v3score(self) -> Optional[float]:
        return pulumi.get(self, "cvss_v3score")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIgnored")
    def is_ignored(self) -> Optional[bool]:
        return pulumi.get(self, "is_ignored")


@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyVulnerabilitiesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyVulnerabilityItemResult(dict):
    def __init__(__self__, *,
                 application_dependency_node_ids: Optional[Sequence[str]] = None,
                 gav: Optional[str] = None,
                 is_found_in_knowledge_base: Optional[bool] = None,
                 node_id: Optional[str] = None,
                 vulnerabilities: Optional[Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilityItemVulnerabilityResult']] = None):
        if application_dependency_node_ids is not None:
            pulumi.set(__self__, "application_dependency_node_ids", application_dependency_node_ids)
        if gav is not None:
            pulumi.set(__self__, "gav", gav)
        if is_found_in_knowledge_base is not None:
            pulumi.set(__self__, "is_found_in_knowledge_base", is_found_in_knowledge_base)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)
        if vulnerabilities is not None:
            pulumi.set(__self__, "vulnerabilities", vulnerabilities)

    @property
    @pulumi.getter(name="applicationDependencyNodeIds")
    def application_dependency_node_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "application_dependency_node_ids")

    @property
    @pulumi.getter
    def gav(self) -> Optional[str]:
        return pulumi.get(self, "gav")

    @property
    @pulumi.getter(name="isFoundInKnowledgeBase")
    def is_found_in_knowledge_base(self) -> Optional[bool]:
        return pulumi.get(self, "is_found_in_knowledge_base")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[str]:
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter
    def vulnerabilities(self) -> Optional[Sequence['outputs.GetVulnerabilityAuditApplicationDependencyVulnerabilityItemVulnerabilityResult']]:
        return pulumi.get(self, "vulnerabilities")


@pulumi.output_type
class GetVulnerabilityAuditApplicationDependencyVulnerabilityItemVulnerabilityResult(dict):
    def __init__(__self__, *,
                 cvss_v2score: Optional[float] = None,
                 cvss_v3score: Optional[float] = None,
                 id: Optional[str] = None,
                 is_ignored: Optional[bool] = None):
        if cvss_v2score is not None:
            pulumi.set(__self__, "cvss_v2score", cvss_v2score)
        if cvss_v3score is not None:
            pulumi.set(__self__, "cvss_v3score", cvss_v3score)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_ignored is not None:
            pulumi.set(__self__, "is_ignored", is_ignored)

    @property
    @pulumi.getter(name="cvssV2score")
    def cvss_v2score(self) -> Optional[float]:
        return pulumi.get(self, "cvss_v2score")

    @property
    @pulumi.getter(name="cvssV3score")
    def cvss_v3score(self) -> Optional[float]:
        return pulumi.get(self, "cvss_v3score")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIgnored")
    def is_ignored(self) -> Optional[bool]:
        return pulumi.get(self, "is_ignored")


@pulumi.output_type
class GetVulnerabilityAuditConfigurationResult(dict):
    def __init__(__self__, *,
                 exclusions: Optional[Sequence[str]] = None,
                 max_permissible_cvss_v2score: Optional[float] = None,
                 max_permissible_cvss_v3score: Optional[float] = None):
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if max_permissible_cvss_v2score is not None:
            pulumi.set(__self__, "max_permissible_cvss_v2score", max_permissible_cvss_v2score)
        if max_permissible_cvss_v3score is not None:
            pulumi.set(__self__, "max_permissible_cvss_v3score", max_permissible_cvss_v3score)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter(name="maxPermissibleCvssV2score")
    def max_permissible_cvss_v2score(self) -> Optional[float]:
        return pulumi.get(self, "max_permissible_cvss_v2score")

    @property
    @pulumi.getter(name="maxPermissibleCvssV3score")
    def max_permissible_cvss_v3score(self) -> Optional[float]:
        return pulumi.get(self, "max_permissible_cvss_v3score")


@pulumi.output_type
class GetVulnerabilityAuditSourceResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 oci_resource_id: Optional[str] = None,
                 type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if oci_resource_id is not None:
            pulumi.set(__self__, "oci_resource_id", oci_resource_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ociResourceId")
    def oci_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "oci_resource_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVulnerabilityAuditVulnerabilityResult(dict):
    def __init__(__self__, *,
                 cvss_v2score: Optional[float] = None,
                 cvss_v3score: Optional[float] = None,
                 id: Optional[str] = None,
                 is_ignored: Optional[bool] = None):
        if cvss_v2score is not None:
            pulumi.set(__self__, "cvss_v2score", cvss_v2score)
        if cvss_v3score is not None:
            pulumi.set(__self__, "cvss_v3score", cvss_v3score)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_ignored is not None:
            pulumi.set(__self__, "is_ignored", is_ignored)

    @property
    @pulumi.getter(name="cvssV2score")
    def cvss_v2score(self) -> Optional[float]:
        return pulumi.get(self, "cvss_v2score")

    @property
    @pulumi.getter(name="cvssV3score")
    def cvss_v3score(self) -> Optional[float]:
        return pulumi.get(self, "cvss_v3score")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIgnored")
    def is_ignored(self) -> Optional[bool]:
        return pulumi.get(self, "is_ignored")


@pulumi.output_type
class GetVulnerabilityAuditsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVulnerabilityAuditsVulnerabilityAuditCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetVulnerabilityAuditsVulnerabilityAuditCollectionItemResult(dict):
    def __init__(__self__, *,
                 application_dependencies: Optional[Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemApplicationDependencyResult']] = None,
                 build_type: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemConfigurationResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_success: Optional[bool] = None,
                 knowledge_base_id: Optional[str] = None,
                 max_observed_cvss_v2score: Optional[float] = None,
                 max_observed_cvss_v2score_with_ignored: Optional[float] = None,
                 max_observed_cvss_v3score: Optional[float] = None,
                 max_observed_cvss_v3score_with_ignored: Optional[float] = None,
                 sources: Optional[Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemSourceResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 vulnerabilities: Optional[Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemVulnerabilityResult']] = None,
                 vulnerable_artifacts_count: Optional[int] = None,
                 vulnerable_artifacts_count_with_ignored: Optional[int] = None):
        if application_dependencies is not None:
            pulumi.set(__self__, "application_dependencies", application_dependencies)
        if build_type is not None:
            pulumi.set(__self__, "build_type", build_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_success is not None:
            pulumi.set(__self__, "is_success", is_success)
        if knowledge_base_id is not None:
            pulumi.set(__self__, "knowledge_base_id", knowledge_base_id)
        if max_observed_cvss_v2score is not None:
            pulumi.set(__self__, "max_observed_cvss_v2score", max_observed_cvss_v2score)
        if max_observed_cvss_v2score_with_ignored is not None:
            pulumi.set(__self__, "max_observed_cvss_v2score_with_ignored", max_observed_cvss_v2score_with_ignored)
        if max_observed_cvss_v3score is not None:
            pulumi.set(__self__, "max_observed_cvss_v3score", max_observed_cvss_v3score)
        if max_observed_cvss_v3score_with_ignored is not None:
            pulumi.set(__self__, "max_observed_cvss_v3score_with_ignored", max_observed_cvss_v3score_with_ignored)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if vulnerabilities is not None:
            pulumi.set(__self__, "vulnerabilities", vulnerabilities)
        if vulnerable_artifacts_count is not None:
            pulumi.set(__self__, "vulnerable_artifacts_count", vulnerable_artifacts_count)
        if vulnerable_artifacts_count_with_ignored is not None:
            pulumi.set(__self__, "vulnerable_artifacts_count_with_ignored", vulnerable_artifacts_count_with_ignored)

    @property
    @pulumi.getter(name="applicationDependencies")
    def application_dependencies(self) -> Optional[Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemApplicationDependencyResult']]:
        return pulumi.get(self, "application_dependencies")

    @property
    @pulumi.getter(name="buildType")
    def build_type(self) -> Optional[str]:
        return pulumi.get(self, "build_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> Optional[bool]:
        return pulumi.get(self, "is_success")

    @property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> Optional[str]:
        return pulumi.get(self, "knowledge_base_id")

    @property
    @pulumi.getter(name="maxObservedCvssV2score")
    def max_observed_cvss_v2score(self) -> Optional[float]:
        return pulumi.get(self, "max_observed_cvss_v2score")

    @property
    @pulumi.getter(name="maxObservedCvssV2scoreWithIgnored")
    def max_observed_cvss_v2score_with_ignored(self) -> Optional[float]:
        return pulumi.get(self, "max_observed_cvss_v2score_with_ignored")

    @property
    @pulumi.getter(name="maxObservedCvssV3score")
    def max_observed_cvss_v3score(self) -> Optional[float]:
        return pulumi.get(self, "max_observed_cvss_v3score")

    @property
    @pulumi.getter(name="maxObservedCvssV3scoreWithIgnored")
    def max_observed_cvss_v3score_with_ignored(self) -> Optional[float]:
        return pulumi.get(self, "max_observed_cvss_v3score_with_ignored")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemSourceResult']]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def vulnerabilities(self) -> Optional[Sequence['outputs.GetVulnerabilityAuditsVulnerabilityAuditCollectionItemVulnerabilityResult']]:
        return pulumi.get(self, "vulnerabilities")

    @property
    @pulumi.getter(name="vulnerableArtifactsCount")
    def vulnerable_artifacts_count(self) -> Optional[int]:
        return pulumi.get(self, "vulnerable_artifacts_count")

    @property
    @pulumi.getter(name="vulnerableArtifactsCountWithIgnored")
    def vulnerable_artifacts_count_with_ignored(self) -> Optional[int]:
        return pulumi.get(self, "vulnerable_artifacts_count_with_ignored")


@pulumi.output_type
class GetVulnerabilityAuditsVulnerabilityAuditCollectionItemApplicationDependencyResult(dict):
    def __init__(__self__, *,
                 application_dependency_node_ids: Optional[Sequence[str]] = None,
                 gav: Optional[str] = None,
                 node_id: Optional[str] = None):
        if application_dependency_node_ids is not None:
            pulumi.set(__self__, "application_dependency_node_ids", application_dependency_node_ids)
        if gav is not None:
            pulumi.set(__self__, "gav", gav)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)

    @property
    @pulumi.getter(name="applicationDependencyNodeIds")
    def application_dependency_node_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "application_dependency_node_ids")

    @property
    @pulumi.getter
    def gav(self) -> Optional[str]:
        return pulumi.get(self, "gav")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[str]:
        return pulumi.get(self, "node_id")


@pulumi.output_type
class GetVulnerabilityAuditsVulnerabilityAuditCollectionItemConfigurationResult(dict):
    def __init__(__self__, *,
                 exclusions: Optional[Sequence[str]] = None,
                 max_permissible_cvss_v2score: Optional[float] = None,
                 max_permissible_cvss_v3score: Optional[float] = None):
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if max_permissible_cvss_v2score is not None:
            pulumi.set(__self__, "max_permissible_cvss_v2score", max_permissible_cvss_v2score)
        if max_permissible_cvss_v3score is not None:
            pulumi.set(__self__, "max_permissible_cvss_v3score", max_permissible_cvss_v3score)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclusions")

    @property
    @pulumi.getter(name="maxPermissibleCvssV2score")
    def max_permissible_cvss_v2score(self) -> Optional[float]:
        return pulumi.get(self, "max_permissible_cvss_v2score")

    @property
    @pulumi.getter(name="maxPermissibleCvssV3score")
    def max_permissible_cvss_v3score(self) -> Optional[float]:
        return pulumi.get(self, "max_permissible_cvss_v3score")


@pulumi.output_type
class GetVulnerabilityAuditsVulnerabilityAuditCollectionItemSourceResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 oci_resource_id: Optional[str] = None,
                 type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if oci_resource_id is not None:
            pulumi.set(__self__, "oci_resource_id", oci_resource_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ociResourceId")
    def oci_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "oci_resource_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVulnerabilityAuditsVulnerabilityAuditCollectionItemVulnerabilityResult(dict):
    def __init__(__self__, *,
                 cvss_v2score: Optional[float] = None,
                 cvss_v3score: Optional[float] = None,
                 id: Optional[str] = None,
                 is_ignored: Optional[bool] = None):
        if cvss_v2score is not None:
            pulumi.set(__self__, "cvss_v2score", cvss_v2score)
        if cvss_v3score is not None:
            pulumi.set(__self__, "cvss_v3score", cvss_v3score)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_ignored is not None:
            pulumi.set(__self__, "is_ignored", is_ignored)

    @property
    @pulumi.getter(name="cvssV2score")
    def cvss_v2score(self) -> Optional[float]:
        return pulumi.get(self, "cvss_v2score")

    @property
    @pulumi.getter(name="cvssV3score")
    def cvss_v3score(self) -> Optional[float]:
        return pulumi.get(self, "cvss_v3score")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIgnored")
    def is_ignored(self) -> Optional[bool]:
        return pulumi.get(self, "is_ignored")


