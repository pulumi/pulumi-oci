# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VulnerabilityAuditArgs', 'VulnerabilityAudit']

@pulumi.input_type
class VulnerabilityAuditArgs:
    def __init__(__self__, *,
                 build_type: pulumi.Input[str],
                 knowledge_base_id: pulumi.Input[str],
                 application_dependencies: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityAuditApplicationDependencyArgs']]]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input['VulnerabilityAuditConfigurationArgs']] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 source: Optional[pulumi.Input['VulnerabilityAuditSourceArgs']] = None):
        """
        The set of arguments for constructing a VulnerabilityAudit resource.
        """
        pulumi.set(__self__, "build_type", build_type)
        pulumi.set(__self__, "knowledge_base_id", knowledge_base_id)
        if application_dependencies is not None:
            pulumi.set(__self__, "application_dependencies", application_dependencies)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="buildType")
    def build_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "build_type")

    @build_type.setter
    def build_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "build_type", value)

    @property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "knowledge_base_id")

    @knowledge_base_id.setter
    def knowledge_base_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "knowledge_base_id", value)

    @property
    @pulumi.getter(name="applicationDependencies")
    def application_dependencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityAuditApplicationDependencyArgs']]]]:
        return pulumi.get(self, "application_dependencies")

    @application_dependencies.setter
    def application_dependencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityAuditApplicationDependencyArgs']]]]):
        pulumi.set(self, "application_dependencies", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['VulnerabilityAuditConfigurationArgs']]:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['VulnerabilityAuditConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['VulnerabilityAuditSourceArgs']]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['VulnerabilityAuditSourceArgs']]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class _VulnerabilityAuditState:
    def __init__(__self__, *,
                 application_dependencies: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityAuditApplicationDependencyArgs']]]] = None,
                 build_type: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input['VulnerabilityAuditConfigurationArgs']] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_success: Optional[pulumi.Input[bool]] = None,
                 knowledge_base_id: Optional[pulumi.Input[str]] = None,
                 max_observed_cvss_v2score: Optional[pulumi.Input[float]] = None,
                 max_observed_cvss_v2score_with_ignored: Optional[pulumi.Input[float]] = None,
                 max_observed_cvss_v3score: Optional[pulumi.Input[float]] = None,
                 max_observed_cvss_v3score_with_ignored: Optional[pulumi.Input[float]] = None,
                 source: Optional[pulumi.Input['VulnerabilityAuditSourceArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 vulnerabilities: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityAuditVulnerabilityArgs']]]] = None,
                 vulnerable_artifacts_count: Optional[pulumi.Input[int]] = None,
                 vulnerable_artifacts_count_with_ignored: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering VulnerabilityAudit resources.
        """
        if application_dependencies is not None:
            pulumi.set(__self__, "application_dependencies", application_dependencies)
        if build_type is not None:
            pulumi.set(__self__, "build_type", build_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_success is not None:
            pulumi.set(__self__, "is_success", is_success)
        if knowledge_base_id is not None:
            pulumi.set(__self__, "knowledge_base_id", knowledge_base_id)
        if max_observed_cvss_v2score is not None:
            pulumi.set(__self__, "max_observed_cvss_v2score", max_observed_cvss_v2score)
        if max_observed_cvss_v2score_with_ignored is not None:
            pulumi.set(__self__, "max_observed_cvss_v2score_with_ignored", max_observed_cvss_v2score_with_ignored)
        if max_observed_cvss_v3score is not None:
            pulumi.set(__self__, "max_observed_cvss_v3score", max_observed_cvss_v3score)
        if max_observed_cvss_v3score_with_ignored is not None:
            pulumi.set(__self__, "max_observed_cvss_v3score_with_ignored", max_observed_cvss_v3score_with_ignored)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if vulnerabilities is not None:
            pulumi.set(__self__, "vulnerabilities", vulnerabilities)
        if vulnerable_artifacts_count is not None:
            pulumi.set(__self__, "vulnerable_artifacts_count", vulnerable_artifacts_count)
        if vulnerable_artifacts_count_with_ignored is not None:
            pulumi.set(__self__, "vulnerable_artifacts_count_with_ignored", vulnerable_artifacts_count_with_ignored)

    @property
    @pulumi.getter(name="applicationDependencies")
    def application_dependencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityAuditApplicationDependencyArgs']]]]:
        return pulumi.get(self, "application_dependencies")

    @application_dependencies.setter
    def application_dependencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityAuditApplicationDependencyArgs']]]]):
        pulumi.set(self, "application_dependencies", value)

    @property
    @pulumi.getter(name="buildType")
    def build_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "build_type")

    @build_type.setter
    def build_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "build_type", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['VulnerabilityAuditConfigurationArgs']]:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['VulnerabilityAuditConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_success")

    @is_success.setter
    def is_success(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_success", value)

    @property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "knowledge_base_id")

    @knowledge_base_id.setter
    def knowledge_base_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "knowledge_base_id", value)

    @property
    @pulumi.getter(name="maxObservedCvssV2score")
    def max_observed_cvss_v2score(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_observed_cvss_v2score")

    @max_observed_cvss_v2score.setter
    def max_observed_cvss_v2score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_observed_cvss_v2score", value)

    @property
    @pulumi.getter(name="maxObservedCvssV2scoreWithIgnored")
    def max_observed_cvss_v2score_with_ignored(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_observed_cvss_v2score_with_ignored")

    @max_observed_cvss_v2score_with_ignored.setter
    def max_observed_cvss_v2score_with_ignored(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_observed_cvss_v2score_with_ignored", value)

    @property
    @pulumi.getter(name="maxObservedCvssV3score")
    def max_observed_cvss_v3score(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_observed_cvss_v3score")

    @max_observed_cvss_v3score.setter
    def max_observed_cvss_v3score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_observed_cvss_v3score", value)

    @property
    @pulumi.getter(name="maxObservedCvssV3scoreWithIgnored")
    def max_observed_cvss_v3score_with_ignored(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_observed_cvss_v3score_with_ignored")

    @max_observed_cvss_v3score_with_ignored.setter
    def max_observed_cvss_v3score_with_ignored(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_observed_cvss_v3score_with_ignored", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['VulnerabilityAuditSourceArgs']]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['VulnerabilityAuditSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "system_tags", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter
    def vulnerabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityAuditVulnerabilityArgs']]]]:
        return pulumi.get(self, "vulnerabilities")

    @vulnerabilities.setter
    def vulnerabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VulnerabilityAuditVulnerabilityArgs']]]]):
        pulumi.set(self, "vulnerabilities", value)

    @property
    @pulumi.getter(name="vulnerableArtifactsCount")
    def vulnerable_artifacts_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vulnerable_artifacts_count")

    @vulnerable_artifacts_count.setter
    def vulnerable_artifacts_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vulnerable_artifacts_count", value)

    @property
    @pulumi.getter(name="vulnerableArtifactsCountWithIgnored")
    def vulnerable_artifacts_count_with_ignored(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vulnerable_artifacts_count_with_ignored")

    @vulnerable_artifacts_count_with_ignored.setter
    def vulnerable_artifacts_count_with_ignored(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vulnerable_artifacts_count_with_ignored", value)


class VulnerabilityAudit(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_dependencies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VulnerabilityAuditApplicationDependencyArgs']]]]] = None,
                 build_type: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['VulnerabilityAuditConfigurationArgs']]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 knowledge_base_id: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[pulumi.InputType['VulnerabilityAuditSourceArgs']]] = None,
                 __props__=None):
        """
        Create a VulnerabilityAudit resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VulnerabilityAuditArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VulnerabilityAudit resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VulnerabilityAuditArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VulnerabilityAuditArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_dependencies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VulnerabilityAuditApplicationDependencyArgs']]]]] = None,
                 build_type: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['VulnerabilityAuditConfigurationArgs']]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 knowledge_base_id: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[pulumi.InputType['VulnerabilityAuditSourceArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VulnerabilityAuditArgs.__new__(VulnerabilityAuditArgs)

            __props__.__dict__["application_dependencies"] = application_dependencies
            if build_type is None and not opts.urn:
                raise TypeError("Missing required property 'build_type'")
            __props__.__dict__["build_type"] = build_type
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["freeform_tags"] = freeform_tags
            if knowledge_base_id is None and not opts.urn:
                raise TypeError("Missing required property 'knowledge_base_id'")
            __props__.__dict__["knowledge_base_id"] = knowledge_base_id
            __props__.__dict__["source"] = source
            __props__.__dict__["is_success"] = None
            __props__.__dict__["max_observed_cvss_v2score"] = None
            __props__.__dict__["max_observed_cvss_v2score_with_ignored"] = None
            __props__.__dict__["max_observed_cvss_v3score"] = None
            __props__.__dict__["max_observed_cvss_v3score_with_ignored"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["system_tags"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
            __props__.__dict__["vulnerabilities"] = None
            __props__.__dict__["vulnerable_artifacts_count"] = None
            __props__.__dict__["vulnerable_artifacts_count_with_ignored"] = None
        super(VulnerabilityAudit, __self__).__init__(
            'oci:Adm/vulnerabilityAudit:VulnerabilityAudit',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_dependencies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VulnerabilityAuditApplicationDependencyArgs']]]]] = None,
            build_type: Optional[pulumi.Input[str]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            configuration: Optional[pulumi.Input[pulumi.InputType['VulnerabilityAuditConfigurationArgs']]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            is_success: Optional[pulumi.Input[bool]] = None,
            knowledge_base_id: Optional[pulumi.Input[str]] = None,
            max_observed_cvss_v2score: Optional[pulumi.Input[float]] = None,
            max_observed_cvss_v2score_with_ignored: Optional[pulumi.Input[float]] = None,
            max_observed_cvss_v3score: Optional[pulumi.Input[float]] = None,
            max_observed_cvss_v3score_with_ignored: Optional[pulumi.Input[float]] = None,
            source: Optional[pulumi.Input[pulumi.InputType['VulnerabilityAuditSourceArgs']]] = None,
            state: Optional[pulumi.Input[str]] = None,
            system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None,
            vulnerabilities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VulnerabilityAuditVulnerabilityArgs']]]]] = None,
            vulnerable_artifacts_count: Optional[pulumi.Input[int]] = None,
            vulnerable_artifacts_count_with_ignored: Optional[pulumi.Input[int]] = None) -> 'VulnerabilityAudit':
        """
        Get an existing VulnerabilityAudit resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VulnerabilityAuditState.__new__(_VulnerabilityAuditState)

        __props__.__dict__["application_dependencies"] = application_dependencies
        __props__.__dict__["build_type"] = build_type
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["configuration"] = configuration
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["is_success"] = is_success
        __props__.__dict__["knowledge_base_id"] = knowledge_base_id
        __props__.__dict__["max_observed_cvss_v2score"] = max_observed_cvss_v2score
        __props__.__dict__["max_observed_cvss_v2score_with_ignored"] = max_observed_cvss_v2score_with_ignored
        __props__.__dict__["max_observed_cvss_v3score"] = max_observed_cvss_v3score
        __props__.__dict__["max_observed_cvss_v3score_with_ignored"] = max_observed_cvss_v3score_with_ignored
        __props__.__dict__["source"] = source
        __props__.__dict__["state"] = state
        __props__.__dict__["system_tags"] = system_tags
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        __props__.__dict__["vulnerabilities"] = vulnerabilities
        __props__.__dict__["vulnerable_artifacts_count"] = vulnerable_artifacts_count
        __props__.__dict__["vulnerable_artifacts_count_with_ignored"] = vulnerable_artifacts_count_with_ignored
        return VulnerabilityAudit(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationDependencies")
    def application_dependencies(self) -> pulumi.Output[Optional[Sequence['outputs.VulnerabilityAuditApplicationDependency']]]:
        return pulumi.get(self, "application_dependencies")

    @property
    @pulumi.getter(name="buildType")
    def build_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "build_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Output[Optional['outputs.VulnerabilityAuditConfiguration']]:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_success")

    @property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "knowledge_base_id")

    @property
    @pulumi.getter(name="maxObservedCvssV2score")
    def max_observed_cvss_v2score(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "max_observed_cvss_v2score")

    @property
    @pulumi.getter(name="maxObservedCvssV2scoreWithIgnored")
    def max_observed_cvss_v2score_with_ignored(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "max_observed_cvss_v2score_with_ignored")

    @property
    @pulumi.getter(name="maxObservedCvssV3score")
    def max_observed_cvss_v3score(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "max_observed_cvss_v3score")

    @property
    @pulumi.getter(name="maxObservedCvssV3scoreWithIgnored")
    def max_observed_cvss_v3score_with_ignored(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "max_observed_cvss_v3score_with_ignored")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[Optional['outputs.VulnerabilityAuditSource']]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def vulnerabilities(self) -> pulumi.Output[Optional[Sequence['outputs.VulnerabilityAuditVulnerability']]]:
        return pulumi.get(self, "vulnerabilities")

    @property
    @pulumi.getter(name="vulnerableArtifactsCount")
    def vulnerable_artifacts_count(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "vulnerable_artifacts_count")

    @property
    @pulumi.getter(name="vulnerableArtifactsCountWithIgnored")
    def vulnerable_artifacts_count_with_ignored(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "vulnerable_artifacts_count_with_ignored")

