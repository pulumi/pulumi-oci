# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DataAssetDataSourceDetails',
    'DataAssetDataSourceDetailsVersionSpecificDetails',
    'DetectAnomalyJobInputDetails',
    'DetectAnomalyJobInputDetailsData',
    'DetectAnomalyJobInputDetailsObjectLocation',
    'DetectAnomalyJobOutputDetails',
    'ModelModelTrainingDetails',
    'ModelModelTrainingResult',
    'ModelModelTrainingResultRowReductionDetail',
    'ModelModelTrainingResultSignalDetail',
    'GetAiPrivateEndpointsAiPrivateEndpointCollectionResult',
    'GetAiPrivateEndpointsAiPrivateEndpointCollectionItemResult',
    'GetAiPrivateEndpointsFilterResult',
    'GetDetectAnomalyJobInputDetailResult',
    'GetDetectAnomalyJobInputDetailDataResult',
    'GetDetectAnomalyJobInputDetailObjectLocationResult',
    'GetDetectAnomalyJobOutputDetailResult',
    'GetDetectAnomalyJobsDetectAnomalyJobCollectionResult',
    'GetDetectAnomalyJobsDetectAnomalyJobCollectionItemResult',
    'GetDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailResult',
    'GetDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailDataResult',
    'GetDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailObjectLocationResult',
    'GetDetectAnomalyJobsDetectAnomalyJobCollectionItemOutputDetailResult',
    'GetDetectAnomalyJobsFilterResult',
    'GetDetectionDataAssetDataSourceDetailResult',
    'GetDetectionDataAssetDataSourceDetailVersionSpecificDetailResult',
    'GetDetectionDataAssetsDataAssetCollectionResult',
    'GetDetectionDataAssetsDataAssetCollectionItemResult',
    'GetDetectionDataAssetsDataAssetCollectionItemDataSourceDetailResult',
    'GetDetectionDataAssetsDataAssetCollectionItemDataSourceDetailVersionSpecificDetailResult',
    'GetDetectionDataAssetsFilterResult',
    'GetDetectionModelModelTrainingDetailResult',
    'GetDetectionModelModelTrainingResultResult',
    'GetDetectionModelModelTrainingResultRowReductionDetailResult',
    'GetDetectionModelModelTrainingResultSignalDetailResult',
    'GetDetectionModelsFilterResult',
    'GetDetectionModelsModelCollectionResult',
    'GetDetectionModelsModelCollectionItemResult',
    'GetDetectionModelsModelCollectionItemModelTrainingDetailResult',
    'GetDetectionModelsModelCollectionItemModelTrainingResultResult',
    'GetDetectionModelsModelCollectionItemModelTrainingResultRowReductionDetailResult',
    'GetDetectionModelsModelCollectionItemModelTrainingResultSignalDetailResult',
    'GetDetectionProjectsFilterResult',
    'GetDetectionProjectsProjectCollectionResult',
    'GetDetectionProjectsProjectCollectionItemResult',
]

@pulumi.output_type
class DataAssetDataSourceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceType":
            suggest = "data_source_type"
        elif key == "atpPasswordSecretId":
            suggest = "atp_password_secret_id"
        elif key == "atpUserName":
            suggest = "atp_user_name"
        elif key == "cwalletFileSecretId":
            suggest = "cwallet_file_secret_id"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "ewalletFileSecretId":
            suggest = "ewallet_file_secret_id"
        elif key == "keyStoreFileSecretId":
            suggest = "key_store_file_secret_id"
        elif key == "measurementName":
            suggest = "measurement_name"
        elif key == "ojdbcFileSecretId":
            suggest = "ojdbc_file_secret_id"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "tableName":
            suggest = "table_name"
        elif key == "tnsnamesFileSecretId":
            suggest = "tnsnames_file_secret_id"
        elif key == "truststoreFileSecretId":
            suggest = "truststore_file_secret_id"
        elif key == "userName":
            suggest = "user_name"
        elif key == "versionSpecificDetails":
            suggest = "version_specific_details"
        elif key == "walletPasswordSecretId":
            suggest = "wallet_password_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataAssetDataSourceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataAssetDataSourceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataAssetDataSourceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_type: str,
                 atp_password_secret_id: Optional[str] = None,
                 atp_user_name: Optional[str] = None,
                 bucket: Optional[str] = None,
                 cwallet_file_secret_id: Optional[str] = None,
                 database_name: Optional[str] = None,
                 ewallet_file_secret_id: Optional[str] = None,
                 key_store_file_secret_id: Optional[str] = None,
                 measurement_name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 ojdbc_file_secret_id: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 table_name: Optional[str] = None,
                 tnsnames_file_secret_id: Optional[str] = None,
                 truststore_file_secret_id: Optional[str] = None,
                 url: Optional[str] = None,
                 user_name: Optional[str] = None,
                 version_specific_details: Optional['outputs.DataAssetDataSourceDetailsVersionSpecificDetails'] = None,
                 wallet_password_secret_id: Optional[str] = None):
        pulumi.set(__self__, "data_source_type", data_source_type)
        if atp_password_secret_id is not None:
            pulumi.set(__self__, "atp_password_secret_id", atp_password_secret_id)
        if atp_user_name is not None:
            pulumi.set(__self__, "atp_user_name", atp_user_name)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if cwallet_file_secret_id is not None:
            pulumi.set(__self__, "cwallet_file_secret_id", cwallet_file_secret_id)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if ewallet_file_secret_id is not None:
            pulumi.set(__self__, "ewallet_file_secret_id", ewallet_file_secret_id)
        if key_store_file_secret_id is not None:
            pulumi.set(__self__, "key_store_file_secret_id", key_store_file_secret_id)
        if measurement_name is not None:
            pulumi.set(__self__, "measurement_name", measurement_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if ojdbc_file_secret_id is not None:
            pulumi.set(__self__, "ojdbc_file_secret_id", ojdbc_file_secret_id)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if tnsnames_file_secret_id is not None:
            pulumi.set(__self__, "tnsnames_file_secret_id", tnsnames_file_secret_id)
        if truststore_file_secret_id is not None:
            pulumi.set(__self__, "truststore_file_secret_id", truststore_file_secret_id)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if version_specific_details is not None:
            pulumi.set(__self__, "version_specific_details", version_specific_details)
        if wallet_password_secret_id is not None:
            pulumi.set(__self__, "wallet_password_secret_id", wallet_password_secret_id)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> str:
        return pulumi.get(self, "data_source_type")

    @property
    @pulumi.getter(name="atpPasswordSecretId")
    def atp_password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "atp_password_secret_id")

    @property
    @pulumi.getter(name="atpUserName")
    def atp_user_name(self) -> Optional[str]:
        return pulumi.get(self, "atp_user_name")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="cwalletFileSecretId")
    def cwallet_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "cwallet_file_secret_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="ewalletFileSecretId")
    def ewallet_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ewallet_file_secret_id")

    @property
    @pulumi.getter(name="keyStoreFileSecretId")
    def key_store_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "key_store_file_secret_id")

    @property
    @pulumi.getter(name="measurementName")
    def measurement_name(self) -> Optional[str]:
        return pulumi.get(self, "measurement_name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="ojdbcFileSecretId")
    def ojdbc_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ojdbc_file_secret_id")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="tnsnamesFileSecretId")
    def tnsnames_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "tnsnames_file_secret_id")

    @property
    @pulumi.getter(name="truststoreFileSecretId")
    def truststore_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "truststore_file_secret_id")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="versionSpecificDetails")
    def version_specific_details(self) -> Optional['outputs.DataAssetDataSourceDetailsVersionSpecificDetails']:
        return pulumi.get(self, "version_specific_details")

    @property
    @pulumi.getter(name="walletPasswordSecretId")
    def wallet_password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_password_secret_id")


@pulumi.output_type
class DataAssetDataSourceDetailsVersionSpecificDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "influxVersion":
            suggest = "influx_version"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "organizationName":
            suggest = "organization_name"
        elif key == "retentionPolicyName":
            suggest = "retention_policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataAssetDataSourceDetailsVersionSpecificDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataAssetDataSourceDetailsVersionSpecificDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataAssetDataSourceDetailsVersionSpecificDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 influx_version: str,
                 bucket: Optional[str] = None,
                 database_name: Optional[str] = None,
                 organization_name: Optional[str] = None,
                 retention_policy_name: Optional[str] = None):
        pulumi.set(__self__, "influx_version", influx_version)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if retention_policy_name is not None:
            pulumi.set(__self__, "retention_policy_name", retention_policy_name)

    @property
    @pulumi.getter(name="influxVersion")
    def influx_version(self) -> str:
        return pulumi.get(self, "influx_version")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[str]:
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="retentionPolicyName")
    def retention_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "retention_policy_name")


@pulumi.output_type
class DetectAnomalyJobInputDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputType":
            suggest = "input_type"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "objectLocations":
            suggest = "object_locations"
        elif key == "signalNames":
            suggest = "signal_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetectAnomalyJobInputDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetectAnomalyJobInputDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetectAnomalyJobInputDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_type: str,
                 content: Optional[str] = None,
                 content_type: Optional[str] = None,
                 datas: Optional[Sequence['outputs.DetectAnomalyJobInputDetailsData']] = None,
                 message: Optional[str] = None,
                 object_locations: Optional[Sequence['outputs.DetectAnomalyJobInputDetailsObjectLocation']] = None,
                 signal_names: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "input_type", input_type)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if object_locations is not None:
            pulumi.set(__self__, "object_locations", object_locations)
        if signal_names is not None:
            pulumi.set(__self__, "signal_names", signal_names)

    @property
    @pulumi.getter(name="inputType")
    def input_type(self) -> str:
        return pulumi.get(self, "input_type")

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def datas(self) -> Optional[Sequence['outputs.DetectAnomalyJobInputDetailsData']]:
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="objectLocations")
    def object_locations(self) -> Optional[Sequence['outputs.DetectAnomalyJobInputDetailsObjectLocation']]:
        return pulumi.get(self, "object_locations")

    @property
    @pulumi.getter(name="signalNames")
    def signal_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "signal_names")


@pulumi.output_type
class DetectAnomalyJobInputDetailsData(dict):
    def __init__(__self__, *,
                 timestamp: Optional[str] = None,
                 values: Optional[Sequence[float]] = None):
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DetectAnomalyJobInputDetailsObjectLocation(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class DetectAnomalyJobOutputDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputType":
            suggest = "output_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetectAnomalyJobOutputDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetectAnomalyJobOutputDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetectAnomalyJobOutputDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 output_type: str,
                 prefix: Optional[str] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "output_type", output_type)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="outputType")
    def output_type(self) -> str:
        return pulumi.get(self, "output_type")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class ModelModelTrainingDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataAssetIds":
            suggest = "data_asset_ids"
        elif key == "algorithmHint":
            suggest = "algorithm_hint"
        elif key == "targetFap":
            suggest = "target_fap"
        elif key == "trainingFraction":
            suggest = "training_fraction"
        elif key == "windowSize":
            suggest = "window_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelModelTrainingDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelModelTrainingDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelModelTrainingDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_asset_ids: Sequence[str],
                 algorithm_hint: Optional[str] = None,
                 target_fap: Optional[float] = None,
                 training_fraction: Optional[float] = None,
                 window_size: Optional[int] = None):
        pulumi.set(__self__, "data_asset_ids", data_asset_ids)
        if algorithm_hint is not None:
            pulumi.set(__self__, "algorithm_hint", algorithm_hint)
        if target_fap is not None:
            pulumi.set(__self__, "target_fap", target_fap)
        if training_fraction is not None:
            pulumi.set(__self__, "training_fraction", training_fraction)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @property
    @pulumi.getter(name="dataAssetIds")
    def data_asset_ids(self) -> Sequence[str]:
        return pulumi.get(self, "data_asset_ids")

    @property
    @pulumi.getter(name="algorithmHint")
    def algorithm_hint(self) -> Optional[str]:
        return pulumi.get(self, "algorithm_hint")

    @property
    @pulumi.getter(name="targetFap")
    def target_fap(self) -> Optional[float]:
        return pulumi.get(self, "target_fap")

    @property
    @pulumi.getter(name="trainingFraction")
    def training_fraction(self) -> Optional[float]:
        return pulumi.get(self, "training_fraction")

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[int]:
        return pulumi.get(self, "window_size")


@pulumi.output_type
class ModelModelTrainingResult(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isTrainingGoalAchieved":
            suggest = "is_training_goal_achieved"
        elif key == "maxInferenceSyncRows":
            suggest = "max_inference_sync_rows"
        elif key == "multivariateFap":
            suggest = "multivariate_fap"
        elif key == "rowReductionDetails":
            suggest = "row_reduction_details"
        elif key == "signalDetails":
            suggest = "signal_details"
        elif key == "windowSize":
            suggest = "window_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelModelTrainingResult. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelModelTrainingResult.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelModelTrainingResult.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fap: Optional[float] = None,
                 is_training_goal_achieved: Optional[bool] = None,
                 mae: Optional[float] = None,
                 max_inference_sync_rows: Optional[int] = None,
                 multivariate_fap: Optional[float] = None,
                 rmse: Optional[float] = None,
                 row_reduction_details: Optional[Sequence['outputs.ModelModelTrainingResultRowReductionDetail']] = None,
                 signal_details: Optional[Sequence['outputs.ModelModelTrainingResultSignalDetail']] = None,
                 warning: Optional[str] = None,
                 window_size: Optional[int] = None):
        if fap is not None:
            pulumi.set(__self__, "fap", fap)
        if is_training_goal_achieved is not None:
            pulumi.set(__self__, "is_training_goal_achieved", is_training_goal_achieved)
        if mae is not None:
            pulumi.set(__self__, "mae", mae)
        if max_inference_sync_rows is not None:
            pulumi.set(__self__, "max_inference_sync_rows", max_inference_sync_rows)
        if multivariate_fap is not None:
            pulumi.set(__self__, "multivariate_fap", multivariate_fap)
        if rmse is not None:
            pulumi.set(__self__, "rmse", rmse)
        if row_reduction_details is not None:
            pulumi.set(__self__, "row_reduction_details", row_reduction_details)
        if signal_details is not None:
            pulumi.set(__self__, "signal_details", signal_details)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @property
    @pulumi.getter
    def fap(self) -> Optional[float]:
        return pulumi.get(self, "fap")

    @property
    @pulumi.getter(name="isTrainingGoalAchieved")
    def is_training_goal_achieved(self) -> Optional[bool]:
        return pulumi.get(self, "is_training_goal_achieved")

    @property
    @pulumi.getter
    def mae(self) -> Optional[float]:
        return pulumi.get(self, "mae")

    @property
    @pulumi.getter(name="maxInferenceSyncRows")
    def max_inference_sync_rows(self) -> Optional[int]:
        return pulumi.get(self, "max_inference_sync_rows")

    @property
    @pulumi.getter(name="multivariateFap")
    def multivariate_fap(self) -> Optional[float]:
        return pulumi.get(self, "multivariate_fap")

    @property
    @pulumi.getter
    def rmse(self) -> Optional[float]:
        return pulumi.get(self, "rmse")

    @property
    @pulumi.getter(name="rowReductionDetails")
    def row_reduction_details(self) -> Optional[Sequence['outputs.ModelModelTrainingResultRowReductionDetail']]:
        return pulumi.get(self, "row_reduction_details")

    @property
    @pulumi.getter(name="signalDetails")
    def signal_details(self) -> Optional[Sequence['outputs.ModelModelTrainingResultSignalDetail']]:
        return pulumi.get(self, "signal_details")

    @property
    @pulumi.getter
    def warning(self) -> Optional[str]:
        return pulumi.get(self, "warning")

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[int]:
        return pulumi.get(self, "window_size")


@pulumi.output_type
class ModelModelTrainingResultRowReductionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isReductionEnabled":
            suggest = "is_reduction_enabled"
        elif key == "reductionMethod":
            suggest = "reduction_method"
        elif key == "reductionPercentage":
            suggest = "reduction_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelModelTrainingResultRowReductionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelModelTrainingResultRowReductionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelModelTrainingResultRowReductionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_reduction_enabled: Optional[bool] = None,
                 reduction_method: Optional[str] = None,
                 reduction_percentage: Optional[float] = None):
        if is_reduction_enabled is not None:
            pulumi.set(__self__, "is_reduction_enabled", is_reduction_enabled)
        if reduction_method is not None:
            pulumi.set(__self__, "reduction_method", reduction_method)
        if reduction_percentage is not None:
            pulumi.set(__self__, "reduction_percentage", reduction_percentage)

    @property
    @pulumi.getter(name="isReductionEnabled")
    def is_reduction_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_reduction_enabled")

    @property
    @pulumi.getter(name="reductionMethod")
    def reduction_method(self) -> Optional[str]:
        return pulumi.get(self, "reduction_method")

    @property
    @pulumi.getter(name="reductionPercentage")
    def reduction_percentage(self) -> Optional[float]:
        return pulumi.get(self, "reduction_percentage")


@pulumi.output_type
class ModelModelTrainingResultSignalDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isQuantized":
            suggest = "is_quantized"
        elif key == "mviRatio":
            suggest = "mvi_ratio"
        elif key == "signalName":
            suggest = "signal_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelModelTrainingResultSignalDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelModelTrainingResultSignalDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelModelTrainingResultSignalDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 details: Optional[str] = None,
                 fap: Optional[float] = None,
                 is_quantized: Optional[bool] = None,
                 max: Optional[float] = None,
                 min: Optional[float] = None,
                 mvi_ratio: Optional[float] = None,
                 signal_name: Optional[str] = None,
                 status: Optional[str] = None,
                 std: Optional[float] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if fap is not None:
            pulumi.set(__self__, "fap", fap)
        if is_quantized is not None:
            pulumi.set(__self__, "is_quantized", is_quantized)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if mvi_ratio is not None:
            pulumi.set(__self__, "mvi_ratio", mvi_ratio)
        if signal_name is not None:
            pulumi.set(__self__, "signal_name", signal_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if std is not None:
            pulumi.set(__self__, "std", std)

    @property
    @pulumi.getter
    def details(self) -> Optional[str]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def fap(self) -> Optional[float]:
        return pulumi.get(self, "fap")

    @property
    @pulumi.getter(name="isQuantized")
    def is_quantized(self) -> Optional[bool]:
        return pulumi.get(self, "is_quantized")

    @property
    @pulumi.getter
    def max(self) -> Optional[float]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[float]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="mviRatio")
    def mvi_ratio(self) -> Optional[float]:
        return pulumi.get(self, "mvi_ratio")

    @property
    @pulumi.getter(name="signalName")
    def signal_name(self) -> Optional[str]:
        return pulumi.get(self, "signal_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def std(self) -> Optional[float]:
        return pulumi.get(self, "std")


@pulumi.output_type
class GetAiPrivateEndpointsAiPrivateEndpointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAiPrivateEndpointsAiPrivateEndpointCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAiPrivateEndpointsAiPrivateEndpointCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAiPrivateEndpointsAiPrivateEndpointCollectionItemResult(dict):
    def __init__(__self__, *,
                 attached_data_assets: Optional[Sequence[str]] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 dns_zones: Optional[Sequence[str]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if attached_data_assets is not None:
            pulumi.set(__self__, "attached_data_assets", attached_data_assets)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dns_zones is not None:
            pulumi.set(__self__, "dns_zones", dns_zones)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="attachedDataAssets")
    def attached_data_assets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attached_data_assets")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsZones")
    def dns_zones(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dns_zones")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAiPrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDetectAnomalyJobInputDetailResult(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 content_type: Optional[str] = None,
                 datas: Optional[Sequence['outputs.GetDetectAnomalyJobInputDetailDataResult']] = None,
                 input_type: Optional[str] = None,
                 message: Optional[str] = None,
                 object_locations: Optional[Sequence['outputs.GetDetectAnomalyJobInputDetailObjectLocationResult']] = None,
                 signal_names: Optional[Sequence[str]] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if input_type is not None:
            pulumi.set(__self__, "input_type", input_type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if object_locations is not None:
            pulumi.set(__self__, "object_locations", object_locations)
        if signal_names is not None:
            pulumi.set(__self__, "signal_names", signal_names)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def datas(self) -> Optional[Sequence['outputs.GetDetectAnomalyJobInputDetailDataResult']]:
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter(name="inputType")
    def input_type(self) -> Optional[str]:
        return pulumi.get(self, "input_type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="objectLocations")
    def object_locations(self) -> Optional[Sequence['outputs.GetDetectAnomalyJobInputDetailObjectLocationResult']]:
        return pulumi.get(self, "object_locations")

    @property
    @pulumi.getter(name="signalNames")
    def signal_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "signal_names")


@pulumi.output_type
class GetDetectAnomalyJobInputDetailDataResult(dict):
    def __init__(__self__, *,
                 timestamp: Optional[str] = None,
                 values: Optional[Sequence[float]] = None):
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDetectAnomalyJobInputDetailObjectLocationResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDetectAnomalyJobOutputDetailResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 output_type: Optional[str] = None,
                 prefix: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if output_type is not None:
            pulumi.set(__self__, "output_type", output_type)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="outputType")
    def output_type(self) -> Optional[str]:
        return pulumi.get(self, "output_type")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetDetectAnomalyJobsDetectAnomalyJobCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDetectAnomalyJobsDetectAnomalyJobCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDetectAnomalyJobsDetectAnomalyJobCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDetectAnomalyJobsDetectAnomalyJobCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 input_details: Optional[Sequence['outputs.GetDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailResult']] = None,
                 lifecycle_state_details: Optional[str] = None,
                 model_id: Optional[str] = None,
                 output_details: Optional[Sequence['outputs.GetDetectAnomalyJobsDetectAnomalyJobCollectionItemOutputDetailResult']] = None,
                 project_id: Optional[str] = None,
                 sensitivity: Optional[float] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_accepted: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if input_details is not None:
            pulumi.set(__self__, "input_details", input_details)
        if lifecycle_state_details is not None:
            pulumi.set(__self__, "lifecycle_state_details", lifecycle_state_details)
        if model_id is not None:
            pulumi.set(__self__, "model_id", model_id)
        if output_details is not None:
            pulumi.set(__self__, "output_details", output_details)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if sensitivity is not None:
            pulumi.set(__self__, "sensitivity", sensitivity)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_accepted is not None:
            pulumi.set(__self__, "time_accepted", time_accepted)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputDetails")
    def input_details(self) -> Optional[Sequence['outputs.GetDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailResult']]:
        return pulumi.get(self, "input_details")

    @property
    @pulumi.getter(name="lifecycleStateDetails")
    def lifecycle_state_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_state_details")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> Optional[str]:
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="outputDetails")
    def output_details(self) -> Optional[Sequence['outputs.GetDetectAnomalyJobsDetectAnomalyJobCollectionItemOutputDetailResult']]:
        return pulumi.get(self, "output_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def sensitivity(self) -> Optional[float]:
        return pulumi.get(self, "sensitivity")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeAccepted")
    def time_accepted(self) -> Optional[str]:
        return pulumi.get(self, "time_accepted")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailResult(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 content_type: Optional[str] = None,
                 datas: Optional[Sequence['outputs.GetDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailDataResult']] = None,
                 input_type: Optional[str] = None,
                 message: Optional[str] = None,
                 object_locations: Optional[Sequence['outputs.GetDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailObjectLocationResult']] = None,
                 signal_names: Optional[Sequence[str]] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if input_type is not None:
            pulumi.set(__self__, "input_type", input_type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if object_locations is not None:
            pulumi.set(__self__, "object_locations", object_locations)
        if signal_names is not None:
            pulumi.set(__self__, "signal_names", signal_names)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def datas(self) -> Optional[Sequence['outputs.GetDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailDataResult']]:
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter(name="inputType")
    def input_type(self) -> Optional[str]:
        return pulumi.get(self, "input_type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="objectLocations")
    def object_locations(self) -> Optional[Sequence['outputs.GetDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailObjectLocationResult']]:
        return pulumi.get(self, "object_locations")

    @property
    @pulumi.getter(name="signalNames")
    def signal_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "signal_names")


@pulumi.output_type
class GetDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailDataResult(dict):
    def __init__(__self__, *,
                 timestamp: Optional[str] = None,
                 values: Optional[Sequence[float]] = None):
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDetectAnomalyJobsDetectAnomalyJobCollectionItemInputDetailObjectLocationResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDetectAnomalyJobsDetectAnomalyJobCollectionItemOutputDetailResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 output_type: Optional[str] = None,
                 prefix: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if output_type is not None:
            pulumi.set(__self__, "output_type", output_type)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="outputType")
    def output_type(self) -> Optional[str]:
        return pulumi.get(self, "output_type")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetDetectAnomalyJobsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDetectionDataAssetDataSourceDetailResult(dict):
    def __init__(__self__, *,
                 atp_password_secret_id: Optional[str] = None,
                 atp_user_name: Optional[str] = None,
                 bucket: Optional[str] = None,
                 cwallet_file_secret_id: Optional[str] = None,
                 data_source_type: Optional[str] = None,
                 database_name: Optional[str] = None,
                 ewallet_file_secret_id: Optional[str] = None,
                 key_store_file_secret_id: Optional[str] = None,
                 measurement_name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 ojdbc_file_secret_id: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 table_name: Optional[str] = None,
                 tnsnames_file_secret_id: Optional[str] = None,
                 truststore_file_secret_id: Optional[str] = None,
                 url: Optional[str] = None,
                 user_name: Optional[str] = None,
                 version_specific_details: Optional[Sequence['outputs.GetDetectionDataAssetDataSourceDetailVersionSpecificDetailResult']] = None,
                 wallet_password_secret_id: Optional[str] = None):
        if atp_password_secret_id is not None:
            pulumi.set(__self__, "atp_password_secret_id", atp_password_secret_id)
        if atp_user_name is not None:
            pulumi.set(__self__, "atp_user_name", atp_user_name)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if cwallet_file_secret_id is not None:
            pulumi.set(__self__, "cwallet_file_secret_id", cwallet_file_secret_id)
        if data_source_type is not None:
            pulumi.set(__self__, "data_source_type", data_source_type)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if ewallet_file_secret_id is not None:
            pulumi.set(__self__, "ewallet_file_secret_id", ewallet_file_secret_id)
        if key_store_file_secret_id is not None:
            pulumi.set(__self__, "key_store_file_secret_id", key_store_file_secret_id)
        if measurement_name is not None:
            pulumi.set(__self__, "measurement_name", measurement_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if ojdbc_file_secret_id is not None:
            pulumi.set(__self__, "ojdbc_file_secret_id", ojdbc_file_secret_id)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if tnsnames_file_secret_id is not None:
            pulumi.set(__self__, "tnsnames_file_secret_id", tnsnames_file_secret_id)
        if truststore_file_secret_id is not None:
            pulumi.set(__self__, "truststore_file_secret_id", truststore_file_secret_id)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if version_specific_details is not None:
            pulumi.set(__self__, "version_specific_details", version_specific_details)
        if wallet_password_secret_id is not None:
            pulumi.set(__self__, "wallet_password_secret_id", wallet_password_secret_id)

    @property
    @pulumi.getter(name="atpPasswordSecretId")
    def atp_password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "atp_password_secret_id")

    @property
    @pulumi.getter(name="atpUserName")
    def atp_user_name(self) -> Optional[str]:
        return pulumi.get(self, "atp_user_name")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="cwalletFileSecretId")
    def cwallet_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "cwallet_file_secret_id")

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> Optional[str]:
        return pulumi.get(self, "data_source_type")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="ewalletFileSecretId")
    def ewallet_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ewallet_file_secret_id")

    @property
    @pulumi.getter(name="keyStoreFileSecretId")
    def key_store_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "key_store_file_secret_id")

    @property
    @pulumi.getter(name="measurementName")
    def measurement_name(self) -> Optional[str]:
        return pulumi.get(self, "measurement_name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="ojdbcFileSecretId")
    def ojdbc_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ojdbc_file_secret_id")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="tnsnamesFileSecretId")
    def tnsnames_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "tnsnames_file_secret_id")

    @property
    @pulumi.getter(name="truststoreFileSecretId")
    def truststore_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "truststore_file_secret_id")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="versionSpecificDetails")
    def version_specific_details(self) -> Optional[Sequence['outputs.GetDetectionDataAssetDataSourceDetailVersionSpecificDetailResult']]:
        return pulumi.get(self, "version_specific_details")

    @property
    @pulumi.getter(name="walletPasswordSecretId")
    def wallet_password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_password_secret_id")


@pulumi.output_type
class GetDetectionDataAssetDataSourceDetailVersionSpecificDetailResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 database_name: Optional[str] = None,
                 influx_version: Optional[str] = None,
                 organization_name: Optional[str] = None,
                 retention_policy_name: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if influx_version is not None:
            pulumi.set(__self__, "influx_version", influx_version)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if retention_policy_name is not None:
            pulumi.set(__self__, "retention_policy_name", retention_policy_name)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="influxVersion")
    def influx_version(self) -> Optional[str]:
        return pulumi.get(self, "influx_version")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[str]:
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="retentionPolicyName")
    def retention_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "retention_policy_name")


@pulumi.output_type
class GetDetectionDataAssetsDataAssetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDetectionDataAssetsDataAssetCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDetectionDataAssetsDataAssetCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDetectionDataAssetsDataAssetCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 data_source_details: Optional[Sequence['outputs.GetDetectionDataAssetsDataAssetCollectionItemDataSourceDetailResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 private_endpoint_id: Optional[str] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if data_source_details is not None:
            pulumi.set(__self__, "data_source_details", data_source_details)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dataSourceDetails")
    def data_source_details(self) -> Optional[Sequence['outputs.GetDetectionDataAssetsDataAssetCollectionItemDataSourceDetailResult']]:
        return pulumi.get(self, "data_source_details")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDetectionDataAssetsDataAssetCollectionItemDataSourceDetailResult(dict):
    def __init__(__self__, *,
                 atp_password_secret_id: Optional[str] = None,
                 atp_user_name: Optional[str] = None,
                 bucket: Optional[str] = None,
                 cwallet_file_secret_id: Optional[str] = None,
                 data_source_type: Optional[str] = None,
                 database_name: Optional[str] = None,
                 ewallet_file_secret_id: Optional[str] = None,
                 key_store_file_secret_id: Optional[str] = None,
                 measurement_name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 ojdbc_file_secret_id: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 table_name: Optional[str] = None,
                 tnsnames_file_secret_id: Optional[str] = None,
                 truststore_file_secret_id: Optional[str] = None,
                 url: Optional[str] = None,
                 user_name: Optional[str] = None,
                 version_specific_details: Optional[Sequence['outputs.GetDetectionDataAssetsDataAssetCollectionItemDataSourceDetailVersionSpecificDetailResult']] = None,
                 wallet_password_secret_id: Optional[str] = None):
        if atp_password_secret_id is not None:
            pulumi.set(__self__, "atp_password_secret_id", atp_password_secret_id)
        if atp_user_name is not None:
            pulumi.set(__self__, "atp_user_name", atp_user_name)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if cwallet_file_secret_id is not None:
            pulumi.set(__self__, "cwallet_file_secret_id", cwallet_file_secret_id)
        if data_source_type is not None:
            pulumi.set(__self__, "data_source_type", data_source_type)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if ewallet_file_secret_id is not None:
            pulumi.set(__self__, "ewallet_file_secret_id", ewallet_file_secret_id)
        if key_store_file_secret_id is not None:
            pulumi.set(__self__, "key_store_file_secret_id", key_store_file_secret_id)
        if measurement_name is not None:
            pulumi.set(__self__, "measurement_name", measurement_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if ojdbc_file_secret_id is not None:
            pulumi.set(__self__, "ojdbc_file_secret_id", ojdbc_file_secret_id)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if tnsnames_file_secret_id is not None:
            pulumi.set(__self__, "tnsnames_file_secret_id", tnsnames_file_secret_id)
        if truststore_file_secret_id is not None:
            pulumi.set(__self__, "truststore_file_secret_id", truststore_file_secret_id)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if version_specific_details is not None:
            pulumi.set(__self__, "version_specific_details", version_specific_details)
        if wallet_password_secret_id is not None:
            pulumi.set(__self__, "wallet_password_secret_id", wallet_password_secret_id)

    @property
    @pulumi.getter(name="atpPasswordSecretId")
    def atp_password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "atp_password_secret_id")

    @property
    @pulumi.getter(name="atpUserName")
    def atp_user_name(self) -> Optional[str]:
        return pulumi.get(self, "atp_user_name")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="cwalletFileSecretId")
    def cwallet_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "cwallet_file_secret_id")

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> Optional[str]:
        return pulumi.get(self, "data_source_type")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="ewalletFileSecretId")
    def ewallet_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ewallet_file_secret_id")

    @property
    @pulumi.getter(name="keyStoreFileSecretId")
    def key_store_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "key_store_file_secret_id")

    @property
    @pulumi.getter(name="measurementName")
    def measurement_name(self) -> Optional[str]:
        return pulumi.get(self, "measurement_name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="ojdbcFileSecretId")
    def ojdbc_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ojdbc_file_secret_id")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="tnsnamesFileSecretId")
    def tnsnames_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "tnsnames_file_secret_id")

    @property
    @pulumi.getter(name="truststoreFileSecretId")
    def truststore_file_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "truststore_file_secret_id")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="versionSpecificDetails")
    def version_specific_details(self) -> Optional[Sequence['outputs.GetDetectionDataAssetsDataAssetCollectionItemDataSourceDetailVersionSpecificDetailResult']]:
        return pulumi.get(self, "version_specific_details")

    @property
    @pulumi.getter(name="walletPasswordSecretId")
    def wallet_password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "wallet_password_secret_id")


@pulumi.output_type
class GetDetectionDataAssetsDataAssetCollectionItemDataSourceDetailVersionSpecificDetailResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 database_name: Optional[str] = None,
                 influx_version: Optional[str] = None,
                 organization_name: Optional[str] = None,
                 retention_policy_name: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if influx_version is not None:
            pulumi.set(__self__, "influx_version", influx_version)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if retention_policy_name is not None:
            pulumi.set(__self__, "retention_policy_name", retention_policy_name)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="influxVersion")
    def influx_version(self) -> Optional[str]:
        return pulumi.get(self, "influx_version")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[str]:
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="retentionPolicyName")
    def retention_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "retention_policy_name")


@pulumi.output_type
class GetDetectionDataAssetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDetectionModelModelTrainingDetailResult(dict):
    def __init__(__self__, *,
                 algorithm_hint: Optional[str] = None,
                 data_asset_ids: Optional[Sequence[str]] = None,
                 target_fap: Optional[float] = None,
                 training_fraction: Optional[float] = None,
                 window_size: Optional[int] = None):
        if algorithm_hint is not None:
            pulumi.set(__self__, "algorithm_hint", algorithm_hint)
        if data_asset_ids is not None:
            pulumi.set(__self__, "data_asset_ids", data_asset_ids)
        if target_fap is not None:
            pulumi.set(__self__, "target_fap", target_fap)
        if training_fraction is not None:
            pulumi.set(__self__, "training_fraction", training_fraction)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @property
    @pulumi.getter(name="algorithmHint")
    def algorithm_hint(self) -> Optional[str]:
        return pulumi.get(self, "algorithm_hint")

    @property
    @pulumi.getter(name="dataAssetIds")
    def data_asset_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "data_asset_ids")

    @property
    @pulumi.getter(name="targetFap")
    def target_fap(self) -> Optional[float]:
        return pulumi.get(self, "target_fap")

    @property
    @pulumi.getter(name="trainingFraction")
    def training_fraction(self) -> Optional[float]:
        return pulumi.get(self, "training_fraction")

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[int]:
        return pulumi.get(self, "window_size")


@pulumi.output_type
class GetDetectionModelModelTrainingResultResult(dict):
    def __init__(__self__, *,
                 fap: Optional[float] = None,
                 is_training_goal_achieved: Optional[bool] = None,
                 mae: Optional[float] = None,
                 max_inference_sync_rows: Optional[int] = None,
                 multivariate_fap: Optional[float] = None,
                 rmse: Optional[float] = None,
                 row_reduction_details: Optional[Sequence['outputs.GetDetectionModelModelTrainingResultRowReductionDetailResult']] = None,
                 signal_details: Optional[Sequence['outputs.GetDetectionModelModelTrainingResultSignalDetailResult']] = None,
                 warning: Optional[str] = None,
                 window_size: Optional[int] = None):
        if fap is not None:
            pulumi.set(__self__, "fap", fap)
        if is_training_goal_achieved is not None:
            pulumi.set(__self__, "is_training_goal_achieved", is_training_goal_achieved)
        if mae is not None:
            pulumi.set(__self__, "mae", mae)
        if max_inference_sync_rows is not None:
            pulumi.set(__self__, "max_inference_sync_rows", max_inference_sync_rows)
        if multivariate_fap is not None:
            pulumi.set(__self__, "multivariate_fap", multivariate_fap)
        if rmse is not None:
            pulumi.set(__self__, "rmse", rmse)
        if row_reduction_details is not None:
            pulumi.set(__self__, "row_reduction_details", row_reduction_details)
        if signal_details is not None:
            pulumi.set(__self__, "signal_details", signal_details)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @property
    @pulumi.getter
    def fap(self) -> Optional[float]:
        return pulumi.get(self, "fap")

    @property
    @pulumi.getter(name="isTrainingGoalAchieved")
    def is_training_goal_achieved(self) -> Optional[bool]:
        return pulumi.get(self, "is_training_goal_achieved")

    @property
    @pulumi.getter
    def mae(self) -> Optional[float]:
        return pulumi.get(self, "mae")

    @property
    @pulumi.getter(name="maxInferenceSyncRows")
    def max_inference_sync_rows(self) -> Optional[int]:
        return pulumi.get(self, "max_inference_sync_rows")

    @property
    @pulumi.getter(name="multivariateFap")
    def multivariate_fap(self) -> Optional[float]:
        return pulumi.get(self, "multivariate_fap")

    @property
    @pulumi.getter
    def rmse(self) -> Optional[float]:
        return pulumi.get(self, "rmse")

    @property
    @pulumi.getter(name="rowReductionDetails")
    def row_reduction_details(self) -> Optional[Sequence['outputs.GetDetectionModelModelTrainingResultRowReductionDetailResult']]:
        return pulumi.get(self, "row_reduction_details")

    @property
    @pulumi.getter(name="signalDetails")
    def signal_details(self) -> Optional[Sequence['outputs.GetDetectionModelModelTrainingResultSignalDetailResult']]:
        return pulumi.get(self, "signal_details")

    @property
    @pulumi.getter
    def warning(self) -> Optional[str]:
        return pulumi.get(self, "warning")

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[int]:
        return pulumi.get(self, "window_size")


@pulumi.output_type
class GetDetectionModelModelTrainingResultRowReductionDetailResult(dict):
    def __init__(__self__, *,
                 is_reduction_enabled: Optional[bool] = None,
                 reduction_method: Optional[str] = None,
                 reduction_percentage: Optional[float] = None):
        if is_reduction_enabled is not None:
            pulumi.set(__self__, "is_reduction_enabled", is_reduction_enabled)
        if reduction_method is not None:
            pulumi.set(__self__, "reduction_method", reduction_method)
        if reduction_percentage is not None:
            pulumi.set(__self__, "reduction_percentage", reduction_percentage)

    @property
    @pulumi.getter(name="isReductionEnabled")
    def is_reduction_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_reduction_enabled")

    @property
    @pulumi.getter(name="reductionMethod")
    def reduction_method(self) -> Optional[str]:
        return pulumi.get(self, "reduction_method")

    @property
    @pulumi.getter(name="reductionPercentage")
    def reduction_percentage(self) -> Optional[float]:
        return pulumi.get(self, "reduction_percentage")


@pulumi.output_type
class GetDetectionModelModelTrainingResultSignalDetailResult(dict):
    def __init__(__self__, *,
                 details: Optional[str] = None,
                 fap: Optional[float] = None,
                 is_quantized: Optional[bool] = None,
                 max: Optional[float] = None,
                 min: Optional[float] = None,
                 mvi_ratio: Optional[float] = None,
                 signal_name: Optional[str] = None,
                 status: Optional[str] = None,
                 std: Optional[float] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if fap is not None:
            pulumi.set(__self__, "fap", fap)
        if is_quantized is not None:
            pulumi.set(__self__, "is_quantized", is_quantized)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if mvi_ratio is not None:
            pulumi.set(__self__, "mvi_ratio", mvi_ratio)
        if signal_name is not None:
            pulumi.set(__self__, "signal_name", signal_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if std is not None:
            pulumi.set(__self__, "std", std)

    @property
    @pulumi.getter
    def details(self) -> Optional[str]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def fap(self) -> Optional[float]:
        return pulumi.get(self, "fap")

    @property
    @pulumi.getter(name="isQuantized")
    def is_quantized(self) -> Optional[bool]:
        return pulumi.get(self, "is_quantized")

    @property
    @pulumi.getter
    def max(self) -> Optional[float]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[float]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="mviRatio")
    def mvi_ratio(self) -> Optional[float]:
        return pulumi.get(self, "mvi_ratio")

    @property
    @pulumi.getter(name="signalName")
    def signal_name(self) -> Optional[str]:
        return pulumi.get(self, "signal_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def std(self) -> Optional[float]:
        return pulumi.get(self, "std")


@pulumi.output_type
class GetDetectionModelsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDetectionModelsModelCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDetectionModelsModelCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDetectionModelsModelCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDetectionModelsModelCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 model_training_details: Optional[Sequence['outputs.GetDetectionModelsModelCollectionItemModelTrainingDetailResult']] = None,
                 model_training_results: Optional[Sequence['outputs.GetDetectionModelsModelCollectionItemModelTrainingResultResult']] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if model_training_details is not None:
            pulumi.set(__self__, "model_training_details", model_training_details)
        if model_training_results is not None:
            pulumi.set(__self__, "model_training_results", model_training_results)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="modelTrainingDetails")
    def model_training_details(self) -> Optional[Sequence['outputs.GetDetectionModelsModelCollectionItemModelTrainingDetailResult']]:
        return pulumi.get(self, "model_training_details")

    @property
    @pulumi.getter(name="modelTrainingResults")
    def model_training_results(self) -> Optional[Sequence['outputs.GetDetectionModelsModelCollectionItemModelTrainingResultResult']]:
        return pulumi.get(self, "model_training_results")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDetectionModelsModelCollectionItemModelTrainingDetailResult(dict):
    def __init__(__self__, *,
                 algorithm_hint: Optional[str] = None,
                 data_asset_ids: Optional[Sequence[str]] = None,
                 target_fap: Optional[float] = None,
                 training_fraction: Optional[float] = None,
                 window_size: Optional[int] = None):
        if algorithm_hint is not None:
            pulumi.set(__self__, "algorithm_hint", algorithm_hint)
        if data_asset_ids is not None:
            pulumi.set(__self__, "data_asset_ids", data_asset_ids)
        if target_fap is not None:
            pulumi.set(__self__, "target_fap", target_fap)
        if training_fraction is not None:
            pulumi.set(__self__, "training_fraction", training_fraction)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @property
    @pulumi.getter(name="algorithmHint")
    def algorithm_hint(self) -> Optional[str]:
        return pulumi.get(self, "algorithm_hint")

    @property
    @pulumi.getter(name="dataAssetIds")
    def data_asset_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "data_asset_ids")

    @property
    @pulumi.getter(name="targetFap")
    def target_fap(self) -> Optional[float]:
        return pulumi.get(self, "target_fap")

    @property
    @pulumi.getter(name="trainingFraction")
    def training_fraction(self) -> Optional[float]:
        return pulumi.get(self, "training_fraction")

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[int]:
        return pulumi.get(self, "window_size")


@pulumi.output_type
class GetDetectionModelsModelCollectionItemModelTrainingResultResult(dict):
    def __init__(__self__, *,
                 fap: Optional[float] = None,
                 is_training_goal_achieved: Optional[bool] = None,
                 mae: Optional[float] = None,
                 max_inference_sync_rows: Optional[int] = None,
                 multivariate_fap: Optional[float] = None,
                 rmse: Optional[float] = None,
                 row_reduction_details: Optional[Sequence['outputs.GetDetectionModelsModelCollectionItemModelTrainingResultRowReductionDetailResult']] = None,
                 signal_details: Optional[Sequence['outputs.GetDetectionModelsModelCollectionItemModelTrainingResultSignalDetailResult']] = None,
                 warning: Optional[str] = None,
                 window_size: Optional[int] = None):
        if fap is not None:
            pulumi.set(__self__, "fap", fap)
        if is_training_goal_achieved is not None:
            pulumi.set(__self__, "is_training_goal_achieved", is_training_goal_achieved)
        if mae is not None:
            pulumi.set(__self__, "mae", mae)
        if max_inference_sync_rows is not None:
            pulumi.set(__self__, "max_inference_sync_rows", max_inference_sync_rows)
        if multivariate_fap is not None:
            pulumi.set(__self__, "multivariate_fap", multivariate_fap)
        if rmse is not None:
            pulumi.set(__self__, "rmse", rmse)
        if row_reduction_details is not None:
            pulumi.set(__self__, "row_reduction_details", row_reduction_details)
        if signal_details is not None:
            pulumi.set(__self__, "signal_details", signal_details)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @property
    @pulumi.getter
    def fap(self) -> Optional[float]:
        return pulumi.get(self, "fap")

    @property
    @pulumi.getter(name="isTrainingGoalAchieved")
    def is_training_goal_achieved(self) -> Optional[bool]:
        return pulumi.get(self, "is_training_goal_achieved")

    @property
    @pulumi.getter
    def mae(self) -> Optional[float]:
        return pulumi.get(self, "mae")

    @property
    @pulumi.getter(name="maxInferenceSyncRows")
    def max_inference_sync_rows(self) -> Optional[int]:
        return pulumi.get(self, "max_inference_sync_rows")

    @property
    @pulumi.getter(name="multivariateFap")
    def multivariate_fap(self) -> Optional[float]:
        return pulumi.get(self, "multivariate_fap")

    @property
    @pulumi.getter
    def rmse(self) -> Optional[float]:
        return pulumi.get(self, "rmse")

    @property
    @pulumi.getter(name="rowReductionDetails")
    def row_reduction_details(self) -> Optional[Sequence['outputs.GetDetectionModelsModelCollectionItemModelTrainingResultRowReductionDetailResult']]:
        return pulumi.get(self, "row_reduction_details")

    @property
    @pulumi.getter(name="signalDetails")
    def signal_details(self) -> Optional[Sequence['outputs.GetDetectionModelsModelCollectionItemModelTrainingResultSignalDetailResult']]:
        return pulumi.get(self, "signal_details")

    @property
    @pulumi.getter
    def warning(self) -> Optional[str]:
        return pulumi.get(self, "warning")

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[int]:
        return pulumi.get(self, "window_size")


@pulumi.output_type
class GetDetectionModelsModelCollectionItemModelTrainingResultRowReductionDetailResult(dict):
    def __init__(__self__, *,
                 is_reduction_enabled: Optional[bool] = None,
                 reduction_method: Optional[str] = None,
                 reduction_percentage: Optional[float] = None):
        if is_reduction_enabled is not None:
            pulumi.set(__self__, "is_reduction_enabled", is_reduction_enabled)
        if reduction_method is not None:
            pulumi.set(__self__, "reduction_method", reduction_method)
        if reduction_percentage is not None:
            pulumi.set(__self__, "reduction_percentage", reduction_percentage)

    @property
    @pulumi.getter(name="isReductionEnabled")
    def is_reduction_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_reduction_enabled")

    @property
    @pulumi.getter(name="reductionMethod")
    def reduction_method(self) -> Optional[str]:
        return pulumi.get(self, "reduction_method")

    @property
    @pulumi.getter(name="reductionPercentage")
    def reduction_percentage(self) -> Optional[float]:
        return pulumi.get(self, "reduction_percentage")


@pulumi.output_type
class GetDetectionModelsModelCollectionItemModelTrainingResultSignalDetailResult(dict):
    def __init__(__self__, *,
                 details: Optional[str] = None,
                 fap: Optional[float] = None,
                 is_quantized: Optional[bool] = None,
                 max: Optional[float] = None,
                 min: Optional[float] = None,
                 mvi_ratio: Optional[float] = None,
                 signal_name: Optional[str] = None,
                 status: Optional[str] = None,
                 std: Optional[float] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if fap is not None:
            pulumi.set(__self__, "fap", fap)
        if is_quantized is not None:
            pulumi.set(__self__, "is_quantized", is_quantized)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if mvi_ratio is not None:
            pulumi.set(__self__, "mvi_ratio", mvi_ratio)
        if signal_name is not None:
            pulumi.set(__self__, "signal_name", signal_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if std is not None:
            pulumi.set(__self__, "std", std)

    @property
    @pulumi.getter
    def details(self) -> Optional[str]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def fap(self) -> Optional[float]:
        return pulumi.get(self, "fap")

    @property
    @pulumi.getter(name="isQuantized")
    def is_quantized(self) -> Optional[bool]:
        return pulumi.get(self, "is_quantized")

    @property
    @pulumi.getter
    def max(self) -> Optional[float]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[float]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="mviRatio")
    def mvi_ratio(self) -> Optional[float]:
        return pulumi.get(self, "mvi_ratio")

    @property
    @pulumi.getter(name="signalName")
    def signal_name(self) -> Optional[str]:
        return pulumi.get(self, "signal_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def std(self) -> Optional[float]:
        return pulumi.get(self, "std")


@pulumi.output_type
class GetDetectionProjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDetectionProjectsProjectCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDetectionProjectsProjectCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDetectionProjectsProjectCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDetectionProjectsProjectCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


