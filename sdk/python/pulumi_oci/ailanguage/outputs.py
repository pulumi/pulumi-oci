# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ModelEvaluationResult',
    'ModelEvaluationResultClassMetric',
    'ModelEvaluationResultEntityMetric',
    'ModelEvaluationResultMetric',
    'ModelModelDetails',
    'ModelModelDetailsClassificationMode',
    'ModelTestStrategy',
    'ModelTestStrategyTestingDataset',
    'ModelTestStrategyTestingDatasetLocationDetails',
    'ModelTestStrategyValidationDataset',
    'ModelTestStrategyValidationDatasetLocationDetails',
    'ModelTrainingDataset',
    'ModelTrainingDatasetLocationDetails',
    'GetEndpointsEndpointCollectionResult',
    'GetEndpointsEndpointCollectionItemResult',
    'GetEndpointsFilterResult',
    'GetModelEvaluationResultResult',
    'GetModelEvaluationResultClassMetricResult',
    'GetModelEvaluationResultEntityMetricResult',
    'GetModelEvaluationResultMetricResult',
    'GetModelEvaluationResultsEvaluationResultCollectionResult',
    'GetModelEvaluationResultsEvaluationResultCollectionItemResult',
    'GetModelEvaluationResultsEvaluationResultCollectionItemPredictedEntityResult',
    'GetModelEvaluationResultsEvaluationResultCollectionItemTrueEntityResult',
    'GetModelEvaluationResultsFilterResult',
    'GetModelModelDetailResult',
    'GetModelModelDetailClassificationModeResult',
    'GetModelTestStrategyResult',
    'GetModelTestStrategyTestingDatasetResult',
    'GetModelTestStrategyTestingDatasetLocationDetailResult',
    'GetModelTestStrategyValidationDatasetResult',
    'GetModelTestStrategyValidationDatasetLocationDetailResult',
    'GetModelTrainingDatasetResult',
    'GetModelTrainingDatasetLocationDetailResult',
    'GetModelsFilterResult',
    'GetModelsModelCollectionResult',
    'GetModelsModelCollectionItemResult',
    'GetModelsModelCollectionItemEvaluationResultResult',
    'GetModelsModelCollectionItemEvaluationResultClassMetricResult',
    'GetModelsModelCollectionItemEvaluationResultEntityMetricResult',
    'GetModelsModelCollectionItemEvaluationResultMetricResult',
    'GetModelsModelCollectionItemModelDetailResult',
    'GetModelsModelCollectionItemModelDetailClassificationModeResult',
    'GetModelsModelCollectionItemTestStrategyResult',
    'GetModelsModelCollectionItemTestStrategyTestingDatasetResult',
    'GetModelsModelCollectionItemTestStrategyTestingDatasetLocationDetailResult',
    'GetModelsModelCollectionItemTestStrategyValidationDatasetResult',
    'GetModelsModelCollectionItemTestStrategyValidationDatasetLocationDetailResult',
    'GetModelsModelCollectionItemTrainingDatasetResult',
    'GetModelsModelCollectionItemTrainingDatasetLocationDetailResult',
    'GetProjectsFilterResult',
    'GetProjectsProjectCollectionResult',
    'GetProjectsProjectCollectionItemResult',
]

@pulumi.output_type
class ModelEvaluationResult(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "classMetrics":
            suggest = "class_metrics"
        elif key == "confusionMatrix":
            suggest = "confusion_matrix"
        elif key == "entityMetrics":
            suggest = "entity_metrics"
        elif key == "modelType":
            suggest = "model_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelEvaluationResult. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelEvaluationResult.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelEvaluationResult.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_metrics: Optional[Sequence['outputs.ModelEvaluationResultClassMetric']] = None,
                 confusion_matrix: Optional[str] = None,
                 entity_metrics: Optional[Sequence['outputs.ModelEvaluationResultEntityMetric']] = None,
                 labels: Optional[Sequence[str]] = None,
                 metrics: Optional[Sequence['outputs.ModelEvaluationResultMetric']] = None,
                 model_type: Optional[str] = None):
        if class_metrics is not None:
            pulumi.set(__self__, "class_metrics", class_metrics)
        if confusion_matrix is not None:
            pulumi.set(__self__, "confusion_matrix", confusion_matrix)
        if entity_metrics is not None:
            pulumi.set(__self__, "entity_metrics", entity_metrics)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)

    @property
    @pulumi.getter(name="classMetrics")
    def class_metrics(self) -> Optional[Sequence['outputs.ModelEvaluationResultClassMetric']]:
        return pulumi.get(self, "class_metrics")

    @property
    @pulumi.getter(name="confusionMatrix")
    def confusion_matrix(self) -> Optional[str]:
        return pulumi.get(self, "confusion_matrix")

    @property
    @pulumi.getter(name="entityMetrics")
    def entity_metrics(self) -> Optional[Sequence['outputs.ModelEvaluationResultEntityMetric']]:
        return pulumi.get(self, "entity_metrics")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.ModelEvaluationResultMetric']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[str]:
        return pulumi.get(self, "model_type")


@pulumi.output_type
class ModelEvaluationResultClassMetric(dict):
    def __init__(__self__, *,
                 f1: Optional[float] = None,
                 label: Optional[str] = None,
                 precision: Optional[float] = None,
                 recall: Optional[float] = None,
                 support: Optional[float] = None):
        if f1 is not None:
            pulumi.set(__self__, "f1", f1)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if recall is not None:
            pulumi.set(__self__, "recall", recall)
        if support is not None:
            pulumi.set(__self__, "support", support)

    @property
    @pulumi.getter
    def f1(self) -> Optional[float]:
        return pulumi.get(self, "f1")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def precision(self) -> Optional[float]:
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter
    def recall(self) -> Optional[float]:
        return pulumi.get(self, "recall")

    @property
    @pulumi.getter
    def support(self) -> Optional[float]:
        return pulumi.get(self, "support")


@pulumi.output_type
class ModelEvaluationResultEntityMetric(dict):
    def __init__(__self__, *,
                 f1: Optional[float] = None,
                 label: Optional[str] = None,
                 precision: Optional[float] = None,
                 recall: Optional[float] = None):
        if f1 is not None:
            pulumi.set(__self__, "f1", f1)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if recall is not None:
            pulumi.set(__self__, "recall", recall)

    @property
    @pulumi.getter
    def f1(self) -> Optional[float]:
        return pulumi.get(self, "f1")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def precision(self) -> Optional[float]:
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter
    def recall(self) -> Optional[float]:
        return pulumi.get(self, "recall")


@pulumi.output_type
class ModelEvaluationResultMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "macroF1":
            suggest = "macro_f1"
        elif key == "macroPrecision":
            suggest = "macro_precision"
        elif key == "macroRecall":
            suggest = "macro_recall"
        elif key == "microF1":
            suggest = "micro_f1"
        elif key == "microPrecision":
            suggest = "micro_precision"
        elif key == "microRecall":
            suggest = "micro_recall"
        elif key == "weightedF1":
            suggest = "weighted_f1"
        elif key == "weightedPrecision":
            suggest = "weighted_precision"
        elif key == "weightedRecall":
            suggest = "weighted_recall"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelEvaluationResultMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelEvaluationResultMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelEvaluationResultMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accuracy: Optional[float] = None,
                 macro_f1: Optional[float] = None,
                 macro_precision: Optional[float] = None,
                 macro_recall: Optional[float] = None,
                 micro_f1: Optional[float] = None,
                 micro_precision: Optional[float] = None,
                 micro_recall: Optional[float] = None,
                 weighted_f1: Optional[float] = None,
                 weighted_precision: Optional[float] = None,
                 weighted_recall: Optional[float] = None):
        if accuracy is not None:
            pulumi.set(__self__, "accuracy", accuracy)
        if macro_f1 is not None:
            pulumi.set(__self__, "macro_f1", macro_f1)
        if macro_precision is not None:
            pulumi.set(__self__, "macro_precision", macro_precision)
        if macro_recall is not None:
            pulumi.set(__self__, "macro_recall", macro_recall)
        if micro_f1 is not None:
            pulumi.set(__self__, "micro_f1", micro_f1)
        if micro_precision is not None:
            pulumi.set(__self__, "micro_precision", micro_precision)
        if micro_recall is not None:
            pulumi.set(__self__, "micro_recall", micro_recall)
        if weighted_f1 is not None:
            pulumi.set(__self__, "weighted_f1", weighted_f1)
        if weighted_precision is not None:
            pulumi.set(__self__, "weighted_precision", weighted_precision)
        if weighted_recall is not None:
            pulumi.set(__self__, "weighted_recall", weighted_recall)

    @property
    @pulumi.getter
    def accuracy(self) -> Optional[float]:
        return pulumi.get(self, "accuracy")

    @property
    @pulumi.getter(name="macroF1")
    def macro_f1(self) -> Optional[float]:
        return pulumi.get(self, "macro_f1")

    @property
    @pulumi.getter(name="macroPrecision")
    def macro_precision(self) -> Optional[float]:
        return pulumi.get(self, "macro_precision")

    @property
    @pulumi.getter(name="macroRecall")
    def macro_recall(self) -> Optional[float]:
        return pulumi.get(self, "macro_recall")

    @property
    @pulumi.getter(name="microF1")
    def micro_f1(self) -> Optional[float]:
        return pulumi.get(self, "micro_f1")

    @property
    @pulumi.getter(name="microPrecision")
    def micro_precision(self) -> Optional[float]:
        return pulumi.get(self, "micro_precision")

    @property
    @pulumi.getter(name="microRecall")
    def micro_recall(self) -> Optional[float]:
        return pulumi.get(self, "micro_recall")

    @property
    @pulumi.getter(name="weightedF1")
    def weighted_f1(self) -> Optional[float]:
        return pulumi.get(self, "weighted_f1")

    @property
    @pulumi.getter(name="weightedPrecision")
    def weighted_precision(self) -> Optional[float]:
        return pulumi.get(self, "weighted_precision")

    @property
    @pulumi.getter(name="weightedRecall")
    def weighted_recall(self) -> Optional[float]:
        return pulumi.get(self, "weighted_recall")


@pulumi.output_type
class ModelModelDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelType":
            suggest = "model_type"
        elif key == "classificationMode":
            suggest = "classification_mode"
        elif key == "languageCode":
            suggest = "language_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelModelDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelModelDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelModelDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 model_type: str,
                 classification_mode: Optional['outputs.ModelModelDetailsClassificationMode'] = None,
                 language_code: Optional[str] = None,
                 version: Optional[str] = None):
        pulumi.set(__self__, "model_type", model_type)
        if classification_mode is not None:
            pulumi.set(__self__, "classification_mode", classification_mode)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="classificationMode")
    def classification_mode(self) -> Optional['outputs.ModelModelDetailsClassificationMode']:
        return pulumi.get(self, "classification_mode")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[str]:
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class ModelModelDetailsClassificationMode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "classificationMode":
            suggest = "classification_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelModelDetailsClassificationMode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelModelDetailsClassificationMode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelModelDetailsClassificationMode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 classification_mode: str,
                 version: Optional[str] = None):
        pulumi.set(__self__, "classification_mode", classification_mode)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="classificationMode")
    def classification_mode(self) -> str:
        return pulumi.get(self, "classification_mode")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class ModelTestStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "strategyType":
            suggest = "strategy_type"
        elif key == "testingDataset":
            suggest = "testing_dataset"
        elif key == "validationDataset":
            suggest = "validation_dataset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelTestStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelTestStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelTestStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 strategy_type: str,
                 testing_dataset: 'outputs.ModelTestStrategyTestingDataset',
                 validation_dataset: Optional['outputs.ModelTestStrategyValidationDataset'] = None):
        pulumi.set(__self__, "strategy_type", strategy_type)
        pulumi.set(__self__, "testing_dataset", testing_dataset)
        if validation_dataset is not None:
            pulumi.set(__self__, "validation_dataset", validation_dataset)

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> str:
        return pulumi.get(self, "strategy_type")

    @property
    @pulumi.getter(name="testingDataset")
    def testing_dataset(self) -> 'outputs.ModelTestStrategyTestingDataset':
        return pulumi.get(self, "testing_dataset")

    @property
    @pulumi.getter(name="validationDataset")
    def validation_dataset(self) -> Optional['outputs.ModelTestStrategyValidationDataset']:
        return pulumi.get(self, "validation_dataset")


@pulumi.output_type
class ModelTestStrategyTestingDataset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datasetType":
            suggest = "dataset_type"
        elif key == "datasetId":
            suggest = "dataset_id"
        elif key == "locationDetails":
            suggest = "location_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelTestStrategyTestingDataset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelTestStrategyTestingDataset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelTestStrategyTestingDataset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset_type: str,
                 dataset_id: Optional[str] = None,
                 location_details: Optional['outputs.ModelTestStrategyTestingDatasetLocationDetails'] = None):
        pulumi.set(__self__, "dataset_type", dataset_type)
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if location_details is not None:
            pulumi.set(__self__, "location_details", location_details)

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> str:
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[str]:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="locationDetails")
    def location_details(self) -> Optional['outputs.ModelTestStrategyTestingDatasetLocationDetails']:
        return pulumi.get(self, "location_details")


@pulumi.output_type
class ModelTestStrategyTestingDatasetLocationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "locationType":
            suggest = "location_type"
        elif key == "objectNames":
            suggest = "object_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelTestStrategyTestingDatasetLocationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelTestStrategyTestingDatasetLocationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelTestStrategyTestingDatasetLocationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 location_type: str,
                 namespace: str,
                 object_names: Sequence[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "location_type", location_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object_names", object_names)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> str:
        return pulumi.get(self, "location_type")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="objectNames")
    def object_names(self) -> Sequence[str]:
        return pulumi.get(self, "object_names")


@pulumi.output_type
class ModelTestStrategyValidationDataset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datasetType":
            suggest = "dataset_type"
        elif key == "datasetId":
            suggest = "dataset_id"
        elif key == "locationDetails":
            suggest = "location_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelTestStrategyValidationDataset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelTestStrategyValidationDataset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelTestStrategyValidationDataset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset_type: str,
                 dataset_id: Optional[str] = None,
                 location_details: Optional['outputs.ModelTestStrategyValidationDatasetLocationDetails'] = None):
        pulumi.set(__self__, "dataset_type", dataset_type)
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if location_details is not None:
            pulumi.set(__self__, "location_details", location_details)

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> str:
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[str]:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="locationDetails")
    def location_details(self) -> Optional['outputs.ModelTestStrategyValidationDatasetLocationDetails']:
        return pulumi.get(self, "location_details")


@pulumi.output_type
class ModelTestStrategyValidationDatasetLocationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "locationType":
            suggest = "location_type"
        elif key == "objectNames":
            suggest = "object_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelTestStrategyValidationDatasetLocationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelTestStrategyValidationDatasetLocationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelTestStrategyValidationDatasetLocationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 location_type: str,
                 namespace: str,
                 object_names: Sequence[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "location_type", location_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object_names", object_names)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> str:
        return pulumi.get(self, "location_type")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="objectNames")
    def object_names(self) -> Sequence[str]:
        return pulumi.get(self, "object_names")


@pulumi.output_type
class ModelTrainingDataset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datasetType":
            suggest = "dataset_type"
        elif key == "datasetId":
            suggest = "dataset_id"
        elif key == "locationDetails":
            suggest = "location_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelTrainingDataset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelTrainingDataset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelTrainingDataset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset_type: str,
                 dataset_id: Optional[str] = None,
                 location_details: Optional['outputs.ModelTrainingDatasetLocationDetails'] = None):
        pulumi.set(__self__, "dataset_type", dataset_type)
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if location_details is not None:
            pulumi.set(__self__, "location_details", location_details)

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> str:
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[str]:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="locationDetails")
    def location_details(self) -> Optional['outputs.ModelTrainingDatasetLocationDetails']:
        return pulumi.get(self, "location_details")


@pulumi.output_type
class ModelTrainingDatasetLocationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "locationType":
            suggest = "location_type"
        elif key == "objectNames":
            suggest = "object_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelTrainingDatasetLocationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelTrainingDatasetLocationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelTrainingDatasetLocationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 location_type: str,
                 namespace: str,
                 object_names: Sequence[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "location_type", location_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object_names", object_names)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> str:
        return pulumi.get(self, "location_type")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="objectNames")
    def object_names(self) -> Sequence[str]:
        return pulumi.get(self, "object_names")


@pulumi.output_type
class GetEndpointsEndpointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetEndpointsEndpointCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetEndpointsEndpointCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetEndpointsEndpointCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 inference_units: Optional[int] = None,
                 lifecycle_details: Optional[str] = None,
                 model_id: Optional[str] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inference_units is not None:
            pulumi.set(__self__, "inference_units", inference_units)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if model_id is not None:
            pulumi.set(__self__, "model_id", model_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inferenceUnits")
    def inference_units(self) -> Optional[int]:
        return pulumi.get(self, "inference_units")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> Optional[str]:
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelEvaluationResultResult(dict):
    def __init__(__self__, *,
                 class_metrics: Optional[Sequence['outputs.GetModelEvaluationResultClassMetricResult']] = None,
                 confusion_matrix: Optional[str] = None,
                 entity_metrics: Optional[Sequence['outputs.GetModelEvaluationResultEntityMetricResult']] = None,
                 labels: Optional[Sequence[str]] = None,
                 metrics: Optional[Sequence['outputs.GetModelEvaluationResultMetricResult']] = None,
                 model_type: Optional[str] = None):
        if class_metrics is not None:
            pulumi.set(__self__, "class_metrics", class_metrics)
        if confusion_matrix is not None:
            pulumi.set(__self__, "confusion_matrix", confusion_matrix)
        if entity_metrics is not None:
            pulumi.set(__self__, "entity_metrics", entity_metrics)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)

    @property
    @pulumi.getter(name="classMetrics")
    def class_metrics(self) -> Optional[Sequence['outputs.GetModelEvaluationResultClassMetricResult']]:
        return pulumi.get(self, "class_metrics")

    @property
    @pulumi.getter(name="confusionMatrix")
    def confusion_matrix(self) -> Optional[str]:
        return pulumi.get(self, "confusion_matrix")

    @property
    @pulumi.getter(name="entityMetrics")
    def entity_metrics(self) -> Optional[Sequence['outputs.GetModelEvaluationResultEntityMetricResult']]:
        return pulumi.get(self, "entity_metrics")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetModelEvaluationResultMetricResult']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[str]:
        return pulumi.get(self, "model_type")


@pulumi.output_type
class GetModelEvaluationResultClassMetricResult(dict):
    def __init__(__self__, *,
                 f1: Optional[float] = None,
                 label: Optional[str] = None,
                 precision: Optional[float] = None,
                 recall: Optional[float] = None,
                 support: Optional[float] = None):
        if f1 is not None:
            pulumi.set(__self__, "f1", f1)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if recall is not None:
            pulumi.set(__self__, "recall", recall)
        if support is not None:
            pulumi.set(__self__, "support", support)

    @property
    @pulumi.getter
    def f1(self) -> Optional[float]:
        return pulumi.get(self, "f1")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def precision(self) -> Optional[float]:
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter
    def recall(self) -> Optional[float]:
        return pulumi.get(self, "recall")

    @property
    @pulumi.getter
    def support(self) -> Optional[float]:
        return pulumi.get(self, "support")


@pulumi.output_type
class GetModelEvaluationResultEntityMetricResult(dict):
    def __init__(__self__, *,
                 f1: Optional[float] = None,
                 label: Optional[str] = None,
                 precision: Optional[float] = None,
                 recall: Optional[float] = None):
        if f1 is not None:
            pulumi.set(__self__, "f1", f1)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if recall is not None:
            pulumi.set(__self__, "recall", recall)

    @property
    @pulumi.getter
    def f1(self) -> Optional[float]:
        return pulumi.get(self, "f1")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def precision(self) -> Optional[float]:
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter
    def recall(self) -> Optional[float]:
        return pulumi.get(self, "recall")


@pulumi.output_type
class GetModelEvaluationResultMetricResult(dict):
    def __init__(__self__, *,
                 accuracy: Optional[float] = None,
                 macro_f1: Optional[float] = None,
                 macro_precision: Optional[float] = None,
                 macro_recall: Optional[float] = None,
                 micro_f1: Optional[float] = None,
                 micro_precision: Optional[float] = None,
                 micro_recall: Optional[float] = None,
                 weighted_f1: Optional[float] = None,
                 weighted_precision: Optional[float] = None,
                 weighted_recall: Optional[float] = None):
        if accuracy is not None:
            pulumi.set(__self__, "accuracy", accuracy)
        if macro_f1 is not None:
            pulumi.set(__self__, "macro_f1", macro_f1)
        if macro_precision is not None:
            pulumi.set(__self__, "macro_precision", macro_precision)
        if macro_recall is not None:
            pulumi.set(__self__, "macro_recall", macro_recall)
        if micro_f1 is not None:
            pulumi.set(__self__, "micro_f1", micro_f1)
        if micro_precision is not None:
            pulumi.set(__self__, "micro_precision", micro_precision)
        if micro_recall is not None:
            pulumi.set(__self__, "micro_recall", micro_recall)
        if weighted_f1 is not None:
            pulumi.set(__self__, "weighted_f1", weighted_f1)
        if weighted_precision is not None:
            pulumi.set(__self__, "weighted_precision", weighted_precision)
        if weighted_recall is not None:
            pulumi.set(__self__, "weighted_recall", weighted_recall)

    @property
    @pulumi.getter
    def accuracy(self) -> Optional[float]:
        return pulumi.get(self, "accuracy")

    @property
    @pulumi.getter(name="macroF1")
    def macro_f1(self) -> Optional[float]:
        return pulumi.get(self, "macro_f1")

    @property
    @pulumi.getter(name="macroPrecision")
    def macro_precision(self) -> Optional[float]:
        return pulumi.get(self, "macro_precision")

    @property
    @pulumi.getter(name="macroRecall")
    def macro_recall(self) -> Optional[float]:
        return pulumi.get(self, "macro_recall")

    @property
    @pulumi.getter(name="microF1")
    def micro_f1(self) -> Optional[float]:
        return pulumi.get(self, "micro_f1")

    @property
    @pulumi.getter(name="microPrecision")
    def micro_precision(self) -> Optional[float]:
        return pulumi.get(self, "micro_precision")

    @property
    @pulumi.getter(name="microRecall")
    def micro_recall(self) -> Optional[float]:
        return pulumi.get(self, "micro_recall")

    @property
    @pulumi.getter(name="weightedF1")
    def weighted_f1(self) -> Optional[float]:
        return pulumi.get(self, "weighted_f1")

    @property
    @pulumi.getter(name="weightedPrecision")
    def weighted_precision(self) -> Optional[float]:
        return pulumi.get(self, "weighted_precision")

    @property
    @pulumi.getter(name="weightedRecall")
    def weighted_recall(self) -> Optional[float]:
        return pulumi.get(self, "weighted_recall")


@pulumi.output_type
class GetModelEvaluationResultsEvaluationResultCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetModelEvaluationResultsEvaluationResultCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetModelEvaluationResultsEvaluationResultCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetModelEvaluationResultsEvaluationResultCollectionItemResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 location: Optional[str] = None,
                 model_type: Optional[str] = None,
                 predicted_entities: Optional[Sequence['outputs.GetModelEvaluationResultsEvaluationResultCollectionItemPredictedEntityResult']] = None,
                 predicted_labels: Optional[Sequence[str]] = None,
                 record: Optional[str] = None,
                 true_entities: Optional[Sequence['outputs.GetModelEvaluationResultsEvaluationResultCollectionItemTrueEntityResult']] = None,
                 true_labels: Optional[Sequence[str]] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if predicted_entities is not None:
            pulumi.set(__self__, "predicted_entities", predicted_entities)
        if predicted_labels is not None:
            pulumi.set(__self__, "predicted_labels", predicted_labels)
        if record is not None:
            pulumi.set(__self__, "record", record)
        if true_entities is not None:
            pulumi.set(__self__, "true_entities", true_entities)
        if true_labels is not None:
            pulumi.set(__self__, "true_labels", true_labels)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[str]:
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="predictedEntities")
    def predicted_entities(self) -> Optional[Sequence['outputs.GetModelEvaluationResultsEvaluationResultCollectionItemPredictedEntityResult']]:
        return pulumi.get(self, "predicted_entities")

    @property
    @pulumi.getter(name="predictedLabels")
    def predicted_labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "predicted_labels")

    @property
    @pulumi.getter
    def record(self) -> Optional[str]:
        return pulumi.get(self, "record")

    @property
    @pulumi.getter(name="trueEntities")
    def true_entities(self) -> Optional[Sequence['outputs.GetModelEvaluationResultsEvaluationResultCollectionItemTrueEntityResult']]:
        return pulumi.get(self, "true_entities")

    @property
    @pulumi.getter(name="trueLabels")
    def true_labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "true_labels")


@pulumi.output_type
class GetModelEvaluationResultsEvaluationResultCollectionItemPredictedEntityResult(dict):
    def __init__(__self__, *,
                 length: Optional[int] = None,
                 offset: Optional[int] = None,
                 type: Optional[str] = None):
        if length is not None:
            pulumi.set(__self__, "length", length)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetModelEvaluationResultsEvaluationResultCollectionItemTrueEntityResult(dict):
    def __init__(__self__, *,
                 length: Optional[int] = None,
                 offset: Optional[int] = None,
                 type: Optional[str] = None):
        if length is not None:
            pulumi.set(__self__, "length", length)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetModelEvaluationResultsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelModelDetailResult(dict):
    def __init__(__self__, *,
                 classification_modes: Optional[Sequence['outputs.GetModelModelDetailClassificationModeResult']] = None,
                 language_code: Optional[str] = None,
                 model_type: Optional[str] = None,
                 version: Optional[str] = None):
        if classification_modes is not None:
            pulumi.set(__self__, "classification_modes", classification_modes)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="classificationModes")
    def classification_modes(self) -> Optional[Sequence['outputs.GetModelModelDetailClassificationModeResult']]:
        return pulumi.get(self, "classification_modes")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[str]:
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[str]:
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetModelModelDetailClassificationModeResult(dict):
    def __init__(__self__, *,
                 classification_mode: Optional[str] = None,
                 version: Optional[str] = None):
        if classification_mode is not None:
            pulumi.set(__self__, "classification_mode", classification_mode)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="classificationMode")
    def classification_mode(self) -> Optional[str]:
        return pulumi.get(self, "classification_mode")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetModelTestStrategyResult(dict):
    def __init__(__self__, *,
                 strategy_type: Optional[str] = None,
                 testing_datasets: Optional[Sequence['outputs.GetModelTestStrategyTestingDatasetResult']] = None,
                 validation_datasets: Optional[Sequence['outputs.GetModelTestStrategyValidationDatasetResult']] = None):
        if strategy_type is not None:
            pulumi.set(__self__, "strategy_type", strategy_type)
        if testing_datasets is not None:
            pulumi.set(__self__, "testing_datasets", testing_datasets)
        if validation_datasets is not None:
            pulumi.set(__self__, "validation_datasets", validation_datasets)

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> Optional[str]:
        return pulumi.get(self, "strategy_type")

    @property
    @pulumi.getter(name="testingDatasets")
    def testing_datasets(self) -> Optional[Sequence['outputs.GetModelTestStrategyTestingDatasetResult']]:
        return pulumi.get(self, "testing_datasets")

    @property
    @pulumi.getter(name="validationDatasets")
    def validation_datasets(self) -> Optional[Sequence['outputs.GetModelTestStrategyValidationDatasetResult']]:
        return pulumi.get(self, "validation_datasets")


@pulumi.output_type
class GetModelTestStrategyTestingDatasetResult(dict):
    def __init__(__self__, *,
                 dataset_id: Optional[str] = None,
                 dataset_type: Optional[str] = None,
                 location_details: Optional[Sequence['outputs.GetModelTestStrategyTestingDatasetLocationDetailResult']] = None):
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if dataset_type is not None:
            pulumi.set(__self__, "dataset_type", dataset_type)
        if location_details is not None:
            pulumi.set(__self__, "location_details", location_details)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[str]:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> Optional[str]:
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter(name="locationDetails")
    def location_details(self) -> Optional[Sequence['outputs.GetModelTestStrategyTestingDatasetLocationDetailResult']]:
        return pulumi.get(self, "location_details")


@pulumi.output_type
class GetModelTestStrategyTestingDatasetLocationDetailResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 location_type: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object_names: Optional[Sequence[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if location_type is not None:
            pulumi.set(__self__, "location_type", location_type)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object_names is not None:
            pulumi.set(__self__, "object_names", object_names)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> Optional[str]:
        return pulumi.get(self, "location_type")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="objectNames")
    def object_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_names")


@pulumi.output_type
class GetModelTestStrategyValidationDatasetResult(dict):
    def __init__(__self__, *,
                 dataset_id: Optional[str] = None,
                 dataset_type: Optional[str] = None,
                 location_details: Optional[Sequence['outputs.GetModelTestStrategyValidationDatasetLocationDetailResult']] = None):
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if dataset_type is not None:
            pulumi.set(__self__, "dataset_type", dataset_type)
        if location_details is not None:
            pulumi.set(__self__, "location_details", location_details)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[str]:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> Optional[str]:
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter(name="locationDetails")
    def location_details(self) -> Optional[Sequence['outputs.GetModelTestStrategyValidationDatasetLocationDetailResult']]:
        return pulumi.get(self, "location_details")


@pulumi.output_type
class GetModelTestStrategyValidationDatasetLocationDetailResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 location_type: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object_names: Optional[Sequence[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if location_type is not None:
            pulumi.set(__self__, "location_type", location_type)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object_names is not None:
            pulumi.set(__self__, "object_names", object_names)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> Optional[str]:
        return pulumi.get(self, "location_type")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="objectNames")
    def object_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_names")


@pulumi.output_type
class GetModelTrainingDatasetResult(dict):
    def __init__(__self__, *,
                 dataset_id: Optional[str] = None,
                 dataset_type: Optional[str] = None,
                 location_details: Optional[Sequence['outputs.GetModelTrainingDatasetLocationDetailResult']] = None):
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if dataset_type is not None:
            pulumi.set(__self__, "dataset_type", dataset_type)
        if location_details is not None:
            pulumi.set(__self__, "location_details", location_details)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[str]:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> Optional[str]:
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter(name="locationDetails")
    def location_details(self) -> Optional[Sequence['outputs.GetModelTrainingDatasetLocationDetailResult']]:
        return pulumi.get(self, "location_details")


@pulumi.output_type
class GetModelTrainingDatasetLocationDetailResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 location_type: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object_names: Optional[Sequence[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if location_type is not None:
            pulumi.set(__self__, "location_type", location_type)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object_names is not None:
            pulumi.set(__self__, "object_names", object_names)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> Optional[str]:
        return pulumi.get(self, "location_type")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="objectNames")
    def object_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_names")


@pulumi.output_type
class GetModelsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelsModelCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetModelsModelCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetModelsModelCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetModelsModelCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 evaluation_results: Optional[Sequence['outputs.GetModelsModelCollectionItemEvaluationResultResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 model_details: Optional[Sequence['outputs.GetModelsModelCollectionItemModelDetailResult']] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 test_strategies: Optional[Sequence['outputs.GetModelsModelCollectionItemTestStrategyResult']] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 training_datasets: Optional[Sequence['outputs.GetModelsModelCollectionItemTrainingDatasetResult']] = None,
                 version: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if evaluation_results is not None:
            pulumi.set(__self__, "evaluation_results", evaluation_results)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if model_details is not None:
            pulumi.set(__self__, "model_details", model_details)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if test_strategies is not None:
            pulumi.set(__self__, "test_strategies", test_strategies)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if training_datasets is not None:
            pulumi.set(__self__, "training_datasets", training_datasets)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="evaluationResults")
    def evaluation_results(self) -> Optional[Sequence['outputs.GetModelsModelCollectionItemEvaluationResultResult']]:
        return pulumi.get(self, "evaluation_results")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="modelDetails")
    def model_details(self) -> Optional[Sequence['outputs.GetModelsModelCollectionItemModelDetailResult']]:
        return pulumi.get(self, "model_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="testStrategies")
    def test_strategies(self) -> Optional[Sequence['outputs.GetModelsModelCollectionItemTestStrategyResult']]:
        return pulumi.get(self, "test_strategies")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="trainingDatasets")
    def training_datasets(self) -> Optional[Sequence['outputs.GetModelsModelCollectionItemTrainingDatasetResult']]:
        return pulumi.get(self, "training_datasets")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetModelsModelCollectionItemEvaluationResultResult(dict):
    def __init__(__self__, *,
                 class_metrics: Optional[Sequence['outputs.GetModelsModelCollectionItemEvaluationResultClassMetricResult']] = None,
                 confusion_matrix: Optional[str] = None,
                 entity_metrics: Optional[Sequence['outputs.GetModelsModelCollectionItemEvaluationResultEntityMetricResult']] = None,
                 labels: Optional[Sequence[str]] = None,
                 metrics: Optional[Sequence['outputs.GetModelsModelCollectionItemEvaluationResultMetricResult']] = None,
                 model_type: Optional[str] = None):
        if class_metrics is not None:
            pulumi.set(__self__, "class_metrics", class_metrics)
        if confusion_matrix is not None:
            pulumi.set(__self__, "confusion_matrix", confusion_matrix)
        if entity_metrics is not None:
            pulumi.set(__self__, "entity_metrics", entity_metrics)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)

    @property
    @pulumi.getter(name="classMetrics")
    def class_metrics(self) -> Optional[Sequence['outputs.GetModelsModelCollectionItemEvaluationResultClassMetricResult']]:
        return pulumi.get(self, "class_metrics")

    @property
    @pulumi.getter(name="confusionMatrix")
    def confusion_matrix(self) -> Optional[str]:
        return pulumi.get(self, "confusion_matrix")

    @property
    @pulumi.getter(name="entityMetrics")
    def entity_metrics(self) -> Optional[Sequence['outputs.GetModelsModelCollectionItemEvaluationResultEntityMetricResult']]:
        return pulumi.get(self, "entity_metrics")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetModelsModelCollectionItemEvaluationResultMetricResult']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[str]:
        return pulumi.get(self, "model_type")


@pulumi.output_type
class GetModelsModelCollectionItemEvaluationResultClassMetricResult(dict):
    def __init__(__self__, *,
                 f1: Optional[float] = None,
                 label: Optional[str] = None,
                 precision: Optional[float] = None,
                 recall: Optional[float] = None,
                 support: Optional[float] = None):
        if f1 is not None:
            pulumi.set(__self__, "f1", f1)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if recall is not None:
            pulumi.set(__self__, "recall", recall)
        if support is not None:
            pulumi.set(__self__, "support", support)

    @property
    @pulumi.getter
    def f1(self) -> Optional[float]:
        return pulumi.get(self, "f1")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def precision(self) -> Optional[float]:
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter
    def recall(self) -> Optional[float]:
        return pulumi.get(self, "recall")

    @property
    @pulumi.getter
    def support(self) -> Optional[float]:
        return pulumi.get(self, "support")


@pulumi.output_type
class GetModelsModelCollectionItemEvaluationResultEntityMetricResult(dict):
    def __init__(__self__, *,
                 f1: Optional[float] = None,
                 label: Optional[str] = None,
                 precision: Optional[float] = None,
                 recall: Optional[float] = None):
        if f1 is not None:
            pulumi.set(__self__, "f1", f1)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if recall is not None:
            pulumi.set(__self__, "recall", recall)

    @property
    @pulumi.getter
    def f1(self) -> Optional[float]:
        return pulumi.get(self, "f1")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def precision(self) -> Optional[float]:
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter
    def recall(self) -> Optional[float]:
        return pulumi.get(self, "recall")


@pulumi.output_type
class GetModelsModelCollectionItemEvaluationResultMetricResult(dict):
    def __init__(__self__, *,
                 accuracy: Optional[float] = None,
                 macro_f1: Optional[float] = None,
                 macro_precision: Optional[float] = None,
                 macro_recall: Optional[float] = None,
                 micro_f1: Optional[float] = None,
                 micro_precision: Optional[float] = None,
                 micro_recall: Optional[float] = None,
                 weighted_f1: Optional[float] = None,
                 weighted_precision: Optional[float] = None,
                 weighted_recall: Optional[float] = None):
        if accuracy is not None:
            pulumi.set(__self__, "accuracy", accuracy)
        if macro_f1 is not None:
            pulumi.set(__self__, "macro_f1", macro_f1)
        if macro_precision is not None:
            pulumi.set(__self__, "macro_precision", macro_precision)
        if macro_recall is not None:
            pulumi.set(__self__, "macro_recall", macro_recall)
        if micro_f1 is not None:
            pulumi.set(__self__, "micro_f1", micro_f1)
        if micro_precision is not None:
            pulumi.set(__self__, "micro_precision", micro_precision)
        if micro_recall is not None:
            pulumi.set(__self__, "micro_recall", micro_recall)
        if weighted_f1 is not None:
            pulumi.set(__self__, "weighted_f1", weighted_f1)
        if weighted_precision is not None:
            pulumi.set(__self__, "weighted_precision", weighted_precision)
        if weighted_recall is not None:
            pulumi.set(__self__, "weighted_recall", weighted_recall)

    @property
    @pulumi.getter
    def accuracy(self) -> Optional[float]:
        return pulumi.get(self, "accuracy")

    @property
    @pulumi.getter(name="macroF1")
    def macro_f1(self) -> Optional[float]:
        return pulumi.get(self, "macro_f1")

    @property
    @pulumi.getter(name="macroPrecision")
    def macro_precision(self) -> Optional[float]:
        return pulumi.get(self, "macro_precision")

    @property
    @pulumi.getter(name="macroRecall")
    def macro_recall(self) -> Optional[float]:
        return pulumi.get(self, "macro_recall")

    @property
    @pulumi.getter(name="microF1")
    def micro_f1(self) -> Optional[float]:
        return pulumi.get(self, "micro_f1")

    @property
    @pulumi.getter(name="microPrecision")
    def micro_precision(self) -> Optional[float]:
        return pulumi.get(self, "micro_precision")

    @property
    @pulumi.getter(name="microRecall")
    def micro_recall(self) -> Optional[float]:
        return pulumi.get(self, "micro_recall")

    @property
    @pulumi.getter(name="weightedF1")
    def weighted_f1(self) -> Optional[float]:
        return pulumi.get(self, "weighted_f1")

    @property
    @pulumi.getter(name="weightedPrecision")
    def weighted_precision(self) -> Optional[float]:
        return pulumi.get(self, "weighted_precision")

    @property
    @pulumi.getter(name="weightedRecall")
    def weighted_recall(self) -> Optional[float]:
        return pulumi.get(self, "weighted_recall")


@pulumi.output_type
class GetModelsModelCollectionItemModelDetailResult(dict):
    def __init__(__self__, *,
                 classification_modes: Optional[Sequence['outputs.GetModelsModelCollectionItemModelDetailClassificationModeResult']] = None,
                 language_code: Optional[str] = None,
                 model_type: Optional[str] = None,
                 version: Optional[str] = None):
        if classification_modes is not None:
            pulumi.set(__self__, "classification_modes", classification_modes)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="classificationModes")
    def classification_modes(self) -> Optional[Sequence['outputs.GetModelsModelCollectionItemModelDetailClassificationModeResult']]:
        return pulumi.get(self, "classification_modes")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[str]:
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[str]:
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetModelsModelCollectionItemModelDetailClassificationModeResult(dict):
    def __init__(__self__, *,
                 classification_mode: Optional[str] = None,
                 version: Optional[str] = None):
        if classification_mode is not None:
            pulumi.set(__self__, "classification_mode", classification_mode)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="classificationMode")
    def classification_mode(self) -> Optional[str]:
        return pulumi.get(self, "classification_mode")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetModelsModelCollectionItemTestStrategyResult(dict):
    def __init__(__self__, *,
                 strategy_type: Optional[str] = None,
                 testing_datasets: Optional[Sequence['outputs.GetModelsModelCollectionItemTestStrategyTestingDatasetResult']] = None,
                 validation_datasets: Optional[Sequence['outputs.GetModelsModelCollectionItemTestStrategyValidationDatasetResult']] = None):
        if strategy_type is not None:
            pulumi.set(__self__, "strategy_type", strategy_type)
        if testing_datasets is not None:
            pulumi.set(__self__, "testing_datasets", testing_datasets)
        if validation_datasets is not None:
            pulumi.set(__self__, "validation_datasets", validation_datasets)

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> Optional[str]:
        return pulumi.get(self, "strategy_type")

    @property
    @pulumi.getter(name="testingDatasets")
    def testing_datasets(self) -> Optional[Sequence['outputs.GetModelsModelCollectionItemTestStrategyTestingDatasetResult']]:
        return pulumi.get(self, "testing_datasets")

    @property
    @pulumi.getter(name="validationDatasets")
    def validation_datasets(self) -> Optional[Sequence['outputs.GetModelsModelCollectionItemTestStrategyValidationDatasetResult']]:
        return pulumi.get(self, "validation_datasets")


@pulumi.output_type
class GetModelsModelCollectionItemTestStrategyTestingDatasetResult(dict):
    def __init__(__self__, *,
                 dataset_id: Optional[str] = None,
                 dataset_type: Optional[str] = None,
                 location_details: Optional[Sequence['outputs.GetModelsModelCollectionItemTestStrategyTestingDatasetLocationDetailResult']] = None):
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if dataset_type is not None:
            pulumi.set(__self__, "dataset_type", dataset_type)
        if location_details is not None:
            pulumi.set(__self__, "location_details", location_details)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[str]:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> Optional[str]:
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter(name="locationDetails")
    def location_details(self) -> Optional[Sequence['outputs.GetModelsModelCollectionItemTestStrategyTestingDatasetLocationDetailResult']]:
        return pulumi.get(self, "location_details")


@pulumi.output_type
class GetModelsModelCollectionItemTestStrategyTestingDatasetLocationDetailResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 location_type: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object_names: Optional[Sequence[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if location_type is not None:
            pulumi.set(__self__, "location_type", location_type)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object_names is not None:
            pulumi.set(__self__, "object_names", object_names)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> Optional[str]:
        return pulumi.get(self, "location_type")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="objectNames")
    def object_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_names")


@pulumi.output_type
class GetModelsModelCollectionItemTestStrategyValidationDatasetResult(dict):
    def __init__(__self__, *,
                 dataset_id: Optional[str] = None,
                 dataset_type: Optional[str] = None,
                 location_details: Optional[Sequence['outputs.GetModelsModelCollectionItemTestStrategyValidationDatasetLocationDetailResult']] = None):
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if dataset_type is not None:
            pulumi.set(__self__, "dataset_type", dataset_type)
        if location_details is not None:
            pulumi.set(__self__, "location_details", location_details)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[str]:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> Optional[str]:
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter(name="locationDetails")
    def location_details(self) -> Optional[Sequence['outputs.GetModelsModelCollectionItemTestStrategyValidationDatasetLocationDetailResult']]:
        return pulumi.get(self, "location_details")


@pulumi.output_type
class GetModelsModelCollectionItemTestStrategyValidationDatasetLocationDetailResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 location_type: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object_names: Optional[Sequence[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if location_type is not None:
            pulumi.set(__self__, "location_type", location_type)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object_names is not None:
            pulumi.set(__self__, "object_names", object_names)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> Optional[str]:
        return pulumi.get(self, "location_type")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="objectNames")
    def object_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_names")


@pulumi.output_type
class GetModelsModelCollectionItemTrainingDatasetResult(dict):
    def __init__(__self__, *,
                 dataset_id: Optional[str] = None,
                 dataset_type: Optional[str] = None,
                 location_details: Optional[Sequence['outputs.GetModelsModelCollectionItemTrainingDatasetLocationDetailResult']] = None):
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if dataset_type is not None:
            pulumi.set(__self__, "dataset_type", dataset_type)
        if location_details is not None:
            pulumi.set(__self__, "location_details", location_details)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[str]:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> Optional[str]:
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter(name="locationDetails")
    def location_details(self) -> Optional[Sequence['outputs.GetModelsModelCollectionItemTrainingDatasetLocationDetailResult']]:
        return pulumi.get(self, "location_details")


@pulumi.output_type
class GetModelsModelCollectionItemTrainingDatasetLocationDetailResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 location_type: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object_names: Optional[Sequence[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if location_type is not None:
            pulumi.set(__self__, "location_type", location_type)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object_names is not None:
            pulumi.set(__self__, "object_names", object_names)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> Optional[str]:
        return pulumi.get(self, "location_type")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="objectNames")
    def object_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_names")


@pulumi.output_type
class GetProjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProjectsProjectCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetProjectsProjectCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetProjectsProjectCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProjectsProjectCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


