# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ModelTestingDatasetArgs',
    'ModelTestingDatasetArgsDict',
    'ModelTrainingDatasetArgs',
    'ModelTrainingDatasetArgsDict',
    'ModelValidationDatasetArgs',
    'ModelValidationDatasetArgsDict',
    'GetModelsFilterArgs',
    'GetModelsFilterArgsDict',
    'GetProjectsFilterArgs',
    'GetProjectsFilterArgsDict',
]

MYPY = False

if not MYPY:
    class ModelTestingDatasetArgsDict(TypedDict):
        dataset_type: pulumi.Input[_builtins.str]
        """
        Type of the Dataset.
        """
        bucket: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        dataset_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The OCID of the Data Science Labeling Dataset.
        """
        namespace_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        object: NotRequired[pulumi.Input[_builtins.str]]
        """
        The object name of the input data file.
        """
elif False:
    ModelTestingDatasetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ModelTestingDatasetArgs:
    def __init__(__self__, *,
                 dataset_type: pulumi.Input[_builtins.str],
                 bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 dataset_id: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace_name: Optional[pulumi.Input[_builtins.str]] = None,
                 object: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] dataset_type: Type of the Dataset.
        :param pulumi.Input[_builtins.str] bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param pulumi.Input[_builtins.str] dataset_id: The OCID of the Data Science Labeling Dataset.
        :param pulumi.Input[_builtins.str] namespace_name: The namespace name of the ObjectStorage bucket that contains the input data file.
        :param pulumi.Input[_builtins.str] object: The object name of the input data file.
        """
        pulumi.set(__self__, "dataset_type", dataset_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @_builtins.property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @dataset_type.setter
    def dataset_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dataset_type", value)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dataset_id", value)

    @_builtins.property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "namespace_name")

    @namespace_name.setter
    def namespace_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace_name", value)

    @_builtins.property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object", value)


if not MYPY:
    class ModelTrainingDatasetArgsDict(TypedDict):
        dataset_type: pulumi.Input[_builtins.str]
        """
        Type of the Dataset.
        """
        bucket: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        dataset_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The OCID of the Data Science Labeling Dataset.
        """
        namespace_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        object: NotRequired[pulumi.Input[_builtins.str]]
        """
        The object name of the input data file.
        """
elif False:
    ModelTrainingDatasetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ModelTrainingDatasetArgs:
    def __init__(__self__, *,
                 dataset_type: pulumi.Input[_builtins.str],
                 bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 dataset_id: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace_name: Optional[pulumi.Input[_builtins.str]] = None,
                 object: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] dataset_type: Type of the Dataset.
        :param pulumi.Input[_builtins.str] bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param pulumi.Input[_builtins.str] dataset_id: The OCID of the Data Science Labeling Dataset.
        :param pulumi.Input[_builtins.str] namespace_name: The namespace name of the ObjectStorage bucket that contains the input data file.
        :param pulumi.Input[_builtins.str] object: The object name of the input data file.
        """
        pulumi.set(__self__, "dataset_type", dataset_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @_builtins.property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @dataset_type.setter
    def dataset_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dataset_type", value)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dataset_id", value)

    @_builtins.property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "namespace_name")

    @namespace_name.setter
    def namespace_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace_name", value)

    @_builtins.property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object", value)


if not MYPY:
    class ModelValidationDatasetArgsDict(TypedDict):
        dataset_type: pulumi.Input[_builtins.str]
        """
        Type of the Dataset.
        """
        bucket: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        dataset_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The OCID of the Data Science Labeling Dataset.
        """
        namespace_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        object: NotRequired[pulumi.Input[_builtins.str]]
        """
        The object name of the input data file.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
elif False:
    ModelValidationDatasetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ModelValidationDatasetArgs:
    def __init__(__self__, *,
                 dataset_type: pulumi.Input[_builtins.str],
                 bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 dataset_id: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace_name: Optional[pulumi.Input[_builtins.str]] = None,
                 object: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] dataset_type: Type of the Dataset.
        :param pulumi.Input[_builtins.str] bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param pulumi.Input[_builtins.str] dataset_id: The OCID of the Data Science Labeling Dataset.
        :param pulumi.Input[_builtins.str] namespace_name: The namespace name of the ObjectStorage bucket that contains the input data file.
        :param pulumi.Input[_builtins.str] object: The object name of the input data file.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "dataset_type", dataset_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @_builtins.property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @dataset_type.setter
    def dataset_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dataset_type", value)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dataset_id", value)

    @_builtins.property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "namespace_name")

    @namespace_name.setter
    def namespace_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace_name", value)

    @_builtins.property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The object name of the input data file.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object", value)


if not MYPY:
    class GetModelsFilterArgsDict(TypedDict):
        name: _builtins.str
        values: Sequence[_builtins.str]
        regex: NotRequired[_builtins.bool]
elif False:
    GetModelsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetModelsFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetProjectsFilterArgsDict(TypedDict):
        name: _builtins.str
        values: Sequence[_builtins.str]
        regex: NotRequired[_builtins.bool]
elif False:
    GetProjectsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetProjectsFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "regex", value)


