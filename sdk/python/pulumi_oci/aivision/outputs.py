# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ModelTestingDataset',
    'ModelTrainingDataset',
    'ModelValidationDataset',
    'GetModelTestingDatasetResult',
    'GetModelTrainingDatasetResult',
    'GetModelValidationDatasetResult',
    'GetModelsFilterResult',
    'GetModelsModelCollectionResult',
    'GetModelsModelCollectionItemResult',
    'GetModelsModelCollectionItemTestingDatasetResult',
    'GetModelsModelCollectionItemTrainingDatasetResult',
    'GetModelsModelCollectionItemValidationDatasetResult',
    'GetProjectsFilterResult',
    'GetProjectsProjectCollectionResult',
    'GetProjectsProjectCollectionItemResult',
]

@pulumi.output_type
class ModelTestingDataset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datasetType":
            suggest = "dataset_type"
        elif key == "datasetId":
            suggest = "dataset_id"
        elif key == "namespaceName":
            suggest = "namespace_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelTestingDataset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelTestingDataset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelTestingDataset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset_type: str,
                 bucket: Optional[str] = None,
                 dataset_id: Optional[str] = None,
                 namespace_name: Optional[str] = None,
                 object: Optional[str] = None):
        """
        :param str dataset_type: Type of the Dataset.
        :param str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param str namespace_name: The namespace name of the ObjectStorage bucket that contains the input data file.
        :param str object: The object name of the input data file.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ModelTestingDataset._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset_type=dataset_type,
            bucket=bucket,
            dataset_id=dataset_id,
            namespace_name=namespace_name,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset_type: str,
             bucket: Optional[str] = None,
             dataset_id: Optional[str] = None,
             namespace_name: Optional[str] = None,
             object: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datasetType' in kwargs:
            dataset_type = kwargs['datasetType']
        if 'datasetId' in kwargs:
            dataset_id = kwargs['datasetId']
        if 'namespaceName' in kwargs:
            namespace_name = kwargs['namespaceName']

        _setter("dataset_type", dataset_type)
        if bucket is not None:
            _setter("bucket", bucket)
        if dataset_id is not None:
            _setter("dataset_id", dataset_id)
        if namespace_name is not None:
            _setter("namespace_name", namespace_name)
        if object is not None:
            _setter("object", object)

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[str]:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[str]:
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        """
        The object name of the input data file.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class ModelTrainingDataset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datasetType":
            suggest = "dataset_type"
        elif key == "datasetId":
            suggest = "dataset_id"
        elif key == "namespaceName":
            suggest = "namespace_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelTrainingDataset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelTrainingDataset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelTrainingDataset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset_type: str,
                 bucket: Optional[str] = None,
                 dataset_id: Optional[str] = None,
                 namespace_name: Optional[str] = None,
                 object: Optional[str] = None):
        """
        :param str dataset_type: Type of the Dataset.
        :param str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param str namespace_name: The namespace name of the ObjectStorage bucket that contains the input data file.
        :param str object: The object name of the input data file.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ModelTrainingDataset._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset_type=dataset_type,
            bucket=bucket,
            dataset_id=dataset_id,
            namespace_name=namespace_name,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset_type: str,
             bucket: Optional[str] = None,
             dataset_id: Optional[str] = None,
             namespace_name: Optional[str] = None,
             object: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datasetType' in kwargs:
            dataset_type = kwargs['datasetType']
        if 'datasetId' in kwargs:
            dataset_id = kwargs['datasetId']
        if 'namespaceName' in kwargs:
            namespace_name = kwargs['namespaceName']

        _setter("dataset_type", dataset_type)
        if bucket is not None:
            _setter("bucket", bucket)
        if dataset_id is not None:
            _setter("dataset_id", dataset_id)
        if namespace_name is not None:
            _setter("namespace_name", namespace_name)
        if object is not None:
            _setter("object", object)

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[str]:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[str]:
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        """
        The object name of the input data file.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class ModelValidationDataset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datasetType":
            suggest = "dataset_type"
        elif key == "datasetId":
            suggest = "dataset_id"
        elif key == "namespaceName":
            suggest = "namespace_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelValidationDataset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelValidationDataset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelValidationDataset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset_type: str,
                 bucket: Optional[str] = None,
                 dataset_id: Optional[str] = None,
                 namespace_name: Optional[str] = None,
                 object: Optional[str] = None):
        """
        :param str dataset_type: Type of the Dataset.
        :param str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param str namespace_name: The namespace name of the ObjectStorage bucket that contains the input data file.
        :param str object: The object name of the input data file.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ModelValidationDataset._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset_type=dataset_type,
            bucket=bucket,
            dataset_id=dataset_id,
            namespace_name=namespace_name,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset_type: str,
             bucket: Optional[str] = None,
             dataset_id: Optional[str] = None,
             namespace_name: Optional[str] = None,
             object: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datasetType' in kwargs:
            dataset_type = kwargs['datasetType']
        if 'datasetId' in kwargs:
            dataset_id = kwargs['datasetId']
        if 'namespaceName' in kwargs:
            namespace_name = kwargs['namespaceName']

        _setter("dataset_type", dataset_type)
        if bucket is not None:
            _setter("bucket", bucket)
        if dataset_id is not None:
            _setter("dataset_id", dataset_id)
        if namespace_name is not None:
            _setter("namespace_name", namespace_name)
        if object is not None:
            _setter("object", object)

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[str]:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[str]:
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        """
        The object name of the input data file.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelTestingDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 dataset_id: str,
                 dataset_type: str,
                 namespace_name: str,
                 object: str):
        """
        :param str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param str dataset_type: Type of the Dataset.
        :param str namespace_name: The namespace name of the ObjectStorage bucket that contains the input data file.
        :param str object: The object name of the input data file.
        """
        GetModelTestingDatasetResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            dataset_id=dataset_id,
            dataset_type=dataset_type,
            namespace_name=namespace_name,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: str,
             dataset_id: str,
             dataset_type: str,
             namespace_name: str,
             object: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datasetId' in kwargs:
            dataset_id = kwargs['datasetId']
        if 'datasetType' in kwargs:
            dataset_type = kwargs['datasetType']
        if 'namespaceName' in kwargs:
            namespace_name = kwargs['namespaceName']

        _setter("bucket", bucket)
        _setter("dataset_id", dataset_id)
        _setter("dataset_type", dataset_type)
        _setter("namespace_name", namespace_name)
        _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelTrainingDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 dataset_id: str,
                 dataset_type: str,
                 namespace_name: str,
                 object: str):
        """
        :param str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param str dataset_type: Type of the Dataset.
        :param str namespace_name: The namespace name of the ObjectStorage bucket that contains the input data file.
        :param str object: The object name of the input data file.
        """
        GetModelTrainingDatasetResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            dataset_id=dataset_id,
            dataset_type=dataset_type,
            namespace_name=namespace_name,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: str,
             dataset_id: str,
             dataset_type: str,
             namespace_name: str,
             object: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datasetId' in kwargs:
            dataset_id = kwargs['datasetId']
        if 'datasetType' in kwargs:
            dataset_type = kwargs['datasetType']
        if 'namespaceName' in kwargs:
            namespace_name = kwargs['namespaceName']

        _setter("bucket", bucket)
        _setter("dataset_id", dataset_id)
        _setter("dataset_type", dataset_type)
        _setter("namespace_name", namespace_name)
        _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelValidationDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 dataset_id: str,
                 dataset_type: str,
                 namespace_name: str,
                 object: str):
        """
        :param str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param str dataset_type: Type of the Dataset.
        :param str namespace_name: The namespace name of the ObjectStorage bucket that contains the input data file.
        :param str object: The object name of the input data file.
        """
        GetModelValidationDatasetResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            dataset_id=dataset_id,
            dataset_type=dataset_type,
            namespace_name=namespace_name,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: str,
             dataset_id: str,
             dataset_type: str,
             namespace_name: str,
             object: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datasetId' in kwargs:
            dataset_id = kwargs['datasetId']
        if 'datasetType' in kwargs:
            dataset_type = kwargs['datasetType']
        if 'namespaceName' in kwargs:
            namespace_name = kwargs['namespaceName']

        _setter("bucket", bucket)
        _setter("dataset_id", dataset_id)
        _setter("dataset_type", dataset_type)
        _setter("namespace_name", namespace_name)
        _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetModelsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelsModelCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetModelsModelCollectionItemResult']):
        GetModelsModelCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetModelsModelCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetModelsModelCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetModelsModelCollectionItemResult(dict):
    def __init__(__self__, *,
                 average_precision: float,
                 compartment_id: str,
                 confidence_threshold: float,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_quick_mode: bool,
                 lifecycle_details: str,
                 max_training_duration_in_hours: float,
                 metrics: str,
                 model_type: str,
                 model_version: str,
                 precision: float,
                 project_id: str,
                 recall: float,
                 state: str,
                 system_tags: Mapping[str, Any],
                 test_image_count: int,
                 testing_datasets: Sequence['outputs.GetModelsModelCollectionItemTestingDatasetResult'],
                 time_created: str,
                 time_updated: str,
                 total_image_count: int,
                 trained_duration_in_hours: float,
                 training_datasets: Sequence['outputs.GetModelsModelCollectionItemTrainingDatasetResult'],
                 validation_datasets: Sequence['outputs.GetModelsModelCollectionItemValidationDatasetResult']):
        """
        :param float average_precision: Average precision of the trained model
        :param str compartment_id: The ID of the compartment in which to list resources.
        :param float confidence_threshold: Confidence ratio of the calculation
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str description: A short description of the model.
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: unique Model identifier
        :param bool is_quick_mode: If It's true, Training is set for recommended epochs needed for quick training.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param float max_training_duration_in_hours: The maximum duration in hours for which the training will run.
        :param str metrics: Complete Training Metrics for successful trained model
        :param str model_type: Type of the Model.
        :param str model_version: The version of the model
        :param float precision: Precision of the trained model
        :param str project_id: The ID of the project for which to list the objects.
        :param float recall: Recall of the trained model
        :param str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param int test_image_count: Total number of testing Images
        :param Sequence['GetModelsModelCollectionItemTestingDatasetArgs'] testing_datasets: The base entity for a Dataset, which is the input for Model creation.
        :param str time_created: The time the Model was created. An RFC3339 formatted datetime string
        :param str time_updated: The time the Model was updated. An RFC3339 formatted datetime string
        :param int total_image_count: Total number of training Images
        :param float trained_duration_in_hours: Total hours actually used for training
        :param Sequence['GetModelsModelCollectionItemTrainingDatasetArgs'] training_datasets: The base entity for a Dataset, which is the input for Model creation.
        :param Sequence['GetModelsModelCollectionItemValidationDatasetArgs'] validation_datasets: The base entity for a Dataset, which is the input for Model creation.
        """
        GetModelsModelCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            average_precision=average_precision,
            compartment_id=compartment_id,
            confidence_threshold=confidence_threshold,
            defined_tags=defined_tags,
            description=description,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            is_quick_mode=is_quick_mode,
            lifecycle_details=lifecycle_details,
            max_training_duration_in_hours=max_training_duration_in_hours,
            metrics=metrics,
            model_type=model_type,
            model_version=model_version,
            precision=precision,
            project_id=project_id,
            recall=recall,
            state=state,
            system_tags=system_tags,
            test_image_count=test_image_count,
            testing_datasets=testing_datasets,
            time_created=time_created,
            time_updated=time_updated,
            total_image_count=total_image_count,
            trained_duration_in_hours=trained_duration_in_hours,
            training_datasets=training_datasets,
            validation_datasets=validation_datasets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             average_precision: float,
             compartment_id: str,
             confidence_threshold: float,
             defined_tags: Mapping[str, Any],
             description: str,
             display_name: str,
             freeform_tags: Mapping[str, Any],
             id: str,
             is_quick_mode: bool,
             lifecycle_details: str,
             max_training_duration_in_hours: float,
             metrics: str,
             model_type: str,
             model_version: str,
             precision: float,
             project_id: str,
             recall: float,
             state: str,
             system_tags: Mapping[str, Any],
             test_image_count: int,
             testing_datasets: Sequence['outputs.GetModelsModelCollectionItemTestingDatasetResult'],
             time_created: str,
             time_updated: str,
             total_image_count: int,
             trained_duration_in_hours: float,
             training_datasets: Sequence['outputs.GetModelsModelCollectionItemTrainingDatasetResult'],
             validation_datasets: Sequence['outputs.GetModelsModelCollectionItemValidationDatasetResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'averagePrecision' in kwargs:
            average_precision = kwargs['averagePrecision']
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'confidenceThreshold' in kwargs:
            confidence_threshold = kwargs['confidenceThreshold']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'isQuickMode' in kwargs:
            is_quick_mode = kwargs['isQuickMode']
        if 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if 'maxTrainingDurationInHours' in kwargs:
            max_training_duration_in_hours = kwargs['maxTrainingDurationInHours']
        if 'modelType' in kwargs:
            model_type = kwargs['modelType']
        if 'modelVersion' in kwargs:
            model_version = kwargs['modelVersion']
        if 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'testImageCount' in kwargs:
            test_image_count = kwargs['testImageCount']
        if 'testingDatasets' in kwargs:
            testing_datasets = kwargs['testingDatasets']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if 'totalImageCount' in kwargs:
            total_image_count = kwargs['totalImageCount']
        if 'trainedDurationInHours' in kwargs:
            trained_duration_in_hours = kwargs['trainedDurationInHours']
        if 'trainingDatasets' in kwargs:
            training_datasets = kwargs['trainingDatasets']
        if 'validationDatasets' in kwargs:
            validation_datasets = kwargs['validationDatasets']

        _setter("average_precision", average_precision)
        _setter("compartment_id", compartment_id)
        _setter("confidence_threshold", confidence_threshold)
        _setter("defined_tags", defined_tags)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("is_quick_mode", is_quick_mode)
        _setter("lifecycle_details", lifecycle_details)
        _setter("max_training_duration_in_hours", max_training_duration_in_hours)
        _setter("metrics", metrics)
        _setter("model_type", model_type)
        _setter("model_version", model_version)
        _setter("precision", precision)
        _setter("project_id", project_id)
        _setter("recall", recall)
        _setter("state", state)
        _setter("system_tags", system_tags)
        _setter("test_image_count", test_image_count)
        _setter("testing_datasets", testing_datasets)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)
        _setter("total_image_count", total_image_count)
        _setter("trained_duration_in_hours", trained_duration_in_hours)
        _setter("training_datasets", training_datasets)
        _setter("validation_datasets", validation_datasets)

    @property
    @pulumi.getter(name="averagePrecision")
    def average_precision(self) -> float:
        """
        Average precision of the trained model
        """
        return pulumi.get(self, "average_precision")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="confidenceThreshold")
    def confidence_threshold(self) -> float:
        """
        Confidence ratio of the calculation
        """
        return pulumi.get(self, "confidence_threshold")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        unique Model identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isQuickMode")
    def is_quick_mode(self) -> bool:
        """
        If It's true, Training is set for recommended epochs needed for quick training.
        """
        return pulumi.get(self, "is_quick_mode")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="maxTrainingDurationInHours")
    def max_training_duration_in_hours(self) -> float:
        """
        The maximum duration in hours for which the training will run.
        """
        return pulumi.get(self, "max_training_duration_in_hours")

    @property
    @pulumi.getter
    def metrics(self) -> str:
        """
        Complete Training Metrics for successful trained model
        """
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        Type of the Model.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The version of the model
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def precision(self) -> float:
        """
        Precision of the trained model
        """
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The ID of the project for which to list the objects.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def recall(self) -> float:
        """
        Recall of the trained model
        """
        return pulumi.get(self, "recall")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources their lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="testImageCount")
    def test_image_count(self) -> int:
        """
        Total number of testing Images
        """
        return pulumi.get(self, "test_image_count")

    @property
    @pulumi.getter(name="testingDatasets")
    def testing_datasets(self) -> Sequence['outputs.GetModelsModelCollectionItemTestingDatasetResult']:
        """
        The base entity for a Dataset, which is the input for Model creation.
        """
        return pulumi.get(self, "testing_datasets")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the Model was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the Model was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="totalImageCount")
    def total_image_count(self) -> int:
        """
        Total number of training Images
        """
        return pulumi.get(self, "total_image_count")

    @property
    @pulumi.getter(name="trainedDurationInHours")
    def trained_duration_in_hours(self) -> float:
        """
        Total hours actually used for training
        """
        return pulumi.get(self, "trained_duration_in_hours")

    @property
    @pulumi.getter(name="trainingDatasets")
    def training_datasets(self) -> Sequence['outputs.GetModelsModelCollectionItemTrainingDatasetResult']:
        """
        The base entity for a Dataset, which is the input for Model creation.
        """
        return pulumi.get(self, "training_datasets")

    @property
    @pulumi.getter(name="validationDatasets")
    def validation_datasets(self) -> Sequence['outputs.GetModelsModelCollectionItemValidationDatasetResult']:
        """
        The base entity for a Dataset, which is the input for Model creation.
        """
        return pulumi.get(self, "validation_datasets")


@pulumi.output_type
class GetModelsModelCollectionItemTestingDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 dataset_id: str,
                 dataset_type: str,
                 namespace_name: str,
                 object: str):
        """
        :param str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param str dataset_type: Type of the Dataset.
        :param str object: The object name of the input data file.
        """
        GetModelsModelCollectionItemTestingDatasetResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            dataset_id=dataset_id,
            dataset_type=dataset_type,
            namespace_name=namespace_name,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: str,
             dataset_id: str,
             dataset_type: str,
             namespace_name: str,
             object: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datasetId' in kwargs:
            dataset_id = kwargs['datasetId']
        if 'datasetType' in kwargs:
            dataset_type = kwargs['datasetType']
        if 'namespaceName' in kwargs:
            namespace_name = kwargs['namespaceName']

        _setter("bucket", bucket)
        _setter("dataset_id", dataset_id)
        _setter("dataset_type", dataset_type)
        _setter("namespace_name", namespace_name)
        _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelsModelCollectionItemTrainingDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 dataset_id: str,
                 dataset_type: str,
                 namespace_name: str,
                 object: str):
        """
        :param str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param str dataset_type: Type of the Dataset.
        :param str object: The object name of the input data file.
        """
        GetModelsModelCollectionItemTrainingDatasetResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            dataset_id=dataset_id,
            dataset_type=dataset_type,
            namespace_name=namespace_name,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: str,
             dataset_id: str,
             dataset_type: str,
             namespace_name: str,
             object: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datasetId' in kwargs:
            dataset_id = kwargs['datasetId']
        if 'datasetType' in kwargs:
            dataset_type = kwargs['datasetType']
        if 'namespaceName' in kwargs:
            namespace_name = kwargs['namespaceName']

        _setter("bucket", bucket)
        _setter("dataset_id", dataset_id)
        _setter("dataset_type", dataset_type)
        _setter("namespace_name", namespace_name)
        _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelsModelCollectionItemValidationDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 dataset_id: str,
                 dataset_type: str,
                 namespace_name: str,
                 object: str):
        """
        :param str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param str dataset_type: Type of the Dataset.
        :param str object: The object name of the input data file.
        """
        GetModelsModelCollectionItemValidationDatasetResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            dataset_id=dataset_id,
            dataset_type=dataset_type,
            namespace_name=namespace_name,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: str,
             dataset_id: str,
             dataset_type: str,
             namespace_name: str,
             object: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'datasetId' in kwargs:
            dataset_id = kwargs['datasetId']
        if 'datasetType' in kwargs:
            dataset_type = kwargs['datasetType']
        if 'namespaceName' in kwargs:
            namespace_name = kwargs['namespaceName']

        _setter("bucket", bucket)
        _setter("dataset_id", dataset_id)
        _setter("dataset_type", dataset_type)
        _setter("namespace_name", namespace_name)
        _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetProjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetProjectsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProjectsProjectCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetProjectsProjectCollectionItemResult']):
        GetProjectsProjectCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetProjectsProjectCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetProjectsProjectCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProjectsProjectCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The ID of the compartment in which to list resources.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str description: A short description of the project.
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: unique Project identifier
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The time the Project was created. An RFC3339 formatted datetime string
        :param str time_updated: The time the Project was updated. An RFC3339 formatted datetime string
        """
        GetProjectsProjectCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            description=description,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            lifecycle_details=lifecycle_details,
            state=state,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             defined_tags: Mapping[str, Any],
             description: str,
             display_name: str,
             freeform_tags: Mapping[str, Any],
             id: str,
             lifecycle_details: str,
             state: str,
             system_tags: Mapping[str, Any],
             time_created: str,
             time_updated: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']

        _setter("compartment_id", compartment_id)
        _setter("defined_tags", defined_tags)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("state", state)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the project.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        unique Project identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources their lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the Project was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the Project was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


