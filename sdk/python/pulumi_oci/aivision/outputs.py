# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ModelTestingDataset',
    'ModelTrainingDataset',
    'ModelValidationDataset',
    'GetModelTestingDatasetResult',
    'GetModelTrainingDatasetResult',
    'GetModelValidationDatasetResult',
    'GetModelsFilterResult',
    'GetModelsModelCollectionResult',
    'GetModelsModelCollectionItemResult',
    'GetModelsModelCollectionItemTestingDatasetResult',
    'GetModelsModelCollectionItemTrainingDatasetResult',
    'GetModelsModelCollectionItemValidationDatasetResult',
    'GetProjectsFilterResult',
    'GetProjectsProjectCollectionResult',
    'GetProjectsProjectCollectionItemResult',
]

@pulumi.output_type
class ModelTestingDataset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datasetType":
            suggest = "dataset_type"
        elif key == "datasetId":
            suggest = "dataset_id"
        elif key == "namespaceName":
            suggest = "namespace_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelTestingDataset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelTestingDataset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelTestingDataset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset_type: _builtins.str,
                 bucket: Optional[_builtins.str] = None,
                 dataset_id: Optional[_builtins.str] = None,
                 namespace_name: Optional[_builtins.str] = None,
                 object: Optional[_builtins.str] = None):
        """
        :param _builtins.str dataset_type: Type of the Dataset.
        :param _builtins.str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param _builtins.str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param _builtins.str namespace_name: The namespace name of the ObjectStorage bucket that contains the input data file.
        :param _builtins.str object: The object name of the input data file.
        """
        pulumi.set(__self__, "dataset_type", dataset_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @_builtins.property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> _builtins.str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[_builtins.str]:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @_builtins.property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[_builtins.str]:
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "namespace_name")

    @_builtins.property
    @pulumi.getter
    def object(self) -> Optional[_builtins.str]:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class ModelTrainingDataset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datasetType":
            suggest = "dataset_type"
        elif key == "datasetId":
            suggest = "dataset_id"
        elif key == "namespaceName":
            suggest = "namespace_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelTrainingDataset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelTrainingDataset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelTrainingDataset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset_type: _builtins.str,
                 bucket: Optional[_builtins.str] = None,
                 dataset_id: Optional[_builtins.str] = None,
                 namespace_name: Optional[_builtins.str] = None,
                 object: Optional[_builtins.str] = None):
        """
        :param _builtins.str dataset_type: Type of the Dataset.
        :param _builtins.str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param _builtins.str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param _builtins.str namespace_name: The namespace name of the ObjectStorage bucket that contains the input data file.
        :param _builtins.str object: The object name of the input data file.
        """
        pulumi.set(__self__, "dataset_type", dataset_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @_builtins.property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> _builtins.str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[_builtins.str]:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @_builtins.property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[_builtins.str]:
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "namespace_name")

    @_builtins.property
    @pulumi.getter
    def object(self) -> Optional[_builtins.str]:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class ModelValidationDataset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datasetType":
            suggest = "dataset_type"
        elif key == "datasetId":
            suggest = "dataset_id"
        elif key == "namespaceName":
            suggest = "namespace_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelValidationDataset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelValidationDataset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelValidationDataset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset_type: _builtins.str,
                 bucket: Optional[_builtins.str] = None,
                 dataset_id: Optional[_builtins.str] = None,
                 namespace_name: Optional[_builtins.str] = None,
                 object: Optional[_builtins.str] = None):
        """
        :param _builtins.str dataset_type: Type of the Dataset.
        :param _builtins.str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param _builtins.str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param _builtins.str namespace_name: The namespace name of the ObjectStorage bucket that contains the input data file.
        :param _builtins.str object: The object name of the input data file.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "dataset_type", dataset_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @_builtins.property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> _builtins.str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[_builtins.str]:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @_builtins.property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[_builtins.str]:
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "namespace_name")

    @_builtins.property
    @pulumi.getter
    def object(self) -> Optional[_builtins.str]:
        """
        The object name of the input data file.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelTestingDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 dataset_id: _builtins.str,
                 dataset_type: _builtins.str,
                 namespace_name: _builtins.str,
                 object: _builtins.str):
        """
        :param _builtins.str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param _builtins.str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param _builtins.str dataset_type: Type of the Dataset.
        :param _builtins.str namespace_name: The namespace name of the ObjectStorage bucket that contains the input data file.
        :param _builtins.str object: The object name of the input data file.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "dataset_type", dataset_type)
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "object", object)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> _builtins.str:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @_builtins.property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> _builtins.str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @_builtins.property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> _builtins.str:
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "namespace_name")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelTrainingDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 dataset_id: _builtins.str,
                 dataset_type: _builtins.str,
                 namespace_name: _builtins.str,
                 object: _builtins.str):
        """
        :param _builtins.str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param _builtins.str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param _builtins.str dataset_type: Type of the Dataset.
        :param _builtins.str namespace_name: The namespace name of the ObjectStorage bucket that contains the input data file.
        :param _builtins.str object: The object name of the input data file.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "dataset_type", dataset_type)
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "object", object)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> _builtins.str:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @_builtins.property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> _builtins.str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @_builtins.property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> _builtins.str:
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "namespace_name")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelValidationDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 dataset_id: _builtins.str,
                 dataset_type: _builtins.str,
                 namespace_name: _builtins.str,
                 object: _builtins.str):
        """
        :param _builtins.str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param _builtins.str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param _builtins.str dataset_type: Type of the Dataset.
        :param _builtins.str namespace_name: The namespace name of the ObjectStorage bucket that contains the input data file.
        :param _builtins.str object: The object name of the input data file.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "dataset_type", dataset_type)
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "object", object)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> _builtins.str:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @_builtins.property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> _builtins.str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @_builtins.property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> _builtins.str:
        """
        The namespace name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "namespace_name")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelsModelCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetModelsModelCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetModelsModelCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetModelsModelCollectionItemResult(dict):
    def __init__(__self__, *,
                 average_precision: _builtins.float,
                 compartment_id: _builtins.str,
                 confidence_threshold: _builtins.float,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 is_quick_mode: _builtins.bool,
                 lifecycle_details: _builtins.str,
                 max_training_duration_in_hours: _builtins.float,
                 metrics: _builtins.str,
                 model_type: _builtins.str,
                 model_version: _builtins.str,
                 precision: _builtins.float,
                 project_id: _builtins.str,
                 recall: _builtins.float,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 test_image_count: _builtins.int,
                 testing_datasets: Sequence['outputs.GetModelsModelCollectionItemTestingDatasetResult'],
                 time_created: _builtins.str,
                 time_updated: _builtins.str,
                 total_image_count: _builtins.int,
                 trained_duration_in_hours: _builtins.float,
                 training_datasets: Sequence['outputs.GetModelsModelCollectionItemTrainingDatasetResult'],
                 validation_datasets: Sequence['outputs.GetModelsModelCollectionItemValidationDatasetResult']):
        """
        :param _builtins.float average_precision: Average precision of the trained model
        :param _builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param _builtins.float confidence_threshold: Confidence ratio of the calculation
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param _builtins.str description: A short description of the model.
        :param _builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: unique Model identifier
        :param _builtins.bool is_quick_mode: If It's true, Training is set for recommended epochs needed for quick training.
        :param _builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param _builtins.float max_training_duration_in_hours: The maximum duration in hours for which the training will run.
        :param _builtins.str metrics: Complete Training Metrics for successful trained model
        :param _builtins.str model_type: Type of the Model.
        :param _builtins.str model_version: The version of the model
        :param _builtins.float precision: Precision of the trained model
        :param _builtins.str project_id: The ID of the project for which to list the objects.
        :param _builtins.float recall: Recall of the trained model
        :param _builtins.str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
        :param Mapping[str, _builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.int test_image_count: Total number of testing Images
        :param Sequence['GetModelsModelCollectionItemTestingDatasetArgs'] testing_datasets: The base entity for a Dataset, which is the input for Model creation.
        :param _builtins.str time_created: The time the Model was created. An RFC3339 formatted datetime string
        :param _builtins.str time_updated: The time the Model was updated. An RFC3339 formatted datetime string
        :param _builtins.int total_image_count: Total number of training Images
        :param _builtins.float trained_duration_in_hours: Total hours actually used for training
        :param Sequence['GetModelsModelCollectionItemTrainingDatasetArgs'] training_datasets: The base entity for a Dataset, which is the input for Model creation.
        :param Sequence['GetModelsModelCollectionItemValidationDatasetArgs'] validation_datasets: The base entity for a Dataset, which is the input for Model creation.
        """
        pulumi.set(__self__, "average_precision", average_precision)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "confidence_threshold", confidence_threshold)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_quick_mode", is_quick_mode)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "max_training_duration_in_hours", max_training_duration_in_hours)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "precision", precision)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "recall", recall)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "test_image_count", test_image_count)
        pulumi.set(__self__, "testing_datasets", testing_datasets)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "total_image_count", total_image_count)
        pulumi.set(__self__, "trained_duration_in_hours", trained_duration_in_hours)
        pulumi.set(__self__, "training_datasets", training_datasets)
        pulumi.set(__self__, "validation_datasets", validation_datasets)

    @_builtins.property
    @pulumi.getter(name="averagePrecision")
    def average_precision(self) -> _builtins.float:
        """
        Average precision of the trained model
        """
        return pulumi.get(self, "average_precision")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="confidenceThreshold")
    def confidence_threshold(self) -> _builtins.float:
        """
        Confidence ratio of the calculation
        """
        return pulumi.get(self, "confidence_threshold")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        unique Model identifier
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isQuickMode")
    def is_quick_mode(self) -> _builtins.bool:
        """
        If It's true, Training is set for recommended epochs needed for quick training.
        """
        return pulumi.get(self, "is_quick_mode")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="maxTrainingDurationInHours")
    def max_training_duration_in_hours(self) -> _builtins.float:
        """
        The maximum duration in hours for which the training will run.
        """
        return pulumi.get(self, "max_training_duration_in_hours")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> _builtins.str:
        """
        Complete Training Metrics for successful trained model
        """
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter(name="modelType")
    def model_type(self) -> _builtins.str:
        """
        Type of the Model.
        """
        return pulumi.get(self, "model_type")

    @_builtins.property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> _builtins.str:
        """
        The version of the model
        """
        return pulumi.get(self, "model_version")

    @_builtins.property
    @pulumi.getter
    def precision(self) -> _builtins.float:
        """
        Precision of the trained model
        """
        return pulumi.get(self, "precision")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        The ID of the project for which to list the objects.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def recall(self) -> _builtins.float:
        """
        Recall of the trained model
        """
        return pulumi.get(self, "recall")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only resources their lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="testImageCount")
    def test_image_count(self) -> _builtins.int:
        """
        Total number of testing Images
        """
        return pulumi.get(self, "test_image_count")

    @_builtins.property
    @pulumi.getter(name="testingDatasets")
    def testing_datasets(self) -> Sequence['outputs.GetModelsModelCollectionItemTestingDatasetResult']:
        """
        The base entity for a Dataset, which is the input for Model creation.
        """
        return pulumi.get(self, "testing_datasets")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time the Model was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The time the Model was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="totalImageCount")
    def total_image_count(self) -> _builtins.int:
        """
        Total number of training Images
        """
        return pulumi.get(self, "total_image_count")

    @_builtins.property
    @pulumi.getter(name="trainedDurationInHours")
    def trained_duration_in_hours(self) -> _builtins.float:
        """
        Total hours actually used for training
        """
        return pulumi.get(self, "trained_duration_in_hours")

    @_builtins.property
    @pulumi.getter(name="trainingDatasets")
    def training_datasets(self) -> Sequence['outputs.GetModelsModelCollectionItemTrainingDatasetResult']:
        """
        The base entity for a Dataset, which is the input for Model creation.
        """
        return pulumi.get(self, "training_datasets")

    @_builtins.property
    @pulumi.getter(name="validationDatasets")
    def validation_datasets(self) -> Sequence['outputs.GetModelsModelCollectionItemValidationDatasetResult']:
        """
        The base entity for a Dataset, which is the input for Model creation.
        """
        return pulumi.get(self, "validation_datasets")


@pulumi.output_type
class GetModelsModelCollectionItemTestingDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 dataset_id: _builtins.str,
                 dataset_type: _builtins.str,
                 namespace_name: _builtins.str,
                 object: _builtins.str):
        """
        :param _builtins.str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param _builtins.str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param _builtins.str dataset_type: Type of the Dataset.
        :param _builtins.str object: The object name of the input data file.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "dataset_type", dataset_type)
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "object", object)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> _builtins.str:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @_builtins.property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> _builtins.str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @_builtins.property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> _builtins.str:
        return pulumi.get(self, "namespace_name")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelsModelCollectionItemTrainingDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 dataset_id: _builtins.str,
                 dataset_type: _builtins.str,
                 namespace_name: _builtins.str,
                 object: _builtins.str):
        """
        :param _builtins.str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param _builtins.str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param _builtins.str dataset_type: Type of the Dataset.
        :param _builtins.str object: The object name of the input data file.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "dataset_type", dataset_type)
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "object", object)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> _builtins.str:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @_builtins.property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> _builtins.str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @_builtins.property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> _builtins.str:
        return pulumi.get(self, "namespace_name")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetModelsModelCollectionItemValidationDatasetResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 dataset_id: _builtins.str,
                 dataset_type: _builtins.str,
                 namespace_name: _builtins.str,
                 object: _builtins.str):
        """
        :param _builtins.str bucket: The name of the ObjectStorage bucket that contains the input data file.
        :param _builtins.str dataset_id: The OCID of the Data Science Labeling Dataset.
        :param _builtins.str dataset_type: Type of the Dataset.
        :param _builtins.str object: The object name of the input data file.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "dataset_type", dataset_type)
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "object", object)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The name of the ObjectStorage bucket that contains the input data file.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> _builtins.str:
        """
        The OCID of the Data Science Labeling Dataset.
        """
        return pulumi.get(self, "dataset_id")

    @_builtins.property
    @pulumi.getter(name="datasetType")
    def dataset_type(self) -> _builtins.str:
        """
        Type of the Dataset.
        """
        return pulumi.get(self, "dataset_type")

    @_builtins.property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> _builtins.str:
        return pulumi.get(self, "namespace_name")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        The object name of the input data file.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetProjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProjectsProjectCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetProjectsProjectCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetProjectsProjectCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProjectsProjectCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param _builtins.str description: A short description of the project.
        :param _builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: unique Project identifier
        :param _builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param _builtins.str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
        :param Mapping[str, _builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The time the Project was created. An RFC3339 formatted datetime string
        :param _builtins.str time_updated: The time the Project was updated. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A short description of the project.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        unique Project identifier
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only resources their lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time the Project was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The time the Project was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


