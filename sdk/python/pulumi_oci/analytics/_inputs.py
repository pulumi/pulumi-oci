# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AnalyticsInstanceCapacityArgs',
    'AnalyticsInstanceCapacityArgsDict',
    'AnalyticsInstanceNetworkEndpointDetailsArgs',
    'AnalyticsInstanceNetworkEndpointDetailsArgsDict',
    'AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcnArgs',
    'AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcnArgsDict',
    'AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgs',
    'AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgsDict',
    'AnalyticsInstancePrivateAccessChannelPrivateSourceScanHostArgs',
    'AnalyticsInstancePrivateAccessChannelPrivateSourceScanHostArgsDict',
    'GetAnalyticsInstancesFilterArgs',
    'GetAnalyticsInstancesFilterArgsDict',
]

MYPY = False

if not MYPY:
    class AnalyticsInstanceCapacityArgsDict(TypedDict):
        capacity_type: pulumi.Input[_builtins.str]
        """
        The capacity model to use. Accepted values are: OLPU_COUNT, USER_COUNT
        """
        capacity_value: pulumi.Input[_builtins.int]
        """
        (Updatable) The capacity value selected, either the number of OCPUs (OLPU_COUNT) or the number of users (USER_COUNT). This parameter affects the number of OCPUs, amount of memory, and other resources allocated to the instance.
        """
elif False:
    AnalyticsInstanceCapacityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyticsInstanceCapacityArgs:
    def __init__(__self__, *,
                 capacity_type: pulumi.Input[_builtins.str],
                 capacity_value: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.str] capacity_type: The capacity model to use. Accepted values are: OLPU_COUNT, USER_COUNT
        :param pulumi.Input[_builtins.int] capacity_value: (Updatable) The capacity value selected, either the number of OCPUs (OLPU_COUNT) or the number of users (USER_COUNT). This parameter affects the number of OCPUs, amount of memory, and other resources allocated to the instance.
        """
        pulumi.set(__self__, "capacity_type", capacity_type)
        pulumi.set(__self__, "capacity_value", capacity_value)

    @_builtins.property
    @pulumi.getter(name="capacityType")
    def capacity_type(self) -> pulumi.Input[_builtins.str]:
        """
        The capacity model to use. Accepted values are: OLPU_COUNT, USER_COUNT
        """
        return pulumi.get(self, "capacity_type")

    @capacity_type.setter
    def capacity_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "capacity_type", value)

    @_builtins.property
    @pulumi.getter(name="capacityValue")
    def capacity_value(self) -> pulumi.Input[_builtins.int]:
        """
        (Updatable) The capacity value selected, either the number of OCPUs (OLPU_COUNT) or the number of users (USER_COUNT). This parameter affects the number of OCPUs, amount of memory, and other resources allocated to the instance.
        """
        return pulumi.get(self, "capacity_value")

    @capacity_value.setter
    def capacity_value(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "capacity_value", value)


if not MYPY:
    class AnalyticsInstanceNetworkEndpointDetailsArgsDict(TypedDict):
        network_endpoint_type: pulumi.Input[_builtins.str]
        """
        The type of network endpoint.
        """
        network_security_group_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Network Security Group OCIDs for an Analytics instance.
        """
        subnet_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The subnet OCID for the private endpoint.
        """
        vcn_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The VCN OCID for the private endpoint.
        """
        whitelisted_ips: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Source IP addresses or IP address ranges in ingress rules.
        """
        whitelisted_services: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Oracle Cloud Services that are allowed to access this Analytics instance.
        """
        whitelisted_vcns: NotRequired[pulumi.Input[Sequence[pulumi.Input['AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcnArgsDict']]]]
        """
        Virtual Cloud Networks allowed to access this network endpoint.
        """
elif False:
    AnalyticsInstanceNetworkEndpointDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyticsInstanceNetworkEndpointDetailsArgs:
    def __init__(__self__, *,
                 network_endpoint_type: pulumi.Input[_builtins.str],
                 network_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vcn_id: Optional[pulumi.Input[_builtins.str]] = None,
                 whitelisted_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 whitelisted_services: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 whitelisted_vcns: Optional[pulumi.Input[Sequence[pulumi.Input['AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcnArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] network_endpoint_type: The type of network endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] network_security_group_ids: Network Security Group OCIDs for an Analytics instance.
        :param pulumi.Input[_builtins.str] subnet_id: The subnet OCID for the private endpoint.
        :param pulumi.Input[_builtins.str] vcn_id: The VCN OCID for the private endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] whitelisted_ips: Source IP addresses or IP address ranges in ingress rules.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] whitelisted_services: Oracle Cloud Services that are allowed to access this Analytics instance.
        :param pulumi.Input[Sequence[pulumi.Input['AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcnArgs']]] whitelisted_vcns: Virtual Cloud Networks allowed to access this network endpoint.
        """
        pulumi.set(__self__, "network_endpoint_type", network_endpoint_type)
        if network_security_group_ids is not None:
            pulumi.set(__self__, "network_security_group_ids", network_security_group_ids)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)
        if whitelisted_ips is not None:
            pulumi.set(__self__, "whitelisted_ips", whitelisted_ips)
        if whitelisted_services is not None:
            pulumi.set(__self__, "whitelisted_services", whitelisted_services)
        if whitelisted_vcns is not None:
            pulumi.set(__self__, "whitelisted_vcns", whitelisted_vcns)

    @_builtins.property
    @pulumi.getter(name="networkEndpointType")
    def network_endpoint_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of network endpoint.
        """
        return pulumi.get(self, "network_endpoint_type")

    @network_endpoint_type.setter
    def network_endpoint_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "network_endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="networkSecurityGroupIds")
    def network_security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Network Security Group OCIDs for an Analytics instance.
        """
        return pulumi.get(self, "network_security_group_ids")

    @network_security_group_ids.setter
    def network_security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "network_security_group_ids", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subnet OCID for the private endpoint.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VCN OCID for the private endpoint.
        """
        return pulumi.get(self, "vcn_id")

    @vcn_id.setter
    def vcn_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vcn_id", value)

    @_builtins.property
    @pulumi.getter(name="whitelistedIps")
    def whitelisted_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Source IP addresses or IP address ranges in ingress rules.
        """
        return pulumi.get(self, "whitelisted_ips")

    @whitelisted_ips.setter
    def whitelisted_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "whitelisted_ips", value)

    @_builtins.property
    @pulumi.getter(name="whitelistedServices")
    def whitelisted_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Oracle Cloud Services that are allowed to access this Analytics instance.
        """
        return pulumi.get(self, "whitelisted_services")

    @whitelisted_services.setter
    def whitelisted_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "whitelisted_services", value)

    @_builtins.property
    @pulumi.getter(name="whitelistedVcns")
    def whitelisted_vcns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcnArgs']]]]:
        """
        Virtual Cloud Networks allowed to access this network endpoint.
        """
        return pulumi.get(self, "whitelisted_vcns")

    @whitelisted_vcns.setter
    def whitelisted_vcns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcnArgs']]]]):
        pulumi.set(self, "whitelisted_vcns", value)


if not MYPY:
    class AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcnArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Virtual Cloud Network OCID.
        """
        whitelisted_ips: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Source IP addresses or IP address ranges in ingress rules.
        """
elif False:
    AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcnArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 whitelisted_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] id: The Virtual Cloud Network OCID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] whitelisted_ips: Source IP addresses or IP address ranges in ingress rules.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if whitelisted_ips is not None:
            pulumi.set(__self__, "whitelisted_ips", whitelisted_ips)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Virtual Cloud Network OCID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="whitelistedIps")
    def whitelisted_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Source IP addresses or IP address ranges in ingress rules.
        """
        return pulumi.get(self, "whitelisted_ips")

    @whitelisted_ips.setter
    def whitelisted_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "whitelisted_ips", value)


if not MYPY:
    class AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgsDict(TypedDict):
        dns_zone: pulumi.Input[_builtins.str]
        """
        (Updatable) Private Source DNS Zone. Ex: example-vcn.oraclevcn.com, corp.example.com.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Updatable) Description of private source dns zone.
        """
elif False:
    AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgs:
    def __init__(__self__, *,
                 dns_zone: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] dns_zone: (Updatable) Private Source DNS Zone. Ex: example-vcn.oraclevcn.com, corp.example.com.
        :param pulumi.Input[_builtins.str] description: (Updatable) Description of private source dns zone.
        """
        pulumi.set(__self__, "dns_zone", dns_zone)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter(name="dnsZone")
    def dns_zone(self) -> pulumi.Input[_builtins.str]:
        """
        (Updatable) Private Source DNS Zone. Ex: example-vcn.oraclevcn.com, corp.example.com.
        """
        return pulumi.get(self, "dns_zone")

    @dns_zone.setter
    def dns_zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dns_zone", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Updatable) Description of private source dns zone.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AnalyticsInstancePrivateAccessChannelPrivateSourceScanHostArgsDict(TypedDict):
        scan_hostname: pulumi.Input[_builtins.str]
        """
        (Updatable) Private Source Scan hostname. Ex: db01-scan.corp.example.com, prd-db01-scan.mycompany.com.
        """
        scan_port: pulumi.Input[_builtins.int]
        """
        (Updatable) Private Source Scan host port. This is the source port where SCAN protocol will get connected (e.g. 1521).
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Updatable) Description of private source scan host zone.
        """
elif False:
    AnalyticsInstancePrivateAccessChannelPrivateSourceScanHostArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnalyticsInstancePrivateAccessChannelPrivateSourceScanHostArgs:
    def __init__(__self__, *,
                 scan_hostname: pulumi.Input[_builtins.str],
                 scan_port: pulumi.Input[_builtins.int],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] scan_hostname: (Updatable) Private Source Scan hostname. Ex: db01-scan.corp.example.com, prd-db01-scan.mycompany.com.
        :param pulumi.Input[_builtins.int] scan_port: (Updatable) Private Source Scan host port. This is the source port where SCAN protocol will get connected (e.g. 1521).
        :param pulumi.Input[_builtins.str] description: (Updatable) Description of private source scan host zone.
        """
        pulumi.set(__self__, "scan_hostname", scan_hostname)
        pulumi.set(__self__, "scan_port", scan_port)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter(name="scanHostname")
    def scan_hostname(self) -> pulumi.Input[_builtins.str]:
        """
        (Updatable) Private Source Scan hostname. Ex: db01-scan.corp.example.com, prd-db01-scan.mycompany.com.
        """
        return pulumi.get(self, "scan_hostname")

    @scan_hostname.setter
    def scan_hostname(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "scan_hostname", value)

    @_builtins.property
    @pulumi.getter(name="scanPort")
    def scan_port(self) -> pulumi.Input[_builtins.int]:
        """
        (Updatable) Private Source Scan host port. This is the source port where SCAN protocol will get connected (e.g. 1521).
        """
        return pulumi.get(self, "scan_port")

    @scan_port.setter
    def scan_port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "scan_port", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Updatable) Description of private source scan host zone.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class GetAnalyticsInstancesFilterArgsDict(TypedDict):
        name: _builtins.str
        """
        A filter to return only resources that match the given name exactly.
        """
        values: Sequence[_builtins.str]
        regex: NotRequired[_builtins.bool]
elif False:
    GetAnalyticsInstancesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAnalyticsInstancesFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: A filter to return only resources that match the given name exactly.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        A filter to return only resources that match the given name exactly.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "regex", value)


