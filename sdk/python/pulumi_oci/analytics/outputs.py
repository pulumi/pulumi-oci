# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AnalyticsInstanceCapacity',
    'AnalyticsInstanceNetworkEndpointDetails',
    'AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcn',
    'AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone',
    'AnalyticsInstancePrivateAccessChannelPrivateSourceScanHost',
    'GetAnalyticsInstanceCapacityResult',
    'GetAnalyticsInstanceNetworkEndpointDetailResult',
    'GetAnalyticsInstanceNetworkEndpointDetailWhitelistedVcnResult',
    'GetAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneResult',
    'GetAnalyticsInstancePrivateAccessChannelPrivateSourceScanHostResult',
    'GetAnalyticsInstancesAnalyticsInstanceResult',
    'GetAnalyticsInstancesAnalyticsInstanceCapacityResult',
    'GetAnalyticsInstancesAnalyticsInstanceNetworkEndpointDetailResult',
    'GetAnalyticsInstancesAnalyticsInstanceNetworkEndpointDetailWhitelistedVcnResult',
    'GetAnalyticsInstancesFilterResult',
]

@pulumi.output_type
class AnalyticsInstanceCapacity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityType":
            suggest = "capacity_type"
        elif key == "capacityValue":
            suggest = "capacity_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalyticsInstanceCapacity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalyticsInstanceCapacity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalyticsInstanceCapacity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity_type: str,
                 capacity_value: int):
        pulumi.set(__self__, "capacity_type", capacity_type)
        pulumi.set(__self__, "capacity_value", capacity_value)

    @property
    @pulumi.getter(name="capacityType")
    def capacity_type(self) -> str:
        return pulumi.get(self, "capacity_type")

    @property
    @pulumi.getter(name="capacityValue")
    def capacity_value(self) -> int:
        return pulumi.get(self, "capacity_value")


@pulumi.output_type
class AnalyticsInstanceNetworkEndpointDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkEndpointType":
            suggest = "network_endpoint_type"
        elif key == "networkSecurityGroupIds":
            suggest = "network_security_group_ids"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "vcnId":
            suggest = "vcn_id"
        elif key == "whitelistedIps":
            suggest = "whitelisted_ips"
        elif key == "whitelistedServices":
            suggest = "whitelisted_services"
        elif key == "whitelistedVcns":
            suggest = "whitelisted_vcns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalyticsInstanceNetworkEndpointDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalyticsInstanceNetworkEndpointDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalyticsInstanceNetworkEndpointDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_endpoint_type: str,
                 network_security_group_ids: Optional[Sequence[str]] = None,
                 subnet_id: Optional[str] = None,
                 vcn_id: Optional[str] = None,
                 whitelisted_ips: Optional[Sequence[str]] = None,
                 whitelisted_services: Optional[Sequence[str]] = None,
                 whitelisted_vcns: Optional[Sequence['outputs.AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcn']] = None):
        pulumi.set(__self__, "network_endpoint_type", network_endpoint_type)
        if network_security_group_ids is not None:
            pulumi.set(__self__, "network_security_group_ids", network_security_group_ids)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)
        if whitelisted_ips is not None:
            pulumi.set(__self__, "whitelisted_ips", whitelisted_ips)
        if whitelisted_services is not None:
            pulumi.set(__self__, "whitelisted_services", whitelisted_services)
        if whitelisted_vcns is not None:
            pulumi.set(__self__, "whitelisted_vcns", whitelisted_vcns)

    @property
    @pulumi.getter(name="networkEndpointType")
    def network_endpoint_type(self) -> str:
        return pulumi.get(self, "network_endpoint_type")

    @property
    @pulumi.getter(name="networkSecurityGroupIds")
    def network_security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_security_group_ids")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")

    @property
    @pulumi.getter(name="whitelistedIps")
    def whitelisted_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "whitelisted_ips")

    @property
    @pulumi.getter(name="whitelistedServices")
    def whitelisted_services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "whitelisted_services")

    @property
    @pulumi.getter(name="whitelistedVcns")
    def whitelisted_vcns(self) -> Optional[Sequence['outputs.AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcn']]:
        return pulumi.get(self, "whitelisted_vcns")


@pulumi.output_type
class AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "whitelistedIps":
            suggest = "whitelisted_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalyticsInstanceNetworkEndpointDetailsWhitelistedVcn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 whitelisted_ips: Optional[Sequence[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if whitelisted_ips is not None:
            pulumi.set(__self__, "whitelisted_ips", whitelisted_ips)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="whitelistedIps")
    def whitelisted_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "whitelisted_ips")


@pulumi.output_type
class AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsZone":
            suggest = "dns_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_zone: str,
                 description: Optional[str] = None):
        pulumi.set(__self__, "dns_zone", dns_zone)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="dnsZone")
    def dns_zone(self) -> str:
        return pulumi.get(self, "dns_zone")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class AnalyticsInstancePrivateAccessChannelPrivateSourceScanHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scanHostname":
            suggest = "scan_hostname"
        elif key == "scanPort":
            suggest = "scan_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalyticsInstancePrivateAccessChannelPrivateSourceScanHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalyticsInstancePrivateAccessChannelPrivateSourceScanHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalyticsInstancePrivateAccessChannelPrivateSourceScanHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scan_hostname: str,
                 scan_port: int,
                 description: Optional[str] = None):
        pulumi.set(__self__, "scan_hostname", scan_hostname)
        pulumi.set(__self__, "scan_port", scan_port)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="scanHostname")
    def scan_hostname(self) -> str:
        return pulumi.get(self, "scan_hostname")

    @property
    @pulumi.getter(name="scanPort")
    def scan_port(self) -> int:
        return pulumi.get(self, "scan_port")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class GetAnalyticsInstanceCapacityResult(dict):
    def __init__(__self__, *,
                 capacity_type: Optional[str] = None,
                 capacity_value: Optional[int] = None):
        if capacity_type is not None:
            pulumi.set(__self__, "capacity_type", capacity_type)
        if capacity_value is not None:
            pulumi.set(__self__, "capacity_value", capacity_value)

    @property
    @pulumi.getter(name="capacityType")
    def capacity_type(self) -> Optional[str]:
        return pulumi.get(self, "capacity_type")

    @property
    @pulumi.getter(name="capacityValue")
    def capacity_value(self) -> Optional[int]:
        return pulumi.get(self, "capacity_value")


@pulumi.output_type
class GetAnalyticsInstanceNetworkEndpointDetailResult(dict):
    def __init__(__self__, *,
                 network_endpoint_type: Optional[str] = None,
                 network_security_group_ids: Optional[Sequence[str]] = None,
                 subnet_id: Optional[str] = None,
                 vcn_id: Optional[str] = None,
                 whitelisted_ips: Optional[Sequence[str]] = None,
                 whitelisted_services: Optional[Sequence[str]] = None,
                 whitelisted_vcns: Optional[Sequence['outputs.GetAnalyticsInstanceNetworkEndpointDetailWhitelistedVcnResult']] = None):
        if network_endpoint_type is not None:
            pulumi.set(__self__, "network_endpoint_type", network_endpoint_type)
        if network_security_group_ids is not None:
            pulumi.set(__self__, "network_security_group_ids", network_security_group_ids)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)
        if whitelisted_ips is not None:
            pulumi.set(__self__, "whitelisted_ips", whitelisted_ips)
        if whitelisted_services is not None:
            pulumi.set(__self__, "whitelisted_services", whitelisted_services)
        if whitelisted_vcns is not None:
            pulumi.set(__self__, "whitelisted_vcns", whitelisted_vcns)

    @property
    @pulumi.getter(name="networkEndpointType")
    def network_endpoint_type(self) -> Optional[str]:
        return pulumi.get(self, "network_endpoint_type")

    @property
    @pulumi.getter(name="networkSecurityGroupIds")
    def network_security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_security_group_ids")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")

    @property
    @pulumi.getter(name="whitelistedIps")
    def whitelisted_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "whitelisted_ips")

    @property
    @pulumi.getter(name="whitelistedServices")
    def whitelisted_services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "whitelisted_services")

    @property
    @pulumi.getter(name="whitelistedVcns")
    def whitelisted_vcns(self) -> Optional[Sequence['outputs.GetAnalyticsInstanceNetworkEndpointDetailWhitelistedVcnResult']]:
        return pulumi.get(self, "whitelisted_vcns")


@pulumi.output_type
class GetAnalyticsInstanceNetworkEndpointDetailWhitelistedVcnResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 whitelisted_ips: Optional[Sequence[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if whitelisted_ips is not None:
            pulumi.set(__self__, "whitelisted_ips", whitelisted_ips)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="whitelistedIps")
    def whitelisted_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "whitelisted_ips")


@pulumi.output_type
class GetAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 dns_zone: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_zone is not None:
            pulumi.set(__self__, "dns_zone", dns_zone)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsZone")
    def dns_zone(self) -> Optional[str]:
        return pulumi.get(self, "dns_zone")


@pulumi.output_type
class GetAnalyticsInstancePrivateAccessChannelPrivateSourceScanHostResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 scan_hostname: Optional[str] = None,
                 scan_port: Optional[int] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if scan_hostname is not None:
            pulumi.set(__self__, "scan_hostname", scan_hostname)
        if scan_port is not None:
            pulumi.set(__self__, "scan_port", scan_port)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="scanHostname")
    def scan_hostname(self) -> Optional[str]:
        return pulumi.get(self, "scan_hostname")

    @property
    @pulumi.getter(name="scanPort")
    def scan_port(self) -> Optional[int]:
        return pulumi.get(self, "scan_port")


@pulumi.output_type
class GetAnalyticsInstancesAnalyticsInstanceResult(dict):
    def __init__(__self__, *,
                 capacities: Optional[Sequence['outputs.GetAnalyticsInstancesAnalyticsInstanceCapacityResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 email_notification: Optional[str] = None,
                 feature_set: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 idcs_access_token: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 license_type: Optional[str] = None,
                 name: Optional[str] = None,
                 network_endpoint_details: Optional[Sequence['outputs.GetAnalyticsInstancesAnalyticsInstanceNetworkEndpointDetailResult']] = None,
                 service_url: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if capacities is not None:
            pulumi.set(__self__, "capacities", capacities)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if email_notification is not None:
            pulumi.set(__self__, "email_notification", email_notification)
        if feature_set is not None:
            pulumi.set(__self__, "feature_set", feature_set)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idcs_access_token is not None:
            pulumi.set(__self__, "idcs_access_token", idcs_access_token)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_endpoint_details is not None:
            pulumi.set(__self__, "network_endpoint_details", network_endpoint_details)
        if service_url is not None:
            pulumi.set(__self__, "service_url", service_url)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def capacities(self) -> Optional[Sequence['outputs.GetAnalyticsInstancesAnalyticsInstanceCapacityResult']]:
        return pulumi.get(self, "capacities")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="emailNotification")
    def email_notification(self) -> Optional[str]:
        return pulumi.get(self, "email_notification")

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> Optional[str]:
        return pulumi.get(self, "feature_set")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idcsAccessToken")
    def idcs_access_token(self) -> Optional[str]:
        return pulumi.get(self, "idcs_access_token")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[str]:
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkEndpointDetails")
    def network_endpoint_details(self) -> Optional[Sequence['outputs.GetAnalyticsInstancesAnalyticsInstanceNetworkEndpointDetailResult']]:
        return pulumi.get(self, "network_endpoint_details")

    @property
    @pulumi.getter(name="serviceUrl")
    def service_url(self) -> Optional[str]:
        return pulumi.get(self, "service_url")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAnalyticsInstancesAnalyticsInstanceCapacityResult(dict):
    def __init__(__self__, *,
                 capacity_type: Optional[str] = None,
                 capacity_value: Optional[int] = None):
        if capacity_type is not None:
            pulumi.set(__self__, "capacity_type", capacity_type)
        if capacity_value is not None:
            pulumi.set(__self__, "capacity_value", capacity_value)

    @property
    @pulumi.getter(name="capacityType")
    def capacity_type(self) -> Optional[str]:
        return pulumi.get(self, "capacity_type")

    @property
    @pulumi.getter(name="capacityValue")
    def capacity_value(self) -> Optional[int]:
        return pulumi.get(self, "capacity_value")


@pulumi.output_type
class GetAnalyticsInstancesAnalyticsInstanceNetworkEndpointDetailResult(dict):
    def __init__(__self__, *,
                 network_endpoint_type: Optional[str] = None,
                 network_security_group_ids: Optional[Sequence[str]] = None,
                 subnet_id: Optional[str] = None,
                 vcn_id: Optional[str] = None,
                 whitelisted_ips: Optional[Sequence[str]] = None,
                 whitelisted_services: Optional[Sequence[str]] = None,
                 whitelisted_vcns: Optional[Sequence['outputs.GetAnalyticsInstancesAnalyticsInstanceNetworkEndpointDetailWhitelistedVcnResult']] = None):
        if network_endpoint_type is not None:
            pulumi.set(__self__, "network_endpoint_type", network_endpoint_type)
        if network_security_group_ids is not None:
            pulumi.set(__self__, "network_security_group_ids", network_security_group_ids)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)
        if whitelisted_ips is not None:
            pulumi.set(__self__, "whitelisted_ips", whitelisted_ips)
        if whitelisted_services is not None:
            pulumi.set(__self__, "whitelisted_services", whitelisted_services)
        if whitelisted_vcns is not None:
            pulumi.set(__self__, "whitelisted_vcns", whitelisted_vcns)

    @property
    @pulumi.getter(name="networkEndpointType")
    def network_endpoint_type(self) -> Optional[str]:
        return pulumi.get(self, "network_endpoint_type")

    @property
    @pulumi.getter(name="networkSecurityGroupIds")
    def network_security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_security_group_ids")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")

    @property
    @pulumi.getter(name="whitelistedIps")
    def whitelisted_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "whitelisted_ips")

    @property
    @pulumi.getter(name="whitelistedServices")
    def whitelisted_services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "whitelisted_services")

    @property
    @pulumi.getter(name="whitelistedVcns")
    def whitelisted_vcns(self) -> Optional[Sequence['outputs.GetAnalyticsInstancesAnalyticsInstanceNetworkEndpointDetailWhitelistedVcnResult']]:
        return pulumi.get(self, "whitelisted_vcns")


@pulumi.output_type
class GetAnalyticsInstancesAnalyticsInstanceNetworkEndpointDetailWhitelistedVcnResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 whitelisted_ips: Optional[Sequence[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if whitelisted_ips is not None:
            pulumi.set(__self__, "whitelisted_ips", whitelisted_ips)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="whitelistedIps")
    def whitelisted_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "whitelisted_ips")


@pulumi.output_type
class GetAnalyticsInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


