# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AnnouncementSubscriptionFilterGroups',
    'AnnouncementSubscriptionFilterGroupsFilter',
    'AnnouncementSubscriptionsFilterGroupFilter',
    'GetAnnouncementSubscriptionFilterGroupResult',
    'GetAnnouncementSubscriptionFilterGroupFilterResult',
    'GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionResult',
    'GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemResult',
    'GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupResult',
    'GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterResult',
    'GetAnnouncementSubscriptionsFilterResult',
    'GetServicesFilterResult',
    'GetServicesServicesCollectionResult',
    'GetServicesServicesCollectionItemResult',
]

@pulumi.output_type
class AnnouncementSubscriptionFilterGroups(dict):
    def __init__(__self__, *,
                 filters: Sequence['outputs.AnnouncementSubscriptionFilterGroupsFilter'],
                 name: Optional[builtins.str] = None):
        """
        :param Sequence['AnnouncementSubscriptionFilterGroupsFilterArgs'] filters: A list of filters against which the Announcements service matches announcements. You cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group. For filter types that support multiple values, specify the values individually.
        :param builtins.str name: The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
        """
        pulumi.set(__self__, "filters", filters)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.AnnouncementSubscriptionFilterGroupsFilter']:
        """
        A list of filters against which the Announcements service matches announcements. You cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group. For filter types that support multiple values, specify the values individually.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AnnouncementSubscriptionFilterGroupsFilter(dict):
    def __init__(__self__, *,
                 type: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str type: The type of filter. You cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group. For filter types that support multiple values, specify the values individually.
        :param builtins.str value: The value of the filter.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of filter. You cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group. For filter types that support multiple values, specify the values individually.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the filter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AnnouncementSubscriptionsFilterGroupFilter(dict):
    def __init__(__self__, *,
                 type: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str type: (Updatable) The type of filter. You cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group. For filter types that support multiple values, specify the values individually.
        :param builtins.str value: (Updatable) The value of the filter.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (Updatable) The type of filter. You cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group. For filter types that support multiple values, specify the values individually.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (Updatable) The value of the filter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAnnouncementSubscriptionFilterGroupResult(dict):
    def __init__(__self__, *,
                 filters: Sequence['outputs.GetAnnouncementSubscriptionFilterGroupFilterResult'],
                 name: builtins.str):
        """
        :param Sequence['GetAnnouncementSubscriptionFilterGroupFilterArgs'] filters: A list of filters against which the Announcements service matches announcements. You cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group. For filter types that support multiple values, specify the values individually.
        :param builtins.str name: The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
        """
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetAnnouncementSubscriptionFilterGroupFilterResult']:
        """
        A list of filters against which the Announcements service matches announcements. You cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group. For filter types that support multiple values, specify the values individually.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAnnouncementSubscriptionFilterGroupFilterResult(dict):
    def __init__(__self__, *,
                 type: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str type: The type of filter. You cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group. For filter types that support multiple values, specify the values individually.
        :param builtins.str value: The value of the filter.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of filter. You cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group. For filter types that support multiple values, specify the values individually.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the filter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 filter_groups: Sequence['outputs.GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupResult'],
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 ons_topic_id: builtins.str,
                 preferred_language: builtins.str,
                 preferred_time_zone: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The OCID of the compartment.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: A description of the announcement subscription. Avoid entering confidential information.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Sequence['GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArgs'] filter_groups: A list of filter groups for the announcement subscription. A filter group is a combination of multiple filters applied to announcements for matching purposes.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: The OCID of the announcement subscription.
        :param builtins.str lifecycle_details: A message describing the current lifecycle state in more detail. For example, details might provide required or recommended actions for a resource in a Failed state.
        :param builtins.str ons_topic_id: The OCID of the Notifications service topic that is the target for publishing announcements that match the configured announcement subscription.
        :param builtins.str preferred_language: (For announcement subscriptions with SaaS configured as the platform type or Oracle Fusion Applications as the service, or both, only) The language in which the user prefers to receive emailed announcements. Specify the preference with a value that uses the x-obmcs-human-language format. For example fr-FR.
        :param builtins.str preferred_time_zone: The time zone in which the user prefers to receive announcements. Specify the preference with a value that uses the IANA Time Zone Database format (x-obmcs-time-zone). For example - America/Los_Angeles
        :param builtins.str state: A filter to return only announcement subscriptions that match the given lifecycle state.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The date and time that the announcement subscription was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
        :param builtins.str time_updated: The date and time that the announcement subscription was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "filter_groups", filter_groups)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "ons_topic_id", ons_topic_id)
        pulumi.set(__self__, "preferred_language", preferred_language)
        pulumi.set(__self__, "preferred_time_zone", preferred_time_zone)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The OCID of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A description of the announcement subscription. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="filterGroups")
    def filter_groups(self) -> Sequence['outputs.GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupResult']:
        """
        A list of filter groups for the announcement subscription. A filter group is a combination of multiple filters applied to announcements for matching purposes.
        """
        return pulumi.get(self, "filter_groups")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the announcement subscription.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current lifecycle state in more detail. For example, details might provide required or recommended actions for a resource in a Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="onsTopicId")
    def ons_topic_id(self) -> builtins.str:
        """
        The OCID of the Notifications service topic that is the target for publishing announcements that match the configured announcement subscription.
        """
        return pulumi.get(self, "ons_topic_id")

    @property
    @pulumi.getter(name="preferredLanguage")
    def preferred_language(self) -> builtins.str:
        """
        (For announcement subscriptions with SaaS configured as the platform type or Oracle Fusion Applications as the service, or both, only) The language in which the user prefers to receive emailed announcements. Specify the preference with a value that uses the x-obmcs-human-language format. For example fr-FR.
        """
        return pulumi.get(self, "preferred_language")

    @property
    @pulumi.getter(name="preferredTimeZone")
    def preferred_time_zone(self) -> builtins.str:
        """
        The time zone in which the user prefers to receive announcements. Specify the preference with a value that uses the IANA Time Zone Database format (x-obmcs-time-zone). For example - America/Los_Angeles
        """
        return pulumi.get(self, "preferred_time_zone")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only announcement subscriptions that match the given lifecycle state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time that the announcement subscription was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The date and time that the announcement subscription was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupResult(dict):
    def __init__(__self__, *,
                 filters: Sequence['outputs.GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterResult'],
                 name: builtins.str):
        """
        :param Sequence['GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArgs'] filters: A list of filters against which the Announcements service matches announcements. You cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group. For filter types that support multiple values, specify the values individually.
        :param builtins.str name: The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
        """
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterResult']:
        """
        A list of filters against which the Announcements service matches announcements. You cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group. For filter types that support multiple values, specify the values individually.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterResult(dict):
    def __init__(__self__, *,
                 type: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str type: The type of filter. You cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group. For filter types that support multiple values, specify the values individually.
        :param builtins.str value: The value of the filter.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of filter. You cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group. For filter types that support multiple values, specify the values individually.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the filter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAnnouncementSubscriptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetServicesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetServicesServicesCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetServicesServicesCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetServicesServicesCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetServicesServicesCollectionItemResult(dict):
    def __init__(__self__, *,
                 comms_manager_name: builtins.str,
                 excluded_realms: Sequence[builtins.str],
                 id: builtins.str,
                 platform_type: builtins.str,
                 previous_service_names: Sequence[builtins.str],
                 service_name: builtins.str,
                 short_name: builtins.str,
                 state: builtins.str,
                 team_name: builtins.str,
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str comms_manager_name: Filter by comms manager name
        :param Sequence[builtins.str] excluded_realms: The list of realms where this service is not available to be used.
        :param builtins.str id: ID of the service object.
        :param builtins.str platform_type: A filter to return only services underlying a specific platform.
        :param Sequence[builtins.str] previous_service_names: The list of previously used names for this service object.
        :param builtins.str service_name: Name of the service represented by this object.
        :param builtins.str short_name: Short name of the team to whom this service object is related.
        :param builtins.str state: Current state of the service object.
        :param builtins.str team_name: Team name to which this service object is related.
        :param builtins.str time_created: The date and time when the service object was created.
        :param builtins.str time_updated: The date and time when the service object was updated.
        """
        pulumi.set(__self__, "comms_manager_name", comms_manager_name)
        pulumi.set(__self__, "excluded_realms", excluded_realms)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "platform_type", platform_type)
        pulumi.set(__self__, "previous_service_names", previous_service_names)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "short_name", short_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "team_name", team_name)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commsManagerName")
    def comms_manager_name(self) -> builtins.str:
        """
        Filter by comms manager name
        """
        return pulumi.get(self, "comms_manager_name")

    @property
    @pulumi.getter(name="excludedRealms")
    def excluded_realms(self) -> Sequence[builtins.str]:
        """
        The list of realms where this service is not available to be used.
        """
        return pulumi.get(self, "excluded_realms")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        ID of the service object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> builtins.str:
        """
        A filter to return only services underlying a specific platform.
        """
        return pulumi.get(self, "platform_type")

    @property
    @pulumi.getter(name="previousServiceNames")
    def previous_service_names(self) -> Sequence[builtins.str]:
        """
        The list of previously used names for this service object.
        """
        return pulumi.get(self, "previous_service_names")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        """
        Name of the service represented by this object.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="shortName")
    def short_name(self) -> builtins.str:
        """
        Short name of the team to whom this service object is related.
        """
        return pulumi.get(self, "short_name")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        Current state of the service object.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="teamName")
    def team_name(self) -> builtins.str:
        """
        Team name to which this service object is related.
        """
        return pulumi.get(self, "team_name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time when the service object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The date and time when the service object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


