# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ApiValidationResultArgs',
    'DeploymentSpecificationArgs',
    'DeploymentSpecificationLoggingPoliciesArgs',
    'DeploymentSpecificationLoggingPoliciesAccessLogArgs',
    'DeploymentSpecificationLoggingPoliciesExecutionLogArgs',
    'DeploymentSpecificationRequestPoliciesArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetailsArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetailsArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetailsArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeyArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetailsArgs',
    'DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs',
    'DeploymentSpecificationRequestPoliciesCorsArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKeyArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailsArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailsArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailsArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailsArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKeyArgs',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSourceArgs',
    'DeploymentSpecificationRequestPoliciesMutualTlsArgs',
    'DeploymentSpecificationRequestPoliciesRateLimitingArgs',
    'DeploymentSpecificationRequestPoliciesUsagePlansArgs',
    'DeploymentSpecificationRouteArgs',
    'DeploymentSpecificationRouteBackendArgs',
    'DeploymentSpecificationRouteBackendHeaderArgs',
    'DeploymentSpecificationRouteBackendRoutingBackendArgs',
    'DeploymentSpecificationRouteBackendRoutingBackendBackendArgs',
    'DeploymentSpecificationRouteBackendRoutingBackendBackendHeaderArgs',
    'DeploymentSpecificationRouteBackendRoutingBackendKeyArgs',
    'DeploymentSpecificationRouteBackendSelectionSourceArgs',
    'DeploymentSpecificationRouteLoggingPoliciesArgs',
    'DeploymentSpecificationRouteLoggingPoliciesAccessLogArgs',
    'DeploymentSpecificationRouteLoggingPoliciesExecutionLogArgs',
    'DeploymentSpecificationRouteRequestPoliciesArgs',
    'DeploymentSpecificationRouteRequestPoliciesAuthorizationArgs',
    'DeploymentSpecificationRouteRequestPoliciesBodyValidationArgs',
    'DeploymentSpecificationRouteRequestPoliciesBodyValidationContentArgs',
    'DeploymentSpecificationRouteRequestPoliciesCorsArgs',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsArgs',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersArgs',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemArgs',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersArgs',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemArgs',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersArgs',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs',
    'DeploymentSpecificationRouteRequestPoliciesHeaderValidationsArgs',
    'DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderArgs',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsArgs',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersArgs',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemArgs',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersArgs',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemArgs',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersArgs',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemArgs',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsArgs',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs',
    'DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs',
    'DeploymentSpecificationRouteResponsePoliciesArgs',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsArgs',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersArgs',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemArgs',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersArgs',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemArgs',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersArgs',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemArgs',
    'DeploymentSpecificationRouteResponsePoliciesResponseCacheStoreArgs',
    'GatewayCaBundleArgs',
    'GatewayIpAddressArgs',
    'GatewayResponseCacheDetailsArgs',
    'GatewayResponseCacheDetailsServerArgs',
    'SubscriberClientArgs',
    'UsagePlanEntitlementArgs',
    'UsagePlanEntitlementQuotaArgs',
    'UsagePlanEntitlementRateLimitArgs',
    'UsagePlanEntitlementTargetArgs',
    'GetApisFilterArgs',
    'GetCertificatesFilterArgs',
    'GetDeploymentsFilterArgs',
    'GetGatewaysFilterArgs',
    'GetSubscribersFilterArgs',
    'GetUsagePlansFilterArgs',
]

@pulumi.input_type
class ApiValidationResultArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 result: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the validation.
        :param pulumi.Input[str] result: Result of the validation.
        """
        ApiValidationResultArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            result=result,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             result: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if name is not None:
            _setter("name", name)
        if result is not None:
            _setter("result", result)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the validation.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def result(self) -> Optional[pulumi.Input[str]]:
        """
        Result of the validation.
        """
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "result", value)


@pulumi.input_type
class DeploymentSpecificationArgs:
    def __init__(__self__, *,
                 routes: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteArgs']]],
                 logging_policies: Optional[pulumi.Input['DeploymentSpecificationLoggingPoliciesArgs']] = None,
                 request_policies: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteArgs']]] routes: (Updatable) A list of routes that this API exposes.
        :param pulumi.Input['DeploymentSpecificationLoggingPoliciesArgs'] logging_policies: (Updatable) Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesArgs'] request_policies: (Updatable) Behavior applied to any requests received by the API on this route.
        """
        DeploymentSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            routes=routes,
            logging_policies=logging_policies,
            request_policies=request_policies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             routes: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteArgs']]],
             logging_policies: Optional[pulumi.Input['DeploymentSpecificationLoggingPoliciesArgs']] = None,
             request_policies: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'loggingPolicies' in kwargs:
            logging_policies = kwargs['loggingPolicies']
        if 'requestPolicies' in kwargs:
            request_policies = kwargs['requestPolicies']

        _setter("routes", routes)
        if logging_policies is not None:
            _setter("logging_policies", logging_policies)
        if request_policies is not None:
            _setter("request_policies", request_policies)

    @property
    @pulumi.getter
    def routes(self) -> pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteArgs']]]:
        """
        (Updatable) A list of routes that this API exposes.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteArgs']]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> Optional[pulumi.Input['DeploymentSpecificationLoggingPoliciesArgs']]:
        """
        (Updatable) Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        """
        return pulumi.get(self, "logging_policies")

    @logging_policies.setter
    def logging_policies(self, value: Optional[pulumi.Input['DeploymentSpecificationLoggingPoliciesArgs']]):
        pulumi.set(self, "logging_policies", value)

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesArgs']]:
        """
        (Updatable) Behavior applied to any requests received by the API on this route.
        """
        return pulumi.get(self, "request_policies")

    @request_policies.setter
    def request_policies(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesArgs']]):
        pulumi.set(self, "request_policies", value)


@pulumi.input_type
class DeploymentSpecificationLoggingPoliciesArgs:
    def __init__(__self__, *,
                 access_log: Optional[pulumi.Input['DeploymentSpecificationLoggingPoliciesAccessLogArgs']] = None,
                 execution_log: Optional[pulumi.Input['DeploymentSpecificationLoggingPoliciesExecutionLogArgs']] = None):
        """
        :param pulumi.Input['DeploymentSpecificationLoggingPoliciesAccessLogArgs'] access_log: (Updatable) Configures the logging policies for the access logs of an API Deployment.
        :param pulumi.Input['DeploymentSpecificationLoggingPoliciesExecutionLogArgs'] execution_log: (Updatable) Configures the logging policies for the execution logs of an API Deployment.
        """
        DeploymentSpecificationLoggingPoliciesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_log=access_log,
            execution_log=execution_log,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_log: Optional[pulumi.Input['DeploymentSpecificationLoggingPoliciesAccessLogArgs']] = None,
             execution_log: Optional[pulumi.Input['DeploymentSpecificationLoggingPoliciesExecutionLogArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessLog' in kwargs:
            access_log = kwargs['accessLog']
        if 'executionLog' in kwargs:
            execution_log = kwargs['executionLog']

        if access_log is not None:
            _setter("access_log", access_log)
        if execution_log is not None:
            _setter("execution_log", execution_log)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> Optional[pulumi.Input['DeploymentSpecificationLoggingPoliciesAccessLogArgs']]:
        """
        (Updatable) Configures the logging policies for the access logs of an API Deployment.
        """
        return pulumi.get(self, "access_log")

    @access_log.setter
    def access_log(self, value: Optional[pulumi.Input['DeploymentSpecificationLoggingPoliciesAccessLogArgs']]):
        pulumi.set(self, "access_log", value)

    @property
    @pulumi.getter(name="executionLog")
    def execution_log(self) -> Optional[pulumi.Input['DeploymentSpecificationLoggingPoliciesExecutionLogArgs']]:
        """
        (Updatable) Configures the logging policies for the execution logs of an API Deployment.
        """
        return pulumi.get(self, "execution_log")

    @execution_log.setter
    def execution_log(self, value: Optional[pulumi.Input['DeploymentSpecificationLoggingPoliciesExecutionLogArgs']]):
        pulumi.set(self, "execution_log", value)


@pulumi.input_type
class DeploymentSpecificationLoggingPoliciesAccessLogArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] is_enabled: (Updatable) Whether this policy is currently enabled.
        """
        DeploymentSpecificationLoggingPoliciesAccessLogArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_enabled=is_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isEnabled' in kwargs:
            is_enabled = kwargs['isEnabled']

        if is_enabled is not None:
            _setter("is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)


@pulumi.input_type
class DeploymentSpecificationLoggingPoliciesExecutionLogArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_enabled: (Updatable) Whether this policy is currently enabled.
        :param pulumi.Input[str] log_level: (Updatable) Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        DeploymentSpecificationLoggingPoliciesExecutionLogArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_enabled=is_enabled,
            log_level=log_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_enabled: Optional[pulumi.Input[bool]] = None,
             log_level: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isEnabled' in kwargs:
            is_enabled = kwargs['isEnabled']
        if 'logLevel' in kwargs:
            log_level = kwargs['logLevel']

        if is_enabled is not None:
            _setter("is_enabled", is_enabled)
        if log_level is not None:
            _setter("log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationArgs']] = None,
                 cors: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesCorsArgs']] = None,
                 dynamic_authentication: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationArgs']] = None,
                 mutual_tls: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesMutualTlsArgs']] = None,
                 rate_limiting: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesRateLimitingArgs']] = None,
                 usage_plans: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesUsagePlansArgs']] = None):
        """
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationArgs'] authentication: (Updatable) Information on how to authenticate incoming requests.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesCorsArgs'] cors: (Updatable) Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationArgs'] dynamic_authentication: (Updatable) Policy on how to authenticate requests when multiple authentication options are configured for a deployment. For an incoming request, the value of selector specified under selectionSource will be matched against the keys specified for each authentication server. The authentication server whose key matches the value of selector will be used for authentication.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesMutualTlsArgs'] mutual_tls: (Updatable) Properties used to configure client mTLS verification when API Consumer makes connection to the gateway.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesRateLimitingArgs'] rate_limiting: (Updatable) Limit the number of requests that should be handled for the specified window using a specfic key.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesUsagePlansArgs'] usage_plans: (Updatable) Usage plan policies for this deployment
        """
        DeploymentSpecificationRequestPoliciesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authentication=authentication,
            cors=cors,
            dynamic_authentication=dynamic_authentication,
            mutual_tls=mutual_tls,
            rate_limiting=rate_limiting,
            usage_plans=usage_plans,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authentication: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationArgs']] = None,
             cors: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesCorsArgs']] = None,
             dynamic_authentication: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationArgs']] = None,
             mutual_tls: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesMutualTlsArgs']] = None,
             rate_limiting: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesRateLimitingArgs']] = None,
             usage_plans: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesUsagePlansArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dynamicAuthentication' in kwargs:
            dynamic_authentication = kwargs['dynamicAuthentication']
        if 'mutualTls' in kwargs:
            mutual_tls = kwargs['mutualTls']
        if 'rateLimiting' in kwargs:
            rate_limiting = kwargs['rateLimiting']
        if 'usagePlans' in kwargs:
            usage_plans = kwargs['usagePlans']

        if authentication is not None:
            _setter("authentication", authentication)
        if cors is not None:
            _setter("cors", cors)
        if dynamic_authentication is not None:
            _setter("dynamic_authentication", dynamic_authentication)
        if mutual_tls is not None:
            _setter("mutual_tls", mutual_tls)
        if rate_limiting is not None:
            _setter("rate_limiting", rate_limiting)
        if usage_plans is not None:
            _setter("usage_plans", usage_plans)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationArgs']]:
        """
        (Updatable) Information on how to authenticate incoming requests.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def cors(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesCorsArgs']]:
        """
        (Updatable) Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        """
        return pulumi.get(self, "cors")

    @cors.setter
    def cors(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesCorsArgs']]):
        pulumi.set(self, "cors", value)

    @property
    @pulumi.getter(name="dynamicAuthentication")
    def dynamic_authentication(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationArgs']]:
        """
        (Updatable) Policy on how to authenticate requests when multiple authentication options are configured for a deployment. For an incoming request, the value of selector specified under selectionSource will be matched against the keys specified for each authentication server. The authentication server whose key matches the value of selector will be used for authentication.
        """
        return pulumi.get(self, "dynamic_authentication")

    @dynamic_authentication.setter
    def dynamic_authentication(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationArgs']]):
        pulumi.set(self, "dynamic_authentication", value)

    @property
    @pulumi.getter(name="mutualTls")
    def mutual_tls(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesMutualTlsArgs']]:
        """
        (Updatable) Properties used to configure client mTLS verification when API Consumer makes connection to the gateway.
        """
        return pulumi.get(self, "mutual_tls")

    @mutual_tls.setter
    def mutual_tls(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesMutualTlsArgs']]):
        pulumi.set(self, "mutual_tls", value)

    @property
    @pulumi.getter(name="rateLimiting")
    def rate_limiting(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesRateLimitingArgs']]:
        """
        (Updatable) Limit the number of requests that should be handled for the specified window using a specfic key.
        """
        return pulumi.get(self, "rate_limiting")

    @rate_limiting.setter
    def rate_limiting(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesRateLimitingArgs']]):
        pulumi.set(self, "rate_limiting", value)

    @property
    @pulumi.getter(name="usagePlans")
    def usage_plans(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesUsagePlansArgs']]:
        """
        (Updatable) Usage plan policies for this deployment
        """
        return pulumi.get(self, "usage_plans")

    @usage_plans.setter
    def usage_plans(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesUsagePlansArgs']]):
        pulumi.set(self, "usage_plans", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cache_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 is_anonymous_access_allowed: Optional[pulumi.Input[bool]] = None,
                 issuers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_clock_skew_in_seconds: Optional[pulumi.Input[float]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 public_keys: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysArgs']] = None,
                 token_auth_scheme: Optional[pulumi.Input[str]] = None,
                 token_header: Optional[pulumi.Input[str]] = None,
                 token_query_param: Optional[pulumi.Input[str]] = None,
                 validation_failure_policy: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyArgs']] = None,
                 validation_policy: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyArgs']] = None,
                 verify_claims: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs']]]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: (Updatable) The list of intended recipients for the token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cache_keys: (Updatable) A list of keys from "parameters" attribute value whose values will be added to the cache key.
        :param pulumi.Input[str] function_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        :param pulumi.Input[bool] is_anonymous_access_allowed: (Updatable) Whether an unauthenticated user may access the API. Must be "true" to enable ANONYMOUS route authorization.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] issuers: (Updatable) A list of parties that could have issued the token.
        :param pulumi.Input[float] max_clock_skew_in_seconds: (Updatable) The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
        :param pulumi.Input[Mapping[str, Any]] parameters: (Updatable)
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysArgs'] public_keys: (Updatable) A set of Public Keys that will be used to verify the JWT signature.
        :param pulumi.Input[str] token_auth_scheme: (Updatable) The authentication scheme that is to be used when authenticating the token. This must to be provided if "tokenHeader" is specified.
        :param pulumi.Input[str] token_header: (Updatable) The name of the header containing the authentication token.
        :param pulumi.Input[str] token_query_param: (Updatable) The name of the query parameter containing the authentication token.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyArgs'] validation_failure_policy: (Updatable) Policy for defining behaviour on validation failure.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyArgs'] validation_policy: (Updatable) Authentication Policies for the Token Authentication types.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs']]] verify_claims: (Updatable) A list of claims which should be validated to consider the token valid.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            audiences=audiences,
            cache_keys=cache_keys,
            function_id=function_id,
            is_anonymous_access_allowed=is_anonymous_access_allowed,
            issuers=issuers,
            max_clock_skew_in_seconds=max_clock_skew_in_seconds,
            parameters=parameters,
            public_keys=public_keys,
            token_auth_scheme=token_auth_scheme,
            token_header=token_header,
            token_query_param=token_query_param,
            validation_failure_policy=validation_failure_policy,
            validation_policy=validation_policy,
            verify_claims=verify_claims,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             cache_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             function_id: Optional[pulumi.Input[str]] = None,
             is_anonymous_access_allowed: Optional[pulumi.Input[bool]] = None,
             issuers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             max_clock_skew_in_seconds: Optional[pulumi.Input[float]] = None,
             parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             public_keys: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysArgs']] = None,
             token_auth_scheme: Optional[pulumi.Input[str]] = None,
             token_header: Optional[pulumi.Input[str]] = None,
             token_query_param: Optional[pulumi.Input[str]] = None,
             validation_failure_policy: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyArgs']] = None,
             validation_policy: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyArgs']] = None,
             verify_claims: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cacheKeys' in kwargs:
            cache_keys = kwargs['cacheKeys']
        if 'functionId' in kwargs:
            function_id = kwargs['functionId']
        if 'isAnonymousAccessAllowed' in kwargs:
            is_anonymous_access_allowed = kwargs['isAnonymousAccessAllowed']
        if 'maxClockSkewInSeconds' in kwargs:
            max_clock_skew_in_seconds = kwargs['maxClockSkewInSeconds']
        if 'publicKeys' in kwargs:
            public_keys = kwargs['publicKeys']
        if 'tokenAuthScheme' in kwargs:
            token_auth_scheme = kwargs['tokenAuthScheme']
        if 'tokenHeader' in kwargs:
            token_header = kwargs['tokenHeader']
        if 'tokenQueryParam' in kwargs:
            token_query_param = kwargs['tokenQueryParam']
        if 'validationFailurePolicy' in kwargs:
            validation_failure_policy = kwargs['validationFailurePolicy']
        if 'validationPolicy' in kwargs:
            validation_policy = kwargs['validationPolicy']
        if 'verifyClaims' in kwargs:
            verify_claims = kwargs['verifyClaims']

        _setter("type", type)
        if audiences is not None:
            _setter("audiences", audiences)
        if cache_keys is not None:
            _setter("cache_keys", cache_keys)
        if function_id is not None:
            _setter("function_id", function_id)
        if is_anonymous_access_allowed is not None:
            _setter("is_anonymous_access_allowed", is_anonymous_access_allowed)
        if issuers is not None:
            _setter("issuers", issuers)
        if max_clock_skew_in_seconds is not None:
            _setter("max_clock_skew_in_seconds", max_clock_skew_in_seconds)
        if parameters is not None:
            _setter("parameters", parameters)
        if public_keys is not None:
            _setter("public_keys", public_keys)
        if token_auth_scheme is not None:
            _setter("token_auth_scheme", token_auth_scheme)
        if token_header is not None:
            _setter("token_header", token_header)
        if token_query_param is not None:
            _setter("token_query_param", token_query_param)
        if validation_failure_policy is not None:
            _setter("validation_failure_policy", validation_failure_policy)
        if validation_policy is not None:
            _setter("validation_policy", validation_policy)
        if verify_claims is not None:
            _setter("verify_claims", verify_claims)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The list of intended recipients for the token.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter(name="cacheKeys")
    def cache_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of keys from "parameters" attribute value whose values will be added to the cache key.
        """
        return pulumi.get(self, "cache_keys")

    @cache_keys.setter
    def cache_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cache_keys", value)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Whether an unauthenticated user may access the API. Must be "true" to enable ANONYMOUS route authorization.
        """
        return pulumi.get(self, "is_anonymous_access_allowed")

    @is_anonymous_access_allowed.setter
    def is_anonymous_access_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_anonymous_access_allowed", value)

    @property
    @pulumi.getter
    def issuers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of parties that could have issued the token.
        """
        return pulumi.get(self, "issuers")

    @issuers.setter
    def issuers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "issuers", value)

    @property
    @pulumi.getter(name="maxClockSkewInSeconds")
    def max_clock_skew_in_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        (Updatable) The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
        """
        return pulumi.get(self, "max_clock_skew_in_seconds")

    @max_clock_skew_in_seconds.setter
    def max_clock_skew_in_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_clock_skew_in_seconds", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable)
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysArgs']]:
        """
        (Updatable) A set of Public Keys that will be used to verify the JWT signature.
        """
        return pulumi.get(self, "public_keys")

    @public_keys.setter
    def public_keys(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysArgs']]):
        pulumi.set(self, "public_keys", value)

    @property
    @pulumi.getter(name="tokenAuthScheme")
    def token_auth_scheme(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The authentication scheme that is to be used when authenticating the token. This must to be provided if "tokenHeader" is specified.
        """
        return pulumi.get(self, "token_auth_scheme")

    @token_auth_scheme.setter
    def token_auth_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_auth_scheme", value)

    @property
    @pulumi.getter(name="tokenHeader")
    def token_header(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The name of the header containing the authentication token.
        """
        return pulumi.get(self, "token_header")

    @token_header.setter
    def token_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_header", value)

    @property
    @pulumi.getter(name="tokenQueryParam")
    def token_query_param(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The name of the query parameter containing the authentication token.
        """
        return pulumi.get(self, "token_query_param")

    @token_query_param.setter
    def token_query_param(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_query_param", value)

    @property
    @pulumi.getter(name="validationFailurePolicy")
    def validation_failure_policy(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyArgs']]:
        """
        (Updatable) Policy for defining behaviour on validation failure.
        """
        return pulumi.get(self, "validation_failure_policy")

    @validation_failure_policy.setter
    def validation_failure_policy(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyArgs']]):
        pulumi.set(self, "validation_failure_policy", value)

    @property
    @pulumi.getter(name="validationPolicy")
    def validation_policy(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyArgs']]:
        """
        (Updatable) Authentication Policies for the Token Authentication types.
        """
        return pulumi.get(self, "validation_policy")

    @validation_policy.setter
    def validation_policy(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyArgs']]):
        pulumi.set(self, "validation_policy", value)

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs']]]]:
        """
        (Updatable) A list of claims which should be validated to consider the token valid.
        """
        return pulumi.get(self, "verify_claims")

    @verify_claims.setter
    def verify_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs']]]]):
        pulumi.set(self, "verify_claims", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 is_ssl_verify_disabled: Optional[pulumi.Input[bool]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs']]]] = None,
                 max_cache_duration_in_hours: Optional[pulumi.Input[int]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[bool] is_ssl_verify_disabled: (Updatable) Defines whether or not to uphold SSL verification.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs']]] keys: (Updatable) The set of static public keys.
        :param pulumi.Input[int] max_cache_duration_in_hours: (Updatable) The duration for which the introspect URL response should be cached before it is fetched again.
        :param pulumi.Input[str] uri: (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            is_ssl_verify_disabled=is_ssl_verify_disabled,
            keys=keys,
            max_cache_duration_in_hours=max_cache_duration_in_hours,
            uri=uri,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             is_ssl_verify_disabled: Optional[pulumi.Input[bool]] = None,
             keys: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs']]]] = None,
             max_cache_duration_in_hours: Optional[pulumi.Input[int]] = None,
             uri: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isSslVerifyDisabled' in kwargs:
            is_ssl_verify_disabled = kwargs['isSslVerifyDisabled']
        if 'maxCacheDurationInHours' in kwargs:
            max_cache_duration_in_hours = kwargs['maxCacheDurationInHours']

        _setter("type", type)
        if is_ssl_verify_disabled is not None:
            _setter("is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            _setter("keys", keys)
        if max_cache_duration_in_hours is not None:
            _setter("max_cache_duration_in_hours", max_cache_duration_in_hours)
        if uri is not None:
            _setter("uri", uri)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @is_ssl_verify_disabled.setter
    def is_ssl_verify_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ssl_verify_disabled", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs']]]]:
        """
        (Updatable) The set of static public keys.
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs']]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The duration for which the introspect URL response should be cached before it is fetched again.
        """
        return pulumi.get(self, "max_cache_duration_in_hours")

    @max_cache_duration_in_hours.setter
    def max_cache_duration_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_cache_duration_in_hours", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 alg: Optional[pulumi.Input[str]] = None,
                 e: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_ops: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kid: Optional[pulumi.Input[str]] = None,
                 kty: Optional[pulumi.Input[str]] = None,
                 n: Optional[pulumi.Input[str]] = None,
                 use: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] format: (Updatable) The format of the public key.
        :param pulumi.Input[str] alg: (Updatable) The algorithm intended for use with this key.
        :param pulumi.Input[str] e: (Updatable) The base64 url encoded exponent of the RSA public key represented by this key.
        :param pulumi.Input[str] key: (Updatable) Information around the values for selector of an authentication/ routing branch.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_ops: (Updatable) The operations for which this key is to be used.
        :param pulumi.Input[str] kid: (Updatable) A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        :param pulumi.Input[str] kty: (Updatable) The key type.
        :param pulumi.Input[str] n: (Updatable) The base64 url encoded modulus of the RSA public key represented by this key.
        :param pulumi.Input[str] use: (Updatable) The intended use of the public key.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format=format,
            alg=alg,
            e=e,
            key=key,
            key_ops=key_ops,
            kid=kid,
            kty=kty,
            n=n,
            use=use,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format: pulumi.Input[str],
             alg: Optional[pulumi.Input[str]] = None,
             e: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             key_ops: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             kid: Optional[pulumi.Input[str]] = None,
             kty: Optional[pulumi.Input[str]] = None,
             n: Optional[pulumi.Input[str]] = None,
             use: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'keyOps' in kwargs:
            key_ops = kwargs['keyOps']

        _setter("format", format)
        if alg is not None:
            _setter("alg", alg)
        if e is not None:
            _setter("e", e)
        if key is not None:
            _setter("key", key)
        if key_ops is not None:
            _setter("key_ops", key_ops)
        if kid is not None:
            _setter("kid", kid)
        if kty is not None:
            _setter("kty", kty)
        if n is not None:
            _setter("n", n)
        if use is not None:
            _setter("use", use)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        """
        (Updatable) The format of the public key.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def alg(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The algorithm intended for use with this key.
        """
        return pulumi.get(self, "alg")

    @alg.setter
    def alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alg", value)

    @property
    @pulumi.getter
    def e(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The base64 url encoded exponent of the RSA public key represented by this key.
        """
        return pulumi.get(self, "e")

    @e.setter
    def e(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "e", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Information around the values for selector of an authentication/ routing branch.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The operations for which this key is to be used.
        """
        return pulumi.get(self, "key_ops")

    @key_ops.setter
    def key_ops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_ops", value)

    @property
    @pulumi.getter
    def kid(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        """
        return pulumi.get(self, "kid")

    @kid.setter
    def kid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kid", value)

    @property
    @pulumi.getter
    def kty(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key type.
        """
        return pulumi.get(self, "kty")

    @kty.setter
    def kty(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kty", value)

    @property
    @pulumi.getter
    def n(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The base64 url encoded modulus of the RSA public key represented by this key.
        """
        return pulumi.get(self, "n")

    @n.setter
    def n(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n", value)

    @property
    @pulumi.getter
    def use(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The intended use of the public key.
        """
        return pulumi.get(self, "use")

    @use.setter
    def use(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 client_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetailsArgs']] = None,
                 fallback_redirect_path: Optional[pulumi.Input[str]] = None,
                 logout_path: Optional[pulumi.Input[str]] = None,
                 max_expiry_duration_in_hours: Optional[pulumi.Input[int]] = None,
                 response_code: Optional[pulumi.Input[str]] = None,
                 response_header_transformations: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsArgs']] = None,
                 response_message: Optional[pulumi.Input[str]] = None,
                 response_type: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_uri_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetailsArgs']] = None,
                 use_cookies_for_intermediate_steps: Optional[pulumi.Input[bool]] = None,
                 use_cookies_for_session: Optional[pulumi.Input[bool]] = None,
                 use_pkce: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetailsArgs'] client_details: (Updatable) Client App Credential details.
        :param pulumi.Input[str] fallback_redirect_path: (Updatable) The path to be used as fallback after OAuth2.
        :param pulumi.Input[str] logout_path: (Updatable) The path to be used as logout.
        :param pulumi.Input[int] max_expiry_duration_in_hours: (Updatable) The duration for which the OAuth2 success token should be cached before it is fetched again.
        :param pulumi.Input[str] response_code: (Updatable) HTTP response code, can include context variables.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsArgs'] response_header_transformations: (Updatable) A set of transformations to apply to HTTP headers that pass through the gateway.
        :param pulumi.Input[str] response_message: (Updatable) HTTP response message.
        :param pulumi.Input[str] response_type: (Updatable) Response Type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: (Updatable) List of scopes.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetailsArgs'] source_uri_details: (Updatable) Auth endpoint details.
        :param pulumi.Input[bool] use_cookies_for_intermediate_steps: (Updatable) Defines whether or not to use cookies for OAuth2 intermediate steps.
        :param pulumi.Input[bool] use_cookies_for_session: (Updatable) Defines whether or not to use cookies for session maintenance.
        :param pulumi.Input[bool] use_pkce: (Updatable) Defines whether or not to support PKCE.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            client_details=client_details,
            fallback_redirect_path=fallback_redirect_path,
            logout_path=logout_path,
            max_expiry_duration_in_hours=max_expiry_duration_in_hours,
            response_code=response_code,
            response_header_transformations=response_header_transformations,
            response_message=response_message,
            response_type=response_type,
            scopes=scopes,
            source_uri_details=source_uri_details,
            use_cookies_for_intermediate_steps=use_cookies_for_intermediate_steps,
            use_cookies_for_session=use_cookies_for_session,
            use_pkce=use_pkce,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             client_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetailsArgs']] = None,
             fallback_redirect_path: Optional[pulumi.Input[str]] = None,
             logout_path: Optional[pulumi.Input[str]] = None,
             max_expiry_duration_in_hours: Optional[pulumi.Input[int]] = None,
             response_code: Optional[pulumi.Input[str]] = None,
             response_header_transformations: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsArgs']] = None,
             response_message: Optional[pulumi.Input[str]] = None,
             response_type: Optional[pulumi.Input[str]] = None,
             scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             source_uri_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetailsArgs']] = None,
             use_cookies_for_intermediate_steps: Optional[pulumi.Input[bool]] = None,
             use_cookies_for_session: Optional[pulumi.Input[bool]] = None,
             use_pkce: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientDetails' in kwargs:
            client_details = kwargs['clientDetails']
        if 'fallbackRedirectPath' in kwargs:
            fallback_redirect_path = kwargs['fallbackRedirectPath']
        if 'logoutPath' in kwargs:
            logout_path = kwargs['logoutPath']
        if 'maxExpiryDurationInHours' in kwargs:
            max_expiry_duration_in_hours = kwargs['maxExpiryDurationInHours']
        if 'responseCode' in kwargs:
            response_code = kwargs['responseCode']
        if 'responseHeaderTransformations' in kwargs:
            response_header_transformations = kwargs['responseHeaderTransformations']
        if 'responseMessage' in kwargs:
            response_message = kwargs['responseMessage']
        if 'responseType' in kwargs:
            response_type = kwargs['responseType']
        if 'sourceUriDetails' in kwargs:
            source_uri_details = kwargs['sourceUriDetails']
        if 'useCookiesForIntermediateSteps' in kwargs:
            use_cookies_for_intermediate_steps = kwargs['useCookiesForIntermediateSteps']
        if 'useCookiesForSession' in kwargs:
            use_cookies_for_session = kwargs['useCookiesForSession']
        if 'usePkce' in kwargs:
            use_pkce = kwargs['usePkce']

        _setter("type", type)
        if client_details is not None:
            _setter("client_details", client_details)
        if fallback_redirect_path is not None:
            _setter("fallback_redirect_path", fallback_redirect_path)
        if logout_path is not None:
            _setter("logout_path", logout_path)
        if max_expiry_duration_in_hours is not None:
            _setter("max_expiry_duration_in_hours", max_expiry_duration_in_hours)
        if response_code is not None:
            _setter("response_code", response_code)
        if response_header_transformations is not None:
            _setter("response_header_transformations", response_header_transformations)
        if response_message is not None:
            _setter("response_message", response_message)
        if response_type is not None:
            _setter("response_type", response_type)
        if scopes is not None:
            _setter("scopes", scopes)
        if source_uri_details is not None:
            _setter("source_uri_details", source_uri_details)
        if use_cookies_for_intermediate_steps is not None:
            _setter("use_cookies_for_intermediate_steps", use_cookies_for_intermediate_steps)
        if use_cookies_for_session is not None:
            _setter("use_cookies_for_session", use_cookies_for_session)
        if use_pkce is not None:
            _setter("use_pkce", use_pkce)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetailsArgs']]:
        """
        (Updatable) Client App Credential details.
        """
        return pulumi.get(self, "client_details")

    @client_details.setter
    def client_details(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetailsArgs']]):
        pulumi.set(self, "client_details", value)

    @property
    @pulumi.getter(name="fallbackRedirectPath")
    def fallback_redirect_path(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The path to be used as fallback after OAuth2.
        """
        return pulumi.get(self, "fallback_redirect_path")

    @fallback_redirect_path.setter
    def fallback_redirect_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fallback_redirect_path", value)

    @property
    @pulumi.getter(name="logoutPath")
    def logout_path(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The path to be used as logout.
        """
        return pulumi.get(self, "logout_path")

    @logout_path.setter
    def logout_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logout_path", value)

    @property
    @pulumi.getter(name="maxExpiryDurationInHours")
    def max_expiry_duration_in_hours(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The duration for which the OAuth2 success token should be cached before it is fetched again.
        """
        return pulumi.get(self, "max_expiry_duration_in_hours")

    @max_expiry_duration_in_hours.setter
    def max_expiry_duration_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_expiry_duration_in_hours", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) HTTP response code, can include context variables.
        """
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_code", value)

    @property
    @pulumi.getter(name="responseHeaderTransformations")
    def response_header_transformations(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsArgs']]:
        """
        (Updatable) A set of transformations to apply to HTTP headers that pass through the gateway.
        """
        return pulumi.get(self, "response_header_transformations")

    @response_header_transformations.setter
    def response_header_transformations(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsArgs']]):
        pulumi.set(self, "response_header_transformations", value)

    @property
    @pulumi.getter(name="responseMessage")
    def response_message(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) HTTP response message.
        """
        return pulumi.get(self, "response_message")

    @response_message.setter
    def response_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_message", value)

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Response Type.
        """
        return pulumi.get(self, "response_type")

    @response_type.setter
    def response_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_type", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) List of scopes.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetailsArgs']]:
        """
        (Updatable) Auth endpoint details.
        """
        return pulumi.get(self, "source_uri_details")

    @source_uri_details.setter
    def source_uri_details(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetailsArgs']]):
        pulumi.set(self, "source_uri_details", value)

    @property
    @pulumi.getter(name="useCookiesForIntermediateSteps")
    def use_cookies_for_intermediate_steps(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Defines whether or not to use cookies for OAuth2 intermediate steps.
        """
        return pulumi.get(self, "use_cookies_for_intermediate_steps")

    @use_cookies_for_intermediate_steps.setter
    def use_cookies_for_intermediate_steps(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_cookies_for_intermediate_steps", value)

    @property
    @pulumi.getter(name="useCookiesForSession")
    def use_cookies_for_session(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Defines whether or not to use cookies for session maintenance.
        """
        return pulumi.get(self, "use_cookies_for_session")

    @use_cookies_for_session.setter
    def use_cookies_for_session(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_cookies_for_session", value)

    @property
    @pulumi.getter(name="usePkce")
    def use_pkce(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Defines whether or not to support PKCE.
        """
        return pulumi.get(self, "use_pkce")

    @use_pkce.setter
    def use_pkce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_pkce", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetailsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret_id: Optional[pulumi.Input[str]] = None,
                 client_secret_version_number: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] client_id: (Updatable) Client ID for the OAuth2/OIDC app.
        :param pulumi.Input[str] client_secret_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        :param pulumi.Input[str] client_secret_version_number: (Updatable) The version number of the client secret to use.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            client_id=client_id,
            client_secret_id=client_secret_id,
            client_secret_version_number=client_secret_version_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             client_id: Optional[pulumi.Input[str]] = None,
             client_secret_id: Optional[pulumi.Input[str]] = None,
             client_secret_version_number: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if 'clientSecretId' in kwargs:
            client_secret_id = kwargs['clientSecretId']
        if 'clientSecretVersionNumber' in kwargs:
            client_secret_version_number = kwargs['clientSecretVersionNumber']

        _setter("type", type)
        if client_id is not None:
            _setter("client_id", client_id)
        if client_secret_id is not None:
            _setter("client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            _setter("client_secret_version_number", client_secret_version_number)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Client ID for the OAuth2/OIDC app.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        """
        return pulumi.get(self, "client_secret_id")

    @client_secret_id.setter
    def client_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret_id", value)

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The version number of the client secret to use.
        """
        return pulumi.get(self, "client_secret_version_number")

    @client_secret_version_number.setter
    def client_secret_version_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret_version_number", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsArgs:
    def __init__(__self__, *,
                 filter_headers: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs']] = None,
                 rename_headers: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs']] = None,
                 set_headers: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs']] = None):
        """
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs'] filter_headers: (Updatable) Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs'] rename_headers: (Updatable) Rename HTTP headers as they pass through the gateway.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs'] set_headers: (Updatable) Set HTTP headers as they pass through the gateway.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_headers=filter_headers,
            rename_headers=rename_headers,
            set_headers=set_headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_headers: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs']] = None,
             rename_headers: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs']] = None,
             set_headers: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'filterHeaders' in kwargs:
            filter_headers = kwargs['filterHeaders']
        if 'renameHeaders' in kwargs:
            rename_headers = kwargs['renameHeaders']
        if 'setHeaders' in kwargs:
            set_headers = kwargs['setHeaders']

        if filter_headers is not None:
            _setter("filter_headers", filter_headers)
        if rename_headers is not None:
            _setter("rename_headers", rename_headers)
        if set_headers is not None:
            _setter("set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs']]:
        """
        (Updatable) Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_headers")

    @filter_headers.setter
    def filter_headers(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs']]):
        pulumi.set(self, "filter_headers", value)

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs']]:
        """
        (Updatable) Rename HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "rename_headers")

    @rename_headers.setter
    def rename_headers(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs']]):
        pulumi.set(self, "rename_headers", value)

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs']]:
        """
        (Updatable) Set HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "set_headers")

    @set_headers.setter
    def set_headers(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs']]):
        pulumi.set(self, "set_headers", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs']]] items: (Updatable) The list of headers.
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs']]]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if items is not None:
            _setter("items", items)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs']]]]:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs']]] items: (Updatable) The list of headers.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs']]]]:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[str]] = None,
                 to: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_: (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[str] to: (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_=from_,
            to=to,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_: Optional[pulumi.Input[str]] = None,
             to: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'from' in kwargs:
            from_ = kwargs['from']

        if from_ is not None:
            _setter("from_", from_)
        if to is not None:
            _setter("to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs']]] items: (Updatable) The list of headers.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs']]]]:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs:
    def __init__(__self__, *,
                 if_exists: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] if_exists: (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            if_exists=if_exists,
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             if_exists: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ifExists' in kwargs:
            if_exists = kwargs['ifExists']

        if if_exists is not None:
            _setter("if_exists", if_exists)
        if name is not None:
            _setter("name", name)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")

    @if_exists.setter
    def if_exists(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "if_exists", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetailsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] uri: (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            uri=uri,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             uri: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("type", type)
        if uri is not None:
            _setter("uri", uri)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 additional_validation_policy: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyArgs']] = None,
                 client_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetailsArgs']] = None,
                 is_ssl_verify_disabled: Optional[pulumi.Input[bool]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeyArgs']]]] = None,
                 max_cache_duration_in_hours: Optional[pulumi.Input[int]] = None,
                 source_uri_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetailsArgs']] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyArgs'] additional_validation_policy: (Updatable) Additional JWT validation checks.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetailsArgs'] client_details: (Updatable) Client App Credential details.
        :param pulumi.Input[bool] is_ssl_verify_disabled: (Updatable) Defines whether or not to uphold SSL verification.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeyArgs']]] keys: (Updatable) The set of static public keys.
        :param pulumi.Input[int] max_cache_duration_in_hours: (Updatable) The duration for which the introspect URL response should be cached before it is fetched again.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetailsArgs'] source_uri_details: (Updatable) Auth endpoint details.
        :param pulumi.Input[str] uri: (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            additional_validation_policy=additional_validation_policy,
            client_details=client_details,
            is_ssl_verify_disabled=is_ssl_verify_disabled,
            keys=keys,
            max_cache_duration_in_hours=max_cache_duration_in_hours,
            source_uri_details=source_uri_details,
            uri=uri,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             additional_validation_policy: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyArgs']] = None,
             client_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetailsArgs']] = None,
             is_ssl_verify_disabled: Optional[pulumi.Input[bool]] = None,
             keys: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeyArgs']]]] = None,
             max_cache_duration_in_hours: Optional[pulumi.Input[int]] = None,
             source_uri_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetailsArgs']] = None,
             uri: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'additionalValidationPolicy' in kwargs:
            additional_validation_policy = kwargs['additionalValidationPolicy']
        if 'clientDetails' in kwargs:
            client_details = kwargs['clientDetails']
        if 'isSslVerifyDisabled' in kwargs:
            is_ssl_verify_disabled = kwargs['isSslVerifyDisabled']
        if 'maxCacheDurationInHours' in kwargs:
            max_cache_duration_in_hours = kwargs['maxCacheDurationInHours']
        if 'sourceUriDetails' in kwargs:
            source_uri_details = kwargs['sourceUriDetails']

        _setter("type", type)
        if additional_validation_policy is not None:
            _setter("additional_validation_policy", additional_validation_policy)
        if client_details is not None:
            _setter("client_details", client_details)
        if is_ssl_verify_disabled is not None:
            _setter("is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            _setter("keys", keys)
        if max_cache_duration_in_hours is not None:
            _setter("max_cache_duration_in_hours", max_cache_duration_in_hours)
        if source_uri_details is not None:
            _setter("source_uri_details", source_uri_details)
        if uri is not None:
            _setter("uri", uri)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="additionalValidationPolicy")
    def additional_validation_policy(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyArgs']]:
        """
        (Updatable) Additional JWT validation checks.
        """
        return pulumi.get(self, "additional_validation_policy")

    @additional_validation_policy.setter
    def additional_validation_policy(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyArgs']]):
        pulumi.set(self, "additional_validation_policy", value)

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetailsArgs']]:
        """
        (Updatable) Client App Credential details.
        """
        return pulumi.get(self, "client_details")

    @client_details.setter
    def client_details(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetailsArgs']]):
        pulumi.set(self, "client_details", value)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @is_ssl_verify_disabled.setter
    def is_ssl_verify_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ssl_verify_disabled", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeyArgs']]]]:
        """
        (Updatable) The set of static public keys.
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeyArgs']]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The duration for which the introspect URL response should be cached before it is fetched again.
        """
        return pulumi.get(self, "max_cache_duration_in_hours")

    @max_cache_duration_in_hours.setter
    def max_cache_duration_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_cache_duration_in_hours", value)

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetailsArgs']]:
        """
        (Updatable) Auth endpoint details.
        """
        return pulumi.get(self, "source_uri_details")

    @source_uri_details.setter
    def source_uri_details(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetailsArgs']]):
        pulumi.set(self, "source_uri_details", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyArgs:
    def __init__(__self__, *,
                 audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 issuers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 verify_claims: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: (Updatable) The list of intended recipients for the token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] issuers: (Updatable) A list of parties that could have issued the token.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimArgs']]] verify_claims: (Updatable) A list of claims which should be validated to consider the token valid.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            audiences=audiences,
            issuers=issuers,
            verify_claims=verify_claims,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             issuers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             verify_claims: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'verifyClaims' in kwargs:
            verify_claims = kwargs['verifyClaims']

        if audiences is not None:
            _setter("audiences", audiences)
        if issuers is not None:
            _setter("issuers", issuers)
        if verify_claims is not None:
            _setter("verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The list of intended recipients for the token.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter
    def issuers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of parties that could have issued the token.
        """
        return pulumi.get(self, "issuers")

    @issuers.setter
    def issuers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "issuers", value)

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimArgs']]]]:
        """
        (Updatable) A list of claims which should be validated to consider the token valid.
        """
        return pulumi.get(self, "verify_claims")

    @verify_claims.setter
    def verify_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimArgs']]]]):
        pulumi.set(self, "verify_claims", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimArgs:
    def __init__(__self__, *,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] is_required: (Updatable) Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        :param pulumi.Input[str] key: (Updatable) Information around the values for selector of an authentication/ routing branch.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_required=is_required,
            key=key,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_required: Optional[pulumi.Input[bool]] = None,
             key: Optional[pulumi.Input[str]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isRequired' in kwargs:
            is_required = kwargs['isRequired']

        if is_required is not None:
            _setter("is_required", is_required)
        if key is not None:
            _setter("key", key)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Information around the values for selector of an authentication/ routing branch.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetailsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret_id: Optional[pulumi.Input[str]] = None,
                 client_secret_version_number: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] client_id: (Updatable) Client ID for the OAuth2/OIDC app.
        :param pulumi.Input[str] client_secret_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        :param pulumi.Input[str] client_secret_version_number: (Updatable) The version number of the client secret to use.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            client_id=client_id,
            client_secret_id=client_secret_id,
            client_secret_version_number=client_secret_version_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             client_id: Optional[pulumi.Input[str]] = None,
             client_secret_id: Optional[pulumi.Input[str]] = None,
             client_secret_version_number: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if 'clientSecretId' in kwargs:
            client_secret_id = kwargs['clientSecretId']
        if 'clientSecretVersionNumber' in kwargs:
            client_secret_version_number = kwargs['clientSecretVersionNumber']

        _setter("type", type)
        if client_id is not None:
            _setter("client_id", client_id)
        if client_secret_id is not None:
            _setter("client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            _setter("client_secret_version_number", client_secret_version_number)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Client ID for the OAuth2/OIDC app.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        """
        return pulumi.get(self, "client_secret_id")

    @client_secret_id.setter
    def client_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret_id", value)

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The version number of the client secret to use.
        """
        return pulumi.get(self, "client_secret_version_number")

    @client_secret_version_number.setter
    def client_secret_version_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret_version_number", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeyArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 alg: Optional[pulumi.Input[str]] = None,
                 e: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_ops: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kid: Optional[pulumi.Input[str]] = None,
                 kty: Optional[pulumi.Input[str]] = None,
                 n: Optional[pulumi.Input[str]] = None,
                 use: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] format: (Updatable) The format of the public key.
        :param pulumi.Input[str] alg: (Updatable) The algorithm intended for use with this key.
        :param pulumi.Input[str] e: (Updatable) The base64 url encoded exponent of the RSA public key represented by this key.
        :param pulumi.Input[str] key: (Updatable) Information around the values for selector of an authentication/ routing branch.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_ops: (Updatable) The operations for which this key is to be used.
        :param pulumi.Input[str] kid: (Updatable) A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        :param pulumi.Input[str] kty: (Updatable) The key type.
        :param pulumi.Input[str] n: (Updatable) The base64 url encoded modulus of the RSA public key represented by this key.
        :param pulumi.Input[str] use: (Updatable) The intended use of the public key.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format=format,
            alg=alg,
            e=e,
            key=key,
            key_ops=key_ops,
            kid=kid,
            kty=kty,
            n=n,
            use=use,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format: pulumi.Input[str],
             alg: Optional[pulumi.Input[str]] = None,
             e: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             key_ops: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             kid: Optional[pulumi.Input[str]] = None,
             kty: Optional[pulumi.Input[str]] = None,
             n: Optional[pulumi.Input[str]] = None,
             use: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'keyOps' in kwargs:
            key_ops = kwargs['keyOps']

        _setter("format", format)
        if alg is not None:
            _setter("alg", alg)
        if e is not None:
            _setter("e", e)
        if key is not None:
            _setter("key", key)
        if key_ops is not None:
            _setter("key_ops", key_ops)
        if kid is not None:
            _setter("kid", kid)
        if kty is not None:
            _setter("kty", kty)
        if n is not None:
            _setter("n", n)
        if use is not None:
            _setter("use", use)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        """
        (Updatable) The format of the public key.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def alg(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The algorithm intended for use with this key.
        """
        return pulumi.get(self, "alg")

    @alg.setter
    def alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alg", value)

    @property
    @pulumi.getter
    def e(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The base64 url encoded exponent of the RSA public key represented by this key.
        """
        return pulumi.get(self, "e")

    @e.setter
    def e(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "e", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Information around the values for selector of an authentication/ routing branch.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The operations for which this key is to be used.
        """
        return pulumi.get(self, "key_ops")

    @key_ops.setter
    def key_ops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_ops", value)

    @property
    @pulumi.getter
    def kid(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        """
        return pulumi.get(self, "kid")

    @kid.setter
    def kid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kid", value)

    @property
    @pulumi.getter
    def kty(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key type.
        """
        return pulumi.get(self, "kty")

    @kty.setter
    def kty(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kty", value)

    @property
    @pulumi.getter
    def n(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The base64 url encoded modulus of the RSA public key represented by this key.
        """
        return pulumi.get(self, "n")

    @n.setter
    def n(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n", value)

    @property
    @pulumi.getter
    def use(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The intended use of the public key.
        """
        return pulumi.get(self, "use")

    @use.setter
    def use(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetailsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] uri: (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            uri=uri,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             uri: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("type", type)
        if uri is not None:
            _setter("uri", uri)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs:
    def __init__(__self__, *,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] is_required: (Updatable) Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        :param pulumi.Input[str] key: (Updatable) Information around the values for selector of an authentication/ routing branch.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaimArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_required=is_required,
            key=key,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_required: Optional[pulumi.Input[bool]] = None,
             key: Optional[pulumi.Input[str]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isRequired' in kwargs:
            is_required = kwargs['isRequired']

        if is_required is not None:
            _setter("is_required", is_required)
        if key is not None:
            _setter("key", key)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Information around the values for selector of an authentication/ routing branch.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesCorsArgs:
    def __init__(__self__, *,
                 allowed_origins: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allowed_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exposed_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_allow_credentials_enabled: Optional[pulumi.Input[bool]] = None,
                 max_age_in_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_origins: (Updatable) The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_headers: (Updatable) The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_methods: (Updatable) The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exposed_headers: (Updatable) The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        :param pulumi.Input[bool] is_allow_credentials_enabled: (Updatable) Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        :param pulumi.Input[int] max_age_in_seconds: (Updatable) The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        DeploymentSpecificationRequestPoliciesCorsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_origins=allowed_origins,
            allowed_headers=allowed_headers,
            allowed_methods=allowed_methods,
            exposed_headers=exposed_headers,
            is_allow_credentials_enabled=is_allow_credentials_enabled,
            max_age_in_seconds=max_age_in_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_origins: pulumi.Input[Sequence[pulumi.Input[str]]],
             allowed_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             allowed_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             exposed_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             is_allow_credentials_enabled: Optional[pulumi.Input[bool]] = None,
             max_age_in_seconds: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedOrigins' in kwargs:
            allowed_origins = kwargs['allowedOrigins']
        if 'allowedHeaders' in kwargs:
            allowed_headers = kwargs['allowedHeaders']
        if 'allowedMethods' in kwargs:
            allowed_methods = kwargs['allowedMethods']
        if 'exposedHeaders' in kwargs:
            exposed_headers = kwargs['exposedHeaders']
        if 'isAllowCredentialsEnabled' in kwargs:
            is_allow_credentials_enabled = kwargs['isAllowCredentialsEnabled']
        if 'maxAgeInSeconds' in kwargs:
            max_age_in_seconds = kwargs['maxAgeInSeconds']

        _setter("allowed_origins", allowed_origins)
        if allowed_headers is not None:
            _setter("allowed_headers", allowed_headers)
        if allowed_methods is not None:
            _setter("allowed_methods", allowed_methods)
        if exposed_headers is not None:
            _setter("exposed_headers", exposed_headers)
        if is_allow_credentials_enabled is not None:
            _setter("is_allow_credentials_enabled", is_allow_credentials_enabled)
        if max_age_in_seconds is not None:
            _setter("max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        (Updatable) The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        """
        return pulumi.get(self, "allowed_origins")

    @allowed_origins.setter
    def allowed_origins(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_origins", value)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        """
        return pulumi.get(self, "allowed_headers")

    @allowed_headers.setter
    def allowed_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_headers", value)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        """
        return pulumi.get(self, "allowed_methods")

    @allowed_methods.setter
    def allowed_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_methods", value)

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        """
        return pulumi.get(self, "exposed_headers")

    @exposed_headers.setter
    def exposed_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exposed_headers", value)

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        """
        return pulumi.get(self, "is_allow_credentials_enabled")

    @is_allow_credentials_enabled.setter
    def is_allow_credentials_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_allow_credentials_enabled", value)

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        return pulumi.get(self, "max_age_in_seconds")

    @max_age_in_seconds.setter
    def max_age_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age_in_seconds", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationArgs:
    def __init__(__self__, *,
                 authentication_servers: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerArgs']]],
                 selection_source: pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSourceArgs']):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerArgs']]] authentication_servers: (Updatable) List of authentication servers to choose from during dynamic authentication.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSourceArgs'] selection_source: (Updatable) Information around selector used for branching among routes/ authentication servers while dynamic routing/ authentication.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authentication_servers=authentication_servers,
            selection_source=selection_source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authentication_servers: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerArgs']]],
             selection_source: pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSourceArgs'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authenticationServers' in kwargs:
            authentication_servers = kwargs['authenticationServers']
        if 'selectionSource' in kwargs:
            selection_source = kwargs['selectionSource']

        _setter("authentication_servers", authentication_servers)
        _setter("selection_source", selection_source)

    @property
    @pulumi.getter(name="authenticationServers")
    def authentication_servers(self) -> pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerArgs']]]:
        """
        (Updatable) List of authentication servers to choose from during dynamic authentication.
        """
        return pulumi.get(self, "authentication_servers")

    @authentication_servers.setter
    def authentication_servers(self, value: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerArgs']]]):
        pulumi.set(self, "authentication_servers", value)

    @property
    @pulumi.getter(name="selectionSource")
    def selection_source(self) -> pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSourceArgs']:
        """
        (Updatable) Information around selector used for branching among routes/ authentication servers while dynamic routing/ authentication.
        """
        return pulumi.get(self, "selection_source")

    @selection_source.setter
    def selection_source(self, value: pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSourceArgs']):
        pulumi.set(self, "selection_source", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerArgs:
    def __init__(__self__, *,
                 authentication_server_detail: pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailArgs'],
                 key: pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKeyArgs']):
        """
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailArgs'] authentication_server_detail: (Updatable) Information on how to authenticate incoming requests.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKeyArgs'] key: (Updatable) Information around the values for selector of an authentication/ routing branch.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authentication_server_detail=authentication_server_detail,
            key=key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authentication_server_detail: pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailArgs'],
             key: pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKeyArgs'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authenticationServerDetail' in kwargs:
            authentication_server_detail = kwargs['authenticationServerDetail']

        _setter("authentication_server_detail", authentication_server_detail)
        _setter("key", key)

    @property
    @pulumi.getter(name="authenticationServerDetail")
    def authentication_server_detail(self) -> pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailArgs']:
        """
        (Updatable) Information on how to authenticate incoming requests.
        """
        return pulumi.get(self, "authentication_server_detail")

    @authentication_server_detail.setter
    def authentication_server_detail(self, value: pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailArgs']):
        pulumi.set(self, "authentication_server_detail", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKeyArgs']:
        """
        (Updatable) Information around the values for selector of an authentication/ routing branch.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKeyArgs']):
        pulumi.set(self, "key", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cache_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 is_anonymous_access_allowed: Optional[pulumi.Input[bool]] = None,
                 issuers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_clock_skew_in_seconds: Optional[pulumi.Input[float]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 public_keys: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs']] = None,
                 token_auth_scheme: Optional[pulumi.Input[str]] = None,
                 token_header: Optional[pulumi.Input[str]] = None,
                 token_query_param: Optional[pulumi.Input[str]] = None,
                 validation_failure_policy: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyArgs']] = None,
                 validation_policy: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyArgs']] = None,
                 verify_claims: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimArgs']]]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: (Updatable) The list of intended recipients for the token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cache_keys: (Updatable) A list of keys from "parameters" attribute value whose values will be added to the cache key.
        :param pulumi.Input[str] function_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        :param pulumi.Input[bool] is_anonymous_access_allowed: (Updatable) Whether an unauthenticated user may access the API. Must be "true" to enable ANONYMOUS route authorization.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] issuers: (Updatable) A list of parties that could have issued the token.
        :param pulumi.Input[float] max_clock_skew_in_seconds: (Updatable) The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
        :param pulumi.Input[Mapping[str, Any]] parameters: (Updatable)
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs'] public_keys: (Updatable) A set of Public Keys that will be used to verify the JWT signature.
        :param pulumi.Input[str] token_auth_scheme: (Updatable) The authentication scheme that is to be used when authenticating the token. This must to be provided if "tokenHeader" is specified.
        :param pulumi.Input[str] token_header: (Updatable) The name of the header containing the authentication token.
        :param pulumi.Input[str] token_query_param: (Updatable) The name of the query parameter containing the authentication token.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyArgs'] validation_failure_policy: (Updatable) Policy for defining behaviour on validation failure.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyArgs'] validation_policy: (Updatable) Authentication Policies for the Token Authentication types.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimArgs']]] verify_claims: (Updatable) A list of claims which should be validated to consider the token valid.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            audiences=audiences,
            cache_keys=cache_keys,
            function_id=function_id,
            is_anonymous_access_allowed=is_anonymous_access_allowed,
            issuers=issuers,
            max_clock_skew_in_seconds=max_clock_skew_in_seconds,
            parameters=parameters,
            public_keys=public_keys,
            token_auth_scheme=token_auth_scheme,
            token_header=token_header,
            token_query_param=token_query_param,
            validation_failure_policy=validation_failure_policy,
            validation_policy=validation_policy,
            verify_claims=verify_claims,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             cache_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             function_id: Optional[pulumi.Input[str]] = None,
             is_anonymous_access_allowed: Optional[pulumi.Input[bool]] = None,
             issuers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             max_clock_skew_in_seconds: Optional[pulumi.Input[float]] = None,
             parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             public_keys: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs']] = None,
             token_auth_scheme: Optional[pulumi.Input[str]] = None,
             token_header: Optional[pulumi.Input[str]] = None,
             token_query_param: Optional[pulumi.Input[str]] = None,
             validation_failure_policy: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyArgs']] = None,
             validation_policy: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyArgs']] = None,
             verify_claims: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cacheKeys' in kwargs:
            cache_keys = kwargs['cacheKeys']
        if 'functionId' in kwargs:
            function_id = kwargs['functionId']
        if 'isAnonymousAccessAllowed' in kwargs:
            is_anonymous_access_allowed = kwargs['isAnonymousAccessAllowed']
        if 'maxClockSkewInSeconds' in kwargs:
            max_clock_skew_in_seconds = kwargs['maxClockSkewInSeconds']
        if 'publicKeys' in kwargs:
            public_keys = kwargs['publicKeys']
        if 'tokenAuthScheme' in kwargs:
            token_auth_scheme = kwargs['tokenAuthScheme']
        if 'tokenHeader' in kwargs:
            token_header = kwargs['tokenHeader']
        if 'tokenQueryParam' in kwargs:
            token_query_param = kwargs['tokenQueryParam']
        if 'validationFailurePolicy' in kwargs:
            validation_failure_policy = kwargs['validationFailurePolicy']
        if 'validationPolicy' in kwargs:
            validation_policy = kwargs['validationPolicy']
        if 'verifyClaims' in kwargs:
            verify_claims = kwargs['verifyClaims']

        _setter("type", type)
        if audiences is not None:
            _setter("audiences", audiences)
        if cache_keys is not None:
            _setter("cache_keys", cache_keys)
        if function_id is not None:
            _setter("function_id", function_id)
        if is_anonymous_access_allowed is not None:
            _setter("is_anonymous_access_allowed", is_anonymous_access_allowed)
        if issuers is not None:
            _setter("issuers", issuers)
        if max_clock_skew_in_seconds is not None:
            _setter("max_clock_skew_in_seconds", max_clock_skew_in_seconds)
        if parameters is not None:
            _setter("parameters", parameters)
        if public_keys is not None:
            _setter("public_keys", public_keys)
        if token_auth_scheme is not None:
            _setter("token_auth_scheme", token_auth_scheme)
        if token_header is not None:
            _setter("token_header", token_header)
        if token_query_param is not None:
            _setter("token_query_param", token_query_param)
        if validation_failure_policy is not None:
            _setter("validation_failure_policy", validation_failure_policy)
        if validation_policy is not None:
            _setter("validation_policy", validation_policy)
        if verify_claims is not None:
            _setter("verify_claims", verify_claims)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The list of intended recipients for the token.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter(name="cacheKeys")
    def cache_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of keys from "parameters" attribute value whose values will be added to the cache key.
        """
        return pulumi.get(self, "cache_keys")

    @cache_keys.setter
    def cache_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cache_keys", value)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Whether an unauthenticated user may access the API. Must be "true" to enable ANONYMOUS route authorization.
        """
        return pulumi.get(self, "is_anonymous_access_allowed")

    @is_anonymous_access_allowed.setter
    def is_anonymous_access_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_anonymous_access_allowed", value)

    @property
    @pulumi.getter
    def issuers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of parties that could have issued the token.
        """
        return pulumi.get(self, "issuers")

    @issuers.setter
    def issuers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "issuers", value)

    @property
    @pulumi.getter(name="maxClockSkewInSeconds")
    def max_clock_skew_in_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        (Updatable) The maximum expected time difference between the system clocks of the token issuer and the API Gateway.
        """
        return pulumi.get(self, "max_clock_skew_in_seconds")

    @max_clock_skew_in_seconds.setter
    def max_clock_skew_in_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_clock_skew_in_seconds", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable)
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs']]:
        """
        (Updatable) A set of Public Keys that will be used to verify the JWT signature.
        """
        return pulumi.get(self, "public_keys")

    @public_keys.setter
    def public_keys(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs']]):
        pulumi.set(self, "public_keys", value)

    @property
    @pulumi.getter(name="tokenAuthScheme")
    def token_auth_scheme(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The authentication scheme that is to be used when authenticating the token. This must to be provided if "tokenHeader" is specified.
        """
        return pulumi.get(self, "token_auth_scheme")

    @token_auth_scheme.setter
    def token_auth_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_auth_scheme", value)

    @property
    @pulumi.getter(name="tokenHeader")
    def token_header(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The name of the header containing the authentication token.
        """
        return pulumi.get(self, "token_header")

    @token_header.setter
    def token_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_header", value)

    @property
    @pulumi.getter(name="tokenQueryParam")
    def token_query_param(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The name of the query parameter containing the authentication token.
        """
        return pulumi.get(self, "token_query_param")

    @token_query_param.setter
    def token_query_param(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_query_param", value)

    @property
    @pulumi.getter(name="validationFailurePolicy")
    def validation_failure_policy(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyArgs']]:
        """
        (Updatable) Policy for defining behaviour on validation failure.
        """
        return pulumi.get(self, "validation_failure_policy")

    @validation_failure_policy.setter
    def validation_failure_policy(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyArgs']]):
        pulumi.set(self, "validation_failure_policy", value)

    @property
    @pulumi.getter(name="validationPolicy")
    def validation_policy(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyArgs']]:
        """
        (Updatable) Authentication Policies for the Token Authentication types.
        """
        return pulumi.get(self, "validation_policy")

    @validation_policy.setter
    def validation_policy(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyArgs']]):
        pulumi.set(self, "validation_policy", value)

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimArgs']]]]:
        """
        (Updatable) A list of claims which should be validated to consider the token valid.
        """
        return pulumi.get(self, "verify_claims")

    @verify_claims.setter
    def verify_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimArgs']]]]):
        pulumi.set(self, "verify_claims", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 is_ssl_verify_disabled: Optional[pulumi.Input[bool]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKeyArgs']]]] = None,
                 max_cache_duration_in_hours: Optional[pulumi.Input[int]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[bool] is_ssl_verify_disabled: (Updatable) Defines whether or not to uphold SSL verification.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKeyArgs']]] keys: (Updatable) The set of static public keys.
        :param pulumi.Input[int] max_cache_duration_in_hours: (Updatable) The duration for which the introspect URL response should be cached before it is fetched again.
        :param pulumi.Input[str] uri: (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            is_ssl_verify_disabled=is_ssl_verify_disabled,
            keys=keys,
            max_cache_duration_in_hours=max_cache_duration_in_hours,
            uri=uri,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             is_ssl_verify_disabled: Optional[pulumi.Input[bool]] = None,
             keys: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKeyArgs']]]] = None,
             max_cache_duration_in_hours: Optional[pulumi.Input[int]] = None,
             uri: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isSslVerifyDisabled' in kwargs:
            is_ssl_verify_disabled = kwargs['isSslVerifyDisabled']
        if 'maxCacheDurationInHours' in kwargs:
            max_cache_duration_in_hours = kwargs['maxCacheDurationInHours']

        _setter("type", type)
        if is_ssl_verify_disabled is not None:
            _setter("is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            _setter("keys", keys)
        if max_cache_duration_in_hours is not None:
            _setter("max_cache_duration_in_hours", max_cache_duration_in_hours)
        if uri is not None:
            _setter("uri", uri)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @is_ssl_verify_disabled.setter
    def is_ssl_verify_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ssl_verify_disabled", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKeyArgs']]]]:
        """
        (Updatable) The set of static public keys.
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKeyArgs']]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The duration for which the introspect URL response should be cached before it is fetched again.
        """
        return pulumi.get(self, "max_cache_duration_in_hours")

    @max_cache_duration_in_hours.setter
    def max_cache_duration_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_cache_duration_in_hours", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKeyArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 alg: Optional[pulumi.Input[str]] = None,
                 e: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_ops: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kid: Optional[pulumi.Input[str]] = None,
                 kty: Optional[pulumi.Input[str]] = None,
                 n: Optional[pulumi.Input[str]] = None,
                 use: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] format: (Updatable) The format of the public key.
        :param pulumi.Input[str] alg: (Updatable) The algorithm intended for use with this key.
        :param pulumi.Input[str] e: (Updatable) The base64 url encoded exponent of the RSA public key represented by this key.
        :param pulumi.Input[str] key: (Updatable) Information around the values for selector of an authentication/ routing branch.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_ops: (Updatable) The operations for which this key is to be used.
        :param pulumi.Input[str] kid: (Updatable) A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        :param pulumi.Input[str] kty: (Updatable) The key type.
        :param pulumi.Input[str] n: (Updatable) The base64 url encoded modulus of the RSA public key represented by this key.
        :param pulumi.Input[str] use: (Updatable) The intended use of the public key.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format=format,
            alg=alg,
            e=e,
            key=key,
            key_ops=key_ops,
            kid=kid,
            kty=kty,
            n=n,
            use=use,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format: pulumi.Input[str],
             alg: Optional[pulumi.Input[str]] = None,
             e: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             key_ops: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             kid: Optional[pulumi.Input[str]] = None,
             kty: Optional[pulumi.Input[str]] = None,
             n: Optional[pulumi.Input[str]] = None,
             use: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'keyOps' in kwargs:
            key_ops = kwargs['keyOps']

        _setter("format", format)
        if alg is not None:
            _setter("alg", alg)
        if e is not None:
            _setter("e", e)
        if key is not None:
            _setter("key", key)
        if key_ops is not None:
            _setter("key_ops", key_ops)
        if kid is not None:
            _setter("kid", kid)
        if kty is not None:
            _setter("kty", kty)
        if n is not None:
            _setter("n", n)
        if use is not None:
            _setter("use", use)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        """
        (Updatable) The format of the public key.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def alg(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The algorithm intended for use with this key.
        """
        return pulumi.get(self, "alg")

    @alg.setter
    def alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alg", value)

    @property
    @pulumi.getter
    def e(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The base64 url encoded exponent of the RSA public key represented by this key.
        """
        return pulumi.get(self, "e")

    @e.setter
    def e(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "e", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Information around the values for selector of an authentication/ routing branch.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The operations for which this key is to be used.
        """
        return pulumi.get(self, "key_ops")

    @key_ops.setter
    def key_ops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_ops", value)

    @property
    @pulumi.getter
    def kid(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        """
        return pulumi.get(self, "kid")

    @kid.setter
    def kid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kid", value)

    @property
    @pulumi.getter
    def kty(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key type.
        """
        return pulumi.get(self, "kty")

    @kty.setter
    def kty(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kty", value)

    @property
    @pulumi.getter
    def n(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The base64 url encoded modulus of the RSA public key represented by this key.
        """
        return pulumi.get(self, "n")

    @n.setter
    def n(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n", value)

    @property
    @pulumi.getter
    def use(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The intended use of the public key.
        """
        return pulumi.get(self, "use")

    @use.setter
    def use(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 client_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailsArgs']] = None,
                 fallback_redirect_path: Optional[pulumi.Input[str]] = None,
                 logout_path: Optional[pulumi.Input[str]] = None,
                 max_expiry_duration_in_hours: Optional[pulumi.Input[int]] = None,
                 response_code: Optional[pulumi.Input[str]] = None,
                 response_header_transformations: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsArgs']] = None,
                 response_message: Optional[pulumi.Input[str]] = None,
                 response_type: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_uri_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailsArgs']] = None,
                 use_cookies_for_intermediate_steps: Optional[pulumi.Input[bool]] = None,
                 use_cookies_for_session: Optional[pulumi.Input[bool]] = None,
                 use_pkce: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailsArgs'] client_details: (Updatable) Client App Credential details.
        :param pulumi.Input[str] fallback_redirect_path: (Updatable) The path to be used as fallback after OAuth2.
        :param pulumi.Input[str] logout_path: (Updatable) The path to be used as logout.
        :param pulumi.Input[int] max_expiry_duration_in_hours: (Updatable) The duration for which the OAuth2 success token should be cached before it is fetched again.
        :param pulumi.Input[str] response_code: (Updatable) HTTP response code, can include context variables.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsArgs'] response_header_transformations: (Updatable) A set of transformations to apply to HTTP headers that pass through the gateway.
        :param pulumi.Input[str] response_message: (Updatable) HTTP response message.
        :param pulumi.Input[str] response_type: (Updatable) Response Type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: (Updatable) List of scopes.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailsArgs'] source_uri_details: (Updatable) Auth endpoint details.
        :param pulumi.Input[bool] use_cookies_for_intermediate_steps: (Updatable) Defines whether or not to use cookies for OAuth2 intermediate steps.
        :param pulumi.Input[bool] use_cookies_for_session: (Updatable) Defines whether or not to use cookies for session maintenance.
        :param pulumi.Input[bool] use_pkce: (Updatable) Defines whether or not to support PKCE.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            client_details=client_details,
            fallback_redirect_path=fallback_redirect_path,
            logout_path=logout_path,
            max_expiry_duration_in_hours=max_expiry_duration_in_hours,
            response_code=response_code,
            response_header_transformations=response_header_transformations,
            response_message=response_message,
            response_type=response_type,
            scopes=scopes,
            source_uri_details=source_uri_details,
            use_cookies_for_intermediate_steps=use_cookies_for_intermediate_steps,
            use_cookies_for_session=use_cookies_for_session,
            use_pkce=use_pkce,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             client_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailsArgs']] = None,
             fallback_redirect_path: Optional[pulumi.Input[str]] = None,
             logout_path: Optional[pulumi.Input[str]] = None,
             max_expiry_duration_in_hours: Optional[pulumi.Input[int]] = None,
             response_code: Optional[pulumi.Input[str]] = None,
             response_header_transformations: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsArgs']] = None,
             response_message: Optional[pulumi.Input[str]] = None,
             response_type: Optional[pulumi.Input[str]] = None,
             scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             source_uri_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailsArgs']] = None,
             use_cookies_for_intermediate_steps: Optional[pulumi.Input[bool]] = None,
             use_cookies_for_session: Optional[pulumi.Input[bool]] = None,
             use_pkce: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientDetails' in kwargs:
            client_details = kwargs['clientDetails']
        if 'fallbackRedirectPath' in kwargs:
            fallback_redirect_path = kwargs['fallbackRedirectPath']
        if 'logoutPath' in kwargs:
            logout_path = kwargs['logoutPath']
        if 'maxExpiryDurationInHours' in kwargs:
            max_expiry_duration_in_hours = kwargs['maxExpiryDurationInHours']
        if 'responseCode' in kwargs:
            response_code = kwargs['responseCode']
        if 'responseHeaderTransformations' in kwargs:
            response_header_transformations = kwargs['responseHeaderTransformations']
        if 'responseMessage' in kwargs:
            response_message = kwargs['responseMessage']
        if 'responseType' in kwargs:
            response_type = kwargs['responseType']
        if 'sourceUriDetails' in kwargs:
            source_uri_details = kwargs['sourceUriDetails']
        if 'useCookiesForIntermediateSteps' in kwargs:
            use_cookies_for_intermediate_steps = kwargs['useCookiesForIntermediateSteps']
        if 'useCookiesForSession' in kwargs:
            use_cookies_for_session = kwargs['useCookiesForSession']
        if 'usePkce' in kwargs:
            use_pkce = kwargs['usePkce']

        _setter("type", type)
        if client_details is not None:
            _setter("client_details", client_details)
        if fallback_redirect_path is not None:
            _setter("fallback_redirect_path", fallback_redirect_path)
        if logout_path is not None:
            _setter("logout_path", logout_path)
        if max_expiry_duration_in_hours is not None:
            _setter("max_expiry_duration_in_hours", max_expiry_duration_in_hours)
        if response_code is not None:
            _setter("response_code", response_code)
        if response_header_transformations is not None:
            _setter("response_header_transformations", response_header_transformations)
        if response_message is not None:
            _setter("response_message", response_message)
        if response_type is not None:
            _setter("response_type", response_type)
        if scopes is not None:
            _setter("scopes", scopes)
        if source_uri_details is not None:
            _setter("source_uri_details", source_uri_details)
        if use_cookies_for_intermediate_steps is not None:
            _setter("use_cookies_for_intermediate_steps", use_cookies_for_intermediate_steps)
        if use_cookies_for_session is not None:
            _setter("use_cookies_for_session", use_cookies_for_session)
        if use_pkce is not None:
            _setter("use_pkce", use_pkce)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailsArgs']]:
        """
        (Updatable) Client App Credential details.
        """
        return pulumi.get(self, "client_details")

    @client_details.setter
    def client_details(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailsArgs']]):
        pulumi.set(self, "client_details", value)

    @property
    @pulumi.getter(name="fallbackRedirectPath")
    def fallback_redirect_path(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The path to be used as fallback after OAuth2.
        """
        return pulumi.get(self, "fallback_redirect_path")

    @fallback_redirect_path.setter
    def fallback_redirect_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fallback_redirect_path", value)

    @property
    @pulumi.getter(name="logoutPath")
    def logout_path(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The path to be used as logout.
        """
        return pulumi.get(self, "logout_path")

    @logout_path.setter
    def logout_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logout_path", value)

    @property
    @pulumi.getter(name="maxExpiryDurationInHours")
    def max_expiry_duration_in_hours(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The duration for which the OAuth2 success token should be cached before it is fetched again.
        """
        return pulumi.get(self, "max_expiry_duration_in_hours")

    @max_expiry_duration_in_hours.setter
    def max_expiry_duration_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_expiry_duration_in_hours", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) HTTP response code, can include context variables.
        """
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_code", value)

    @property
    @pulumi.getter(name="responseHeaderTransformations")
    def response_header_transformations(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsArgs']]:
        """
        (Updatable) A set of transformations to apply to HTTP headers that pass through the gateway.
        """
        return pulumi.get(self, "response_header_transformations")

    @response_header_transformations.setter
    def response_header_transformations(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsArgs']]):
        pulumi.set(self, "response_header_transformations", value)

    @property
    @pulumi.getter(name="responseMessage")
    def response_message(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) HTTP response message.
        """
        return pulumi.get(self, "response_message")

    @response_message.setter
    def response_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_message", value)

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Response Type.
        """
        return pulumi.get(self, "response_type")

    @response_type.setter
    def response_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_type", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) List of scopes.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailsArgs']]:
        """
        (Updatable) Auth endpoint details.
        """
        return pulumi.get(self, "source_uri_details")

    @source_uri_details.setter
    def source_uri_details(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailsArgs']]):
        pulumi.set(self, "source_uri_details", value)

    @property
    @pulumi.getter(name="useCookiesForIntermediateSteps")
    def use_cookies_for_intermediate_steps(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Defines whether or not to use cookies for OAuth2 intermediate steps.
        """
        return pulumi.get(self, "use_cookies_for_intermediate_steps")

    @use_cookies_for_intermediate_steps.setter
    def use_cookies_for_intermediate_steps(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_cookies_for_intermediate_steps", value)

    @property
    @pulumi.getter(name="useCookiesForSession")
    def use_cookies_for_session(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Defines whether or not to use cookies for session maintenance.
        """
        return pulumi.get(self, "use_cookies_for_session")

    @use_cookies_for_session.setter
    def use_cookies_for_session(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_cookies_for_session", value)

    @property
    @pulumi.getter(name="usePkce")
    def use_pkce(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Defines whether or not to support PKCE.
        """
        return pulumi.get(self, "use_pkce")

    @use_pkce.setter
    def use_pkce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_pkce", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret_id: Optional[pulumi.Input[str]] = None,
                 client_secret_version_number: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] client_id: (Updatable) Client ID for the OAuth2/OIDC app.
        :param pulumi.Input[str] client_secret_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        :param pulumi.Input[str] client_secret_version_number: (Updatable) The version number of the client secret to use.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            client_id=client_id,
            client_secret_id=client_secret_id,
            client_secret_version_number=client_secret_version_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             client_id: Optional[pulumi.Input[str]] = None,
             client_secret_id: Optional[pulumi.Input[str]] = None,
             client_secret_version_number: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if 'clientSecretId' in kwargs:
            client_secret_id = kwargs['clientSecretId']
        if 'clientSecretVersionNumber' in kwargs:
            client_secret_version_number = kwargs['clientSecretVersionNumber']

        _setter("type", type)
        if client_id is not None:
            _setter("client_id", client_id)
        if client_secret_id is not None:
            _setter("client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            _setter("client_secret_version_number", client_secret_version_number)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Client ID for the OAuth2/OIDC app.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        """
        return pulumi.get(self, "client_secret_id")

    @client_secret_id.setter
    def client_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret_id", value)

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The version number of the client secret to use.
        """
        return pulumi.get(self, "client_secret_version_number")

    @client_secret_version_number.setter
    def client_secret_version_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret_version_number", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsArgs:
    def __init__(__self__, *,
                 filter_headers: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs']] = None,
                 rename_headers: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs']] = None,
                 set_headers: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs']] = None):
        """
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs'] filter_headers: (Updatable) Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs'] rename_headers: (Updatable) Rename HTTP headers as they pass through the gateway.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs'] set_headers: (Updatable) Set HTTP headers as they pass through the gateway.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_headers=filter_headers,
            rename_headers=rename_headers,
            set_headers=set_headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_headers: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs']] = None,
             rename_headers: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs']] = None,
             set_headers: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'filterHeaders' in kwargs:
            filter_headers = kwargs['filterHeaders']
        if 'renameHeaders' in kwargs:
            rename_headers = kwargs['renameHeaders']
        if 'setHeaders' in kwargs:
            set_headers = kwargs['setHeaders']

        if filter_headers is not None:
            _setter("filter_headers", filter_headers)
        if rename_headers is not None:
            _setter("rename_headers", rename_headers)
        if set_headers is not None:
            _setter("set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs']]:
        """
        (Updatable) Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_headers")

    @filter_headers.setter
    def filter_headers(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs']]):
        pulumi.set(self, "filter_headers", value)

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs']]:
        """
        (Updatable) Rename HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "rename_headers")

    @rename_headers.setter
    def rename_headers(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs']]):
        pulumi.set(self, "rename_headers", value)

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs']]:
        """
        (Updatable) Set HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "set_headers")

    @set_headers.setter
    def set_headers(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs']]):
        pulumi.set(self, "set_headers", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs']]] items: (Updatable) The list of headers.
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs']]]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if items is not None:
            _setter("items", items)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs']]]]:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs']]] items: (Updatable) The list of headers.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs']]]]:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[str]] = None,
                 to: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_: (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[str] to: (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_=from_,
            to=to,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_: Optional[pulumi.Input[str]] = None,
             to: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'from' in kwargs:
            from_ = kwargs['from']

        if from_ is not None:
            _setter("from_", from_)
        if to is not None:
            _setter("to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs']]] items: (Updatable) The list of headers.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if items is not None:
            _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs']]]]:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs:
    def __init__(__self__, *,
                 if_exists: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] if_exists: (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            if_exists=if_exists,
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             if_exists: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ifExists' in kwargs:
            if_exists = kwargs['ifExists']

        if if_exists is not None:
            _setter("if_exists", if_exists)
        if name is not None:
            _setter("name", name)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")

    @if_exists.setter
    def if_exists(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "if_exists", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] uri: (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            uri=uri,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             uri: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("type", type)
        if uri is not None:
            _setter("uri", uri)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 additional_validation_policy: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyArgs']] = None,
                 client_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailsArgs']] = None,
                 is_ssl_verify_disabled: Optional[pulumi.Input[bool]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyArgs']]]] = None,
                 max_cache_duration_in_hours: Optional[pulumi.Input[int]] = None,
                 source_uri_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailsArgs']] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyArgs'] additional_validation_policy: (Updatable) Additional JWT validation checks.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailsArgs'] client_details: (Updatable) Client App Credential details.
        :param pulumi.Input[bool] is_ssl_verify_disabled: (Updatable) Defines whether or not to uphold SSL verification.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyArgs']]] keys: (Updatable) The set of static public keys.
        :param pulumi.Input[int] max_cache_duration_in_hours: (Updatable) The duration for which the introspect URL response should be cached before it is fetched again.
        :param pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailsArgs'] source_uri_details: (Updatable) Auth endpoint details.
        :param pulumi.Input[str] uri: (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            additional_validation_policy=additional_validation_policy,
            client_details=client_details,
            is_ssl_verify_disabled=is_ssl_verify_disabled,
            keys=keys,
            max_cache_duration_in_hours=max_cache_duration_in_hours,
            source_uri_details=source_uri_details,
            uri=uri,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             additional_validation_policy: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyArgs']] = None,
             client_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailsArgs']] = None,
             is_ssl_verify_disabled: Optional[pulumi.Input[bool]] = None,
             keys: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyArgs']]]] = None,
             max_cache_duration_in_hours: Optional[pulumi.Input[int]] = None,
             source_uri_details: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailsArgs']] = None,
             uri: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'additionalValidationPolicy' in kwargs:
            additional_validation_policy = kwargs['additionalValidationPolicy']
        if 'clientDetails' in kwargs:
            client_details = kwargs['clientDetails']
        if 'isSslVerifyDisabled' in kwargs:
            is_ssl_verify_disabled = kwargs['isSslVerifyDisabled']
        if 'maxCacheDurationInHours' in kwargs:
            max_cache_duration_in_hours = kwargs['maxCacheDurationInHours']
        if 'sourceUriDetails' in kwargs:
            source_uri_details = kwargs['sourceUriDetails']

        _setter("type", type)
        if additional_validation_policy is not None:
            _setter("additional_validation_policy", additional_validation_policy)
        if client_details is not None:
            _setter("client_details", client_details)
        if is_ssl_verify_disabled is not None:
            _setter("is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            _setter("keys", keys)
        if max_cache_duration_in_hours is not None:
            _setter("max_cache_duration_in_hours", max_cache_duration_in_hours)
        if source_uri_details is not None:
            _setter("source_uri_details", source_uri_details)
        if uri is not None:
            _setter("uri", uri)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="additionalValidationPolicy")
    def additional_validation_policy(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyArgs']]:
        """
        (Updatable) Additional JWT validation checks.
        """
        return pulumi.get(self, "additional_validation_policy")

    @additional_validation_policy.setter
    def additional_validation_policy(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyArgs']]):
        pulumi.set(self, "additional_validation_policy", value)

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailsArgs']]:
        """
        (Updatable) Client App Credential details.
        """
        return pulumi.get(self, "client_details")

    @client_details.setter
    def client_details(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailsArgs']]):
        pulumi.set(self, "client_details", value)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @is_ssl_verify_disabled.setter
    def is_ssl_verify_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ssl_verify_disabled", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyArgs']]]]:
        """
        (Updatable) The set of static public keys.
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyArgs']]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The duration for which the introspect URL response should be cached before it is fetched again.
        """
        return pulumi.get(self, "max_cache_duration_in_hours")

    @max_cache_duration_in_hours.setter
    def max_cache_duration_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_cache_duration_in_hours", value)

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailsArgs']]:
        """
        (Updatable) Auth endpoint details.
        """
        return pulumi.get(self, "source_uri_details")

    @source_uri_details.setter
    def source_uri_details(self, value: Optional[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailsArgs']]):
        pulumi.set(self, "source_uri_details", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyArgs:
    def __init__(__self__, *,
                 audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 issuers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 verify_claims: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: (Updatable) The list of intended recipients for the token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] issuers: (Updatable) A list of parties that could have issued the token.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimArgs']]] verify_claims: (Updatable) A list of claims which should be validated to consider the token valid.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            audiences=audiences,
            issuers=issuers,
            verify_claims=verify_claims,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             issuers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             verify_claims: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'verifyClaims' in kwargs:
            verify_claims = kwargs['verifyClaims']

        if audiences is not None:
            _setter("audiences", audiences)
        if issuers is not None:
            _setter("issuers", issuers)
        if verify_claims is not None:
            _setter("verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The list of intended recipients for the token.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter
    def issuers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of parties that could have issued the token.
        """
        return pulumi.get(self, "issuers")

    @issuers.setter
    def issuers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "issuers", value)

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimArgs']]]]:
        """
        (Updatable) A list of claims which should be validated to consider the token valid.
        """
        return pulumi.get(self, "verify_claims")

    @verify_claims.setter
    def verify_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimArgs']]]]):
        pulumi.set(self, "verify_claims", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimArgs:
    def __init__(__self__, *,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] is_required: (Updatable) Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        :param pulumi.Input[str] key: (Updatable) Information around the values for selector of an authentication/ routing branch.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_required=is_required,
            key=key,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_required: Optional[pulumi.Input[bool]] = None,
             key: Optional[pulumi.Input[str]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isRequired' in kwargs:
            is_required = kwargs['isRequired']

        if is_required is not None:
            _setter("is_required", is_required)
        if key is not None:
            _setter("key", key)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Information around the values for selector of an authentication/ routing branch.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret_id: Optional[pulumi.Input[str]] = None,
                 client_secret_version_number: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] client_id: (Updatable) Client ID for the OAuth2/OIDC app.
        :param pulumi.Input[str] client_secret_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        :param pulumi.Input[str] client_secret_version_number: (Updatable) The version number of the client secret to use.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            client_id=client_id,
            client_secret_id=client_secret_id,
            client_secret_version_number=client_secret_version_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             client_id: Optional[pulumi.Input[str]] = None,
             client_secret_id: Optional[pulumi.Input[str]] = None,
             client_secret_version_number: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if 'clientSecretId' in kwargs:
            client_secret_id = kwargs['clientSecretId']
        if 'clientSecretVersionNumber' in kwargs:
            client_secret_version_number = kwargs['clientSecretVersionNumber']

        _setter("type", type)
        if client_id is not None:
            _setter("client_id", client_id)
        if client_secret_id is not None:
            _setter("client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            _setter("client_secret_version_number", client_secret_version_number)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Client ID for the OAuth2/OIDC app.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        """
        return pulumi.get(self, "client_secret_id")

    @client_secret_id.setter
    def client_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret_id", value)

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The version number of the client secret to use.
        """
        return pulumi.get(self, "client_secret_version_number")

    @client_secret_version_number.setter
    def client_secret_version_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret_version_number", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 alg: Optional[pulumi.Input[str]] = None,
                 e: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_ops: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kid: Optional[pulumi.Input[str]] = None,
                 kty: Optional[pulumi.Input[str]] = None,
                 n: Optional[pulumi.Input[str]] = None,
                 use: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] format: (Updatable) The format of the public key.
        :param pulumi.Input[str] alg: (Updatable) The algorithm intended for use with this key.
        :param pulumi.Input[str] e: (Updatable) The base64 url encoded exponent of the RSA public key represented by this key.
        :param pulumi.Input[str] key: (Updatable) Information around the values for selector of an authentication/ routing branch.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_ops: (Updatable) The operations for which this key is to be used.
        :param pulumi.Input[str] kid: (Updatable) A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        :param pulumi.Input[str] kty: (Updatable) The key type.
        :param pulumi.Input[str] n: (Updatable) The base64 url encoded modulus of the RSA public key represented by this key.
        :param pulumi.Input[str] use: (Updatable) The intended use of the public key.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format=format,
            alg=alg,
            e=e,
            key=key,
            key_ops=key_ops,
            kid=kid,
            kty=kty,
            n=n,
            use=use,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format: pulumi.Input[str],
             alg: Optional[pulumi.Input[str]] = None,
             e: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             key_ops: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             kid: Optional[pulumi.Input[str]] = None,
             kty: Optional[pulumi.Input[str]] = None,
             n: Optional[pulumi.Input[str]] = None,
             use: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'keyOps' in kwargs:
            key_ops = kwargs['keyOps']

        _setter("format", format)
        if alg is not None:
            _setter("alg", alg)
        if e is not None:
            _setter("e", e)
        if key is not None:
            _setter("key", key)
        if key_ops is not None:
            _setter("key_ops", key_ops)
        if kid is not None:
            _setter("kid", kid)
        if kty is not None:
            _setter("kty", kty)
        if n is not None:
            _setter("n", n)
        if use is not None:
            _setter("use", use)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        """
        (Updatable) The format of the public key.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def alg(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The algorithm intended for use with this key.
        """
        return pulumi.get(self, "alg")

    @alg.setter
    def alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alg", value)

    @property
    @pulumi.getter
    def e(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The base64 url encoded exponent of the RSA public key represented by this key.
        """
        return pulumi.get(self, "e")

    @e.setter
    def e(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "e", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Information around the values for selector of an authentication/ routing branch.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The operations for which this key is to be used.
        """
        return pulumi.get(self, "key_ops")

    @key_ops.setter
    def key_ops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_ops", value)

    @property
    @pulumi.getter
    def kid(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A unique key ID. This key will be used to verify the signature of a JWT with matching "kid".
        """
        return pulumi.get(self, "kid")

    @kid.setter
    def kid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kid", value)

    @property
    @pulumi.getter
    def kty(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key type.
        """
        return pulumi.get(self, "kty")

    @kty.setter
    def kty(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kty", value)

    @property
    @pulumi.getter
    def n(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The base64 url encoded modulus of the RSA public key represented by this key.
        """
        return pulumi.get(self, "n")

    @n.setter
    def n(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n", value)

    @property
    @pulumi.getter
    def use(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The intended use of the public key.
        """
        return pulumi.get(self, "use")

    @use.setter
    def use(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] uri: (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            uri=uri,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             uri: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("type", type)
        if uri is not None:
            _setter("uri", uri)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The uri from which to retrieve the key. It must be accessible without authentication.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimArgs:
    def __init__(__self__, *,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] is_required: (Updatable) Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        :param pulumi.Input[str] key: (Updatable) Information around the values for selector of an authentication/ routing branch.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_required=is_required,
            key=key,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_required: Optional[pulumi.Input[bool]] = None,
             key: Optional[pulumi.Input[str]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isRequired' in kwargs:
            is_required = kwargs['isRequired']

        if is_required is not None:
            _setter("is_required", is_required)
        if key is not None:
            _setter("key", key)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Whether the claim is required to be present in the JWT or not. If set to "false", the claim values will be matched only if the claim is present in the JWT.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Information around the values for selector of an authentication/ routing branch.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKeyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 expression: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[str] expression: (Updatable) String describing the expression with wildcards.
        :param pulumi.Input[bool] is_default: (Updatable) Information regarding whether this is the default branch.
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            expression=expression,
            is_default=is_default,
            type=type,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             expression: Optional[pulumi.Input[str]] = None,
             is_default: Optional[pulumi.Input[bool]] = None,
             type: Optional[pulumi.Input[str]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isDefault' in kwargs:
            is_default = kwargs['isDefault']

        _setter("name", name)
        if expression is not None:
            _setter("expression", expression)
        if is_default is not None:
            _setter("is_default", is_default)
        if type is not None:
            _setter("type", type)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) String describing the expression with wildcards.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Information regarding whether this is the default branch.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSourceArgs:
    def __init__(__self__, *,
                 selector: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] selector: (Updatable) String describing the context variable used as selector.
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            selector=selector,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             selector: pulumi.Input[str],
             type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("selector", selector)
        _setter("type", type)

    @property
    @pulumi.getter
    def selector(self) -> pulumi.Input[str]:
        """
        (Updatable) String describing the context variable used as selector.
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesMutualTlsArgs:
    def __init__(__self__, *,
                 allowed_sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_verified_certificate_required: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_sans: (Updatable) Allowed list of CN or SAN which will be used for verification of certificate.
        :param pulumi.Input[bool] is_verified_certificate_required: (Updatable) Determines whether to enable client verification when API Consumer makes connection to the gateway.
        """
        DeploymentSpecificationRequestPoliciesMutualTlsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_sans=allowed_sans,
            is_verified_certificate_required=is_verified_certificate_required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             is_verified_certificate_required: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedSans' in kwargs:
            allowed_sans = kwargs['allowedSans']
        if 'isVerifiedCertificateRequired' in kwargs:
            is_verified_certificate_required = kwargs['isVerifiedCertificateRequired']

        if allowed_sans is not None:
            _setter("allowed_sans", allowed_sans)
        if is_verified_certificate_required is not None:
            _setter("is_verified_certificate_required", is_verified_certificate_required)

    @property
    @pulumi.getter(name="allowedSans")
    def allowed_sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Allowed list of CN or SAN which will be used for verification of certificate.
        """
        return pulumi.get(self, "allowed_sans")

    @allowed_sans.setter
    def allowed_sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_sans", value)

    @property
    @pulumi.getter(name="isVerifiedCertificateRequired")
    def is_verified_certificate_required(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Determines whether to enable client verification when API Consumer makes connection to the gateway.
        """
        return pulumi.get(self, "is_verified_certificate_required")

    @is_verified_certificate_required.setter
    def is_verified_certificate_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_verified_certificate_required", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesRateLimitingArgs:
    def __init__(__self__, *,
                 rate_in_requests_per_second: pulumi.Input[int],
                 rate_key: pulumi.Input[str]):
        """
        :param pulumi.Input[int] rate_in_requests_per_second: (Updatable) The maximum number of requests per second to allow.
        :param pulumi.Input[str] rate_key: (Updatable) The key used to group requests together.
        """
        DeploymentSpecificationRequestPoliciesRateLimitingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rate_in_requests_per_second=rate_in_requests_per_second,
            rate_key=rate_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rate_in_requests_per_second: pulumi.Input[int],
             rate_key: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rateInRequestsPerSecond' in kwargs:
            rate_in_requests_per_second = kwargs['rateInRequestsPerSecond']
        if 'rateKey' in kwargs:
            rate_key = kwargs['rateKey']

        _setter("rate_in_requests_per_second", rate_in_requests_per_second)
        _setter("rate_key", rate_key)

    @property
    @pulumi.getter(name="rateInRequestsPerSecond")
    def rate_in_requests_per_second(self) -> pulumi.Input[int]:
        """
        (Updatable) The maximum number of requests per second to allow.
        """
        return pulumi.get(self, "rate_in_requests_per_second")

    @rate_in_requests_per_second.setter
    def rate_in_requests_per_second(self, value: pulumi.Input[int]):
        pulumi.set(self, "rate_in_requests_per_second", value)

    @property
    @pulumi.getter(name="rateKey")
    def rate_key(self) -> pulumi.Input[str]:
        """
        (Updatable) The key used to group requests together.
        """
        return pulumi.get(self, "rate_key")

    @rate_key.setter
    def rate_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "rate_key", value)


@pulumi.input_type
class DeploymentSpecificationRequestPoliciesUsagePlansArgs:
    def __init__(__self__, *,
                 token_locations: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] token_locations: (Updatable) A list of context variables specifying where API tokens may be located in a request. Example locations:
               * "request.headers[token]"
               * "request.query[token]"
               * "request.auth[Token]"
               * "request.path[TOKEN]"
        """
        DeploymentSpecificationRequestPoliciesUsagePlansArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            token_locations=token_locations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             token_locations: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'tokenLocations' in kwargs:
            token_locations = kwargs['tokenLocations']

        _setter("token_locations", token_locations)

    @property
    @pulumi.getter(name="tokenLocations")
    def token_locations(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        (Updatable) A list of context variables specifying where API tokens may be located in a request. Example locations:
        * "request.headers[token]"
        * "request.query[token]"
        * "request.auth[Token]"
        * "request.path[TOKEN]"
        """
        return pulumi.get(self, "token_locations")

    @token_locations.setter
    def token_locations(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "token_locations", value)


@pulumi.input_type
class DeploymentSpecificationRouteArgs:
    def __init__(__self__, *,
                 backend: pulumi.Input['DeploymentSpecificationRouteBackendArgs'],
                 path: pulumi.Input[str],
                 logging_policies: Optional[pulumi.Input['DeploymentSpecificationRouteLoggingPoliciesArgs']] = None,
                 methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 request_policies: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesArgs']] = None,
                 response_policies: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesArgs']] = None):
        """
        :param pulumi.Input['DeploymentSpecificationRouteBackendArgs'] backend: (Updatable) The backend to forward requests to.
        :param pulumi.Input[str] path: (Updatable) A URL path pattern that must be matched on this route. The path pattern may contain a subset of RFC 6570 identifiers to allow wildcard and parameterized matching.
        :param pulumi.Input['DeploymentSpecificationRouteLoggingPoliciesArgs'] logging_policies: (Updatable) Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] methods: (Updatable) A list of allowed methods on this route.
        :param pulumi.Input['DeploymentSpecificationRouteRequestPoliciesArgs'] request_policies: (Updatable) Behavior applied to any requests received by the API on this route.
        :param pulumi.Input['DeploymentSpecificationRouteResponsePoliciesArgs'] response_policies: (Updatable) Behavior applied to any responses sent by the API for requests on this route.
        """
        DeploymentSpecificationRouteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backend=backend,
            path=path,
            logging_policies=logging_policies,
            methods=methods,
            request_policies=request_policies,
            response_policies=response_policies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backend: pulumi.Input['DeploymentSpecificationRouteBackendArgs'],
             path: pulumi.Input[str],
             logging_policies: Optional[pulumi.Input['DeploymentSpecificationRouteLoggingPoliciesArgs']] = None,
             methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             request_policies: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesArgs']] = None,
             response_policies: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'loggingPolicies' in kwargs:
            logging_policies = kwargs['loggingPolicies']
        if 'requestPolicies' in kwargs:
            request_policies = kwargs['requestPolicies']
        if 'responsePolicies' in kwargs:
            response_policies = kwargs['responsePolicies']

        _setter("backend", backend)
        _setter("path", path)
        if logging_policies is not None:
            _setter("logging_policies", logging_policies)
        if methods is not None:
            _setter("methods", methods)
        if request_policies is not None:
            _setter("request_policies", request_policies)
        if response_policies is not None:
            _setter("response_policies", response_policies)

    @property
    @pulumi.getter
    def backend(self) -> pulumi.Input['DeploymentSpecificationRouteBackendArgs']:
        """
        (Updatable) The backend to forward requests to.
        """
        return pulumi.get(self, "backend")

    @backend.setter
    def backend(self, value: pulumi.Input['DeploymentSpecificationRouteBackendArgs']):
        pulumi.set(self, "backend", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        (Updatable) A URL path pattern that must be matched on this route. The path pattern may contain a subset of RFC 6570 identifiers to allow wildcard and parameterized matching.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteLoggingPoliciesArgs']]:
        """
        (Updatable) Policies controlling the pushing of logs to Oracle Cloud Infrastructure Public Logging.
        """
        return pulumi.get(self, "logging_policies")

    @logging_policies.setter
    def logging_policies(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteLoggingPoliciesArgs']]):
        pulumi.set(self, "logging_policies", value)

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of allowed methods on this route.
        """
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesArgs']]:
        """
        (Updatable) Behavior applied to any requests received by the API on this route.
        """
        return pulumi.get(self, "request_policies")

    @request_policies.setter
    def request_policies(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesArgs']]):
        pulumi.set(self, "request_policies", value)

    @property
    @pulumi.getter(name="responsePolicies")
    def response_policies(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesArgs']]:
        """
        (Updatable) Behavior applied to any responses sent by the API for requests on this route.
        """
        return pulumi.get(self, "response_policies")

    @response_policies.setter
    def response_policies(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesArgs']]):
        pulumi.set(self, "response_policies", value)


@pulumi.input_type
class DeploymentSpecificationRouteBackendArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 allowed_post_logout_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 connect_timeout_in_seconds: Optional[pulumi.Input[float]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteBackendHeaderArgs']]]] = None,
                 is_ssl_verify_disabled: Optional[pulumi.Input[bool]] = None,
                 post_logout_state: Optional[pulumi.Input[str]] = None,
                 read_timeout_in_seconds: Optional[pulumi.Input[float]] = None,
                 routing_backends: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendArgs']]]] = None,
                 selection_source: Optional[pulumi.Input['DeploymentSpecificationRouteBackendSelectionSourceArgs']] = None,
                 send_timeout_in_seconds: Optional[pulumi.Input[float]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_post_logout_uris: (Updatable)
        :param pulumi.Input[str] body: (Updatable) The body of the stock response from the mock backend.
        :param pulumi.Input[float] connect_timeout_in_seconds: (Updatable) Defines a timeout for establishing a connection with a proxied server.
        :param pulumi.Input[str] function_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteBackendHeaderArgs']]] headers: (Updatable)
        :param pulumi.Input[bool] is_ssl_verify_disabled: (Updatable) Defines whether or not to uphold SSL verification.
        :param pulumi.Input[str] post_logout_state: (Updatable) Defines a state that should be shared on redirecting to postLogout URL.
        :param pulumi.Input[float] read_timeout_in_seconds: (Updatable) Defines a timeout for reading a response from the proxied server.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendArgs']]] routing_backends: (Updatable) List of backends to chose from for Dynamic Routing.
        :param pulumi.Input['DeploymentSpecificationRouteBackendSelectionSourceArgs'] selection_source: (Updatable) Information around selector used for branching among routes/ authentication servers while dynamic routing/ authentication.
        :param pulumi.Input[float] send_timeout_in_seconds: (Updatable) Defines a timeout for transmitting a request to the proxied server.
        :param pulumi.Input[int] status: (Updatable) The status code of the stock response from the mock backend.
        :param pulumi.Input[str] url: (Updatable)
        """
        DeploymentSpecificationRouteBackendArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            allowed_post_logout_uris=allowed_post_logout_uris,
            body=body,
            connect_timeout_in_seconds=connect_timeout_in_seconds,
            function_id=function_id,
            headers=headers,
            is_ssl_verify_disabled=is_ssl_verify_disabled,
            post_logout_state=post_logout_state,
            read_timeout_in_seconds=read_timeout_in_seconds,
            routing_backends=routing_backends,
            selection_source=selection_source,
            send_timeout_in_seconds=send_timeout_in_seconds,
            status=status,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             allowed_post_logout_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             body: Optional[pulumi.Input[str]] = None,
             connect_timeout_in_seconds: Optional[pulumi.Input[float]] = None,
             function_id: Optional[pulumi.Input[str]] = None,
             headers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteBackendHeaderArgs']]]] = None,
             is_ssl_verify_disabled: Optional[pulumi.Input[bool]] = None,
             post_logout_state: Optional[pulumi.Input[str]] = None,
             read_timeout_in_seconds: Optional[pulumi.Input[float]] = None,
             routing_backends: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendArgs']]]] = None,
             selection_source: Optional[pulumi.Input['DeploymentSpecificationRouteBackendSelectionSourceArgs']] = None,
             send_timeout_in_seconds: Optional[pulumi.Input[float]] = None,
             status: Optional[pulumi.Input[int]] = None,
             url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedPostLogoutUris' in kwargs:
            allowed_post_logout_uris = kwargs['allowedPostLogoutUris']
        if 'connectTimeoutInSeconds' in kwargs:
            connect_timeout_in_seconds = kwargs['connectTimeoutInSeconds']
        if 'functionId' in kwargs:
            function_id = kwargs['functionId']
        if 'isSslVerifyDisabled' in kwargs:
            is_ssl_verify_disabled = kwargs['isSslVerifyDisabled']
        if 'postLogoutState' in kwargs:
            post_logout_state = kwargs['postLogoutState']
        if 'readTimeoutInSeconds' in kwargs:
            read_timeout_in_seconds = kwargs['readTimeoutInSeconds']
        if 'routingBackends' in kwargs:
            routing_backends = kwargs['routingBackends']
        if 'selectionSource' in kwargs:
            selection_source = kwargs['selectionSource']
        if 'sendTimeoutInSeconds' in kwargs:
            send_timeout_in_seconds = kwargs['sendTimeoutInSeconds']

        _setter("type", type)
        if allowed_post_logout_uris is not None:
            _setter("allowed_post_logout_uris", allowed_post_logout_uris)
        if body is not None:
            _setter("body", body)
        if connect_timeout_in_seconds is not None:
            _setter("connect_timeout_in_seconds", connect_timeout_in_seconds)
        if function_id is not None:
            _setter("function_id", function_id)
        if headers is not None:
            _setter("headers", headers)
        if is_ssl_verify_disabled is not None:
            _setter("is_ssl_verify_disabled", is_ssl_verify_disabled)
        if post_logout_state is not None:
            _setter("post_logout_state", post_logout_state)
        if read_timeout_in_seconds is not None:
            _setter("read_timeout_in_seconds", read_timeout_in_seconds)
        if routing_backends is not None:
            _setter("routing_backends", routing_backends)
        if selection_source is not None:
            _setter("selection_source", selection_source)
        if send_timeout_in_seconds is not None:
            _setter("send_timeout_in_seconds", send_timeout_in_seconds)
        if status is not None:
            _setter("status", status)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="allowedPostLogoutUris")
    def allowed_post_logout_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable)
        """
        return pulumi.get(self, "allowed_post_logout_uris")

    @allowed_post_logout_uris.setter
    def allowed_post_logout_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_post_logout_uris", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The body of the stock response from the mock backend.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="connectTimeoutInSeconds")
    def connect_timeout_in_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        (Updatable) Defines a timeout for establishing a connection with a proxied server.
        """
        return pulumi.get(self, "connect_timeout_in_seconds")

    @connect_timeout_in_seconds.setter
    def connect_timeout_in_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "connect_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteBackendHeaderArgs']]]]:
        """
        (Updatable)
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteBackendHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @is_ssl_verify_disabled.setter
    def is_ssl_verify_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ssl_verify_disabled", value)

    @property
    @pulumi.getter(name="postLogoutState")
    def post_logout_state(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Defines a state that should be shared on redirecting to postLogout URL.
        """
        return pulumi.get(self, "post_logout_state")

    @post_logout_state.setter
    def post_logout_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_logout_state", value)

    @property
    @pulumi.getter(name="readTimeoutInSeconds")
    def read_timeout_in_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        (Updatable) Defines a timeout for reading a response from the proxied server.
        """
        return pulumi.get(self, "read_timeout_in_seconds")

    @read_timeout_in_seconds.setter
    def read_timeout_in_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "read_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="routingBackends")
    def routing_backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendArgs']]]]:
        """
        (Updatable) List of backends to chose from for Dynamic Routing.
        """
        return pulumi.get(self, "routing_backends")

    @routing_backends.setter
    def routing_backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendArgs']]]]):
        pulumi.set(self, "routing_backends", value)

    @property
    @pulumi.getter(name="selectionSource")
    def selection_source(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteBackendSelectionSourceArgs']]:
        """
        (Updatable) Information around selector used for branching among routes/ authentication servers while dynamic routing/ authentication.
        """
        return pulumi.get(self, "selection_source")

    @selection_source.setter
    def selection_source(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteBackendSelectionSourceArgs']]):
        pulumi.set(self, "selection_source", value)

    @property
    @pulumi.getter(name="sendTimeoutInSeconds")
    def send_timeout_in_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        (Updatable) Defines a timeout for transmitting a request to the proxied server.
        """
        return pulumi.get(self, "send_timeout_in_seconds")

    @send_timeout_in_seconds.setter
    def send_timeout_in_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "send_timeout_in_seconds", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status code of the stock response from the mock backend.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable)
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class DeploymentSpecificationRouteBackendHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[str] value: (Updatable) Value of the header.
        """
        DeploymentSpecificationRouteBackendHeaderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if name is not None:
            _setter("name", name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value of the header.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DeploymentSpecificationRouteBackendRoutingBackendArgs:
    def __init__(__self__, *,
                 backend: Optional[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendBackendArgs']] = None,
                 key: Optional[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendKeyArgs']] = None):
        """
        :param pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendBackendArgs'] backend: (Updatable) The backend to forward requests to.
        :param pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendKeyArgs'] key: (Updatable) Information around the values for selector of an authentication/ routing branch.
        """
        DeploymentSpecificationRouteBackendRoutingBackendArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backend=backend,
            key=key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backend: Optional[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendBackendArgs']] = None,
             key: Optional[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendKeyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if backend is not None:
            _setter("backend", backend)
        if key is not None:
            _setter("key", key)

    @property
    @pulumi.getter
    def backend(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendBackendArgs']]:
        """
        (Updatable) The backend to forward requests to.
        """
        return pulumi.get(self, "backend")

    @backend.setter
    def backend(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendBackendArgs']]):
        pulumi.set(self, "backend", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendKeyArgs']]:
        """
        (Updatable) Information around the values for selector of an authentication/ routing branch.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendKeyArgs']]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class DeploymentSpecificationRouteBackendRoutingBackendBackendArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 body: Optional[pulumi.Input[str]] = None,
                 connect_timeout_in_seconds: Optional[pulumi.Input[float]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendBackendHeaderArgs']]]] = None,
                 is_ssl_verify_disabled: Optional[pulumi.Input[bool]] = None,
                 read_timeout_in_seconds: Optional[pulumi.Input[float]] = None,
                 send_timeout_in_seconds: Optional[pulumi.Input[float]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] body: (Updatable) The body of the stock response from the mock backend.
        :param pulumi.Input[float] connect_timeout_in_seconds: (Updatable) Defines a timeout for establishing a connection with a proxied server.
        :param pulumi.Input[str] function_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendBackendHeaderArgs']]] headers: (Updatable)
        :param pulumi.Input[bool] is_ssl_verify_disabled: (Updatable) Defines whether or not to uphold SSL verification.
        :param pulumi.Input[float] read_timeout_in_seconds: (Updatable) Defines a timeout for reading a response from the proxied server.
        :param pulumi.Input[float] send_timeout_in_seconds: (Updatable) Defines a timeout for transmitting a request to the proxied server.
        :param pulumi.Input[int] status: (Updatable) The status code of the stock response from the mock backend.
        :param pulumi.Input[str] url: (Updatable)
        """
        DeploymentSpecificationRouteBackendRoutingBackendBackendArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            body=body,
            connect_timeout_in_seconds=connect_timeout_in_seconds,
            function_id=function_id,
            headers=headers,
            is_ssl_verify_disabled=is_ssl_verify_disabled,
            read_timeout_in_seconds=read_timeout_in_seconds,
            send_timeout_in_seconds=send_timeout_in_seconds,
            status=status,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             body: Optional[pulumi.Input[str]] = None,
             connect_timeout_in_seconds: Optional[pulumi.Input[float]] = None,
             function_id: Optional[pulumi.Input[str]] = None,
             headers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendBackendHeaderArgs']]]] = None,
             is_ssl_verify_disabled: Optional[pulumi.Input[bool]] = None,
             read_timeout_in_seconds: Optional[pulumi.Input[float]] = None,
             send_timeout_in_seconds: Optional[pulumi.Input[float]] = None,
             status: Optional[pulumi.Input[int]] = None,
             url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'connectTimeoutInSeconds' in kwargs:
            connect_timeout_in_seconds = kwargs['connectTimeoutInSeconds']
        if 'functionId' in kwargs:
            function_id = kwargs['functionId']
        if 'isSslVerifyDisabled' in kwargs:
            is_ssl_verify_disabled = kwargs['isSslVerifyDisabled']
        if 'readTimeoutInSeconds' in kwargs:
            read_timeout_in_seconds = kwargs['readTimeoutInSeconds']
        if 'sendTimeoutInSeconds' in kwargs:
            send_timeout_in_seconds = kwargs['sendTimeoutInSeconds']

        _setter("type", type)
        if body is not None:
            _setter("body", body)
        if connect_timeout_in_seconds is not None:
            _setter("connect_timeout_in_seconds", connect_timeout_in_seconds)
        if function_id is not None:
            _setter("function_id", function_id)
        if headers is not None:
            _setter("headers", headers)
        if is_ssl_verify_disabled is not None:
            _setter("is_ssl_verify_disabled", is_ssl_verify_disabled)
        if read_timeout_in_seconds is not None:
            _setter("read_timeout_in_seconds", read_timeout_in_seconds)
        if send_timeout_in_seconds is not None:
            _setter("send_timeout_in_seconds", send_timeout_in_seconds)
        if status is not None:
            _setter("status", status)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The body of the stock response from the mock backend.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="connectTimeoutInSeconds")
    def connect_timeout_in_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        (Updatable) Defines a timeout for establishing a connection with a proxied server.
        """
        return pulumi.get(self, "connect_timeout_in_seconds")

    @connect_timeout_in_seconds.setter
    def connect_timeout_in_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "connect_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendBackendHeaderArgs']]]]:
        """
        (Updatable)
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteBackendRoutingBackendBackendHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @is_ssl_verify_disabled.setter
    def is_ssl_verify_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ssl_verify_disabled", value)

    @property
    @pulumi.getter(name="readTimeoutInSeconds")
    def read_timeout_in_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        (Updatable) Defines a timeout for reading a response from the proxied server.
        """
        return pulumi.get(self, "read_timeout_in_seconds")

    @read_timeout_in_seconds.setter
    def read_timeout_in_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "read_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="sendTimeoutInSeconds")
    def send_timeout_in_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        (Updatable) Defines a timeout for transmitting a request to the proxied server.
        """
        return pulumi.get(self, "send_timeout_in_seconds")

    @send_timeout_in_seconds.setter
    def send_timeout_in_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "send_timeout_in_seconds", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status code of the stock response from the mock backend.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable)
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class DeploymentSpecificationRouteBackendRoutingBackendBackendHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[str] value: (Updatable) Value of the header.
        """
        DeploymentSpecificationRouteBackendRoutingBackendBackendHeaderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if name is not None:
            _setter("name", name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value of the header.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DeploymentSpecificationRouteBackendRoutingBackendKeyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 expression: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] expression: (Updatable) String describing the expression with wildcards.
        :param pulumi.Input[bool] is_default: (Updatable) Information regarding whether this is the default branch.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        DeploymentSpecificationRouteBackendRoutingBackendKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            type=type,
            expression=expression,
            is_default=is_default,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             type: pulumi.Input[str],
             expression: Optional[pulumi.Input[str]] = None,
             is_default: Optional[pulumi.Input[bool]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isDefault' in kwargs:
            is_default = kwargs['isDefault']

        _setter("name", name)
        _setter("type", type)
        if expression is not None:
            _setter("expression", expression)
        if is_default is not None:
            _setter("is_default", is_default)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) String describing the expression with wildcards.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Information regarding whether this is the default branch.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DeploymentSpecificationRouteBackendSelectionSourceArgs:
    def __init__(__self__, *,
                 selector: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] selector: (Updatable) String describing the context variable used as selector.
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        DeploymentSpecificationRouteBackendSelectionSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            selector=selector,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             selector: pulumi.Input[str],
             type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("selector", selector)
        _setter("type", type)

    @property
    @pulumi.getter
    def selector(self) -> pulumi.Input[str]:
        """
        (Updatable) String describing the context variable used as selector.
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeploymentSpecificationRouteLoggingPoliciesArgs:
    def __init__(__self__, *,
                 access_log: Optional[pulumi.Input['DeploymentSpecificationRouteLoggingPoliciesAccessLogArgs']] = None,
                 execution_log: Optional[pulumi.Input['DeploymentSpecificationRouteLoggingPoliciesExecutionLogArgs']] = None):
        """
        :param pulumi.Input['DeploymentSpecificationRouteLoggingPoliciesAccessLogArgs'] access_log: (Updatable) Configures the logging policies for the access logs of an API Deployment.
        :param pulumi.Input['DeploymentSpecificationRouteLoggingPoliciesExecutionLogArgs'] execution_log: (Updatable) Configures the logging policies for the execution logs of an API Deployment.
        """
        DeploymentSpecificationRouteLoggingPoliciesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_log=access_log,
            execution_log=execution_log,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_log: Optional[pulumi.Input['DeploymentSpecificationRouteLoggingPoliciesAccessLogArgs']] = None,
             execution_log: Optional[pulumi.Input['DeploymentSpecificationRouteLoggingPoliciesExecutionLogArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessLog' in kwargs:
            access_log = kwargs['accessLog']
        if 'executionLog' in kwargs:
            execution_log = kwargs['executionLog']

        if access_log is not None:
            _setter("access_log", access_log)
        if execution_log is not None:
            _setter("execution_log", execution_log)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteLoggingPoliciesAccessLogArgs']]:
        """
        (Updatable) Configures the logging policies for the access logs of an API Deployment.
        """
        return pulumi.get(self, "access_log")

    @access_log.setter
    def access_log(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteLoggingPoliciesAccessLogArgs']]):
        pulumi.set(self, "access_log", value)

    @property
    @pulumi.getter(name="executionLog")
    def execution_log(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteLoggingPoliciesExecutionLogArgs']]:
        """
        (Updatable) Configures the logging policies for the execution logs of an API Deployment.
        """
        return pulumi.get(self, "execution_log")

    @execution_log.setter
    def execution_log(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteLoggingPoliciesExecutionLogArgs']]):
        pulumi.set(self, "execution_log", value)


@pulumi.input_type
class DeploymentSpecificationRouteLoggingPoliciesAccessLogArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] is_enabled: (Updatable) Whether this policy is currently enabled.
        """
        DeploymentSpecificationRouteLoggingPoliciesAccessLogArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_enabled=is_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isEnabled' in kwargs:
            is_enabled = kwargs['isEnabled']

        if is_enabled is not None:
            _setter("is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)


@pulumi.input_type
class DeploymentSpecificationRouteLoggingPoliciesExecutionLogArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_enabled: (Updatable) Whether this policy is currently enabled.
        :param pulumi.Input[str] log_level: (Updatable) Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        DeploymentSpecificationRouteLoggingPoliciesExecutionLogArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_enabled=is_enabled,
            log_level=log_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_enabled: Optional[pulumi.Input[bool]] = None,
             log_level: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isEnabled' in kwargs:
            is_enabled = kwargs['isEnabled']
        if 'logLevel' in kwargs:
            log_level = kwargs['logLevel']

        if is_enabled is not None:
            _setter("is_enabled", is_enabled)
        if log_level is not None:
            _setter("log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Specifies the log level used to control logging output of execution logs. Enabling logging at a given level also enables logging at all higher levels.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesArgs:
    def __init__(__self__, *,
                 authorization: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesAuthorizationArgs']] = None,
                 body_validation: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesBodyValidationArgs']] = None,
                 cors: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesCorsArgs']] = None,
                 header_transformations: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsArgs']] = None,
                 header_validations: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderValidationsArgs']] = None,
                 query_parameter_transformations: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsArgs']] = None,
                 query_parameter_validations: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsArgs']] = None,
                 response_cache_lookup: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs']] = None):
        """
        :param pulumi.Input['DeploymentSpecificationRouteRequestPoliciesAuthorizationArgs'] authorization: (Updatable) If authentication has been performed, validate whether the request scope (if any) applies to this route. If no RouteAuthorizationPolicy is defined for a route, a policy with a type of AUTHENTICATION_ONLY is applied.
        :param pulumi.Input['DeploymentSpecificationRouteRequestPoliciesBodyValidationArgs'] body_validation: (Updatable) Validate the payload body of the incoming API requests on a specific route.
        :param pulumi.Input['DeploymentSpecificationRouteRequestPoliciesCorsArgs'] cors: (Updatable) Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        :param pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsArgs'] header_transformations: (Updatable) A set of transformations to apply to HTTP headers that pass through the gateway.
        :param pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderValidationsArgs'] header_validations: (Updatable) Validate the HTTP headers on the incoming API requests on a specific route.
        :param pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsArgs'] query_parameter_transformations: (Updatable) A set of transformations to apply to query parameters that pass through the gateway.
        :param pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsArgs'] query_parameter_validations: (Updatable) Validate the URL query parameters on the incoming API requests on a specific route.
        :param pulumi.Input['DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs'] response_cache_lookup: (Updatable) Base policy for Response Cache lookup.
        """
        DeploymentSpecificationRouteRequestPoliciesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authorization=authorization,
            body_validation=body_validation,
            cors=cors,
            header_transformations=header_transformations,
            header_validations=header_validations,
            query_parameter_transformations=query_parameter_transformations,
            query_parameter_validations=query_parameter_validations,
            response_cache_lookup=response_cache_lookup,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authorization: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesAuthorizationArgs']] = None,
             body_validation: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesBodyValidationArgs']] = None,
             cors: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesCorsArgs']] = None,
             header_transformations: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsArgs']] = None,
             header_validations: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderValidationsArgs']] = None,
             query_parameter_transformations: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsArgs']] = None,
             query_parameter_validations: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsArgs']] = None,
             response_cache_lookup: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bodyValidation' in kwargs:
            body_validation = kwargs['bodyValidation']
        if 'headerTransformations' in kwargs:
            header_transformations = kwargs['headerTransformations']
        if 'headerValidations' in kwargs:
            header_validations = kwargs['headerValidations']
        if 'queryParameterTransformations' in kwargs:
            query_parameter_transformations = kwargs['queryParameterTransformations']
        if 'queryParameterValidations' in kwargs:
            query_parameter_validations = kwargs['queryParameterValidations']
        if 'responseCacheLookup' in kwargs:
            response_cache_lookup = kwargs['responseCacheLookup']

        if authorization is not None:
            _setter("authorization", authorization)
        if body_validation is not None:
            _setter("body_validation", body_validation)
        if cors is not None:
            _setter("cors", cors)
        if header_transformations is not None:
            _setter("header_transformations", header_transformations)
        if header_validations is not None:
            _setter("header_validations", header_validations)
        if query_parameter_transformations is not None:
            _setter("query_parameter_transformations", query_parameter_transformations)
        if query_parameter_validations is not None:
            _setter("query_parameter_validations", query_parameter_validations)
        if response_cache_lookup is not None:
            _setter("response_cache_lookup", response_cache_lookup)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesAuthorizationArgs']]:
        """
        (Updatable) If authentication has been performed, validate whether the request scope (if any) applies to this route. If no RouteAuthorizationPolicy is defined for a route, a policy with a type of AUTHENTICATION_ONLY is applied.
        """
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesAuthorizationArgs']]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="bodyValidation")
    def body_validation(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesBodyValidationArgs']]:
        """
        (Updatable) Validate the payload body of the incoming API requests on a specific route.
        """
        return pulumi.get(self, "body_validation")

    @body_validation.setter
    def body_validation(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesBodyValidationArgs']]):
        pulumi.set(self, "body_validation", value)

    @property
    @pulumi.getter
    def cors(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesCorsArgs']]:
        """
        (Updatable) Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        """
        return pulumi.get(self, "cors")

    @cors.setter
    def cors(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesCorsArgs']]):
        pulumi.set(self, "cors", value)

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsArgs']]:
        """
        (Updatable) A set of transformations to apply to HTTP headers that pass through the gateway.
        """
        return pulumi.get(self, "header_transformations")

    @header_transformations.setter
    def header_transformations(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsArgs']]):
        pulumi.set(self, "header_transformations", value)

    @property
    @pulumi.getter(name="headerValidations")
    def header_validations(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderValidationsArgs']]:
        """
        (Updatable) Validate the HTTP headers on the incoming API requests on a specific route.
        """
        return pulumi.get(self, "header_validations")

    @header_validations.setter
    def header_validations(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderValidationsArgs']]):
        pulumi.set(self, "header_validations", value)

    @property
    @pulumi.getter(name="queryParameterTransformations")
    def query_parameter_transformations(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsArgs']]:
        """
        (Updatable) A set of transformations to apply to query parameters that pass through the gateway.
        """
        return pulumi.get(self, "query_parameter_transformations")

    @query_parameter_transformations.setter
    def query_parameter_transformations(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsArgs']]):
        pulumi.set(self, "query_parameter_transformations", value)

    @property
    @pulumi.getter(name="queryParameterValidations")
    def query_parameter_validations(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsArgs']]:
        """
        (Updatable) Validate the URL query parameters on the incoming API requests on a specific route.
        """
        return pulumi.get(self, "query_parameter_validations")

    @query_parameter_validations.setter
    def query_parameter_validations(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsArgs']]):
        pulumi.set(self, "query_parameter_validations", value)

    @property
    @pulumi.getter(name="responseCacheLookup")
    def response_cache_lookup(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs']]:
        """
        (Updatable) Base policy for Response Cache lookup.
        """
        return pulumi.get(self, "response_cache_lookup")

    @response_cache_lookup.setter
    def response_cache_lookup(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs']]):
        pulumi.set(self, "response_cache_lookup", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesAuthorizationArgs:
    def __init__(__self__, *,
                 allowed_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_scopes: (Updatable) A user whose scope includes any of these access ranges is allowed on this route. Access ranges are case-sensitive.
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        DeploymentSpecificationRouteRequestPoliciesAuthorizationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_scopes=allowed_scopes,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedScopes' in kwargs:
            allowed_scopes = kwargs['allowedScopes']

        if allowed_scopes is not None:
            _setter("allowed_scopes", allowed_scopes)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="allowedScopes")
    def allowed_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A user whose scope includes any of these access ranges is allowed on this route. Access ranges are case-sensitive.
        """
        return pulumi.get(self, "allowed_scopes")

    @allowed_scopes.setter
    def allowed_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_scopes", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesBodyValidationArgs:
    def __init__(__self__, *,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesBodyValidationContentArgs']]]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 validation_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesBodyValidationContentArgs']]] contents: (Updatable) The content of the request body.
        :param pulumi.Input[bool] required: (Updatable) Determines if the parameter is required in the request.
        :param pulumi.Input[str] validation_mode: (Updatable) Validation behavior mode.
               
               In `ENFORCING` mode, upon a validation failure, the request will be rejected with a 4xx response and not sent to the backend.
               
               In `PERMISSIVE` mode, the result of the validation will be exposed as metrics while the request will follow the normal path.
               
               `DISABLED` type turns the validation off.
        """
        DeploymentSpecificationRouteRequestPoliciesBodyValidationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contents=contents,
            required=required,
            validation_mode=validation_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contents: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesBodyValidationContentArgs']]]] = None,
             required: Optional[pulumi.Input[bool]] = None,
             validation_mode: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'validationMode' in kwargs:
            validation_mode = kwargs['validationMode']

        if contents is not None:
            _setter("contents", contents)
        if required is not None:
            _setter("required", required)
        if validation_mode is not None:
            _setter("validation_mode", validation_mode)

    @property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesBodyValidationContentArgs']]]]:
        """
        (Updatable) The content of the request body.
        """
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesBodyValidationContentArgs']]]]):
        pulumi.set(self, "contents", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Determines if the parameter is required in the request.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Validation behavior mode.

        In `ENFORCING` mode, upon a validation failure, the request will be rejected with a 4xx response and not sent to the backend.

        In `PERMISSIVE` mode, the result of the validation will be exposed as metrics while the request will follow the normal path.

        `DISABLED` type turns the validation off.
        """
        return pulumi.get(self, "validation_mode")

    @validation_mode.setter
    def validation_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "validation_mode", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesBodyValidationContentArgs:
    def __init__(__self__, *,
                 media_type: pulumi.Input[str],
                 validation_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] media_type: (Updatable) The media_type is a [media type range](https://tools.ietf.org/html/rfc7231#appendix-D) subset restricted to the following schema
               
               media_type ::= ( / (  "*" "/" "*" ) / ( type "/" "*" ) / ( type "/" subtype ) )
               
               For requests that match multiple media types, only the most specific media type is applicable. e.g. `text/plain` overrides `text/*`
        :param pulumi.Input[str] validation_type: (Updatable) Validation type defines the content validation method.
               
               Make the validation to first parse the body as the respective format.
        """
        DeploymentSpecificationRouteRequestPoliciesBodyValidationContentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            media_type=media_type,
            validation_type=validation_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             media_type: pulumi.Input[str],
             validation_type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'mediaType' in kwargs:
            media_type = kwargs['mediaType']
        if 'validationType' in kwargs:
            validation_type = kwargs['validationType']

        _setter("media_type", media_type)
        _setter("validation_type", validation_type)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> pulumi.Input[str]:
        """
        (Updatable) The media_type is a [media type range](https://tools.ietf.org/html/rfc7231#appendix-D) subset restricted to the following schema

        media_type ::= ( / (  "*" "/" "*" ) / ( type "/" "*" ) / ( type "/" subtype ) )

        For requests that match multiple media types, only the most specific media type is applicable. e.g. `text/plain` overrides `text/*`
        """
        return pulumi.get(self, "media_type")

    @media_type.setter
    def media_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "media_type", value)

    @property
    @pulumi.getter(name="validationType")
    def validation_type(self) -> pulumi.Input[str]:
        """
        (Updatable) Validation type defines the content validation method.

        Make the validation to first parse the body as the respective format.
        """
        return pulumi.get(self, "validation_type")

    @validation_type.setter
    def validation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "validation_type", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesCorsArgs:
    def __init__(__self__, *,
                 allowed_origins: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allowed_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exposed_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_allow_credentials_enabled: Optional[pulumi.Input[bool]] = None,
                 max_age_in_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_origins: (Updatable) The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_headers: (Updatable) The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_methods: (Updatable) The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exposed_headers: (Updatable) The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        :param pulumi.Input[bool] is_allow_credentials_enabled: (Updatable) Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        :param pulumi.Input[int] max_age_in_seconds: (Updatable) The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        DeploymentSpecificationRouteRequestPoliciesCorsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_origins=allowed_origins,
            allowed_headers=allowed_headers,
            allowed_methods=allowed_methods,
            exposed_headers=exposed_headers,
            is_allow_credentials_enabled=is_allow_credentials_enabled,
            max_age_in_seconds=max_age_in_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_origins: pulumi.Input[Sequence[pulumi.Input[str]]],
             allowed_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             allowed_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             exposed_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             is_allow_credentials_enabled: Optional[pulumi.Input[bool]] = None,
             max_age_in_seconds: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedOrigins' in kwargs:
            allowed_origins = kwargs['allowedOrigins']
        if 'allowedHeaders' in kwargs:
            allowed_headers = kwargs['allowedHeaders']
        if 'allowedMethods' in kwargs:
            allowed_methods = kwargs['allowedMethods']
        if 'exposedHeaders' in kwargs:
            exposed_headers = kwargs['exposedHeaders']
        if 'isAllowCredentialsEnabled' in kwargs:
            is_allow_credentials_enabled = kwargs['isAllowCredentialsEnabled']
        if 'maxAgeInSeconds' in kwargs:
            max_age_in_seconds = kwargs['maxAgeInSeconds']

        _setter("allowed_origins", allowed_origins)
        if allowed_headers is not None:
            _setter("allowed_headers", allowed_headers)
        if allowed_methods is not None:
            _setter("allowed_methods", allowed_methods)
        if exposed_headers is not None:
            _setter("exposed_headers", exposed_headers)
        if is_allow_credentials_enabled is not None:
            _setter("is_allow_credentials_enabled", is_allow_credentials_enabled)
        if max_age_in_seconds is not None:
            _setter("max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        (Updatable) The list of allowed origins that the CORS handler will use to respond to CORS requests. The gateway will send the Access-Control-Allow-Origin header with the best origin match for the circumstances. '*' will match any origins, and 'null' will match queries from 'file:' origins. All other origins must be qualified with the scheme, full hostname, and port if necessary.
        """
        return pulumi.get(self, "allowed_origins")

    @allowed_origins.setter
    def allowed_origins(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_origins", value)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The list of headers that will be allowed from the client via the Access-Control-Allow-Headers header. '*' will allow all headers.
        """
        return pulumi.get(self, "allowed_headers")

    @allowed_headers.setter
    def allowed_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_headers", value)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The list of allowed HTTP methods that will be returned for the preflight OPTIONS request in the Access-Control-Allow-Methods header. '*' will allow all methods.
        """
        return pulumi.get(self, "allowed_methods")

    @allowed_methods.setter
    def allowed_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_methods", value)

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The list of headers that the client will be allowed to see from the response as indicated by the Access-Control-Expose-Headers header. '*' will expose all headers.
        """
        return pulumi.get(self, "exposed_headers")

    @exposed_headers.setter
    def exposed_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exposed_headers", value)

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Whether to send the Access-Control-Allow-Credentials header to allow CORS requests with cookies.
        """
        return pulumi.get(self, "is_allow_credentials_enabled")

    @is_allow_credentials_enabled.setter
    def is_allow_credentials_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_allow_credentials_enabled", value)

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The time in seconds for the client to cache preflight responses. This is sent as the Access-Control-Max-Age if greater than 0.
        """
        return pulumi.get(self, "max_age_in_seconds")

    @max_age_in_seconds.setter
    def max_age_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age_in_seconds", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsArgs:
    def __init__(__self__, *,
                 filter_headers: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersArgs']] = None,
                 rename_headers: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersArgs']] = None,
                 set_headers: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersArgs']] = None):
        """
        :param pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersArgs'] filter_headers: (Updatable) Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        :param pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersArgs'] rename_headers: (Updatable) Rename HTTP headers as they pass through the gateway.
        :param pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersArgs'] set_headers: (Updatable) Set HTTP headers as they pass through the gateway.
        """
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_headers=filter_headers,
            rename_headers=rename_headers,
            set_headers=set_headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_headers: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersArgs']] = None,
             rename_headers: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersArgs']] = None,
             set_headers: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'filterHeaders' in kwargs:
            filter_headers = kwargs['filterHeaders']
        if 'renameHeaders' in kwargs:
            rename_headers = kwargs['renameHeaders']
        if 'setHeaders' in kwargs:
            set_headers = kwargs['setHeaders']

        if filter_headers is not None:
            _setter("filter_headers", filter_headers)
        if rename_headers is not None:
            _setter("rename_headers", rename_headers)
        if set_headers is not None:
            _setter("set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersArgs']]:
        """
        (Updatable) Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_headers")

    @filter_headers.setter
    def filter_headers(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersArgs']]):
        pulumi.set(self, "filter_headers", value)

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersArgs']]:
        """
        (Updatable) Rename HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "rename_headers")

    @rename_headers.setter
    def rename_headers(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersArgs']]):
        pulumi.set(self, "rename_headers", value)

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersArgs']]:
        """
        (Updatable) Set HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "set_headers")

    @set_headers.setter
    def set_headers(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersArgs']]):
        pulumi.set(self, "set_headers", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemArgs']]],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemArgs']]] items: (Updatable) The list of headers.
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemArgs']]],
             type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)
        _setter("type", type)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemArgs']]]:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemArgs']]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemArgs']]] items: (Updatable) The list of headers.
        """
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemArgs']]]:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemArgs']]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemArgs:
    def __init__(__self__, *,
                 from_: pulumi.Input[str],
                 to: pulumi.Input[str]):
        """
        :param pulumi.Input[str] from_: (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[str] to: (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_=from_,
            to=to,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_: pulumi.Input[str],
             to: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'from' in kwargs:
            from_ = kwargs['from']

        _setter("from_", from_)
        _setter("to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input[str]:
        """
        (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> pulumi.Input[str]:
        """
        (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: pulumi.Input[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs']]] items: (Updatable) The list of headers.
        """
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs']]]:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs']]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]],
                 if_exists: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        :param pulumi.Input[str] if_exists: (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            if_exists=if_exists,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             values: pulumi.Input[Sequence[pulumi.Input[str]]],
             if_exists: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ifExists' in kwargs:
            if_exists = kwargs['ifExists']

        _setter("name", name)
        _setter("values", values)
        if if_exists is not None:
            _setter("if_exists", if_exists)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")

    @if_exists.setter
    def if_exists(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "if_exists", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesHeaderValidationsArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderArgs']]]] = None,
                 validation_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderArgs']]] headers: (Updatable)
        :param pulumi.Input[str] validation_mode: (Updatable) Validation behavior mode.
               
               In `ENFORCING` mode, upon a validation failure, the request will be rejected with a 4xx response and not sent to the backend.
               
               In `PERMISSIVE` mode, the result of the validation will be exposed as metrics while the request will follow the normal path.
               
               `DISABLED` type turns the validation off.
        """
        DeploymentSpecificationRouteRequestPoliciesHeaderValidationsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            headers=headers,
            validation_mode=validation_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             headers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderArgs']]]] = None,
             validation_mode: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'validationMode' in kwargs:
            validation_mode = kwargs['validationMode']

        if headers is not None:
            _setter("headers", headers)
        if validation_mode is not None:
            _setter("validation_mode", validation_mode)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderArgs']]]]:
        """
        (Updatable)
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Validation behavior mode.

        In `ENFORCING` mode, upon a validation failure, the request will be rejected with a 4xx response and not sent to the backend.

        In `PERMISSIVE` mode, the result of the validation will be exposed as metrics while the request will follow the normal path.

        `DISABLED` type turns the validation off.
        """
        return pulumi.get(self, "validation_mode")

    @validation_mode.setter
    def validation_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "validation_mode", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 required: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[bool] required: (Updatable) Determines if the parameter is required in the request.
        """
        DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeaderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            required=required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             required: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        if required is not None:
            _setter("required", required)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Determines if the parameter is required in the request.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsArgs:
    def __init__(__self__, *,
                 filter_query_parameters: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersArgs']] = None,
                 rename_query_parameters: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersArgs']] = None,
                 set_query_parameters: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersArgs']] = None):
        """
        :param pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersArgs'] filter_query_parameters: (Updatable) Filter parameters from the query string as they pass through the gateway.  The gateway applies filters after other transformations, so any parameters set or renamed must also be listed here when using an ALLOW type policy.
        :param pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersArgs'] rename_query_parameters: (Updatable) Rename parameters on the query string as they pass through the gateway.
        :param pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersArgs'] set_query_parameters: (Updatable) Set parameters on the query string as they pass through the gateway.
        """
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_query_parameters=filter_query_parameters,
            rename_query_parameters=rename_query_parameters,
            set_query_parameters=set_query_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_query_parameters: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersArgs']] = None,
             rename_query_parameters: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersArgs']] = None,
             set_query_parameters: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'filterQueryParameters' in kwargs:
            filter_query_parameters = kwargs['filterQueryParameters']
        if 'renameQueryParameters' in kwargs:
            rename_query_parameters = kwargs['renameQueryParameters']
        if 'setQueryParameters' in kwargs:
            set_query_parameters = kwargs['setQueryParameters']

        if filter_query_parameters is not None:
            _setter("filter_query_parameters", filter_query_parameters)
        if rename_query_parameters is not None:
            _setter("rename_query_parameters", rename_query_parameters)
        if set_query_parameters is not None:
            _setter("set_query_parameters", set_query_parameters)

    @property
    @pulumi.getter(name="filterQueryParameters")
    def filter_query_parameters(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersArgs']]:
        """
        (Updatable) Filter parameters from the query string as they pass through the gateway.  The gateway applies filters after other transformations, so any parameters set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_query_parameters")

    @filter_query_parameters.setter
    def filter_query_parameters(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersArgs']]):
        pulumi.set(self, "filter_query_parameters", value)

    @property
    @pulumi.getter(name="renameQueryParameters")
    def rename_query_parameters(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersArgs']]:
        """
        (Updatable) Rename parameters on the query string as they pass through the gateway.
        """
        return pulumi.get(self, "rename_query_parameters")

    @rename_query_parameters.setter
    def rename_query_parameters(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersArgs']]):
        pulumi.set(self, "rename_query_parameters", value)

    @property
    @pulumi.getter(name="setQueryParameters")
    def set_query_parameters(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersArgs']]:
        """
        (Updatable) Set parameters on the query string as they pass through the gateway.
        """
        return pulumi.get(self, "set_query_parameters")

    @set_query_parameters.setter
    def set_query_parameters(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersArgs']]):
        pulumi.set(self, "set_query_parameters", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemArgs']]],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemArgs']]] items: (Updatable) The list of headers.
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemArgs']]],
             type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)
        _setter("type", type)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemArgs']]]:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemArgs']]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemArgs']]] items: (Updatable) The list of headers.
        """
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemArgs']]]:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemArgs']]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemArgs:
    def __init__(__self__, *,
                 from_: pulumi.Input[str],
                 to: pulumi.Input[str]):
        """
        :param pulumi.Input[str] from_: (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[str] to: (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_=from_,
            to=to,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_: pulumi.Input[str],
             to: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'from' in kwargs:
            from_ = kwargs['from']

        _setter("from_", from_)
        _setter("to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input[str]:
        """
        (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> pulumi.Input[str]:
        """
        (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: pulumi.Input[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemArgs']]] items: (Updatable) The list of headers.
        """
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemArgs']]]:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemArgs']]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]],
                 if_exists: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        :param pulumi.Input[str] if_exists: (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            if_exists=if_exists,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             values: pulumi.Input[Sequence[pulumi.Input[str]]],
             if_exists: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ifExists' in kwargs:
            if_exists = kwargs['ifExists']

        _setter("name", name)
        _setter("values", values)
        if if_exists is not None:
            _setter("if_exists", if_exists)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")

    @if_exists.setter
    def if_exists(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "if_exists", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsArgs:
    def __init__(__self__, *,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs']]]] = None,
                 validation_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs']]] parameters: (Updatable)
        :param pulumi.Input[str] validation_mode: (Updatable) Validation behavior mode.
               
               In `ENFORCING` mode, upon a validation failure, the request will be rejected with a 4xx response and not sent to the backend.
               
               In `PERMISSIVE` mode, the result of the validation will be exposed as metrics while the request will follow the normal path.
               
               `DISABLED` type turns the validation off.
        """
        DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameters=parameters,
            validation_mode=validation_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs']]]] = None,
             validation_mode: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'validationMode' in kwargs:
            validation_mode = kwargs['validationMode']

        if parameters is not None:
            _setter("parameters", parameters)
        if validation_mode is not None:
            _setter("validation_mode", validation_mode)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs']]]]:
        """
        (Updatable)
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Validation behavior mode.

        In `ENFORCING` mode, upon a validation failure, the request will be rejected with a 4xx response and not sent to the backend.

        In `PERMISSIVE` mode, the result of the validation will be exposed as metrics while the request will follow the normal path.

        `DISABLED` type turns the validation off.
        """
        return pulumi.get(self, "validation_mode")

    @validation_mode.setter
    def validation_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "validation_mode", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 required: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[bool] required: (Updatable) Determines if the parameter is required in the request.
        """
        DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            required=required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             required: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        if required is not None:
            _setter("required", required)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Determines if the parameter is required in the request.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)


@pulumi.input_type
class DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cache_key_additions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 is_private_caching_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cache_key_additions: (Updatable) A list of context expressions whose values will be added to the base cache key. Values should contain an expression enclosed within ${} delimiters. Only the request context is available.
        :param pulumi.Input[bool] is_enabled: (Updatable) Whether this policy is currently enabled.
        :param pulumi.Input[bool] is_private_caching_enabled: (Updatable) Set true to allow caching responses where the request has an Authorization header. Ensure you have configured your  cache key additions to get the level of isolation across authenticated requests that you require.
               
               When false, any request with an Authorization header will not be stored in the Response Cache.
               
               If using the CustomAuthenticationPolicy then the tokenHeader/tokenQueryParam are also subject to this check.
        """
        DeploymentSpecificationRouteRequestPoliciesResponseCacheLookupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            cache_key_additions=cache_key_additions,
            is_enabled=is_enabled,
            is_private_caching_enabled=is_private_caching_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             cache_key_additions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             is_enabled: Optional[pulumi.Input[bool]] = None,
             is_private_caching_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cacheKeyAdditions' in kwargs:
            cache_key_additions = kwargs['cacheKeyAdditions']
        if 'isEnabled' in kwargs:
            is_enabled = kwargs['isEnabled']
        if 'isPrivateCachingEnabled' in kwargs:
            is_private_caching_enabled = kwargs['isPrivateCachingEnabled']

        _setter("type", type)
        if cache_key_additions is not None:
            _setter("cache_key_additions", cache_key_additions)
        if is_enabled is not None:
            _setter("is_enabled", is_enabled)
        if is_private_caching_enabled is not None:
            _setter("is_private_caching_enabled", is_private_caching_enabled)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cacheKeyAdditions")
    def cache_key_additions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of context expressions whose values will be added to the base cache key. Values should contain an expression enclosed within ${} delimiters. Only the request context is available.
        """
        return pulumi.get(self, "cache_key_additions")

    @cache_key_additions.setter
    def cache_key_additions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cache_key_additions", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Whether this policy is currently enabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isPrivateCachingEnabled")
    def is_private_caching_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Set true to allow caching responses where the request has an Authorization header. Ensure you have configured your  cache key additions to get the level of isolation across authenticated requests that you require.

        When false, any request with an Authorization header will not be stored in the Response Cache.

        If using the CustomAuthenticationPolicy then the tokenHeader/tokenQueryParam are also subject to this check.
        """
        return pulumi.get(self, "is_private_caching_enabled")

    @is_private_caching_enabled.setter
    def is_private_caching_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_private_caching_enabled", value)


@pulumi.input_type
class DeploymentSpecificationRouteResponsePoliciesArgs:
    def __init__(__self__, *,
                 header_transformations: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsArgs']] = None,
                 response_cache_store: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesResponseCacheStoreArgs']] = None):
        """
        :param pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsArgs'] header_transformations: (Updatable) A set of transformations to apply to HTTP headers that pass through the gateway.
        :param pulumi.Input['DeploymentSpecificationRouteResponsePoliciesResponseCacheStoreArgs'] response_cache_store: (Updatable) Base policy for how a response from a backend is cached in the Response Cache.
        """
        DeploymentSpecificationRouteResponsePoliciesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_transformations=header_transformations,
            response_cache_store=response_cache_store,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_transformations: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsArgs']] = None,
             response_cache_store: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesResponseCacheStoreArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'headerTransformations' in kwargs:
            header_transformations = kwargs['headerTransformations']
        if 'responseCacheStore' in kwargs:
            response_cache_store = kwargs['responseCacheStore']

        if header_transformations is not None:
            _setter("header_transformations", header_transformations)
        if response_cache_store is not None:
            _setter("response_cache_store", response_cache_store)

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsArgs']]:
        """
        (Updatable) A set of transformations to apply to HTTP headers that pass through the gateway.
        """
        return pulumi.get(self, "header_transformations")

    @header_transformations.setter
    def header_transformations(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsArgs']]):
        pulumi.set(self, "header_transformations", value)

    @property
    @pulumi.getter(name="responseCacheStore")
    def response_cache_store(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesResponseCacheStoreArgs']]:
        """
        (Updatable) Base policy for how a response from a backend is cached in the Response Cache.
        """
        return pulumi.get(self, "response_cache_store")

    @response_cache_store.setter
    def response_cache_store(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesResponseCacheStoreArgs']]):
        pulumi.set(self, "response_cache_store", value)


@pulumi.input_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsArgs:
    def __init__(__self__, *,
                 filter_headers: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersArgs']] = None,
                 rename_headers: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersArgs']] = None,
                 set_headers: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersArgs']] = None):
        """
        :param pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersArgs'] filter_headers: (Updatable) Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        :param pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersArgs'] rename_headers: (Updatable) Rename HTTP headers as they pass through the gateway.
        :param pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersArgs'] set_headers: (Updatable) Set HTTP headers as they pass through the gateway.
        """
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_headers=filter_headers,
            rename_headers=rename_headers,
            set_headers=set_headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_headers: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersArgs']] = None,
             rename_headers: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersArgs']] = None,
             set_headers: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'filterHeaders' in kwargs:
            filter_headers = kwargs['filterHeaders']
        if 'renameHeaders' in kwargs:
            rename_headers = kwargs['renameHeaders']
        if 'setHeaders' in kwargs:
            set_headers = kwargs['setHeaders']

        if filter_headers is not None:
            _setter("filter_headers", filter_headers)
        if rename_headers is not None:
            _setter("rename_headers", rename_headers)
        if set_headers is not None:
            _setter("set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersArgs']]:
        """
        (Updatable) Filter HTTP headers as they pass through the gateway.  The gateway applies filters after other transformations, so any headers set or renamed must also be listed here when using an ALLOW type policy.
        """
        return pulumi.get(self, "filter_headers")

    @filter_headers.setter
    def filter_headers(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersArgs']]):
        pulumi.set(self, "filter_headers", value)

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersArgs']]:
        """
        (Updatable) Rename HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "rename_headers")

    @rename_headers.setter
    def rename_headers(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersArgs']]):
        pulumi.set(self, "rename_headers", value)

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersArgs']]:
        """
        (Updatable) Set HTTP headers as they pass through the gateway.
        """
        return pulumi.get(self, "set_headers")

    @set_headers.setter
    def set_headers(self, value: Optional[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersArgs']]):
        pulumi.set(self, "set_headers", value)


@pulumi.input_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemArgs']]],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemArgs']]] items: (Updatable) The list of headers.
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemArgs']]],
             type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)
        _setter("type", type)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemArgs']]]:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemArgs']]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemArgs']]] items: (Updatable) The list of headers.
        """
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemArgs']]]:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemArgs']]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemArgs:
    def __init__(__self__, *,
                 from_: pulumi.Input[str],
                 to: pulumi.Input[str]):
        """
        :param pulumi.Input[str] from_: (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[str] to: (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_=from_,
            to=to,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_: pulumi.Input[str],
             to: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'from' in kwargs:
            from_ = kwargs['from']

        _setter("from_", from_)
        _setter("to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input[str]:
        """
        (Updatable) The original case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> pulumi.Input[str]:
        """
        (Updatable) The new name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: pulumi.Input[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemArgs']]] items: (Updatable) The list of headers.
        """
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemArgs']]]:
        """
        (Updatable) The list of headers.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemArgs']]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]],
                 if_exists: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        :param pulumi.Input[str] if_exists: (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            if_exists=if_exists,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             values: pulumi.Input[Sequence[pulumi.Input[str]]],
             if_exists: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ifExists' in kwargs:
            if_exists = kwargs['ifExists']

        _setter("name", name)
        _setter("values", values)
        if if_exists is not None:
            _setter("if_exists", if_exists)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Updatable) The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        (Updatable) A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) If a header with the same name already exists in the request, OVERWRITE will overwrite the value, APPEND will append to the existing value, or SKIP will keep the existing value.
        """
        return pulumi.get(self, "if_exists")

    @if_exists.setter
    def if_exists(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "if_exists", value)


@pulumi.input_type
class DeploymentSpecificationRouteResponsePoliciesResponseCacheStoreArgs:
    def __init__(__self__, *,
                 time_to_live_in_seconds: pulumi.Input[int],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[int] time_to_live_in_seconds: (Updatable) Sets the number of seconds for a response from a backend being stored in the Response Cache before it expires.
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache Store Policy.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        DeploymentSpecificationRouteResponsePoliciesResponseCacheStoreArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            time_to_live_in_seconds=time_to_live_in_seconds,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             time_to_live_in_seconds: pulumi.Input[int],
             type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'timeToLiveInSeconds' in kwargs:
            time_to_live_in_seconds = kwargs['timeToLiveInSeconds']

        _setter("time_to_live_in_seconds", time_to_live_in_seconds)
        _setter("type", type)

    @property
    @pulumi.getter(name="timeToLiveInSeconds")
    def time_to_live_in_seconds(self) -> pulumi.Input[int]:
        """
        (Updatable) Sets the number of seconds for a response from a backend being stored in the Response Cache before it expires.
        """
        return pulumi.get(self, "time_to_live_in_seconds")

    @time_to_live_in_seconds.setter
    def time_to_live_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "time_to_live_in_seconds", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache Store Policy.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GatewayCaBundleArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 ca_bundle_id: Optional[pulumi.Input[str]] = None,
                 certificate_authority_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache.
        :param pulumi.Input[str] ca_bundle_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
        :param pulumi.Input[str] certificate_authority_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
        """
        GatewayCaBundleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            ca_bundle_id=ca_bundle_id,
            certificate_authority_id=certificate_authority_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             ca_bundle_id: Optional[pulumi.Input[str]] = None,
             certificate_authority_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caBundleId' in kwargs:
            ca_bundle_id = kwargs['caBundleId']
        if 'certificateAuthorityId' in kwargs:
            certificate_authority_id = kwargs['certificateAuthorityId']

        _setter("type", type)
        if ca_bundle_id is not None:
            _setter("ca_bundle_id", ca_bundle_id)
        if certificate_authority_id is not None:
            _setter("certificate_authority_id", certificate_authority_id)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="caBundleId")
    def ca_bundle_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
        """
        return pulumi.get(self, "ca_bundle_id")

    @ca_bundle_id.setter
    def ca_bundle_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle_id", value)

    @property
    @pulumi.getter(name="certificateAuthorityId")
    def certificate_authority_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
        """
        return pulumi.get(self, "certificate_authority_id")

    @certificate_authority_id.setter
    def certificate_authority_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_authority_id", value)


@pulumi.input_type
class GatewayIpAddressArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip_address: An IP address.
        """
        GatewayIpAddressArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip_address=ip_address,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip_address: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']

        if ip_address is not None:
            _setter("ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        An IP address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)


@pulumi.input_type
class GatewayResponseCacheDetailsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 authentication_secret_id: Optional[pulumi.Input[str]] = None,
                 authentication_secret_version_number: Optional[pulumi.Input[str]] = None,
                 connect_timeout_in_ms: Optional[pulumi.Input[int]] = None,
                 is_ssl_enabled: Optional[pulumi.Input[bool]] = None,
                 is_ssl_verify_disabled: Optional[pulumi.Input[bool]] = None,
                 read_timeout_in_ms: Optional[pulumi.Input[int]] = None,
                 send_timeout_in_ms: Optional[pulumi.Input[int]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayResponseCacheDetailsServerArgs']]]] = None):
        """
        :param pulumi.Input[str] type: (Updatable) Type of the Response Cache.
        :param pulumi.Input[str] authentication_secret_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        :param pulumi.Input[str] authentication_secret_version_number: (Updatable) The version number of the authentication secret to use.
        :param pulumi.Input[int] connect_timeout_in_ms: (Updatable) Defines the timeout for establishing a connection with the Response Cache.
        :param pulumi.Input[bool] is_ssl_enabled: (Updatable) Defines if the connection should be over SSL.
        :param pulumi.Input[bool] is_ssl_verify_disabled: (Updatable) Defines whether or not to uphold SSL verification.
        :param pulumi.Input[int] read_timeout_in_ms: (Updatable) Defines the timeout for reading data from the Response Cache.
        :param pulumi.Input[int] send_timeout_in_ms: (Updatable) Defines the timeout for transmitting data to the Response Cache.
        :param pulumi.Input[Sequence[pulumi.Input['GatewayResponseCacheDetailsServerArgs']]] servers: (Updatable) The set of cache store members to connect to. At present only a single server is supported.
        """
        GatewayResponseCacheDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            authentication_secret_id=authentication_secret_id,
            authentication_secret_version_number=authentication_secret_version_number,
            connect_timeout_in_ms=connect_timeout_in_ms,
            is_ssl_enabled=is_ssl_enabled,
            is_ssl_verify_disabled=is_ssl_verify_disabled,
            read_timeout_in_ms=read_timeout_in_ms,
            send_timeout_in_ms=send_timeout_in_ms,
            servers=servers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             authentication_secret_id: Optional[pulumi.Input[str]] = None,
             authentication_secret_version_number: Optional[pulumi.Input[str]] = None,
             connect_timeout_in_ms: Optional[pulumi.Input[int]] = None,
             is_ssl_enabled: Optional[pulumi.Input[bool]] = None,
             is_ssl_verify_disabled: Optional[pulumi.Input[bool]] = None,
             read_timeout_in_ms: Optional[pulumi.Input[int]] = None,
             send_timeout_in_ms: Optional[pulumi.Input[int]] = None,
             servers: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayResponseCacheDetailsServerArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authenticationSecretId' in kwargs:
            authentication_secret_id = kwargs['authenticationSecretId']
        if 'authenticationSecretVersionNumber' in kwargs:
            authentication_secret_version_number = kwargs['authenticationSecretVersionNumber']
        if 'connectTimeoutInMs' in kwargs:
            connect_timeout_in_ms = kwargs['connectTimeoutInMs']
        if 'isSslEnabled' in kwargs:
            is_ssl_enabled = kwargs['isSslEnabled']
        if 'isSslVerifyDisabled' in kwargs:
            is_ssl_verify_disabled = kwargs['isSslVerifyDisabled']
        if 'readTimeoutInMs' in kwargs:
            read_timeout_in_ms = kwargs['readTimeoutInMs']
        if 'sendTimeoutInMs' in kwargs:
            send_timeout_in_ms = kwargs['sendTimeoutInMs']

        _setter("type", type)
        if authentication_secret_id is not None:
            _setter("authentication_secret_id", authentication_secret_id)
        if authentication_secret_version_number is not None:
            _setter("authentication_secret_version_number", authentication_secret_version_number)
        if connect_timeout_in_ms is not None:
            _setter("connect_timeout_in_ms", connect_timeout_in_ms)
        if is_ssl_enabled is not None:
            _setter("is_ssl_enabled", is_ssl_enabled)
        if is_ssl_verify_disabled is not None:
            _setter("is_ssl_verify_disabled", is_ssl_verify_disabled)
        if read_timeout_in_ms is not None:
            _setter("read_timeout_in_ms", read_timeout_in_ms)
        if send_timeout_in_ms is not None:
            _setter("send_timeout_in_ms", send_timeout_in_ms)
        if servers is not None:
            _setter("servers", servers)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of the Response Cache.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="authenticationSecretId")
    def authentication_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Vault Service secret resource.
        """
        return pulumi.get(self, "authentication_secret_id")

    @authentication_secret_id.setter
    def authentication_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_secret_id", value)

    @property
    @pulumi.getter(name="authenticationSecretVersionNumber")
    def authentication_secret_version_number(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The version number of the authentication secret to use.
        """
        return pulumi.get(self, "authentication_secret_version_number")

    @authentication_secret_version_number.setter
    def authentication_secret_version_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_secret_version_number", value)

    @property
    @pulumi.getter(name="connectTimeoutInMs")
    def connect_timeout_in_ms(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Defines the timeout for establishing a connection with the Response Cache.
        """
        return pulumi.get(self, "connect_timeout_in_ms")

    @connect_timeout_in_ms.setter
    def connect_timeout_in_ms(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timeout_in_ms", value)

    @property
    @pulumi.getter(name="isSslEnabled")
    def is_ssl_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Defines if the connection should be over SSL.
        """
        return pulumi.get(self, "is_ssl_enabled")

    @is_ssl_enabled.setter
    def is_ssl_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ssl_enabled", value)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Defines whether or not to uphold SSL verification.
        """
        return pulumi.get(self, "is_ssl_verify_disabled")

    @is_ssl_verify_disabled.setter
    def is_ssl_verify_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ssl_verify_disabled", value)

    @property
    @pulumi.getter(name="readTimeoutInMs")
    def read_timeout_in_ms(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Defines the timeout for reading data from the Response Cache.
        """
        return pulumi.get(self, "read_timeout_in_ms")

    @read_timeout_in_ms.setter
    def read_timeout_in_ms(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_timeout_in_ms", value)

    @property
    @pulumi.getter(name="sendTimeoutInMs")
    def send_timeout_in_ms(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Defines the timeout for transmitting data to the Response Cache.
        """
        return pulumi.get(self, "send_timeout_in_ms")

    @send_timeout_in_ms.setter
    def send_timeout_in_ms(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "send_timeout_in_ms", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayResponseCacheDetailsServerArgs']]]]:
        """
        (Updatable) The set of cache store members to connect to. At present only a single server is supported.
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayResponseCacheDetailsServerArgs']]]]):
        pulumi.set(self, "servers", value)


@pulumi.input_type
class GatewayResponseCacheDetailsServerArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] host: (Updatable) Hostname or IP address (IPv4 only) where the cache store is running.
        :param pulumi.Input[int] port: (Updatable) The port the cache store is exposed on.
        """
        GatewayResponseCacheDetailsServerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host=host,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if host is not None:
            _setter("host", host)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Hostname or IP address (IPv4 only) where the cache store is running.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The port the cache store is exposed on.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class SubscriberClientArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 token: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: (Updatable) The name of the client. Must be unique within a subscriber.
        :param pulumi.Input[str] token: (Updatable) The token for the client. Must be unique within a tenancy.
        """
        SubscriberClientArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            token=token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             token: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("token", token)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Updatable) The name of the client. Must be unique within a subscriber.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        """
        (Updatable) The token for the client. Must be unique within a tenancy.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class UsagePlanEntitlementArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 quota: Optional[pulumi.Input['UsagePlanEntitlementQuotaArgs']] = None,
                 rate_limit: Optional[pulumi.Input['UsagePlanEntitlementRateLimitArgs']] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['UsagePlanEntitlementTargetArgs']]]] = None):
        """
        :param pulumi.Input[str] name: (Updatable) An entitlement name, unique within a usage plan.
        :param pulumi.Input[str] description: (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        :param pulumi.Input['UsagePlanEntitlementQuotaArgs'] quota: (Updatable) Quota policy for a usage plan.
        :param pulumi.Input['UsagePlanEntitlementRateLimitArgs'] rate_limit: (Updatable) Rate-limiting policy for a usage plan.
        :param pulumi.Input[Sequence[pulumi.Input['UsagePlanEntitlementTargetArgs']]] targets: (Updatable) A collection of targeted deployments that the entitlement will be applied to.
        """
        UsagePlanEntitlementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            description=description,
            quota=quota,
            rate_limit=rate_limit,
            targets=targets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             quota: Optional[pulumi.Input['UsagePlanEntitlementQuotaArgs']] = None,
             rate_limit: Optional[pulumi.Input['UsagePlanEntitlementRateLimitArgs']] = None,
             targets: Optional[pulumi.Input[Sequence[pulumi.Input['UsagePlanEntitlementTargetArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rateLimit' in kwargs:
            rate_limit = kwargs['rateLimit']

        _setter("name", name)
        if description is not None:
            _setter("description", description)
        if quota is not None:
            _setter("quota", quota)
        if rate_limit is not None:
            _setter("rate_limit", rate_limit)
        if targets is not None:
            _setter("targets", targets)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        (Updatable) An entitlement name, unique within a usage plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def quota(self) -> Optional[pulumi.Input['UsagePlanEntitlementQuotaArgs']]:
        """
        (Updatable) Quota policy for a usage plan.
        """
        return pulumi.get(self, "quota")

    @quota.setter
    def quota(self, value: Optional[pulumi.Input['UsagePlanEntitlementQuotaArgs']]):
        pulumi.set(self, "quota", value)

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional[pulumi.Input['UsagePlanEntitlementRateLimitArgs']]:
        """
        (Updatable) Rate-limiting policy for a usage plan.
        """
        return pulumi.get(self, "rate_limit")

    @rate_limit.setter
    def rate_limit(self, value: Optional[pulumi.Input['UsagePlanEntitlementRateLimitArgs']]):
        pulumi.set(self, "rate_limit", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UsagePlanEntitlementTargetArgs']]]]:
        """
        (Updatable) A collection of targeted deployments that the entitlement will be applied to.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UsagePlanEntitlementTargetArgs']]]]):
        pulumi.set(self, "targets", value)


@pulumi.input_type
class UsagePlanEntitlementQuotaArgs:
    def __init__(__self__, *,
                 operation_on_breach: pulumi.Input[str],
                 reset_policy: pulumi.Input[str],
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] operation_on_breach: (Updatable) What the usage plan will do when a quota is breached: `REJECT` will allow no further requests `ALLOW` will continue to allow further requests
        :param pulumi.Input[str] reset_policy: (Updatable) The policy that controls when quotas will reset. Example: `CALENDAR`
        :param pulumi.Input[str] unit: (Updatable) The unit of time over which rate limits are calculated. Example: `SECOND`
        :param pulumi.Input[int] value: (Updatable) The number of requests that can be made per time period.
        """
        UsagePlanEntitlementQuotaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operation_on_breach=operation_on_breach,
            reset_policy=reset_policy,
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operation_on_breach: pulumi.Input[str],
             reset_policy: pulumi.Input[str],
             unit: pulumi.Input[str],
             value: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'operationOnBreach' in kwargs:
            operation_on_breach = kwargs['operationOnBreach']
        if 'resetPolicy' in kwargs:
            reset_policy = kwargs['resetPolicy']

        _setter("operation_on_breach", operation_on_breach)
        _setter("reset_policy", reset_policy)
        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter(name="operationOnBreach")
    def operation_on_breach(self) -> pulumi.Input[str]:
        """
        (Updatable) What the usage plan will do when a quota is breached: `REJECT` will allow no further requests `ALLOW` will continue to allow further requests
        """
        return pulumi.get(self, "operation_on_breach")

    @operation_on_breach.setter
    def operation_on_breach(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_on_breach", value)

    @property
    @pulumi.getter(name="resetPolicy")
    def reset_policy(self) -> pulumi.Input[str]:
        """
        (Updatable) The policy that controls when quotas will reset. Example: `CALENDAR`
        """
        return pulumi.get(self, "reset_policy")

    @reset_policy.setter
    def reset_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "reset_policy", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        (Updatable) The unit of time over which rate limits are calculated. Example: `SECOND`
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        (Updatable) The number of requests that can be made per time period.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class UsagePlanEntitlementRateLimitArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        """
        :param pulumi.Input[str] unit: (Updatable) The unit of time over which rate limits are calculated. Example: `SECOND`
        :param pulumi.Input[int] value: (Updatable) The number of requests that can be made per time period.
        """
        UsagePlanEntitlementRateLimitArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: pulumi.Input[str],
             value: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        (Updatable) The unit of time over which rate limits are calculated. Example: `SECOND`
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        """
        (Updatable) The number of requests that can be made per time period.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class UsagePlanEntitlementTargetArgs:
    def __init__(__self__, *,
                 deployment_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] deployment_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a deployment resource.
        """
        UsagePlanEntitlementTargetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            deployment_id=deployment_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             deployment_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'deploymentId' in kwargs:
            deployment_id = kwargs['deploymentId']

        _setter("deployment_id", deployment_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> pulumi.Input[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a deployment resource.
        """
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_id", value)


@pulumi.input_type
class GetApisFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Name of the validation.
        """
        GetApisFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the validation.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetCertificatesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetCertificatesFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetDeploymentsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The case-insensitive name of the header.  This name must be unique across transformation policies.
        :param Sequence[str] values: A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        GetDeploymentsFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The case-insensitive name of the header.  This name must be unique across transformation policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of new values.  Each value can be a constant or may include one or more expressions enclosed within ${} delimiters.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetGatewaysFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetGatewaysFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetSubscribersFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the client. Must be unique within a subscriber.
        """
        GetSubscribersFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the client. Must be unique within a subscriber.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetUsagePlansFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: An entitlement name, unique within a usage plan.
        """
        GetUsagePlansFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        An entitlement name, unique within a usage plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


