# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ApiValidationResult',
    'DeploymentSpecification',
    'DeploymentSpecificationLoggingPolicies',
    'DeploymentSpecificationLoggingPoliciesAccessLog',
    'DeploymentSpecificationLoggingPoliciesExecutionLog',
    'DeploymentSpecificationRequestPolicies',
    'DeploymentSpecificationRequestPoliciesAuthentication',
    'DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys',
    'DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicy',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetails',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformations',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeaders',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItem',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeaders',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeaders',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetails',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicy',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicy',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaim',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetails',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKey',
    'DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetails',
    'DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim',
    'DeploymentSpecificationRequestPoliciesCors',
    'DeploymentSpecificationRequestPoliciesDynamicAuthentication',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServer',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetail',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeys',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKey',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetails',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformations',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeaders',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItem',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeaders',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeaders',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetails',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaim',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetails',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetails',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey',
    'DeploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSource',
    'DeploymentSpecificationRequestPoliciesMutualTls',
    'DeploymentSpecificationRequestPoliciesRateLimiting',
    'DeploymentSpecificationRequestPoliciesUsagePlans',
    'DeploymentSpecificationRoute',
    'DeploymentSpecificationRouteBackend',
    'DeploymentSpecificationRouteBackendHeader',
    'DeploymentSpecificationRouteBackendRoutingBackend',
    'DeploymentSpecificationRouteBackendRoutingBackendBackend',
    'DeploymentSpecificationRouteBackendRoutingBackendBackendHeader',
    'DeploymentSpecificationRouteBackendRoutingBackendKey',
    'DeploymentSpecificationRouteBackendSelectionSource',
    'DeploymentSpecificationRouteLoggingPolicies',
    'DeploymentSpecificationRouteLoggingPoliciesAccessLog',
    'DeploymentSpecificationRouteLoggingPoliciesExecutionLog',
    'DeploymentSpecificationRouteRequestPolicies',
    'DeploymentSpecificationRouteRequestPoliciesAuthorization',
    'DeploymentSpecificationRouteRequestPoliciesBodyValidation',
    'DeploymentSpecificationRouteRequestPoliciesBodyValidationContent',
    'DeploymentSpecificationRouteRequestPoliciesCors',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformations',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeaders',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItem',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeaders',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeaders',
    'DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem',
    'DeploymentSpecificationRouteRequestPoliciesHeaderValidations',
    'DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeader',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParameters',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItem',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParameters',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParameters',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterValidations',
    'DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameter',
    'DeploymentSpecificationRouteRequestPoliciesResponseCacheLookup',
    'DeploymentSpecificationRouteResponsePolicies',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformations',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeaders',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItem',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeaders',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeaders',
    'DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem',
    'DeploymentSpecificationRouteResponsePoliciesResponseCacheStore',
    'GatewayCaBundle',
    'GatewayIpAddress',
    'GatewayResponseCacheDetails',
    'GatewayResponseCacheDetailsServer',
    'SubscriberClient',
    'UsagePlanEntitlement',
    'UsagePlanEntitlementQuota',
    'UsagePlanEntitlementRateLimit',
    'UsagePlanEntitlementTarget',
    'GetApiDeploymentSpecificationLoggingPolicyResult',
    'GetApiDeploymentSpecificationLoggingPolicyAccessLogResult',
    'GetApiDeploymentSpecificationLoggingPolicyExecutionLogResult',
    'GetApiDeploymentSpecificationRequestPolicyResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKeyResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetailResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetailResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyClientDetailResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyKeyResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetailResult',
    'GetApiDeploymentSpecificationRequestPolicyAuthenticationVerifyClaimResult',
    'GetApiDeploymentSpecificationRequestPolicyCorResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKeyResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKeyResult',
    'GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationSelectionSourceResult',
    'GetApiDeploymentSpecificationRequestPolicyMutualTlResult',
    'GetApiDeploymentSpecificationRequestPolicyRateLimitingResult',
    'GetApiDeploymentSpecificationRequestPolicyUsagePlanResult',
    'GetApiDeploymentSpecificationRouteResult',
    'GetApiDeploymentSpecificationRouteBackendResult',
    'GetApiDeploymentSpecificationRouteBackendHeaderResult',
    'GetApiDeploymentSpecificationRouteBackendRoutingBackendResult',
    'GetApiDeploymentSpecificationRouteBackendRoutingBackendBackendResult',
    'GetApiDeploymentSpecificationRouteBackendRoutingBackendBackendHeaderResult',
    'GetApiDeploymentSpecificationRouteBackendRoutingBackendKeyResult',
    'GetApiDeploymentSpecificationRouteBackendSelectionSourceResult',
    'GetApiDeploymentSpecificationRouteLoggingPolicyResult',
    'GetApiDeploymentSpecificationRouteLoggingPolicyAccessLogResult',
    'GetApiDeploymentSpecificationRouteLoggingPolicyExecutionLogResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyAuthorizationResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyBodyValidationResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyBodyValidationContentResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyCorResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItemResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItemResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItemResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyHeaderValidationResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyHeaderValidationHeaderResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItemResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItemResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItemResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterValidationResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterValidationParameterResult',
    'GetApiDeploymentSpecificationRouteRequestPolicyResponseCacheLookupResult',
    'GetApiDeploymentSpecificationRouteResponsePolicyResult',
    'GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationResult',
    'GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderResult',
    'GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItemResult',
    'GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderResult',
    'GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItemResult',
    'GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderResult',
    'GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItemResult',
    'GetApiDeploymentSpecificationRouteResponsePolicyResponseCacheStoreResult',
    'GetApiValidationResultResult',
    'GetApiValidationValidationResult',
    'GetApiValidationValidationDetailResult',
    'GetApiValidationValidationDetailSrcResult',
    'GetApisApiCollectionResult',
    'GetApisApiCollectionItemResult',
    'GetApisApiCollectionItemValidationResultResult',
    'GetApisFilterResult',
    'GetCertificatesCertificateCollectionResult',
    'GetCertificatesCertificateCollectionItemResult',
    'GetCertificatesFilterResult',
    'GetDeploymentSpecificationResult',
    'GetDeploymentSpecificationLoggingPolicyResult',
    'GetDeploymentSpecificationLoggingPolicyAccessLogResult',
    'GetDeploymentSpecificationLoggingPolicyExecutionLogResult',
    'GetDeploymentSpecificationRequestPolicyResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationPublicKeyResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKeyResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetailResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetailResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyClientDetailResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyKeyResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetailResult',
    'GetDeploymentSpecificationRequestPolicyAuthenticationVerifyClaimResult',
    'GetDeploymentSpecificationRequestPolicyCorResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKeyResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKeyResult',
    'GetDeploymentSpecificationRequestPolicyDynamicAuthenticationSelectionSourceResult',
    'GetDeploymentSpecificationRequestPolicyMutualTlResult',
    'GetDeploymentSpecificationRequestPolicyRateLimitingResult',
    'GetDeploymentSpecificationRequestPolicyUsagePlanResult',
    'GetDeploymentSpecificationRouteResult',
    'GetDeploymentSpecificationRouteBackendResult',
    'GetDeploymentSpecificationRouteBackendHeaderResult',
    'GetDeploymentSpecificationRouteBackendRoutingBackendResult',
    'GetDeploymentSpecificationRouteBackendRoutingBackendBackendResult',
    'GetDeploymentSpecificationRouteBackendRoutingBackendBackendHeaderResult',
    'GetDeploymentSpecificationRouteBackendRoutingBackendKeyResult',
    'GetDeploymentSpecificationRouteBackendSelectionSourceResult',
    'GetDeploymentSpecificationRouteLoggingPolicyResult',
    'GetDeploymentSpecificationRouteLoggingPolicyAccessLogResult',
    'GetDeploymentSpecificationRouteLoggingPolicyExecutionLogResult',
    'GetDeploymentSpecificationRouteRequestPolicyResult',
    'GetDeploymentSpecificationRouteRequestPolicyAuthorizationResult',
    'GetDeploymentSpecificationRouteRequestPolicyBodyValidationResult',
    'GetDeploymentSpecificationRouteRequestPolicyBodyValidationContentResult',
    'GetDeploymentSpecificationRouteRequestPolicyCorResult',
    'GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationResult',
    'GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderResult',
    'GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItemResult',
    'GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderResult',
    'GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItemResult',
    'GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderResult',
    'GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItemResult',
    'GetDeploymentSpecificationRouteRequestPolicyHeaderValidationResult',
    'GetDeploymentSpecificationRouteRequestPolicyHeaderValidationHeaderResult',
    'GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationResult',
    'GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterResult',
    'GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItemResult',
    'GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterResult',
    'GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItemResult',
    'GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterResult',
    'GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItemResult',
    'GetDeploymentSpecificationRouteRequestPolicyQueryParameterValidationResult',
    'GetDeploymentSpecificationRouteRequestPolicyQueryParameterValidationParameterResult',
    'GetDeploymentSpecificationRouteRequestPolicyResponseCacheLookupResult',
    'GetDeploymentSpecificationRouteResponsePolicyResult',
    'GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationResult',
    'GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderResult',
    'GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItemResult',
    'GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderResult',
    'GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItemResult',
    'GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderResult',
    'GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItemResult',
    'GetDeploymentSpecificationRouteResponsePolicyResponseCacheStoreResult',
    'GetDeploymentsDeploymentCollectionResult',
    'GetDeploymentsDeploymentCollectionSpecificationResult',
    'GetDeploymentsDeploymentCollectionSpecificationLoggingPolicyResult',
    'GetDeploymentsDeploymentCollectionSpecificationLoggingPolicyAccessLogResult',
    'GetDeploymentsDeploymentCollectionSpecificationLoggingPolicyExecutionLogResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKeyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKeyKeyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetailResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetailResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyClientDetailResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyKeyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetailResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationVerifyClaimResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyCorResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKeyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKeyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationSelectionSourceResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyMutualTlResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyRateLimitingResult',
    'GetDeploymentsDeploymentCollectionSpecificationRequestPolicyUsagePlanResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteBackendResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteBackendHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendBackendResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendBackendHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendKeyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteBackendSelectionSourceResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyAccessLogResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyExecutionLogResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyAuthorizationResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyBodyValidationResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyBodyValidationContentResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyCorResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationSetHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderValidationResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderValidationHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterValidationResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterValidationParameterResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyResponseCacheLookupResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationSetHeaderResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItemResult',
    'GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyResponseCacheStoreResult',
    'GetDeploymentsFilterResult',
    'GetGatewayCaBundleResult',
    'GetGatewayIpAddressResult',
    'GetGatewayResponseCacheDetailResult',
    'GetGatewayResponseCacheDetailServerResult',
    'GetGatewaysFilterResult',
    'GetGatewaysGatewayCollectionResult',
    'GetGatewaysGatewayCollectionCaBundleResult',
    'GetGatewaysGatewayCollectionIpAddressResult',
    'GetGatewaysGatewayCollectionResponseCacheDetailResult',
    'GetGatewaysGatewayCollectionResponseCacheDetailServerResult',
    'GetSubscriberClientResult',
    'GetSubscribersFilterResult',
    'GetSubscribersSubscriberCollectionResult',
    'GetSubscribersSubscriberCollectionItemResult',
    'GetSubscribersSubscriberCollectionItemClientResult',
    'GetUsagePlanEntitlementResult',
    'GetUsagePlanEntitlementQuotaResult',
    'GetUsagePlanEntitlementRateLimitResult',
    'GetUsagePlanEntitlementTargetResult',
    'GetUsagePlansFilterResult',
    'GetUsagePlansUsagePlanCollectionResult',
    'GetUsagePlansUsagePlanCollectionItemResult',
    'GetUsagePlansUsagePlanCollectionItemEntitlementResult',
    'GetUsagePlansUsagePlanCollectionItemEntitlementQuotaResult',
    'GetUsagePlansUsagePlanCollectionItemEntitlementRateLimitResult',
    'GetUsagePlansUsagePlanCollectionItemEntitlementTargetResult',
]

@pulumi.output_type
class ApiValidationResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 result: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if result is not None:
            pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def result(self) -> Optional[str]:
        return pulumi.get(self, "result")


@pulumi.output_type
class DeploymentSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loggingPolicies":
            suggest = "logging_policies"
        elif key == "requestPolicies":
            suggest = "request_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 routes: Sequence['outputs.DeploymentSpecificationRoute'],
                 logging_policies: Optional['outputs.DeploymentSpecificationLoggingPolicies'] = None,
                 request_policies: Optional['outputs.DeploymentSpecificationRequestPolicies'] = None):
        pulumi.set(__self__, "routes", routes)
        if logging_policies is not None:
            pulumi.set(__self__, "logging_policies", logging_policies)
        if request_policies is not None:
            pulumi.set(__self__, "request_policies", request_policies)

    @property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.DeploymentSpecificationRoute']:
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> Optional['outputs.DeploymentSpecificationLoggingPolicies']:
        return pulumi.get(self, "logging_policies")

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> Optional['outputs.DeploymentSpecificationRequestPolicies']:
        return pulumi.get(self, "request_policies")


@pulumi.output_type
class DeploymentSpecificationLoggingPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLog":
            suggest = "access_log"
        elif key == "executionLog":
            suggest = "execution_log"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationLoggingPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationLoggingPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationLoggingPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_log: Optional['outputs.DeploymentSpecificationLoggingPoliciesAccessLog'] = None,
                 execution_log: Optional['outputs.DeploymentSpecificationLoggingPoliciesExecutionLog'] = None):
        if access_log is not None:
            pulumi.set(__self__, "access_log", access_log)
        if execution_log is not None:
            pulumi.set(__self__, "execution_log", execution_log)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> Optional['outputs.DeploymentSpecificationLoggingPoliciesAccessLog']:
        return pulumi.get(self, "access_log")

    @property
    @pulumi.getter(name="executionLog")
    def execution_log(self) -> Optional['outputs.DeploymentSpecificationLoggingPoliciesExecutionLog']:
        return pulumi.get(self, "execution_log")


@pulumi.output_type
class DeploymentSpecificationLoggingPoliciesAccessLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationLoggingPoliciesAccessLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationLoggingPoliciesAccessLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationLoggingPoliciesAccessLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class DeploymentSpecificationLoggingPoliciesExecutionLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "logLevel":
            suggest = "log_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationLoggingPoliciesExecutionLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationLoggingPoliciesExecutionLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationLoggingPoliciesExecutionLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 log_level: Optional[str] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")


@pulumi.output_type
class DeploymentSpecificationRequestPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dynamicAuthentication":
            suggest = "dynamic_authentication"
        elif key == "mutualTls":
            suggest = "mutual_tls"
        elif key == "rateLimiting":
            suggest = "rate_limiting"
        elif key == "usagePlans":
            suggest = "usage_plans"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional['outputs.DeploymentSpecificationRequestPoliciesAuthentication'] = None,
                 cors: Optional['outputs.DeploymentSpecificationRequestPoliciesCors'] = None,
                 dynamic_authentication: Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthentication'] = None,
                 mutual_tls: Optional['outputs.DeploymentSpecificationRequestPoliciesMutualTls'] = None,
                 rate_limiting: Optional['outputs.DeploymentSpecificationRequestPoliciesRateLimiting'] = None,
                 usage_plans: Optional['outputs.DeploymentSpecificationRequestPoliciesUsagePlans'] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if dynamic_authentication is not None:
            pulumi.set(__self__, "dynamic_authentication", dynamic_authentication)
        if mutual_tls is not None:
            pulumi.set(__self__, "mutual_tls", mutual_tls)
        if rate_limiting is not None:
            pulumi.set(__self__, "rate_limiting", rate_limiting)
        if usage_plans is not None:
            pulumi.set(__self__, "usage_plans", usage_plans)

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def cors(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesCors']:
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="dynamicAuthentication")
    def dynamic_authentication(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthentication']:
        return pulumi.get(self, "dynamic_authentication")

    @property
    @pulumi.getter(name="mutualTls")
    def mutual_tls(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesMutualTls']:
        return pulumi.get(self, "mutual_tls")

    @property
    @pulumi.getter(name="rateLimiting")
    def rate_limiting(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesRateLimiting']:
        return pulumi.get(self, "rate_limiting")

    @property
    @pulumi.getter(name="usagePlans")
    def usage_plans(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesUsagePlans']:
        return pulumi.get(self, "usage_plans")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheKeys":
            suggest = "cache_keys"
        elif key == "functionId":
            suggest = "function_id"
        elif key == "isAnonymousAccessAllowed":
            suggest = "is_anonymous_access_allowed"
        elif key == "maxClockSkewInSeconds":
            suggest = "max_clock_skew_in_seconds"
        elif key == "publicKeys":
            suggest = "public_keys"
        elif key == "tokenAuthScheme":
            suggest = "token_auth_scheme"
        elif key == "tokenHeader":
            suggest = "token_header"
        elif key == "tokenQueryParam":
            suggest = "token_query_param"
        elif key == "validationFailurePolicy":
            suggest = "validation_failure_policy"
        elif key == "validationPolicy":
            suggest = "validation_policy"
        elif key == "verifyClaims":
            suggest = "verify_claims"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 audiences: Optional[Sequence[str]] = None,
                 cache_keys: Optional[Sequence[str]] = None,
                 function_id: Optional[str] = None,
                 is_anonymous_access_allowed: Optional[bool] = None,
                 issuers: Optional[Sequence[str]] = None,
                 max_clock_skew_in_seconds: Optional[float] = None,
                 parameters: Optional[Mapping[str, Any]] = None,
                 public_keys: Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys'] = None,
                 token_auth_scheme: Optional[str] = None,
                 token_header: Optional[str] = None,
                 token_query_param: Optional[str] = None,
                 validation_failure_policy: Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicy'] = None,
                 validation_policy: Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicy'] = None,
                 verify_claims: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim']] = None):
        pulumi.set(__self__, "type", type)
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if cache_keys is not None:
            pulumi.set(__self__, "cache_keys", cache_keys)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if is_anonymous_access_allowed is not None:
            pulumi.set(__self__, "is_anonymous_access_allowed", is_anonymous_access_allowed)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if max_clock_skew_in_seconds is not None:
            pulumi.set(__self__, "max_clock_skew_in_seconds", max_clock_skew_in_seconds)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)
        if token_auth_scheme is not None:
            pulumi.set(__self__, "token_auth_scheme", token_auth_scheme)
        if token_header is not None:
            pulumi.set(__self__, "token_header", token_header)
        if token_query_param is not None:
            pulumi.set(__self__, "token_query_param", token_query_param)
        if validation_failure_policy is not None:
            pulumi.set(__self__, "validation_failure_policy", validation_failure_policy)
        if validation_policy is not None:
            pulumi.set(__self__, "validation_policy", validation_policy)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="cacheKeys")
    def cache_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cache_keys")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_anonymous_access_allowed")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="maxClockSkewInSeconds")
    def max_clock_skew_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "max_clock_skew_in_seconds")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys']:
        return pulumi.get(self, "public_keys")

    @property
    @pulumi.getter(name="tokenAuthScheme")
    def token_auth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "token_auth_scheme")

    @property
    @pulumi.getter(name="tokenHeader")
    def token_header(self) -> Optional[str]:
        return pulumi.get(self, "token_header")

    @property
    @pulumi.getter(name="tokenQueryParam")
    def token_query_param(self) -> Optional[str]:
        return pulumi.get(self, "token_query_param")

    @property
    @pulumi.getter(name="validationFailurePolicy")
    def validation_failure_policy(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicy']:
        return pulumi.get(self, "validation_failure_policy")

    @property
    @pulumi.getter(name="validationPolicy")
    def validation_policy(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicy']:
        return pulumi.get(self, "validation_policy")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSslVerifyDisabled":
            suggest = "is_ssl_verify_disabled"
        elif key == "maxCacheDurationInHours":
            suggest = "max_cache_duration_in_hours"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationPublicKeys.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 uri: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyOps":
            suggest = "key_ops"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationPublicKeysKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format: str,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientDetails":
            suggest = "client_details"
        elif key == "fallbackRedirectPath":
            suggest = "fallback_redirect_path"
        elif key == "logoutPath":
            suggest = "logout_path"
        elif key == "maxExpiryDurationInHours":
            suggest = "max_expiry_duration_in_hours"
        elif key == "responseCode":
            suggest = "response_code"
        elif key == "responseHeaderTransformations":
            suggest = "response_header_transformations"
        elif key == "responseMessage":
            suggest = "response_message"
        elif key == "responseType":
            suggest = "response_type"
        elif key == "sourceUriDetails":
            suggest = "source_uri_details"
        elif key == "useCookiesForIntermediateSteps":
            suggest = "use_cookies_for_intermediate_steps"
        elif key == "useCookiesForSession":
            suggest = "use_cookies_for_session"
        elif key == "usePkce":
            suggest = "use_pkce"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 client_details: Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetails'] = None,
                 fallback_redirect_path: Optional[str] = None,
                 logout_path: Optional[str] = None,
                 max_expiry_duration_in_hours: Optional[int] = None,
                 response_code: Optional[str] = None,
                 response_header_transformations: Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformations'] = None,
                 response_message: Optional[str] = None,
                 response_type: Optional[str] = None,
                 scopes: Optional[Sequence[str]] = None,
                 source_uri_details: Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetails'] = None,
                 use_cookies_for_intermediate_steps: Optional[bool] = None,
                 use_cookies_for_session: Optional[bool] = None,
                 use_pkce: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if fallback_redirect_path is not None:
            pulumi.set(__self__, "fallback_redirect_path", fallback_redirect_path)
        if logout_path is not None:
            pulumi.set(__self__, "logout_path", logout_path)
        if max_expiry_duration_in_hours is not None:
            pulumi.set(__self__, "max_expiry_duration_in_hours", max_expiry_duration_in_hours)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if response_header_transformations is not None:
            pulumi.set(__self__, "response_header_transformations", response_header_transformations)
        if response_message is not None:
            pulumi.set(__self__, "response_message", response_message)
        if response_type is not None:
            pulumi.set(__self__, "response_type", response_type)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if use_cookies_for_intermediate_steps is not None:
            pulumi.set(__self__, "use_cookies_for_intermediate_steps", use_cookies_for_intermediate_steps)
        if use_cookies_for_session is not None:
            pulumi.set(__self__, "use_cookies_for_session", use_cookies_for_session)
        if use_pkce is not None:
            pulumi.set(__self__, "use_pkce", use_pkce)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetails']:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="fallbackRedirectPath")
    def fallback_redirect_path(self) -> Optional[str]:
        return pulumi.get(self, "fallback_redirect_path")

    @property
    @pulumi.getter(name="logoutPath")
    def logout_path(self) -> Optional[str]:
        return pulumi.get(self, "logout_path")

    @property
    @pulumi.getter(name="maxExpiryDurationInHours")
    def max_expiry_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_expiry_duration_in_hours")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[str]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="responseHeaderTransformations")
    def response_header_transformations(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformations']:
        return pulumi.get(self, "response_header_transformations")

    @property
    @pulumi.getter(name="responseMessage")
    def response_message(self) -> Optional[str]:
        return pulumi.get(self, "response_message")

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[str]:
        return pulumi.get(self, "response_type")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetails']:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter(name="useCookiesForIntermediateSteps")
    def use_cookies_for_intermediate_steps(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_intermediate_steps")

    @property
    @pulumi.getter(name="useCookiesForSession")
    def use_cookies_for_session(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_session")

    @property
    @pulumi.getter(name="usePkce")
    def use_pkce(self) -> Optional[bool]:
        return pulumi.get(self, "use_pkce")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecretId":
            suggest = "client_secret_id"
        elif key == "clientSecretVersionNumber":
            suggest = "client_secret_version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyClientDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterHeaders":
            suggest = "filter_headers"
        elif key == "renameHeaders":
            suggest = "rename_headers"
        elif key == "setHeaders":
            suggest = "set_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_headers: Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeaders'] = None,
                 rename_headers: Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeaders'] = None,
                 set_headers: Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeaders'] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeaders']:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeaders']:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeaders']:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeaders(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItem']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItem']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItem(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeaders(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeaders(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ifExists":
            suggest = "if_exists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationFailurePolicySourceUriDetails(dict):
    def __init__(__self__, *,
                 type: str,
                 uri: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalValidationPolicy":
            suggest = "additional_validation_policy"
        elif key == "clientDetails":
            suggest = "client_details"
        elif key == "isSslVerifyDisabled":
            suggest = "is_ssl_verify_disabled"
        elif key == "maxCacheDurationInHours":
            suggest = "max_cache_duration_in_hours"
        elif key == "sourceUriDetails":
            suggest = "source_uri_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 additional_validation_policy: Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicy'] = None,
                 client_details: Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetails'] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKey']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 source_uri_details: Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetails'] = None,
                 uri: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if additional_validation_policy is not None:
            pulumi.set(__self__, "additional_validation_policy", additional_validation_policy)
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="additionalValidationPolicy")
    def additional_validation_policy(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicy']:
        return pulumi.get(self, "additional_validation_policy")

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetails']:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKey']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetails']:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "verifyClaims":
            suggest = "verify_claims"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audiences: Optional[Sequence[str]] = None,
                 issuers: Optional[Sequence[str]] = None,
                 verify_claims: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaim']] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaim']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaim(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isRequired":
            suggest = "is_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaim. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaim.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaim.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecretId":
            suggest = "client_secret_id"
        elif key == "clientSecretVersionNumber":
            suggest = "client_secret_version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyClientDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyOps":
            suggest = "key_ops"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicyKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format: str,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationValidationPolicySourceUriDetails(dict):
    def __init__(__self__, *,
                 type: str,
                 uri: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isRequired":
            suggest = "is_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesAuthenticationVerifyClaim.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesCors(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedOrigins":
            suggest = "allowed_origins"
        elif key == "allowedHeaders":
            suggest = "allowed_headers"
        elif key == "allowedMethods":
            suggest = "allowed_methods"
        elif key == "exposedHeaders":
            suggest = "exposed_headers"
        elif key == "isAllowCredentialsEnabled":
            suggest = "is_allow_credentials_enabled"
        elif key == "maxAgeInSeconds":
            suggest = "max_age_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesCors. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesCors.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesCors.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_origins: Sequence[str],
                 allowed_headers: Optional[Sequence[str]] = None,
                 allowed_methods: Optional[Sequence[str]] = None,
                 exposed_headers: Optional[Sequence[str]] = None,
                 is_allow_credentials_enabled: Optional[bool] = None,
                 max_age_in_seconds: Optional[int] = None):
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if exposed_headers is not None:
            pulumi.set(__self__, "exposed_headers", exposed_headers)
        if is_allow_credentials_enabled is not None:
            pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        if max_age_in_seconds is not None:
            pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationServers":
            suggest = "authentication_servers"
        elif key == "selectionSource":
            suggest = "selection_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_servers: Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServer'],
                 selection_source: 'outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSource'):
        pulumi.set(__self__, "authentication_servers", authentication_servers)
        pulumi.set(__self__, "selection_source", selection_source)

    @property
    @pulumi.getter(name="authenticationServers")
    def authentication_servers(self) -> Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServer']:
        return pulumi.get(self, "authentication_servers")

    @property
    @pulumi.getter(name="selectionSource")
    def selection_source(self) -> 'outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSource':
        return pulumi.get(self, "selection_source")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationServerDetail":
            suggest = "authentication_server_detail"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_server_detail: 'outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetail',
                 key: 'outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey'):
        pulumi.set(__self__, "authentication_server_detail", authentication_server_detail)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="authenticationServerDetail")
    def authentication_server_detail(self) -> 'outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetail':
        return pulumi.get(self, "authentication_server_detail")

    @property
    @pulumi.getter
    def key(self) -> 'outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey':
        return pulumi.get(self, "key")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheKeys":
            suggest = "cache_keys"
        elif key == "functionId":
            suggest = "function_id"
        elif key == "isAnonymousAccessAllowed":
            suggest = "is_anonymous_access_allowed"
        elif key == "maxClockSkewInSeconds":
            suggest = "max_clock_skew_in_seconds"
        elif key == "publicKeys":
            suggest = "public_keys"
        elif key == "tokenAuthScheme":
            suggest = "token_auth_scheme"
        elif key == "tokenHeader":
            suggest = "token_header"
        elif key == "tokenQueryParam":
            suggest = "token_query_param"
        elif key == "validationFailurePolicy":
            suggest = "validation_failure_policy"
        elif key == "validationPolicy":
            suggest = "validation_policy"
        elif key == "verifyClaims":
            suggest = "verify_claims"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 audiences: Optional[Sequence[str]] = None,
                 cache_keys: Optional[Sequence[str]] = None,
                 function_id: Optional[str] = None,
                 is_anonymous_access_allowed: Optional[bool] = None,
                 issuers: Optional[Sequence[str]] = None,
                 max_clock_skew_in_seconds: Optional[float] = None,
                 parameters: Optional[Mapping[str, Any]] = None,
                 public_keys: Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeys'] = None,
                 token_auth_scheme: Optional[str] = None,
                 token_header: Optional[str] = None,
                 token_query_param: Optional[str] = None,
                 validation_failure_policy: Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy'] = None,
                 validation_policy: Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy'] = None,
                 verify_claims: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim']] = None):
        pulumi.set(__self__, "type", type)
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if cache_keys is not None:
            pulumi.set(__self__, "cache_keys", cache_keys)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if is_anonymous_access_allowed is not None:
            pulumi.set(__self__, "is_anonymous_access_allowed", is_anonymous_access_allowed)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if max_clock_skew_in_seconds is not None:
            pulumi.set(__self__, "max_clock_skew_in_seconds", max_clock_skew_in_seconds)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)
        if token_auth_scheme is not None:
            pulumi.set(__self__, "token_auth_scheme", token_auth_scheme)
        if token_header is not None:
            pulumi.set(__self__, "token_header", token_header)
        if token_query_param is not None:
            pulumi.set(__self__, "token_query_param", token_query_param)
        if validation_failure_policy is not None:
            pulumi.set(__self__, "validation_failure_policy", validation_failure_policy)
        if validation_policy is not None:
            pulumi.set(__self__, "validation_policy", validation_policy)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="cacheKeys")
    def cache_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cache_keys")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_anonymous_access_allowed")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="maxClockSkewInSeconds")
    def max_clock_skew_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "max_clock_skew_in_seconds")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeys']:
        return pulumi.get(self, "public_keys")

    @property
    @pulumi.getter(name="tokenAuthScheme")
    def token_auth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "token_auth_scheme")

    @property
    @pulumi.getter(name="tokenHeader")
    def token_header(self) -> Optional[str]:
        return pulumi.get(self, "token_header")

    @property
    @pulumi.getter(name="tokenQueryParam")
    def token_query_param(self) -> Optional[str]:
        return pulumi.get(self, "token_query_param")

    @property
    @pulumi.getter(name="validationFailurePolicy")
    def validation_failure_policy(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy']:
        return pulumi.get(self, "validation_failure_policy")

    @property
    @pulumi.getter(name="validationPolicy")
    def validation_policy(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy']:
        return pulumi.get(self, "validation_policy")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeys(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSslVerifyDisabled":
            suggest = "is_ssl_verify_disabled"
        elif key == "maxCacheDurationInHours":
            suggest = "max_cache_duration_in_hours"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeys. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeys.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeys.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKey']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 uri: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKey']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyOps":
            suggest = "key_ops"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeysKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format: str,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientDetails":
            suggest = "client_details"
        elif key == "fallbackRedirectPath":
            suggest = "fallback_redirect_path"
        elif key == "logoutPath":
            suggest = "logout_path"
        elif key == "maxExpiryDurationInHours":
            suggest = "max_expiry_duration_in_hours"
        elif key == "responseCode":
            suggest = "response_code"
        elif key == "responseHeaderTransformations":
            suggest = "response_header_transformations"
        elif key == "responseMessage":
            suggest = "response_message"
        elif key == "responseType":
            suggest = "response_type"
        elif key == "sourceUriDetails":
            suggest = "source_uri_details"
        elif key == "useCookiesForIntermediateSteps":
            suggest = "use_cookies_for_intermediate_steps"
        elif key == "useCookiesForSession":
            suggest = "use_cookies_for_session"
        elif key == "usePkce":
            suggest = "use_pkce"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 client_details: Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetails'] = None,
                 fallback_redirect_path: Optional[str] = None,
                 logout_path: Optional[str] = None,
                 max_expiry_duration_in_hours: Optional[int] = None,
                 response_code: Optional[str] = None,
                 response_header_transformations: Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformations'] = None,
                 response_message: Optional[str] = None,
                 response_type: Optional[str] = None,
                 scopes: Optional[Sequence[str]] = None,
                 source_uri_details: Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetails'] = None,
                 use_cookies_for_intermediate_steps: Optional[bool] = None,
                 use_cookies_for_session: Optional[bool] = None,
                 use_pkce: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if fallback_redirect_path is not None:
            pulumi.set(__self__, "fallback_redirect_path", fallback_redirect_path)
        if logout_path is not None:
            pulumi.set(__self__, "logout_path", logout_path)
        if max_expiry_duration_in_hours is not None:
            pulumi.set(__self__, "max_expiry_duration_in_hours", max_expiry_duration_in_hours)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if response_header_transformations is not None:
            pulumi.set(__self__, "response_header_transformations", response_header_transformations)
        if response_message is not None:
            pulumi.set(__self__, "response_message", response_message)
        if response_type is not None:
            pulumi.set(__self__, "response_type", response_type)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if use_cookies_for_intermediate_steps is not None:
            pulumi.set(__self__, "use_cookies_for_intermediate_steps", use_cookies_for_intermediate_steps)
        if use_cookies_for_session is not None:
            pulumi.set(__self__, "use_cookies_for_session", use_cookies_for_session)
        if use_pkce is not None:
            pulumi.set(__self__, "use_pkce", use_pkce)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetails']:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="fallbackRedirectPath")
    def fallback_redirect_path(self) -> Optional[str]:
        return pulumi.get(self, "fallback_redirect_path")

    @property
    @pulumi.getter(name="logoutPath")
    def logout_path(self) -> Optional[str]:
        return pulumi.get(self, "logout_path")

    @property
    @pulumi.getter(name="maxExpiryDurationInHours")
    def max_expiry_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_expiry_duration_in_hours")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[str]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="responseHeaderTransformations")
    def response_header_transformations(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformations']:
        return pulumi.get(self, "response_header_transformations")

    @property
    @pulumi.getter(name="responseMessage")
    def response_message(self) -> Optional[str]:
        return pulumi.get(self, "response_message")

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[str]:
        return pulumi.get(self, "response_type")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetails']:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter(name="useCookiesForIntermediateSteps")
    def use_cookies_for_intermediate_steps(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_intermediate_steps")

    @property
    @pulumi.getter(name="useCookiesForSession")
    def use_cookies_for_session(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_session")

    @property
    @pulumi.getter(name="usePkce")
    def use_pkce(self) -> Optional[bool]:
        return pulumi.get(self, "use_pkce")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecretId":
            suggest = "client_secret_id"
        elif key == "clientSecretVersionNumber":
            suggest = "client_secret_version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterHeaders":
            suggest = "filter_headers"
        elif key == "renameHeaders":
            suggest = "rename_headers"
        elif key == "setHeaders":
            suggest = "set_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_headers: Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeaders'] = None,
                 rename_headers: Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeaders'] = None,
                 set_headers: Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeaders'] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeaders']:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeaders']:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeaders']:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeaders(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItem']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItem']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsFilterHeadersItem(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeaders(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsRenameHeadersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeaders(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ifExists":
            suggest = "if_exists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationsSetHeadersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetails(dict):
    def __init__(__self__, *,
                 type: str,
                 uri: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalValidationPolicy":
            suggest = "additional_validation_policy"
        elif key == "clientDetails":
            suggest = "client_details"
        elif key == "isSslVerifyDisabled":
            suggest = "is_ssl_verify_disabled"
        elif key == "maxCacheDurationInHours":
            suggest = "max_cache_duration_in_hours"
        elif key == "sourceUriDetails":
            suggest = "source_uri_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 additional_validation_policy: Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy'] = None,
                 client_details: Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetails'] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 source_uri_details: Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetails'] = None,
                 uri: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if additional_validation_policy is not None:
            pulumi.set(__self__, "additional_validation_policy", additional_validation_policy)
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="additionalValidationPolicy")
    def additional_validation_policy(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy']:
        return pulumi.get(self, "additional_validation_policy")

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetails']:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetails']:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "verifyClaims":
            suggest = "verify_claims"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audiences: Optional[Sequence[str]] = None,
                 issuers: Optional[Sequence[str]] = None,
                 verify_claims: Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaim']] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaim']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaim(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isRequired":
            suggest = "is_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaim. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaim.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaim.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecretId":
            suggest = "client_secret_id"
        elif key == "clientSecretVersionNumber":
            suggest = "client_secret_version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyOps":
            suggest = "key_ops"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format: str,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetails(dict):
    def __init__(__self__, *,
                 type: str,
                 uri: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isRequired":
            suggest = "is_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaim.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesDynamicAuthenticationAuthenticationServerKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 expression: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 type: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "name", name)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesDynamicAuthenticationSelectionSource(dict):
    def __init__(__self__, *,
                 selector: str,
                 type: str):
        pulumi.set(__self__, "selector", selector)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def selector(self) -> str:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesMutualTls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedSans":
            suggest = "allowed_sans"
        elif key == "isVerifiedCertificateRequired":
            suggest = "is_verified_certificate_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesMutualTls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesMutualTls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesMutualTls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_sans: Optional[Sequence[str]] = None,
                 is_verified_certificate_required: Optional[bool] = None):
        if allowed_sans is not None:
            pulumi.set(__self__, "allowed_sans", allowed_sans)
        if is_verified_certificate_required is not None:
            pulumi.set(__self__, "is_verified_certificate_required", is_verified_certificate_required)

    @property
    @pulumi.getter(name="allowedSans")
    def allowed_sans(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_sans")

    @property
    @pulumi.getter(name="isVerifiedCertificateRequired")
    def is_verified_certificate_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_verified_certificate_required")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesRateLimiting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rateInRequestsPerSecond":
            suggest = "rate_in_requests_per_second"
        elif key == "rateKey":
            suggest = "rate_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesRateLimiting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesRateLimiting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesRateLimiting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rate_in_requests_per_second: int,
                 rate_key: str):
        pulumi.set(__self__, "rate_in_requests_per_second", rate_in_requests_per_second)
        pulumi.set(__self__, "rate_key", rate_key)

    @property
    @pulumi.getter(name="rateInRequestsPerSecond")
    def rate_in_requests_per_second(self) -> int:
        return pulumi.get(self, "rate_in_requests_per_second")

    @property
    @pulumi.getter(name="rateKey")
    def rate_key(self) -> str:
        return pulumi.get(self, "rate_key")


@pulumi.output_type
class DeploymentSpecificationRequestPoliciesUsagePlans(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenLocations":
            suggest = "token_locations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRequestPoliciesUsagePlans. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRequestPoliciesUsagePlans.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRequestPoliciesUsagePlans.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 token_locations: Sequence[str]):
        pulumi.set(__self__, "token_locations", token_locations)

    @property
    @pulumi.getter(name="tokenLocations")
    def token_locations(self) -> Sequence[str]:
        return pulumi.get(self, "token_locations")


@pulumi.output_type
class DeploymentSpecificationRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loggingPolicies":
            suggest = "logging_policies"
        elif key == "requestPolicies":
            suggest = "request_policies"
        elif key == "responsePolicies":
            suggest = "response_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend: 'outputs.DeploymentSpecificationRouteBackend',
                 path: str,
                 logging_policies: Optional['outputs.DeploymentSpecificationRouteLoggingPolicies'] = None,
                 methods: Optional[Sequence[str]] = None,
                 request_policies: Optional['outputs.DeploymentSpecificationRouteRequestPolicies'] = None,
                 response_policies: Optional['outputs.DeploymentSpecificationRouteResponsePolicies'] = None):
        pulumi.set(__self__, "backend", backend)
        pulumi.set(__self__, "path", path)
        if logging_policies is not None:
            pulumi.set(__self__, "logging_policies", logging_policies)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if request_policies is not None:
            pulumi.set(__self__, "request_policies", request_policies)
        if response_policies is not None:
            pulumi.set(__self__, "response_policies", response_policies)

    @property
    @pulumi.getter
    def backend(self) -> 'outputs.DeploymentSpecificationRouteBackend':
        return pulumi.get(self, "backend")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> Optional['outputs.DeploymentSpecificationRouteLoggingPolicies']:
        return pulumi.get(self, "logging_policies")

    @property
    @pulumi.getter
    def methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPolicies']:
        return pulumi.get(self, "request_policies")

    @property
    @pulumi.getter(name="responsePolicies")
    def response_policies(self) -> Optional['outputs.DeploymentSpecificationRouteResponsePolicies']:
        return pulumi.get(self, "response_policies")


@pulumi.output_type
class DeploymentSpecificationRouteBackend(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedPostLogoutUris":
            suggest = "allowed_post_logout_uris"
        elif key == "connectTimeoutInSeconds":
            suggest = "connect_timeout_in_seconds"
        elif key == "functionId":
            suggest = "function_id"
        elif key == "isSslVerifyDisabled":
            suggest = "is_ssl_verify_disabled"
        elif key == "postLogoutState":
            suggest = "post_logout_state"
        elif key == "readTimeoutInSeconds":
            suggest = "read_timeout_in_seconds"
        elif key == "routingBackends":
            suggest = "routing_backends"
        elif key == "selectionSource":
            suggest = "selection_source"
        elif key == "sendTimeoutInSeconds":
            suggest = "send_timeout_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteBackend. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteBackend.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteBackend.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 allowed_post_logout_uris: Optional[Sequence[str]] = None,
                 body: Optional[str] = None,
                 connect_timeout_in_seconds: Optional[float] = None,
                 function_id: Optional[str] = None,
                 headers: Optional[Sequence['outputs.DeploymentSpecificationRouteBackendHeader']] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 post_logout_state: Optional[str] = None,
                 read_timeout_in_seconds: Optional[float] = None,
                 routing_backends: Optional[Sequence['outputs.DeploymentSpecificationRouteBackendRoutingBackend']] = None,
                 selection_source: Optional['outputs.DeploymentSpecificationRouteBackendSelectionSource'] = None,
                 send_timeout_in_seconds: Optional[float] = None,
                 status: Optional[int] = None,
                 url: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if allowed_post_logout_uris is not None:
            pulumi.set(__self__, "allowed_post_logout_uris", allowed_post_logout_uris)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if connect_timeout_in_seconds is not None:
            pulumi.set(__self__, "connect_timeout_in_seconds", connect_timeout_in_seconds)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if post_logout_state is not None:
            pulumi.set(__self__, "post_logout_state", post_logout_state)
        if read_timeout_in_seconds is not None:
            pulumi.set(__self__, "read_timeout_in_seconds", read_timeout_in_seconds)
        if routing_backends is not None:
            pulumi.set(__self__, "routing_backends", routing_backends)
        if selection_source is not None:
            pulumi.set(__self__, "selection_source", selection_source)
        if send_timeout_in_seconds is not None:
            pulumi.set(__self__, "send_timeout_in_seconds", send_timeout_in_seconds)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="allowedPostLogoutUris")
    def allowed_post_logout_uris(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_post_logout_uris")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="connectTimeoutInSeconds")
    def connect_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "connect_timeout_in_seconds")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.DeploymentSpecificationRouteBackendHeader']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="postLogoutState")
    def post_logout_state(self) -> Optional[str]:
        return pulumi.get(self, "post_logout_state")

    @property
    @pulumi.getter(name="readTimeoutInSeconds")
    def read_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "read_timeout_in_seconds")

    @property
    @pulumi.getter(name="routingBackends")
    def routing_backends(self) -> Optional[Sequence['outputs.DeploymentSpecificationRouteBackendRoutingBackend']]:
        return pulumi.get(self, "routing_backends")

    @property
    @pulumi.getter(name="selectionSource")
    def selection_source(self) -> Optional['outputs.DeploymentSpecificationRouteBackendSelectionSource']:
        return pulumi.get(self, "selection_source")

    @property
    @pulumi.getter(name="sendTimeoutInSeconds")
    def send_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "send_timeout_in_seconds")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class DeploymentSpecificationRouteBackendHeader(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentSpecificationRouteBackendRoutingBackend(dict):
    def __init__(__self__, *,
                 backend: Optional['outputs.DeploymentSpecificationRouteBackendRoutingBackendBackend'] = None,
                 key: Optional['outputs.DeploymentSpecificationRouteBackendRoutingBackendKey'] = None):
        if backend is not None:
            pulumi.set(__self__, "backend", backend)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def backend(self) -> Optional['outputs.DeploymentSpecificationRouteBackendRoutingBackendBackend']:
        return pulumi.get(self, "backend")

    @property
    @pulumi.getter
    def key(self) -> Optional['outputs.DeploymentSpecificationRouteBackendRoutingBackendKey']:
        return pulumi.get(self, "key")


@pulumi.output_type
class DeploymentSpecificationRouteBackendRoutingBackendBackend(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectTimeoutInSeconds":
            suggest = "connect_timeout_in_seconds"
        elif key == "functionId":
            suggest = "function_id"
        elif key == "isSslVerifyDisabled":
            suggest = "is_ssl_verify_disabled"
        elif key == "readTimeoutInSeconds":
            suggest = "read_timeout_in_seconds"
        elif key == "sendTimeoutInSeconds":
            suggest = "send_timeout_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteBackendRoutingBackendBackend. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteBackendRoutingBackendBackend.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteBackendRoutingBackendBackend.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 body: Optional[str] = None,
                 connect_timeout_in_seconds: Optional[float] = None,
                 function_id: Optional[str] = None,
                 headers: Optional[Sequence['outputs.DeploymentSpecificationRouteBackendRoutingBackendBackendHeader']] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 read_timeout_in_seconds: Optional[float] = None,
                 send_timeout_in_seconds: Optional[float] = None,
                 status: Optional[int] = None,
                 url: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if connect_timeout_in_seconds is not None:
            pulumi.set(__self__, "connect_timeout_in_seconds", connect_timeout_in_seconds)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if read_timeout_in_seconds is not None:
            pulumi.set(__self__, "read_timeout_in_seconds", read_timeout_in_seconds)
        if send_timeout_in_seconds is not None:
            pulumi.set(__self__, "send_timeout_in_seconds", send_timeout_in_seconds)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="connectTimeoutInSeconds")
    def connect_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "connect_timeout_in_seconds")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.DeploymentSpecificationRouteBackendRoutingBackendBackendHeader']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="readTimeoutInSeconds")
    def read_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "read_timeout_in_seconds")

    @property
    @pulumi.getter(name="sendTimeoutInSeconds")
    def send_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "send_timeout_in_seconds")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class DeploymentSpecificationRouteBackendRoutingBackendBackendHeader(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentSpecificationRouteBackendRoutingBackendKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteBackendRoutingBackendKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteBackendRoutingBackendKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteBackendRoutingBackendKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 type: str,
                 expression: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DeploymentSpecificationRouteBackendSelectionSource(dict):
    def __init__(__self__, *,
                 selector: str,
                 type: str):
        pulumi.set(__self__, "selector", selector)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def selector(self) -> str:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentSpecificationRouteLoggingPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessLog":
            suggest = "access_log"
        elif key == "executionLog":
            suggest = "execution_log"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteLoggingPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteLoggingPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteLoggingPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_log: Optional['outputs.DeploymentSpecificationRouteLoggingPoliciesAccessLog'] = None,
                 execution_log: Optional['outputs.DeploymentSpecificationRouteLoggingPoliciesExecutionLog'] = None):
        if access_log is not None:
            pulumi.set(__self__, "access_log", access_log)
        if execution_log is not None:
            pulumi.set(__self__, "execution_log", execution_log)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> Optional['outputs.DeploymentSpecificationRouteLoggingPoliciesAccessLog']:
        return pulumi.get(self, "access_log")

    @property
    @pulumi.getter(name="executionLog")
    def execution_log(self) -> Optional['outputs.DeploymentSpecificationRouteLoggingPoliciesExecutionLog']:
        return pulumi.get(self, "execution_log")


@pulumi.output_type
class DeploymentSpecificationRouteLoggingPoliciesAccessLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteLoggingPoliciesAccessLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteLoggingPoliciesAccessLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteLoggingPoliciesAccessLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class DeploymentSpecificationRouteLoggingPoliciesExecutionLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "logLevel":
            suggest = "log_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteLoggingPoliciesExecutionLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteLoggingPoliciesExecutionLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteLoggingPoliciesExecutionLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 log_level: Optional[str] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bodyValidation":
            suggest = "body_validation"
        elif key == "headerTransformations":
            suggest = "header_transformations"
        elif key == "headerValidations":
            suggest = "header_validations"
        elif key == "queryParameterTransformations":
            suggest = "query_parameter_transformations"
        elif key == "queryParameterValidations":
            suggest = "query_parameter_validations"
        elif key == "responseCacheLookup":
            suggest = "response_cache_lookup"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesAuthorization'] = None,
                 body_validation: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesBodyValidation'] = None,
                 cors: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesCors'] = None,
                 header_transformations: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformations'] = None,
                 header_validations: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderValidations'] = None,
                 query_parameter_transformations: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations'] = None,
                 query_parameter_validations: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterValidations'] = None,
                 response_cache_lookup: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesResponseCacheLookup'] = None):
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if body_validation is not None:
            pulumi.set(__self__, "body_validation", body_validation)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if header_transformations is not None:
            pulumi.set(__self__, "header_transformations", header_transformations)
        if header_validations is not None:
            pulumi.set(__self__, "header_validations", header_validations)
        if query_parameter_transformations is not None:
            pulumi.set(__self__, "query_parameter_transformations", query_parameter_transformations)
        if query_parameter_validations is not None:
            pulumi.set(__self__, "query_parameter_validations", query_parameter_validations)
        if response_cache_lookup is not None:
            pulumi.set(__self__, "response_cache_lookup", response_cache_lookup)

    @property
    @pulumi.getter
    def authorization(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesAuthorization']:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="bodyValidation")
    def body_validation(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesBodyValidation']:
        return pulumi.get(self, "body_validation")

    @property
    @pulumi.getter
    def cors(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesCors']:
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformations']:
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="headerValidations")
    def header_validations(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderValidations']:
        return pulumi.get(self, "header_validations")

    @property
    @pulumi.getter(name="queryParameterTransformations")
    def query_parameter_transformations(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations']:
        return pulumi.get(self, "query_parameter_transformations")

    @property
    @pulumi.getter(name="queryParameterValidations")
    def query_parameter_validations(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterValidations']:
        return pulumi.get(self, "query_parameter_validations")

    @property
    @pulumi.getter(name="responseCacheLookup")
    def response_cache_lookup(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesResponseCacheLookup']:
        return pulumi.get(self, "response_cache_lookup")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesAuthorization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedScopes":
            suggest = "allowed_scopes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesAuthorization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesAuthorization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesAuthorization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_scopes: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if allowed_scopes is not None:
            pulumi.set(__self__, "allowed_scopes", allowed_scopes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowedScopes")
    def allowed_scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_scopes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesBodyValidation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validationMode":
            suggest = "validation_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesBodyValidation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesBodyValidation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesBodyValidation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contents: Optional[Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesBodyValidationContent']] = None,
                 required: Optional[bool] = None,
                 validation_mode: Optional[str] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if validation_mode is not None:
            pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesBodyValidationContent']]:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[str]:
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesBodyValidationContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mediaType":
            suggest = "media_type"
        elif key == "validationType":
            suggest = "validation_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesBodyValidationContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesBodyValidationContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesBodyValidationContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 media_type: str,
                 validation_type: str):
        pulumi.set(__self__, "media_type", media_type)
        pulumi.set(__self__, "validation_type", validation_type)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> str:
        return pulumi.get(self, "media_type")

    @property
    @pulumi.getter(name="validationType")
    def validation_type(self) -> str:
        return pulumi.get(self, "validation_type")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesCors(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedOrigins":
            suggest = "allowed_origins"
        elif key == "allowedHeaders":
            suggest = "allowed_headers"
        elif key == "allowedMethods":
            suggest = "allowed_methods"
        elif key == "exposedHeaders":
            suggest = "exposed_headers"
        elif key == "isAllowCredentialsEnabled":
            suggest = "is_allow_credentials_enabled"
        elif key == "maxAgeInSeconds":
            suggest = "max_age_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesCors. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesCors.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesCors.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_origins: Sequence[str],
                 allowed_headers: Optional[Sequence[str]] = None,
                 allowed_methods: Optional[Sequence[str]] = None,
                 exposed_headers: Optional[Sequence[str]] = None,
                 is_allow_credentials_enabled: Optional[bool] = None,
                 max_age_in_seconds: Optional[int] = None):
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if exposed_headers is not None:
            pulumi.set(__self__, "exposed_headers", exposed_headers)
        if is_allow_credentials_enabled is not None:
            pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        if max_age_in_seconds is not None:
            pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterHeaders":
            suggest = "filter_headers"
        elif key == "renameHeaders":
            suggest = "rename_headers"
        elif key == "setHeaders":
            suggest = "set_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesHeaderTransformations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_headers: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeaders'] = None,
                 rename_headers: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeaders'] = None,
                 set_headers: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeaders'] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeaders']:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeaders']:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeaders']:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeaders(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItem'],
                 type: str):
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItem']:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsFilterHeadersItem(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeaders(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem']:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsRenameHeadersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: str,
                 to: str):
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        return pulumi.get(self, "to")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeaders(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem']:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ifExists":
            suggest = "if_exists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderTransformationsSetHeadersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 if_exists: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderValidations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validationMode":
            suggest = "validation_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesHeaderValidations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderValidations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesHeaderValidations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 headers: Optional[Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeader']] = None,
                 validation_mode: Optional[str] = None):
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if validation_mode is not None:
            pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeader']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[str]:
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesHeaderValidationsHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 required: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterQueryParameters":
            suggest = "filter_query_parameters"
        elif key == "renameQueryParameters":
            suggest = "rename_query_parameters"
        elif key == "setQueryParameters":
            suggest = "set_query_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_query_parameters: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParameters'] = None,
                 rename_query_parameters: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParameters'] = None,
                 set_query_parameters: Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParameters'] = None):
        if filter_query_parameters is not None:
            pulumi.set(__self__, "filter_query_parameters", filter_query_parameters)
        if rename_query_parameters is not None:
            pulumi.set(__self__, "rename_query_parameters", rename_query_parameters)
        if set_query_parameters is not None:
            pulumi.set(__self__, "set_query_parameters", set_query_parameters)

    @property
    @pulumi.getter(name="filterQueryParameters")
    def filter_query_parameters(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParameters']:
        return pulumi.get(self, "filter_query_parameters")

    @property
    @pulumi.getter(name="renameQueryParameters")
    def rename_query_parameters(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParameters']:
        return pulumi.get(self, "rename_query_parameters")

    @property
    @pulumi.getter(name="setQueryParameters")
    def set_query_parameters(self) -> Optional['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParameters']:
        return pulumi.get(self, "set_query_parameters")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParameters(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItem'],
                 type: str):
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItem']:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsFilterQueryParametersItem(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParameters(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem']:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsRenameQueryParametersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: str,
                 to: str):
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        return pulumi.get(self, "to")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParameters(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem']:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ifExists":
            suggest = "if_exists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsSetQueryParametersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 if_exists: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterValidations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validationMode":
            suggest = "validation_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesQueryParameterValidations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterValidations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesQueryParameterValidations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameters: Optional[Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameter']] = None,
                 validation_mode: Optional[str] = None):
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if validation_mode is not None:
            pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameter']]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[str]:
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 required: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")


@pulumi.output_type
class DeploymentSpecificationRouteRequestPoliciesResponseCacheLookup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheKeyAdditions":
            suggest = "cache_key_additions"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "isPrivateCachingEnabled":
            suggest = "is_private_caching_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteRequestPoliciesResponseCacheLookup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteRequestPoliciesResponseCacheLookup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteRequestPoliciesResponseCacheLookup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cache_key_additions: Optional[Sequence[str]] = None,
                 is_enabled: Optional[bool] = None,
                 is_private_caching_enabled: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        if cache_key_additions is not None:
            pulumi.set(__self__, "cache_key_additions", cache_key_additions)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_private_caching_enabled is not None:
            pulumi.set(__self__, "is_private_caching_enabled", is_private_caching_enabled)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cacheKeyAdditions")
    def cache_key_additions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cache_key_additions")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isPrivateCachingEnabled")
    def is_private_caching_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_private_caching_enabled")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerTransformations":
            suggest = "header_transformations"
        elif key == "responseCacheStore":
            suggest = "response_cache_store"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteResponsePolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteResponsePolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteResponsePolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_transformations: Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformations'] = None,
                 response_cache_store: Optional['outputs.DeploymentSpecificationRouteResponsePoliciesResponseCacheStore'] = None):
        if header_transformations is not None:
            pulumi.set(__self__, "header_transformations", header_transformations)
        if response_cache_store is not None:
            pulumi.set(__self__, "response_cache_store", response_cache_store)

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformations']:
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="responseCacheStore")
    def response_cache_store(self) -> Optional['outputs.DeploymentSpecificationRouteResponsePoliciesResponseCacheStore']:
        return pulumi.get(self, "response_cache_store")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterHeaders":
            suggest = "filter_headers"
        elif key == "renameHeaders":
            suggest = "rename_headers"
        elif key == "setHeaders":
            suggest = "set_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteResponsePoliciesHeaderTransformations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_headers: Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeaders'] = None,
                 rename_headers: Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeaders'] = None,
                 set_headers: Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeaders'] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeaders']:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeaders']:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeaders']:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeaders(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItem'],
                 type: str):
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItem']:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsFilterHeadersItem(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeaders(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem']:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsRenameHeadersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: str,
                 to: str):
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> str:
        return pulumi.get(self, "to")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeaders(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem']:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ifExists":
            suggest = "if_exists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteResponsePoliciesHeaderTransformationsSetHeadersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 if_exists: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")


@pulumi.output_type
class DeploymentSpecificationRouteResponsePoliciesResponseCacheStore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeToLiveInSeconds":
            suggest = "time_to_live_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentSpecificationRouteResponsePoliciesResponseCacheStore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentSpecificationRouteResponsePoliciesResponseCacheStore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentSpecificationRouteResponsePoliciesResponseCacheStore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_to_live_in_seconds: int,
                 type: str):
        pulumi.set(__self__, "time_to_live_in_seconds", time_to_live_in_seconds)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToLiveInSeconds")
    def time_to_live_in_seconds(self) -> int:
        return pulumi.get(self, "time_to_live_in_seconds")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GatewayCaBundle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caBundleId":
            suggest = "ca_bundle_id"
        elif key == "certificateAuthorityId":
            suggest = "certificate_authority_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayCaBundle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayCaBundle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayCaBundle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 ca_bundle_id: Optional[str] = None,
                 certificate_authority_id: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if ca_bundle_id is not None:
            pulumi.set(__self__, "ca_bundle_id", ca_bundle_id)
        if certificate_authority_id is not None:
            pulumi.set(__self__, "certificate_authority_id", certificate_authority_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="caBundleId")
    def ca_bundle_id(self) -> Optional[str]:
        return pulumi.get(self, "ca_bundle_id")

    @property
    @pulumi.getter(name="certificateAuthorityId")
    def certificate_authority_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_authority_id")


@pulumi.output_type
class GatewayIpAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayIpAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayIpAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayIpAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[str] = None):
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GatewayResponseCacheDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationSecretId":
            suggest = "authentication_secret_id"
        elif key == "authenticationSecretVersionNumber":
            suggest = "authentication_secret_version_number"
        elif key == "connectTimeoutInMs":
            suggest = "connect_timeout_in_ms"
        elif key == "isSslEnabled":
            suggest = "is_ssl_enabled"
        elif key == "isSslVerifyDisabled":
            suggest = "is_ssl_verify_disabled"
        elif key == "readTimeoutInMs":
            suggest = "read_timeout_in_ms"
        elif key == "sendTimeoutInMs":
            suggest = "send_timeout_in_ms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayResponseCacheDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayResponseCacheDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayResponseCacheDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 authentication_secret_id: Optional[str] = None,
                 authentication_secret_version_number: Optional[str] = None,
                 connect_timeout_in_ms: Optional[int] = None,
                 is_ssl_enabled: Optional[bool] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 read_timeout_in_ms: Optional[int] = None,
                 send_timeout_in_ms: Optional[int] = None,
                 servers: Optional[Sequence['outputs.GatewayResponseCacheDetailsServer']] = None):
        pulumi.set(__self__, "type", type)
        if authentication_secret_id is not None:
            pulumi.set(__self__, "authentication_secret_id", authentication_secret_id)
        if authentication_secret_version_number is not None:
            pulumi.set(__self__, "authentication_secret_version_number", authentication_secret_version_number)
        if connect_timeout_in_ms is not None:
            pulumi.set(__self__, "connect_timeout_in_ms", connect_timeout_in_ms)
        if is_ssl_enabled is not None:
            pulumi.set(__self__, "is_ssl_enabled", is_ssl_enabled)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if read_timeout_in_ms is not None:
            pulumi.set(__self__, "read_timeout_in_ms", read_timeout_in_ms)
        if send_timeout_in_ms is not None:
            pulumi.set(__self__, "send_timeout_in_ms", send_timeout_in_ms)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="authenticationSecretId")
    def authentication_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "authentication_secret_id")

    @property
    @pulumi.getter(name="authenticationSecretVersionNumber")
    def authentication_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "authentication_secret_version_number")

    @property
    @pulumi.getter(name="connectTimeoutInMs")
    def connect_timeout_in_ms(self) -> Optional[int]:
        return pulumi.get(self, "connect_timeout_in_ms")

    @property
    @pulumi.getter(name="isSslEnabled")
    def is_ssl_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_enabled")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="readTimeoutInMs")
    def read_timeout_in_ms(self) -> Optional[int]:
        return pulumi.get(self, "read_timeout_in_ms")

    @property
    @pulumi.getter(name="sendTimeoutInMs")
    def send_timeout_in_ms(self) -> Optional[int]:
        return pulumi.get(self, "send_timeout_in_ms")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence['outputs.GatewayResponseCacheDetailsServer']]:
        return pulumi.get(self, "servers")


@pulumi.output_type
class GatewayResponseCacheDetailsServer(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 port: Optional[int] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class SubscriberClient(dict):
    def __init__(__self__, *,
                 name: str,
                 token: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class UsagePlanEntitlement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rateLimit":
            suggest = "rate_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UsagePlanEntitlement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UsagePlanEntitlement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UsagePlanEntitlement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 description: Optional[str] = None,
                 quota: Optional['outputs.UsagePlanEntitlementQuota'] = None,
                 rate_limit: Optional['outputs.UsagePlanEntitlementRateLimit'] = None,
                 targets: Optional[Sequence['outputs.UsagePlanEntitlementTarget']] = None):
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if quota is not None:
            pulumi.set(__self__, "quota", quota)
        if rate_limit is not None:
            pulumi.set(__self__, "rate_limit", rate_limit)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def quota(self) -> Optional['outputs.UsagePlanEntitlementQuota']:
        return pulumi.get(self, "quota")

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional['outputs.UsagePlanEntitlementRateLimit']:
        return pulumi.get(self, "rate_limit")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence['outputs.UsagePlanEntitlementTarget']]:
        return pulumi.get(self, "targets")


@pulumi.output_type
class UsagePlanEntitlementQuota(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationOnBreach":
            suggest = "operation_on_breach"
        elif key == "resetPolicy":
            suggest = "reset_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UsagePlanEntitlementQuota. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UsagePlanEntitlementQuota.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UsagePlanEntitlementQuota.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation_on_breach: str,
                 reset_policy: str,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "operation_on_breach", operation_on_breach)
        pulumi.set(__self__, "reset_policy", reset_policy)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="operationOnBreach")
    def operation_on_breach(self) -> str:
        return pulumi.get(self, "operation_on_breach")

    @property
    @pulumi.getter(name="resetPolicy")
    def reset_policy(self) -> str:
        return pulumi.get(self, "reset_policy")

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class UsagePlanEntitlementRateLimit(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class UsagePlanEntitlementTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentId":
            suggest = "deployment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UsagePlanEntitlementTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UsagePlanEntitlementTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UsagePlanEntitlementTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_id: str):
        pulumi.set(__self__, "deployment_id", deployment_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        return pulumi.get(self, "deployment_id")


@pulumi.output_type
class GetApiDeploymentSpecificationLoggingPolicyResult(dict):
    def __init__(__self__, *,
                 access_logs: Optional[Sequence['outputs.GetApiDeploymentSpecificationLoggingPolicyAccessLogResult']] = None,
                 execution_logs: Optional[Sequence['outputs.GetApiDeploymentSpecificationLoggingPolicyExecutionLogResult']] = None):
        if access_logs is not None:
            pulumi.set(__self__, "access_logs", access_logs)
        if execution_logs is not None:
            pulumi.set(__self__, "execution_logs", execution_logs)

    @property
    @pulumi.getter(name="accessLogs")
    def access_logs(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationLoggingPolicyAccessLogResult']]:
        return pulumi.get(self, "access_logs")

    @property
    @pulumi.getter(name="executionLogs")
    def execution_logs(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationLoggingPolicyExecutionLogResult']]:
        return pulumi.get(self, "execution_logs")


@pulumi.output_type
class GetApiDeploymentSpecificationLoggingPolicyAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetApiDeploymentSpecificationLoggingPolicyExecutionLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 log_level: Optional[str] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyResult(dict):
    def __init__(__self__, *,
                 authentications: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationResult']] = None,
                 cors: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyCorResult']] = None,
                 dynamic_authentications: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationResult']] = None,
                 mutual_tls: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyMutualTlResult']] = None,
                 rate_limitings: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyRateLimitingResult']] = None,
                 usage_plans: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyUsagePlanResult']] = None):
        if authentications is not None:
            pulumi.set(__self__, "authentications", authentications)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if dynamic_authentications is not None:
            pulumi.set(__self__, "dynamic_authentications", dynamic_authentications)
        if mutual_tls is not None:
            pulumi.set(__self__, "mutual_tls", mutual_tls)
        if rate_limitings is not None:
            pulumi.set(__self__, "rate_limitings", rate_limitings)
        if usage_plans is not None:
            pulumi.set(__self__, "usage_plans", usage_plans)

    @property
    @pulumi.getter
    def authentications(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationResult']]:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter
    def cors(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyCorResult']]:
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="dynamicAuthentications")
    def dynamic_authentications(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationResult']]:
        return pulumi.get(self, "dynamic_authentications")

    @property
    @pulumi.getter(name="mutualTls")
    def mutual_tls(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyMutualTlResult']]:
        return pulumi.get(self, "mutual_tls")

    @property
    @pulumi.getter(name="rateLimitings")
    def rate_limitings(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyRateLimitingResult']]:
        return pulumi.get(self, "rate_limitings")

    @property
    @pulumi.getter(name="usagePlans")
    def usage_plans(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyUsagePlanResult']]:
        return pulumi.get(self, "usage_plans")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationResult(dict):
    def __init__(__self__, *,
                 audiences: Optional[Sequence[str]] = None,
                 cache_keys: Optional[Sequence[str]] = None,
                 function_id: Optional[str] = None,
                 is_anonymous_access_allowed: Optional[bool] = None,
                 issuers: Optional[Sequence[str]] = None,
                 max_clock_skew_in_seconds: Optional[float] = None,
                 parameters: Optional[Mapping[str, Any]] = None,
                 public_keys: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyResult']] = None,
                 token_auth_scheme: Optional[str] = None,
                 token_header: Optional[str] = None,
                 token_query_param: Optional[str] = None,
                 type: Optional[str] = None,
                 validation_failure_policies: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResult']] = None,
                 validation_policies: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyResult']] = None,
                 verify_claims: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationVerifyClaimResult']] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if cache_keys is not None:
            pulumi.set(__self__, "cache_keys", cache_keys)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if is_anonymous_access_allowed is not None:
            pulumi.set(__self__, "is_anonymous_access_allowed", is_anonymous_access_allowed)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if max_clock_skew_in_seconds is not None:
            pulumi.set(__self__, "max_clock_skew_in_seconds", max_clock_skew_in_seconds)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)
        if token_auth_scheme is not None:
            pulumi.set(__self__, "token_auth_scheme", token_auth_scheme)
        if token_header is not None:
            pulumi.set(__self__, "token_header", token_header)
        if token_query_param is not None:
            pulumi.set(__self__, "token_query_param", token_query_param)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if validation_failure_policies is not None:
            pulumi.set(__self__, "validation_failure_policies", validation_failure_policies)
        if validation_policies is not None:
            pulumi.set(__self__, "validation_policies", validation_policies)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="cacheKeys")
    def cache_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cache_keys")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_anonymous_access_allowed")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="maxClockSkewInSeconds")
    def max_clock_skew_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "max_clock_skew_in_seconds")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyResult']]:
        return pulumi.get(self, "public_keys")

    @property
    @pulumi.getter(name="tokenAuthScheme")
    def token_auth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "token_auth_scheme")

    @property
    @pulumi.getter(name="tokenHeader")
    def token_header(self) -> Optional[str]:
        return pulumi.get(self, "token_header")

    @property
    @pulumi.getter(name="tokenQueryParam")
    def token_query_param(self) -> Optional[str]:
        return pulumi.get(self, "token_query_param")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validationFailurePolicies")
    def validation_failure_policies(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResult']]:
        return pulumi.get(self, "validation_failure_policies")

    @property
    @pulumi.getter(name="validationPolicies")
    def validation_policies(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyResult']]:
        return pulumi.get(self, "validation_policies")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationVerifyClaimResult']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyResult(dict):
    def __init__(__self__, *,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKeyResult']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKeyResult']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKeyResult(dict):
    def __init__(__self__, *,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 format: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResult(dict):
    def __init__(__self__, *,
                 client_details: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetailResult']] = None,
                 fallback_redirect_path: Optional[str] = None,
                 logout_path: Optional[str] = None,
                 max_expiry_duration_in_hours: Optional[int] = None,
                 response_code: Optional[str] = None,
                 response_header_transformations: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationResult']] = None,
                 response_message: Optional[str] = None,
                 response_type: Optional[str] = None,
                 scopes: Optional[Sequence[str]] = None,
                 source_uri_details: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetailResult']] = None,
                 type: Optional[str] = None,
                 use_cookies_for_intermediate_steps: Optional[bool] = None,
                 use_cookies_for_session: Optional[bool] = None,
                 use_pkce: Optional[bool] = None):
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if fallback_redirect_path is not None:
            pulumi.set(__self__, "fallback_redirect_path", fallback_redirect_path)
        if logout_path is not None:
            pulumi.set(__self__, "logout_path", logout_path)
        if max_expiry_duration_in_hours is not None:
            pulumi.set(__self__, "max_expiry_duration_in_hours", max_expiry_duration_in_hours)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if response_header_transformations is not None:
            pulumi.set(__self__, "response_header_transformations", response_header_transformations)
        if response_message is not None:
            pulumi.set(__self__, "response_message", response_message)
        if response_type is not None:
            pulumi.set(__self__, "response_type", response_type)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_cookies_for_intermediate_steps is not None:
            pulumi.set(__self__, "use_cookies_for_intermediate_steps", use_cookies_for_intermediate_steps)
        if use_cookies_for_session is not None:
            pulumi.set(__self__, "use_cookies_for_session", use_cookies_for_session)
        if use_pkce is not None:
            pulumi.set(__self__, "use_pkce", use_pkce)

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetailResult']]:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="fallbackRedirectPath")
    def fallback_redirect_path(self) -> Optional[str]:
        return pulumi.get(self, "fallback_redirect_path")

    @property
    @pulumi.getter(name="logoutPath")
    def logout_path(self) -> Optional[str]:
        return pulumi.get(self, "logout_path")

    @property
    @pulumi.getter(name="maxExpiryDurationInHours")
    def max_expiry_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_expiry_duration_in_hours")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[str]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="responseHeaderTransformations")
    def response_header_transformations(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationResult']]:
        return pulumi.get(self, "response_header_transformations")

    @property
    @pulumi.getter(name="responseMessage")
    def response_message(self) -> Optional[str]:
        return pulumi.get(self, "response_message")

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[str]:
        return pulumi.get(self, "response_type")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetailResult']]:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useCookiesForIntermediateSteps")
    def use_cookies_for_intermediate_steps(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_intermediate_steps")

    @property
    @pulumi.getter(name="useCookiesForSession")
    def use_cookies_for_session(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_session")

    @property
    @pulumi.getter(name="usePkce")
    def use_pkce(self) -> Optional[bool]:
        return pulumi.get(self, "use_pkce")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetailResult(dict):
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None,
                 type: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationResult(dict):
    def __init__(__self__, *,
                 filter_headers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult']] = None,
                 rename_headers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult']] = None,
                 set_headers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderResult']] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult']]:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult']]:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderResult']]:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult(dict):
    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetailResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyResult(dict):
    def __init__(__self__, *,
                 additional_validation_policies: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyResult']] = None,
                 client_details: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyClientDetailResult']] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyKeyResult']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 source_uri_details: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetailResult']] = None,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if additional_validation_policies is not None:
            pulumi.set(__self__, "additional_validation_policies", additional_validation_policies)
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="additionalValidationPolicies")
    def additional_validation_policies(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyResult']]:
        return pulumi.get(self, "additional_validation_policies")

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyClientDetailResult']]:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyKeyResult']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetailResult']]:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyResult(dict):
    def __init__(__self__, *,
                 audiences: Optional[Sequence[str]] = None,
                 issuers: Optional[Sequence[str]] = None,
                 verify_claims: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimResult']] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimResult']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimResult(dict):
    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyClientDetailResult(dict):
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None,
                 type: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyKeyResult(dict):
    def __init__(__self__, *,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 format: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetailResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyAuthenticationVerifyClaimResult(dict):
    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyCorResult(dict):
    def __init__(__self__, *,
                 allowed_headers: Optional[Sequence[str]] = None,
                 allowed_methods: Optional[Sequence[str]] = None,
                 allowed_origins: Optional[Sequence[str]] = None,
                 exposed_headers: Optional[Sequence[str]] = None,
                 is_allow_credentials_enabled: Optional[bool] = None,
                 max_age_in_seconds: Optional[int] = None):
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if allowed_origins is not None:
            pulumi.set(__self__, "allowed_origins", allowed_origins)
        if exposed_headers is not None:
            pulumi.set(__self__, "exposed_headers", exposed_headers)
        if is_allow_credentials_enabled is not None:
            pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        if max_age_in_seconds is not None:
            pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationResult(dict):
    def __init__(__self__, *,
                 authentication_servers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerResult']] = None,
                 selection_sources: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationSelectionSourceResult']] = None):
        if authentication_servers is not None:
            pulumi.set(__self__, "authentication_servers", authentication_servers)
        if selection_sources is not None:
            pulumi.set(__self__, "selection_sources", selection_sources)

    @property
    @pulumi.getter(name="authenticationServers")
    def authentication_servers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerResult']]:
        return pulumi.get(self, "authentication_servers")

    @property
    @pulumi.getter(name="selectionSources")
    def selection_sources(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationSelectionSourceResult']]:
        return pulumi.get(self, "selection_sources")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerResult(dict):
    def __init__(__self__, *,
                 authentication_server_details: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailResult']] = None,
                 keys: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKeyResult']] = None):
        if authentication_server_details is not None:
            pulumi.set(__self__, "authentication_server_details", authentication_server_details)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)

    @property
    @pulumi.getter(name="authenticationServerDetails")
    def authentication_server_details(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailResult']]:
        return pulumi.get(self, "authentication_server_details")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKeyResult']]:
        return pulumi.get(self, "keys")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailResult(dict):
    def __init__(__self__, *,
                 audiences: Optional[Sequence[str]] = None,
                 cache_keys: Optional[Sequence[str]] = None,
                 function_id: Optional[str] = None,
                 is_anonymous_access_allowed: Optional[bool] = None,
                 issuers: Optional[Sequence[str]] = None,
                 max_clock_skew_in_seconds: Optional[float] = None,
                 parameters: Optional[Mapping[str, Any]] = None,
                 public_keys: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyResult']] = None,
                 token_auth_scheme: Optional[str] = None,
                 token_header: Optional[str] = None,
                 token_query_param: Optional[str] = None,
                 type: Optional[str] = None,
                 validation_failure_policies: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResult']] = None,
                 validation_policies: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyResult']] = None,
                 verify_claims: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimResult']] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if cache_keys is not None:
            pulumi.set(__self__, "cache_keys", cache_keys)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if is_anonymous_access_allowed is not None:
            pulumi.set(__self__, "is_anonymous_access_allowed", is_anonymous_access_allowed)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if max_clock_skew_in_seconds is not None:
            pulumi.set(__self__, "max_clock_skew_in_seconds", max_clock_skew_in_seconds)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)
        if token_auth_scheme is not None:
            pulumi.set(__self__, "token_auth_scheme", token_auth_scheme)
        if token_header is not None:
            pulumi.set(__self__, "token_header", token_header)
        if token_query_param is not None:
            pulumi.set(__self__, "token_query_param", token_query_param)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if validation_failure_policies is not None:
            pulumi.set(__self__, "validation_failure_policies", validation_failure_policies)
        if validation_policies is not None:
            pulumi.set(__self__, "validation_policies", validation_policies)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="cacheKeys")
    def cache_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cache_keys")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_anonymous_access_allowed")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="maxClockSkewInSeconds")
    def max_clock_skew_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "max_clock_skew_in_seconds")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyResult']]:
        return pulumi.get(self, "public_keys")

    @property
    @pulumi.getter(name="tokenAuthScheme")
    def token_auth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "token_auth_scheme")

    @property
    @pulumi.getter(name="tokenHeader")
    def token_header(self) -> Optional[str]:
        return pulumi.get(self, "token_header")

    @property
    @pulumi.getter(name="tokenQueryParam")
    def token_query_param(self) -> Optional[str]:
        return pulumi.get(self, "token_query_param")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validationFailurePolicies")
    def validation_failure_policies(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResult']]:
        return pulumi.get(self, "validation_failure_policies")

    @property
    @pulumi.getter(name="validationPolicies")
    def validation_policies(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyResult']]:
        return pulumi.get(self, "validation_policies")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimResult']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyResult(dict):
    def __init__(__self__, *,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKeyResult']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKeyResult']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKeyResult(dict):
    def __init__(__self__, *,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 format: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResult(dict):
    def __init__(__self__, *,
                 client_details: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailResult']] = None,
                 fallback_redirect_path: Optional[str] = None,
                 logout_path: Optional[str] = None,
                 max_expiry_duration_in_hours: Optional[int] = None,
                 response_code: Optional[str] = None,
                 response_header_transformations: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationResult']] = None,
                 response_message: Optional[str] = None,
                 response_type: Optional[str] = None,
                 scopes: Optional[Sequence[str]] = None,
                 source_uri_details: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailResult']] = None,
                 type: Optional[str] = None,
                 use_cookies_for_intermediate_steps: Optional[bool] = None,
                 use_cookies_for_session: Optional[bool] = None,
                 use_pkce: Optional[bool] = None):
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if fallback_redirect_path is not None:
            pulumi.set(__self__, "fallback_redirect_path", fallback_redirect_path)
        if logout_path is not None:
            pulumi.set(__self__, "logout_path", logout_path)
        if max_expiry_duration_in_hours is not None:
            pulumi.set(__self__, "max_expiry_duration_in_hours", max_expiry_duration_in_hours)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if response_header_transformations is not None:
            pulumi.set(__self__, "response_header_transformations", response_header_transformations)
        if response_message is not None:
            pulumi.set(__self__, "response_message", response_message)
        if response_type is not None:
            pulumi.set(__self__, "response_type", response_type)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_cookies_for_intermediate_steps is not None:
            pulumi.set(__self__, "use_cookies_for_intermediate_steps", use_cookies_for_intermediate_steps)
        if use_cookies_for_session is not None:
            pulumi.set(__self__, "use_cookies_for_session", use_cookies_for_session)
        if use_pkce is not None:
            pulumi.set(__self__, "use_pkce", use_pkce)

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailResult']]:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="fallbackRedirectPath")
    def fallback_redirect_path(self) -> Optional[str]:
        return pulumi.get(self, "fallback_redirect_path")

    @property
    @pulumi.getter(name="logoutPath")
    def logout_path(self) -> Optional[str]:
        return pulumi.get(self, "logout_path")

    @property
    @pulumi.getter(name="maxExpiryDurationInHours")
    def max_expiry_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_expiry_duration_in_hours")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[str]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="responseHeaderTransformations")
    def response_header_transformations(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationResult']]:
        return pulumi.get(self, "response_header_transformations")

    @property
    @pulumi.getter(name="responseMessage")
    def response_message(self) -> Optional[str]:
        return pulumi.get(self, "response_message")

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[str]:
        return pulumi.get(self, "response_type")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailResult']]:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useCookiesForIntermediateSteps")
    def use_cookies_for_intermediate_steps(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_intermediate_steps")

    @property
    @pulumi.getter(name="useCookiesForSession")
    def use_cookies_for_session(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_session")

    @property
    @pulumi.getter(name="usePkce")
    def use_pkce(self) -> Optional[bool]:
        return pulumi.get(self, "use_pkce")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailResult(dict):
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None,
                 type: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationResult(dict):
    def __init__(__self__, *,
                 filter_headers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult']] = None,
                 rename_headers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult']] = None,
                 set_headers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderResult']] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult']]:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult']]:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderResult']]:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult(dict):
    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyResult(dict):
    def __init__(__self__, *,
                 additional_validation_policies: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyResult']] = None,
                 client_details: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailResult']] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyResult']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 source_uri_details: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailResult']] = None,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if additional_validation_policies is not None:
            pulumi.set(__self__, "additional_validation_policies", additional_validation_policies)
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="additionalValidationPolicies")
    def additional_validation_policies(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyResult']]:
        return pulumi.get(self, "additional_validation_policies")

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailResult']]:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyResult']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailResult']]:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyResult(dict):
    def __init__(__self__, *,
                 audiences: Optional[Sequence[str]] = None,
                 issuers: Optional[Sequence[str]] = None,
                 verify_claims: Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimResult']] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimResult']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimResult(dict):
    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailResult(dict):
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None,
                 type: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyResult(dict):
    def __init__(__self__, *,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 format: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimResult(dict):
    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKeyResult(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyDynamicAuthenticationSelectionSourceResult(dict):
    def __init__(__self__, *,
                 selector: Optional[str] = None,
                 type: Optional[str] = None):
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyMutualTlResult(dict):
    def __init__(__self__, *,
                 allowed_sans: Optional[Sequence[str]] = None,
                 is_verified_certificate_required: Optional[bool] = None):
        if allowed_sans is not None:
            pulumi.set(__self__, "allowed_sans", allowed_sans)
        if is_verified_certificate_required is not None:
            pulumi.set(__self__, "is_verified_certificate_required", is_verified_certificate_required)

    @property
    @pulumi.getter(name="allowedSans")
    def allowed_sans(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_sans")

    @property
    @pulumi.getter(name="isVerifiedCertificateRequired")
    def is_verified_certificate_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_verified_certificate_required")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyRateLimitingResult(dict):
    def __init__(__self__, *,
                 rate_in_requests_per_second: Optional[int] = None,
                 rate_key: Optional[str] = None):
        if rate_in_requests_per_second is not None:
            pulumi.set(__self__, "rate_in_requests_per_second", rate_in_requests_per_second)
        if rate_key is not None:
            pulumi.set(__self__, "rate_key", rate_key)

    @property
    @pulumi.getter(name="rateInRequestsPerSecond")
    def rate_in_requests_per_second(self) -> Optional[int]:
        return pulumi.get(self, "rate_in_requests_per_second")

    @property
    @pulumi.getter(name="rateKey")
    def rate_key(self) -> Optional[str]:
        return pulumi.get(self, "rate_key")


@pulumi.output_type
class GetApiDeploymentSpecificationRequestPolicyUsagePlanResult(dict):
    def __init__(__self__, *,
                 token_locations: Optional[Sequence[str]] = None):
        if token_locations is not None:
            pulumi.set(__self__, "token_locations", token_locations)

    @property
    @pulumi.getter(name="tokenLocations")
    def token_locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "token_locations")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResult(dict):
    def __init__(__self__, *,
                 backends: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteBackendResult']] = None,
                 logging_policies: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteLoggingPolicyResult']] = None,
                 methods: Optional[Sequence[str]] = None,
                 path: Optional[str] = None,
                 request_policies: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyResult']] = None,
                 response_policies: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyResult']] = None):
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if logging_policies is not None:
            pulumi.set(__self__, "logging_policies", logging_policies)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if request_policies is not None:
            pulumi.set(__self__, "request_policies", request_policies)
        if response_policies is not None:
            pulumi.set(__self__, "response_policies", response_policies)

    @property
    @pulumi.getter
    def backends(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteBackendResult']]:
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteLoggingPolicyResult']]:
        return pulumi.get(self, "logging_policies")

    @property
    @pulumi.getter
    def methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyResult']]:
        return pulumi.get(self, "request_policies")

    @property
    @pulumi.getter(name="responsePolicies")
    def response_policies(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyResult']]:
        return pulumi.get(self, "response_policies")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteBackendResult(dict):
    def __init__(__self__, *,
                 allowed_post_logout_uris: Optional[Sequence[str]] = None,
                 body: Optional[str] = None,
                 connect_timeout_in_seconds: Optional[float] = None,
                 function_id: Optional[str] = None,
                 headers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteBackendHeaderResult']] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 post_logout_state: Optional[str] = None,
                 read_timeout_in_seconds: Optional[float] = None,
                 routing_backends: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteBackendRoutingBackendResult']] = None,
                 selection_sources: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteBackendSelectionSourceResult']] = None,
                 send_timeout_in_seconds: Optional[float] = None,
                 status: Optional[int] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        if allowed_post_logout_uris is not None:
            pulumi.set(__self__, "allowed_post_logout_uris", allowed_post_logout_uris)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if connect_timeout_in_seconds is not None:
            pulumi.set(__self__, "connect_timeout_in_seconds", connect_timeout_in_seconds)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if post_logout_state is not None:
            pulumi.set(__self__, "post_logout_state", post_logout_state)
        if read_timeout_in_seconds is not None:
            pulumi.set(__self__, "read_timeout_in_seconds", read_timeout_in_seconds)
        if routing_backends is not None:
            pulumi.set(__self__, "routing_backends", routing_backends)
        if selection_sources is not None:
            pulumi.set(__self__, "selection_sources", selection_sources)
        if send_timeout_in_seconds is not None:
            pulumi.set(__self__, "send_timeout_in_seconds", send_timeout_in_seconds)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="allowedPostLogoutUris")
    def allowed_post_logout_uris(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_post_logout_uris")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="connectTimeoutInSeconds")
    def connect_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "connect_timeout_in_seconds")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteBackendHeaderResult']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="postLogoutState")
    def post_logout_state(self) -> Optional[str]:
        return pulumi.get(self, "post_logout_state")

    @property
    @pulumi.getter(name="readTimeoutInSeconds")
    def read_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "read_timeout_in_seconds")

    @property
    @pulumi.getter(name="routingBackends")
    def routing_backends(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteBackendRoutingBackendResult']]:
        return pulumi.get(self, "routing_backends")

    @property
    @pulumi.getter(name="selectionSources")
    def selection_sources(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteBackendSelectionSourceResult']]:
        return pulumi.get(self, "selection_sources")

    @property
    @pulumi.getter(name="sendTimeoutInSeconds")
    def send_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "send_timeout_in_seconds")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteBackendHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteBackendRoutingBackendResult(dict):
    def __init__(__self__, *,
                 backends: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteBackendRoutingBackendBackendResult']] = None,
                 keys: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteBackendRoutingBackendKeyResult']] = None):
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)

    @property
    @pulumi.getter
    def backends(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteBackendRoutingBackendBackendResult']]:
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteBackendRoutingBackendKeyResult']]:
        return pulumi.get(self, "keys")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteBackendRoutingBackendBackendResult(dict):
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 connect_timeout_in_seconds: Optional[float] = None,
                 function_id: Optional[str] = None,
                 headers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteBackendRoutingBackendBackendHeaderResult']] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 read_timeout_in_seconds: Optional[float] = None,
                 send_timeout_in_seconds: Optional[float] = None,
                 status: Optional[int] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if connect_timeout_in_seconds is not None:
            pulumi.set(__self__, "connect_timeout_in_seconds", connect_timeout_in_seconds)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if read_timeout_in_seconds is not None:
            pulumi.set(__self__, "read_timeout_in_seconds", read_timeout_in_seconds)
        if send_timeout_in_seconds is not None:
            pulumi.set(__self__, "send_timeout_in_seconds", send_timeout_in_seconds)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="connectTimeoutInSeconds")
    def connect_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "connect_timeout_in_seconds")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteBackendRoutingBackendBackendHeaderResult']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="readTimeoutInSeconds")
    def read_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "read_timeout_in_seconds")

    @property
    @pulumi.getter(name="sendTimeoutInSeconds")
    def send_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "send_timeout_in_seconds")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteBackendRoutingBackendBackendHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteBackendRoutingBackendKeyResult(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteBackendSelectionSourceResult(dict):
    def __init__(__self__, *,
                 selector: Optional[str] = None,
                 type: Optional[str] = None):
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteLoggingPolicyResult(dict):
    def __init__(__self__, *,
                 access_logs: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteLoggingPolicyAccessLogResult']] = None,
                 execution_logs: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteLoggingPolicyExecutionLogResult']] = None):
        if access_logs is not None:
            pulumi.set(__self__, "access_logs", access_logs)
        if execution_logs is not None:
            pulumi.set(__self__, "execution_logs", execution_logs)

    @property
    @pulumi.getter(name="accessLogs")
    def access_logs(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteLoggingPolicyAccessLogResult']]:
        return pulumi.get(self, "access_logs")

    @property
    @pulumi.getter(name="executionLogs")
    def execution_logs(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteLoggingPolicyExecutionLogResult']]:
        return pulumi.get(self, "execution_logs")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteLoggingPolicyAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteLoggingPolicyExecutionLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 log_level: Optional[str] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyResult(dict):
    def __init__(__self__, *,
                 authorizations: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyAuthorizationResult']] = None,
                 body_validations: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyBodyValidationResult']] = None,
                 cors: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyCorResult']] = None,
                 header_transformations: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationResult']] = None,
                 header_validations: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderValidationResult']] = None,
                 query_parameter_transformations: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationResult']] = None,
                 query_parameter_validations: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterValidationResult']] = None,
                 response_cache_lookups: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyResponseCacheLookupResult']] = None):
        if authorizations is not None:
            pulumi.set(__self__, "authorizations", authorizations)
        if body_validations is not None:
            pulumi.set(__self__, "body_validations", body_validations)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if header_transformations is not None:
            pulumi.set(__self__, "header_transformations", header_transformations)
        if header_validations is not None:
            pulumi.set(__self__, "header_validations", header_validations)
        if query_parameter_transformations is not None:
            pulumi.set(__self__, "query_parameter_transformations", query_parameter_transformations)
        if query_parameter_validations is not None:
            pulumi.set(__self__, "query_parameter_validations", query_parameter_validations)
        if response_cache_lookups is not None:
            pulumi.set(__self__, "response_cache_lookups", response_cache_lookups)

    @property
    @pulumi.getter
    def authorizations(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyAuthorizationResult']]:
        return pulumi.get(self, "authorizations")

    @property
    @pulumi.getter(name="bodyValidations")
    def body_validations(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyBodyValidationResult']]:
        return pulumi.get(self, "body_validations")

    @property
    @pulumi.getter
    def cors(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyCorResult']]:
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationResult']]:
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="headerValidations")
    def header_validations(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderValidationResult']]:
        return pulumi.get(self, "header_validations")

    @property
    @pulumi.getter(name="queryParameterTransformations")
    def query_parameter_transformations(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationResult']]:
        return pulumi.get(self, "query_parameter_transformations")

    @property
    @pulumi.getter(name="queryParameterValidations")
    def query_parameter_validations(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterValidationResult']]:
        return pulumi.get(self, "query_parameter_validations")

    @property
    @pulumi.getter(name="responseCacheLookups")
    def response_cache_lookups(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyResponseCacheLookupResult']]:
        return pulumi.get(self, "response_cache_lookups")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyAuthorizationResult(dict):
    def __init__(__self__, *,
                 allowed_scopes: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if allowed_scopes is not None:
            pulumi.set(__self__, "allowed_scopes", allowed_scopes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowedScopes")
    def allowed_scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_scopes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyBodyValidationResult(dict):
    def __init__(__self__, *,
                 contents: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyBodyValidationContentResult']] = None,
                 required: Optional[bool] = None,
                 validation_mode: Optional[str] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if validation_mode is not None:
            pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyBodyValidationContentResult']]:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[str]:
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyBodyValidationContentResult(dict):
    def __init__(__self__, *,
                 media_type: Optional[str] = None,
                 validation_type: Optional[str] = None):
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)
        if validation_type is not None:
            pulumi.set(__self__, "validation_type", validation_type)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[str]:
        return pulumi.get(self, "media_type")

    @property
    @pulumi.getter(name="validationType")
    def validation_type(self) -> Optional[str]:
        return pulumi.get(self, "validation_type")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyCorResult(dict):
    def __init__(__self__, *,
                 allowed_headers: Optional[Sequence[str]] = None,
                 allowed_methods: Optional[Sequence[str]] = None,
                 allowed_origins: Optional[Sequence[str]] = None,
                 exposed_headers: Optional[Sequence[str]] = None,
                 is_allow_credentials_enabled: Optional[bool] = None,
                 max_age_in_seconds: Optional[int] = None):
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if allowed_origins is not None:
            pulumi.set(__self__, "allowed_origins", allowed_origins)
        if exposed_headers is not None:
            pulumi.set(__self__, "exposed_headers", exposed_headers)
        if is_allow_credentials_enabled is not None:
            pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        if max_age_in_seconds is not None:
            pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationResult(dict):
    def __init__(__self__, *,
                 filter_headers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderResult']] = None,
                 rename_headers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderResult']] = None,
                 set_headers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderResult']] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderResult']]:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderResult']]:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderResult']]:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItemResult']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItemResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItemResult(dict):
    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyHeaderValidationResult(dict):
    def __init__(__self__, *,
                 headers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderValidationHeaderResult']] = None,
                 validation_mode: Optional[str] = None):
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if validation_mode is not None:
            pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyHeaderValidationHeaderResult']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[str]:
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyHeaderValidationHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 required: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationResult(dict):
    def __init__(__self__, *,
                 filter_query_parameters: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterResult']] = None,
                 rename_query_parameters: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterResult']] = None,
                 set_query_parameters: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterResult']] = None):
        if filter_query_parameters is not None:
            pulumi.set(__self__, "filter_query_parameters", filter_query_parameters)
        if rename_query_parameters is not None:
            pulumi.set(__self__, "rename_query_parameters", rename_query_parameters)
        if set_query_parameters is not None:
            pulumi.set(__self__, "set_query_parameters", set_query_parameters)

    @property
    @pulumi.getter(name="filterQueryParameters")
    def filter_query_parameters(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterResult']]:
        return pulumi.get(self, "filter_query_parameters")

    @property
    @pulumi.getter(name="renameQueryParameters")
    def rename_query_parameters(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterResult']]:
        return pulumi.get(self, "rename_query_parameters")

    @property
    @pulumi.getter(name="setQueryParameters")
    def set_query_parameters(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterResult']]:
        return pulumi.get(self, "set_query_parameters")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItemResult']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItemResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItemResult(dict):
    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterValidationResult(dict):
    def __init__(__self__, *,
                 parameters: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterValidationParameterResult']] = None,
                 validation_mode: Optional[str] = None):
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if validation_mode is not None:
            pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterValidationParameterResult']]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[str]:
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyQueryParameterValidationParameterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 required: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteRequestPolicyResponseCacheLookupResult(dict):
    def __init__(__self__, *,
                 cache_key_additions: Optional[Sequence[str]] = None,
                 is_enabled: Optional[bool] = None,
                 is_private_caching_enabled: Optional[bool] = None,
                 type: Optional[str] = None):
        if cache_key_additions is not None:
            pulumi.set(__self__, "cache_key_additions", cache_key_additions)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_private_caching_enabled is not None:
            pulumi.set(__self__, "is_private_caching_enabled", is_private_caching_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cacheKeyAdditions")
    def cache_key_additions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cache_key_additions")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isPrivateCachingEnabled")
    def is_private_caching_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_private_caching_enabled")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePolicyResult(dict):
    def __init__(__self__, *,
                 header_transformations: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationResult']] = None,
                 response_cache_stores: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyResponseCacheStoreResult']] = None):
        if header_transformations is not None:
            pulumi.set(__self__, "header_transformations", header_transformations)
        if response_cache_stores is not None:
            pulumi.set(__self__, "response_cache_stores", response_cache_stores)

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationResult']]:
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="responseCacheStores")
    def response_cache_stores(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyResponseCacheStoreResult']]:
        return pulumi.get(self, "response_cache_stores")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationResult(dict):
    def __init__(__self__, *,
                 filter_headers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderResult']] = None,
                 rename_headers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderResult']] = None,
                 set_headers: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderResult']] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderResult']]:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderResult']]:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderResult']]:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItemResult']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItemResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItemResult(dict):
    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiDeploymentSpecificationRouteResponsePolicyResponseCacheStoreResult(dict):
    def __init__(__self__, *,
                 time_to_live_in_seconds: Optional[int] = None,
                 type: Optional[str] = None):
        if time_to_live_in_seconds is not None:
            pulumi.set(__self__, "time_to_live_in_seconds", time_to_live_in_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToLiveInSeconds")
    def time_to_live_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "time_to_live_in_seconds")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiValidationResultResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 result: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if result is not None:
            pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def result(self) -> Optional[str]:
        return pulumi.get(self, "result")


@pulumi.output_type
class GetApiValidationValidationResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence['outputs.GetApiValidationValidationDetailResult']] = None,
                 name: Optional[str] = None,
                 result: Optional[str] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if result is not None:
            pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetApiValidationValidationDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def result(self) -> Optional[str]:
        return pulumi.get(self, "result")


@pulumi.output_type
class GetApiValidationValidationDetailResult(dict):
    def __init__(__self__, *,
                 msg: Optional[str] = None,
                 severity: Optional[str] = None,
                 srcs: Optional[Sequence['outputs.GetApiValidationValidationDetailSrcResult']] = None):
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if srcs is not None:
            pulumi.set(__self__, "srcs", srcs)

    @property
    @pulumi.getter
    def msg(self) -> Optional[str]:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def srcs(self) -> Optional[Sequence['outputs.GetApiValidationValidationDetailSrcResult']]:
        return pulumi.get(self, "srcs")


@pulumi.output_type
class GetApiValidationValidationDetailSrcResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[Any]] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApisApiCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApisApiCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApisApiCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApisApiCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 content: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 specification_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 validation_results: Optional[Sequence['outputs.GetApisApiCollectionItemValidationResultResult']] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if specification_type is not None:
            pulumi.set(__self__, "specification_type", specification_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if validation_results is not None:
            pulumi.set(__self__, "validation_results", validation_results)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="specificationType")
    def specification_type(self) -> Optional[str]:
        return pulumi.get(self, "specification_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="validationResults")
    def validation_results(self) -> Optional[Sequence['outputs.GetApisApiCollectionItemValidationResultResult']]:
        return pulumi.get(self, "validation_results")


@pulumi.output_type
class GetApisApiCollectionItemValidationResultResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 result: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if result is not None:
            pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def result(self) -> Optional[str]:
        return pulumi.get(self, "result")


@pulumi.output_type
class GetApisFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCertificatesCertificateCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCertificatesCertificateCollectionItemResult(dict):
    def __init__(__self__, *,
                 certificate: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 intermediate_certificates: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 private_key: Optional[str] = None,
                 state: Optional[str] = None,
                 subject_names: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_not_valid_after: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if intermediate_certificates is not None:
            pulumi.set(__self__, "intermediate_certificates", intermediate_certificates)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subject_names is not None:
            pulumi.set(__self__, "subject_names", subject_names)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_not_valid_after is not None:
            pulumi.set(__self__, "time_not_valid_after", time_not_valid_after)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="intermediateCertificates")
    def intermediate_certificates(self) -> Optional[str]:
        return pulumi.get(self, "intermediate_certificates")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subjectNames")
    def subject_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_names")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeNotValidAfter")
    def time_not_valid_after(self) -> Optional[str]:
        return pulumi.get(self, "time_not_valid_after")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetCertificatesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentSpecificationResult(dict):
    def __init__(__self__, *,
                 logging_policies: Optional[Sequence['outputs.GetDeploymentSpecificationLoggingPolicyResult']] = None,
                 request_policies: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyResult']] = None,
                 routes: Optional[Sequence['outputs.GetDeploymentSpecificationRouteResult']] = None):
        if logging_policies is not None:
            pulumi.set(__self__, "logging_policies", logging_policies)
        if request_policies is not None:
            pulumi.set(__self__, "request_policies", request_policies)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationLoggingPolicyResult']]:
        return pulumi.get(self, "logging_policies")

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyResult']]:
        return pulumi.get(self, "request_policies")

    @property
    @pulumi.getter
    def routes(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteResult']]:
        return pulumi.get(self, "routes")


@pulumi.output_type
class GetDeploymentSpecificationLoggingPolicyResult(dict):
    def __init__(__self__, *,
                 access_logs: Optional[Sequence['outputs.GetDeploymentSpecificationLoggingPolicyAccessLogResult']] = None,
                 execution_logs: Optional[Sequence['outputs.GetDeploymentSpecificationLoggingPolicyExecutionLogResult']] = None):
        if access_logs is not None:
            pulumi.set(__self__, "access_logs", access_logs)
        if execution_logs is not None:
            pulumi.set(__self__, "execution_logs", execution_logs)

    @property
    @pulumi.getter(name="accessLogs")
    def access_logs(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationLoggingPolicyAccessLogResult']]:
        return pulumi.get(self, "access_logs")

    @property
    @pulumi.getter(name="executionLogs")
    def execution_logs(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationLoggingPolicyExecutionLogResult']]:
        return pulumi.get(self, "execution_logs")


@pulumi.output_type
class GetDeploymentSpecificationLoggingPolicyAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetDeploymentSpecificationLoggingPolicyExecutionLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 log_level: Optional[str] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyResult(dict):
    def __init__(__self__, *,
                 authentications: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationResult']] = None,
                 cors: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyCorResult']] = None,
                 dynamic_authentications: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationResult']] = None,
                 mutual_tls: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyMutualTlResult']] = None,
                 rate_limitings: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyRateLimitingResult']] = None,
                 usage_plans: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyUsagePlanResult']] = None):
        if authentications is not None:
            pulumi.set(__self__, "authentications", authentications)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if dynamic_authentications is not None:
            pulumi.set(__self__, "dynamic_authentications", dynamic_authentications)
        if mutual_tls is not None:
            pulumi.set(__self__, "mutual_tls", mutual_tls)
        if rate_limitings is not None:
            pulumi.set(__self__, "rate_limitings", rate_limitings)
        if usage_plans is not None:
            pulumi.set(__self__, "usage_plans", usage_plans)

    @property
    @pulumi.getter
    def authentications(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationResult']]:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter
    def cors(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyCorResult']]:
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="dynamicAuthentications")
    def dynamic_authentications(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationResult']]:
        return pulumi.get(self, "dynamic_authentications")

    @property
    @pulumi.getter(name="mutualTls")
    def mutual_tls(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyMutualTlResult']]:
        return pulumi.get(self, "mutual_tls")

    @property
    @pulumi.getter(name="rateLimitings")
    def rate_limitings(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyRateLimitingResult']]:
        return pulumi.get(self, "rate_limitings")

    @property
    @pulumi.getter(name="usagePlans")
    def usage_plans(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyUsagePlanResult']]:
        return pulumi.get(self, "usage_plans")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationResult(dict):
    def __init__(__self__, *,
                 audiences: Optional[Sequence[str]] = None,
                 cache_keys: Optional[Sequence[str]] = None,
                 function_id: Optional[str] = None,
                 is_anonymous_access_allowed: Optional[bool] = None,
                 issuers: Optional[Sequence[str]] = None,
                 max_clock_skew_in_seconds: Optional[float] = None,
                 parameters: Optional[Mapping[str, Any]] = None,
                 public_keys: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationPublicKeyResult']] = None,
                 token_auth_scheme: Optional[str] = None,
                 token_header: Optional[str] = None,
                 token_query_param: Optional[str] = None,
                 type: Optional[str] = None,
                 validation_failure_policies: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResult']] = None,
                 validation_policies: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyResult']] = None,
                 verify_claims: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationVerifyClaimResult']] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if cache_keys is not None:
            pulumi.set(__self__, "cache_keys", cache_keys)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if is_anonymous_access_allowed is not None:
            pulumi.set(__self__, "is_anonymous_access_allowed", is_anonymous_access_allowed)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if max_clock_skew_in_seconds is not None:
            pulumi.set(__self__, "max_clock_skew_in_seconds", max_clock_skew_in_seconds)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)
        if token_auth_scheme is not None:
            pulumi.set(__self__, "token_auth_scheme", token_auth_scheme)
        if token_header is not None:
            pulumi.set(__self__, "token_header", token_header)
        if token_query_param is not None:
            pulumi.set(__self__, "token_query_param", token_query_param)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if validation_failure_policies is not None:
            pulumi.set(__self__, "validation_failure_policies", validation_failure_policies)
        if validation_policies is not None:
            pulumi.set(__self__, "validation_policies", validation_policies)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="cacheKeys")
    def cache_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cache_keys")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_anonymous_access_allowed")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="maxClockSkewInSeconds")
    def max_clock_skew_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "max_clock_skew_in_seconds")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationPublicKeyResult']]:
        return pulumi.get(self, "public_keys")

    @property
    @pulumi.getter(name="tokenAuthScheme")
    def token_auth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "token_auth_scheme")

    @property
    @pulumi.getter(name="tokenHeader")
    def token_header(self) -> Optional[str]:
        return pulumi.get(self, "token_header")

    @property
    @pulumi.getter(name="tokenQueryParam")
    def token_query_param(self) -> Optional[str]:
        return pulumi.get(self, "token_query_param")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validationFailurePolicies")
    def validation_failure_policies(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResult']]:
        return pulumi.get(self, "validation_failure_policies")

    @property
    @pulumi.getter(name="validationPolicies")
    def validation_policies(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyResult']]:
        return pulumi.get(self, "validation_policies")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationVerifyClaimResult']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationPublicKeyResult(dict):
    def __init__(__self__, *,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKeyResult']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKeyResult']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationPublicKeyKeyResult(dict):
    def __init__(__self__, *,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 format: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResult(dict):
    def __init__(__self__, *,
                 client_details: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetailResult']] = None,
                 fallback_redirect_path: Optional[str] = None,
                 logout_path: Optional[str] = None,
                 max_expiry_duration_in_hours: Optional[int] = None,
                 response_code: Optional[str] = None,
                 response_header_transformations: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationResult']] = None,
                 response_message: Optional[str] = None,
                 response_type: Optional[str] = None,
                 scopes: Optional[Sequence[str]] = None,
                 source_uri_details: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetailResult']] = None,
                 type: Optional[str] = None,
                 use_cookies_for_intermediate_steps: Optional[bool] = None,
                 use_cookies_for_session: Optional[bool] = None,
                 use_pkce: Optional[bool] = None):
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if fallback_redirect_path is not None:
            pulumi.set(__self__, "fallback_redirect_path", fallback_redirect_path)
        if logout_path is not None:
            pulumi.set(__self__, "logout_path", logout_path)
        if max_expiry_duration_in_hours is not None:
            pulumi.set(__self__, "max_expiry_duration_in_hours", max_expiry_duration_in_hours)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if response_header_transformations is not None:
            pulumi.set(__self__, "response_header_transformations", response_header_transformations)
        if response_message is not None:
            pulumi.set(__self__, "response_message", response_message)
        if response_type is not None:
            pulumi.set(__self__, "response_type", response_type)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_cookies_for_intermediate_steps is not None:
            pulumi.set(__self__, "use_cookies_for_intermediate_steps", use_cookies_for_intermediate_steps)
        if use_cookies_for_session is not None:
            pulumi.set(__self__, "use_cookies_for_session", use_cookies_for_session)
        if use_pkce is not None:
            pulumi.set(__self__, "use_pkce", use_pkce)

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetailResult']]:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="fallbackRedirectPath")
    def fallback_redirect_path(self) -> Optional[str]:
        return pulumi.get(self, "fallback_redirect_path")

    @property
    @pulumi.getter(name="logoutPath")
    def logout_path(self) -> Optional[str]:
        return pulumi.get(self, "logout_path")

    @property
    @pulumi.getter(name="maxExpiryDurationInHours")
    def max_expiry_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_expiry_duration_in_hours")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[str]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="responseHeaderTransformations")
    def response_header_transformations(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationResult']]:
        return pulumi.get(self, "response_header_transformations")

    @property
    @pulumi.getter(name="responseMessage")
    def response_message(self) -> Optional[str]:
        return pulumi.get(self, "response_message")

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[str]:
        return pulumi.get(self, "response_type")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetailResult']]:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useCookiesForIntermediateSteps")
    def use_cookies_for_intermediate_steps(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_intermediate_steps")

    @property
    @pulumi.getter(name="useCookiesForSession")
    def use_cookies_for_session(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_session")

    @property
    @pulumi.getter(name="usePkce")
    def use_pkce(self) -> Optional[bool]:
        return pulumi.get(self, "use_pkce")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetailResult(dict):
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None,
                 type: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationResult(dict):
    def __init__(__self__, *,
                 filter_headers: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult']] = None,
                 rename_headers: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult']] = None,
                 set_headers: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderResult']] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult']]:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult']]:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderResult']]:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult(dict):
    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetailResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyResult(dict):
    def __init__(__self__, *,
                 additional_validation_policies: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyResult']] = None,
                 client_details: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyClientDetailResult']] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyKeyResult']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 source_uri_details: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetailResult']] = None,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if additional_validation_policies is not None:
            pulumi.set(__self__, "additional_validation_policies", additional_validation_policies)
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="additionalValidationPolicies")
    def additional_validation_policies(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyResult']]:
        return pulumi.get(self, "additional_validation_policies")

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyClientDetailResult']]:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyKeyResult']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetailResult']]:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyResult(dict):
    def __init__(__self__, *,
                 audiences: Optional[Sequence[str]] = None,
                 issuers: Optional[Sequence[str]] = None,
                 verify_claims: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimResult']] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimResult']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimResult(dict):
    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyClientDetailResult(dict):
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None,
                 type: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicyKeyResult(dict):
    def __init__(__self__, *,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 format: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetailResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyAuthenticationVerifyClaimResult(dict):
    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyCorResult(dict):
    def __init__(__self__, *,
                 allowed_headers: Optional[Sequence[str]] = None,
                 allowed_methods: Optional[Sequence[str]] = None,
                 allowed_origins: Optional[Sequence[str]] = None,
                 exposed_headers: Optional[Sequence[str]] = None,
                 is_allow_credentials_enabled: Optional[bool] = None,
                 max_age_in_seconds: Optional[int] = None):
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if allowed_origins is not None:
            pulumi.set(__self__, "allowed_origins", allowed_origins)
        if exposed_headers is not None:
            pulumi.set(__self__, "exposed_headers", exposed_headers)
        if is_allow_credentials_enabled is not None:
            pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        if max_age_in_seconds is not None:
            pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationResult(dict):
    def __init__(__self__, *,
                 authentication_servers: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerResult']] = None,
                 selection_sources: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationSelectionSourceResult']] = None):
        if authentication_servers is not None:
            pulumi.set(__self__, "authentication_servers", authentication_servers)
        if selection_sources is not None:
            pulumi.set(__self__, "selection_sources", selection_sources)

    @property
    @pulumi.getter(name="authenticationServers")
    def authentication_servers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerResult']]:
        return pulumi.get(self, "authentication_servers")

    @property
    @pulumi.getter(name="selectionSources")
    def selection_sources(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationSelectionSourceResult']]:
        return pulumi.get(self, "selection_sources")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerResult(dict):
    def __init__(__self__, *,
                 authentication_server_details: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailResult']] = None,
                 keys: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKeyResult']] = None):
        if authentication_server_details is not None:
            pulumi.set(__self__, "authentication_server_details", authentication_server_details)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)

    @property
    @pulumi.getter(name="authenticationServerDetails")
    def authentication_server_details(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailResult']]:
        return pulumi.get(self, "authentication_server_details")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKeyResult']]:
        return pulumi.get(self, "keys")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailResult(dict):
    def __init__(__self__, *,
                 audiences: Optional[Sequence[str]] = None,
                 cache_keys: Optional[Sequence[str]] = None,
                 function_id: Optional[str] = None,
                 is_anonymous_access_allowed: Optional[bool] = None,
                 issuers: Optional[Sequence[str]] = None,
                 max_clock_skew_in_seconds: Optional[float] = None,
                 parameters: Optional[Mapping[str, Any]] = None,
                 public_keys: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyResult']] = None,
                 token_auth_scheme: Optional[str] = None,
                 token_header: Optional[str] = None,
                 token_query_param: Optional[str] = None,
                 type: Optional[str] = None,
                 validation_failure_policies: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResult']] = None,
                 validation_policies: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyResult']] = None,
                 verify_claims: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimResult']] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if cache_keys is not None:
            pulumi.set(__self__, "cache_keys", cache_keys)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if is_anonymous_access_allowed is not None:
            pulumi.set(__self__, "is_anonymous_access_allowed", is_anonymous_access_allowed)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if max_clock_skew_in_seconds is not None:
            pulumi.set(__self__, "max_clock_skew_in_seconds", max_clock_skew_in_seconds)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)
        if token_auth_scheme is not None:
            pulumi.set(__self__, "token_auth_scheme", token_auth_scheme)
        if token_header is not None:
            pulumi.set(__self__, "token_header", token_header)
        if token_query_param is not None:
            pulumi.set(__self__, "token_query_param", token_query_param)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if validation_failure_policies is not None:
            pulumi.set(__self__, "validation_failure_policies", validation_failure_policies)
        if validation_policies is not None:
            pulumi.set(__self__, "validation_policies", validation_policies)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="cacheKeys")
    def cache_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cache_keys")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_anonymous_access_allowed")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="maxClockSkewInSeconds")
    def max_clock_skew_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "max_clock_skew_in_seconds")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyResult']]:
        return pulumi.get(self, "public_keys")

    @property
    @pulumi.getter(name="tokenAuthScheme")
    def token_auth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "token_auth_scheme")

    @property
    @pulumi.getter(name="tokenHeader")
    def token_header(self) -> Optional[str]:
        return pulumi.get(self, "token_header")

    @property
    @pulumi.getter(name="tokenQueryParam")
    def token_query_param(self) -> Optional[str]:
        return pulumi.get(self, "token_query_param")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validationFailurePolicies")
    def validation_failure_policies(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResult']]:
        return pulumi.get(self, "validation_failure_policies")

    @property
    @pulumi.getter(name="validationPolicies")
    def validation_policies(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyResult']]:
        return pulumi.get(self, "validation_policies")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimResult']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyResult(dict):
    def __init__(__self__, *,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKeyResult']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKeyResult']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKeyResult(dict):
    def __init__(__self__, *,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 format: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResult(dict):
    def __init__(__self__, *,
                 client_details: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailResult']] = None,
                 fallback_redirect_path: Optional[str] = None,
                 logout_path: Optional[str] = None,
                 max_expiry_duration_in_hours: Optional[int] = None,
                 response_code: Optional[str] = None,
                 response_header_transformations: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationResult']] = None,
                 response_message: Optional[str] = None,
                 response_type: Optional[str] = None,
                 scopes: Optional[Sequence[str]] = None,
                 source_uri_details: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailResult']] = None,
                 type: Optional[str] = None,
                 use_cookies_for_intermediate_steps: Optional[bool] = None,
                 use_cookies_for_session: Optional[bool] = None,
                 use_pkce: Optional[bool] = None):
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if fallback_redirect_path is not None:
            pulumi.set(__self__, "fallback_redirect_path", fallback_redirect_path)
        if logout_path is not None:
            pulumi.set(__self__, "logout_path", logout_path)
        if max_expiry_duration_in_hours is not None:
            pulumi.set(__self__, "max_expiry_duration_in_hours", max_expiry_duration_in_hours)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if response_header_transformations is not None:
            pulumi.set(__self__, "response_header_transformations", response_header_transformations)
        if response_message is not None:
            pulumi.set(__self__, "response_message", response_message)
        if response_type is not None:
            pulumi.set(__self__, "response_type", response_type)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_cookies_for_intermediate_steps is not None:
            pulumi.set(__self__, "use_cookies_for_intermediate_steps", use_cookies_for_intermediate_steps)
        if use_cookies_for_session is not None:
            pulumi.set(__self__, "use_cookies_for_session", use_cookies_for_session)
        if use_pkce is not None:
            pulumi.set(__self__, "use_pkce", use_pkce)

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailResult']]:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="fallbackRedirectPath")
    def fallback_redirect_path(self) -> Optional[str]:
        return pulumi.get(self, "fallback_redirect_path")

    @property
    @pulumi.getter(name="logoutPath")
    def logout_path(self) -> Optional[str]:
        return pulumi.get(self, "logout_path")

    @property
    @pulumi.getter(name="maxExpiryDurationInHours")
    def max_expiry_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_expiry_duration_in_hours")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[str]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="responseHeaderTransformations")
    def response_header_transformations(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationResult']]:
        return pulumi.get(self, "response_header_transformations")

    @property
    @pulumi.getter(name="responseMessage")
    def response_message(self) -> Optional[str]:
        return pulumi.get(self, "response_message")

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[str]:
        return pulumi.get(self, "response_type")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailResult']]:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useCookiesForIntermediateSteps")
    def use_cookies_for_intermediate_steps(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_intermediate_steps")

    @property
    @pulumi.getter(name="useCookiesForSession")
    def use_cookies_for_session(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_session")

    @property
    @pulumi.getter(name="usePkce")
    def use_pkce(self) -> Optional[bool]:
        return pulumi.get(self, "use_pkce")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailResult(dict):
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None,
                 type: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationResult(dict):
    def __init__(__self__, *,
                 filter_headers: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult']] = None,
                 rename_headers: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult']] = None,
                 set_headers: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderResult']] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult']]:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult']]:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderResult']]:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult(dict):
    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyResult(dict):
    def __init__(__self__, *,
                 additional_validation_policies: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyResult']] = None,
                 client_details: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailResult']] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyResult']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 source_uri_details: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailResult']] = None,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if additional_validation_policies is not None:
            pulumi.set(__self__, "additional_validation_policies", additional_validation_policies)
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="additionalValidationPolicies")
    def additional_validation_policies(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyResult']]:
        return pulumi.get(self, "additional_validation_policies")

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailResult']]:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyResult']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailResult']]:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyResult(dict):
    def __init__(__self__, *,
                 audiences: Optional[Sequence[str]] = None,
                 issuers: Optional[Sequence[str]] = None,
                 verify_claims: Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimResult']] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimResult']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimResult(dict):
    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailResult(dict):
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None,
                 type: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyResult(dict):
    def __init__(__self__, *,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 format: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimResult(dict):
    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKeyResult(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyDynamicAuthenticationSelectionSourceResult(dict):
    def __init__(__self__, *,
                 selector: Optional[str] = None,
                 type: Optional[str] = None):
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyMutualTlResult(dict):
    def __init__(__self__, *,
                 allowed_sans: Optional[Sequence[str]] = None,
                 is_verified_certificate_required: Optional[bool] = None):
        if allowed_sans is not None:
            pulumi.set(__self__, "allowed_sans", allowed_sans)
        if is_verified_certificate_required is not None:
            pulumi.set(__self__, "is_verified_certificate_required", is_verified_certificate_required)

    @property
    @pulumi.getter(name="allowedSans")
    def allowed_sans(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_sans")

    @property
    @pulumi.getter(name="isVerifiedCertificateRequired")
    def is_verified_certificate_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_verified_certificate_required")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyRateLimitingResult(dict):
    def __init__(__self__, *,
                 rate_in_requests_per_second: Optional[int] = None,
                 rate_key: Optional[str] = None):
        if rate_in_requests_per_second is not None:
            pulumi.set(__self__, "rate_in_requests_per_second", rate_in_requests_per_second)
        if rate_key is not None:
            pulumi.set(__self__, "rate_key", rate_key)

    @property
    @pulumi.getter(name="rateInRequestsPerSecond")
    def rate_in_requests_per_second(self) -> Optional[int]:
        return pulumi.get(self, "rate_in_requests_per_second")

    @property
    @pulumi.getter(name="rateKey")
    def rate_key(self) -> Optional[str]:
        return pulumi.get(self, "rate_key")


@pulumi.output_type
class GetDeploymentSpecificationRequestPolicyUsagePlanResult(dict):
    def __init__(__self__, *,
                 token_locations: Optional[Sequence[str]] = None):
        if token_locations is not None:
            pulumi.set(__self__, "token_locations", token_locations)

    @property
    @pulumi.getter(name="tokenLocations")
    def token_locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "token_locations")


@pulumi.output_type
class GetDeploymentSpecificationRouteResult(dict):
    def __init__(__self__, *,
                 backends: Optional[Sequence['outputs.GetDeploymentSpecificationRouteBackendResult']] = None,
                 logging_policies: Optional[Sequence['outputs.GetDeploymentSpecificationRouteLoggingPolicyResult']] = None,
                 methods: Optional[Sequence[str]] = None,
                 path: Optional[str] = None,
                 request_policies: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyResult']] = None,
                 response_policies: Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyResult']] = None):
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if logging_policies is not None:
            pulumi.set(__self__, "logging_policies", logging_policies)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if request_policies is not None:
            pulumi.set(__self__, "request_policies", request_policies)
        if response_policies is not None:
            pulumi.set(__self__, "response_policies", response_policies)

    @property
    @pulumi.getter
    def backends(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteBackendResult']]:
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteLoggingPolicyResult']]:
        return pulumi.get(self, "logging_policies")

    @property
    @pulumi.getter
    def methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyResult']]:
        return pulumi.get(self, "request_policies")

    @property
    @pulumi.getter(name="responsePolicies")
    def response_policies(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyResult']]:
        return pulumi.get(self, "response_policies")


@pulumi.output_type
class GetDeploymentSpecificationRouteBackendResult(dict):
    def __init__(__self__, *,
                 allowed_post_logout_uris: Optional[Sequence[str]] = None,
                 body: Optional[str] = None,
                 connect_timeout_in_seconds: Optional[float] = None,
                 function_id: Optional[str] = None,
                 headers: Optional[Sequence['outputs.GetDeploymentSpecificationRouteBackendHeaderResult']] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 post_logout_state: Optional[str] = None,
                 read_timeout_in_seconds: Optional[float] = None,
                 routing_backends: Optional[Sequence['outputs.GetDeploymentSpecificationRouteBackendRoutingBackendResult']] = None,
                 selection_sources: Optional[Sequence['outputs.GetDeploymentSpecificationRouteBackendSelectionSourceResult']] = None,
                 send_timeout_in_seconds: Optional[float] = None,
                 status: Optional[int] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        if allowed_post_logout_uris is not None:
            pulumi.set(__self__, "allowed_post_logout_uris", allowed_post_logout_uris)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if connect_timeout_in_seconds is not None:
            pulumi.set(__self__, "connect_timeout_in_seconds", connect_timeout_in_seconds)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if post_logout_state is not None:
            pulumi.set(__self__, "post_logout_state", post_logout_state)
        if read_timeout_in_seconds is not None:
            pulumi.set(__self__, "read_timeout_in_seconds", read_timeout_in_seconds)
        if routing_backends is not None:
            pulumi.set(__self__, "routing_backends", routing_backends)
        if selection_sources is not None:
            pulumi.set(__self__, "selection_sources", selection_sources)
        if send_timeout_in_seconds is not None:
            pulumi.set(__self__, "send_timeout_in_seconds", send_timeout_in_seconds)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="allowedPostLogoutUris")
    def allowed_post_logout_uris(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_post_logout_uris")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="connectTimeoutInSeconds")
    def connect_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "connect_timeout_in_seconds")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteBackendHeaderResult']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="postLogoutState")
    def post_logout_state(self) -> Optional[str]:
        return pulumi.get(self, "post_logout_state")

    @property
    @pulumi.getter(name="readTimeoutInSeconds")
    def read_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "read_timeout_in_seconds")

    @property
    @pulumi.getter(name="routingBackends")
    def routing_backends(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteBackendRoutingBackendResult']]:
        return pulumi.get(self, "routing_backends")

    @property
    @pulumi.getter(name="selectionSources")
    def selection_sources(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteBackendSelectionSourceResult']]:
        return pulumi.get(self, "selection_sources")

    @property
    @pulumi.getter(name="sendTimeoutInSeconds")
    def send_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "send_timeout_in_seconds")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDeploymentSpecificationRouteBackendHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentSpecificationRouteBackendRoutingBackendResult(dict):
    def __init__(__self__, *,
                 backends: Optional[Sequence['outputs.GetDeploymentSpecificationRouteBackendRoutingBackendBackendResult']] = None,
                 keys: Optional[Sequence['outputs.GetDeploymentSpecificationRouteBackendRoutingBackendKeyResult']] = None):
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)

    @property
    @pulumi.getter
    def backends(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteBackendRoutingBackendBackendResult']]:
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteBackendRoutingBackendKeyResult']]:
        return pulumi.get(self, "keys")


@pulumi.output_type
class GetDeploymentSpecificationRouteBackendRoutingBackendBackendResult(dict):
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 connect_timeout_in_seconds: Optional[float] = None,
                 function_id: Optional[str] = None,
                 headers: Optional[Sequence['outputs.GetDeploymentSpecificationRouteBackendRoutingBackendBackendHeaderResult']] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 read_timeout_in_seconds: Optional[float] = None,
                 send_timeout_in_seconds: Optional[float] = None,
                 status: Optional[int] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if connect_timeout_in_seconds is not None:
            pulumi.set(__self__, "connect_timeout_in_seconds", connect_timeout_in_seconds)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if read_timeout_in_seconds is not None:
            pulumi.set(__self__, "read_timeout_in_seconds", read_timeout_in_seconds)
        if send_timeout_in_seconds is not None:
            pulumi.set(__self__, "send_timeout_in_seconds", send_timeout_in_seconds)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="connectTimeoutInSeconds")
    def connect_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "connect_timeout_in_seconds")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteBackendRoutingBackendBackendHeaderResult']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="readTimeoutInSeconds")
    def read_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "read_timeout_in_seconds")

    @property
    @pulumi.getter(name="sendTimeoutInSeconds")
    def send_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "send_timeout_in_seconds")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDeploymentSpecificationRouteBackendRoutingBackendBackendHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentSpecificationRouteBackendRoutingBackendKeyResult(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentSpecificationRouteBackendSelectionSourceResult(dict):
    def __init__(__self__, *,
                 selector: Optional[str] = None,
                 type: Optional[str] = None):
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRouteLoggingPolicyResult(dict):
    def __init__(__self__, *,
                 access_logs: Optional[Sequence['outputs.GetDeploymentSpecificationRouteLoggingPolicyAccessLogResult']] = None,
                 execution_logs: Optional[Sequence['outputs.GetDeploymentSpecificationRouteLoggingPolicyExecutionLogResult']] = None):
        if access_logs is not None:
            pulumi.set(__self__, "access_logs", access_logs)
        if execution_logs is not None:
            pulumi.set(__self__, "execution_logs", execution_logs)

    @property
    @pulumi.getter(name="accessLogs")
    def access_logs(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteLoggingPolicyAccessLogResult']]:
        return pulumi.get(self, "access_logs")

    @property
    @pulumi.getter(name="executionLogs")
    def execution_logs(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteLoggingPolicyExecutionLogResult']]:
        return pulumi.get(self, "execution_logs")


@pulumi.output_type
class GetDeploymentSpecificationRouteLoggingPolicyAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetDeploymentSpecificationRouteLoggingPolicyExecutionLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 log_level: Optional[str] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyResult(dict):
    def __init__(__self__, *,
                 authorizations: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyAuthorizationResult']] = None,
                 body_validations: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyBodyValidationResult']] = None,
                 cors: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyCorResult']] = None,
                 header_transformations: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationResult']] = None,
                 header_validations: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderValidationResult']] = None,
                 query_parameter_transformations: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationResult']] = None,
                 query_parameter_validations: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterValidationResult']] = None,
                 response_cache_lookups: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyResponseCacheLookupResult']] = None):
        if authorizations is not None:
            pulumi.set(__self__, "authorizations", authorizations)
        if body_validations is not None:
            pulumi.set(__self__, "body_validations", body_validations)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if header_transformations is not None:
            pulumi.set(__self__, "header_transformations", header_transformations)
        if header_validations is not None:
            pulumi.set(__self__, "header_validations", header_validations)
        if query_parameter_transformations is not None:
            pulumi.set(__self__, "query_parameter_transformations", query_parameter_transformations)
        if query_parameter_validations is not None:
            pulumi.set(__self__, "query_parameter_validations", query_parameter_validations)
        if response_cache_lookups is not None:
            pulumi.set(__self__, "response_cache_lookups", response_cache_lookups)

    @property
    @pulumi.getter
    def authorizations(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyAuthorizationResult']]:
        return pulumi.get(self, "authorizations")

    @property
    @pulumi.getter(name="bodyValidations")
    def body_validations(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyBodyValidationResult']]:
        return pulumi.get(self, "body_validations")

    @property
    @pulumi.getter
    def cors(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyCorResult']]:
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationResult']]:
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="headerValidations")
    def header_validations(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderValidationResult']]:
        return pulumi.get(self, "header_validations")

    @property
    @pulumi.getter(name="queryParameterTransformations")
    def query_parameter_transformations(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationResult']]:
        return pulumi.get(self, "query_parameter_transformations")

    @property
    @pulumi.getter(name="queryParameterValidations")
    def query_parameter_validations(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterValidationResult']]:
        return pulumi.get(self, "query_parameter_validations")

    @property
    @pulumi.getter(name="responseCacheLookups")
    def response_cache_lookups(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyResponseCacheLookupResult']]:
        return pulumi.get(self, "response_cache_lookups")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyAuthorizationResult(dict):
    def __init__(__self__, *,
                 allowed_scopes: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if allowed_scopes is not None:
            pulumi.set(__self__, "allowed_scopes", allowed_scopes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowedScopes")
    def allowed_scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_scopes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyBodyValidationResult(dict):
    def __init__(__self__, *,
                 contents: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyBodyValidationContentResult']] = None,
                 required: Optional[bool] = None,
                 validation_mode: Optional[str] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if validation_mode is not None:
            pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyBodyValidationContentResult']]:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[str]:
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyBodyValidationContentResult(dict):
    def __init__(__self__, *,
                 media_type: Optional[str] = None,
                 validation_type: Optional[str] = None):
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)
        if validation_type is not None:
            pulumi.set(__self__, "validation_type", validation_type)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[str]:
        return pulumi.get(self, "media_type")

    @property
    @pulumi.getter(name="validationType")
    def validation_type(self) -> Optional[str]:
        return pulumi.get(self, "validation_type")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyCorResult(dict):
    def __init__(__self__, *,
                 allowed_headers: Optional[Sequence[str]] = None,
                 allowed_methods: Optional[Sequence[str]] = None,
                 allowed_origins: Optional[Sequence[str]] = None,
                 exposed_headers: Optional[Sequence[str]] = None,
                 is_allow_credentials_enabled: Optional[bool] = None,
                 max_age_in_seconds: Optional[int] = None):
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if allowed_origins is not None:
            pulumi.set(__self__, "allowed_origins", allowed_origins)
        if exposed_headers is not None:
            pulumi.set(__self__, "exposed_headers", exposed_headers)
        if is_allow_credentials_enabled is not None:
            pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        if max_age_in_seconds is not None:
            pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationResult(dict):
    def __init__(__self__, *,
                 filter_headers: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderResult']] = None,
                 rename_headers: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderResult']] = None,
                 set_headers: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderResult']] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderResult']]:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderResult']]:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderResult']]:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItemResult']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItemResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItemResult(dict):
    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyHeaderValidationResult(dict):
    def __init__(__self__, *,
                 headers: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderValidationHeaderResult']] = None,
                 validation_mode: Optional[str] = None):
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if validation_mode is not None:
            pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyHeaderValidationHeaderResult']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[str]:
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyHeaderValidationHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 required: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationResult(dict):
    def __init__(__self__, *,
                 filter_query_parameters: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterResult']] = None,
                 rename_query_parameters: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterResult']] = None,
                 set_query_parameters: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterResult']] = None):
        if filter_query_parameters is not None:
            pulumi.set(__self__, "filter_query_parameters", filter_query_parameters)
        if rename_query_parameters is not None:
            pulumi.set(__self__, "rename_query_parameters", rename_query_parameters)
        if set_query_parameters is not None:
            pulumi.set(__self__, "set_query_parameters", set_query_parameters)

    @property
    @pulumi.getter(name="filterQueryParameters")
    def filter_query_parameters(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterResult']]:
        return pulumi.get(self, "filter_query_parameters")

    @property
    @pulumi.getter(name="renameQueryParameters")
    def rename_query_parameters(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterResult']]:
        return pulumi.get(self, "rename_query_parameters")

    @property
    @pulumi.getter(name="setQueryParameters")
    def set_query_parameters(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterResult']]:
        return pulumi.get(self, "set_query_parameters")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItemResult']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItemResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItemResult(dict):
    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyQueryParameterValidationResult(dict):
    def __init__(__self__, *,
                 parameters: Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterValidationParameterResult']] = None,
                 validation_mode: Optional[str] = None):
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if validation_mode is not None:
            pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteRequestPolicyQueryParameterValidationParameterResult']]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[str]:
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyQueryParameterValidationParameterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 required: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")


@pulumi.output_type
class GetDeploymentSpecificationRouteRequestPolicyResponseCacheLookupResult(dict):
    def __init__(__self__, *,
                 cache_key_additions: Optional[Sequence[str]] = None,
                 is_enabled: Optional[bool] = None,
                 is_private_caching_enabled: Optional[bool] = None,
                 type: Optional[str] = None):
        if cache_key_additions is not None:
            pulumi.set(__self__, "cache_key_additions", cache_key_additions)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_private_caching_enabled is not None:
            pulumi.set(__self__, "is_private_caching_enabled", is_private_caching_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cacheKeyAdditions")
    def cache_key_additions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cache_key_additions")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isPrivateCachingEnabled")
    def is_private_caching_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_private_caching_enabled")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePolicyResult(dict):
    def __init__(__self__, *,
                 header_transformations: Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationResult']] = None,
                 response_cache_stores: Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyResponseCacheStoreResult']] = None):
        if header_transformations is not None:
            pulumi.set(__self__, "header_transformations", header_transformations)
        if response_cache_stores is not None:
            pulumi.set(__self__, "response_cache_stores", response_cache_stores)

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationResult']]:
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="responseCacheStores")
    def response_cache_stores(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyResponseCacheStoreResult']]:
        return pulumi.get(self, "response_cache_stores")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationResult(dict):
    def __init__(__self__, *,
                 filter_headers: Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderResult']] = None,
                 rename_headers: Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderResult']] = None,
                 set_headers: Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderResult']] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderResult']]:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderResult']]:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderResult']]:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItemResult']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItemResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItemResult(dict):
    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentSpecificationRouteResponsePolicyResponseCacheStoreResult(dict):
    def __init__(__self__, *,
                 time_to_live_in_seconds: Optional[int] = None,
                 type: Optional[str] = None):
        if time_to_live_in_seconds is not None:
            pulumi.set(__self__, "time_to_live_in_seconds", time_to_live_in_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToLiveInSeconds")
    def time_to_live_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "time_to_live_in_seconds")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 gateway_id: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 path_prefix: Optional[str] = None,
                 specifications: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if path_prefix is not None:
            pulumi.set(__self__, "path_prefix", path_prefix)
        if specifications is not None:
            pulumi.set(__self__, "specifications", specifications)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="pathPrefix")
    def path_prefix(self) -> Optional[str]:
        return pulumi.get(self, "path_prefix")

    @property
    @pulumi.getter
    def specifications(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationResult']]:
        return pulumi.get(self, "specifications")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationResult(dict):
    def __init__(__self__, *,
                 logging_policies: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationLoggingPolicyResult']] = None,
                 request_policies: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyResult']] = None,
                 routes: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResult']] = None):
        if logging_policies is not None:
            pulumi.set(__self__, "logging_policies", logging_policies)
        if request_policies is not None:
            pulumi.set(__self__, "request_policies", request_policies)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationLoggingPolicyResult']]:
        return pulumi.get(self, "logging_policies")

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyResult']]:
        return pulumi.get(self, "request_policies")

    @property
    @pulumi.getter
    def routes(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResult']]:
        return pulumi.get(self, "routes")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationLoggingPolicyResult(dict):
    def __init__(__self__, *,
                 access_logs: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationLoggingPolicyAccessLogResult']] = None,
                 execution_logs: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationLoggingPolicyExecutionLogResult']] = None):
        if access_logs is not None:
            pulumi.set(__self__, "access_logs", access_logs)
        if execution_logs is not None:
            pulumi.set(__self__, "execution_logs", execution_logs)

    @property
    @pulumi.getter(name="accessLogs")
    def access_logs(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationLoggingPolicyAccessLogResult']]:
        return pulumi.get(self, "access_logs")

    @property
    @pulumi.getter(name="executionLogs")
    def execution_logs(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationLoggingPolicyExecutionLogResult']]:
        return pulumi.get(self, "execution_logs")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationLoggingPolicyAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationLoggingPolicyExecutionLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 log_level: Optional[str] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyResult(dict):
    def __init__(__self__, *,
                 authentications: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationResult']] = None,
                 cors: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyCorResult']] = None,
                 dynamic_authentications: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationResult']] = None,
                 mutual_tls: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyMutualTlResult']] = None,
                 rate_limitings: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyRateLimitingResult']] = None,
                 usage_plans: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyUsagePlanResult']] = None):
        if authentications is not None:
            pulumi.set(__self__, "authentications", authentications)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if dynamic_authentications is not None:
            pulumi.set(__self__, "dynamic_authentications", dynamic_authentications)
        if mutual_tls is not None:
            pulumi.set(__self__, "mutual_tls", mutual_tls)
        if rate_limitings is not None:
            pulumi.set(__self__, "rate_limitings", rate_limitings)
        if usage_plans is not None:
            pulumi.set(__self__, "usage_plans", usage_plans)

    @property
    @pulumi.getter
    def authentications(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationResult']]:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter
    def cors(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyCorResult']]:
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="dynamicAuthentications")
    def dynamic_authentications(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationResult']]:
        return pulumi.get(self, "dynamic_authentications")

    @property
    @pulumi.getter(name="mutualTls")
    def mutual_tls(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyMutualTlResult']]:
        return pulumi.get(self, "mutual_tls")

    @property
    @pulumi.getter(name="rateLimitings")
    def rate_limitings(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyRateLimitingResult']]:
        return pulumi.get(self, "rate_limitings")

    @property
    @pulumi.getter(name="usagePlans")
    def usage_plans(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyUsagePlanResult']]:
        return pulumi.get(self, "usage_plans")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationResult(dict):
    def __init__(__self__, *,
                 audiences: Optional[Sequence[str]] = None,
                 cache_keys: Optional[Sequence[str]] = None,
                 function_id: Optional[str] = None,
                 is_anonymous_access_allowed: Optional[bool] = None,
                 issuers: Optional[Sequence[str]] = None,
                 max_clock_skew_in_seconds: Optional[float] = None,
                 parameters: Optional[Mapping[str, Any]] = None,
                 public_keys: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKeyResult']] = None,
                 token_auth_scheme: Optional[str] = None,
                 token_header: Optional[str] = None,
                 token_query_param: Optional[str] = None,
                 type: Optional[str] = None,
                 validation_failure_policies: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResult']] = None,
                 validation_policies: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyResult']] = None,
                 verify_claims: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationVerifyClaimResult']] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if cache_keys is not None:
            pulumi.set(__self__, "cache_keys", cache_keys)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if is_anonymous_access_allowed is not None:
            pulumi.set(__self__, "is_anonymous_access_allowed", is_anonymous_access_allowed)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if max_clock_skew_in_seconds is not None:
            pulumi.set(__self__, "max_clock_skew_in_seconds", max_clock_skew_in_seconds)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)
        if token_auth_scheme is not None:
            pulumi.set(__self__, "token_auth_scheme", token_auth_scheme)
        if token_header is not None:
            pulumi.set(__self__, "token_header", token_header)
        if token_query_param is not None:
            pulumi.set(__self__, "token_query_param", token_query_param)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if validation_failure_policies is not None:
            pulumi.set(__self__, "validation_failure_policies", validation_failure_policies)
        if validation_policies is not None:
            pulumi.set(__self__, "validation_policies", validation_policies)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="cacheKeys")
    def cache_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cache_keys")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_anonymous_access_allowed")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="maxClockSkewInSeconds")
    def max_clock_skew_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "max_clock_skew_in_seconds")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKeyResult']]:
        return pulumi.get(self, "public_keys")

    @property
    @pulumi.getter(name="tokenAuthScheme")
    def token_auth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "token_auth_scheme")

    @property
    @pulumi.getter(name="tokenHeader")
    def token_header(self) -> Optional[str]:
        return pulumi.get(self, "token_header")

    @property
    @pulumi.getter(name="tokenQueryParam")
    def token_query_param(self) -> Optional[str]:
        return pulumi.get(self, "token_query_param")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validationFailurePolicies")
    def validation_failure_policies(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResult']]:
        return pulumi.get(self, "validation_failure_policies")

    @property
    @pulumi.getter(name="validationPolicies")
    def validation_policies(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyResult']]:
        return pulumi.get(self, "validation_policies")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationVerifyClaimResult']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKeyResult(dict):
    def __init__(__self__, *,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKeyKeyResult']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKeyKeyResult']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationPublicKeyKeyResult(dict):
    def __init__(__self__, *,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 format: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResult(dict):
    def __init__(__self__, *,
                 client_details: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetailResult']] = None,
                 fallback_redirect_path: Optional[str] = None,
                 logout_path: Optional[str] = None,
                 max_expiry_duration_in_hours: Optional[int] = None,
                 response_code: Optional[str] = None,
                 response_header_transformations: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationResult']] = None,
                 response_message: Optional[str] = None,
                 response_type: Optional[str] = None,
                 scopes: Optional[Sequence[str]] = None,
                 source_uri_details: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetailResult']] = None,
                 type: Optional[str] = None,
                 use_cookies_for_intermediate_steps: Optional[bool] = None,
                 use_cookies_for_session: Optional[bool] = None,
                 use_pkce: Optional[bool] = None):
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if fallback_redirect_path is not None:
            pulumi.set(__self__, "fallback_redirect_path", fallback_redirect_path)
        if logout_path is not None:
            pulumi.set(__self__, "logout_path", logout_path)
        if max_expiry_duration_in_hours is not None:
            pulumi.set(__self__, "max_expiry_duration_in_hours", max_expiry_duration_in_hours)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if response_header_transformations is not None:
            pulumi.set(__self__, "response_header_transformations", response_header_transformations)
        if response_message is not None:
            pulumi.set(__self__, "response_message", response_message)
        if response_type is not None:
            pulumi.set(__self__, "response_type", response_type)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_cookies_for_intermediate_steps is not None:
            pulumi.set(__self__, "use_cookies_for_intermediate_steps", use_cookies_for_intermediate_steps)
        if use_cookies_for_session is not None:
            pulumi.set(__self__, "use_cookies_for_session", use_cookies_for_session)
        if use_pkce is not None:
            pulumi.set(__self__, "use_pkce", use_pkce)

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetailResult']]:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="fallbackRedirectPath")
    def fallback_redirect_path(self) -> Optional[str]:
        return pulumi.get(self, "fallback_redirect_path")

    @property
    @pulumi.getter(name="logoutPath")
    def logout_path(self) -> Optional[str]:
        return pulumi.get(self, "logout_path")

    @property
    @pulumi.getter(name="maxExpiryDurationInHours")
    def max_expiry_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_expiry_duration_in_hours")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[str]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="responseHeaderTransformations")
    def response_header_transformations(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationResult']]:
        return pulumi.get(self, "response_header_transformations")

    @property
    @pulumi.getter(name="responseMessage")
    def response_message(self) -> Optional[str]:
        return pulumi.get(self, "response_message")

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[str]:
        return pulumi.get(self, "response_type")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetailResult']]:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useCookiesForIntermediateSteps")
    def use_cookies_for_intermediate_steps(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_intermediate_steps")

    @property
    @pulumi.getter(name="useCookiesForSession")
    def use_cookies_for_session(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_session")

    @property
    @pulumi.getter(name="usePkce")
    def use_pkce(self) -> Optional[bool]:
        return pulumi.get(self, "use_pkce")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyClientDetailResult(dict):
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None,
                 type: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationResult(dict):
    def __init__(__self__, *,
                 filter_headers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult']] = None,
                 rename_headers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult']] = None,
                 set_headers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderResult']] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult']]:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult']]:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderResult']]:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult(dict):
    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationFailurePolicySourceUriDetailResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyResult(dict):
    def __init__(__self__, *,
                 additional_validation_policies: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyResult']] = None,
                 client_details: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyClientDetailResult']] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyKeyResult']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 source_uri_details: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetailResult']] = None,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if additional_validation_policies is not None:
            pulumi.set(__self__, "additional_validation_policies", additional_validation_policies)
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="additionalValidationPolicies")
    def additional_validation_policies(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyResult']]:
        return pulumi.get(self, "additional_validation_policies")

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyClientDetailResult']]:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyKeyResult']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetailResult']]:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyResult(dict):
    def __init__(__self__, *,
                 audiences: Optional[Sequence[str]] = None,
                 issuers: Optional[Sequence[str]] = None,
                 verify_claims: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimResult']] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimResult']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyAdditionalValidationPolicyVerifyClaimResult(dict):
    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyClientDetailResult(dict):
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None,
                 type: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicyKeyResult(dict):
    def __init__(__self__, *,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 format: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationValidationPolicySourceUriDetailResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyAuthenticationVerifyClaimResult(dict):
    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyCorResult(dict):
    def __init__(__self__, *,
                 allowed_headers: Optional[Sequence[str]] = None,
                 allowed_methods: Optional[Sequence[str]] = None,
                 allowed_origins: Optional[Sequence[str]] = None,
                 exposed_headers: Optional[Sequence[str]] = None,
                 is_allow_credentials_enabled: Optional[bool] = None,
                 max_age_in_seconds: Optional[int] = None):
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if allowed_origins is not None:
            pulumi.set(__self__, "allowed_origins", allowed_origins)
        if exposed_headers is not None:
            pulumi.set(__self__, "exposed_headers", exposed_headers)
        if is_allow_credentials_enabled is not None:
            pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        if max_age_in_seconds is not None:
            pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationResult(dict):
    def __init__(__self__, *,
                 authentication_servers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerResult']] = None,
                 selection_sources: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationSelectionSourceResult']] = None):
        if authentication_servers is not None:
            pulumi.set(__self__, "authentication_servers", authentication_servers)
        if selection_sources is not None:
            pulumi.set(__self__, "selection_sources", selection_sources)

    @property
    @pulumi.getter(name="authenticationServers")
    def authentication_servers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerResult']]:
        return pulumi.get(self, "authentication_servers")

    @property
    @pulumi.getter(name="selectionSources")
    def selection_sources(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationSelectionSourceResult']]:
        return pulumi.get(self, "selection_sources")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerResult(dict):
    def __init__(__self__, *,
                 authentication_server_details: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailResult']] = None,
                 keys: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKeyResult']] = None):
        if authentication_server_details is not None:
            pulumi.set(__self__, "authentication_server_details", authentication_server_details)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)

    @property
    @pulumi.getter(name="authenticationServerDetails")
    def authentication_server_details(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailResult']]:
        return pulumi.get(self, "authentication_server_details")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKeyResult']]:
        return pulumi.get(self, "keys")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailResult(dict):
    def __init__(__self__, *,
                 audiences: Optional[Sequence[str]] = None,
                 cache_keys: Optional[Sequence[str]] = None,
                 function_id: Optional[str] = None,
                 is_anonymous_access_allowed: Optional[bool] = None,
                 issuers: Optional[Sequence[str]] = None,
                 max_clock_skew_in_seconds: Optional[float] = None,
                 parameters: Optional[Mapping[str, Any]] = None,
                 public_keys: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyResult']] = None,
                 token_auth_scheme: Optional[str] = None,
                 token_header: Optional[str] = None,
                 token_query_param: Optional[str] = None,
                 type: Optional[str] = None,
                 validation_failure_policies: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResult']] = None,
                 validation_policies: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyResult']] = None,
                 verify_claims: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimResult']] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if cache_keys is not None:
            pulumi.set(__self__, "cache_keys", cache_keys)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if is_anonymous_access_allowed is not None:
            pulumi.set(__self__, "is_anonymous_access_allowed", is_anonymous_access_allowed)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if max_clock_skew_in_seconds is not None:
            pulumi.set(__self__, "max_clock_skew_in_seconds", max_clock_skew_in_seconds)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)
        if token_auth_scheme is not None:
            pulumi.set(__self__, "token_auth_scheme", token_auth_scheme)
        if token_header is not None:
            pulumi.set(__self__, "token_header", token_header)
        if token_query_param is not None:
            pulumi.set(__self__, "token_query_param", token_query_param)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if validation_failure_policies is not None:
            pulumi.set(__self__, "validation_failure_policies", validation_failure_policies)
        if validation_policies is not None:
            pulumi.set(__self__, "validation_policies", validation_policies)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter(name="cacheKeys")
    def cache_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cache_keys")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_anonymous_access_allowed")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="maxClockSkewInSeconds")
    def max_clock_skew_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "max_clock_skew_in_seconds")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyResult']]:
        return pulumi.get(self, "public_keys")

    @property
    @pulumi.getter(name="tokenAuthScheme")
    def token_auth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "token_auth_scheme")

    @property
    @pulumi.getter(name="tokenHeader")
    def token_header(self) -> Optional[str]:
        return pulumi.get(self, "token_header")

    @property
    @pulumi.getter(name="tokenQueryParam")
    def token_query_param(self) -> Optional[str]:
        return pulumi.get(self, "token_query_param")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validationFailurePolicies")
    def validation_failure_policies(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResult']]:
        return pulumi.get(self, "validation_failure_policies")

    @property
    @pulumi.getter(name="validationPolicies")
    def validation_policies(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyResult']]:
        return pulumi.get(self, "validation_policies")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimResult']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyResult(dict):
    def __init__(__self__, *,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKeyResult']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKeyResult']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailPublicKeyKeyResult(dict):
    def __init__(__self__, *,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 format: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResult(dict):
    def __init__(__self__, *,
                 client_details: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailResult']] = None,
                 fallback_redirect_path: Optional[str] = None,
                 logout_path: Optional[str] = None,
                 max_expiry_duration_in_hours: Optional[int] = None,
                 response_code: Optional[str] = None,
                 response_header_transformations: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationResult']] = None,
                 response_message: Optional[str] = None,
                 response_type: Optional[str] = None,
                 scopes: Optional[Sequence[str]] = None,
                 source_uri_details: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailResult']] = None,
                 type: Optional[str] = None,
                 use_cookies_for_intermediate_steps: Optional[bool] = None,
                 use_cookies_for_session: Optional[bool] = None,
                 use_pkce: Optional[bool] = None):
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if fallback_redirect_path is not None:
            pulumi.set(__self__, "fallback_redirect_path", fallback_redirect_path)
        if logout_path is not None:
            pulumi.set(__self__, "logout_path", logout_path)
        if max_expiry_duration_in_hours is not None:
            pulumi.set(__self__, "max_expiry_duration_in_hours", max_expiry_duration_in_hours)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if response_header_transformations is not None:
            pulumi.set(__self__, "response_header_transformations", response_header_transformations)
        if response_message is not None:
            pulumi.set(__self__, "response_message", response_message)
        if response_type is not None:
            pulumi.set(__self__, "response_type", response_type)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_cookies_for_intermediate_steps is not None:
            pulumi.set(__self__, "use_cookies_for_intermediate_steps", use_cookies_for_intermediate_steps)
        if use_cookies_for_session is not None:
            pulumi.set(__self__, "use_cookies_for_session", use_cookies_for_session)
        if use_pkce is not None:
            pulumi.set(__self__, "use_pkce", use_pkce)

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailResult']]:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="fallbackRedirectPath")
    def fallback_redirect_path(self) -> Optional[str]:
        return pulumi.get(self, "fallback_redirect_path")

    @property
    @pulumi.getter(name="logoutPath")
    def logout_path(self) -> Optional[str]:
        return pulumi.get(self, "logout_path")

    @property
    @pulumi.getter(name="maxExpiryDurationInHours")
    def max_expiry_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_expiry_duration_in_hours")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[str]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="responseHeaderTransformations")
    def response_header_transformations(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationResult']]:
        return pulumi.get(self, "response_header_transformations")

    @property
    @pulumi.getter(name="responseMessage")
    def response_message(self) -> Optional[str]:
        return pulumi.get(self, "response_message")

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[str]:
        return pulumi.get(self, "response_type")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailResult']]:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useCookiesForIntermediateSteps")
    def use_cookies_for_intermediate_steps(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_intermediate_steps")

    @property
    @pulumi.getter(name="useCookiesForSession")
    def use_cookies_for_session(self) -> Optional[bool]:
        return pulumi.get(self, "use_cookies_for_session")

    @property
    @pulumi.getter(name="usePkce")
    def use_pkce(self) -> Optional[bool]:
        return pulumi.get(self, "use_pkce")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyClientDetailResult(dict):
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None,
                 type: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationResult(dict):
    def __init__(__self__, *,
                 filter_headers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult']] = None,
                 rename_headers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult']] = None,
                 set_headers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderResult']] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult']]:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult']]:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderResult']]:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationFilterHeaderItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationRenameHeaderItemResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicyResponseHeaderTransformationSetHeaderItemResult(dict):
    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationFailurePolicySourceUriDetailResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyResult(dict):
    def __init__(__self__, *,
                 additional_validation_policies: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyResult']] = None,
                 client_details: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailResult']] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 keys: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyResult']] = None,
                 max_cache_duration_in_hours: Optional[int] = None,
                 source_uri_details: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailResult']] = None,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if additional_validation_policies is not None:
            pulumi.set(__self__, "additional_validation_policies", additional_validation_policies)
        if client_details is not None:
            pulumi.set(__self__, "client_details", client_details)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if max_cache_duration_in_hours is not None:
            pulumi.set(__self__, "max_cache_duration_in_hours", max_cache_duration_in_hours)
        if source_uri_details is not None:
            pulumi.set(__self__, "source_uri_details", source_uri_details)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="additionalValidationPolicies")
    def additional_validation_policies(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyResult']]:
        return pulumi.get(self, "additional_validation_policies")

    @property
    @pulumi.getter(name="clientDetails")
    def client_details(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailResult']]:
        return pulumi.get(self, "client_details")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyResult']]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="maxCacheDurationInHours")
    def max_cache_duration_in_hours(self) -> Optional[int]:
        return pulumi.get(self, "max_cache_duration_in_hours")

    @property
    @pulumi.getter(name="sourceUriDetails")
    def source_uri_details(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailResult']]:
        return pulumi.get(self, "source_uri_details")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyResult(dict):
    def __init__(__self__, *,
                 audiences: Optional[Sequence[str]] = None,
                 issuers: Optional[Sequence[str]] = None,
                 verify_claims: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimResult']] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if issuers is not None:
            pulumi.set(__self__, "issuers", issuers)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audiences")

    @property
    @pulumi.getter
    def issuers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "issuers")

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimResult']]:
        return pulumi.get(self, "verify_claims")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyAdditionalValidationPolicyVerifyClaimResult(dict):
    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyClientDetailResult(dict):
    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 client_secret_id: Optional[str] = None,
                 client_secret_version_number: Optional[str] = None,
                 type: Optional[str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_id is not None:
            pulumi.set(__self__, "client_secret_id", client_secret_id)
        if client_secret_version_number is not None:
            pulumi.set(__self__, "client_secret_version_number", client_secret_version_number)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretId")
    def client_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_id")

    @property
    @pulumi.getter(name="clientSecretVersionNumber")
    def client_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "client_secret_version_number")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicyKeyResult(dict):
    def __init__(__self__, *,
                 alg: Optional[str] = None,
                 e: Optional[str] = None,
                 format: Optional[str] = None,
                 key: Optional[str] = None,
                 key_ops: Optional[Sequence[str]] = None,
                 kid: Optional[str] = None,
                 kty: Optional[str] = None,
                 n: Optional[str] = None,
                 use: Optional[str] = None):
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if use is not None:
            pulumi.set(__self__, "use", use)

    @property
    @pulumi.getter
    def alg(self) -> Optional[str]:
        return pulumi.get(self, "alg")

    @property
    @pulumi.getter
    def e(self) -> Optional[str]:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ops")

    @property
    @pulumi.getter
    def kid(self) -> Optional[str]:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter
    def kty(self) -> Optional[str]:
        return pulumi.get(self, "kty")

    @property
    @pulumi.getter
    def n(self) -> Optional[str]:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def use(self) -> Optional[str]:
        return pulumi.get(self, "use")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailValidationPolicySourceUriDetailResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerAuthenticationServerDetailVerifyClaimResult(dict):
    def __init__(__self__, *,
                 is_required: Optional[bool] = None,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationAuthenticationServerKeyResult(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyDynamicAuthenticationSelectionSourceResult(dict):
    def __init__(__self__, *,
                 selector: Optional[str] = None,
                 type: Optional[str] = None):
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyMutualTlResult(dict):
    def __init__(__self__, *,
                 allowed_sans: Optional[Sequence[str]] = None,
                 is_verified_certificate_required: Optional[bool] = None):
        if allowed_sans is not None:
            pulumi.set(__self__, "allowed_sans", allowed_sans)
        if is_verified_certificate_required is not None:
            pulumi.set(__self__, "is_verified_certificate_required", is_verified_certificate_required)

    @property
    @pulumi.getter(name="allowedSans")
    def allowed_sans(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_sans")

    @property
    @pulumi.getter(name="isVerifiedCertificateRequired")
    def is_verified_certificate_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_verified_certificate_required")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyRateLimitingResult(dict):
    def __init__(__self__, *,
                 rate_in_requests_per_second: Optional[int] = None,
                 rate_key: Optional[str] = None):
        if rate_in_requests_per_second is not None:
            pulumi.set(__self__, "rate_in_requests_per_second", rate_in_requests_per_second)
        if rate_key is not None:
            pulumi.set(__self__, "rate_key", rate_key)

    @property
    @pulumi.getter(name="rateInRequestsPerSecond")
    def rate_in_requests_per_second(self) -> Optional[int]:
        return pulumi.get(self, "rate_in_requests_per_second")

    @property
    @pulumi.getter(name="rateKey")
    def rate_key(self) -> Optional[str]:
        return pulumi.get(self, "rate_key")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRequestPolicyUsagePlanResult(dict):
    def __init__(__self__, *,
                 token_locations: Optional[Sequence[str]] = None):
        if token_locations is not None:
            pulumi.set(__self__, "token_locations", token_locations)

    @property
    @pulumi.getter(name="tokenLocations")
    def token_locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "token_locations")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResult(dict):
    def __init__(__self__, *,
                 backends: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendResult']] = None,
                 logging_policies: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyResult']] = None,
                 methods: Optional[Sequence[str]] = None,
                 path: Optional[str] = None,
                 request_policies: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyResult']] = None,
                 response_policies: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyResult']] = None):
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if logging_policies is not None:
            pulumi.set(__self__, "logging_policies", logging_policies)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if request_policies is not None:
            pulumi.set(__self__, "request_policies", request_policies)
        if response_policies is not None:
            pulumi.set(__self__, "response_policies", response_policies)

    @property
    @pulumi.getter
    def backends(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendResult']]:
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter(name="loggingPolicies")
    def logging_policies(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyResult']]:
        return pulumi.get(self, "logging_policies")

    @property
    @pulumi.getter
    def methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="requestPolicies")
    def request_policies(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyResult']]:
        return pulumi.get(self, "request_policies")

    @property
    @pulumi.getter(name="responsePolicies")
    def response_policies(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyResult']]:
        return pulumi.get(self, "response_policies")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteBackendResult(dict):
    def __init__(__self__, *,
                 allowed_post_logout_uris: Optional[Sequence[str]] = None,
                 body: Optional[str] = None,
                 connect_timeout_in_seconds: Optional[float] = None,
                 function_id: Optional[str] = None,
                 headers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendHeaderResult']] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 post_logout_state: Optional[str] = None,
                 read_timeout_in_seconds: Optional[float] = None,
                 routing_backends: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendResult']] = None,
                 selection_sources: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendSelectionSourceResult']] = None,
                 send_timeout_in_seconds: Optional[float] = None,
                 status: Optional[int] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        if allowed_post_logout_uris is not None:
            pulumi.set(__self__, "allowed_post_logout_uris", allowed_post_logout_uris)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if connect_timeout_in_seconds is not None:
            pulumi.set(__self__, "connect_timeout_in_seconds", connect_timeout_in_seconds)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if post_logout_state is not None:
            pulumi.set(__self__, "post_logout_state", post_logout_state)
        if read_timeout_in_seconds is not None:
            pulumi.set(__self__, "read_timeout_in_seconds", read_timeout_in_seconds)
        if routing_backends is not None:
            pulumi.set(__self__, "routing_backends", routing_backends)
        if selection_sources is not None:
            pulumi.set(__self__, "selection_sources", selection_sources)
        if send_timeout_in_seconds is not None:
            pulumi.set(__self__, "send_timeout_in_seconds", send_timeout_in_seconds)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="allowedPostLogoutUris")
    def allowed_post_logout_uris(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_post_logout_uris")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="connectTimeoutInSeconds")
    def connect_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "connect_timeout_in_seconds")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendHeaderResult']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="postLogoutState")
    def post_logout_state(self) -> Optional[str]:
        return pulumi.get(self, "post_logout_state")

    @property
    @pulumi.getter(name="readTimeoutInSeconds")
    def read_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "read_timeout_in_seconds")

    @property
    @pulumi.getter(name="routingBackends")
    def routing_backends(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendResult']]:
        return pulumi.get(self, "routing_backends")

    @property
    @pulumi.getter(name="selectionSources")
    def selection_sources(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendSelectionSourceResult']]:
        return pulumi.get(self, "selection_sources")

    @property
    @pulumi.getter(name="sendTimeoutInSeconds")
    def send_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "send_timeout_in_seconds")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteBackendHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendResult(dict):
    def __init__(__self__, *,
                 backends: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendBackendResult']] = None,
                 keys: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendKeyResult']] = None):
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)

    @property
    @pulumi.getter
    def backends(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendBackendResult']]:
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendKeyResult']]:
        return pulumi.get(self, "keys")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendBackendResult(dict):
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 connect_timeout_in_seconds: Optional[float] = None,
                 function_id: Optional[str] = None,
                 headers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendBackendHeaderResult']] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 read_timeout_in_seconds: Optional[float] = None,
                 send_timeout_in_seconds: Optional[float] = None,
                 status: Optional[int] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if connect_timeout_in_seconds is not None:
            pulumi.set(__self__, "connect_timeout_in_seconds", connect_timeout_in_seconds)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if read_timeout_in_seconds is not None:
            pulumi.set(__self__, "read_timeout_in_seconds", read_timeout_in_seconds)
        if send_timeout_in_seconds is not None:
            pulumi.set(__self__, "send_timeout_in_seconds", send_timeout_in_seconds)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="connectTimeoutInSeconds")
    def connect_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "connect_timeout_in_seconds")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendBackendHeaderResult']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="readTimeoutInSeconds")
    def read_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "read_timeout_in_seconds")

    @property
    @pulumi.getter(name="sendTimeoutInSeconds")
    def send_timeout_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "send_timeout_in_seconds")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendBackendHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteBackendRoutingBackendKeyResult(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteBackendSelectionSourceResult(dict):
    def __init__(__self__, *,
                 selector: Optional[str] = None,
                 type: Optional[str] = None):
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyResult(dict):
    def __init__(__self__, *,
                 access_logs: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyAccessLogResult']] = None,
                 execution_logs: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyExecutionLogResult']] = None):
        if access_logs is not None:
            pulumi.set(__self__, "access_logs", access_logs)
        if execution_logs is not None:
            pulumi.set(__self__, "execution_logs", execution_logs)

    @property
    @pulumi.getter(name="accessLogs")
    def access_logs(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyAccessLogResult']]:
        return pulumi.get(self, "access_logs")

    @property
    @pulumi.getter(name="executionLogs")
    def execution_logs(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyExecutionLogResult']]:
        return pulumi.get(self, "execution_logs")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteLoggingPolicyExecutionLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 log_level: Optional[str] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyResult(dict):
    def __init__(__self__, *,
                 authorizations: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyAuthorizationResult']] = None,
                 body_validations: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyBodyValidationResult']] = None,
                 cors: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyCorResult']] = None,
                 header_transformations: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationResult']] = None,
                 header_validations: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderValidationResult']] = None,
                 query_parameter_transformations: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationResult']] = None,
                 query_parameter_validations: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterValidationResult']] = None,
                 response_cache_lookups: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyResponseCacheLookupResult']] = None):
        if authorizations is not None:
            pulumi.set(__self__, "authorizations", authorizations)
        if body_validations is not None:
            pulumi.set(__self__, "body_validations", body_validations)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if header_transformations is not None:
            pulumi.set(__self__, "header_transformations", header_transformations)
        if header_validations is not None:
            pulumi.set(__self__, "header_validations", header_validations)
        if query_parameter_transformations is not None:
            pulumi.set(__self__, "query_parameter_transformations", query_parameter_transformations)
        if query_parameter_validations is not None:
            pulumi.set(__self__, "query_parameter_validations", query_parameter_validations)
        if response_cache_lookups is not None:
            pulumi.set(__self__, "response_cache_lookups", response_cache_lookups)

    @property
    @pulumi.getter
    def authorizations(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyAuthorizationResult']]:
        return pulumi.get(self, "authorizations")

    @property
    @pulumi.getter(name="bodyValidations")
    def body_validations(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyBodyValidationResult']]:
        return pulumi.get(self, "body_validations")

    @property
    @pulumi.getter
    def cors(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyCorResult']]:
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationResult']]:
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="headerValidations")
    def header_validations(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderValidationResult']]:
        return pulumi.get(self, "header_validations")

    @property
    @pulumi.getter(name="queryParameterTransformations")
    def query_parameter_transformations(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationResult']]:
        return pulumi.get(self, "query_parameter_transformations")

    @property
    @pulumi.getter(name="queryParameterValidations")
    def query_parameter_validations(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterValidationResult']]:
        return pulumi.get(self, "query_parameter_validations")

    @property
    @pulumi.getter(name="responseCacheLookups")
    def response_cache_lookups(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyResponseCacheLookupResult']]:
        return pulumi.get(self, "response_cache_lookups")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyAuthorizationResult(dict):
    def __init__(__self__, *,
                 allowed_scopes: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if allowed_scopes is not None:
            pulumi.set(__self__, "allowed_scopes", allowed_scopes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowedScopes")
    def allowed_scopes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_scopes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyBodyValidationResult(dict):
    def __init__(__self__, *,
                 contents: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyBodyValidationContentResult']] = None,
                 required: Optional[bool] = None,
                 validation_mode: Optional[str] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if validation_mode is not None:
            pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyBodyValidationContentResult']]:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[str]:
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyBodyValidationContentResult(dict):
    def __init__(__self__, *,
                 media_type: Optional[str] = None,
                 validation_type: Optional[str] = None):
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)
        if validation_type is not None:
            pulumi.set(__self__, "validation_type", validation_type)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[str]:
        return pulumi.get(self, "media_type")

    @property
    @pulumi.getter(name="validationType")
    def validation_type(self) -> Optional[str]:
        return pulumi.get(self, "validation_type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyCorResult(dict):
    def __init__(__self__, *,
                 allowed_headers: Optional[Sequence[str]] = None,
                 allowed_methods: Optional[Sequence[str]] = None,
                 allowed_origins: Optional[Sequence[str]] = None,
                 exposed_headers: Optional[Sequence[str]] = None,
                 is_allow_credentials_enabled: Optional[bool] = None,
                 max_age_in_seconds: Optional[int] = None):
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if allowed_origins is not None:
            pulumi.set(__self__, "allowed_origins", allowed_origins)
        if exposed_headers is not None:
            pulumi.set(__self__, "exposed_headers", exposed_headers)
        if is_allow_credentials_enabled is not None:
            pulumi.set(__self__, "is_allow_credentials_enabled", is_allow_credentials_enabled)
        if max_age_in_seconds is not None:
            pulumi.set(__self__, "max_age_in_seconds", max_age_in_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exposed_headers")

    @property
    @pulumi.getter(name="isAllowCredentialsEnabled")
    def is_allow_credentials_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_allow_credentials_enabled")

    @property
    @pulumi.getter(name="maxAgeInSeconds")
    def max_age_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "max_age_in_seconds")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationResult(dict):
    def __init__(__self__, *,
                 filter_headers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderResult']] = None,
                 rename_headers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderResult']] = None,
                 set_headers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationSetHeaderResult']] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderResult']]:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderResult']]:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationSetHeaderResult']]:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItemResult']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationFilterHeaderItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationRenameHeaderItemResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationSetHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderTransformationSetHeaderItemResult(dict):
    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderValidationResult(dict):
    def __init__(__self__, *,
                 headers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderValidationHeaderResult']] = None,
                 validation_mode: Optional[str] = None):
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if validation_mode is not None:
            pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderValidationHeaderResult']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[str]:
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyHeaderValidationHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 required: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationResult(dict):
    def __init__(__self__, *,
                 filter_query_parameters: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterResult']] = None,
                 rename_query_parameters: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterResult']] = None,
                 set_query_parameters: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterResult']] = None):
        if filter_query_parameters is not None:
            pulumi.set(__self__, "filter_query_parameters", filter_query_parameters)
        if rename_query_parameters is not None:
            pulumi.set(__self__, "rename_query_parameters", rename_query_parameters)
        if set_query_parameters is not None:
            pulumi.set(__self__, "set_query_parameters", set_query_parameters)

    @property
    @pulumi.getter(name="filterQueryParameters")
    def filter_query_parameters(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterResult']]:
        return pulumi.get(self, "filter_query_parameters")

    @property
    @pulumi.getter(name="renameQueryParameters")
    def rename_query_parameters(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterResult']]:
        return pulumi.get(self, "rename_query_parameters")

    @property
    @pulumi.getter(name="setQueryParameters")
    def set_query_parameters(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterResult']]:
        return pulumi.get(self, "set_query_parameters")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItemResult']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationFilterQueryParameterItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationRenameQueryParameterItemResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterTransformationSetQueryParameterItemResult(dict):
    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterValidationResult(dict):
    def __init__(__self__, *,
                 parameters: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterValidationParameterResult']] = None,
                 validation_mode: Optional[str] = None):
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if validation_mode is not None:
            pulumi.set(__self__, "validation_mode", validation_mode)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterValidationParameterResult']]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[str]:
        return pulumi.get(self, "validation_mode")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyQueryParameterValidationParameterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 required: Optional[bool] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteRequestPolicyResponseCacheLookupResult(dict):
    def __init__(__self__, *,
                 cache_key_additions: Optional[Sequence[str]] = None,
                 is_enabled: Optional[bool] = None,
                 is_private_caching_enabled: Optional[bool] = None,
                 type: Optional[str] = None):
        if cache_key_additions is not None:
            pulumi.set(__self__, "cache_key_additions", cache_key_additions)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_private_caching_enabled is not None:
            pulumi.set(__self__, "is_private_caching_enabled", is_private_caching_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cacheKeyAdditions")
    def cache_key_additions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cache_key_additions")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isPrivateCachingEnabled")
    def is_private_caching_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_private_caching_enabled")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyResult(dict):
    def __init__(__self__, *,
                 header_transformations: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationResult']] = None,
                 response_cache_stores: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyResponseCacheStoreResult']] = None):
        if header_transformations is not None:
            pulumi.set(__self__, "header_transformations", header_transformations)
        if response_cache_stores is not None:
            pulumi.set(__self__, "response_cache_stores", response_cache_stores)

    @property
    @pulumi.getter(name="headerTransformations")
    def header_transformations(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationResult']]:
        return pulumi.get(self, "header_transformations")

    @property
    @pulumi.getter(name="responseCacheStores")
    def response_cache_stores(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyResponseCacheStoreResult']]:
        return pulumi.get(self, "response_cache_stores")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationResult(dict):
    def __init__(__self__, *,
                 filter_headers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderResult']] = None,
                 rename_headers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderResult']] = None,
                 set_headers: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationSetHeaderResult']] = None):
        if filter_headers is not None:
            pulumi.set(__self__, "filter_headers", filter_headers)
        if rename_headers is not None:
            pulumi.set(__self__, "rename_headers", rename_headers)
        if set_headers is not None:
            pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter(name="filterHeaders")
    def filter_headers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderResult']]:
        return pulumi.get(self, "filter_headers")

    @property
    @pulumi.getter(name="renameHeaders")
    def rename_headers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderResult']]:
        return pulumi.get(self, "rename_headers")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationSetHeaderResult']]:
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItemResult']] = None,
                 type: Optional[str] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationFilterHeaderItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationRenameHeaderItemResult(dict):
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationSetHeaderResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyHeaderTransformationSetHeaderItemResult(dict):
    def __init__(__self__, *,
                 if_exists: Optional[str] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if if_exists is not None:
            pulumi.set(__self__, "if_exists", if_exists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="ifExists")
    def if_exists(self) -> Optional[str]:
        return pulumi.get(self, "if_exists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionSpecificationRouteResponsePolicyResponseCacheStoreResult(dict):
    def __init__(__self__, *,
                 time_to_live_in_seconds: Optional[int] = None,
                 type: Optional[str] = None):
        if time_to_live_in_seconds is not None:
            pulumi.set(__self__, "time_to_live_in_seconds", time_to_live_in_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="timeToLiveInSeconds")
    def time_to_live_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "time_to_live_in_seconds")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetGatewayCaBundleResult(dict):
    def __init__(__self__, *,
                 ca_bundle_id: Optional[str] = None,
                 certificate_authority_id: Optional[str] = None,
                 type: Optional[str] = None):
        if ca_bundle_id is not None:
            pulumi.set(__self__, "ca_bundle_id", ca_bundle_id)
        if certificate_authority_id is not None:
            pulumi.set(__self__, "certificate_authority_id", certificate_authority_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="caBundleId")
    def ca_bundle_id(self) -> Optional[str]:
        return pulumi.get(self, "ca_bundle_id")

    @property
    @pulumi.getter(name="certificateAuthorityId")
    def certificate_authority_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_authority_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGatewayIpAddressResult(dict):
    def __init__(__self__, *,
                 ip_address: Optional[str] = None):
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetGatewayResponseCacheDetailResult(dict):
    def __init__(__self__, *,
                 authentication_secret_id: Optional[str] = None,
                 authentication_secret_version_number: Optional[str] = None,
                 connect_timeout_in_ms: Optional[int] = None,
                 is_ssl_enabled: Optional[bool] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 read_timeout_in_ms: Optional[int] = None,
                 send_timeout_in_ms: Optional[int] = None,
                 servers: Optional[Sequence['outputs.GetGatewayResponseCacheDetailServerResult']] = None,
                 type: Optional[str] = None):
        if authentication_secret_id is not None:
            pulumi.set(__self__, "authentication_secret_id", authentication_secret_id)
        if authentication_secret_version_number is not None:
            pulumi.set(__self__, "authentication_secret_version_number", authentication_secret_version_number)
        if connect_timeout_in_ms is not None:
            pulumi.set(__self__, "connect_timeout_in_ms", connect_timeout_in_ms)
        if is_ssl_enabled is not None:
            pulumi.set(__self__, "is_ssl_enabled", is_ssl_enabled)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if read_timeout_in_ms is not None:
            pulumi.set(__self__, "read_timeout_in_ms", read_timeout_in_ms)
        if send_timeout_in_ms is not None:
            pulumi.set(__self__, "send_timeout_in_ms", send_timeout_in_ms)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="authenticationSecretId")
    def authentication_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "authentication_secret_id")

    @property
    @pulumi.getter(name="authenticationSecretVersionNumber")
    def authentication_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "authentication_secret_version_number")

    @property
    @pulumi.getter(name="connectTimeoutInMs")
    def connect_timeout_in_ms(self) -> Optional[int]:
        return pulumi.get(self, "connect_timeout_in_ms")

    @property
    @pulumi.getter(name="isSslEnabled")
    def is_ssl_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_enabled")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="readTimeoutInMs")
    def read_timeout_in_ms(self) -> Optional[int]:
        return pulumi.get(self, "read_timeout_in_ms")

    @property
    @pulumi.getter(name="sendTimeoutInMs")
    def send_timeout_in_ms(self) -> Optional[int]:
        return pulumi.get(self, "send_timeout_in_ms")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence['outputs.GetGatewayResponseCacheDetailServerResult']]:
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGatewayResponseCacheDetailServerResult(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 port: Optional[int] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetGatewaysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetGatewaysGatewayCollectionResult(dict):
    def __init__(__self__, *,
                 ca_bundles: Optional[Sequence['outputs.GetGatewaysGatewayCollectionCaBundleResult']] = None,
                 certificate_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 endpoint_type: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname: Optional[str] = None,
                 id: Optional[str] = None,
                 ip_addresses: Optional[Sequence['outputs.GetGatewaysGatewayCollectionIpAddressResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 network_security_group_ids: Optional[Sequence[str]] = None,
                 response_cache_details: Optional[Sequence['outputs.GetGatewaysGatewayCollectionResponseCacheDetailResult']] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if ca_bundles is not None:
            pulumi.set(__self__, "ca_bundles", ca_bundles)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if network_security_group_ids is not None:
            pulumi.set(__self__, "network_security_group_ids", network_security_group_ids)
        if response_cache_details is not None:
            pulumi.set(__self__, "response_cache_details", response_cache_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="caBundles")
    def ca_bundles(self) -> Optional[Sequence['outputs.GetGatewaysGatewayCollectionCaBundleResult']]:
        return pulumi.get(self, "ca_bundles")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence['outputs.GetGatewaysGatewayCollectionIpAddressResult']]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="networkSecurityGroupIds")
    def network_security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_security_group_ids")

    @property
    @pulumi.getter(name="responseCacheDetails")
    def response_cache_details(self) -> Optional[Sequence['outputs.GetGatewaysGatewayCollectionResponseCacheDetailResult']]:
        return pulumi.get(self, "response_cache_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetGatewaysGatewayCollectionCaBundleResult(dict):
    def __init__(__self__, *,
                 ca_bundle_id: Optional[str] = None,
                 certificate_authority_id: Optional[str] = None,
                 type: Optional[str] = None):
        if ca_bundle_id is not None:
            pulumi.set(__self__, "ca_bundle_id", ca_bundle_id)
        if certificate_authority_id is not None:
            pulumi.set(__self__, "certificate_authority_id", certificate_authority_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="caBundleId")
    def ca_bundle_id(self) -> Optional[str]:
        return pulumi.get(self, "ca_bundle_id")

    @property
    @pulumi.getter(name="certificateAuthorityId")
    def certificate_authority_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_authority_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGatewaysGatewayCollectionIpAddressResult(dict):
    def __init__(__self__, *,
                 ip_address: Optional[str] = None):
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetGatewaysGatewayCollectionResponseCacheDetailResult(dict):
    def __init__(__self__, *,
                 authentication_secret_id: Optional[str] = None,
                 authentication_secret_version_number: Optional[str] = None,
                 connect_timeout_in_ms: Optional[int] = None,
                 is_ssl_enabled: Optional[bool] = None,
                 is_ssl_verify_disabled: Optional[bool] = None,
                 read_timeout_in_ms: Optional[int] = None,
                 send_timeout_in_ms: Optional[int] = None,
                 servers: Optional[Sequence['outputs.GetGatewaysGatewayCollectionResponseCacheDetailServerResult']] = None,
                 type: Optional[str] = None):
        if authentication_secret_id is not None:
            pulumi.set(__self__, "authentication_secret_id", authentication_secret_id)
        if authentication_secret_version_number is not None:
            pulumi.set(__self__, "authentication_secret_version_number", authentication_secret_version_number)
        if connect_timeout_in_ms is not None:
            pulumi.set(__self__, "connect_timeout_in_ms", connect_timeout_in_ms)
        if is_ssl_enabled is not None:
            pulumi.set(__self__, "is_ssl_enabled", is_ssl_enabled)
        if is_ssl_verify_disabled is not None:
            pulumi.set(__self__, "is_ssl_verify_disabled", is_ssl_verify_disabled)
        if read_timeout_in_ms is not None:
            pulumi.set(__self__, "read_timeout_in_ms", read_timeout_in_ms)
        if send_timeout_in_ms is not None:
            pulumi.set(__self__, "send_timeout_in_ms", send_timeout_in_ms)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="authenticationSecretId")
    def authentication_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "authentication_secret_id")

    @property
    @pulumi.getter(name="authenticationSecretVersionNumber")
    def authentication_secret_version_number(self) -> Optional[str]:
        return pulumi.get(self, "authentication_secret_version_number")

    @property
    @pulumi.getter(name="connectTimeoutInMs")
    def connect_timeout_in_ms(self) -> Optional[int]:
        return pulumi.get(self, "connect_timeout_in_ms")

    @property
    @pulumi.getter(name="isSslEnabled")
    def is_ssl_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_enabled")

    @property
    @pulumi.getter(name="isSslVerifyDisabled")
    def is_ssl_verify_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ssl_verify_disabled")

    @property
    @pulumi.getter(name="readTimeoutInMs")
    def read_timeout_in_ms(self) -> Optional[int]:
        return pulumi.get(self, "read_timeout_in_ms")

    @property
    @pulumi.getter(name="sendTimeoutInMs")
    def send_timeout_in_ms(self) -> Optional[int]:
        return pulumi.get(self, "send_timeout_in_ms")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence['outputs.GetGatewaysGatewayCollectionResponseCacheDetailServerResult']]:
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGatewaysGatewayCollectionResponseCacheDetailServerResult(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 port: Optional[int] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetSubscriberClientResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 token: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        return pulumi.get(self, "token")


@pulumi.output_type
class GetSubscribersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSubscribersSubscriberCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSubscribersSubscriberCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSubscribersSubscriberCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSubscribersSubscriberCollectionItemResult(dict):
    def __init__(__self__, *,
                 clients: Optional[Sequence['outputs.GetSubscribersSubscriberCollectionItemClientResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 usage_plans: Optional[Sequence[str]] = None):
        if clients is not None:
            pulumi.set(__self__, "clients", clients)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if usage_plans is not None:
            pulumi.set(__self__, "usage_plans", usage_plans)

    @property
    @pulumi.getter
    def clients(self) -> Optional[Sequence['outputs.GetSubscribersSubscriberCollectionItemClientResult']]:
        return pulumi.get(self, "clients")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="usagePlans")
    def usage_plans(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "usage_plans")


@pulumi.output_type
class GetSubscribersSubscriberCollectionItemClientResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 token: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        return pulumi.get(self, "token")


@pulumi.output_type
class GetUsagePlanEntitlementResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 quotas: Optional[Sequence['outputs.GetUsagePlanEntitlementQuotaResult']] = None,
                 rate_limits: Optional[Sequence['outputs.GetUsagePlanEntitlementRateLimitResult']] = None,
                 targets: Optional[Sequence['outputs.GetUsagePlanEntitlementTargetResult']] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quotas is not None:
            pulumi.set(__self__, "quotas", quotas)
        if rate_limits is not None:
            pulumi.set(__self__, "rate_limits", rate_limits)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def quotas(self) -> Optional[Sequence['outputs.GetUsagePlanEntitlementQuotaResult']]:
        return pulumi.get(self, "quotas")

    @property
    @pulumi.getter(name="rateLimits")
    def rate_limits(self) -> Optional[Sequence['outputs.GetUsagePlanEntitlementRateLimitResult']]:
        return pulumi.get(self, "rate_limits")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence['outputs.GetUsagePlanEntitlementTargetResult']]:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetUsagePlanEntitlementQuotaResult(dict):
    def __init__(__self__, *,
                 operation_on_breach: Optional[str] = None,
                 reset_policy: Optional[str] = None,
                 unit: Optional[str] = None,
                 value: Optional[int] = None):
        if operation_on_breach is not None:
            pulumi.set(__self__, "operation_on_breach", operation_on_breach)
        if reset_policy is not None:
            pulumi.set(__self__, "reset_policy", reset_policy)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="operationOnBreach")
    def operation_on_breach(self) -> Optional[str]:
        return pulumi.get(self, "operation_on_breach")

    @property
    @pulumi.getter(name="resetPolicy")
    def reset_policy(self) -> Optional[str]:
        return pulumi.get(self, "reset_policy")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsagePlanEntitlementRateLimitResult(dict):
    def __init__(__self__, *,
                 unit: Optional[str] = None,
                 value: Optional[int] = None):
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsagePlanEntitlementTargetResult(dict):
    def __init__(__self__, *,
                 deployment_id: Optional[str] = None):
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[str]:
        return pulumi.get(self, "deployment_id")


@pulumi.output_type
class GetUsagePlansFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUsagePlansUsagePlanCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetUsagePlansUsagePlanCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetUsagePlansUsagePlanCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetUsagePlansUsagePlanCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 entitlements: Optional[Sequence['outputs.GetUsagePlansUsagePlanCollectionItemEntitlementResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entitlements is not None:
            pulumi.set(__self__, "entitlements", entitlements)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def entitlements(self) -> Optional[Sequence['outputs.GetUsagePlansUsagePlanCollectionItemEntitlementResult']]:
        return pulumi.get(self, "entitlements")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetUsagePlansUsagePlanCollectionItemEntitlementResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 quotas: Optional[Sequence['outputs.GetUsagePlansUsagePlanCollectionItemEntitlementQuotaResult']] = None,
                 rate_limits: Optional[Sequence['outputs.GetUsagePlansUsagePlanCollectionItemEntitlementRateLimitResult']] = None,
                 targets: Optional[Sequence['outputs.GetUsagePlansUsagePlanCollectionItemEntitlementTargetResult']] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quotas is not None:
            pulumi.set(__self__, "quotas", quotas)
        if rate_limits is not None:
            pulumi.set(__self__, "rate_limits", rate_limits)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def quotas(self) -> Optional[Sequence['outputs.GetUsagePlansUsagePlanCollectionItemEntitlementQuotaResult']]:
        return pulumi.get(self, "quotas")

    @property
    @pulumi.getter(name="rateLimits")
    def rate_limits(self) -> Optional[Sequence['outputs.GetUsagePlansUsagePlanCollectionItemEntitlementRateLimitResult']]:
        return pulumi.get(self, "rate_limits")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence['outputs.GetUsagePlansUsagePlanCollectionItemEntitlementTargetResult']]:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetUsagePlansUsagePlanCollectionItemEntitlementQuotaResult(dict):
    def __init__(__self__, *,
                 operation_on_breach: Optional[str] = None,
                 reset_policy: Optional[str] = None,
                 unit: Optional[str] = None,
                 value: Optional[int] = None):
        if operation_on_breach is not None:
            pulumi.set(__self__, "operation_on_breach", operation_on_breach)
        if reset_policy is not None:
            pulumi.set(__self__, "reset_policy", reset_policy)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="operationOnBreach")
    def operation_on_breach(self) -> Optional[str]:
        return pulumi.get(self, "operation_on_breach")

    @property
    @pulumi.getter(name="resetPolicy")
    def reset_policy(self) -> Optional[str]:
        return pulumi.get(self, "reset_policy")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsagePlansUsagePlanCollectionItemEntitlementRateLimitResult(dict):
    def __init__(__self__, *,
                 unit: Optional[str] = None,
                 value: Optional[int] = None):
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsagePlansUsagePlanCollectionItemEntitlementTargetResult(dict):
    def __init__(__self__, *,
                 deployment_id: Optional[str] = None):
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[str]:
        return pulumi.get(self, "deployment_id")


