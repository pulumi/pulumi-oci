# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ConfigAvailabilityConfigurationArgs',
    'ConfigAvailabilityConfigurationArgsDict',
    'ConfigConfigurationArgs',
    'ConfigConfigurationArgsDict',
    'ConfigConfigurationClientCertificateDetailsArgs',
    'ConfigConfigurationClientCertificateDetailsArgsDict',
    'ConfigConfigurationClientCertificateDetailsClientCertificateArgs',
    'ConfigConfigurationClientCertificateDetailsClientCertificateArgsDict',
    'ConfigConfigurationClientCertificateDetailsPrivateKeyArgs',
    'ConfigConfigurationClientCertificateDetailsPrivateKeyArgsDict',
    'ConfigConfigurationDatabaseAuthenticationDetailsArgs',
    'ConfigConfigurationDatabaseAuthenticationDetailsArgsDict',
    'ConfigConfigurationDatabaseAuthenticationDetailsPasswordArgs',
    'ConfigConfigurationDatabaseAuthenticationDetailsPasswordArgsDict',
    'ConfigConfigurationDatabaseWalletDetailsArgs',
    'ConfigConfigurationDatabaseWalletDetailsArgsDict',
    'ConfigConfigurationDnsConfigurationArgs',
    'ConfigConfigurationDnsConfigurationArgsDict',
    'ConfigConfigurationFtpBasicAuthenticationDetailsArgs',
    'ConfigConfigurationFtpBasicAuthenticationDetailsArgsDict',
    'ConfigConfigurationFtpBasicAuthenticationDetailsPasswordArgs',
    'ConfigConfigurationFtpBasicAuthenticationDetailsPasswordArgsDict',
    'ConfigConfigurationNetworkConfigurationArgs',
    'ConfigConfigurationNetworkConfigurationArgsDict',
    'ConfigConfigurationReqAuthenticationDetailsArgs',
    'ConfigConfigurationReqAuthenticationDetailsArgsDict',
    'ConfigConfigurationReqAuthenticationDetailsAuthHeaderArgs',
    'ConfigConfigurationReqAuthenticationDetailsAuthHeaderArgsDict',
    'ConfigConfigurationRequestHeaderArgs',
    'ConfigConfigurationRequestHeaderArgsDict',
    'ConfigConfigurationRequestQueryParamArgs',
    'ConfigConfigurationRequestQueryParamArgsDict',
    'ConfigConfigurationVerifyTextArgs',
    'ConfigConfigurationVerifyTextArgsDict',
    'ConfigMaintenanceWindowScheduleArgs',
    'ConfigMaintenanceWindowScheduleArgsDict',
    'ConfigScriptParameterArgs',
    'ConfigScriptParameterArgsDict',
    'ConfigScriptParameterMonitorScriptParameterArgs',
    'ConfigScriptParameterMonitorScriptParameterArgsDict',
    'ConfigVantagePointArgs',
    'ConfigVantagePointArgsDict',
    'DedicatedVantagePointDvpStackDetailsArgs',
    'DedicatedVantagePointDvpStackDetailsArgsDict',
    'DedicatedVantagePointMonitorStatusCountMapArgs',
    'DedicatedVantagePointMonitorStatusCountMapArgsDict',
    'OnPremiseVantagePointWorkerIdentityInfoArgs',
    'OnPremiseVantagePointWorkerIdentityInfoArgsDict',
    'OnPremiseVantagePointWorkerMonitorListArgs',
    'OnPremiseVantagePointWorkerMonitorListArgsDict',
    'OnPremiseVantagePointWorkerVersionDetailArgs',
    'OnPremiseVantagePointWorkerVersionDetailArgsDict',
    'OnPremiseVantagePointWorkersSummaryArgs',
    'OnPremiseVantagePointWorkersSummaryArgsDict',
    'OnPremiseVantagePointWorkersSummaryAvailableCapabilityArgs',
    'OnPremiseVantagePointWorkersSummaryAvailableCapabilityArgsDict',
    'ScriptMonitorStatusCountMapArgs',
    'ScriptMonitorStatusCountMapArgsDict',
    'ScriptParameterArgs',
    'ScriptParameterArgsDict',
    'ScriptParameterScriptParameterArgs',
    'ScriptParameterScriptParameterArgsDict',
    'GetDedicatedVantagePointsFilterArgs',
    'GetDedicatedVantagePointsFilterArgsDict',
    'GetMonitorsFilterArgs',
    'GetMonitorsFilterArgsDict',
    'GetOnPremiseVantagePointWorkersFilterArgs',
    'GetOnPremiseVantagePointWorkersFilterArgsDict',
    'GetOnPremiseVantagePointsFilterArgs',
    'GetOnPremiseVantagePointsFilterArgsDict',
    'GetScriptsFilterArgs',
    'GetScriptsFilterArgsDict',
    'GetVantagePointsFilterArgs',
    'GetVantagePointsFilterArgsDict',
]

MYPY = False

if not MYPY:
    class ConfigAvailabilityConfigurationArgsDict(TypedDict):
        max_allowed_failures_per_interval: NotRequired[pulumi.Input[int]]
        """
        (Updatable) Intervals with failed runs more than this value will be classified as UNAVAILABLE.
        """
        min_allowed_runs_per_interval: NotRequired[pulumi.Input[int]]
        """
        (Updatable) Intervals with runs less than this value will be classified as UNKNOWN and excluded from the availability calculations.
        """
elif False:
    ConfigAvailabilityConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigAvailabilityConfigurationArgs:
    def __init__(__self__, *,
                 max_allowed_failures_per_interval: Optional[pulumi.Input[int]] = None,
                 min_allowed_runs_per_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] max_allowed_failures_per_interval: (Updatable) Intervals with failed runs more than this value will be classified as UNAVAILABLE.
        :param pulumi.Input[int] min_allowed_runs_per_interval: (Updatable) Intervals with runs less than this value will be classified as UNKNOWN and excluded from the availability calculations.
        """
        if max_allowed_failures_per_interval is not None:
            pulumi.set(__self__, "max_allowed_failures_per_interval", max_allowed_failures_per_interval)
        if min_allowed_runs_per_interval is not None:
            pulumi.set(__self__, "min_allowed_runs_per_interval", min_allowed_runs_per_interval)

    @property
    @pulumi.getter(name="maxAllowedFailuresPerInterval")
    def max_allowed_failures_per_interval(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Intervals with failed runs more than this value will be classified as UNAVAILABLE.
        """
        return pulumi.get(self, "max_allowed_failures_per_interval")

    @max_allowed_failures_per_interval.setter
    def max_allowed_failures_per_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_allowed_failures_per_interval", value)

    @property
    @pulumi.getter(name="minAllowedRunsPerInterval")
    def min_allowed_runs_per_interval(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Intervals with runs less than this value will be classified as UNKNOWN and excluded from the availability calculations.
        """
        return pulumi.get(self, "min_allowed_runs_per_interval")

    @min_allowed_runs_per_interval.setter
    def min_allowed_runs_per_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_allowed_runs_per_interval", value)


if not MYPY:
    class ConfigConfigurationArgsDict(TypedDict):
        client_certificate_details: NotRequired[pulumi.Input['ConfigConfigurationClientCertificateDetailsArgsDict']]
        """
        (Updatable) Details for client certificate.
        """
        config_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Type of configuration.
        """
        connection_string: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Database connection string.
        """
        database_authentication_details: NotRequired[pulumi.Input['ConfigConfigurationDatabaseAuthenticationDetailsArgsDict']]
        """
        (Updatable) Details for basic authentication.
        """
        database_connection_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Database connection type. Only CUSTOM_JDBC is supported for MYSQL database type.
        """
        database_role: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Database role.
        """
        database_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Database type.
        """
        database_wallet_details: NotRequired[pulumi.Input['ConfigConfigurationDatabaseWalletDetailsArgsDict']]
        """
        (Updatable) Details for database wallet.
        """
        dns_configuration: NotRequired[pulumi.Input['ConfigConfigurationDnsConfigurationArgsDict']]
        """
        (Updatable) Information about the DNS settings.
        """
        download_size_limit_in_bytes: NotRequired[pulumi.Input[int]]
        """
        (Updatable) Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB.
        """
        ftp_basic_authentication_details: NotRequired[pulumi.Input['ConfigConfigurationFtpBasicAuthenticationDetailsArgsDict']]
        """
        (Updatable) Details for basic authentication.
        """
        ftp_protocol: NotRequired[pulumi.Input[str]]
        """
        (Updatable) FTP protocol type.
        """
        ftp_request_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) FTP monitor request type.
        """
        is_active_mode: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) If enabled, Active mode will be used for the FTP connection.
        """
        is_certificate_validation_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) If certificate validation is enabled, then the call will fail in case of certification errors.
        """
        is_default_snapshot_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) If disabled, auto snapshots are not collected.
        """
        is_failure_retried: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) If isFailureRetried is enabled, then a failed call will be retried.
        """
        is_query_recursive: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) If isQueryRecursive is enabled, then queries will be sent recursively to the target server.
        """
        is_redirection_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) If redirection is enabled, then redirects will be allowed while accessing target URL.
        """
        name_server: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Name of the server that will be used to perform DNS lookup.
        """
        network_configuration: NotRequired[pulumi.Input['ConfigConfigurationNetworkConfigurationArgsDict']]
        """
        (Updatable) Details of the network configuration. For NETWORK monitor type, NetworkConfiguration is mandatory.
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Type of protocol.
        """
        query: NotRequired[pulumi.Input[str]]
        """
        (Updatable) SQL query to be executed.
        """
        record_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) DNS record type.
        """
        req_authentication_details: NotRequired[pulumi.Input['ConfigConfigurationReqAuthenticationDetailsArgsDict']]
        """
        (Updatable) Details for request HTTP authentication.
        """
        req_authentication_scheme: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Request HTTP authentication scheme.
        """
        request_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationRequestHeaderArgsDict']]]]
        """
        (Updatable) List of request headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        """
        request_method: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Request HTTP method.
        """
        request_post_body: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Request post body content.
        """
        request_query_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationRequestQueryParamArgsDict']]]]
        """
        (Updatable) List of request query params. Example: `[{"paramName": "sortOrder", "paramValue": "asc"}]`
        """
        upload_file_size_in_bytes: NotRequired[pulumi.Input[int]]
        """
        (Updatable) File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB.
        """
        verify_response_codes: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
        """
        verify_response_content: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
        """
        verify_texts: NotRequired[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationVerifyTextArgsDict']]]]
        """
        (Updatable) Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
        """
elif False:
    ConfigConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationArgs:
    def __init__(__self__, *,
                 client_certificate_details: Optional[pulumi.Input['ConfigConfigurationClientCertificateDetailsArgs']] = None,
                 config_type: Optional[pulumi.Input[str]] = None,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 database_authentication_details: Optional[pulumi.Input['ConfigConfigurationDatabaseAuthenticationDetailsArgs']] = None,
                 database_connection_type: Optional[pulumi.Input[str]] = None,
                 database_role: Optional[pulumi.Input[str]] = None,
                 database_type: Optional[pulumi.Input[str]] = None,
                 database_wallet_details: Optional[pulumi.Input['ConfigConfigurationDatabaseWalletDetailsArgs']] = None,
                 dns_configuration: Optional[pulumi.Input['ConfigConfigurationDnsConfigurationArgs']] = None,
                 download_size_limit_in_bytes: Optional[pulumi.Input[int]] = None,
                 ftp_basic_authentication_details: Optional[pulumi.Input['ConfigConfigurationFtpBasicAuthenticationDetailsArgs']] = None,
                 ftp_protocol: Optional[pulumi.Input[str]] = None,
                 ftp_request_type: Optional[pulumi.Input[str]] = None,
                 is_active_mode: Optional[pulumi.Input[bool]] = None,
                 is_certificate_validation_enabled: Optional[pulumi.Input[bool]] = None,
                 is_default_snapshot_enabled: Optional[pulumi.Input[bool]] = None,
                 is_failure_retried: Optional[pulumi.Input[bool]] = None,
                 is_query_recursive: Optional[pulumi.Input[bool]] = None,
                 is_redirection_enabled: Optional[pulumi.Input[bool]] = None,
                 name_server: Optional[pulumi.Input[str]] = None,
                 network_configuration: Optional[pulumi.Input['ConfigConfigurationNetworkConfigurationArgs']] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 record_type: Optional[pulumi.Input[str]] = None,
                 req_authentication_details: Optional[pulumi.Input['ConfigConfigurationReqAuthenticationDetailsArgs']] = None,
                 req_authentication_scheme: Optional[pulumi.Input[str]] = None,
                 request_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationRequestHeaderArgs']]]] = None,
                 request_method: Optional[pulumi.Input[str]] = None,
                 request_post_body: Optional[pulumi.Input[str]] = None,
                 request_query_params: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationRequestQueryParamArgs']]]] = None,
                 upload_file_size_in_bytes: Optional[pulumi.Input[int]] = None,
                 verify_response_codes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 verify_response_content: Optional[pulumi.Input[str]] = None,
                 verify_texts: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationVerifyTextArgs']]]] = None):
        """
        :param pulumi.Input['ConfigConfigurationClientCertificateDetailsArgs'] client_certificate_details: (Updatable) Details for client certificate.
        :param pulumi.Input[str] config_type: (Updatable) Type of configuration.
        :param pulumi.Input[str] connection_string: (Updatable) Database connection string.
        :param pulumi.Input['ConfigConfigurationDatabaseAuthenticationDetailsArgs'] database_authentication_details: (Updatable) Details for basic authentication.
        :param pulumi.Input[str] database_connection_type: (Updatable) Database connection type. Only CUSTOM_JDBC is supported for MYSQL database type.
        :param pulumi.Input[str] database_role: (Updatable) Database role.
        :param pulumi.Input[str] database_type: (Updatable) Database type.
        :param pulumi.Input['ConfigConfigurationDatabaseWalletDetailsArgs'] database_wallet_details: (Updatable) Details for database wallet.
        :param pulumi.Input['ConfigConfigurationDnsConfigurationArgs'] dns_configuration: (Updatable) Information about the DNS settings.
        :param pulumi.Input[int] download_size_limit_in_bytes: (Updatable) Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB.
        :param pulumi.Input['ConfigConfigurationFtpBasicAuthenticationDetailsArgs'] ftp_basic_authentication_details: (Updatable) Details for basic authentication.
        :param pulumi.Input[str] ftp_protocol: (Updatable) FTP protocol type.
        :param pulumi.Input[str] ftp_request_type: (Updatable) FTP monitor request type.
        :param pulumi.Input[bool] is_active_mode: (Updatable) If enabled, Active mode will be used for the FTP connection.
        :param pulumi.Input[bool] is_certificate_validation_enabled: (Updatable) If certificate validation is enabled, then the call will fail in case of certification errors.
        :param pulumi.Input[bool] is_default_snapshot_enabled: (Updatable) If disabled, auto snapshots are not collected.
        :param pulumi.Input[bool] is_failure_retried: (Updatable) If isFailureRetried is enabled, then a failed call will be retried.
        :param pulumi.Input[bool] is_query_recursive: (Updatable) If isQueryRecursive is enabled, then queries will be sent recursively to the target server.
        :param pulumi.Input[bool] is_redirection_enabled: (Updatable) If redirection is enabled, then redirects will be allowed while accessing target URL.
        :param pulumi.Input[str] name_server: (Updatable) Name of the server that will be used to perform DNS lookup.
        :param pulumi.Input['ConfigConfigurationNetworkConfigurationArgs'] network_configuration: (Updatable) Details of the network configuration. For NETWORK monitor type, NetworkConfiguration is mandatory.
        :param pulumi.Input[str] protocol: (Updatable) Type of protocol.
        :param pulumi.Input[str] query: (Updatable) SQL query to be executed.
        :param pulumi.Input[str] record_type: (Updatable) DNS record type.
        :param pulumi.Input['ConfigConfigurationReqAuthenticationDetailsArgs'] req_authentication_details: (Updatable) Details for request HTTP authentication.
        :param pulumi.Input[str] req_authentication_scheme: (Updatable) Request HTTP authentication scheme.
        :param pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationRequestHeaderArgs']]] request_headers: (Updatable) List of request headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        :param pulumi.Input[str] request_method: (Updatable) Request HTTP method.
        :param pulumi.Input[str] request_post_body: (Updatable) Request post body content.
        :param pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationRequestQueryParamArgs']]] request_query_params: (Updatable) List of request query params. Example: `[{"paramName": "sortOrder", "paramValue": "asc"}]`
        :param pulumi.Input[int] upload_file_size_in_bytes: (Updatable) File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] verify_response_codes: (Updatable) Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
        :param pulumi.Input[str] verify_response_content: (Updatable) Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
        :param pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationVerifyTextArgs']]] verify_texts: (Updatable) Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
        """
        if client_certificate_details is not None:
            pulumi.set(__self__, "client_certificate_details", client_certificate_details)
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)
        if database_authentication_details is not None:
            pulumi.set(__self__, "database_authentication_details", database_authentication_details)
        if database_connection_type is not None:
            pulumi.set(__self__, "database_connection_type", database_connection_type)
        if database_role is not None:
            pulumi.set(__self__, "database_role", database_role)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if database_wallet_details is not None:
            pulumi.set(__self__, "database_wallet_details", database_wallet_details)
        if dns_configuration is not None:
            pulumi.set(__self__, "dns_configuration", dns_configuration)
        if download_size_limit_in_bytes is not None:
            pulumi.set(__self__, "download_size_limit_in_bytes", download_size_limit_in_bytes)
        if ftp_basic_authentication_details is not None:
            pulumi.set(__self__, "ftp_basic_authentication_details", ftp_basic_authentication_details)
        if ftp_protocol is not None:
            pulumi.set(__self__, "ftp_protocol", ftp_protocol)
        if ftp_request_type is not None:
            pulumi.set(__self__, "ftp_request_type", ftp_request_type)
        if is_active_mode is not None:
            pulumi.set(__self__, "is_active_mode", is_active_mode)
        if is_certificate_validation_enabled is not None:
            pulumi.set(__self__, "is_certificate_validation_enabled", is_certificate_validation_enabled)
        if is_default_snapshot_enabled is not None:
            pulumi.set(__self__, "is_default_snapshot_enabled", is_default_snapshot_enabled)
        if is_failure_retried is not None:
            pulumi.set(__self__, "is_failure_retried", is_failure_retried)
        if is_query_recursive is not None:
            pulumi.set(__self__, "is_query_recursive", is_query_recursive)
        if is_redirection_enabled is not None:
            pulumi.set(__self__, "is_redirection_enabled", is_redirection_enabled)
        if name_server is not None:
            pulumi.set(__self__, "name_server", name_server)
        if network_configuration is not None:
            pulumi.set(__self__, "network_configuration", network_configuration)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if req_authentication_details is not None:
            pulumi.set(__self__, "req_authentication_details", req_authentication_details)
        if req_authentication_scheme is not None:
            pulumi.set(__self__, "req_authentication_scheme", req_authentication_scheme)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if request_post_body is not None:
            pulumi.set(__self__, "request_post_body", request_post_body)
        if request_query_params is not None:
            pulumi.set(__self__, "request_query_params", request_query_params)
        if upload_file_size_in_bytes is not None:
            pulumi.set(__self__, "upload_file_size_in_bytes", upload_file_size_in_bytes)
        if verify_response_codes is not None:
            pulumi.set(__self__, "verify_response_codes", verify_response_codes)
        if verify_response_content is not None:
            pulumi.set(__self__, "verify_response_content", verify_response_content)
        if verify_texts is not None:
            pulumi.set(__self__, "verify_texts", verify_texts)

    @property
    @pulumi.getter(name="clientCertificateDetails")
    def client_certificate_details(self) -> Optional[pulumi.Input['ConfigConfigurationClientCertificateDetailsArgs']]:
        """
        (Updatable) Details for client certificate.
        """
        return pulumi.get(self, "client_certificate_details")

    @client_certificate_details.setter
    def client_certificate_details(self, value: Optional[pulumi.Input['ConfigConfigurationClientCertificateDetailsArgs']]):
        pulumi.set(self, "client_certificate_details", value)

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Type of configuration.
        """
        return pulumi.get(self, "config_type")

    @config_type.setter
    def config_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_type", value)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Database connection string.
        """
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter(name="databaseAuthenticationDetails")
    def database_authentication_details(self) -> Optional[pulumi.Input['ConfigConfigurationDatabaseAuthenticationDetailsArgs']]:
        """
        (Updatable) Details for basic authentication.
        """
        return pulumi.get(self, "database_authentication_details")

    @database_authentication_details.setter
    def database_authentication_details(self, value: Optional[pulumi.Input['ConfigConfigurationDatabaseAuthenticationDetailsArgs']]):
        pulumi.set(self, "database_authentication_details", value)

    @property
    @pulumi.getter(name="databaseConnectionType")
    def database_connection_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Database connection type. Only CUSTOM_JDBC is supported for MYSQL database type.
        """
        return pulumi.get(self, "database_connection_type")

    @database_connection_type.setter
    def database_connection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_connection_type", value)

    @property
    @pulumi.getter(name="databaseRole")
    def database_role(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Database role.
        """
        return pulumi.get(self, "database_role")

    @database_role.setter
    def database_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_role", value)

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Database type.
        """
        return pulumi.get(self, "database_type")

    @database_type.setter
    def database_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_type", value)

    @property
    @pulumi.getter(name="databaseWalletDetails")
    def database_wallet_details(self) -> Optional[pulumi.Input['ConfigConfigurationDatabaseWalletDetailsArgs']]:
        """
        (Updatable) Details for database wallet.
        """
        return pulumi.get(self, "database_wallet_details")

    @database_wallet_details.setter
    def database_wallet_details(self, value: Optional[pulumi.Input['ConfigConfigurationDatabaseWalletDetailsArgs']]):
        pulumi.set(self, "database_wallet_details", value)

    @property
    @pulumi.getter(name="dnsConfiguration")
    def dns_configuration(self) -> Optional[pulumi.Input['ConfigConfigurationDnsConfigurationArgs']]:
        """
        (Updatable) Information about the DNS settings.
        """
        return pulumi.get(self, "dns_configuration")

    @dns_configuration.setter
    def dns_configuration(self, value: Optional[pulumi.Input['ConfigConfigurationDnsConfigurationArgs']]):
        pulumi.set(self, "dns_configuration", value)

    @property
    @pulumi.getter(name="downloadSizeLimitInBytes")
    def download_size_limit_in_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB.
        """
        return pulumi.get(self, "download_size_limit_in_bytes")

    @download_size_limit_in_bytes.setter
    def download_size_limit_in_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "download_size_limit_in_bytes", value)

    @property
    @pulumi.getter(name="ftpBasicAuthenticationDetails")
    def ftp_basic_authentication_details(self) -> Optional[pulumi.Input['ConfigConfigurationFtpBasicAuthenticationDetailsArgs']]:
        """
        (Updatable) Details for basic authentication.
        """
        return pulumi.get(self, "ftp_basic_authentication_details")

    @ftp_basic_authentication_details.setter
    def ftp_basic_authentication_details(self, value: Optional[pulumi.Input['ConfigConfigurationFtpBasicAuthenticationDetailsArgs']]):
        pulumi.set(self, "ftp_basic_authentication_details", value)

    @property
    @pulumi.getter(name="ftpProtocol")
    def ftp_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) FTP protocol type.
        """
        return pulumi.get(self, "ftp_protocol")

    @ftp_protocol.setter
    def ftp_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_protocol", value)

    @property
    @pulumi.getter(name="ftpRequestType")
    def ftp_request_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) FTP monitor request type.
        """
        return pulumi.get(self, "ftp_request_type")

    @ftp_request_type.setter
    def ftp_request_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_request_type", value)

    @property
    @pulumi.getter(name="isActiveMode")
    def is_active_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) If enabled, Active mode will be used for the FTP connection.
        """
        return pulumi.get(self, "is_active_mode")

    @is_active_mode.setter
    def is_active_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_active_mode", value)

    @property
    @pulumi.getter(name="isCertificateValidationEnabled")
    def is_certificate_validation_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) If certificate validation is enabled, then the call will fail in case of certification errors.
        """
        return pulumi.get(self, "is_certificate_validation_enabled")

    @is_certificate_validation_enabled.setter
    def is_certificate_validation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_certificate_validation_enabled", value)

    @property
    @pulumi.getter(name="isDefaultSnapshotEnabled")
    def is_default_snapshot_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) If disabled, auto snapshots are not collected.
        """
        return pulumi.get(self, "is_default_snapshot_enabled")

    @is_default_snapshot_enabled.setter
    def is_default_snapshot_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default_snapshot_enabled", value)

    @property
    @pulumi.getter(name="isFailureRetried")
    def is_failure_retried(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) If isFailureRetried is enabled, then a failed call will be retried.
        """
        return pulumi.get(self, "is_failure_retried")

    @is_failure_retried.setter
    def is_failure_retried(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_failure_retried", value)

    @property
    @pulumi.getter(name="isQueryRecursive")
    def is_query_recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) If isQueryRecursive is enabled, then queries will be sent recursively to the target server.
        """
        return pulumi.get(self, "is_query_recursive")

    @is_query_recursive.setter
    def is_query_recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_query_recursive", value)

    @property
    @pulumi.getter(name="isRedirectionEnabled")
    def is_redirection_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) If redirection is enabled, then redirects will be allowed while accessing target URL.
        """
        return pulumi.get(self, "is_redirection_enabled")

    @is_redirection_enabled.setter
    def is_redirection_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_redirection_enabled", value)

    @property
    @pulumi.getter(name="nameServer")
    def name_server(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Name of the server that will be used to perform DNS lookup.
        """
        return pulumi.get(self, "name_server")

    @name_server.setter
    def name_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_server", value)

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> Optional[pulumi.Input['ConfigConfigurationNetworkConfigurationArgs']]:
        """
        (Updatable) Details of the network configuration. For NETWORK monitor type, NetworkConfiguration is mandatory.
        """
        return pulumi.get(self, "network_configuration")

    @network_configuration.setter
    def network_configuration(self, value: Optional[pulumi.Input['ConfigConfigurationNetworkConfigurationArgs']]):
        pulumi.set(self, "network_configuration", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Type of protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) SQL query to be executed.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) DNS record type.
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_type", value)

    @property
    @pulumi.getter(name="reqAuthenticationDetails")
    def req_authentication_details(self) -> Optional[pulumi.Input['ConfigConfigurationReqAuthenticationDetailsArgs']]:
        """
        (Updatable) Details for request HTTP authentication.
        """
        return pulumi.get(self, "req_authentication_details")

    @req_authentication_details.setter
    def req_authentication_details(self, value: Optional[pulumi.Input['ConfigConfigurationReqAuthenticationDetailsArgs']]):
        pulumi.set(self, "req_authentication_details", value)

    @property
    @pulumi.getter(name="reqAuthenticationScheme")
    def req_authentication_scheme(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Request HTTP authentication scheme.
        """
        return pulumi.get(self, "req_authentication_scheme")

    @req_authentication_scheme.setter
    def req_authentication_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "req_authentication_scheme", value)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationRequestHeaderArgs']]]]:
        """
        (Updatable) List of request headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationRequestHeaderArgs']]]]):
        pulumi.set(self, "request_headers", value)

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Request HTTP method.
        """
        return pulumi.get(self, "request_method")

    @request_method.setter
    def request_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_method", value)

    @property
    @pulumi.getter(name="requestPostBody")
    def request_post_body(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Request post body content.
        """
        return pulumi.get(self, "request_post_body")

    @request_post_body.setter
    def request_post_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_post_body", value)

    @property
    @pulumi.getter(name="requestQueryParams")
    def request_query_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationRequestQueryParamArgs']]]]:
        """
        (Updatable) List of request query params. Example: `[{"paramName": "sortOrder", "paramValue": "asc"}]`
        """
        return pulumi.get(self, "request_query_params")

    @request_query_params.setter
    def request_query_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationRequestQueryParamArgs']]]]):
        pulumi.set(self, "request_query_params", value)

    @property
    @pulumi.getter(name="uploadFileSizeInBytes")
    def upload_file_size_in_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB.
        """
        return pulumi.get(self, "upload_file_size_in_bytes")

    @upload_file_size_in_bytes.setter
    def upload_file_size_in_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upload_file_size_in_bytes", value)

    @property
    @pulumi.getter(name="verifyResponseCodes")
    def verify_response_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
        """
        return pulumi.get(self, "verify_response_codes")

    @verify_response_codes.setter
    def verify_response_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "verify_response_codes", value)

    @property
    @pulumi.getter(name="verifyResponseContent")
    def verify_response_content(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
        """
        return pulumi.get(self, "verify_response_content")

    @verify_response_content.setter
    def verify_response_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_response_content", value)

    @property
    @pulumi.getter(name="verifyTexts")
    def verify_texts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationVerifyTextArgs']]]]:
        """
        (Updatable) Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
        """
        return pulumi.get(self, "verify_texts")

    @verify_texts.setter
    def verify_texts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationVerifyTextArgs']]]]):
        pulumi.set(self, "verify_texts", value)


if not MYPY:
    class ConfigConfigurationClientCertificateDetailsArgsDict(TypedDict):
        client_certificate: NotRequired[pulumi.Input['ConfigConfigurationClientCertificateDetailsClientCertificateArgsDict']]
        """
        (Updatable) Client certificate in PEM format.
        """
        private_key: NotRequired[pulumi.Input['ConfigConfigurationClientCertificateDetailsPrivateKeyArgsDict']]
        """
        (Updatable) The private key associated with the client certificate in PEM format.
        """
elif False:
    ConfigConfigurationClientCertificateDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationClientCertificateDetailsArgs:
    def __init__(__self__, *,
                 client_certificate: Optional[pulumi.Input['ConfigConfigurationClientCertificateDetailsClientCertificateArgs']] = None,
                 private_key: Optional[pulumi.Input['ConfigConfigurationClientCertificateDetailsPrivateKeyArgs']] = None):
        """
        :param pulumi.Input['ConfigConfigurationClientCertificateDetailsClientCertificateArgs'] client_certificate: (Updatable) Client certificate in PEM format.
        :param pulumi.Input['ConfigConfigurationClientCertificateDetailsPrivateKeyArgs'] private_key: (Updatable) The private key associated with the client certificate in PEM format.
        """
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input['ConfigConfigurationClientCertificateDetailsClientCertificateArgs']]:
        """
        (Updatable) Client certificate in PEM format.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input['ConfigConfigurationClientCertificateDetailsClientCertificateArgs']]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input['ConfigConfigurationClientCertificateDetailsPrivateKeyArgs']]:
        """
        (Updatable) The private key associated with the client certificate in PEM format.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input['ConfigConfigurationClientCertificateDetailsPrivateKeyArgs']]):
        pulumi.set(self, "private_key", value)


if not MYPY:
    class ConfigConfigurationClientCertificateDetailsClientCertificateArgsDict(TypedDict):
        content: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Content of the client certificate file.
        """
        file_name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Name of the certificate file. The name should not contain any confidential information.
        """
elif False:
    ConfigConfigurationClientCertificateDetailsClientCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationClientCertificateDetailsClientCertificateArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: (Updatable) Content of the client certificate file.
        :param pulumi.Input[str] file_name: (Updatable) Name of the certificate file. The name should not contain any confidential information.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Content of the client certificate file.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Name of the certificate file. The name should not contain any confidential information.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)


if not MYPY:
    class ConfigConfigurationClientCertificateDetailsPrivateKeyArgsDict(TypedDict):
        content: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Content of the private key file.
        """
        file_name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Name of the private key file.
        """
elif False:
    ConfigConfigurationClientCertificateDetailsPrivateKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationClientCertificateDetailsPrivateKeyArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: (Updatable) Content of the private key file.
        :param pulumi.Input[str] file_name: (Updatable) Name of the private key file.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Content of the private key file.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Name of the private key file.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)


if not MYPY:
    class ConfigConfigurationDatabaseAuthenticationDetailsArgsDict(TypedDict):
        password: NotRequired[pulumi.Input['ConfigConfigurationDatabaseAuthenticationDetailsPasswordArgsDict']]
        """
        (Updatable) Password.
        """
        username: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Username for authentication.
        """
elif False:
    ConfigConfigurationDatabaseAuthenticationDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationDatabaseAuthenticationDetailsArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input['ConfigConfigurationDatabaseAuthenticationDetailsPasswordArgs']] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ConfigConfigurationDatabaseAuthenticationDetailsPasswordArgs'] password: (Updatable) Password.
        :param pulumi.Input[str] username: (Updatable) Username for authentication.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input['ConfigConfigurationDatabaseAuthenticationDetailsPasswordArgs']]:
        """
        (Updatable) Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input['ConfigConfigurationDatabaseAuthenticationDetailsPasswordArgs']]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Username for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class ConfigConfigurationDatabaseAuthenticationDetailsPasswordArgsDict(TypedDict):
        password: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Password.
        """
        password_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Type of method to pass password.
        """
        vault_secret_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Vault secret OCID.
        """
elif False:
    ConfigConfigurationDatabaseAuthenticationDetailsPasswordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationDatabaseAuthenticationDetailsPasswordArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 password_type: Optional[pulumi.Input[str]] = None,
                 vault_secret_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: (Updatable) Password.
        :param pulumi.Input[str] password_type: (Updatable) Type of method to pass password.
        :param pulumi.Input[str] vault_secret_id: (Updatable) Vault secret OCID.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_type is not None:
            pulumi.set(__self__, "password_type", password_type)
        if vault_secret_id is not None:
            pulumi.set(__self__, "vault_secret_id", vault_secret_id)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Type of method to pass password.
        """
        return pulumi.get(self, "password_type")

    @password_type.setter
    def password_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_type", value)

    @property
    @pulumi.getter(name="vaultSecretId")
    def vault_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Vault secret OCID.
        """
        return pulumi.get(self, "vault_secret_id")

    @vault_secret_id.setter
    def vault_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vault_secret_id", value)


if not MYPY:
    class ConfigConfigurationDatabaseWalletDetailsArgsDict(TypedDict):
        database_wallet: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The database wallet configuration zip file.
        """
        service_name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Service name of the database.
        """
elif False:
    ConfigConfigurationDatabaseWalletDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationDatabaseWalletDetailsArgs:
    def __init__(__self__, *,
                 database_wallet: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] database_wallet: (Updatable) The database wallet configuration zip file.
        :param pulumi.Input[str] service_name: (Updatable) Service name of the database.
        """
        if database_wallet is not None:
            pulumi.set(__self__, "database_wallet", database_wallet)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="databaseWallet")
    def database_wallet(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The database wallet configuration zip file.
        """
        return pulumi.get(self, "database_wallet")

    @database_wallet.setter
    def database_wallet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_wallet", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Service name of the database.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)


if not MYPY:
    class ConfigConfigurationDnsConfigurationArgsDict(TypedDict):
        is_override_dns: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) If isOverrideDns is true, then DNS settings will be overridden.
        """
        override_dns_ip: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Attribute to override the DNS IP value. This value will be honored only if isOverrideDns is set to true.
        """
elif False:
    ConfigConfigurationDnsConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationDnsConfigurationArgs:
    def __init__(__self__, *,
                 is_override_dns: Optional[pulumi.Input[bool]] = None,
                 override_dns_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_override_dns: (Updatable) If isOverrideDns is true, then DNS settings will be overridden.
        :param pulumi.Input[str] override_dns_ip: (Updatable) Attribute to override the DNS IP value. This value will be honored only if isOverrideDns is set to true.
        """
        if is_override_dns is not None:
            pulumi.set(__self__, "is_override_dns", is_override_dns)
        if override_dns_ip is not None:
            pulumi.set(__self__, "override_dns_ip", override_dns_ip)

    @property
    @pulumi.getter(name="isOverrideDns")
    def is_override_dns(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) If isOverrideDns is true, then DNS settings will be overridden.
        """
        return pulumi.get(self, "is_override_dns")

    @is_override_dns.setter
    def is_override_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_override_dns", value)

    @property
    @pulumi.getter(name="overrideDnsIp")
    def override_dns_ip(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Attribute to override the DNS IP value. This value will be honored only if isOverrideDns is set to true.
        """
        return pulumi.get(self, "override_dns_ip")

    @override_dns_ip.setter
    def override_dns_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_dns_ip", value)


if not MYPY:
    class ConfigConfigurationFtpBasicAuthenticationDetailsArgsDict(TypedDict):
        password: NotRequired[pulumi.Input['ConfigConfigurationFtpBasicAuthenticationDetailsPasswordArgsDict']]
        """
        (Updatable) Password.
        """
        username: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Username for authentication.
        """
elif False:
    ConfigConfigurationFtpBasicAuthenticationDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationFtpBasicAuthenticationDetailsArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input['ConfigConfigurationFtpBasicAuthenticationDetailsPasswordArgs']] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ConfigConfigurationFtpBasicAuthenticationDetailsPasswordArgs'] password: (Updatable) Password.
        :param pulumi.Input[str] username: (Updatable) Username for authentication.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input['ConfigConfigurationFtpBasicAuthenticationDetailsPasswordArgs']]:
        """
        (Updatable) Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input['ConfigConfigurationFtpBasicAuthenticationDetailsPasswordArgs']]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Username for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class ConfigConfigurationFtpBasicAuthenticationDetailsPasswordArgsDict(TypedDict):
        password: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Password.
        """
        password_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Type of method to pass password.
        """
        vault_secret_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Vault secret OCID.
        """
elif False:
    ConfigConfigurationFtpBasicAuthenticationDetailsPasswordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationFtpBasicAuthenticationDetailsPasswordArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 password_type: Optional[pulumi.Input[str]] = None,
                 vault_secret_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: (Updatable) Password.
        :param pulumi.Input[str] password_type: (Updatable) Type of method to pass password.
        :param pulumi.Input[str] vault_secret_id: (Updatable) Vault secret OCID.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_type is not None:
            pulumi.set(__self__, "password_type", password_type)
        if vault_secret_id is not None:
            pulumi.set(__self__, "vault_secret_id", vault_secret_id)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Type of method to pass password.
        """
        return pulumi.get(self, "password_type")

    @password_type.setter
    def password_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_type", value)

    @property
    @pulumi.getter(name="vaultSecretId")
    def vault_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Vault secret OCID.
        """
        return pulumi.get(self, "vault_secret_id")

    @vault_secret_id.setter
    def vault_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vault_secret_id", value)


if not MYPY:
    class ConfigConfigurationNetworkConfigurationArgsDict(TypedDict):
        number_of_hops: NotRequired[pulumi.Input[int]]
        """
        (Updatable) Number of hops.
        """
        probe_mode: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Type of probe mode when TCP protocol is selected.
        """
        probe_per_hop: NotRequired[pulumi.Input[int]]
        """
        (Updatable) Number of probes per hop.
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Type of protocol.
        """
        transmission_rate: NotRequired[pulumi.Input[int]]
        """
        (Updatable) Number of probe packets sent out simultaneously.
        """
elif False:
    ConfigConfigurationNetworkConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationNetworkConfigurationArgs:
    def __init__(__self__, *,
                 number_of_hops: Optional[pulumi.Input[int]] = None,
                 probe_mode: Optional[pulumi.Input[str]] = None,
                 probe_per_hop: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 transmission_rate: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] number_of_hops: (Updatable) Number of hops.
        :param pulumi.Input[str] probe_mode: (Updatable) Type of probe mode when TCP protocol is selected.
        :param pulumi.Input[int] probe_per_hop: (Updatable) Number of probes per hop.
        :param pulumi.Input[str] protocol: (Updatable) Type of protocol.
        :param pulumi.Input[int] transmission_rate: (Updatable) Number of probe packets sent out simultaneously.
        """
        if number_of_hops is not None:
            pulumi.set(__self__, "number_of_hops", number_of_hops)
        if probe_mode is not None:
            pulumi.set(__self__, "probe_mode", probe_mode)
        if probe_per_hop is not None:
            pulumi.set(__self__, "probe_per_hop", probe_per_hop)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if transmission_rate is not None:
            pulumi.set(__self__, "transmission_rate", transmission_rate)

    @property
    @pulumi.getter(name="numberOfHops")
    def number_of_hops(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Number of hops.
        """
        return pulumi.get(self, "number_of_hops")

    @number_of_hops.setter
    def number_of_hops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_hops", value)

    @property
    @pulumi.getter(name="probeMode")
    def probe_mode(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Type of probe mode when TCP protocol is selected.
        """
        return pulumi.get(self, "probe_mode")

    @probe_mode.setter
    def probe_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probe_mode", value)

    @property
    @pulumi.getter(name="probePerHop")
    def probe_per_hop(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Number of probes per hop.
        """
        return pulumi.get(self, "probe_per_hop")

    @probe_per_hop.setter
    def probe_per_hop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_per_hop", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Type of protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="transmissionRate")
    def transmission_rate(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Number of probe packets sent out simultaneously.
        """
        return pulumi.get(self, "transmission_rate")

    @transmission_rate.setter
    def transmission_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transmission_rate", value)


if not MYPY:
    class ConfigConfigurationReqAuthenticationDetailsArgsDict(TypedDict):
        auth_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationReqAuthenticationDetailsAuthHeaderArgsDict']]]]
        """
        (Updatable) List of authentication headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        """
        auth_request_method: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Request method.
        """
        auth_request_post_body: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Request post body.
        """
        auth_token: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Authentication token.
        """
        auth_url: NotRequired[pulumi.Input[str]]
        """
        (Updatable) URL to get authentication token.
        """
        auth_user_name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) User name for authentication.
        """
        auth_user_password: NotRequired[pulumi.Input[str]]
        """
        (Updatable) User password for authentication.
        """
        oauth_scheme: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Request HTTP OAuth scheme.
        """
elif False:
    ConfigConfigurationReqAuthenticationDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationReqAuthenticationDetailsArgs:
    def __init__(__self__, *,
                 auth_headers: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationReqAuthenticationDetailsAuthHeaderArgs']]]] = None,
                 auth_request_method: Optional[pulumi.Input[str]] = None,
                 auth_request_post_body: Optional[pulumi.Input[str]] = None,
                 auth_token: Optional[pulumi.Input[str]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 auth_user_name: Optional[pulumi.Input[str]] = None,
                 auth_user_password: Optional[pulumi.Input[str]] = None,
                 oauth_scheme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationReqAuthenticationDetailsAuthHeaderArgs']]] auth_headers: (Updatable) List of authentication headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        :param pulumi.Input[str] auth_request_method: (Updatable) Request method.
        :param pulumi.Input[str] auth_request_post_body: (Updatable) Request post body.
        :param pulumi.Input[str] auth_token: (Updatable) Authentication token.
        :param pulumi.Input[str] auth_url: (Updatable) URL to get authentication token.
        :param pulumi.Input[str] auth_user_name: (Updatable) User name for authentication.
        :param pulumi.Input[str] auth_user_password: (Updatable) User password for authentication.
        :param pulumi.Input[str] oauth_scheme: (Updatable) Request HTTP OAuth scheme.
        """
        if auth_headers is not None:
            pulumi.set(__self__, "auth_headers", auth_headers)
        if auth_request_method is not None:
            pulumi.set(__self__, "auth_request_method", auth_request_method)
        if auth_request_post_body is not None:
            pulumi.set(__self__, "auth_request_post_body", auth_request_post_body)
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if auth_user_name is not None:
            pulumi.set(__self__, "auth_user_name", auth_user_name)
        if auth_user_password is not None:
            pulumi.set(__self__, "auth_user_password", auth_user_password)
        if oauth_scheme is not None:
            pulumi.set(__self__, "oauth_scheme", oauth_scheme)

    @property
    @pulumi.getter(name="authHeaders")
    def auth_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationReqAuthenticationDetailsAuthHeaderArgs']]]]:
        """
        (Updatable) List of authentication headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        """
        return pulumi.get(self, "auth_headers")

    @auth_headers.setter
    def auth_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigConfigurationReqAuthenticationDetailsAuthHeaderArgs']]]]):
        pulumi.set(self, "auth_headers", value)

    @property
    @pulumi.getter(name="authRequestMethod")
    def auth_request_method(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Request method.
        """
        return pulumi.get(self, "auth_request_method")

    @auth_request_method.setter
    def auth_request_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_request_method", value)

    @property
    @pulumi.getter(name="authRequestPostBody")
    def auth_request_post_body(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Request post body.
        """
        return pulumi.get(self, "auth_request_post_body")

    @auth_request_post_body.setter
    def auth_request_post_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_request_post_body", value)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Authentication token.
        """
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) URL to get authentication token.
        """
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="authUserName")
    def auth_user_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) User name for authentication.
        """
        return pulumi.get(self, "auth_user_name")

    @auth_user_name.setter
    def auth_user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_user_name", value)

    @property
    @pulumi.getter(name="authUserPassword")
    def auth_user_password(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) User password for authentication.
        """
        return pulumi.get(self, "auth_user_password")

    @auth_user_password.setter
    def auth_user_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_user_password", value)

    @property
    @pulumi.getter(name="oauthScheme")
    def oauth_scheme(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Request HTTP OAuth scheme.
        """
        return pulumi.get(self, "oauth_scheme")

    @oauth_scheme.setter
    def oauth_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_scheme", value)


if not MYPY:
    class ConfigConfigurationReqAuthenticationDetailsAuthHeaderArgsDict(TypedDict):
        header_name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Name of the header.
        """
        header_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Value of the header.
        """
elif False:
    ConfigConfigurationReqAuthenticationDetailsAuthHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationReqAuthenticationDetailsAuthHeaderArgs:
    def __init__(__self__, *,
                 header_name: Optional[pulumi.Input[str]] = None,
                 header_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] header_name: (Updatable) Name of the header.
        :param pulumi.Input[str] header_value: (Updatable) Value of the header.
        """
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Name of the header.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value of the header.
        """
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_value", value)


if not MYPY:
    class ConfigConfigurationRequestHeaderArgsDict(TypedDict):
        header_name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Name of the header.
        """
        header_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Value of the header.
        """
elif False:
    ConfigConfigurationRequestHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationRequestHeaderArgs:
    def __init__(__self__, *,
                 header_name: Optional[pulumi.Input[str]] = None,
                 header_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] header_name: (Updatable) Name of the header.
        :param pulumi.Input[str] header_value: (Updatable) Value of the header.
        """
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Name of the header.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value of the header.
        """
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_value", value)


if not MYPY:
    class ConfigConfigurationRequestQueryParamArgsDict(TypedDict):
        param_name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Name of request query parameter.
        """
        param_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Value of request query parameter.
        """
elif False:
    ConfigConfigurationRequestQueryParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationRequestQueryParamArgs:
    def __init__(__self__, *,
                 param_name: Optional[pulumi.Input[str]] = None,
                 param_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] param_name: (Updatable) Name of request query parameter.
        :param pulumi.Input[str] param_value: (Updatable) Value of request query parameter.
        """
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Name of request query parameter.
        """
        return pulumi.get(self, "param_name")

    @param_name.setter
    def param_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_name", value)

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value of request query parameter.
        """
        return pulumi.get(self, "param_value")

    @param_value.setter
    def param_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_value", value)


if not MYPY:
    class ConfigConfigurationVerifyTextArgsDict(TypedDict):
        text: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Verification text in the response.
        """
elif False:
    ConfigConfigurationVerifyTextArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigConfigurationVerifyTextArgs:
    def __init__(__self__, *,
                 text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] text: (Updatable) Verification text in the response.
        """
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Verification text in the response.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


if not MYPY:
    class ConfigMaintenanceWindowScheduleArgsDict(TypedDict):
        time_ended: NotRequired[pulumi.Input[str]]
        """
        (Updatable) End time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        time_started: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Start time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
elif False:
    ConfigMaintenanceWindowScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigMaintenanceWindowScheduleArgs:
    def __init__(__self__, *,
                 time_ended: Optional[pulumi.Input[str]] = None,
                 time_started: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] time_ended: (Updatable) End time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        :param pulumi.Input[str] time_started: (Updatable) Start time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) End time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        return pulumi.get(self, "time_ended")

    @time_ended.setter
    def time_ended(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_ended", value)

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Start time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        return pulumi.get(self, "time_started")

    @time_started.setter
    def time_started(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_started", value)


if not MYPY:
    class ConfigScriptParameterArgsDict(TypedDict):
        param_name: pulumi.Input[str]
        """
        (Updatable) Name of the parameter.
        """
        param_value: pulumi.Input[str]
        """
        (Updatable) Value of the parameter.
        """
        is_overwritten: NotRequired[pulumi.Input[bool]]
        """
        If parameter value is default or overwritten.
        """
        is_secret: NotRequired[pulumi.Input[bool]]
        """
        Describes if  the parameter value is secret and should be kept confidential. isSecret is specified in either CreateScript or UpdateScript API.
        """
        monitor_script_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['ConfigScriptParameterMonitorScriptParameterArgsDict']]]]
        """
        Details of the script parameter that can be used to overwrite the parameter present in the script.
        """
elif False:
    ConfigScriptParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigScriptParameterArgs:
    def __init__(__self__, *,
                 param_name: pulumi.Input[str],
                 param_value: pulumi.Input[str],
                 is_overwritten: Optional[pulumi.Input[bool]] = None,
                 is_secret: Optional[pulumi.Input[bool]] = None,
                 monitor_script_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigScriptParameterMonitorScriptParameterArgs']]]] = None):
        """
        :param pulumi.Input[str] param_name: (Updatable) Name of the parameter.
        :param pulumi.Input[str] param_value: (Updatable) Value of the parameter.
        :param pulumi.Input[bool] is_overwritten: If parameter value is default or overwritten.
        :param pulumi.Input[bool] is_secret: Describes if  the parameter value is secret and should be kept confidential. isSecret is specified in either CreateScript or UpdateScript API.
        :param pulumi.Input[Sequence[pulumi.Input['ConfigScriptParameterMonitorScriptParameterArgs']]] monitor_script_parameters: Details of the script parameter that can be used to overwrite the parameter present in the script.
        """
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "param_value", param_value)
        if is_overwritten is not None:
            pulumi.set(__self__, "is_overwritten", is_overwritten)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if monitor_script_parameters is not None:
            pulumi.set(__self__, "monitor_script_parameters", monitor_script_parameters)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> pulumi.Input[str]:
        """
        (Updatable) Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @param_name.setter
    def param_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "param_name", value)

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> pulumi.Input[str]:
        """
        (Updatable) Value of the parameter.
        """
        return pulumi.get(self, "param_value")

    @param_value.setter
    def param_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "param_value", value)

    @property
    @pulumi.getter(name="isOverwritten")
    def is_overwritten(self) -> Optional[pulumi.Input[bool]]:
        """
        If parameter value is default or overwritten.
        """
        return pulumi.get(self, "is_overwritten")

    @is_overwritten.setter
    def is_overwritten(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_overwritten", value)

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[pulumi.Input[bool]]:
        """
        Describes if  the parameter value is secret and should be kept confidential. isSecret is specified in either CreateScript or UpdateScript API.
        """
        return pulumi.get(self, "is_secret")

    @is_secret.setter
    def is_secret(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_secret", value)

    @property
    @pulumi.getter(name="monitorScriptParameters")
    def monitor_script_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigScriptParameterMonitorScriptParameterArgs']]]]:
        """
        Details of the script parameter that can be used to overwrite the parameter present in the script.
        """
        return pulumi.get(self, "monitor_script_parameters")

    @monitor_script_parameters.setter
    def monitor_script_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigScriptParameterMonitorScriptParameterArgs']]]]):
        pulumi.set(self, "monitor_script_parameters", value)


if not MYPY:
    class ConfigScriptParameterMonitorScriptParameterArgsDict(TypedDict):
        param_name: NotRequired[pulumi.Input[str]]
        """
        Name of the parameter.
        """
        param_value: NotRequired[pulumi.Input[str]]
        """
        Value of the parameter.
        """
elif False:
    ConfigScriptParameterMonitorScriptParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigScriptParameterMonitorScriptParameterArgs:
    def __init__(__self__, *,
                 param_name: Optional[pulumi.Input[str]] = None,
                 param_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] param_name: Name of the parameter.
        :param pulumi.Input[str] param_value: Value of the parameter.
        """
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @param_name.setter
    def param_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_name", value)

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the parameter.
        """
        return pulumi.get(self, "param_value")

    @param_value.setter
    def param_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_value", value)


if not MYPY:
    class ConfigVantagePointArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the vantage point.
        """
        display_name: NotRequired[pulumi.Input[str]]
        """
        Unique name that can be edited. The name should not contain any confidential information.
        """
        worker_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of workers running the assigned monitor.
        """
elif False:
    ConfigVantagePointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigVantagePointArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None,
                 worker_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Name of the vantage point.
        :param pulumi.Input[str] display_name: Unique name that can be edited. The name should not contain any confidential information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] worker_lists: List of workers running the assigned monitor.
        """
        pulumi.set(__self__, "name", name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if worker_lists is not None:
            pulumi.set(__self__, "worker_lists", worker_lists)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the vantage point.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name that can be edited. The name should not contain any confidential information.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="workerLists")
    def worker_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of workers running the assigned monitor.
        """
        return pulumi.get(self, "worker_lists")

    @worker_lists.setter
    def worker_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "worker_lists", value)


if not MYPY:
    class DedicatedVantagePointDvpStackDetailsArgsDict(TypedDict):
        dvp_stack_id: pulumi.Input[str]
        """
        (Updatable) Stack [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        """
        dvp_stack_type: pulumi.Input[str]
        """
        (Updatable) Type of stack.
        """
        dvp_stream_id: pulumi.Input[str]
        """
        (Updatable) Stream [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        """
        dvp_version: pulumi.Input[str]
        """
        (Updatable) Version of the dedicated vantage point.
        """
elif False:
    DedicatedVantagePointDvpStackDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DedicatedVantagePointDvpStackDetailsArgs:
    def __init__(__self__, *,
                 dvp_stack_id: pulumi.Input[str],
                 dvp_stack_type: pulumi.Input[str],
                 dvp_stream_id: pulumi.Input[str],
                 dvp_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] dvp_stack_id: (Updatable) Stack [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        :param pulumi.Input[str] dvp_stack_type: (Updatable) Type of stack.
        :param pulumi.Input[str] dvp_stream_id: (Updatable) Stream [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        :param pulumi.Input[str] dvp_version: (Updatable) Version of the dedicated vantage point.
        """
        pulumi.set(__self__, "dvp_stack_id", dvp_stack_id)
        pulumi.set(__self__, "dvp_stack_type", dvp_stack_type)
        pulumi.set(__self__, "dvp_stream_id", dvp_stream_id)
        pulumi.set(__self__, "dvp_version", dvp_version)

    @property
    @pulumi.getter(name="dvpStackId")
    def dvp_stack_id(self) -> pulumi.Input[str]:
        """
        (Updatable) Stack [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        """
        return pulumi.get(self, "dvp_stack_id")

    @dvp_stack_id.setter
    def dvp_stack_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dvp_stack_id", value)

    @property
    @pulumi.getter(name="dvpStackType")
    def dvp_stack_type(self) -> pulumi.Input[str]:
        """
        (Updatable) Type of stack.
        """
        return pulumi.get(self, "dvp_stack_type")

    @dvp_stack_type.setter
    def dvp_stack_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "dvp_stack_type", value)

    @property
    @pulumi.getter(name="dvpStreamId")
    def dvp_stream_id(self) -> pulumi.Input[str]:
        """
        (Updatable) Stream [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        """
        return pulumi.get(self, "dvp_stream_id")

    @dvp_stream_id.setter
    def dvp_stream_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dvp_stream_id", value)

    @property
    @pulumi.getter(name="dvpVersion")
    def dvp_version(self) -> pulumi.Input[str]:
        """
        (Updatable) Version of the dedicated vantage point.
        """
        return pulumi.get(self, "dvp_version")

    @dvp_version.setter
    def dvp_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "dvp_version", value)


if not MYPY:
    class DedicatedVantagePointMonitorStatusCountMapArgsDict(TypedDict):
        disabled: NotRequired[pulumi.Input[int]]
        """
        Number of disabled monitors using the script.
        """
        enabled: NotRequired[pulumi.Input[int]]
        """
        Number of enabled monitors using the script.
        """
        invalid: NotRequired[pulumi.Input[int]]
        """
        Number of invalid monitors using the script.
        """
        total: NotRequired[pulumi.Input[int]]
        """
        Total number of monitors using the script.
        """
elif False:
    DedicatedVantagePointMonitorStatusCountMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DedicatedVantagePointMonitorStatusCountMapArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[int]] = None,
                 invalid: Optional[pulumi.Input[int]] = None,
                 total: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] disabled: Number of disabled monitors using the script.
        :param pulumi.Input[int] enabled: Number of enabled monitors using the script.
        :param pulumi.Input[int] invalid: Number of invalid monitors using the script.
        :param pulumi.Input[int] total: Total number of monitors using the script.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if invalid is not None:
            pulumi.set(__self__, "invalid", invalid)
        if total is not None:
            pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[int]]:
        """
        Number of disabled monitors using the script.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[int]]:
        """
        Number of enabled monitors using the script.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def invalid(self) -> Optional[pulumi.Input[int]]:
        """
        Number of invalid monitors using the script.
        """
        return pulumi.get(self, "invalid")

    @invalid.setter
    def invalid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "invalid", value)

    @property
    @pulumi.getter
    def total(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of monitors using the script.
        """
        return pulumi.get(self, "total")

    @total.setter
    def total(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total", value)


if not MYPY:
    class OnPremiseVantagePointWorkerIdentityInfoArgsDict(TypedDict):
        apm_short_id: NotRequired[pulumi.Input[str]]
        """
        Domain short id of the On-premise VP worker.
        """
        collector_end_point: NotRequired[pulumi.Input[str]]
        """
        Collector endpoint of the On-premise VP worker.
        """
        region_name: NotRequired[pulumi.Input[str]]
        """
        Domain region of the On-premise VP worker.
        """
elif False:
    OnPremiseVantagePointWorkerIdentityInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OnPremiseVantagePointWorkerIdentityInfoArgs:
    def __init__(__self__, *,
                 apm_short_id: Optional[pulumi.Input[str]] = None,
                 collector_end_point: Optional[pulumi.Input[str]] = None,
                 region_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] apm_short_id: Domain short id of the On-premise VP worker.
        :param pulumi.Input[str] collector_end_point: Collector endpoint of the On-premise VP worker.
        :param pulumi.Input[str] region_name: Domain region of the On-premise VP worker.
        """
        if apm_short_id is not None:
            pulumi.set(__self__, "apm_short_id", apm_short_id)
        if collector_end_point is not None:
            pulumi.set(__self__, "collector_end_point", collector_end_point)
        if region_name is not None:
            pulumi.set(__self__, "region_name", region_name)

    @property
    @pulumi.getter(name="apmShortId")
    def apm_short_id(self) -> Optional[pulumi.Input[str]]:
        """
        Domain short id of the On-premise VP worker.
        """
        return pulumi.get(self, "apm_short_id")

    @apm_short_id.setter
    def apm_short_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apm_short_id", value)

    @property
    @pulumi.getter(name="collectorEndPoint")
    def collector_end_point(self) -> Optional[pulumi.Input[str]]:
        """
        Collector endpoint of the On-premise VP worker.
        """
        return pulumi.get(self, "collector_end_point")

    @collector_end_point.setter
    def collector_end_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collector_end_point", value)

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> Optional[pulumi.Input[str]]:
        """
        Domain region of the On-premise VP worker.
        """
        return pulumi.get(self, "region_name")

    @region_name.setter
    def region_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_name", value)


if not MYPY:
    class OnPremiseVantagePointWorkerMonitorListArgsDict(TypedDict):
        display_name: NotRequired[pulumi.Input[str]]
        """
        Unique name that can be edited. The name should not contain any confidential information.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitor.
        """
        is_run_now: NotRequired[pulumi.Input[bool]]
        """
        If isRunNow is enabled, then the monitor will run immediately.
        """
        monitor_type: NotRequired[pulumi.Input[str]]
        """
        Type of monitor.
        """
        time_assigned: NotRequired[pulumi.Input[str]]
        """
        The time the resource was last assigned to an On-premise vantage point worker, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
elif False:
    OnPremiseVantagePointWorkerMonitorListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OnPremiseVantagePointWorkerMonitorListArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_run_now: Optional[pulumi.Input[bool]] = None,
                 monitor_type: Optional[pulumi.Input[str]] = None,
                 time_assigned: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: Unique name that can be edited. The name should not contain any confidential information.
        :param pulumi.Input[str] id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitor.
        :param pulumi.Input[bool] is_run_now: If isRunNow is enabled, then the monitor will run immediately.
        :param pulumi.Input[str] monitor_type: Type of monitor.
        :param pulumi.Input[str] time_assigned: The time the resource was last assigned to an On-premise vantage point worker, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_run_now is not None:
            pulumi.set(__self__, "is_run_now", is_run_now)
        if monitor_type is not None:
            pulumi.set(__self__, "monitor_type", monitor_type)
        if time_assigned is not None:
            pulumi.set(__self__, "time_assigned", time_assigned)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name that can be edited. The name should not contain any confidential information.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitor.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isRunNow")
    def is_run_now(self) -> Optional[pulumi.Input[bool]]:
        """
        If isRunNow is enabled, then the monitor will run immediately.
        """
        return pulumi.get(self, "is_run_now")

    @is_run_now.setter
    def is_run_now(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_run_now", value)

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of monitor.
        """
        return pulumi.get(self, "monitor_type")

    @monitor_type.setter
    def monitor_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_type", value)

    @property
    @pulumi.getter(name="timeAssigned")
    def time_assigned(self) -> Optional[pulumi.Input[str]]:
        """
        The time the resource was last assigned to an On-premise vantage point worker, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        return pulumi.get(self, "time_assigned")

    @time_assigned.setter
    def time_assigned(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_assigned", value)


if not MYPY:
    class OnPremiseVantagePointWorkerVersionDetailArgsDict(TypedDict):
        latest_version: NotRequired[pulumi.Input[str]]
        """
        Latest image version of the On-premise VP worker.
        """
        min_supported_version: NotRequired[pulumi.Input[str]]
        """
        Minimum supported image version of the On-premise VP worker.
        """
        version: NotRequired[pulumi.Input[str]]
        """
        Image version of the On-premise VP worker.
        """
elif False:
    OnPremiseVantagePointWorkerVersionDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OnPremiseVantagePointWorkerVersionDetailArgs:
    def __init__(__self__, *,
                 latest_version: Optional[pulumi.Input[str]] = None,
                 min_supported_version: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] latest_version: Latest image version of the On-premise VP worker.
        :param pulumi.Input[str] min_supported_version: Minimum supported image version of the On-premise VP worker.
        :param pulumi.Input[str] version: Image version of the On-premise VP worker.
        """
        if latest_version is not None:
            pulumi.set(__self__, "latest_version", latest_version)
        if min_supported_version is not None:
            pulumi.set(__self__, "min_supported_version", min_supported_version)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> Optional[pulumi.Input[str]]:
        """
        Latest image version of the On-premise VP worker.
        """
        return pulumi.get(self, "latest_version")

    @latest_version.setter
    def latest_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_version", value)

    @property
    @pulumi.getter(name="minSupportedVersion")
    def min_supported_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum supported image version of the On-premise VP worker.
        """
        return pulumi.get(self, "min_supported_version")

    @min_supported_version.setter
    def min_supported_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_supported_version", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Image version of the On-premise VP worker.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class OnPremiseVantagePointWorkersSummaryArgsDict(TypedDict):
        available: NotRequired[pulumi.Input[int]]
        """
        Number of available workers in a specific On-premise vantage point.
        """
        available_capabilities: NotRequired[pulumi.Input[Sequence[pulumi.Input['OnPremiseVantagePointWorkersSummaryAvailableCapabilityArgsDict']]]]
        """
        List of available capabilities in a specific On-premise vantage point.
        """
        disabled: NotRequired[pulumi.Input[int]]
        """
        Number of disabled workers in a specific On-premise vantage point.
        """
        min_version: NotRequired[pulumi.Input[str]]
        """
        Minimum version among the workers in a specific On-premise vantage point.
        """
        total: NotRequired[pulumi.Input[int]]
        """
        Total number of workers in a specific On-premise vantage point.
        """
        used: NotRequired[pulumi.Input[int]]
        """
        Number of occupied workers in a specific On-premise vantage point.
        """
elif False:
    OnPremiseVantagePointWorkersSummaryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OnPremiseVantagePointWorkersSummaryArgs:
    def __init__(__self__, *,
                 available: Optional[pulumi.Input[int]] = None,
                 available_capabilities: Optional[pulumi.Input[Sequence[pulumi.Input['OnPremiseVantagePointWorkersSummaryAvailableCapabilityArgs']]]] = None,
                 disabled: Optional[pulumi.Input[int]] = None,
                 min_version: Optional[pulumi.Input[str]] = None,
                 total: Optional[pulumi.Input[int]] = None,
                 used: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] available: Number of available workers in a specific On-premise vantage point.
        :param pulumi.Input[Sequence[pulumi.Input['OnPremiseVantagePointWorkersSummaryAvailableCapabilityArgs']]] available_capabilities: List of available capabilities in a specific On-premise vantage point.
        :param pulumi.Input[int] disabled: Number of disabled workers in a specific On-premise vantage point.
        :param pulumi.Input[str] min_version: Minimum version among the workers in a specific On-premise vantage point.
        :param pulumi.Input[int] total: Total number of workers in a specific On-premise vantage point.
        :param pulumi.Input[int] used: Number of occupied workers in a specific On-premise vantage point.
        """
        if available is not None:
            pulumi.set(__self__, "available", available)
        if available_capabilities is not None:
            pulumi.set(__self__, "available_capabilities", available_capabilities)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if min_version is not None:
            pulumi.set(__self__, "min_version", min_version)
        if total is not None:
            pulumi.set(__self__, "total", total)
        if used is not None:
            pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def available(self) -> Optional[pulumi.Input[int]]:
        """
        Number of available workers in a specific On-premise vantage point.
        """
        return pulumi.get(self, "available")

    @available.setter
    def available(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "available", value)

    @property
    @pulumi.getter(name="availableCapabilities")
    def available_capabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnPremiseVantagePointWorkersSummaryAvailableCapabilityArgs']]]]:
        """
        List of available capabilities in a specific On-premise vantage point.
        """
        return pulumi.get(self, "available_capabilities")

    @available_capabilities.setter
    def available_capabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnPremiseVantagePointWorkersSummaryAvailableCapabilityArgs']]]]):
        pulumi.set(self, "available_capabilities", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[int]]:
        """
        Number of disabled workers in a specific On-premise vantage point.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="minVersion")
    def min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum version among the workers in a specific On-premise vantage point.
        """
        return pulumi.get(self, "min_version")

    @min_version.setter
    def min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_version", value)

    @property
    @pulumi.getter
    def total(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of workers in a specific On-premise vantage point.
        """
        return pulumi.get(self, "total")

    @total.setter
    def total(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total", value)

    @property
    @pulumi.getter
    def used(self) -> Optional[pulumi.Input[int]]:
        """
        Number of occupied workers in a specific On-premise vantage point.
        """
        return pulumi.get(self, "used")

    @used.setter
    def used(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "used", value)


if not MYPY:
    class OnPremiseVantagePointWorkersSummaryAvailableCapabilityArgsDict(TypedDict):
        capability: NotRequired[pulumi.Input[str]]
        """
        Capability of an On-premise vantage point worker.
        """
        on_premise_vantage_point_count: NotRequired[pulumi.Input[int]]
        """
        Count of available capability in a specific On-premise vantage point.
        """
elif False:
    OnPremiseVantagePointWorkersSummaryAvailableCapabilityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OnPremiseVantagePointWorkersSummaryAvailableCapabilityArgs:
    def __init__(__self__, *,
                 capability: Optional[pulumi.Input[str]] = None,
                 on_premise_vantage_point_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] capability: Capability of an On-premise vantage point worker.
        :param pulumi.Input[int] on_premise_vantage_point_count: Count of available capability in a specific On-premise vantage point.
        """
        if capability is not None:
            pulumi.set(__self__, "capability", capability)
        if on_premise_vantage_point_count is not None:
            pulumi.set(__self__, "on_premise_vantage_point_count", on_premise_vantage_point_count)

    @property
    @pulumi.getter
    def capability(self) -> Optional[pulumi.Input[str]]:
        """
        Capability of an On-premise vantage point worker.
        """
        return pulumi.get(self, "capability")

    @capability.setter
    def capability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability", value)

    @property
    @pulumi.getter(name="onPremiseVantagePointCount")
    def on_premise_vantage_point_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of available capability in a specific On-premise vantage point.
        """
        return pulumi.get(self, "on_premise_vantage_point_count")

    @on_premise_vantage_point_count.setter
    def on_premise_vantage_point_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "on_premise_vantage_point_count", value)


if not MYPY:
    class ScriptMonitorStatusCountMapArgsDict(TypedDict):
        disabled: NotRequired[pulumi.Input[int]]
        """
        Number of disabled monitors using the script.
        """
        enabled: NotRequired[pulumi.Input[int]]
        """
        Number of enabled monitors using the script.
        """
        invalid: NotRequired[pulumi.Input[int]]
        """
        Number of invalid monitors using the script.
        """
        total: NotRequired[pulumi.Input[int]]
        """
        Total number of monitors using the script.
        """
elif False:
    ScriptMonitorStatusCountMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScriptMonitorStatusCountMapArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[int]] = None,
                 invalid: Optional[pulumi.Input[int]] = None,
                 total: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] disabled: Number of disabled monitors using the script.
        :param pulumi.Input[int] enabled: Number of enabled monitors using the script.
        :param pulumi.Input[int] invalid: Number of invalid monitors using the script.
        :param pulumi.Input[int] total: Total number of monitors using the script.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if invalid is not None:
            pulumi.set(__self__, "invalid", invalid)
        if total is not None:
            pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[int]]:
        """
        Number of disabled monitors using the script.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[int]]:
        """
        Number of enabled monitors using the script.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def invalid(self) -> Optional[pulumi.Input[int]]:
        """
        Number of invalid monitors using the script.
        """
        return pulumi.get(self, "invalid")

    @invalid.setter
    def invalid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "invalid", value)

    @property
    @pulumi.getter
    def total(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of monitors using the script.
        """
        return pulumi.get(self, "total")

    @total.setter
    def total(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total", value)


if not MYPY:
    class ScriptParameterArgsDict(TypedDict):
        param_name: pulumi.Input[str]
        """
        (Updatable) Name of the parameter.
        """
        is_overwritten: NotRequired[pulumi.Input[bool]]
        """
        If parameter value is default or overwritten.
        """
        is_secret: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) If the parameter value is secret and should be kept confidential, then set isSecret to true.
        """
        param_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Value of the parameter.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        script_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['ScriptParameterScriptParameterArgsDict']]]]
        """
        Details of the script parameters, paramName must be from the script content and these details can be used to overwrite the default parameter present in the script content.
        """
elif False:
    ScriptParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScriptParameterArgs:
    def __init__(__self__, *,
                 param_name: pulumi.Input[str],
                 is_overwritten: Optional[pulumi.Input[bool]] = None,
                 is_secret: Optional[pulumi.Input[bool]] = None,
                 param_value: Optional[pulumi.Input[str]] = None,
                 script_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ScriptParameterScriptParameterArgs']]]] = None):
        """
        :param pulumi.Input[str] param_name: (Updatable) Name of the parameter.
        :param pulumi.Input[bool] is_overwritten: If parameter value is default or overwritten.
        :param pulumi.Input[bool] is_secret: (Updatable) If the parameter value is secret and should be kept confidential, then set isSecret to true.
        :param pulumi.Input[str] param_value: (Updatable) Value of the parameter.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[Sequence[pulumi.Input['ScriptParameterScriptParameterArgs']]] script_parameters: Details of the script parameters, paramName must be from the script content and these details can be used to overwrite the default parameter present in the script content.
        """
        pulumi.set(__self__, "param_name", param_name)
        if is_overwritten is not None:
            pulumi.set(__self__, "is_overwritten", is_overwritten)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> pulumi.Input[str]:
        """
        (Updatable) Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @param_name.setter
    def param_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "param_name", value)

    @property
    @pulumi.getter(name="isOverwritten")
    def is_overwritten(self) -> Optional[pulumi.Input[bool]]:
        """
        If parameter value is default or overwritten.
        """
        return pulumi.get(self, "is_overwritten")

    @is_overwritten.setter
    def is_overwritten(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_overwritten", value)

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) If the parameter value is secret and should be kept confidential, then set isSecret to true.
        """
        return pulumi.get(self, "is_secret")

    @is_secret.setter
    def is_secret(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_secret", value)

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value of the parameter.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "param_value")

    @param_value.setter
    def param_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_value", value)

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScriptParameterScriptParameterArgs']]]]:
        """
        Details of the script parameters, paramName must be from the script content and these details can be used to overwrite the default parameter present in the script content.
        """
        return pulumi.get(self, "script_parameters")

    @script_parameters.setter
    def script_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScriptParameterScriptParameterArgs']]]]):
        pulumi.set(self, "script_parameters", value)


if not MYPY:
    class ScriptParameterScriptParameterArgsDict(TypedDict):
        is_secret: NotRequired[pulumi.Input[bool]]
        """
        If the parameter value is secret and should be kept confidential, then set isSecret to true.
        """
        param_name: NotRequired[pulumi.Input[str]]
        """
        Name of the parameter.
        """
        param_value: NotRequired[pulumi.Input[str]]
        """
        Value of the parameter.
        """
elif False:
    ScriptParameterScriptParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScriptParameterScriptParameterArgs:
    def __init__(__self__, *,
                 is_secret: Optional[pulumi.Input[bool]] = None,
                 param_name: Optional[pulumi.Input[str]] = None,
                 param_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_secret: If the parameter value is secret and should be kept confidential, then set isSecret to true.
        :param pulumi.Input[str] param_name: Name of the parameter.
        :param pulumi.Input[str] param_value: Value of the parameter.
        """
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[pulumi.Input[bool]]:
        """
        If the parameter value is secret and should be kept confidential, then set isSecret to true.
        """
        return pulumi.get(self, "is_secret")

    @is_secret.setter
    def is_secret(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_secret", value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @param_name.setter
    def param_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_name", value)

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the parameter.
        """
        return pulumi.get(self, "param_value")

    @param_value.setter
    def param_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_value", value)


if not MYPY:
    class GetDedicatedVantagePointsFilterArgsDict(TypedDict):
        name: str
        """
        A filter to return only the resources that match the entire name.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetDedicatedVantagePointsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDedicatedVantagePointsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only the resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only the resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetMonitorsFilterArgsDict(TypedDict):
        name: str
        """
        Name of the vantage point.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetMonitorsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetMonitorsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Name of the vantage point.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the vantage point.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetOnPremiseVantagePointWorkersFilterArgsDict(TypedDict):
        name: str
        """
        A filter to return only the resources that match the entire name.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetOnPremiseVantagePointWorkersFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOnPremiseVantagePointWorkersFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only the resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only the resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetOnPremiseVantagePointsFilterArgsDict(TypedDict):
        name: str
        """
        A filter to return only the resources that match the entire name.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetOnPremiseVantagePointsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOnPremiseVantagePointsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only the resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only the resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetScriptsFilterArgsDict(TypedDict):
        name: str
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetScriptsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetScriptsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetVantagePointsFilterArgsDict(TypedDict):
        name: str
        """
        A filter to return only the resources that match the entire name.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetVantagePointsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVantagePointsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only the resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only the resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


