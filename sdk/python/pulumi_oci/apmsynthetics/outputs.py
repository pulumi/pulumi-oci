# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ConfigAvailabilityConfiguration',
    'ConfigConfiguration',
    'ConfigConfigurationClientCertificateDetails',
    'ConfigConfigurationClientCertificateDetailsClientCertificate',
    'ConfigConfigurationClientCertificateDetailsPrivateKey',
    'ConfigConfigurationDnsConfiguration',
    'ConfigConfigurationNetworkConfiguration',
    'ConfigConfigurationReqAuthenticationDetails',
    'ConfigConfigurationReqAuthenticationDetailsAuthHeader',
    'ConfigConfigurationRequestHeader',
    'ConfigConfigurationRequestQueryParam',
    'ConfigConfigurationVerifyText',
    'ConfigMaintenanceWindowSchedule',
    'ConfigScriptParameter',
    'ConfigScriptParameterMonitorScriptParameter',
    'ConfigVantagePoint',
    'DedicatedVantagePointDvpStackDetails',
    'DedicatedVantagePointMonitorStatusCountMap',
    'ScriptMonitorStatusCountMap',
    'ScriptParameter',
    'ScriptParameterScriptParameter',
    'GetDedicatedVantagePointDvpStackDetailResult',
    'GetDedicatedVantagePointMonitorStatusCountMapResult',
    'GetDedicatedVantagePointsDedicatedVantagePointCollectionResult',
    'GetDedicatedVantagePointsDedicatedVantagePointCollectionItemResult',
    'GetDedicatedVantagePointsDedicatedVantagePointCollectionItemDvpStackDetailResult',
    'GetDedicatedVantagePointsDedicatedVantagePointCollectionItemMonitorStatusCountMapResult',
    'GetDedicatedVantagePointsFilterResult',
    'GetMonitorAvailabilityConfigurationResult',
    'GetMonitorConfigurationResult',
    'GetMonitorConfigurationClientCertificateDetailResult',
    'GetMonitorConfigurationClientCertificateDetailClientCertificateResult',
    'GetMonitorConfigurationClientCertificateDetailPrivateKeyResult',
    'GetMonitorConfigurationDnsConfigurationResult',
    'GetMonitorConfigurationNetworkConfigurationResult',
    'GetMonitorConfigurationReqAuthenticationDetailResult',
    'GetMonitorConfigurationReqAuthenticationDetailAuthHeaderResult',
    'GetMonitorConfigurationRequestHeaderResult',
    'GetMonitorConfigurationRequestQueryParamResult',
    'GetMonitorConfigurationVerifyTextResult',
    'GetMonitorMaintenanceWindowScheduleResult',
    'GetMonitorScriptParameterResult',
    'GetMonitorScriptParameterMonitorScriptParameterResult',
    'GetMonitorVantagePointResult',
    'GetMonitorsFilterResult',
    'GetMonitorsMonitorCollectionResult',
    'GetMonitorsMonitorCollectionItemResult',
    'GetMonitorsMonitorCollectionItemAvailabilityConfigurationResult',
    'GetMonitorsMonitorCollectionItemConfigurationResult',
    'GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailResult',
    'GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailClientCertificateResult',
    'GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailPrivateKeyResult',
    'GetMonitorsMonitorCollectionItemConfigurationDnsConfigurationResult',
    'GetMonitorsMonitorCollectionItemConfigurationNetworkConfigurationResult',
    'GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailResult',
    'GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailAuthHeaderResult',
    'GetMonitorsMonitorCollectionItemConfigurationRequestHeaderResult',
    'GetMonitorsMonitorCollectionItemConfigurationRequestQueryParamResult',
    'GetMonitorsMonitorCollectionItemConfigurationVerifyTextResult',
    'GetMonitorsMonitorCollectionItemMaintenanceWindowScheduleResult',
    'GetMonitorsMonitorCollectionItemScriptParameterResult',
    'GetMonitorsMonitorCollectionItemScriptParameterMonitorScriptParameterResult',
    'GetMonitorsMonitorCollectionItemVantagePointResult',
    'GetResultResultDataSetResult',
    'GetScriptMonitorStatusCountMapResult',
    'GetScriptParameterResult',
    'GetScriptParameterScriptParameterResult',
    'GetScriptsFilterResult',
    'GetScriptsScriptCollectionResult',
    'GetScriptsScriptCollectionItemResult',
    'GetScriptsScriptCollectionItemMonitorStatusCountMapResult',
    'GetScriptsScriptCollectionItemParameterResult',
    'GetScriptsScriptCollectionItemParameterScriptParameterResult',
    'GetVantagePointItemResult',
    'GetVantagePointItemGeoResult',
    'GetVantagePointsFilterResult',
    'GetVantagePointsPublicVantagePointCollectionResult',
    'GetVantagePointsPublicVantagePointCollectionItemResult',
    'GetVantagePointsPublicVantagePointCollectionItemGeoResult',
]

@pulumi.output_type
class ConfigAvailabilityConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxAllowedFailuresPerInterval":
            suggest = "max_allowed_failures_per_interval"
        elif key == "minAllowedRunsPerInterval":
            suggest = "min_allowed_runs_per_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigAvailabilityConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigAvailabilityConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigAvailabilityConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_allowed_failures_per_interval: Optional[int] = None,
                 min_allowed_runs_per_interval: Optional[int] = None):
        """
        :param int max_allowed_failures_per_interval: (Updatable) Intervals with failed runs more than this value will be classified as UNAVAILABLE.
        :param int min_allowed_runs_per_interval: (Updatable) Intervals with runs less than this value will be classified as UNKNOWN and excluded from the availability calculations.
        """
        ConfigAvailabilityConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_allowed_failures_per_interval=max_allowed_failures_per_interval,
            min_allowed_runs_per_interval=min_allowed_runs_per_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_allowed_failures_per_interval: Optional[int] = None,
             min_allowed_runs_per_interval: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxAllowedFailuresPerInterval' in kwargs:
            max_allowed_failures_per_interval = kwargs['maxAllowedFailuresPerInterval']
        if 'minAllowedRunsPerInterval' in kwargs:
            min_allowed_runs_per_interval = kwargs['minAllowedRunsPerInterval']

        if max_allowed_failures_per_interval is not None:
            _setter("max_allowed_failures_per_interval", max_allowed_failures_per_interval)
        if min_allowed_runs_per_interval is not None:
            _setter("min_allowed_runs_per_interval", min_allowed_runs_per_interval)

    @property
    @pulumi.getter(name="maxAllowedFailuresPerInterval")
    def max_allowed_failures_per_interval(self) -> Optional[int]:
        """
        (Updatable) Intervals with failed runs more than this value will be classified as UNAVAILABLE.
        """
        return pulumi.get(self, "max_allowed_failures_per_interval")

    @property
    @pulumi.getter(name="minAllowedRunsPerInterval")
    def min_allowed_runs_per_interval(self) -> Optional[int]:
        """
        (Updatable) Intervals with runs less than this value will be classified as UNKNOWN and excluded from the availability calculations.
        """
        return pulumi.get(self, "min_allowed_runs_per_interval")


@pulumi.output_type
class ConfigConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientCertificateDetails":
            suggest = "client_certificate_details"
        elif key == "configType":
            suggest = "config_type"
        elif key == "dnsConfiguration":
            suggest = "dns_configuration"
        elif key == "isCertificateValidationEnabled":
            suggest = "is_certificate_validation_enabled"
        elif key == "isDefaultSnapshotEnabled":
            suggest = "is_default_snapshot_enabled"
        elif key == "isFailureRetried":
            suggest = "is_failure_retried"
        elif key == "isRedirectionEnabled":
            suggest = "is_redirection_enabled"
        elif key == "networkConfiguration":
            suggest = "network_configuration"
        elif key == "reqAuthenticationDetails":
            suggest = "req_authentication_details"
        elif key == "reqAuthenticationScheme":
            suggest = "req_authentication_scheme"
        elif key == "requestHeaders":
            suggest = "request_headers"
        elif key == "requestMethod":
            suggest = "request_method"
        elif key == "requestPostBody":
            suggest = "request_post_body"
        elif key == "requestQueryParams":
            suggest = "request_query_params"
        elif key == "verifyResponseCodes":
            suggest = "verify_response_codes"
        elif key == "verifyResponseContent":
            suggest = "verify_response_content"
        elif key == "verifyTexts":
            suggest = "verify_texts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_certificate_details: Optional['outputs.ConfigConfigurationClientCertificateDetails'] = None,
                 config_type: Optional[str] = None,
                 dns_configuration: Optional['outputs.ConfigConfigurationDnsConfiguration'] = None,
                 is_certificate_validation_enabled: Optional[bool] = None,
                 is_default_snapshot_enabled: Optional[bool] = None,
                 is_failure_retried: Optional[bool] = None,
                 is_redirection_enabled: Optional[bool] = None,
                 network_configuration: Optional['outputs.ConfigConfigurationNetworkConfiguration'] = None,
                 req_authentication_details: Optional['outputs.ConfigConfigurationReqAuthenticationDetails'] = None,
                 req_authentication_scheme: Optional[str] = None,
                 request_headers: Optional[Sequence['outputs.ConfigConfigurationRequestHeader']] = None,
                 request_method: Optional[str] = None,
                 request_post_body: Optional[str] = None,
                 request_query_params: Optional[Sequence['outputs.ConfigConfigurationRequestQueryParam']] = None,
                 verify_response_codes: Optional[Sequence[str]] = None,
                 verify_response_content: Optional[str] = None,
                 verify_texts: Optional[Sequence['outputs.ConfigConfigurationVerifyText']] = None):
        """
        :param 'ConfigConfigurationClientCertificateDetailsArgs' client_certificate_details: (Updatable) Details for client certificate.
        :param str config_type: (Updatable) Type of configuration.
        :param 'ConfigConfigurationDnsConfigurationArgs' dns_configuration: (Updatable) Information about the DNS settings.
        :param bool is_certificate_validation_enabled: (Updatable) If certificate validation is enabled, then the call will fail in case of certification errors.
        :param bool is_default_snapshot_enabled: (Updatable) If disabled, auto snapshots are not collected.
        :param bool is_failure_retried: (Updatable) If isFailureRetried is enabled, then a failed call will be retried.
        :param bool is_redirection_enabled: (Updatable) If redirection is enabled, then redirects will be allowed while accessing target URL.
        :param 'ConfigConfigurationNetworkConfigurationArgs' network_configuration: (Updatable) Details of the network configuration.
        :param 'ConfigConfigurationReqAuthenticationDetailsArgs' req_authentication_details: (Updatable) Details for request HTTP authentication.
        :param str req_authentication_scheme: (Updatable) Request HTTP authentication scheme.
        :param Sequence['ConfigConfigurationRequestHeaderArgs'] request_headers: (Updatable) List of request headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        :param str request_method: (Updatable) Request HTTP method.
        :param str request_post_body: (Updatable) Request post body content.
        :param Sequence['ConfigConfigurationRequestQueryParamArgs'] request_query_params: (Updatable) List of request query params. Example: `[{"paramName": "sortOrder", "paramValue": "asc"}]`
        :param Sequence[str] verify_response_codes: (Updatable) Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
        :param str verify_response_content: (Updatable) Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
        :param Sequence['ConfigConfigurationVerifyTextArgs'] verify_texts: (Updatable) Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
        """
        ConfigConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_certificate_details=client_certificate_details,
            config_type=config_type,
            dns_configuration=dns_configuration,
            is_certificate_validation_enabled=is_certificate_validation_enabled,
            is_default_snapshot_enabled=is_default_snapshot_enabled,
            is_failure_retried=is_failure_retried,
            is_redirection_enabled=is_redirection_enabled,
            network_configuration=network_configuration,
            req_authentication_details=req_authentication_details,
            req_authentication_scheme=req_authentication_scheme,
            request_headers=request_headers,
            request_method=request_method,
            request_post_body=request_post_body,
            request_query_params=request_query_params,
            verify_response_codes=verify_response_codes,
            verify_response_content=verify_response_content,
            verify_texts=verify_texts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_certificate_details: Optional['outputs.ConfigConfigurationClientCertificateDetails'] = None,
             config_type: Optional[str] = None,
             dns_configuration: Optional['outputs.ConfigConfigurationDnsConfiguration'] = None,
             is_certificate_validation_enabled: Optional[bool] = None,
             is_default_snapshot_enabled: Optional[bool] = None,
             is_failure_retried: Optional[bool] = None,
             is_redirection_enabled: Optional[bool] = None,
             network_configuration: Optional['outputs.ConfigConfigurationNetworkConfiguration'] = None,
             req_authentication_details: Optional['outputs.ConfigConfigurationReqAuthenticationDetails'] = None,
             req_authentication_scheme: Optional[str] = None,
             request_headers: Optional[Sequence['outputs.ConfigConfigurationRequestHeader']] = None,
             request_method: Optional[str] = None,
             request_post_body: Optional[str] = None,
             request_query_params: Optional[Sequence['outputs.ConfigConfigurationRequestQueryParam']] = None,
             verify_response_codes: Optional[Sequence[str]] = None,
             verify_response_content: Optional[str] = None,
             verify_texts: Optional[Sequence['outputs.ConfigConfigurationVerifyText']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientCertificateDetails' in kwargs:
            client_certificate_details = kwargs['clientCertificateDetails']
        if 'configType' in kwargs:
            config_type = kwargs['configType']
        if 'dnsConfiguration' in kwargs:
            dns_configuration = kwargs['dnsConfiguration']
        if 'isCertificateValidationEnabled' in kwargs:
            is_certificate_validation_enabled = kwargs['isCertificateValidationEnabled']
        if 'isDefaultSnapshotEnabled' in kwargs:
            is_default_snapshot_enabled = kwargs['isDefaultSnapshotEnabled']
        if 'isFailureRetried' in kwargs:
            is_failure_retried = kwargs['isFailureRetried']
        if 'isRedirectionEnabled' in kwargs:
            is_redirection_enabled = kwargs['isRedirectionEnabled']
        if 'networkConfiguration' in kwargs:
            network_configuration = kwargs['networkConfiguration']
        if 'reqAuthenticationDetails' in kwargs:
            req_authentication_details = kwargs['reqAuthenticationDetails']
        if 'reqAuthenticationScheme' in kwargs:
            req_authentication_scheme = kwargs['reqAuthenticationScheme']
        if 'requestHeaders' in kwargs:
            request_headers = kwargs['requestHeaders']
        if 'requestMethod' in kwargs:
            request_method = kwargs['requestMethod']
        if 'requestPostBody' in kwargs:
            request_post_body = kwargs['requestPostBody']
        if 'requestQueryParams' in kwargs:
            request_query_params = kwargs['requestQueryParams']
        if 'verifyResponseCodes' in kwargs:
            verify_response_codes = kwargs['verifyResponseCodes']
        if 'verifyResponseContent' in kwargs:
            verify_response_content = kwargs['verifyResponseContent']
        if 'verifyTexts' in kwargs:
            verify_texts = kwargs['verifyTexts']

        if client_certificate_details is not None:
            _setter("client_certificate_details", client_certificate_details)
        if config_type is not None:
            _setter("config_type", config_type)
        if dns_configuration is not None:
            _setter("dns_configuration", dns_configuration)
        if is_certificate_validation_enabled is not None:
            _setter("is_certificate_validation_enabled", is_certificate_validation_enabled)
        if is_default_snapshot_enabled is not None:
            _setter("is_default_snapshot_enabled", is_default_snapshot_enabled)
        if is_failure_retried is not None:
            _setter("is_failure_retried", is_failure_retried)
        if is_redirection_enabled is not None:
            _setter("is_redirection_enabled", is_redirection_enabled)
        if network_configuration is not None:
            _setter("network_configuration", network_configuration)
        if req_authentication_details is not None:
            _setter("req_authentication_details", req_authentication_details)
        if req_authentication_scheme is not None:
            _setter("req_authentication_scheme", req_authentication_scheme)
        if request_headers is not None:
            _setter("request_headers", request_headers)
        if request_method is not None:
            _setter("request_method", request_method)
        if request_post_body is not None:
            _setter("request_post_body", request_post_body)
        if request_query_params is not None:
            _setter("request_query_params", request_query_params)
        if verify_response_codes is not None:
            _setter("verify_response_codes", verify_response_codes)
        if verify_response_content is not None:
            _setter("verify_response_content", verify_response_content)
        if verify_texts is not None:
            _setter("verify_texts", verify_texts)

    @property
    @pulumi.getter(name="clientCertificateDetails")
    def client_certificate_details(self) -> Optional['outputs.ConfigConfigurationClientCertificateDetails']:
        """
        (Updatable) Details for client certificate.
        """
        return pulumi.get(self, "client_certificate_details")

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[str]:
        """
        (Updatable) Type of configuration.
        """
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="dnsConfiguration")
    def dns_configuration(self) -> Optional['outputs.ConfigConfigurationDnsConfiguration']:
        """
        (Updatable) Information about the DNS settings.
        """
        return pulumi.get(self, "dns_configuration")

    @property
    @pulumi.getter(name="isCertificateValidationEnabled")
    def is_certificate_validation_enabled(self) -> Optional[bool]:
        """
        (Updatable) If certificate validation is enabled, then the call will fail in case of certification errors.
        """
        return pulumi.get(self, "is_certificate_validation_enabled")

    @property
    @pulumi.getter(name="isDefaultSnapshotEnabled")
    def is_default_snapshot_enabled(self) -> Optional[bool]:
        """
        (Updatable) If disabled, auto snapshots are not collected.
        """
        return pulumi.get(self, "is_default_snapshot_enabled")

    @property
    @pulumi.getter(name="isFailureRetried")
    def is_failure_retried(self) -> Optional[bool]:
        """
        (Updatable) If isFailureRetried is enabled, then a failed call will be retried.
        """
        return pulumi.get(self, "is_failure_retried")

    @property
    @pulumi.getter(name="isRedirectionEnabled")
    def is_redirection_enabled(self) -> Optional[bool]:
        """
        (Updatable) If redirection is enabled, then redirects will be allowed while accessing target URL.
        """
        return pulumi.get(self, "is_redirection_enabled")

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> Optional['outputs.ConfigConfigurationNetworkConfiguration']:
        """
        (Updatable) Details of the network configuration.
        """
        return pulumi.get(self, "network_configuration")

    @property
    @pulumi.getter(name="reqAuthenticationDetails")
    def req_authentication_details(self) -> Optional['outputs.ConfigConfigurationReqAuthenticationDetails']:
        """
        (Updatable) Details for request HTTP authentication.
        """
        return pulumi.get(self, "req_authentication_details")

    @property
    @pulumi.getter(name="reqAuthenticationScheme")
    def req_authentication_scheme(self) -> Optional[str]:
        """
        (Updatable) Request HTTP authentication scheme.
        """
        return pulumi.get(self, "req_authentication_scheme")

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[Sequence['outputs.ConfigConfigurationRequestHeader']]:
        """
        (Updatable) List of request headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[str]:
        """
        (Updatable) Request HTTP method.
        """
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestPostBody")
    def request_post_body(self) -> Optional[str]:
        """
        (Updatable) Request post body content.
        """
        return pulumi.get(self, "request_post_body")

    @property
    @pulumi.getter(name="requestQueryParams")
    def request_query_params(self) -> Optional[Sequence['outputs.ConfigConfigurationRequestQueryParam']]:
        """
        (Updatable) List of request query params. Example: `[{"paramName": "sortOrder", "paramValue": "asc"}]`
        """
        return pulumi.get(self, "request_query_params")

    @property
    @pulumi.getter(name="verifyResponseCodes")
    def verify_response_codes(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
        """
        return pulumi.get(self, "verify_response_codes")

    @property
    @pulumi.getter(name="verifyResponseContent")
    def verify_response_content(self) -> Optional[str]:
        """
        (Updatable) Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
        """
        return pulumi.get(self, "verify_response_content")

    @property
    @pulumi.getter(name="verifyTexts")
    def verify_texts(self) -> Optional[Sequence['outputs.ConfigConfigurationVerifyText']]:
        """
        (Updatable) Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
        """
        return pulumi.get(self, "verify_texts")


@pulumi.output_type
class ConfigConfigurationClientCertificateDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "privateKey":
            suggest = "private_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationClientCertificateDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationClientCertificateDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationClientCertificateDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_certificate: Optional['outputs.ConfigConfigurationClientCertificateDetailsClientCertificate'] = None,
                 private_key: Optional['outputs.ConfigConfigurationClientCertificateDetailsPrivateKey'] = None):
        """
        :param 'ConfigConfigurationClientCertificateDetailsClientCertificateArgs' client_certificate: (Updatable) Client certificate in PEM format.
        :param 'ConfigConfigurationClientCertificateDetailsPrivateKeyArgs' private_key: (Updatable) The private key associated with the client certificate in PEM format.
        """
        ConfigConfigurationClientCertificateDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_certificate=client_certificate,
            private_key=private_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_certificate: Optional['outputs.ConfigConfigurationClientCertificateDetailsClientCertificate'] = None,
             private_key: Optional['outputs.ConfigConfigurationClientCertificateDetailsPrivateKey'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientCertificate' in kwargs:
            client_certificate = kwargs['clientCertificate']
        if 'privateKey' in kwargs:
            private_key = kwargs['privateKey']

        if client_certificate is not None:
            _setter("client_certificate", client_certificate)
        if private_key is not None:
            _setter("private_key", private_key)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional['outputs.ConfigConfigurationClientCertificateDetailsClientCertificate']:
        """
        (Updatable) Client certificate in PEM format.
        """
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional['outputs.ConfigConfigurationClientCertificateDetailsPrivateKey']:
        """
        (Updatable) The private key associated with the client certificate in PEM format.
        """
        return pulumi.get(self, "private_key")


@pulumi.output_type
class ConfigConfigurationClientCertificateDetailsClientCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileName":
            suggest = "file_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationClientCertificateDetailsClientCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationClientCertificateDetailsClientCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationClientCertificateDetailsClientCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: Optional[str] = None,
                 file_name: Optional[str] = None):
        """
        :param str content: (Updatable) Content of the private key file.
        :param str file_name: (Updatable) Name of the private key file.
        """
        ConfigConfigurationClientCertificateDetailsClientCertificate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            file_name=file_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: Optional[str] = None,
             file_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fileName' in kwargs:
            file_name = kwargs['fileName']

        if content is not None:
            _setter("content", content)
        if file_name is not None:
            _setter("file_name", file_name)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        """
        (Updatable) Content of the private key file.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        """
        (Updatable) Name of the private key file.
        """
        return pulumi.get(self, "file_name")


@pulumi.output_type
class ConfigConfigurationClientCertificateDetailsPrivateKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileName":
            suggest = "file_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationClientCertificateDetailsPrivateKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationClientCertificateDetailsPrivateKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationClientCertificateDetailsPrivateKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: Optional[str] = None,
                 file_name: Optional[str] = None):
        """
        :param str content: (Updatable) Content of the private key file.
        :param str file_name: (Updatable) Name of the private key file.
        """
        ConfigConfigurationClientCertificateDetailsPrivateKey._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            file_name=file_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: Optional[str] = None,
             file_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fileName' in kwargs:
            file_name = kwargs['fileName']

        if content is not None:
            _setter("content", content)
        if file_name is not None:
            _setter("file_name", file_name)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        """
        (Updatable) Content of the private key file.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        """
        (Updatable) Name of the private key file.
        """
        return pulumi.get(self, "file_name")


@pulumi.output_type
class ConfigConfigurationDnsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isOverrideDns":
            suggest = "is_override_dns"
        elif key == "overrideDnsIp":
            suggest = "override_dns_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationDnsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationDnsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationDnsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_override_dns: Optional[bool] = None,
                 override_dns_ip: Optional[str] = None):
        """
        :param bool is_override_dns: (Updatable) If isOverrideDns is true, then DNS settings will be overridden.
        :param str override_dns_ip: (Updatable) Attribute to override the DNS IP value. This value will be honored only if isOverrideDns is set to true.
        """
        ConfigConfigurationDnsConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_override_dns=is_override_dns,
            override_dns_ip=override_dns_ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_override_dns: Optional[bool] = None,
             override_dns_ip: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isOverrideDns' in kwargs:
            is_override_dns = kwargs['isOverrideDns']
        if 'overrideDnsIp' in kwargs:
            override_dns_ip = kwargs['overrideDnsIp']

        if is_override_dns is not None:
            _setter("is_override_dns", is_override_dns)
        if override_dns_ip is not None:
            _setter("override_dns_ip", override_dns_ip)

    @property
    @pulumi.getter(name="isOverrideDns")
    def is_override_dns(self) -> Optional[bool]:
        """
        (Updatable) If isOverrideDns is true, then DNS settings will be overridden.
        """
        return pulumi.get(self, "is_override_dns")

    @property
    @pulumi.getter(name="overrideDnsIp")
    def override_dns_ip(self) -> Optional[str]:
        """
        (Updatable) Attribute to override the DNS IP value. This value will be honored only if isOverrideDns is set to true.
        """
        return pulumi.get(self, "override_dns_ip")


@pulumi.output_type
class ConfigConfigurationNetworkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numberOfHops":
            suggest = "number_of_hops"
        elif key == "probeMode":
            suggest = "probe_mode"
        elif key == "probePerHop":
            suggest = "probe_per_hop"
        elif key == "transmissionRate":
            suggest = "transmission_rate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number_of_hops: Optional[int] = None,
                 probe_mode: Optional[str] = None,
                 probe_per_hop: Optional[int] = None,
                 protocol: Optional[str] = None,
                 transmission_rate: Optional[int] = None):
        """
        :param int number_of_hops: (Updatable) Number of hops.
        :param str probe_mode: (Updatable) Type of probe mode when TCP protocol is selected.
        :param int probe_per_hop: (Updatable) Number of probes per hop.
        :param str protocol: (Updatable) Type of protocol.
        :param int transmission_rate: (Updatable) Number of probe packets sent out simultaneously.
        """
        ConfigConfigurationNetworkConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            number_of_hops=number_of_hops,
            probe_mode=probe_mode,
            probe_per_hop=probe_per_hop,
            protocol=protocol,
            transmission_rate=transmission_rate,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             number_of_hops: Optional[int] = None,
             probe_mode: Optional[str] = None,
             probe_per_hop: Optional[int] = None,
             protocol: Optional[str] = None,
             transmission_rate: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'numberOfHops' in kwargs:
            number_of_hops = kwargs['numberOfHops']
        if 'probeMode' in kwargs:
            probe_mode = kwargs['probeMode']
        if 'probePerHop' in kwargs:
            probe_per_hop = kwargs['probePerHop']
        if 'transmissionRate' in kwargs:
            transmission_rate = kwargs['transmissionRate']

        if number_of_hops is not None:
            _setter("number_of_hops", number_of_hops)
        if probe_mode is not None:
            _setter("probe_mode", probe_mode)
        if probe_per_hop is not None:
            _setter("probe_per_hop", probe_per_hop)
        if protocol is not None:
            _setter("protocol", protocol)
        if transmission_rate is not None:
            _setter("transmission_rate", transmission_rate)

    @property
    @pulumi.getter(name="numberOfHops")
    def number_of_hops(self) -> Optional[int]:
        """
        (Updatable) Number of hops.
        """
        return pulumi.get(self, "number_of_hops")

    @property
    @pulumi.getter(name="probeMode")
    def probe_mode(self) -> Optional[str]:
        """
        (Updatable) Type of probe mode when TCP protocol is selected.
        """
        return pulumi.get(self, "probe_mode")

    @property
    @pulumi.getter(name="probePerHop")
    def probe_per_hop(self) -> Optional[int]:
        """
        (Updatable) Number of probes per hop.
        """
        return pulumi.get(self, "probe_per_hop")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        (Updatable) Type of protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="transmissionRate")
    def transmission_rate(self) -> Optional[int]:
        """
        (Updatable) Number of probe packets sent out simultaneously.
        """
        return pulumi.get(self, "transmission_rate")


@pulumi.output_type
class ConfigConfigurationReqAuthenticationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authHeaders":
            suggest = "auth_headers"
        elif key == "authRequestMethod":
            suggest = "auth_request_method"
        elif key == "authRequestPostBody":
            suggest = "auth_request_post_body"
        elif key == "authToken":
            suggest = "auth_token"
        elif key == "authUrl":
            suggest = "auth_url"
        elif key == "authUserName":
            suggest = "auth_user_name"
        elif key == "authUserPassword":
            suggest = "auth_user_password"
        elif key == "oauthScheme":
            suggest = "oauth_scheme"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationReqAuthenticationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationReqAuthenticationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationReqAuthenticationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_headers: Optional[Sequence['outputs.ConfigConfigurationReqAuthenticationDetailsAuthHeader']] = None,
                 auth_request_method: Optional[str] = None,
                 auth_request_post_body: Optional[str] = None,
                 auth_token: Optional[str] = None,
                 auth_url: Optional[str] = None,
                 auth_user_name: Optional[str] = None,
                 auth_user_password: Optional[str] = None,
                 oauth_scheme: Optional[str] = None):
        """
        :param Sequence['ConfigConfigurationReqAuthenticationDetailsAuthHeaderArgs'] auth_headers: (Updatable) List of authentication headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        :param str auth_request_method: (Updatable) Request method.
        :param str auth_request_post_body: (Updatable) Request post body.
        :param str auth_token: (Updatable) Authentication token.
        :param str auth_url: (Updatable) URL to get authentication token.
        :param str auth_user_name: (Updatable) User name for authentication.
        :param str auth_user_password: (Updatable) User password for authentication.
        :param str oauth_scheme: (Updatable) Request HTTP OAuth scheme.
        """
        ConfigConfigurationReqAuthenticationDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_headers=auth_headers,
            auth_request_method=auth_request_method,
            auth_request_post_body=auth_request_post_body,
            auth_token=auth_token,
            auth_url=auth_url,
            auth_user_name=auth_user_name,
            auth_user_password=auth_user_password,
            oauth_scheme=oauth_scheme,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_headers: Optional[Sequence['outputs.ConfigConfigurationReqAuthenticationDetailsAuthHeader']] = None,
             auth_request_method: Optional[str] = None,
             auth_request_post_body: Optional[str] = None,
             auth_token: Optional[str] = None,
             auth_url: Optional[str] = None,
             auth_user_name: Optional[str] = None,
             auth_user_password: Optional[str] = None,
             oauth_scheme: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authHeaders' in kwargs:
            auth_headers = kwargs['authHeaders']
        if 'authRequestMethod' in kwargs:
            auth_request_method = kwargs['authRequestMethod']
        if 'authRequestPostBody' in kwargs:
            auth_request_post_body = kwargs['authRequestPostBody']
        if 'authToken' in kwargs:
            auth_token = kwargs['authToken']
        if 'authUrl' in kwargs:
            auth_url = kwargs['authUrl']
        if 'authUserName' in kwargs:
            auth_user_name = kwargs['authUserName']
        if 'authUserPassword' in kwargs:
            auth_user_password = kwargs['authUserPassword']
        if 'oauthScheme' in kwargs:
            oauth_scheme = kwargs['oauthScheme']

        if auth_headers is not None:
            _setter("auth_headers", auth_headers)
        if auth_request_method is not None:
            _setter("auth_request_method", auth_request_method)
        if auth_request_post_body is not None:
            _setter("auth_request_post_body", auth_request_post_body)
        if auth_token is not None:
            _setter("auth_token", auth_token)
        if auth_url is not None:
            _setter("auth_url", auth_url)
        if auth_user_name is not None:
            _setter("auth_user_name", auth_user_name)
        if auth_user_password is not None:
            _setter("auth_user_password", auth_user_password)
        if oauth_scheme is not None:
            _setter("oauth_scheme", oauth_scheme)

    @property
    @pulumi.getter(name="authHeaders")
    def auth_headers(self) -> Optional[Sequence['outputs.ConfigConfigurationReqAuthenticationDetailsAuthHeader']]:
        """
        (Updatable) List of authentication headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        """
        return pulumi.get(self, "auth_headers")

    @property
    @pulumi.getter(name="authRequestMethod")
    def auth_request_method(self) -> Optional[str]:
        """
        (Updatable) Request method.
        """
        return pulumi.get(self, "auth_request_method")

    @property
    @pulumi.getter(name="authRequestPostBody")
    def auth_request_post_body(self) -> Optional[str]:
        """
        (Updatable) Request post body.
        """
        return pulumi.get(self, "auth_request_post_body")

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[str]:
        """
        (Updatable) Authentication token.
        """
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[str]:
        """
        (Updatable) URL to get authentication token.
        """
        return pulumi.get(self, "auth_url")

    @property
    @pulumi.getter(name="authUserName")
    def auth_user_name(self) -> Optional[str]:
        """
        (Updatable) User name for authentication.
        """
        return pulumi.get(self, "auth_user_name")

    @property
    @pulumi.getter(name="authUserPassword")
    def auth_user_password(self) -> Optional[str]:
        """
        (Updatable) User password for authentication.
        """
        return pulumi.get(self, "auth_user_password")

    @property
    @pulumi.getter(name="oauthScheme")
    def oauth_scheme(self) -> Optional[str]:
        """
        (Updatable) Request HTTP OAuth scheme.
        """
        return pulumi.get(self, "oauth_scheme")


@pulumi.output_type
class ConfigConfigurationReqAuthenticationDetailsAuthHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerName":
            suggest = "header_name"
        elif key == "headerValue":
            suggest = "header_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationReqAuthenticationDetailsAuthHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationReqAuthenticationDetailsAuthHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationReqAuthenticationDetailsAuthHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 header_value: Optional[str] = None):
        """
        :param str header_name: (Updatable) Name of the header.
        :param str header_value: (Updatable) Value of the header.
        """
        ConfigConfigurationReqAuthenticationDetailsAuthHeader._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_name=header_name,
            header_value=header_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_name: Optional[str] = None,
             header_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'headerValue' in kwargs:
            header_value = kwargs['headerValue']

        if header_name is not None:
            _setter("header_name", header_name)
        if header_value is not None:
            _setter("header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        """
        (Updatable) Name of the header.
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        """
        (Updatable) Value of the header.
        """
        return pulumi.get(self, "header_value")


@pulumi.output_type
class ConfigConfigurationRequestHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerName":
            suggest = "header_name"
        elif key == "headerValue":
            suggest = "header_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationRequestHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationRequestHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationRequestHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 header_value: Optional[str] = None):
        """
        :param str header_name: (Updatable) Name of the header.
        :param str header_value: (Updatable) Value of the header.
        """
        ConfigConfigurationRequestHeader._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_name=header_name,
            header_value=header_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_name: Optional[str] = None,
             header_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'headerValue' in kwargs:
            header_value = kwargs['headerValue']

        if header_name is not None:
            _setter("header_name", header_name)
        if header_value is not None:
            _setter("header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        """
        (Updatable) Name of the header.
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        """
        (Updatable) Value of the header.
        """
        return pulumi.get(self, "header_value")


@pulumi.output_type
class ConfigConfigurationRequestQueryParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paramName":
            suggest = "param_name"
        elif key == "paramValue":
            suggest = "param_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationRequestQueryParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationRequestQueryParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationRequestQueryParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None):
        """
        :param str param_name: (Updatable) Name of the parameter.
        :param str param_value: (Updatable) Value of the parameter.
        """
        ConfigConfigurationRequestQueryParam._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            param_name=param_name,
            param_value=param_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             param_name: Optional[str] = None,
             param_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']

        if param_name is not None:
            _setter("param_name", param_name)
        if param_value is not None:
            _setter("param_value", param_value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        """
        (Updatable) Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        """
        (Updatable) Value of the parameter.
        """
        return pulumi.get(self, "param_value")


@pulumi.output_type
class ConfigConfigurationVerifyText(dict):
    def __init__(__self__, *,
                 text: Optional[str] = None):
        """
        :param str text: (Updatable) Verification text in the response.
        """
        ConfigConfigurationVerifyText._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            text=text,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             text: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if text is not None:
            _setter("text", text)

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        """
        (Updatable) Verification text in the response.
        """
        return pulumi.get(self, "text")


@pulumi.output_type
class ConfigMaintenanceWindowSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeEnded":
            suggest = "time_ended"
        elif key == "timeStarted":
            suggest = "time_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigMaintenanceWindowSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigMaintenanceWindowSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigMaintenanceWindowSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None):
        """
        :param str time_ended: (Updatable) End time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        :param str time_started: (Updatable) Start time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        ConfigMaintenanceWindowSchedule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            time_ended=time_ended,
            time_started=time_started,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             time_ended: Optional[str] = None,
             time_started: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'timeEnded' in kwargs:
            time_ended = kwargs['timeEnded']
        if 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']

        if time_ended is not None:
            _setter("time_ended", time_ended)
        if time_started is not None:
            _setter("time_started", time_started)

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        """
        (Updatable) End time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        """
        (Updatable) Start time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class ConfigScriptParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paramName":
            suggest = "param_name"
        elif key == "paramValue":
            suggest = "param_value"
        elif key == "isOverwritten":
            suggest = "is_overwritten"
        elif key == "isSecret":
            suggest = "is_secret"
        elif key == "monitorScriptParameters":
            suggest = "monitor_script_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigScriptParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigScriptParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigScriptParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 param_name: str,
                 param_value: str,
                 is_overwritten: Optional[bool] = None,
                 is_secret: Optional[bool] = None,
                 monitor_script_parameters: Optional[Sequence['outputs.ConfigScriptParameterMonitorScriptParameter']] = None):
        """
        :param str param_name: (Updatable) Name of the parameter.
        :param str param_value: (Updatable) Value of the parameter.
        :param bool is_overwritten: If parameter value is default or overwritten.
        :param bool is_secret: Describes if  the parameter value is secret and should be kept confidential. isSecret is specified in either CreateScript or UpdateScript API.
        :param Sequence['ConfigScriptParameterMonitorScriptParameterArgs'] monitor_script_parameters: Details of the script parameter that can be used to overwrite the parameter present in the script.
        """
        ConfigScriptParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            param_name=param_name,
            param_value=param_value,
            is_overwritten=is_overwritten,
            is_secret=is_secret,
            monitor_script_parameters=monitor_script_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             param_name: str,
             param_value: str,
             is_overwritten: Optional[bool] = None,
             is_secret: Optional[bool] = None,
             monitor_script_parameters: Optional[Sequence['outputs.ConfigScriptParameterMonitorScriptParameter']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']
        if 'isOverwritten' in kwargs:
            is_overwritten = kwargs['isOverwritten']
        if 'isSecret' in kwargs:
            is_secret = kwargs['isSecret']
        if 'monitorScriptParameters' in kwargs:
            monitor_script_parameters = kwargs['monitorScriptParameters']

        _setter("param_name", param_name)
        _setter("param_value", param_value)
        if is_overwritten is not None:
            _setter("is_overwritten", is_overwritten)
        if is_secret is not None:
            _setter("is_secret", is_secret)
        if monitor_script_parameters is not None:
            _setter("monitor_script_parameters", monitor_script_parameters)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        (Updatable) Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> str:
        """
        (Updatable) Value of the parameter.
        """
        return pulumi.get(self, "param_value")

    @property
    @pulumi.getter(name="isOverwritten")
    def is_overwritten(self) -> Optional[bool]:
        """
        If parameter value is default or overwritten.
        """
        return pulumi.get(self, "is_overwritten")

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[bool]:
        """
        Describes if  the parameter value is secret and should be kept confidential. isSecret is specified in either CreateScript or UpdateScript API.
        """
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="monitorScriptParameters")
    def monitor_script_parameters(self) -> Optional[Sequence['outputs.ConfigScriptParameterMonitorScriptParameter']]:
        """
        Details of the script parameter that can be used to overwrite the parameter present in the script.
        """
        return pulumi.get(self, "monitor_script_parameters")


@pulumi.output_type
class ConfigScriptParameterMonitorScriptParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paramName":
            suggest = "param_name"
        elif key == "paramValue":
            suggest = "param_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigScriptParameterMonitorScriptParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigScriptParameterMonitorScriptParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigScriptParameterMonitorScriptParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None):
        """
        :param str param_name: (Updatable) Name of the parameter.
        :param str param_value: (Updatable) Value of the parameter.
        """
        ConfigScriptParameterMonitorScriptParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            param_name=param_name,
            param_value=param_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             param_name: Optional[str] = None,
             param_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']

        if param_name is not None:
            _setter("param_name", param_name)
        if param_value is not None:
            _setter("param_value", param_value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        """
        (Updatable) Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        """
        (Updatable) Value of the parameter.
        """
        return pulumi.get(self, "param_value")


@pulumi.output_type
class ConfigVantagePoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigVantagePoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigVantagePoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigVantagePoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 display_name: Optional[str] = None):
        """
        :param str name: Name of the vantage point.
        :param str display_name: Unique name that can be edited. The name should not contain any confidential information.
        """
        ConfigVantagePoint._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            display_name=display_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             display_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']

        _setter("name", name)
        if display_name is not None:
            _setter("display_name", display_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the vantage point.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Unique name that can be edited. The name should not contain any confidential information.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DedicatedVantagePointDvpStackDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dvpStackId":
            suggest = "dvp_stack_id"
        elif key == "dvpStackType":
            suggest = "dvp_stack_type"
        elif key == "dvpStreamId":
            suggest = "dvp_stream_id"
        elif key == "dvpVersion":
            suggest = "dvp_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DedicatedVantagePointDvpStackDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DedicatedVantagePointDvpStackDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DedicatedVantagePointDvpStackDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dvp_stack_id: str,
                 dvp_stack_type: str,
                 dvp_stream_id: str,
                 dvp_version: str):
        """
        :param str dvp_stack_id: (Updatable) Stack [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        :param str dvp_stack_type: (Updatable) Type of stack.
        :param str dvp_stream_id: (Updatable) Stream [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        :param str dvp_version: (Updatable) Version of the dedicated vantage point.
        """
        DedicatedVantagePointDvpStackDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dvp_stack_id=dvp_stack_id,
            dvp_stack_type=dvp_stack_type,
            dvp_stream_id=dvp_stream_id,
            dvp_version=dvp_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dvp_stack_id: str,
             dvp_stack_type: str,
             dvp_stream_id: str,
             dvp_version: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dvpStackId' in kwargs:
            dvp_stack_id = kwargs['dvpStackId']
        if 'dvpStackType' in kwargs:
            dvp_stack_type = kwargs['dvpStackType']
        if 'dvpStreamId' in kwargs:
            dvp_stream_id = kwargs['dvpStreamId']
        if 'dvpVersion' in kwargs:
            dvp_version = kwargs['dvpVersion']

        _setter("dvp_stack_id", dvp_stack_id)
        _setter("dvp_stack_type", dvp_stack_type)
        _setter("dvp_stream_id", dvp_stream_id)
        _setter("dvp_version", dvp_version)

    @property
    @pulumi.getter(name="dvpStackId")
    def dvp_stack_id(self) -> str:
        """
        (Updatable) Stack [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        """
        return pulumi.get(self, "dvp_stack_id")

    @property
    @pulumi.getter(name="dvpStackType")
    def dvp_stack_type(self) -> str:
        """
        (Updatable) Type of stack.
        """
        return pulumi.get(self, "dvp_stack_type")

    @property
    @pulumi.getter(name="dvpStreamId")
    def dvp_stream_id(self) -> str:
        """
        (Updatable) Stream [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        """
        return pulumi.get(self, "dvp_stream_id")

    @property
    @pulumi.getter(name="dvpVersion")
    def dvp_version(self) -> str:
        """
        (Updatable) Version of the dedicated vantage point.
        """
        return pulumi.get(self, "dvp_version")


@pulumi.output_type
class DedicatedVantagePointMonitorStatusCountMap(dict):
    def __init__(__self__, *,
                 disabled: Optional[int] = None,
                 enabled: Optional[int] = None,
                 invalid: Optional[int] = None,
                 total: Optional[int] = None):
        """
        :param int disabled: Number of disabled monitors using the script.
        :param int enabled: Number of enabled monitors using the script.
        :param int invalid: Number of invalid monitors using the script.
        :param int total: Total number of monitors using the script.
        """
        DedicatedVantagePointMonitorStatusCountMap._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disabled=disabled,
            enabled=enabled,
            invalid=invalid,
            total=total,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disabled: Optional[int] = None,
             enabled: Optional[int] = None,
             invalid: Optional[int] = None,
             total: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if disabled is not None:
            _setter("disabled", disabled)
        if enabled is not None:
            _setter("enabled", enabled)
        if invalid is not None:
            _setter("invalid", invalid)
        if total is not None:
            _setter("total", total)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[int]:
        """
        Number of disabled monitors using the script.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[int]:
        """
        Number of enabled monitors using the script.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def invalid(self) -> Optional[int]:
        """
        Number of invalid monitors using the script.
        """
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        """
        Total number of monitors using the script.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class ScriptMonitorStatusCountMap(dict):
    def __init__(__self__, *,
                 disabled: Optional[int] = None,
                 enabled: Optional[int] = None,
                 invalid: Optional[int] = None,
                 total: Optional[int] = None):
        """
        :param int disabled: Number of disabled monitors using the script.
        :param int enabled: Number of enabled monitors using the script.
        :param int invalid: Number of invalid monitors using the script.
        :param int total: Total number of monitors using the script.
        """
        ScriptMonitorStatusCountMap._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disabled=disabled,
            enabled=enabled,
            invalid=invalid,
            total=total,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disabled: Optional[int] = None,
             enabled: Optional[int] = None,
             invalid: Optional[int] = None,
             total: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if disabled is not None:
            _setter("disabled", disabled)
        if enabled is not None:
            _setter("enabled", enabled)
        if invalid is not None:
            _setter("invalid", invalid)
        if total is not None:
            _setter("total", total)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[int]:
        """
        Number of disabled monitors using the script.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[int]:
        """
        Number of enabled monitors using the script.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def invalid(self) -> Optional[int]:
        """
        Number of invalid monitors using the script.
        """
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        """
        Total number of monitors using the script.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class ScriptParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paramName":
            suggest = "param_name"
        elif key == "isOverwritten":
            suggest = "is_overwritten"
        elif key == "isSecret":
            suggest = "is_secret"
        elif key == "paramValue":
            suggest = "param_value"
        elif key == "scriptParameters":
            suggest = "script_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScriptParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScriptParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScriptParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 param_name: str,
                 is_overwritten: Optional[bool] = None,
                 is_secret: Optional[bool] = None,
                 param_value: Optional[str] = None,
                 script_parameters: Optional[Sequence['outputs.ScriptParameterScriptParameter']] = None):
        """
        :param str param_name: (Updatable) Name of the parameter.
        :param bool is_overwritten: If parameter value is default or overwritten.
        :param bool is_secret: (Updatable) If the parameter value is secret and should be kept confidential, then set isSecret to true.
        :param str param_value: (Updatable) Value of the parameter.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param Sequence['ScriptParameterScriptParameterArgs'] script_parameters: Details of the script parameters, paramName must be from the script content and these details can be used to overwrite the default parameter present in the script content.
        """
        ScriptParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            param_name=param_name,
            is_overwritten=is_overwritten,
            is_secret=is_secret,
            param_value=param_value,
            script_parameters=script_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             param_name: str,
             is_overwritten: Optional[bool] = None,
             is_secret: Optional[bool] = None,
             param_value: Optional[str] = None,
             script_parameters: Optional[Sequence['outputs.ScriptParameterScriptParameter']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'isOverwritten' in kwargs:
            is_overwritten = kwargs['isOverwritten']
        if 'isSecret' in kwargs:
            is_secret = kwargs['isSecret']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']
        if 'scriptParameters' in kwargs:
            script_parameters = kwargs['scriptParameters']

        _setter("param_name", param_name)
        if is_overwritten is not None:
            _setter("is_overwritten", is_overwritten)
        if is_secret is not None:
            _setter("is_secret", is_secret)
        if param_value is not None:
            _setter("param_value", param_value)
        if script_parameters is not None:
            _setter("script_parameters", script_parameters)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        (Updatable) Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="isOverwritten")
    def is_overwritten(self) -> Optional[bool]:
        """
        If parameter value is default or overwritten.
        """
        return pulumi.get(self, "is_overwritten")

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[bool]:
        """
        (Updatable) If the parameter value is secret and should be kept confidential, then set isSecret to true.
        """
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        """
        (Updatable) Value of the parameter.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "param_value")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[Sequence['outputs.ScriptParameterScriptParameter']]:
        """
        Details of the script parameters, paramName must be from the script content and these details can be used to overwrite the default parameter present in the script content.
        """
        return pulumi.get(self, "script_parameters")


@pulumi.output_type
class ScriptParameterScriptParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSecret":
            suggest = "is_secret"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "paramValue":
            suggest = "param_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScriptParameterScriptParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScriptParameterScriptParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScriptParameterScriptParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_secret: Optional[bool] = None,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None):
        """
        :param bool is_secret: (Updatable) If the parameter value is secret and should be kept confidential, then set isSecret to true.
        :param str param_name: (Updatable) Name of the parameter.
        :param str param_value: (Updatable) Value of the parameter.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ScriptParameterScriptParameter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_secret=is_secret,
            param_name=param_name,
            param_value=param_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_secret: Optional[bool] = None,
             param_name: Optional[str] = None,
             param_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isSecret' in kwargs:
            is_secret = kwargs['isSecret']
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']

        if is_secret is not None:
            _setter("is_secret", is_secret)
        if param_name is not None:
            _setter("param_name", param_name)
        if param_value is not None:
            _setter("param_value", param_value)

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[bool]:
        """
        (Updatable) If the parameter value is secret and should be kept confidential, then set isSecret to true.
        """
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        """
        (Updatable) Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        """
        (Updatable) Value of the parameter.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetDedicatedVantagePointDvpStackDetailResult(dict):
    def __init__(__self__, *,
                 dvp_stack_id: str,
                 dvp_stack_type: str,
                 dvp_stream_id: str,
                 dvp_version: str):
        """
        :param str dvp_stack_id: Stack [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        :param str dvp_stack_type: Type of stack.
        :param str dvp_stream_id: Stream [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        :param str dvp_version: Version of the dedicated vantage point.
        """
        GetDedicatedVantagePointDvpStackDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dvp_stack_id=dvp_stack_id,
            dvp_stack_type=dvp_stack_type,
            dvp_stream_id=dvp_stream_id,
            dvp_version=dvp_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dvp_stack_id: str,
             dvp_stack_type: str,
             dvp_stream_id: str,
             dvp_version: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dvpStackId' in kwargs:
            dvp_stack_id = kwargs['dvpStackId']
        if 'dvpStackType' in kwargs:
            dvp_stack_type = kwargs['dvpStackType']
        if 'dvpStreamId' in kwargs:
            dvp_stream_id = kwargs['dvpStreamId']
        if 'dvpVersion' in kwargs:
            dvp_version = kwargs['dvpVersion']

        _setter("dvp_stack_id", dvp_stack_id)
        _setter("dvp_stack_type", dvp_stack_type)
        _setter("dvp_stream_id", dvp_stream_id)
        _setter("dvp_version", dvp_version)

    @property
    @pulumi.getter(name="dvpStackId")
    def dvp_stack_id(self) -> str:
        """
        Stack [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        """
        return pulumi.get(self, "dvp_stack_id")

    @property
    @pulumi.getter(name="dvpStackType")
    def dvp_stack_type(self) -> str:
        """
        Type of stack.
        """
        return pulumi.get(self, "dvp_stack_type")

    @property
    @pulumi.getter(name="dvpStreamId")
    def dvp_stream_id(self) -> str:
        """
        Stream [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        """
        return pulumi.get(self, "dvp_stream_id")

    @property
    @pulumi.getter(name="dvpVersion")
    def dvp_version(self) -> str:
        """
        Version of the dedicated vantage point.
        """
        return pulumi.get(self, "dvp_version")


@pulumi.output_type
class GetDedicatedVantagePointMonitorStatusCountMapResult(dict):
    def __init__(__self__, *,
                 disabled: int,
                 enabled: int,
                 invalid: int,
                 total: int):
        """
        :param int disabled: Number of disabled monitors using the script.
        :param int enabled: Number of enabled monitors using the script.
        :param int invalid: Number of invalid monitors using the script.
        :param int total: Total number of monitors using the script.
        """
        GetDedicatedVantagePointMonitorStatusCountMapResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disabled=disabled,
            enabled=enabled,
            invalid=invalid,
            total=total,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disabled: int,
             enabled: int,
             invalid: int,
             total: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("disabled", disabled)
        _setter("enabled", enabled)
        _setter("invalid", invalid)
        _setter("total", total)

    @property
    @pulumi.getter
    def disabled(self) -> int:
        """
        Number of disabled monitors using the script.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> int:
        """
        Number of enabled monitors using the script.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def invalid(self) -> int:
        """
        Number of invalid monitors using the script.
        """
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total number of monitors using the script.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetDedicatedVantagePointsDedicatedVantagePointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDedicatedVantagePointsDedicatedVantagePointCollectionItemResult']):
        GetDedicatedVantagePointsDedicatedVantagePointCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetDedicatedVantagePointsDedicatedVantagePointCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDedicatedVantagePointsDedicatedVantagePointCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDedicatedVantagePointsDedicatedVantagePointCollectionItemResult(dict):
    def __init__(__self__, *,
                 apm_domain_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 dvp_stack_details: Sequence['outputs.GetDedicatedVantagePointsDedicatedVantagePointCollectionItemDvpStackDetailResult'],
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 monitor_status_count_maps: Sequence['outputs.GetDedicatedVantagePointsDedicatedVantagePointCollectionItemMonitorStatusCountMapResult'],
                 name: str,
                 region: str,
                 status: str,
                 time_created: str,
                 time_updated: str):
        """
        :param str apm_domain_id: The APM domain ID the request is intended for.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str display_name: A filter to return only the resources that match the entire display name.
        :param Sequence['GetDedicatedVantagePointsDedicatedVantagePointCollectionItemDvpStackDetailArgs'] dvp_stack_details: Details of a Dedicated Vantage Point (DVP) stack in Resource Manager.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dedicated vantage point.
        :param Sequence['GetDedicatedVantagePointsDedicatedVantagePointCollectionItemMonitorStatusCountMapArgs'] monitor_status_count_maps: Details of the monitor count per state. Example: `{ "total" : 5, "enabled" : 3 , "disabled" : 2, "invalid" : 0 }`
        :param str name: A filter to return only the resources that match the entire name.
        :param str region: Name of the region.
        :param str status: A filter to return only the dedicated vantage points that match a given status.
        :param str time_created: The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        :param str time_updated: The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
        """
        GetDedicatedVantagePointsDedicatedVantagePointCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            apm_domain_id=apm_domain_id,
            defined_tags=defined_tags,
            display_name=display_name,
            dvp_stack_details=dvp_stack_details,
            freeform_tags=freeform_tags,
            id=id,
            monitor_status_count_maps=monitor_status_count_maps,
            name=name,
            region=region,
            status=status,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             apm_domain_id: str,
             defined_tags: Mapping[str, Any],
             display_name: str,
             dvp_stack_details: Sequence['outputs.GetDedicatedVantagePointsDedicatedVantagePointCollectionItemDvpStackDetailResult'],
             freeform_tags: Mapping[str, Any],
             id: str,
             monitor_status_count_maps: Sequence['outputs.GetDedicatedVantagePointsDedicatedVantagePointCollectionItemMonitorStatusCountMapResult'],
             name: str,
             region: str,
             status: str,
             time_created: str,
             time_updated: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apmDomainId' in kwargs:
            apm_domain_id = kwargs['apmDomainId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'dvpStackDetails' in kwargs:
            dvp_stack_details = kwargs['dvpStackDetails']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'monitorStatusCountMaps' in kwargs:
            monitor_status_count_maps = kwargs['monitorStatusCountMaps']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']

        _setter("apm_domain_id", apm_domain_id)
        _setter("defined_tags", defined_tags)
        _setter("display_name", display_name)
        _setter("dvp_stack_details", dvp_stack_details)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("monitor_status_count_maps", monitor_status_count_maps)
        _setter("name", name)
        _setter("region", region)
        _setter("status", status)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="apmDomainId")
    def apm_domain_id(self) -> str:
        """
        The APM domain ID the request is intended for.
        """
        return pulumi.get(self, "apm_domain_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only the resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dvpStackDetails")
    def dvp_stack_details(self) -> Sequence['outputs.GetDedicatedVantagePointsDedicatedVantagePointCollectionItemDvpStackDetailResult']:
        """
        Details of a Dedicated Vantage Point (DVP) stack in Resource Manager.
        """
        return pulumi.get(self, "dvp_stack_details")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dedicated vantage point.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monitorStatusCountMaps")
    def monitor_status_count_maps(self) -> Sequence['outputs.GetDedicatedVantagePointsDedicatedVantagePointCollectionItemMonitorStatusCountMapResult']:
        """
        Details of the monitor count per state. Example: `{ "total" : 5, "enabled" : 3 , "disabled" : 2, "invalid" : 0 }`
        """
        return pulumi.get(self, "monitor_status_count_maps")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only the resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Name of the region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A filter to return only the dedicated vantage points that match a given status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDedicatedVantagePointsDedicatedVantagePointCollectionItemDvpStackDetailResult(dict):
    def __init__(__self__, *,
                 dvp_stack_id: str,
                 dvp_stack_type: str,
                 dvp_stream_id: str,
                 dvp_version: str):
        """
        :param str dvp_stack_id: Stack [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        :param str dvp_stack_type: Type of stack.
        :param str dvp_stream_id: Stream [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        :param str dvp_version: Version of the dedicated vantage point.
        """
        GetDedicatedVantagePointsDedicatedVantagePointCollectionItemDvpStackDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dvp_stack_id=dvp_stack_id,
            dvp_stack_type=dvp_stack_type,
            dvp_stream_id=dvp_stream_id,
            dvp_version=dvp_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dvp_stack_id: str,
             dvp_stack_type: str,
             dvp_stream_id: str,
             dvp_version: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dvpStackId' in kwargs:
            dvp_stack_id = kwargs['dvpStackId']
        if 'dvpStackType' in kwargs:
            dvp_stack_type = kwargs['dvpStackType']
        if 'dvpStreamId' in kwargs:
            dvp_stream_id = kwargs['dvpStreamId']
        if 'dvpVersion' in kwargs:
            dvp_version = kwargs['dvpVersion']

        _setter("dvp_stack_id", dvp_stack_id)
        _setter("dvp_stack_type", dvp_stack_type)
        _setter("dvp_stream_id", dvp_stream_id)
        _setter("dvp_version", dvp_version)

    @property
    @pulumi.getter(name="dvpStackId")
    def dvp_stack_id(self) -> str:
        """
        Stack [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        """
        return pulumi.get(self, "dvp_stack_id")

    @property
    @pulumi.getter(name="dvpStackType")
    def dvp_stack_type(self) -> str:
        """
        Type of stack.
        """
        return pulumi.get(self, "dvp_stack_type")

    @property
    @pulumi.getter(name="dvpStreamId")
    def dvp_stream_id(self) -> str:
        """
        Stream [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Resource Manager stack for dedicated vantage point.
        """
        return pulumi.get(self, "dvp_stream_id")

    @property
    @pulumi.getter(name="dvpVersion")
    def dvp_version(self) -> str:
        """
        Version of the dedicated vantage point.
        """
        return pulumi.get(self, "dvp_version")


@pulumi.output_type
class GetDedicatedVantagePointsDedicatedVantagePointCollectionItemMonitorStatusCountMapResult(dict):
    def __init__(__self__, *,
                 disabled: int,
                 enabled: int,
                 invalid: int,
                 total: int):
        """
        :param int disabled: Number of disabled monitors using the script.
        :param int enabled: Number of enabled monitors using the script.
        :param int invalid: Number of invalid monitors using the script.
        :param int total: Total number of monitors using the script.
        """
        GetDedicatedVantagePointsDedicatedVantagePointCollectionItemMonitorStatusCountMapResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disabled=disabled,
            enabled=enabled,
            invalid=invalid,
            total=total,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disabled: int,
             enabled: int,
             invalid: int,
             total: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("disabled", disabled)
        _setter("enabled", enabled)
        _setter("invalid", invalid)
        _setter("total", total)

    @property
    @pulumi.getter
    def disabled(self) -> int:
        """
        Number of disabled monitors using the script.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> int:
        """
        Number of enabled monitors using the script.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def invalid(self) -> int:
        """
        Number of invalid monitors using the script.
        """
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total number of monitors using the script.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetDedicatedVantagePointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only the resources that match the entire name.
        """
        GetDedicatedVantagePointsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only the resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMonitorAvailabilityConfigurationResult(dict):
    def __init__(__self__, *,
                 max_allowed_failures_per_interval: int,
                 min_allowed_runs_per_interval: int):
        """
        :param int max_allowed_failures_per_interval: Maximum number of failed runs allowed in an interval. If an interval has more failed runs than the specified value, then the interval will be classified as UNAVAILABLE.
        :param int min_allowed_runs_per_interval: Minimum number of runs allowed in an interval. If an interval has fewer runs than the specified value, then the interval will be classified as UNKNOWN and will be excluded from the availability calculations.
        """
        GetMonitorAvailabilityConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_allowed_failures_per_interval=max_allowed_failures_per_interval,
            min_allowed_runs_per_interval=min_allowed_runs_per_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_allowed_failures_per_interval: int,
             min_allowed_runs_per_interval: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxAllowedFailuresPerInterval' in kwargs:
            max_allowed_failures_per_interval = kwargs['maxAllowedFailuresPerInterval']
        if 'minAllowedRunsPerInterval' in kwargs:
            min_allowed_runs_per_interval = kwargs['minAllowedRunsPerInterval']

        _setter("max_allowed_failures_per_interval", max_allowed_failures_per_interval)
        _setter("min_allowed_runs_per_interval", min_allowed_runs_per_interval)

    @property
    @pulumi.getter(name="maxAllowedFailuresPerInterval")
    def max_allowed_failures_per_interval(self) -> int:
        """
        Maximum number of failed runs allowed in an interval. If an interval has more failed runs than the specified value, then the interval will be classified as UNAVAILABLE.
        """
        return pulumi.get(self, "max_allowed_failures_per_interval")

    @property
    @pulumi.getter(name="minAllowedRunsPerInterval")
    def min_allowed_runs_per_interval(self) -> int:
        """
        Minimum number of runs allowed in an interval. If an interval has fewer runs than the specified value, then the interval will be classified as UNKNOWN and will be excluded from the availability calculations.
        """
        return pulumi.get(self, "min_allowed_runs_per_interval")


@pulumi.output_type
class GetMonitorConfigurationResult(dict):
    def __init__(__self__, *,
                 client_certificate_details: Sequence['outputs.GetMonitorConfigurationClientCertificateDetailResult'],
                 config_type: str,
                 dns_configurations: Sequence['outputs.GetMonitorConfigurationDnsConfigurationResult'],
                 is_certificate_validation_enabled: bool,
                 is_default_snapshot_enabled: bool,
                 is_failure_retried: bool,
                 is_redirection_enabled: bool,
                 network_configurations: Sequence['outputs.GetMonitorConfigurationNetworkConfigurationResult'],
                 req_authentication_details: Sequence['outputs.GetMonitorConfigurationReqAuthenticationDetailResult'],
                 req_authentication_scheme: str,
                 request_headers: Sequence['outputs.GetMonitorConfigurationRequestHeaderResult'],
                 request_method: str,
                 request_post_body: str,
                 request_query_params: Sequence['outputs.GetMonitorConfigurationRequestQueryParamResult'],
                 verify_response_codes: Sequence[str],
                 verify_response_content: str,
                 verify_texts: Sequence['outputs.GetMonitorConfigurationVerifyTextResult']):
        """
        :param Sequence['GetMonitorConfigurationClientCertificateDetailArgs'] client_certificate_details: Details for client certificate.
        :param str config_type: Type of configuration.
        :param Sequence['GetMonitorConfigurationDnsConfigurationArgs'] dns_configurations: Information about the DNS settings.
        :param bool is_certificate_validation_enabled: If certificate validation is enabled, then the call will fail in case of certification errors.
        :param bool is_default_snapshot_enabled: If disabled, auto snapshots are not collected.
        :param bool is_failure_retried: If isFailureRetried is enabled, then a failed call will be retried.
        :param bool is_redirection_enabled: If redirection is enabled, then redirects will be allowed while accessing target URL.
        :param Sequence['GetMonitorConfigurationNetworkConfigurationArgs'] network_configurations: Details of the network configuration.
        :param Sequence['GetMonitorConfigurationReqAuthenticationDetailArgs'] req_authentication_details: Details for request HTTP authentication.
        :param str req_authentication_scheme: Request HTTP authentication scheme.
        :param Sequence['GetMonitorConfigurationRequestHeaderArgs'] request_headers: List of request headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        :param str request_method: Request HTTP method.
        :param str request_post_body: Request post body content.
        :param Sequence['GetMonitorConfigurationRequestQueryParamArgs'] request_query_params: List of request query params. Example: `[{"paramName": "sortOrder", "paramValue": "asc"}]`
        :param Sequence[str] verify_response_codes: Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
        :param str verify_response_content: Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
        :param Sequence['GetMonitorConfigurationVerifyTextArgs'] verify_texts: Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
        """
        GetMonitorConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_certificate_details=client_certificate_details,
            config_type=config_type,
            dns_configurations=dns_configurations,
            is_certificate_validation_enabled=is_certificate_validation_enabled,
            is_default_snapshot_enabled=is_default_snapshot_enabled,
            is_failure_retried=is_failure_retried,
            is_redirection_enabled=is_redirection_enabled,
            network_configurations=network_configurations,
            req_authentication_details=req_authentication_details,
            req_authentication_scheme=req_authentication_scheme,
            request_headers=request_headers,
            request_method=request_method,
            request_post_body=request_post_body,
            request_query_params=request_query_params,
            verify_response_codes=verify_response_codes,
            verify_response_content=verify_response_content,
            verify_texts=verify_texts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_certificate_details: Sequence['outputs.GetMonitorConfigurationClientCertificateDetailResult'],
             config_type: str,
             dns_configurations: Sequence['outputs.GetMonitorConfigurationDnsConfigurationResult'],
             is_certificate_validation_enabled: bool,
             is_default_snapshot_enabled: bool,
             is_failure_retried: bool,
             is_redirection_enabled: bool,
             network_configurations: Sequence['outputs.GetMonitorConfigurationNetworkConfigurationResult'],
             req_authentication_details: Sequence['outputs.GetMonitorConfigurationReqAuthenticationDetailResult'],
             req_authentication_scheme: str,
             request_headers: Sequence['outputs.GetMonitorConfigurationRequestHeaderResult'],
             request_method: str,
             request_post_body: str,
             request_query_params: Sequence['outputs.GetMonitorConfigurationRequestQueryParamResult'],
             verify_response_codes: Sequence[str],
             verify_response_content: str,
             verify_texts: Sequence['outputs.GetMonitorConfigurationVerifyTextResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientCertificateDetails' in kwargs:
            client_certificate_details = kwargs['clientCertificateDetails']
        if 'configType' in kwargs:
            config_type = kwargs['configType']
        if 'dnsConfigurations' in kwargs:
            dns_configurations = kwargs['dnsConfigurations']
        if 'isCertificateValidationEnabled' in kwargs:
            is_certificate_validation_enabled = kwargs['isCertificateValidationEnabled']
        if 'isDefaultSnapshotEnabled' in kwargs:
            is_default_snapshot_enabled = kwargs['isDefaultSnapshotEnabled']
        if 'isFailureRetried' in kwargs:
            is_failure_retried = kwargs['isFailureRetried']
        if 'isRedirectionEnabled' in kwargs:
            is_redirection_enabled = kwargs['isRedirectionEnabled']
        if 'networkConfigurations' in kwargs:
            network_configurations = kwargs['networkConfigurations']
        if 'reqAuthenticationDetails' in kwargs:
            req_authentication_details = kwargs['reqAuthenticationDetails']
        if 'reqAuthenticationScheme' in kwargs:
            req_authentication_scheme = kwargs['reqAuthenticationScheme']
        if 'requestHeaders' in kwargs:
            request_headers = kwargs['requestHeaders']
        if 'requestMethod' in kwargs:
            request_method = kwargs['requestMethod']
        if 'requestPostBody' in kwargs:
            request_post_body = kwargs['requestPostBody']
        if 'requestQueryParams' in kwargs:
            request_query_params = kwargs['requestQueryParams']
        if 'verifyResponseCodes' in kwargs:
            verify_response_codes = kwargs['verifyResponseCodes']
        if 'verifyResponseContent' in kwargs:
            verify_response_content = kwargs['verifyResponseContent']
        if 'verifyTexts' in kwargs:
            verify_texts = kwargs['verifyTexts']

        _setter("client_certificate_details", client_certificate_details)
        _setter("config_type", config_type)
        _setter("dns_configurations", dns_configurations)
        _setter("is_certificate_validation_enabled", is_certificate_validation_enabled)
        _setter("is_default_snapshot_enabled", is_default_snapshot_enabled)
        _setter("is_failure_retried", is_failure_retried)
        _setter("is_redirection_enabled", is_redirection_enabled)
        _setter("network_configurations", network_configurations)
        _setter("req_authentication_details", req_authentication_details)
        _setter("req_authentication_scheme", req_authentication_scheme)
        _setter("request_headers", request_headers)
        _setter("request_method", request_method)
        _setter("request_post_body", request_post_body)
        _setter("request_query_params", request_query_params)
        _setter("verify_response_codes", verify_response_codes)
        _setter("verify_response_content", verify_response_content)
        _setter("verify_texts", verify_texts)

    @property
    @pulumi.getter(name="clientCertificateDetails")
    def client_certificate_details(self) -> Sequence['outputs.GetMonitorConfigurationClientCertificateDetailResult']:
        """
        Details for client certificate.
        """
        return pulumi.get(self, "client_certificate_details")

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> str:
        """
        Type of configuration.
        """
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="dnsConfigurations")
    def dns_configurations(self) -> Sequence['outputs.GetMonitorConfigurationDnsConfigurationResult']:
        """
        Information about the DNS settings.
        """
        return pulumi.get(self, "dns_configurations")

    @property
    @pulumi.getter(name="isCertificateValidationEnabled")
    def is_certificate_validation_enabled(self) -> bool:
        """
        If certificate validation is enabled, then the call will fail in case of certification errors.
        """
        return pulumi.get(self, "is_certificate_validation_enabled")

    @property
    @pulumi.getter(name="isDefaultSnapshotEnabled")
    def is_default_snapshot_enabled(self) -> bool:
        """
        If disabled, auto snapshots are not collected.
        """
        return pulumi.get(self, "is_default_snapshot_enabled")

    @property
    @pulumi.getter(name="isFailureRetried")
    def is_failure_retried(self) -> bool:
        """
        If isFailureRetried is enabled, then a failed call will be retried.
        """
        return pulumi.get(self, "is_failure_retried")

    @property
    @pulumi.getter(name="isRedirectionEnabled")
    def is_redirection_enabled(self) -> bool:
        """
        If redirection is enabled, then redirects will be allowed while accessing target URL.
        """
        return pulumi.get(self, "is_redirection_enabled")

    @property
    @pulumi.getter(name="networkConfigurations")
    def network_configurations(self) -> Sequence['outputs.GetMonitorConfigurationNetworkConfigurationResult']:
        """
        Details of the network configuration.
        """
        return pulumi.get(self, "network_configurations")

    @property
    @pulumi.getter(name="reqAuthenticationDetails")
    def req_authentication_details(self) -> Sequence['outputs.GetMonitorConfigurationReqAuthenticationDetailResult']:
        """
        Details for request HTTP authentication.
        """
        return pulumi.get(self, "req_authentication_details")

    @property
    @pulumi.getter(name="reqAuthenticationScheme")
    def req_authentication_scheme(self) -> str:
        """
        Request HTTP authentication scheme.
        """
        return pulumi.get(self, "req_authentication_scheme")

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Sequence['outputs.GetMonitorConfigurationRequestHeaderResult']:
        """
        List of request headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> str:
        """
        Request HTTP method.
        """
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestPostBody")
    def request_post_body(self) -> str:
        """
        Request post body content.
        """
        return pulumi.get(self, "request_post_body")

    @property
    @pulumi.getter(name="requestQueryParams")
    def request_query_params(self) -> Sequence['outputs.GetMonitorConfigurationRequestQueryParamResult']:
        """
        List of request query params. Example: `[{"paramName": "sortOrder", "paramValue": "asc"}]`
        """
        return pulumi.get(self, "request_query_params")

    @property
    @pulumi.getter(name="verifyResponseCodes")
    def verify_response_codes(self) -> Sequence[str]:
        """
        Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
        """
        return pulumi.get(self, "verify_response_codes")

    @property
    @pulumi.getter(name="verifyResponseContent")
    def verify_response_content(self) -> str:
        """
        Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
        """
        return pulumi.get(self, "verify_response_content")

    @property
    @pulumi.getter(name="verifyTexts")
    def verify_texts(self) -> Sequence['outputs.GetMonitorConfigurationVerifyTextResult']:
        """
        Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
        """
        return pulumi.get(self, "verify_texts")


@pulumi.output_type
class GetMonitorConfigurationClientCertificateDetailResult(dict):
    def __init__(__self__, *,
                 client_certificates: Sequence['outputs.GetMonitorConfigurationClientCertificateDetailClientCertificateResult'],
                 private_keys: Sequence['outputs.GetMonitorConfigurationClientCertificateDetailPrivateKeyResult']):
        """
        :param Sequence['GetMonitorConfigurationClientCertificateDetailClientCertificateArgs'] client_certificates: Client certificate in PEM format.
        :param Sequence['GetMonitorConfigurationClientCertificateDetailPrivateKeyArgs'] private_keys: The private key associated with the client certificate in PEM format.
        """
        GetMonitorConfigurationClientCertificateDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_certificates=client_certificates,
            private_keys=private_keys,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_certificates: Sequence['outputs.GetMonitorConfigurationClientCertificateDetailClientCertificateResult'],
             private_keys: Sequence['outputs.GetMonitorConfigurationClientCertificateDetailPrivateKeyResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientCertificates' in kwargs:
            client_certificates = kwargs['clientCertificates']
        if 'privateKeys' in kwargs:
            private_keys = kwargs['privateKeys']

        _setter("client_certificates", client_certificates)
        _setter("private_keys", private_keys)

    @property
    @pulumi.getter(name="clientCertificates")
    def client_certificates(self) -> Sequence['outputs.GetMonitorConfigurationClientCertificateDetailClientCertificateResult']:
        """
        Client certificate in PEM format.
        """
        return pulumi.get(self, "client_certificates")

    @property
    @pulumi.getter(name="privateKeys")
    def private_keys(self) -> Sequence['outputs.GetMonitorConfigurationClientCertificateDetailPrivateKeyResult']:
        """
        The private key associated with the client certificate in PEM format.
        """
        return pulumi.get(self, "private_keys")


@pulumi.output_type
class GetMonitorConfigurationClientCertificateDetailClientCertificateResult(dict):
    def __init__(__self__, *,
                 content: str,
                 file_name: str):
        """
        :param str content: Content of the private key file.
        :param str file_name: Name of the private key file.
        """
        GetMonitorConfigurationClientCertificateDetailClientCertificateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            file_name=file_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: str,
             file_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fileName' in kwargs:
            file_name = kwargs['fileName']

        _setter("content", content)
        _setter("file_name", file_name)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        Content of the private key file.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        """
        Name of the private key file.
        """
        return pulumi.get(self, "file_name")


@pulumi.output_type
class GetMonitorConfigurationClientCertificateDetailPrivateKeyResult(dict):
    def __init__(__self__, *,
                 content: str,
                 file_name: str):
        """
        :param str content: Content of the private key file.
        :param str file_name: Name of the private key file.
        """
        GetMonitorConfigurationClientCertificateDetailPrivateKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            file_name=file_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: str,
             file_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fileName' in kwargs:
            file_name = kwargs['fileName']

        _setter("content", content)
        _setter("file_name", file_name)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        Content of the private key file.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        """
        Name of the private key file.
        """
        return pulumi.get(self, "file_name")


@pulumi.output_type
class GetMonitorConfigurationDnsConfigurationResult(dict):
    def __init__(__self__, *,
                 is_override_dns: bool,
                 override_dns_ip: str):
        """
        :param bool is_override_dns: If isOverrideDns is true, then DNS settings will be overridden.
        :param str override_dns_ip: Attribute to override the DNS IP value. This value will be honored only if isOverrideDns is set to true.
        """
        GetMonitorConfigurationDnsConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_override_dns=is_override_dns,
            override_dns_ip=override_dns_ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_override_dns: bool,
             override_dns_ip: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isOverrideDns' in kwargs:
            is_override_dns = kwargs['isOverrideDns']
        if 'overrideDnsIp' in kwargs:
            override_dns_ip = kwargs['overrideDnsIp']

        _setter("is_override_dns", is_override_dns)
        _setter("override_dns_ip", override_dns_ip)

    @property
    @pulumi.getter(name="isOverrideDns")
    def is_override_dns(self) -> bool:
        """
        If isOverrideDns is true, then DNS settings will be overridden.
        """
        return pulumi.get(self, "is_override_dns")

    @property
    @pulumi.getter(name="overrideDnsIp")
    def override_dns_ip(self) -> str:
        """
        Attribute to override the DNS IP value. This value will be honored only if isOverrideDns is set to true.
        """
        return pulumi.get(self, "override_dns_ip")


@pulumi.output_type
class GetMonitorConfigurationNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 number_of_hops: int,
                 probe_mode: str,
                 probe_per_hop: int,
                 protocol: str,
                 transmission_rate: int):
        """
        :param int number_of_hops: Number of hops.
        :param str probe_mode: Type of probe mode when TCP protocol is selected.
        :param int probe_per_hop: Number of probes per hop.
        :param str protocol: Type of protocol.
        :param int transmission_rate: Number of probe packets sent out simultaneously.
        """
        GetMonitorConfigurationNetworkConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            number_of_hops=number_of_hops,
            probe_mode=probe_mode,
            probe_per_hop=probe_per_hop,
            protocol=protocol,
            transmission_rate=transmission_rate,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             number_of_hops: int,
             probe_mode: str,
             probe_per_hop: int,
             protocol: str,
             transmission_rate: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'numberOfHops' in kwargs:
            number_of_hops = kwargs['numberOfHops']
        if 'probeMode' in kwargs:
            probe_mode = kwargs['probeMode']
        if 'probePerHop' in kwargs:
            probe_per_hop = kwargs['probePerHop']
        if 'transmissionRate' in kwargs:
            transmission_rate = kwargs['transmissionRate']

        _setter("number_of_hops", number_of_hops)
        _setter("probe_mode", probe_mode)
        _setter("probe_per_hop", probe_per_hop)
        _setter("protocol", protocol)
        _setter("transmission_rate", transmission_rate)

    @property
    @pulumi.getter(name="numberOfHops")
    def number_of_hops(self) -> int:
        """
        Number of hops.
        """
        return pulumi.get(self, "number_of_hops")

    @property
    @pulumi.getter(name="probeMode")
    def probe_mode(self) -> str:
        """
        Type of probe mode when TCP protocol is selected.
        """
        return pulumi.get(self, "probe_mode")

    @property
    @pulumi.getter(name="probePerHop")
    def probe_per_hop(self) -> int:
        """
        Number of probes per hop.
        """
        return pulumi.get(self, "probe_per_hop")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Type of protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="transmissionRate")
    def transmission_rate(self) -> int:
        """
        Number of probe packets sent out simultaneously.
        """
        return pulumi.get(self, "transmission_rate")


@pulumi.output_type
class GetMonitorConfigurationReqAuthenticationDetailResult(dict):
    def __init__(__self__, *,
                 auth_headers: Sequence['outputs.GetMonitorConfigurationReqAuthenticationDetailAuthHeaderResult'],
                 auth_request_method: str,
                 auth_request_post_body: str,
                 auth_token: str,
                 auth_url: str,
                 auth_user_name: str,
                 auth_user_password: str,
                 oauth_scheme: str):
        """
        :param Sequence['GetMonitorConfigurationReqAuthenticationDetailAuthHeaderArgs'] auth_headers: List of authentication headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        :param str auth_request_method: Request method.
        :param str auth_request_post_body: Request post body.
        :param str auth_token: Authentication token.
        :param str auth_url: URL to get authentication token.
        :param str auth_user_name: User name for authentication.
        :param str auth_user_password: User password for authentication.
        :param str oauth_scheme: Request HTTP OAuth scheme.
        """
        GetMonitorConfigurationReqAuthenticationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_headers=auth_headers,
            auth_request_method=auth_request_method,
            auth_request_post_body=auth_request_post_body,
            auth_token=auth_token,
            auth_url=auth_url,
            auth_user_name=auth_user_name,
            auth_user_password=auth_user_password,
            oauth_scheme=oauth_scheme,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_headers: Sequence['outputs.GetMonitorConfigurationReqAuthenticationDetailAuthHeaderResult'],
             auth_request_method: str,
             auth_request_post_body: str,
             auth_token: str,
             auth_url: str,
             auth_user_name: str,
             auth_user_password: str,
             oauth_scheme: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authHeaders' in kwargs:
            auth_headers = kwargs['authHeaders']
        if 'authRequestMethod' in kwargs:
            auth_request_method = kwargs['authRequestMethod']
        if 'authRequestPostBody' in kwargs:
            auth_request_post_body = kwargs['authRequestPostBody']
        if 'authToken' in kwargs:
            auth_token = kwargs['authToken']
        if 'authUrl' in kwargs:
            auth_url = kwargs['authUrl']
        if 'authUserName' in kwargs:
            auth_user_name = kwargs['authUserName']
        if 'authUserPassword' in kwargs:
            auth_user_password = kwargs['authUserPassword']
        if 'oauthScheme' in kwargs:
            oauth_scheme = kwargs['oauthScheme']

        _setter("auth_headers", auth_headers)
        _setter("auth_request_method", auth_request_method)
        _setter("auth_request_post_body", auth_request_post_body)
        _setter("auth_token", auth_token)
        _setter("auth_url", auth_url)
        _setter("auth_user_name", auth_user_name)
        _setter("auth_user_password", auth_user_password)
        _setter("oauth_scheme", oauth_scheme)

    @property
    @pulumi.getter(name="authHeaders")
    def auth_headers(self) -> Sequence['outputs.GetMonitorConfigurationReqAuthenticationDetailAuthHeaderResult']:
        """
        List of authentication headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        """
        return pulumi.get(self, "auth_headers")

    @property
    @pulumi.getter(name="authRequestMethod")
    def auth_request_method(self) -> str:
        """
        Request method.
        """
        return pulumi.get(self, "auth_request_method")

    @property
    @pulumi.getter(name="authRequestPostBody")
    def auth_request_post_body(self) -> str:
        """
        Request post body.
        """
        return pulumi.get(self, "auth_request_post_body")

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        """
        Authentication token.
        """
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> str:
        """
        URL to get authentication token.
        """
        return pulumi.get(self, "auth_url")

    @property
    @pulumi.getter(name="authUserName")
    def auth_user_name(self) -> str:
        """
        User name for authentication.
        """
        return pulumi.get(self, "auth_user_name")

    @property
    @pulumi.getter(name="authUserPassword")
    def auth_user_password(self) -> str:
        """
        User password for authentication.
        """
        return pulumi.get(self, "auth_user_password")

    @property
    @pulumi.getter(name="oauthScheme")
    def oauth_scheme(self) -> str:
        """
        Request HTTP OAuth scheme.
        """
        return pulumi.get(self, "oauth_scheme")


@pulumi.output_type
class GetMonitorConfigurationReqAuthenticationDetailAuthHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: str,
                 header_value: str):
        """
        :param str header_name: Name of the header.
        :param str header_value: Value of the header.
        """
        GetMonitorConfigurationReqAuthenticationDetailAuthHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_name=header_name,
            header_value=header_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_name: str,
             header_value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'headerValue' in kwargs:
            header_value = kwargs['headerValue']

        _setter("header_name", header_name)
        _setter("header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        """
        Name of the header.
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        """
        Value of the header.
        """
        return pulumi.get(self, "header_value")


@pulumi.output_type
class GetMonitorConfigurationRequestHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: str,
                 header_value: str):
        """
        :param str header_name: Name of the header.
        :param str header_value: Value of the header.
        """
        GetMonitorConfigurationRequestHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_name=header_name,
            header_value=header_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_name: str,
             header_value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'headerValue' in kwargs:
            header_value = kwargs['headerValue']

        _setter("header_name", header_name)
        _setter("header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        """
        Name of the header.
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        """
        Value of the header.
        """
        return pulumi.get(self, "header_value")


@pulumi.output_type
class GetMonitorConfigurationRequestQueryParamResult(dict):
    def __init__(__self__, *,
                 param_name: str,
                 param_value: str):
        """
        :param str param_name: Name of the parameter.
        :param str param_value: Value of the parameter.
        """
        GetMonitorConfigurationRequestQueryParamResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            param_name=param_name,
            param_value=param_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             param_name: str,
             param_value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']

        _setter("param_name", param_name)
        _setter("param_value", param_value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> str:
        """
        Value of the parameter.
        """
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetMonitorConfigurationVerifyTextResult(dict):
    def __init__(__self__, *,
                 text: str):
        """
        :param str text: Verification text in the response.
        """
        GetMonitorConfigurationVerifyTextResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            text=text,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             text: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("text", text)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Verification text in the response.
        """
        return pulumi.get(self, "text")


@pulumi.output_type
class GetMonitorMaintenanceWindowScheduleResult(dict):
    def __init__(__self__, *,
                 time_ended: str,
                 time_started: str):
        """
        :param str time_ended: End time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        :param str time_started: Start time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        GetMonitorMaintenanceWindowScheduleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            time_ended=time_ended,
            time_started=time_started,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             time_ended: str,
             time_started: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'timeEnded' in kwargs:
            time_ended = kwargs['timeEnded']
        if 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']

        _setter("time_ended", time_ended)
        _setter("time_started", time_started)

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> str:
        """
        End time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        Start time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetMonitorScriptParameterResult(dict):
    def __init__(__self__, *,
                 is_overwritten: bool,
                 is_secret: bool,
                 monitor_script_parameters: Sequence['outputs.GetMonitorScriptParameterMonitorScriptParameterResult'],
                 param_name: str,
                 param_value: str):
        """
        :param bool is_overwritten: If parameter value is default or overwritten.
        :param bool is_secret: Describes if  the parameter value is secret and should be kept confidential. isSecret is specified in either CreateScript or UpdateScript API.
        :param Sequence['GetMonitorScriptParameterMonitorScriptParameterArgs'] monitor_script_parameters: Details of the script parameter that can be used to overwrite the parameter present in the script.
        :param str param_name: Name of the parameter.
        :param str param_value: Value of the parameter.
        """
        GetMonitorScriptParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_overwritten=is_overwritten,
            is_secret=is_secret,
            monitor_script_parameters=monitor_script_parameters,
            param_name=param_name,
            param_value=param_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_overwritten: bool,
             is_secret: bool,
             monitor_script_parameters: Sequence['outputs.GetMonitorScriptParameterMonitorScriptParameterResult'],
             param_name: str,
             param_value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isOverwritten' in kwargs:
            is_overwritten = kwargs['isOverwritten']
        if 'isSecret' in kwargs:
            is_secret = kwargs['isSecret']
        if 'monitorScriptParameters' in kwargs:
            monitor_script_parameters = kwargs['monitorScriptParameters']
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']

        _setter("is_overwritten", is_overwritten)
        _setter("is_secret", is_secret)
        _setter("monitor_script_parameters", monitor_script_parameters)
        _setter("param_name", param_name)
        _setter("param_value", param_value)

    @property
    @pulumi.getter(name="isOverwritten")
    def is_overwritten(self) -> bool:
        """
        If parameter value is default or overwritten.
        """
        return pulumi.get(self, "is_overwritten")

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> bool:
        """
        Describes if  the parameter value is secret and should be kept confidential. isSecret is specified in either CreateScript or UpdateScript API.
        """
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="monitorScriptParameters")
    def monitor_script_parameters(self) -> Sequence['outputs.GetMonitorScriptParameterMonitorScriptParameterResult']:
        """
        Details of the script parameter that can be used to overwrite the parameter present in the script.
        """
        return pulumi.get(self, "monitor_script_parameters")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> str:
        """
        Value of the parameter.
        """
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetMonitorScriptParameterMonitorScriptParameterResult(dict):
    def __init__(__self__, *,
                 param_name: str,
                 param_value: str):
        """
        :param str param_name: Name of the parameter.
        :param str param_value: Value of the parameter.
        """
        GetMonitorScriptParameterMonitorScriptParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            param_name=param_name,
            param_value=param_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             param_name: str,
             param_value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']

        _setter("param_name", param_name)
        _setter("param_value", param_value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> str:
        """
        Value of the parameter.
        """
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetMonitorVantagePointResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 name: str):
        """
        :param str display_name: Unique name that can be edited. The name should not contain any confidential information.
        :param str name: Name of the vantage point.
        """
        GetMonitorVantagePointResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']

        _setter("display_name", display_name)
        _setter("name", name)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Unique name that can be edited. The name should not contain any confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the vantage point.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMonitorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Name of the vantage point.
        """
        GetMonitorsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the vantage point.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMonitorsMonitorCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMonitorsMonitorCollectionItemResult']):
        GetMonitorsMonitorCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetMonitorsMonitorCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemResult(dict):
    def __init__(__self__, *,
                 apm_domain_id: str,
                 availability_configurations: Sequence['outputs.GetMonitorsMonitorCollectionItemAvailabilityConfigurationResult'],
                 batch_interval_in_seconds: int,
                 configurations: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationResult'],
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_run_now: bool,
                 is_run_once: bool,
                 maintenance_window_schedules: Sequence['outputs.GetMonitorsMonitorCollectionItemMaintenanceWindowScheduleResult'],
                 monitor_type: str,
                 repeat_interval_in_seconds: int,
                 scheduling_policy: str,
                 script_id: str,
                 script_name: str,
                 script_parameters: Sequence['outputs.GetMonitorsMonitorCollectionItemScriptParameterResult'],
                 status: str,
                 target: str,
                 time_created: str,
                 time_updated: str,
                 timeout_in_seconds: int,
                 vantage_point_count: int,
                 vantage_points: Sequence['outputs.GetMonitorsMonitorCollectionItemVantagePointResult']):
        """
        :param str apm_domain_id: The APM domain ID the request is intended for.
        :param Sequence['GetMonitorsMonitorCollectionItemAvailabilityConfigurationArgs'] availability_configurations: Monitor availability configuration details.
        :param int batch_interval_in_seconds: Time interval between two runs in round robin batch mode (SchedulingPolicy - BATCHED_ROUND_ROBIN).
        :param Sequence['GetMonitorsMonitorCollectionItemConfigurationArgs'] configurations: Details of monitor configuration.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str display_name: A filter to return only the resources that match the entire display name.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitor.
        :param bool is_run_now: If isRunNow is enabled, then the monitor will run immediately.
        :param bool is_run_once: If runOnce is enabled, then the monitor will run once.
        :param Sequence['GetMonitorsMonitorCollectionItemMaintenanceWindowScheduleArgs'] maintenance_window_schedules: Details required to schedule maintenance window.
        :param str monitor_type: A filter to return only monitors that match the given monitor type. Supported values are SCRIPTED_BROWSER, BROWSER, SCRIPTED_REST and REST.
        :param int repeat_interval_in_seconds: Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds for Scripted REST, Scripted Browser and Browser monitors, and 60 seconds for REST monitor.
        :param str scheduling_policy: Scheduling policy to decide the distribution of monitor executions on vantage points.
        :param str script_id: A filter to return only monitors using scriptId.
        :param str script_name: Name of the script.
        :param Sequence['GetMonitorsMonitorCollectionItemScriptParameterArgs'] script_parameters: List of script parameters. Example: `[{"monitorScriptParameter": {"paramName": "userid", "paramValue":"testuser"}, "isSecret": false, "isOverwritten": false}]`
        :param str status: A filter to return only monitors that match the status given.
        :param str target: Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is. For NETWORK monitor with TCP protocol, a port needs to be provided along with target. Example: 192.168.0.1:80
        :param str time_created: The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        :param str time_updated: The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
        :param int timeout_in_seconds: Timeout in seconds. If isFailureRetried is true, then timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. If isFailureRetried is false, then timeout cannot be more than 50% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60 for Scripted REST, Scripted Browser and Browser monitors. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
        :param int vantage_point_count: Number of vantage points where monitor is running.
        :param Sequence['GetMonitorsMonitorCollectionItemVantagePointArgs'] vantage_points: List of public and dedicated vantage points where the monitor is running.
        """
        GetMonitorsMonitorCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            apm_domain_id=apm_domain_id,
            availability_configurations=availability_configurations,
            batch_interval_in_seconds=batch_interval_in_seconds,
            configurations=configurations,
            defined_tags=defined_tags,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            is_run_now=is_run_now,
            is_run_once=is_run_once,
            maintenance_window_schedules=maintenance_window_schedules,
            monitor_type=monitor_type,
            repeat_interval_in_seconds=repeat_interval_in_seconds,
            scheduling_policy=scheduling_policy,
            script_id=script_id,
            script_name=script_name,
            script_parameters=script_parameters,
            status=status,
            target=target,
            time_created=time_created,
            time_updated=time_updated,
            timeout_in_seconds=timeout_in_seconds,
            vantage_point_count=vantage_point_count,
            vantage_points=vantage_points,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             apm_domain_id: str,
             availability_configurations: Sequence['outputs.GetMonitorsMonitorCollectionItemAvailabilityConfigurationResult'],
             batch_interval_in_seconds: int,
             configurations: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationResult'],
             defined_tags: Mapping[str, Any],
             display_name: str,
             freeform_tags: Mapping[str, Any],
             id: str,
             is_run_now: bool,
             is_run_once: bool,
             maintenance_window_schedules: Sequence['outputs.GetMonitorsMonitorCollectionItemMaintenanceWindowScheduleResult'],
             monitor_type: str,
             repeat_interval_in_seconds: int,
             scheduling_policy: str,
             script_id: str,
             script_name: str,
             script_parameters: Sequence['outputs.GetMonitorsMonitorCollectionItemScriptParameterResult'],
             status: str,
             target: str,
             time_created: str,
             time_updated: str,
             timeout_in_seconds: int,
             vantage_point_count: int,
             vantage_points: Sequence['outputs.GetMonitorsMonitorCollectionItemVantagePointResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apmDomainId' in kwargs:
            apm_domain_id = kwargs['apmDomainId']
        if 'availabilityConfigurations' in kwargs:
            availability_configurations = kwargs['availabilityConfigurations']
        if 'batchIntervalInSeconds' in kwargs:
            batch_interval_in_seconds = kwargs['batchIntervalInSeconds']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'isRunNow' in kwargs:
            is_run_now = kwargs['isRunNow']
        if 'isRunOnce' in kwargs:
            is_run_once = kwargs['isRunOnce']
        if 'maintenanceWindowSchedules' in kwargs:
            maintenance_window_schedules = kwargs['maintenanceWindowSchedules']
        if 'monitorType' in kwargs:
            monitor_type = kwargs['monitorType']
        if 'repeatIntervalInSeconds' in kwargs:
            repeat_interval_in_seconds = kwargs['repeatIntervalInSeconds']
        if 'schedulingPolicy' in kwargs:
            scheduling_policy = kwargs['schedulingPolicy']
        if 'scriptId' in kwargs:
            script_id = kwargs['scriptId']
        if 'scriptName' in kwargs:
            script_name = kwargs['scriptName']
        if 'scriptParameters' in kwargs:
            script_parameters = kwargs['scriptParameters']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if 'timeoutInSeconds' in kwargs:
            timeout_in_seconds = kwargs['timeoutInSeconds']
        if 'vantagePointCount' in kwargs:
            vantage_point_count = kwargs['vantagePointCount']
        if 'vantagePoints' in kwargs:
            vantage_points = kwargs['vantagePoints']

        _setter("apm_domain_id", apm_domain_id)
        _setter("availability_configurations", availability_configurations)
        _setter("batch_interval_in_seconds", batch_interval_in_seconds)
        _setter("configurations", configurations)
        _setter("defined_tags", defined_tags)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("is_run_now", is_run_now)
        _setter("is_run_once", is_run_once)
        _setter("maintenance_window_schedules", maintenance_window_schedules)
        _setter("monitor_type", monitor_type)
        _setter("repeat_interval_in_seconds", repeat_interval_in_seconds)
        _setter("scheduling_policy", scheduling_policy)
        _setter("script_id", script_id)
        _setter("script_name", script_name)
        _setter("script_parameters", script_parameters)
        _setter("status", status)
        _setter("target", target)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)
        _setter("timeout_in_seconds", timeout_in_seconds)
        _setter("vantage_point_count", vantage_point_count)
        _setter("vantage_points", vantage_points)

    @property
    @pulumi.getter(name="apmDomainId")
    def apm_domain_id(self) -> str:
        """
        The APM domain ID the request is intended for.
        """
        return pulumi.get(self, "apm_domain_id")

    @property
    @pulumi.getter(name="availabilityConfigurations")
    def availability_configurations(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemAvailabilityConfigurationResult']:
        """
        Monitor availability configuration details.
        """
        return pulumi.get(self, "availability_configurations")

    @property
    @pulumi.getter(name="batchIntervalInSeconds")
    def batch_interval_in_seconds(self) -> int:
        """
        Time interval between two runs in round robin batch mode (SchedulingPolicy - BATCHED_ROUND_ROBIN).
        """
        return pulumi.get(self, "batch_interval_in_seconds")

    @property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationResult']:
        """
        Details of monitor configuration.
        """
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only the resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitor.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRunNow")
    def is_run_now(self) -> bool:
        """
        If isRunNow is enabled, then the monitor will run immediately.
        """
        return pulumi.get(self, "is_run_now")

    @property
    @pulumi.getter(name="isRunOnce")
    def is_run_once(self) -> bool:
        """
        If runOnce is enabled, then the monitor will run once.
        """
        return pulumi.get(self, "is_run_once")

    @property
    @pulumi.getter(name="maintenanceWindowSchedules")
    def maintenance_window_schedules(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemMaintenanceWindowScheduleResult']:
        """
        Details required to schedule maintenance window.
        """
        return pulumi.get(self, "maintenance_window_schedules")

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> str:
        """
        A filter to return only monitors that match the given monitor type. Supported values are SCRIPTED_BROWSER, BROWSER, SCRIPTED_REST and REST.
        """
        return pulumi.get(self, "monitor_type")

    @property
    @pulumi.getter(name="repeatIntervalInSeconds")
    def repeat_interval_in_seconds(self) -> int:
        """
        Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds for Scripted REST, Scripted Browser and Browser monitors, and 60 seconds for REST monitor.
        """
        return pulumi.get(self, "repeat_interval_in_seconds")

    @property
    @pulumi.getter(name="schedulingPolicy")
    def scheduling_policy(self) -> str:
        """
        Scheduling policy to decide the distribution of monitor executions on vantage points.
        """
        return pulumi.get(self, "scheduling_policy")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> str:
        """
        A filter to return only monitors using scriptId.
        """
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> str:
        """
        Name of the script.
        """
        return pulumi.get(self, "script_name")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemScriptParameterResult']:
        """
        List of script parameters. Example: `[{"monitorScriptParameter": {"paramName": "userid", "paramValue":"testuser"}, "isSecret": false, "isOverwritten": false}]`
        """
        return pulumi.get(self, "script_parameters")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A filter to return only monitors that match the status given.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is. For NETWORK monitor with TCP protocol, a port needs to be provided along with target. Example: 192.168.0.1:80
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> int:
        """
        Timeout in seconds. If isFailureRetried is true, then timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. If isFailureRetried is false, then timeout cannot be more than 50% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60 for Scripted REST, Scripted Browser and Browser monitors. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
        """
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="vantagePointCount")
    def vantage_point_count(self) -> int:
        """
        Number of vantage points where monitor is running.
        """
        return pulumi.get(self, "vantage_point_count")

    @property
    @pulumi.getter(name="vantagePoints")
    def vantage_points(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemVantagePointResult']:
        """
        List of public and dedicated vantage points where the monitor is running.
        """
        return pulumi.get(self, "vantage_points")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemAvailabilityConfigurationResult(dict):
    def __init__(__self__, *,
                 max_allowed_failures_per_interval: int,
                 min_allowed_runs_per_interval: int):
        """
        :param int max_allowed_failures_per_interval: Maximum number of failed runs allowed in an interval. If an interval has more failed runs than the specified value, then the interval will be classified as UNAVAILABLE.
        :param int min_allowed_runs_per_interval: Minimum number of runs allowed in an interval. If an interval has fewer runs than the specified value, then the interval will be classified as UNKNOWN and will be excluded from the availability calculations.
        """
        GetMonitorsMonitorCollectionItemAvailabilityConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_allowed_failures_per_interval=max_allowed_failures_per_interval,
            min_allowed_runs_per_interval=min_allowed_runs_per_interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_allowed_failures_per_interval: int,
             min_allowed_runs_per_interval: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxAllowedFailuresPerInterval' in kwargs:
            max_allowed_failures_per_interval = kwargs['maxAllowedFailuresPerInterval']
        if 'minAllowedRunsPerInterval' in kwargs:
            min_allowed_runs_per_interval = kwargs['minAllowedRunsPerInterval']

        _setter("max_allowed_failures_per_interval", max_allowed_failures_per_interval)
        _setter("min_allowed_runs_per_interval", min_allowed_runs_per_interval)

    @property
    @pulumi.getter(name="maxAllowedFailuresPerInterval")
    def max_allowed_failures_per_interval(self) -> int:
        """
        Maximum number of failed runs allowed in an interval. If an interval has more failed runs than the specified value, then the interval will be classified as UNAVAILABLE.
        """
        return pulumi.get(self, "max_allowed_failures_per_interval")

    @property
    @pulumi.getter(name="minAllowedRunsPerInterval")
    def min_allowed_runs_per_interval(self) -> int:
        """
        Minimum number of runs allowed in an interval. If an interval has fewer runs than the specified value, then the interval will be classified as UNKNOWN and will be excluded from the availability calculations.
        """
        return pulumi.get(self, "min_allowed_runs_per_interval")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationResult(dict):
    def __init__(__self__, *,
                 client_certificate_details: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailResult'],
                 config_type: str,
                 dns_configurations: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationDnsConfigurationResult'],
                 is_certificate_validation_enabled: bool,
                 is_default_snapshot_enabled: bool,
                 is_failure_retried: bool,
                 is_redirection_enabled: bool,
                 network_configurations: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationNetworkConfigurationResult'],
                 req_authentication_details: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailResult'],
                 req_authentication_scheme: str,
                 request_headers: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationRequestHeaderResult'],
                 request_method: str,
                 request_post_body: str,
                 request_query_params: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationRequestQueryParamResult'],
                 verify_response_codes: Sequence[str],
                 verify_response_content: str,
                 verify_texts: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationVerifyTextResult']):
        """
        :param Sequence['GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailArgs'] client_certificate_details: Details for client certificate.
        :param str config_type: Type of configuration.
        :param Sequence['GetMonitorsMonitorCollectionItemConfigurationDnsConfigurationArgs'] dns_configurations: Information about the DNS settings.
        :param bool is_certificate_validation_enabled: If certificate validation is enabled, then the call will fail in case of certification errors.
        :param bool is_default_snapshot_enabled: If disabled, auto snapshots are not collected.
        :param bool is_failure_retried: If isFailureRetried is enabled, then a failed call will be retried.
        :param bool is_redirection_enabled: If redirection is enabled, then redirects will be allowed while accessing target URL.
        :param Sequence['GetMonitorsMonitorCollectionItemConfigurationNetworkConfigurationArgs'] network_configurations: Details of the network configuration.
        :param Sequence['GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailArgs'] req_authentication_details: Details for request HTTP authentication.
        :param str req_authentication_scheme: Request HTTP authentication scheme.
        :param Sequence['GetMonitorsMonitorCollectionItemConfigurationRequestHeaderArgs'] request_headers: List of request headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        :param str request_method: Request HTTP method.
        :param str request_post_body: Request post body content.
        :param Sequence['GetMonitorsMonitorCollectionItemConfigurationRequestQueryParamArgs'] request_query_params: List of request query params. Example: `[{"paramName": "sortOrder", "paramValue": "asc"}]`
        :param Sequence[str] verify_response_codes: Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
        :param str verify_response_content: Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
        :param Sequence['GetMonitorsMonitorCollectionItemConfigurationVerifyTextArgs'] verify_texts: Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
        """
        GetMonitorsMonitorCollectionItemConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_certificate_details=client_certificate_details,
            config_type=config_type,
            dns_configurations=dns_configurations,
            is_certificate_validation_enabled=is_certificate_validation_enabled,
            is_default_snapshot_enabled=is_default_snapshot_enabled,
            is_failure_retried=is_failure_retried,
            is_redirection_enabled=is_redirection_enabled,
            network_configurations=network_configurations,
            req_authentication_details=req_authentication_details,
            req_authentication_scheme=req_authentication_scheme,
            request_headers=request_headers,
            request_method=request_method,
            request_post_body=request_post_body,
            request_query_params=request_query_params,
            verify_response_codes=verify_response_codes,
            verify_response_content=verify_response_content,
            verify_texts=verify_texts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_certificate_details: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailResult'],
             config_type: str,
             dns_configurations: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationDnsConfigurationResult'],
             is_certificate_validation_enabled: bool,
             is_default_snapshot_enabled: bool,
             is_failure_retried: bool,
             is_redirection_enabled: bool,
             network_configurations: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationNetworkConfigurationResult'],
             req_authentication_details: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailResult'],
             req_authentication_scheme: str,
             request_headers: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationRequestHeaderResult'],
             request_method: str,
             request_post_body: str,
             request_query_params: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationRequestQueryParamResult'],
             verify_response_codes: Sequence[str],
             verify_response_content: str,
             verify_texts: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationVerifyTextResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientCertificateDetails' in kwargs:
            client_certificate_details = kwargs['clientCertificateDetails']
        if 'configType' in kwargs:
            config_type = kwargs['configType']
        if 'dnsConfigurations' in kwargs:
            dns_configurations = kwargs['dnsConfigurations']
        if 'isCertificateValidationEnabled' in kwargs:
            is_certificate_validation_enabled = kwargs['isCertificateValidationEnabled']
        if 'isDefaultSnapshotEnabled' in kwargs:
            is_default_snapshot_enabled = kwargs['isDefaultSnapshotEnabled']
        if 'isFailureRetried' in kwargs:
            is_failure_retried = kwargs['isFailureRetried']
        if 'isRedirectionEnabled' in kwargs:
            is_redirection_enabled = kwargs['isRedirectionEnabled']
        if 'networkConfigurations' in kwargs:
            network_configurations = kwargs['networkConfigurations']
        if 'reqAuthenticationDetails' in kwargs:
            req_authentication_details = kwargs['reqAuthenticationDetails']
        if 'reqAuthenticationScheme' in kwargs:
            req_authentication_scheme = kwargs['reqAuthenticationScheme']
        if 'requestHeaders' in kwargs:
            request_headers = kwargs['requestHeaders']
        if 'requestMethod' in kwargs:
            request_method = kwargs['requestMethod']
        if 'requestPostBody' in kwargs:
            request_post_body = kwargs['requestPostBody']
        if 'requestQueryParams' in kwargs:
            request_query_params = kwargs['requestQueryParams']
        if 'verifyResponseCodes' in kwargs:
            verify_response_codes = kwargs['verifyResponseCodes']
        if 'verifyResponseContent' in kwargs:
            verify_response_content = kwargs['verifyResponseContent']
        if 'verifyTexts' in kwargs:
            verify_texts = kwargs['verifyTexts']

        _setter("client_certificate_details", client_certificate_details)
        _setter("config_type", config_type)
        _setter("dns_configurations", dns_configurations)
        _setter("is_certificate_validation_enabled", is_certificate_validation_enabled)
        _setter("is_default_snapshot_enabled", is_default_snapshot_enabled)
        _setter("is_failure_retried", is_failure_retried)
        _setter("is_redirection_enabled", is_redirection_enabled)
        _setter("network_configurations", network_configurations)
        _setter("req_authentication_details", req_authentication_details)
        _setter("req_authentication_scheme", req_authentication_scheme)
        _setter("request_headers", request_headers)
        _setter("request_method", request_method)
        _setter("request_post_body", request_post_body)
        _setter("request_query_params", request_query_params)
        _setter("verify_response_codes", verify_response_codes)
        _setter("verify_response_content", verify_response_content)
        _setter("verify_texts", verify_texts)

    @property
    @pulumi.getter(name="clientCertificateDetails")
    def client_certificate_details(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailResult']:
        """
        Details for client certificate.
        """
        return pulumi.get(self, "client_certificate_details")

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> str:
        """
        Type of configuration.
        """
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="dnsConfigurations")
    def dns_configurations(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationDnsConfigurationResult']:
        """
        Information about the DNS settings.
        """
        return pulumi.get(self, "dns_configurations")

    @property
    @pulumi.getter(name="isCertificateValidationEnabled")
    def is_certificate_validation_enabled(self) -> bool:
        """
        If certificate validation is enabled, then the call will fail in case of certification errors.
        """
        return pulumi.get(self, "is_certificate_validation_enabled")

    @property
    @pulumi.getter(name="isDefaultSnapshotEnabled")
    def is_default_snapshot_enabled(self) -> bool:
        """
        If disabled, auto snapshots are not collected.
        """
        return pulumi.get(self, "is_default_snapshot_enabled")

    @property
    @pulumi.getter(name="isFailureRetried")
    def is_failure_retried(self) -> bool:
        """
        If isFailureRetried is enabled, then a failed call will be retried.
        """
        return pulumi.get(self, "is_failure_retried")

    @property
    @pulumi.getter(name="isRedirectionEnabled")
    def is_redirection_enabled(self) -> bool:
        """
        If redirection is enabled, then redirects will be allowed while accessing target URL.
        """
        return pulumi.get(self, "is_redirection_enabled")

    @property
    @pulumi.getter(name="networkConfigurations")
    def network_configurations(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationNetworkConfigurationResult']:
        """
        Details of the network configuration.
        """
        return pulumi.get(self, "network_configurations")

    @property
    @pulumi.getter(name="reqAuthenticationDetails")
    def req_authentication_details(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailResult']:
        """
        Details for request HTTP authentication.
        """
        return pulumi.get(self, "req_authentication_details")

    @property
    @pulumi.getter(name="reqAuthenticationScheme")
    def req_authentication_scheme(self) -> str:
        """
        Request HTTP authentication scheme.
        """
        return pulumi.get(self, "req_authentication_scheme")

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationRequestHeaderResult']:
        """
        List of request headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> str:
        """
        Request HTTP method.
        """
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestPostBody")
    def request_post_body(self) -> str:
        """
        Request post body content.
        """
        return pulumi.get(self, "request_post_body")

    @property
    @pulumi.getter(name="requestQueryParams")
    def request_query_params(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationRequestQueryParamResult']:
        """
        List of request query params. Example: `[{"paramName": "sortOrder", "paramValue": "asc"}]`
        """
        return pulumi.get(self, "request_query_params")

    @property
    @pulumi.getter(name="verifyResponseCodes")
    def verify_response_codes(self) -> Sequence[str]:
        """
        Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
        """
        return pulumi.get(self, "verify_response_codes")

    @property
    @pulumi.getter(name="verifyResponseContent")
    def verify_response_content(self) -> str:
        """
        Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
        """
        return pulumi.get(self, "verify_response_content")

    @property
    @pulumi.getter(name="verifyTexts")
    def verify_texts(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationVerifyTextResult']:
        """
        Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
        """
        return pulumi.get(self, "verify_texts")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailResult(dict):
    def __init__(__self__, *,
                 client_certificates: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailClientCertificateResult'],
                 private_keys: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailPrivateKeyResult']):
        """
        :param Sequence['GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailClientCertificateArgs'] client_certificates: Client certificate in PEM format.
        :param Sequence['GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailPrivateKeyArgs'] private_keys: The private key associated with the client certificate in PEM format.
        """
        GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_certificates=client_certificates,
            private_keys=private_keys,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_certificates: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailClientCertificateResult'],
             private_keys: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailPrivateKeyResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientCertificates' in kwargs:
            client_certificates = kwargs['clientCertificates']
        if 'privateKeys' in kwargs:
            private_keys = kwargs['privateKeys']

        _setter("client_certificates", client_certificates)
        _setter("private_keys", private_keys)

    @property
    @pulumi.getter(name="clientCertificates")
    def client_certificates(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailClientCertificateResult']:
        """
        Client certificate in PEM format.
        """
        return pulumi.get(self, "client_certificates")

    @property
    @pulumi.getter(name="privateKeys")
    def private_keys(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailPrivateKeyResult']:
        """
        The private key associated with the client certificate in PEM format.
        """
        return pulumi.get(self, "private_keys")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailClientCertificateResult(dict):
    def __init__(__self__, *,
                 content: str,
                 file_name: str):
        """
        :param str content: Content of the private key file.
        :param str file_name: Name of the private key file.
        """
        GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailClientCertificateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            file_name=file_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: str,
             file_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fileName' in kwargs:
            file_name = kwargs['fileName']

        _setter("content", content)
        _setter("file_name", file_name)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        Content of the private key file.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        """
        Name of the private key file.
        """
        return pulumi.get(self, "file_name")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailPrivateKeyResult(dict):
    def __init__(__self__, *,
                 content: str,
                 file_name: str):
        """
        :param str content: Content of the private key file.
        :param str file_name: Name of the private key file.
        """
        GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailPrivateKeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            file_name=file_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: str,
             file_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fileName' in kwargs:
            file_name = kwargs['fileName']

        _setter("content", content)
        _setter("file_name", file_name)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        Content of the private key file.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        """
        Name of the private key file.
        """
        return pulumi.get(self, "file_name")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationDnsConfigurationResult(dict):
    def __init__(__self__, *,
                 is_override_dns: bool,
                 override_dns_ip: str):
        """
        :param bool is_override_dns: If isOverrideDns is true, then DNS settings will be overridden.
        :param str override_dns_ip: Attribute to override the DNS IP value. This value will be honored only if isOverrideDns is set to true.
        """
        GetMonitorsMonitorCollectionItemConfigurationDnsConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_override_dns=is_override_dns,
            override_dns_ip=override_dns_ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_override_dns: bool,
             override_dns_ip: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isOverrideDns' in kwargs:
            is_override_dns = kwargs['isOverrideDns']
        if 'overrideDnsIp' in kwargs:
            override_dns_ip = kwargs['overrideDnsIp']

        _setter("is_override_dns", is_override_dns)
        _setter("override_dns_ip", override_dns_ip)

    @property
    @pulumi.getter(name="isOverrideDns")
    def is_override_dns(self) -> bool:
        """
        If isOverrideDns is true, then DNS settings will be overridden.
        """
        return pulumi.get(self, "is_override_dns")

    @property
    @pulumi.getter(name="overrideDnsIp")
    def override_dns_ip(self) -> str:
        """
        Attribute to override the DNS IP value. This value will be honored only if isOverrideDns is set to true.
        """
        return pulumi.get(self, "override_dns_ip")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 number_of_hops: int,
                 probe_mode: str,
                 probe_per_hop: int,
                 protocol: str,
                 transmission_rate: int):
        """
        :param int number_of_hops: Number of hops.
        :param str probe_mode: Type of probe mode when TCP protocol is selected.
        :param int probe_per_hop: Number of probes per hop.
        :param str protocol: Type of protocol.
        :param int transmission_rate: Number of probe packets sent out simultaneously.
        """
        GetMonitorsMonitorCollectionItemConfigurationNetworkConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            number_of_hops=number_of_hops,
            probe_mode=probe_mode,
            probe_per_hop=probe_per_hop,
            protocol=protocol,
            transmission_rate=transmission_rate,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             number_of_hops: int,
             probe_mode: str,
             probe_per_hop: int,
             protocol: str,
             transmission_rate: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'numberOfHops' in kwargs:
            number_of_hops = kwargs['numberOfHops']
        if 'probeMode' in kwargs:
            probe_mode = kwargs['probeMode']
        if 'probePerHop' in kwargs:
            probe_per_hop = kwargs['probePerHop']
        if 'transmissionRate' in kwargs:
            transmission_rate = kwargs['transmissionRate']

        _setter("number_of_hops", number_of_hops)
        _setter("probe_mode", probe_mode)
        _setter("probe_per_hop", probe_per_hop)
        _setter("protocol", protocol)
        _setter("transmission_rate", transmission_rate)

    @property
    @pulumi.getter(name="numberOfHops")
    def number_of_hops(self) -> int:
        """
        Number of hops.
        """
        return pulumi.get(self, "number_of_hops")

    @property
    @pulumi.getter(name="probeMode")
    def probe_mode(self) -> str:
        """
        Type of probe mode when TCP protocol is selected.
        """
        return pulumi.get(self, "probe_mode")

    @property
    @pulumi.getter(name="probePerHop")
    def probe_per_hop(self) -> int:
        """
        Number of probes per hop.
        """
        return pulumi.get(self, "probe_per_hop")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Type of protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="transmissionRate")
    def transmission_rate(self) -> int:
        """
        Number of probe packets sent out simultaneously.
        """
        return pulumi.get(self, "transmission_rate")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailResult(dict):
    def __init__(__self__, *,
                 auth_headers: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailAuthHeaderResult'],
                 auth_request_method: str,
                 auth_request_post_body: str,
                 auth_token: str,
                 auth_url: str,
                 auth_user_name: str,
                 auth_user_password: str,
                 oauth_scheme: str):
        """
        :param Sequence['GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailAuthHeaderArgs'] auth_headers: List of authentication headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        :param str auth_request_method: Request method.
        :param str auth_request_post_body: Request post body.
        :param str auth_token: Authentication token.
        :param str auth_url: URL to get authentication token.
        :param str auth_user_name: User name for authentication.
        :param str auth_user_password: User password for authentication.
        :param str oauth_scheme: Request HTTP OAuth scheme.
        """
        GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_headers=auth_headers,
            auth_request_method=auth_request_method,
            auth_request_post_body=auth_request_post_body,
            auth_token=auth_token,
            auth_url=auth_url,
            auth_user_name=auth_user_name,
            auth_user_password=auth_user_password,
            oauth_scheme=oauth_scheme,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_headers: Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailAuthHeaderResult'],
             auth_request_method: str,
             auth_request_post_body: str,
             auth_token: str,
             auth_url: str,
             auth_user_name: str,
             auth_user_password: str,
             oauth_scheme: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authHeaders' in kwargs:
            auth_headers = kwargs['authHeaders']
        if 'authRequestMethod' in kwargs:
            auth_request_method = kwargs['authRequestMethod']
        if 'authRequestPostBody' in kwargs:
            auth_request_post_body = kwargs['authRequestPostBody']
        if 'authToken' in kwargs:
            auth_token = kwargs['authToken']
        if 'authUrl' in kwargs:
            auth_url = kwargs['authUrl']
        if 'authUserName' in kwargs:
            auth_user_name = kwargs['authUserName']
        if 'authUserPassword' in kwargs:
            auth_user_password = kwargs['authUserPassword']
        if 'oauthScheme' in kwargs:
            oauth_scheme = kwargs['oauthScheme']

        _setter("auth_headers", auth_headers)
        _setter("auth_request_method", auth_request_method)
        _setter("auth_request_post_body", auth_request_post_body)
        _setter("auth_token", auth_token)
        _setter("auth_url", auth_url)
        _setter("auth_user_name", auth_user_name)
        _setter("auth_user_password", auth_user_password)
        _setter("oauth_scheme", oauth_scheme)

    @property
    @pulumi.getter(name="authHeaders")
    def auth_headers(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailAuthHeaderResult']:
        """
        List of authentication headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        """
        return pulumi.get(self, "auth_headers")

    @property
    @pulumi.getter(name="authRequestMethod")
    def auth_request_method(self) -> str:
        """
        Request method.
        """
        return pulumi.get(self, "auth_request_method")

    @property
    @pulumi.getter(name="authRequestPostBody")
    def auth_request_post_body(self) -> str:
        """
        Request post body.
        """
        return pulumi.get(self, "auth_request_post_body")

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        """
        Authentication token.
        """
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> str:
        """
        URL to get authentication token.
        """
        return pulumi.get(self, "auth_url")

    @property
    @pulumi.getter(name="authUserName")
    def auth_user_name(self) -> str:
        """
        User name for authentication.
        """
        return pulumi.get(self, "auth_user_name")

    @property
    @pulumi.getter(name="authUserPassword")
    def auth_user_password(self) -> str:
        """
        User password for authentication.
        """
        return pulumi.get(self, "auth_user_password")

    @property
    @pulumi.getter(name="oauthScheme")
    def oauth_scheme(self) -> str:
        """
        Request HTTP OAuth scheme.
        """
        return pulumi.get(self, "oauth_scheme")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailAuthHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: str,
                 header_value: str):
        """
        :param str header_name: Name of the header.
        :param str header_value: Value of the header.
        """
        GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailAuthHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_name=header_name,
            header_value=header_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_name: str,
             header_value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'headerValue' in kwargs:
            header_value = kwargs['headerValue']

        _setter("header_name", header_name)
        _setter("header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        """
        Name of the header.
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        """
        Value of the header.
        """
        return pulumi.get(self, "header_value")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationRequestHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: str,
                 header_value: str):
        """
        :param str header_name: Name of the header.
        :param str header_value: Value of the header.
        """
        GetMonitorsMonitorCollectionItemConfigurationRequestHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_name=header_name,
            header_value=header_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_name: str,
             header_value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'headerName' in kwargs:
            header_name = kwargs['headerName']
        if 'headerValue' in kwargs:
            header_value = kwargs['headerValue']

        _setter("header_name", header_name)
        _setter("header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        """
        Name of the header.
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        """
        Value of the header.
        """
        return pulumi.get(self, "header_value")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationRequestQueryParamResult(dict):
    def __init__(__self__, *,
                 param_name: str,
                 param_value: str):
        """
        :param str param_name: Name of the parameter.
        :param str param_value: Value of the parameter.
        """
        GetMonitorsMonitorCollectionItemConfigurationRequestQueryParamResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            param_name=param_name,
            param_value=param_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             param_name: str,
             param_value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']

        _setter("param_name", param_name)
        _setter("param_value", param_value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> str:
        """
        Value of the parameter.
        """
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationVerifyTextResult(dict):
    def __init__(__self__, *,
                 text: str):
        """
        :param str text: Verification text in the response.
        """
        GetMonitorsMonitorCollectionItemConfigurationVerifyTextResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            text=text,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             text: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("text", text)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Verification text in the response.
        """
        return pulumi.get(self, "text")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemMaintenanceWindowScheduleResult(dict):
    def __init__(__self__, *,
                 time_ended: str,
                 time_started: str):
        """
        :param str time_ended: End time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        :param str time_started: Start time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        GetMonitorsMonitorCollectionItemMaintenanceWindowScheduleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            time_ended=time_ended,
            time_started=time_started,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             time_ended: str,
             time_started: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'timeEnded' in kwargs:
            time_ended = kwargs['timeEnded']
        if 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']

        _setter("time_ended", time_ended)
        _setter("time_started", time_started)

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> str:
        """
        End time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        Start time of the maintenance window, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemScriptParameterResult(dict):
    def __init__(__self__, *,
                 is_overwritten: bool,
                 is_secret: bool,
                 monitor_script_parameters: Sequence['outputs.GetMonitorsMonitorCollectionItemScriptParameterMonitorScriptParameterResult'],
                 param_name: str,
                 param_value: str):
        """
        :param bool is_overwritten: If parameter value is default or overwritten.
        :param bool is_secret: Describes if  the parameter value is secret and should be kept confidential. isSecret is specified in either CreateScript or UpdateScript API.
        :param Sequence['GetMonitorsMonitorCollectionItemScriptParameterMonitorScriptParameterArgs'] monitor_script_parameters: Details of the script parameter that can be used to overwrite the parameter present in the script.
        :param str param_name: Name of the parameter.
        :param str param_value: Value of the parameter.
        """
        GetMonitorsMonitorCollectionItemScriptParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_overwritten=is_overwritten,
            is_secret=is_secret,
            monitor_script_parameters=monitor_script_parameters,
            param_name=param_name,
            param_value=param_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_overwritten: bool,
             is_secret: bool,
             monitor_script_parameters: Sequence['outputs.GetMonitorsMonitorCollectionItemScriptParameterMonitorScriptParameterResult'],
             param_name: str,
             param_value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isOverwritten' in kwargs:
            is_overwritten = kwargs['isOverwritten']
        if 'isSecret' in kwargs:
            is_secret = kwargs['isSecret']
        if 'monitorScriptParameters' in kwargs:
            monitor_script_parameters = kwargs['monitorScriptParameters']
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']

        _setter("is_overwritten", is_overwritten)
        _setter("is_secret", is_secret)
        _setter("monitor_script_parameters", monitor_script_parameters)
        _setter("param_name", param_name)
        _setter("param_value", param_value)

    @property
    @pulumi.getter(name="isOverwritten")
    def is_overwritten(self) -> bool:
        """
        If parameter value is default or overwritten.
        """
        return pulumi.get(self, "is_overwritten")

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> bool:
        """
        Describes if  the parameter value is secret and should be kept confidential. isSecret is specified in either CreateScript or UpdateScript API.
        """
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="monitorScriptParameters")
    def monitor_script_parameters(self) -> Sequence['outputs.GetMonitorsMonitorCollectionItemScriptParameterMonitorScriptParameterResult']:
        """
        Details of the script parameter that can be used to overwrite the parameter present in the script.
        """
        return pulumi.get(self, "monitor_script_parameters")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> str:
        """
        Value of the parameter.
        """
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemScriptParameterMonitorScriptParameterResult(dict):
    def __init__(__self__, *,
                 param_name: str,
                 param_value: str):
        """
        :param str param_name: Name of the parameter.
        :param str param_value: Value of the parameter.
        """
        GetMonitorsMonitorCollectionItemScriptParameterMonitorScriptParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            param_name=param_name,
            param_value=param_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             param_name: str,
             param_value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']

        _setter("param_name", param_name)
        _setter("param_value", param_value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> str:
        """
        Value of the parameter.
        """
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemVantagePointResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 name: str):
        """
        :param str display_name: A filter to return only the resources that match the entire display name.
        :param str name: Name of the vantage point.
        """
        GetMonitorsMonitorCollectionItemVantagePointResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']

        _setter("display_name", display_name)
        _setter("name", name)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only the resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the vantage point.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetResultResultDataSetResult(dict):
    def __init__(__self__, *,
                 byte_content: str,
                 name: str,
                 string_content: str,
                 timestamp: str):
        """
        :param str byte_content: Data content in byte format. Example: Zip or Screenshot.
        :param str name: Name of the data.
        :param str string_content: Data content in string format. Example: HAR.
        :param str timestamp: The time when the data was generated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
        """
        GetResultResultDataSetResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            byte_content=byte_content,
            name=name,
            string_content=string_content,
            timestamp=timestamp,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             byte_content: str,
             name: str,
             string_content: str,
             timestamp: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'byteContent' in kwargs:
            byte_content = kwargs['byteContent']
        if 'stringContent' in kwargs:
            string_content = kwargs['stringContent']

        _setter("byte_content", byte_content)
        _setter("name", name)
        _setter("string_content", string_content)
        _setter("timestamp", timestamp)

    @property
    @pulumi.getter(name="byteContent")
    def byte_content(self) -> str:
        """
        Data content in byte format. Example: Zip or Screenshot.
        """
        return pulumi.get(self, "byte_content")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the data.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stringContent")
    def string_content(self) -> str:
        """
        Data content in string format. Example: HAR.
        """
        return pulumi.get(self, "string_content")

    @property
    @pulumi.getter
    def timestamp(self) -> str:
        """
        The time when the data was generated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetScriptMonitorStatusCountMapResult(dict):
    def __init__(__self__, *,
                 disabled: int,
                 enabled: int,
                 invalid: int,
                 total: int):
        """
        :param int disabled: Number of disabled monitors using the script.
        :param int enabled: Number of enabled monitors using the script.
        :param int invalid: Number of invalid monitors using the script.
        :param int total: Total number of monitors using the script.
        """
        GetScriptMonitorStatusCountMapResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disabled=disabled,
            enabled=enabled,
            invalid=invalid,
            total=total,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disabled: int,
             enabled: int,
             invalid: int,
             total: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("disabled", disabled)
        _setter("enabled", enabled)
        _setter("invalid", invalid)
        _setter("total", total)

    @property
    @pulumi.getter
    def disabled(self) -> int:
        """
        Number of disabled monitors using the script.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> int:
        """
        Number of enabled monitors using the script.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def invalid(self) -> int:
        """
        Number of invalid monitors using the script.
        """
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total number of monitors using the script.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetScriptParameterResult(dict):
    def __init__(__self__, *,
                 is_overwritten: bool,
                 is_secret: bool,
                 param_name: str,
                 param_value: str,
                 script_parameters: Sequence['outputs.GetScriptParameterScriptParameterResult']):
        """
        :param bool is_overwritten: If parameter value is default or overwritten.
        :param bool is_secret: If the parameter value is secret and should be kept confidential, then set isSecret to true.
        :param str param_name: Name of the parameter.
        :param str param_value: Value of the parameter.
        :param Sequence['GetScriptParameterScriptParameterArgs'] script_parameters: Details of the script parameters, paramName must be from the script content and these details can be used to overwrite the default parameter present in the script content.
        """
        GetScriptParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_overwritten=is_overwritten,
            is_secret=is_secret,
            param_name=param_name,
            param_value=param_value,
            script_parameters=script_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_overwritten: bool,
             is_secret: bool,
             param_name: str,
             param_value: str,
             script_parameters: Sequence['outputs.GetScriptParameterScriptParameterResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isOverwritten' in kwargs:
            is_overwritten = kwargs['isOverwritten']
        if 'isSecret' in kwargs:
            is_secret = kwargs['isSecret']
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']
        if 'scriptParameters' in kwargs:
            script_parameters = kwargs['scriptParameters']

        _setter("is_overwritten", is_overwritten)
        _setter("is_secret", is_secret)
        _setter("param_name", param_name)
        _setter("param_value", param_value)
        _setter("script_parameters", script_parameters)

    @property
    @pulumi.getter(name="isOverwritten")
    def is_overwritten(self) -> bool:
        """
        If parameter value is default or overwritten.
        """
        return pulumi.get(self, "is_overwritten")

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> bool:
        """
        If the parameter value is secret and should be kept confidential, then set isSecret to true.
        """
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> str:
        """
        Value of the parameter.
        """
        return pulumi.get(self, "param_value")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Sequence['outputs.GetScriptParameterScriptParameterResult']:
        """
        Details of the script parameters, paramName must be from the script content and these details can be used to overwrite the default parameter present in the script content.
        """
        return pulumi.get(self, "script_parameters")


@pulumi.output_type
class GetScriptParameterScriptParameterResult(dict):
    def __init__(__self__, *,
                 is_secret: bool,
                 param_name: str,
                 param_value: str):
        """
        :param bool is_secret: If the parameter value is secret and should be kept confidential, then set isSecret to true.
        :param str param_name: Name of the parameter.
        :param str param_value: Value of the parameter.
        """
        GetScriptParameterScriptParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_secret=is_secret,
            param_name=param_name,
            param_value=param_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_secret: bool,
             param_name: str,
             param_value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isSecret' in kwargs:
            is_secret = kwargs['isSecret']
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']

        _setter("is_secret", is_secret)
        _setter("param_name", param_name)
        _setter("param_value", param_value)

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> bool:
        """
        If the parameter value is secret and should be kept confidential, then set isSecret to true.
        """
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> str:
        """
        Value of the parameter.
        """
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetScriptsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetScriptsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetScriptsScriptCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetScriptsScriptCollectionItemResult']):
        GetScriptsScriptCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetScriptsScriptCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetScriptsScriptCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetScriptsScriptCollectionItemResult(dict):
    def __init__(__self__, *,
                 apm_domain_id: str,
                 content: str,
                 content_file_name: str,
                 content_size_in_bytes: int,
                 content_type: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 monitor_status_count_maps: Sequence['outputs.GetScriptsScriptCollectionItemMonitorStatusCountMapResult'],
                 parameters: Sequence['outputs.GetScriptsScriptCollectionItemParameterResult'],
                 time_created: str,
                 time_updated: str,
                 time_uploaded: str):
        """
        :param str apm_domain_id: The APM domain ID the request is intended for.
        :param str content: The content of the script. It may contain custom-defined tags that can be used for setting dynamic parameters. The format to set dynamic parameters is: `<ORAP><ON>param name</ON><OV>param value</OV><OS>isParamValueSecret(true/false)</OS></ORAP>`. Param value and isParamValueSecret are optional, the default value for isParamValueSecret is false. Examples: With mandatory param name : `<ORAP><ON>param name</ON></ORAP>` With parameter name and value : `<ORAP><ON>param name</ON><OV>param value</OV></ORAP>` Note that the content is valid if it matches the given content type. For example, if the content type is SIDE, then the content should be in Side script format. If the content type is JS, then the content should be in JavaScript format.
        :param str content_file_name: File name of the uploaded script content.
        :param int content_size_in_bytes: Size of the script content.
        :param str content_type: A filter to return only resources that match the content type given.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param str display_name: A filter to return only the resources that match the entire display name.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
        :param Sequence['GetScriptsScriptCollectionItemMonitorStatusCountMapArgs'] monitor_status_count_maps: Details of the monitor count per state. Example: `{ "total" : 5, "enabled" : 3 , "disabled" : 2, "invalid" : 0 }`
        :param Sequence['GetScriptsScriptCollectionItemParameterArgs'] parameters: List of script parameters. Example: `[{"scriptParameter": {"paramName": "userid", "paramValue":"testuser", "isSecret": false}, "isOverwritten": false}]`
        :param str time_created: The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        :param str time_updated: The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
        :param str time_uploaded: The time the script was uploaded.
        """
        GetScriptsScriptCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            apm_domain_id=apm_domain_id,
            content=content,
            content_file_name=content_file_name,
            content_size_in_bytes=content_size_in_bytes,
            content_type=content_type,
            defined_tags=defined_tags,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            monitor_status_count_maps=monitor_status_count_maps,
            parameters=parameters,
            time_created=time_created,
            time_updated=time_updated,
            time_uploaded=time_uploaded,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             apm_domain_id: str,
             content: str,
             content_file_name: str,
             content_size_in_bytes: int,
             content_type: str,
             defined_tags: Mapping[str, Any],
             display_name: str,
             freeform_tags: Mapping[str, Any],
             id: str,
             monitor_status_count_maps: Sequence['outputs.GetScriptsScriptCollectionItemMonitorStatusCountMapResult'],
             parameters: Sequence['outputs.GetScriptsScriptCollectionItemParameterResult'],
             time_created: str,
             time_updated: str,
             time_uploaded: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apmDomainId' in kwargs:
            apm_domain_id = kwargs['apmDomainId']
        if 'contentFileName' in kwargs:
            content_file_name = kwargs['contentFileName']
        if 'contentSizeInBytes' in kwargs:
            content_size_in_bytes = kwargs['contentSizeInBytes']
        if 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'monitorStatusCountMaps' in kwargs:
            monitor_status_count_maps = kwargs['monitorStatusCountMaps']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if 'timeUploaded' in kwargs:
            time_uploaded = kwargs['timeUploaded']

        _setter("apm_domain_id", apm_domain_id)
        _setter("content", content)
        _setter("content_file_name", content_file_name)
        _setter("content_size_in_bytes", content_size_in_bytes)
        _setter("content_type", content_type)
        _setter("defined_tags", defined_tags)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("monitor_status_count_maps", monitor_status_count_maps)
        _setter("parameters", parameters)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)
        _setter("time_uploaded", time_uploaded)

    @property
    @pulumi.getter(name="apmDomainId")
    def apm_domain_id(self) -> str:
        """
        The APM domain ID the request is intended for.
        """
        return pulumi.get(self, "apm_domain_id")

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content of the script. It may contain custom-defined tags that can be used for setting dynamic parameters. The format to set dynamic parameters is: `<ORAP><ON>param name</ON><OV>param value</OV><OS>isParamValueSecret(true/false)</OS></ORAP>`. Param value and isParamValueSecret are optional, the default value for isParamValueSecret is false. Examples: With mandatory param name : `<ORAP><ON>param name</ON></ORAP>` With parameter name and value : `<ORAP><ON>param name</ON><OV>param value</OV></ORAP>` Note that the content is valid if it matches the given content type. For example, if the content type is SIDE, then the content should be in Side script format. If the content type is JS, then the content should be in JavaScript format.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentFileName")
    def content_file_name(self) -> str:
        """
        File name of the uploaded script content.
        """
        return pulumi.get(self, "content_file_name")

    @property
    @pulumi.getter(name="contentSizeInBytes")
    def content_size_in_bytes(self) -> int:
        """
        Size of the script content.
        """
        return pulumi.get(self, "content_size_in_bytes")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        A filter to return only resources that match the content type given.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only the resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monitorStatusCountMaps")
    def monitor_status_count_maps(self) -> Sequence['outputs.GetScriptsScriptCollectionItemMonitorStatusCountMapResult']:
        """
        Details of the monitor count per state. Example: `{ "total" : 5, "enabled" : 3 , "disabled" : 2, "invalid" : 0 }`
        """
        return pulumi.get(self, "monitor_status_count_maps")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetScriptsScriptCollectionItemParameterResult']:
        """
        List of script parameters. Example: `[{"scriptParameter": {"paramName": "userid", "paramValue":"testuser", "isSecret": false}, "isOverwritten": false}]`
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="timeUploaded")
    def time_uploaded(self) -> str:
        """
        The time the script was uploaded.
        """
        return pulumi.get(self, "time_uploaded")


@pulumi.output_type
class GetScriptsScriptCollectionItemMonitorStatusCountMapResult(dict):
    def __init__(__self__, *,
                 disabled: int,
                 enabled: int,
                 invalid: int,
                 total: int):
        """
        :param int disabled: Number of disabled monitors using the script.
        :param int enabled: Number of enabled monitors using the script.
        :param int invalid: Number of invalid monitors using the script.
        :param int total: Total number of monitors using the script.
        """
        GetScriptsScriptCollectionItemMonitorStatusCountMapResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disabled=disabled,
            enabled=enabled,
            invalid=invalid,
            total=total,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disabled: int,
             enabled: int,
             invalid: int,
             total: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("disabled", disabled)
        _setter("enabled", enabled)
        _setter("invalid", invalid)
        _setter("total", total)

    @property
    @pulumi.getter
    def disabled(self) -> int:
        """
        Number of disabled monitors using the script.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> int:
        """
        Number of enabled monitors using the script.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def invalid(self) -> int:
        """
        Number of invalid monitors using the script.
        """
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total number of monitors using the script.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetScriptsScriptCollectionItemParameterResult(dict):
    def __init__(__self__, *,
                 is_overwritten: bool,
                 is_secret: bool,
                 param_name: str,
                 param_value: str,
                 script_parameters: Sequence['outputs.GetScriptsScriptCollectionItemParameterScriptParameterResult']):
        """
        :param bool is_overwritten: If parameter value is default or overwritten.
        :param bool is_secret: If the parameter value is secret and should be kept confidential, then set isSecret to true.
        :param str param_name: Name of the parameter.
        :param str param_value: Value of the parameter.
        :param Sequence['GetScriptsScriptCollectionItemParameterScriptParameterArgs'] script_parameters: Details of the script parameters, paramName must be from the script content and these details can be used to overwrite the default parameter present in the script content.
        """
        GetScriptsScriptCollectionItemParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_overwritten=is_overwritten,
            is_secret=is_secret,
            param_name=param_name,
            param_value=param_value,
            script_parameters=script_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_overwritten: bool,
             is_secret: bool,
             param_name: str,
             param_value: str,
             script_parameters: Sequence['outputs.GetScriptsScriptCollectionItemParameterScriptParameterResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isOverwritten' in kwargs:
            is_overwritten = kwargs['isOverwritten']
        if 'isSecret' in kwargs:
            is_secret = kwargs['isSecret']
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']
        if 'scriptParameters' in kwargs:
            script_parameters = kwargs['scriptParameters']

        _setter("is_overwritten", is_overwritten)
        _setter("is_secret", is_secret)
        _setter("param_name", param_name)
        _setter("param_value", param_value)
        _setter("script_parameters", script_parameters)

    @property
    @pulumi.getter(name="isOverwritten")
    def is_overwritten(self) -> bool:
        """
        If parameter value is default or overwritten.
        """
        return pulumi.get(self, "is_overwritten")

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> bool:
        """
        If the parameter value is secret and should be kept confidential, then set isSecret to true.
        """
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> str:
        """
        Value of the parameter.
        """
        return pulumi.get(self, "param_value")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Sequence['outputs.GetScriptsScriptCollectionItemParameterScriptParameterResult']:
        """
        Details of the script parameters, paramName must be from the script content and these details can be used to overwrite the default parameter present in the script content.
        """
        return pulumi.get(self, "script_parameters")


@pulumi.output_type
class GetScriptsScriptCollectionItemParameterScriptParameterResult(dict):
    def __init__(__self__, *,
                 is_secret: bool,
                 param_name: str,
                 param_value: str):
        """
        :param bool is_secret: If the parameter value is secret and should be kept confidential, then set isSecret to true.
        :param str param_name: Name of the parameter.
        :param str param_value: Value of the parameter.
        """
        GetScriptsScriptCollectionItemParameterScriptParameterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_secret=is_secret,
            param_name=param_name,
            param_value=param_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_secret: bool,
             param_name: str,
             param_value: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'isSecret' in kwargs:
            is_secret = kwargs['isSecret']
        if 'paramName' in kwargs:
            param_name = kwargs['paramName']
        if 'paramValue' in kwargs:
            param_value = kwargs['paramValue']

        _setter("is_secret", is_secret)
        _setter("param_name", param_name)
        _setter("param_value", param_value)

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> bool:
        """
        If the parameter value is secret and should be kept confidential, then set isSecret to true.
        """
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        Name of the parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> str:
        """
        Value of the parameter.
        """
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetVantagePointItemResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 geos: Sequence['outputs.GetVantagePointItemGeoResult'],
                 name: str):
        """
        :param str display_name: A filter to return only the resources that match the entire display name.
        :param Sequence['GetVantagePointItemGeoArgs'] geos: Geographic summary of a vantage point.
        :param str name: A filter to return only the resources that match the entire name.
        """
        GetVantagePointItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            geos=geos,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: str,
             geos: Sequence['outputs.GetVantagePointItemGeoResult'],
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']

        _setter("display_name", display_name)
        _setter("geos", geos)
        _setter("name", name)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only the resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def geos(self) -> Sequence['outputs.GetVantagePointItemGeoResult']:
        """
        Geographic summary of a vantage point.
        """
        return pulumi.get(self, "geos")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only the resources that match the entire name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVantagePointItemGeoResult(dict):
    def __init__(__self__, *,
                 admin_div_code: str,
                 city_name: str,
                 country_code: str,
                 country_name: str,
                 latitude: float,
                 longitude: float):
        """
        :param str admin_div_code: The ISO 3166-2 code for this location's first-level administrative division, either a US state or Canadian province. Only included for locations in the US or Canada. For a list of codes, see Country Codes.
        :param str city_name: Common English-language name for the city.
        :param str country_code: The ISO 3166-1 alpha-2 country code. For a list of codes, see Country Codes.
        :param str country_name: The common English-language name for the country.
        :param float latitude: Degrees north of the Equator.
        :param float longitude: Degrees east of the prime meridian.
        """
        GetVantagePointItemGeoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            admin_div_code=admin_div_code,
            city_name=city_name,
            country_code=country_code,
            country_name=country_name,
            latitude=latitude,
            longitude=longitude,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             admin_div_code: str,
             city_name: str,
             country_code: str,
             country_name: str,
             latitude: float,
             longitude: float,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'adminDivCode' in kwargs:
            admin_div_code = kwargs['adminDivCode']
        if 'cityName' in kwargs:
            city_name = kwargs['cityName']
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'countryName' in kwargs:
            country_name = kwargs['countryName']

        _setter("admin_div_code", admin_div_code)
        _setter("city_name", city_name)
        _setter("country_code", country_code)
        _setter("country_name", country_name)
        _setter("latitude", latitude)
        _setter("longitude", longitude)

    @property
    @pulumi.getter(name="adminDivCode")
    def admin_div_code(self) -> str:
        """
        The ISO 3166-2 code for this location's first-level administrative division, either a US state or Canadian province. Only included for locations in the US or Canada. For a list of codes, see Country Codes.
        """
        return pulumi.get(self, "admin_div_code")

    @property
    @pulumi.getter(name="cityName")
    def city_name(self) -> str:
        """
        Common English-language name for the city.
        """
        return pulumi.get(self, "city_name")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        The ISO 3166-1 alpha-2 country code. For a list of codes, see Country Codes.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="countryName")
    def country_name(self) -> str:
        """
        The common English-language name for the country.
        """
        return pulumi.get(self, "country_name")

    @property
    @pulumi.getter
    def latitude(self) -> float:
        """
        Degrees north of the Equator.
        """
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        """
        Degrees east of the prime meridian.
        """
        return pulumi.get(self, "longitude")


@pulumi.output_type
class GetVantagePointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only the resources that match the entire name.
        """
        GetVantagePointsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only the resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVantagePointsPublicVantagePointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetVantagePointsPublicVantagePointCollectionItemResult']):
        """
        :param Sequence['GetVantagePointsPublicVantagePointCollectionItemArgs'] items: List of PublicVantagePointSummary items.
        """
        GetVantagePointsPublicVantagePointCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetVantagePointsPublicVantagePointCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetVantagePointsPublicVantagePointCollectionItemResult']:
        """
        List of PublicVantagePointSummary items.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetVantagePointsPublicVantagePointCollectionItemResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 geos: Sequence['outputs.GetVantagePointsPublicVantagePointCollectionItemGeoResult'],
                 name: str):
        """
        :param str display_name: A filter to return only the resources that match the entire display name.
        :param Sequence['GetVantagePointsPublicVantagePointCollectionItemGeoArgs'] geos: Geographic summary of a vantage point.
        :param str name: A filter to return only the resources that match the entire name.
        """
        GetVantagePointsPublicVantagePointCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            geos=geos,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: str,
             geos: Sequence['outputs.GetVantagePointsPublicVantagePointCollectionItemGeoResult'],
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']

        _setter("display_name", display_name)
        _setter("geos", geos)
        _setter("name", name)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only the resources that match the entire display name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def geos(self) -> Sequence['outputs.GetVantagePointsPublicVantagePointCollectionItemGeoResult']:
        """
        Geographic summary of a vantage point.
        """
        return pulumi.get(self, "geos")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only the resources that match the entire name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVantagePointsPublicVantagePointCollectionItemGeoResult(dict):
    def __init__(__self__, *,
                 admin_div_code: str,
                 city_name: str,
                 country_code: str,
                 country_name: str,
                 latitude: float,
                 longitude: float):
        """
        :param str admin_div_code: The ISO 3166-2 code for this location's first-level administrative division, either a US state or Canadian province. Only included for locations in the US or Canada. For a list of codes, see Country Codes.
        :param str city_name: Common English-language name for the city.
        :param str country_code: The ISO 3166-1 alpha-2 country code. For a list of codes, see Country Codes.
        :param str country_name: The common English-language name for the country.
        :param float latitude: Degrees north of the equator.
        :param float longitude: Degrees east of the prime meridian.
        """
        GetVantagePointsPublicVantagePointCollectionItemGeoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            admin_div_code=admin_div_code,
            city_name=city_name,
            country_code=country_code,
            country_name=country_name,
            latitude=latitude,
            longitude=longitude,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             admin_div_code: str,
             city_name: str,
             country_code: str,
             country_name: str,
             latitude: float,
             longitude: float,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'adminDivCode' in kwargs:
            admin_div_code = kwargs['adminDivCode']
        if 'cityName' in kwargs:
            city_name = kwargs['cityName']
        if 'countryCode' in kwargs:
            country_code = kwargs['countryCode']
        if 'countryName' in kwargs:
            country_name = kwargs['countryName']

        _setter("admin_div_code", admin_div_code)
        _setter("city_name", city_name)
        _setter("country_code", country_code)
        _setter("country_name", country_name)
        _setter("latitude", latitude)
        _setter("longitude", longitude)

    @property
    @pulumi.getter(name="adminDivCode")
    def admin_div_code(self) -> str:
        """
        The ISO 3166-2 code for this location's first-level administrative division, either a US state or Canadian province. Only included for locations in the US or Canada. For a list of codes, see Country Codes.
        """
        return pulumi.get(self, "admin_div_code")

    @property
    @pulumi.getter(name="cityName")
    def city_name(self) -> str:
        """
        Common English-language name for the city.
        """
        return pulumi.get(self, "city_name")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        The ISO 3166-1 alpha-2 country code. For a list of codes, see Country Codes.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="countryName")
    def country_name(self) -> str:
        """
        The common English-language name for the country.
        """
        return pulumi.get(self, "country_name")

    @property
    @pulumi.getter
    def latitude(self) -> float:
        """
        Degrees north of the equator.
        """
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        """
        Degrees east of the prime meridian.
        """
        return pulumi.get(self, "longitude")


