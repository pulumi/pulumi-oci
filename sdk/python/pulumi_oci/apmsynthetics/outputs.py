# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ConfigAvailabilityConfiguration',
    'ConfigConfiguration',
    'ConfigConfigurationClientCertificateDetails',
    'ConfigConfigurationClientCertificateDetailsClientCertificate',
    'ConfigConfigurationClientCertificateDetailsPrivateKey',
    'ConfigConfigurationDnsConfiguration',
    'ConfigConfigurationNetworkConfiguration',
    'ConfigConfigurationReqAuthenticationDetails',
    'ConfigConfigurationReqAuthenticationDetailsAuthHeader',
    'ConfigConfigurationRequestHeader',
    'ConfigConfigurationRequestQueryParam',
    'ConfigConfigurationVerifyText',
    'ConfigMaintenanceWindowSchedule',
    'ConfigScriptParameter',
    'ConfigScriptParameterMonitorScriptParameter',
    'ConfigVantagePoint',
    'DedicatedVantagePointDvpStackDetails',
    'DedicatedVantagePointMonitorStatusCountMap',
    'ScriptMonitorStatusCountMap',
    'ScriptParameter',
    'ScriptParameterScriptParameter',
    'GetDedicatedVantagePointDvpStackDetailResult',
    'GetDedicatedVantagePointMonitorStatusCountMapResult',
    'GetDedicatedVantagePointsDedicatedVantagePointCollectionResult',
    'GetDedicatedVantagePointsDedicatedVantagePointCollectionItemResult',
    'GetDedicatedVantagePointsDedicatedVantagePointCollectionItemDvpStackDetailResult',
    'GetDedicatedVantagePointsDedicatedVantagePointCollectionItemMonitorStatusCountMapResult',
    'GetDedicatedVantagePointsFilterResult',
    'GetMonitorAvailabilityConfigurationResult',
    'GetMonitorConfigurationResult',
    'GetMonitorConfigurationClientCertificateDetailResult',
    'GetMonitorConfigurationClientCertificateDetailClientCertificateResult',
    'GetMonitorConfigurationClientCertificateDetailPrivateKeyResult',
    'GetMonitorConfigurationDnsConfigurationResult',
    'GetMonitorConfigurationNetworkConfigurationResult',
    'GetMonitorConfigurationReqAuthenticationDetailResult',
    'GetMonitorConfigurationReqAuthenticationDetailAuthHeaderResult',
    'GetMonitorConfigurationRequestHeaderResult',
    'GetMonitorConfigurationRequestQueryParamResult',
    'GetMonitorConfigurationVerifyTextResult',
    'GetMonitorMaintenanceWindowScheduleResult',
    'GetMonitorScriptParameterResult',
    'GetMonitorScriptParameterMonitorScriptParameterResult',
    'GetMonitorVantagePointResult',
    'GetMonitorsFilterResult',
    'GetMonitorsMonitorCollectionResult',
    'GetMonitorsMonitorCollectionItemResult',
    'GetMonitorsMonitorCollectionItemAvailabilityConfigurationResult',
    'GetMonitorsMonitorCollectionItemConfigurationResult',
    'GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailResult',
    'GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailClientCertificateResult',
    'GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailPrivateKeyResult',
    'GetMonitorsMonitorCollectionItemConfigurationDnsConfigurationResult',
    'GetMonitorsMonitorCollectionItemConfigurationNetworkConfigurationResult',
    'GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailResult',
    'GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailAuthHeaderResult',
    'GetMonitorsMonitorCollectionItemConfigurationRequestHeaderResult',
    'GetMonitorsMonitorCollectionItemConfigurationRequestQueryParamResult',
    'GetMonitorsMonitorCollectionItemConfigurationVerifyTextResult',
    'GetMonitorsMonitorCollectionItemMaintenanceWindowScheduleResult',
    'GetMonitorsMonitorCollectionItemScriptParameterResult',
    'GetMonitorsMonitorCollectionItemScriptParameterMonitorScriptParameterResult',
    'GetMonitorsMonitorCollectionItemVantagePointResult',
    'GetResultResultDataSetResult',
    'GetScriptMonitorStatusCountMapResult',
    'GetScriptParameterResult',
    'GetScriptParameterScriptParameterResult',
    'GetScriptsFilterResult',
    'GetScriptsScriptCollectionResult',
    'GetScriptsScriptCollectionItemResult',
    'GetScriptsScriptCollectionItemMonitorStatusCountMapResult',
    'GetScriptsScriptCollectionItemParameterResult',
    'GetScriptsScriptCollectionItemParameterScriptParameterResult',
    'GetVantagePointItemResult',
    'GetVantagePointItemGeoResult',
    'GetVantagePointsFilterResult',
    'GetVantagePointsPublicVantagePointCollectionResult',
    'GetVantagePointsPublicVantagePointCollectionItemResult',
    'GetVantagePointsPublicVantagePointCollectionItemGeoResult',
]

@pulumi.output_type
class ConfigAvailabilityConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxAllowedFailuresPerInterval":
            suggest = "max_allowed_failures_per_interval"
        elif key == "minAllowedRunsPerInterval":
            suggest = "min_allowed_runs_per_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigAvailabilityConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigAvailabilityConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigAvailabilityConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_allowed_failures_per_interval: Optional[int] = None,
                 min_allowed_runs_per_interval: Optional[int] = None):
        if max_allowed_failures_per_interval is not None:
            pulumi.set(__self__, "max_allowed_failures_per_interval", max_allowed_failures_per_interval)
        if min_allowed_runs_per_interval is not None:
            pulumi.set(__self__, "min_allowed_runs_per_interval", min_allowed_runs_per_interval)

    @property
    @pulumi.getter(name="maxAllowedFailuresPerInterval")
    def max_allowed_failures_per_interval(self) -> Optional[int]:
        return pulumi.get(self, "max_allowed_failures_per_interval")

    @property
    @pulumi.getter(name="minAllowedRunsPerInterval")
    def min_allowed_runs_per_interval(self) -> Optional[int]:
        return pulumi.get(self, "min_allowed_runs_per_interval")


@pulumi.output_type
class ConfigConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientCertificateDetails":
            suggest = "client_certificate_details"
        elif key == "configType":
            suggest = "config_type"
        elif key == "dnsConfiguration":
            suggest = "dns_configuration"
        elif key == "isCertificateValidationEnabled":
            suggest = "is_certificate_validation_enabled"
        elif key == "isDefaultSnapshotEnabled":
            suggest = "is_default_snapshot_enabled"
        elif key == "isFailureRetried":
            suggest = "is_failure_retried"
        elif key == "isRedirectionEnabled":
            suggest = "is_redirection_enabled"
        elif key == "networkConfiguration":
            suggest = "network_configuration"
        elif key == "reqAuthenticationDetails":
            suggest = "req_authentication_details"
        elif key == "reqAuthenticationScheme":
            suggest = "req_authentication_scheme"
        elif key == "requestHeaders":
            suggest = "request_headers"
        elif key == "requestMethod":
            suggest = "request_method"
        elif key == "requestPostBody":
            suggest = "request_post_body"
        elif key == "requestQueryParams":
            suggest = "request_query_params"
        elif key == "verifyResponseCodes":
            suggest = "verify_response_codes"
        elif key == "verifyResponseContent":
            suggest = "verify_response_content"
        elif key == "verifyTexts":
            suggest = "verify_texts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_certificate_details: Optional['outputs.ConfigConfigurationClientCertificateDetails'] = None,
                 config_type: Optional[str] = None,
                 dns_configuration: Optional['outputs.ConfigConfigurationDnsConfiguration'] = None,
                 is_certificate_validation_enabled: Optional[bool] = None,
                 is_default_snapshot_enabled: Optional[bool] = None,
                 is_failure_retried: Optional[bool] = None,
                 is_redirection_enabled: Optional[bool] = None,
                 network_configuration: Optional['outputs.ConfigConfigurationNetworkConfiguration'] = None,
                 req_authentication_details: Optional['outputs.ConfigConfigurationReqAuthenticationDetails'] = None,
                 req_authentication_scheme: Optional[str] = None,
                 request_headers: Optional[Sequence['outputs.ConfigConfigurationRequestHeader']] = None,
                 request_method: Optional[str] = None,
                 request_post_body: Optional[str] = None,
                 request_query_params: Optional[Sequence['outputs.ConfigConfigurationRequestQueryParam']] = None,
                 verify_response_codes: Optional[Sequence[str]] = None,
                 verify_response_content: Optional[str] = None,
                 verify_texts: Optional[Sequence['outputs.ConfigConfigurationVerifyText']] = None):
        if client_certificate_details is not None:
            pulumi.set(__self__, "client_certificate_details", client_certificate_details)
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if dns_configuration is not None:
            pulumi.set(__self__, "dns_configuration", dns_configuration)
        if is_certificate_validation_enabled is not None:
            pulumi.set(__self__, "is_certificate_validation_enabled", is_certificate_validation_enabled)
        if is_default_snapshot_enabled is not None:
            pulumi.set(__self__, "is_default_snapshot_enabled", is_default_snapshot_enabled)
        if is_failure_retried is not None:
            pulumi.set(__self__, "is_failure_retried", is_failure_retried)
        if is_redirection_enabled is not None:
            pulumi.set(__self__, "is_redirection_enabled", is_redirection_enabled)
        if network_configuration is not None:
            pulumi.set(__self__, "network_configuration", network_configuration)
        if req_authentication_details is not None:
            pulumi.set(__self__, "req_authentication_details", req_authentication_details)
        if req_authentication_scheme is not None:
            pulumi.set(__self__, "req_authentication_scheme", req_authentication_scheme)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if request_post_body is not None:
            pulumi.set(__self__, "request_post_body", request_post_body)
        if request_query_params is not None:
            pulumi.set(__self__, "request_query_params", request_query_params)
        if verify_response_codes is not None:
            pulumi.set(__self__, "verify_response_codes", verify_response_codes)
        if verify_response_content is not None:
            pulumi.set(__self__, "verify_response_content", verify_response_content)
        if verify_texts is not None:
            pulumi.set(__self__, "verify_texts", verify_texts)

    @property
    @pulumi.getter(name="clientCertificateDetails")
    def client_certificate_details(self) -> Optional['outputs.ConfigConfigurationClientCertificateDetails']:
        return pulumi.get(self, "client_certificate_details")

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[str]:
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="dnsConfiguration")
    def dns_configuration(self) -> Optional['outputs.ConfigConfigurationDnsConfiguration']:
        return pulumi.get(self, "dns_configuration")

    @property
    @pulumi.getter(name="isCertificateValidationEnabled")
    def is_certificate_validation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_certificate_validation_enabled")

    @property
    @pulumi.getter(name="isDefaultSnapshotEnabled")
    def is_default_snapshot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_snapshot_enabled")

    @property
    @pulumi.getter(name="isFailureRetried")
    def is_failure_retried(self) -> Optional[bool]:
        return pulumi.get(self, "is_failure_retried")

    @property
    @pulumi.getter(name="isRedirectionEnabled")
    def is_redirection_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_redirection_enabled")

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> Optional['outputs.ConfigConfigurationNetworkConfiguration']:
        return pulumi.get(self, "network_configuration")

    @property
    @pulumi.getter(name="reqAuthenticationDetails")
    def req_authentication_details(self) -> Optional['outputs.ConfigConfigurationReqAuthenticationDetails']:
        return pulumi.get(self, "req_authentication_details")

    @property
    @pulumi.getter(name="reqAuthenticationScheme")
    def req_authentication_scheme(self) -> Optional[str]:
        return pulumi.get(self, "req_authentication_scheme")

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[Sequence['outputs.ConfigConfigurationRequestHeader']]:
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[str]:
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestPostBody")
    def request_post_body(self) -> Optional[str]:
        return pulumi.get(self, "request_post_body")

    @property
    @pulumi.getter(name="requestQueryParams")
    def request_query_params(self) -> Optional[Sequence['outputs.ConfigConfigurationRequestQueryParam']]:
        return pulumi.get(self, "request_query_params")

    @property
    @pulumi.getter(name="verifyResponseCodes")
    def verify_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "verify_response_codes")

    @property
    @pulumi.getter(name="verifyResponseContent")
    def verify_response_content(self) -> Optional[str]:
        return pulumi.get(self, "verify_response_content")

    @property
    @pulumi.getter(name="verifyTexts")
    def verify_texts(self) -> Optional[Sequence['outputs.ConfigConfigurationVerifyText']]:
        return pulumi.get(self, "verify_texts")


@pulumi.output_type
class ConfigConfigurationClientCertificateDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "privateKey":
            suggest = "private_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationClientCertificateDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationClientCertificateDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationClientCertificateDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_certificate: Optional['outputs.ConfigConfigurationClientCertificateDetailsClientCertificate'] = None,
                 private_key: Optional['outputs.ConfigConfigurationClientCertificateDetailsPrivateKey'] = None):
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional['outputs.ConfigConfigurationClientCertificateDetailsClientCertificate']:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional['outputs.ConfigConfigurationClientCertificateDetailsPrivateKey']:
        return pulumi.get(self, "private_key")


@pulumi.output_type
class ConfigConfigurationClientCertificateDetailsClientCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileName":
            suggest = "file_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationClientCertificateDetailsClientCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationClientCertificateDetailsClientCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationClientCertificateDetailsClientCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: Optional[str] = None,
                 file_name: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")


@pulumi.output_type
class ConfigConfigurationClientCertificateDetailsPrivateKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileName":
            suggest = "file_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationClientCertificateDetailsPrivateKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationClientCertificateDetailsPrivateKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationClientCertificateDetailsPrivateKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: Optional[str] = None,
                 file_name: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")


@pulumi.output_type
class ConfigConfigurationDnsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isOverrideDns":
            suggest = "is_override_dns"
        elif key == "overrideDnsIp":
            suggest = "override_dns_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationDnsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationDnsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationDnsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_override_dns: Optional[bool] = None,
                 override_dns_ip: Optional[str] = None):
        if is_override_dns is not None:
            pulumi.set(__self__, "is_override_dns", is_override_dns)
        if override_dns_ip is not None:
            pulumi.set(__self__, "override_dns_ip", override_dns_ip)

    @property
    @pulumi.getter(name="isOverrideDns")
    def is_override_dns(self) -> Optional[bool]:
        return pulumi.get(self, "is_override_dns")

    @property
    @pulumi.getter(name="overrideDnsIp")
    def override_dns_ip(self) -> Optional[str]:
        return pulumi.get(self, "override_dns_ip")


@pulumi.output_type
class ConfigConfigurationNetworkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numberOfHops":
            suggest = "number_of_hops"
        elif key == "probeMode":
            suggest = "probe_mode"
        elif key == "probePerHop":
            suggest = "probe_per_hop"
        elif key == "transmissionRate":
            suggest = "transmission_rate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number_of_hops: Optional[int] = None,
                 probe_mode: Optional[str] = None,
                 probe_per_hop: Optional[int] = None,
                 protocol: Optional[str] = None,
                 transmission_rate: Optional[int] = None):
        if number_of_hops is not None:
            pulumi.set(__self__, "number_of_hops", number_of_hops)
        if probe_mode is not None:
            pulumi.set(__self__, "probe_mode", probe_mode)
        if probe_per_hop is not None:
            pulumi.set(__self__, "probe_per_hop", probe_per_hop)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if transmission_rate is not None:
            pulumi.set(__self__, "transmission_rate", transmission_rate)

    @property
    @pulumi.getter(name="numberOfHops")
    def number_of_hops(self) -> Optional[int]:
        return pulumi.get(self, "number_of_hops")

    @property
    @pulumi.getter(name="probeMode")
    def probe_mode(self) -> Optional[str]:
        return pulumi.get(self, "probe_mode")

    @property
    @pulumi.getter(name="probePerHop")
    def probe_per_hop(self) -> Optional[int]:
        return pulumi.get(self, "probe_per_hop")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="transmissionRate")
    def transmission_rate(self) -> Optional[int]:
        return pulumi.get(self, "transmission_rate")


@pulumi.output_type
class ConfigConfigurationReqAuthenticationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authHeaders":
            suggest = "auth_headers"
        elif key == "authRequestMethod":
            suggest = "auth_request_method"
        elif key == "authRequestPostBody":
            suggest = "auth_request_post_body"
        elif key == "authToken":
            suggest = "auth_token"
        elif key == "authUrl":
            suggest = "auth_url"
        elif key == "authUserName":
            suggest = "auth_user_name"
        elif key == "authUserPassword":
            suggest = "auth_user_password"
        elif key == "oauthScheme":
            suggest = "oauth_scheme"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationReqAuthenticationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationReqAuthenticationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationReqAuthenticationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_headers: Optional[Sequence['outputs.ConfigConfigurationReqAuthenticationDetailsAuthHeader']] = None,
                 auth_request_method: Optional[str] = None,
                 auth_request_post_body: Optional[str] = None,
                 auth_token: Optional[str] = None,
                 auth_url: Optional[str] = None,
                 auth_user_name: Optional[str] = None,
                 auth_user_password: Optional[str] = None,
                 oauth_scheme: Optional[str] = None):
        if auth_headers is not None:
            pulumi.set(__self__, "auth_headers", auth_headers)
        if auth_request_method is not None:
            pulumi.set(__self__, "auth_request_method", auth_request_method)
        if auth_request_post_body is not None:
            pulumi.set(__self__, "auth_request_post_body", auth_request_post_body)
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if auth_user_name is not None:
            pulumi.set(__self__, "auth_user_name", auth_user_name)
        if auth_user_password is not None:
            pulumi.set(__self__, "auth_user_password", auth_user_password)
        if oauth_scheme is not None:
            pulumi.set(__self__, "oauth_scheme", oauth_scheme)

    @property
    @pulumi.getter(name="authHeaders")
    def auth_headers(self) -> Optional[Sequence['outputs.ConfigConfigurationReqAuthenticationDetailsAuthHeader']]:
        return pulumi.get(self, "auth_headers")

    @property
    @pulumi.getter(name="authRequestMethod")
    def auth_request_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_request_method")

    @property
    @pulumi.getter(name="authRequestPostBody")
    def auth_request_post_body(self) -> Optional[str]:
        return pulumi.get(self, "auth_request_post_body")

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[str]:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_url")

    @property
    @pulumi.getter(name="authUserName")
    def auth_user_name(self) -> Optional[str]:
        return pulumi.get(self, "auth_user_name")

    @property
    @pulumi.getter(name="authUserPassword")
    def auth_user_password(self) -> Optional[str]:
        return pulumi.get(self, "auth_user_password")

    @property
    @pulumi.getter(name="oauthScheme")
    def oauth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "oauth_scheme")


@pulumi.output_type
class ConfigConfigurationReqAuthenticationDetailsAuthHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerName":
            suggest = "header_name"
        elif key == "headerValue":
            suggest = "header_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationReqAuthenticationDetailsAuthHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationReqAuthenticationDetailsAuthHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationReqAuthenticationDetailsAuthHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 header_value: Optional[str] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")


@pulumi.output_type
class ConfigConfigurationRequestHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerName":
            suggest = "header_name"
        elif key == "headerValue":
            suggest = "header_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationRequestHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationRequestHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationRequestHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 header_value: Optional[str] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")


@pulumi.output_type
class ConfigConfigurationRequestQueryParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paramName":
            suggest = "param_name"
        elif key == "paramValue":
            suggest = "param_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigConfigurationRequestQueryParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigConfigurationRequestQueryParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigConfigurationRequestQueryParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None):
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        return pulumi.get(self, "param_value")


@pulumi.output_type
class ConfigConfigurationVerifyText(dict):
    def __init__(__self__, *,
                 text: Optional[str] = None):
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")


@pulumi.output_type
class ConfigMaintenanceWindowSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeEnded":
            suggest = "time_ended"
        elif key == "timeStarted":
            suggest = "time_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigMaintenanceWindowSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigMaintenanceWindowSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigMaintenanceWindowSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None):
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class ConfigScriptParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paramName":
            suggest = "param_name"
        elif key == "paramValue":
            suggest = "param_value"
        elif key == "isOverwritten":
            suggest = "is_overwritten"
        elif key == "isSecret":
            suggest = "is_secret"
        elif key == "monitorScriptParameters":
            suggest = "monitor_script_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigScriptParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigScriptParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigScriptParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 param_name: str,
                 param_value: str,
                 is_overwritten: Optional[bool] = None,
                 is_secret: Optional[bool] = None,
                 monitor_script_parameters: Optional[Sequence['outputs.ConfigScriptParameterMonitorScriptParameter']] = None):
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "param_value", param_value)
        if is_overwritten is not None:
            pulumi.set(__self__, "is_overwritten", is_overwritten)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if monitor_script_parameters is not None:
            pulumi.set(__self__, "monitor_script_parameters", monitor_script_parameters)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> str:
        return pulumi.get(self, "param_value")

    @property
    @pulumi.getter(name="isOverwritten")
    def is_overwritten(self) -> Optional[bool]:
        return pulumi.get(self, "is_overwritten")

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[bool]:
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="monitorScriptParameters")
    def monitor_script_parameters(self) -> Optional[Sequence['outputs.ConfigScriptParameterMonitorScriptParameter']]:
        return pulumi.get(self, "monitor_script_parameters")


@pulumi.output_type
class ConfigScriptParameterMonitorScriptParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paramName":
            suggest = "param_name"
        elif key == "paramValue":
            suggest = "param_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigScriptParameterMonitorScriptParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigScriptParameterMonitorScriptParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigScriptParameterMonitorScriptParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None):
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        return pulumi.get(self, "param_value")


@pulumi.output_type
class ConfigVantagePoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigVantagePoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigVantagePoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigVantagePoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 display_name: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DedicatedVantagePointDvpStackDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dvpStackId":
            suggest = "dvp_stack_id"
        elif key == "dvpStackType":
            suggest = "dvp_stack_type"
        elif key == "dvpStreamId":
            suggest = "dvp_stream_id"
        elif key == "dvpVersion":
            suggest = "dvp_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DedicatedVantagePointDvpStackDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DedicatedVantagePointDvpStackDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DedicatedVantagePointDvpStackDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dvp_stack_id: str,
                 dvp_stack_type: str,
                 dvp_stream_id: str,
                 dvp_version: str):
        pulumi.set(__self__, "dvp_stack_id", dvp_stack_id)
        pulumi.set(__self__, "dvp_stack_type", dvp_stack_type)
        pulumi.set(__self__, "dvp_stream_id", dvp_stream_id)
        pulumi.set(__self__, "dvp_version", dvp_version)

    @property
    @pulumi.getter(name="dvpStackId")
    def dvp_stack_id(self) -> str:
        return pulumi.get(self, "dvp_stack_id")

    @property
    @pulumi.getter(name="dvpStackType")
    def dvp_stack_type(self) -> str:
        return pulumi.get(self, "dvp_stack_type")

    @property
    @pulumi.getter(name="dvpStreamId")
    def dvp_stream_id(self) -> str:
        return pulumi.get(self, "dvp_stream_id")

    @property
    @pulumi.getter(name="dvpVersion")
    def dvp_version(self) -> str:
        return pulumi.get(self, "dvp_version")


@pulumi.output_type
class DedicatedVantagePointMonitorStatusCountMap(dict):
    def __init__(__self__, *,
                 disabled: Optional[int] = None,
                 enabled: Optional[int] = None,
                 invalid: Optional[int] = None,
                 total: Optional[int] = None):
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if invalid is not None:
            pulumi.set(__self__, "invalid", invalid)
        if total is not None:
            pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[int]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[int]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def invalid(self) -> Optional[int]:
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        return pulumi.get(self, "total")


@pulumi.output_type
class ScriptMonitorStatusCountMap(dict):
    def __init__(__self__, *,
                 disabled: Optional[int] = None,
                 enabled: Optional[int] = None,
                 invalid: Optional[int] = None,
                 total: Optional[int] = None):
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if invalid is not None:
            pulumi.set(__self__, "invalid", invalid)
        if total is not None:
            pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[int]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[int]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def invalid(self) -> Optional[int]:
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        return pulumi.get(self, "total")


@pulumi.output_type
class ScriptParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "paramName":
            suggest = "param_name"
        elif key == "isOverwritten":
            suggest = "is_overwritten"
        elif key == "isSecret":
            suggest = "is_secret"
        elif key == "paramValue":
            suggest = "param_value"
        elif key == "scriptParameters":
            suggest = "script_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScriptParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScriptParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScriptParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 param_name: str,
                 is_overwritten: Optional[bool] = None,
                 is_secret: Optional[bool] = None,
                 param_value: Optional[str] = None,
                 script_parameters: Optional[Sequence['outputs.ScriptParameterScriptParameter']] = None):
        pulumi.set(__self__, "param_name", param_name)
        if is_overwritten is not None:
            pulumi.set(__self__, "is_overwritten", is_overwritten)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="isOverwritten")
    def is_overwritten(self) -> Optional[bool]:
        return pulumi.get(self, "is_overwritten")

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[bool]:
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        return pulumi.get(self, "param_value")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[Sequence['outputs.ScriptParameterScriptParameter']]:
        return pulumi.get(self, "script_parameters")


@pulumi.output_type
class ScriptParameterScriptParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSecret":
            suggest = "is_secret"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "paramValue":
            suggest = "param_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScriptParameterScriptParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScriptParameterScriptParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScriptParameterScriptParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_secret: Optional[bool] = None,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None):
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[bool]:
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetDedicatedVantagePointDvpStackDetailResult(dict):
    def __init__(__self__, *,
                 dvp_stack_id: Optional[str] = None,
                 dvp_stack_type: Optional[str] = None,
                 dvp_stream_id: Optional[str] = None,
                 dvp_version: Optional[str] = None):
        if dvp_stack_id is not None:
            pulumi.set(__self__, "dvp_stack_id", dvp_stack_id)
        if dvp_stack_type is not None:
            pulumi.set(__self__, "dvp_stack_type", dvp_stack_type)
        if dvp_stream_id is not None:
            pulumi.set(__self__, "dvp_stream_id", dvp_stream_id)
        if dvp_version is not None:
            pulumi.set(__self__, "dvp_version", dvp_version)

    @property
    @pulumi.getter(name="dvpStackId")
    def dvp_stack_id(self) -> Optional[str]:
        return pulumi.get(self, "dvp_stack_id")

    @property
    @pulumi.getter(name="dvpStackType")
    def dvp_stack_type(self) -> Optional[str]:
        return pulumi.get(self, "dvp_stack_type")

    @property
    @pulumi.getter(name="dvpStreamId")
    def dvp_stream_id(self) -> Optional[str]:
        return pulumi.get(self, "dvp_stream_id")

    @property
    @pulumi.getter(name="dvpVersion")
    def dvp_version(self) -> Optional[str]:
        return pulumi.get(self, "dvp_version")


@pulumi.output_type
class GetDedicatedVantagePointMonitorStatusCountMapResult(dict):
    def __init__(__self__, *,
                 disabled: Optional[int] = None,
                 enabled: Optional[int] = None,
                 invalid: Optional[int] = None,
                 total: Optional[int] = None):
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if invalid is not None:
            pulumi.set(__self__, "invalid", invalid)
        if total is not None:
            pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[int]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[int]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def invalid(self) -> Optional[int]:
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        return pulumi.get(self, "total")


@pulumi.output_type
class GetDedicatedVantagePointsDedicatedVantagePointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDedicatedVantagePointsDedicatedVantagePointCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDedicatedVantagePointsDedicatedVantagePointCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDedicatedVantagePointsDedicatedVantagePointCollectionItemResult(dict):
    def __init__(__self__, *,
                 apm_domain_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 dvp_stack_details: Optional[Sequence['outputs.GetDedicatedVantagePointsDedicatedVantagePointCollectionItemDvpStackDetailResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 monitor_status_count_maps: Optional[Sequence['outputs.GetDedicatedVantagePointsDedicatedVantagePointCollectionItemMonitorStatusCountMapResult']] = None,
                 name: Optional[str] = None,
                 region: Optional[str] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if apm_domain_id is not None:
            pulumi.set(__self__, "apm_domain_id", apm_domain_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dvp_stack_details is not None:
            pulumi.set(__self__, "dvp_stack_details", dvp_stack_details)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monitor_status_count_maps is not None:
            pulumi.set(__self__, "monitor_status_count_maps", monitor_status_count_maps)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="apmDomainId")
    def apm_domain_id(self) -> Optional[str]:
        return pulumi.get(self, "apm_domain_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dvpStackDetails")
    def dvp_stack_details(self) -> Optional[Sequence['outputs.GetDedicatedVantagePointsDedicatedVantagePointCollectionItemDvpStackDetailResult']]:
        return pulumi.get(self, "dvp_stack_details")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monitorStatusCountMaps")
    def monitor_status_count_maps(self) -> Optional[Sequence['outputs.GetDedicatedVantagePointsDedicatedVantagePointCollectionItemMonitorStatusCountMapResult']]:
        return pulumi.get(self, "monitor_status_count_maps")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDedicatedVantagePointsDedicatedVantagePointCollectionItemDvpStackDetailResult(dict):
    def __init__(__self__, *,
                 dvp_stack_id: Optional[str] = None,
                 dvp_stack_type: Optional[str] = None,
                 dvp_stream_id: Optional[str] = None,
                 dvp_version: Optional[str] = None):
        if dvp_stack_id is not None:
            pulumi.set(__self__, "dvp_stack_id", dvp_stack_id)
        if dvp_stack_type is not None:
            pulumi.set(__self__, "dvp_stack_type", dvp_stack_type)
        if dvp_stream_id is not None:
            pulumi.set(__self__, "dvp_stream_id", dvp_stream_id)
        if dvp_version is not None:
            pulumi.set(__self__, "dvp_version", dvp_version)

    @property
    @pulumi.getter(name="dvpStackId")
    def dvp_stack_id(self) -> Optional[str]:
        return pulumi.get(self, "dvp_stack_id")

    @property
    @pulumi.getter(name="dvpStackType")
    def dvp_stack_type(self) -> Optional[str]:
        return pulumi.get(self, "dvp_stack_type")

    @property
    @pulumi.getter(name="dvpStreamId")
    def dvp_stream_id(self) -> Optional[str]:
        return pulumi.get(self, "dvp_stream_id")

    @property
    @pulumi.getter(name="dvpVersion")
    def dvp_version(self) -> Optional[str]:
        return pulumi.get(self, "dvp_version")


@pulumi.output_type
class GetDedicatedVantagePointsDedicatedVantagePointCollectionItemMonitorStatusCountMapResult(dict):
    def __init__(__self__, *,
                 disabled: Optional[int] = None,
                 enabled: Optional[int] = None,
                 invalid: Optional[int] = None,
                 total: Optional[int] = None):
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if invalid is not None:
            pulumi.set(__self__, "invalid", invalid)
        if total is not None:
            pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[int]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[int]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def invalid(self) -> Optional[int]:
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        return pulumi.get(self, "total")


@pulumi.output_type
class GetDedicatedVantagePointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMonitorAvailabilityConfigurationResult(dict):
    def __init__(__self__, *,
                 max_allowed_failures_per_interval: Optional[int] = None,
                 min_allowed_runs_per_interval: Optional[int] = None):
        if max_allowed_failures_per_interval is not None:
            pulumi.set(__self__, "max_allowed_failures_per_interval", max_allowed_failures_per_interval)
        if min_allowed_runs_per_interval is not None:
            pulumi.set(__self__, "min_allowed_runs_per_interval", min_allowed_runs_per_interval)

    @property
    @pulumi.getter(name="maxAllowedFailuresPerInterval")
    def max_allowed_failures_per_interval(self) -> Optional[int]:
        return pulumi.get(self, "max_allowed_failures_per_interval")

    @property
    @pulumi.getter(name="minAllowedRunsPerInterval")
    def min_allowed_runs_per_interval(self) -> Optional[int]:
        return pulumi.get(self, "min_allowed_runs_per_interval")


@pulumi.output_type
class GetMonitorConfigurationResult(dict):
    def __init__(__self__, *,
                 client_certificate_details: Optional[Sequence['outputs.GetMonitorConfigurationClientCertificateDetailResult']] = None,
                 config_type: Optional[str] = None,
                 dns_configurations: Optional[Sequence['outputs.GetMonitorConfigurationDnsConfigurationResult']] = None,
                 is_certificate_validation_enabled: Optional[bool] = None,
                 is_default_snapshot_enabled: Optional[bool] = None,
                 is_failure_retried: Optional[bool] = None,
                 is_redirection_enabled: Optional[bool] = None,
                 network_configurations: Optional[Sequence['outputs.GetMonitorConfigurationNetworkConfigurationResult']] = None,
                 req_authentication_details: Optional[Sequence['outputs.GetMonitorConfigurationReqAuthenticationDetailResult']] = None,
                 req_authentication_scheme: Optional[str] = None,
                 request_headers: Optional[Sequence['outputs.GetMonitorConfigurationRequestHeaderResult']] = None,
                 request_method: Optional[str] = None,
                 request_post_body: Optional[str] = None,
                 request_query_params: Optional[Sequence['outputs.GetMonitorConfigurationRequestQueryParamResult']] = None,
                 verify_response_codes: Optional[Sequence[str]] = None,
                 verify_response_content: Optional[str] = None,
                 verify_texts: Optional[Sequence['outputs.GetMonitorConfigurationVerifyTextResult']] = None):
        if client_certificate_details is not None:
            pulumi.set(__self__, "client_certificate_details", client_certificate_details)
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if dns_configurations is not None:
            pulumi.set(__self__, "dns_configurations", dns_configurations)
        if is_certificate_validation_enabled is not None:
            pulumi.set(__self__, "is_certificate_validation_enabled", is_certificate_validation_enabled)
        if is_default_snapshot_enabled is not None:
            pulumi.set(__self__, "is_default_snapshot_enabled", is_default_snapshot_enabled)
        if is_failure_retried is not None:
            pulumi.set(__self__, "is_failure_retried", is_failure_retried)
        if is_redirection_enabled is not None:
            pulumi.set(__self__, "is_redirection_enabled", is_redirection_enabled)
        if network_configurations is not None:
            pulumi.set(__self__, "network_configurations", network_configurations)
        if req_authentication_details is not None:
            pulumi.set(__self__, "req_authentication_details", req_authentication_details)
        if req_authentication_scheme is not None:
            pulumi.set(__self__, "req_authentication_scheme", req_authentication_scheme)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if request_post_body is not None:
            pulumi.set(__self__, "request_post_body", request_post_body)
        if request_query_params is not None:
            pulumi.set(__self__, "request_query_params", request_query_params)
        if verify_response_codes is not None:
            pulumi.set(__self__, "verify_response_codes", verify_response_codes)
        if verify_response_content is not None:
            pulumi.set(__self__, "verify_response_content", verify_response_content)
        if verify_texts is not None:
            pulumi.set(__self__, "verify_texts", verify_texts)

    @property
    @pulumi.getter(name="clientCertificateDetails")
    def client_certificate_details(self) -> Optional[Sequence['outputs.GetMonitorConfigurationClientCertificateDetailResult']]:
        return pulumi.get(self, "client_certificate_details")

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[str]:
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="dnsConfigurations")
    def dns_configurations(self) -> Optional[Sequence['outputs.GetMonitorConfigurationDnsConfigurationResult']]:
        return pulumi.get(self, "dns_configurations")

    @property
    @pulumi.getter(name="isCertificateValidationEnabled")
    def is_certificate_validation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_certificate_validation_enabled")

    @property
    @pulumi.getter(name="isDefaultSnapshotEnabled")
    def is_default_snapshot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_snapshot_enabled")

    @property
    @pulumi.getter(name="isFailureRetried")
    def is_failure_retried(self) -> Optional[bool]:
        return pulumi.get(self, "is_failure_retried")

    @property
    @pulumi.getter(name="isRedirectionEnabled")
    def is_redirection_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_redirection_enabled")

    @property
    @pulumi.getter(name="networkConfigurations")
    def network_configurations(self) -> Optional[Sequence['outputs.GetMonitorConfigurationNetworkConfigurationResult']]:
        return pulumi.get(self, "network_configurations")

    @property
    @pulumi.getter(name="reqAuthenticationDetails")
    def req_authentication_details(self) -> Optional[Sequence['outputs.GetMonitorConfigurationReqAuthenticationDetailResult']]:
        return pulumi.get(self, "req_authentication_details")

    @property
    @pulumi.getter(name="reqAuthenticationScheme")
    def req_authentication_scheme(self) -> Optional[str]:
        return pulumi.get(self, "req_authentication_scheme")

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[Sequence['outputs.GetMonitorConfigurationRequestHeaderResult']]:
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[str]:
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestPostBody")
    def request_post_body(self) -> Optional[str]:
        return pulumi.get(self, "request_post_body")

    @property
    @pulumi.getter(name="requestQueryParams")
    def request_query_params(self) -> Optional[Sequence['outputs.GetMonitorConfigurationRequestQueryParamResult']]:
        return pulumi.get(self, "request_query_params")

    @property
    @pulumi.getter(name="verifyResponseCodes")
    def verify_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "verify_response_codes")

    @property
    @pulumi.getter(name="verifyResponseContent")
    def verify_response_content(self) -> Optional[str]:
        return pulumi.get(self, "verify_response_content")

    @property
    @pulumi.getter(name="verifyTexts")
    def verify_texts(self) -> Optional[Sequence['outputs.GetMonitorConfigurationVerifyTextResult']]:
        return pulumi.get(self, "verify_texts")


@pulumi.output_type
class GetMonitorConfigurationClientCertificateDetailResult(dict):
    def __init__(__self__, *,
                 client_certificates: Optional[Sequence['outputs.GetMonitorConfigurationClientCertificateDetailClientCertificateResult']] = None,
                 private_keys: Optional[Sequence['outputs.GetMonitorConfigurationClientCertificateDetailPrivateKeyResult']] = None):
        if client_certificates is not None:
            pulumi.set(__self__, "client_certificates", client_certificates)
        if private_keys is not None:
            pulumi.set(__self__, "private_keys", private_keys)

    @property
    @pulumi.getter(name="clientCertificates")
    def client_certificates(self) -> Optional[Sequence['outputs.GetMonitorConfigurationClientCertificateDetailClientCertificateResult']]:
        return pulumi.get(self, "client_certificates")

    @property
    @pulumi.getter(name="privateKeys")
    def private_keys(self) -> Optional[Sequence['outputs.GetMonitorConfigurationClientCertificateDetailPrivateKeyResult']]:
        return pulumi.get(self, "private_keys")


@pulumi.output_type
class GetMonitorConfigurationClientCertificateDetailClientCertificateResult(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 file_name: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")


@pulumi.output_type
class GetMonitorConfigurationClientCertificateDetailPrivateKeyResult(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 file_name: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")


@pulumi.output_type
class GetMonitorConfigurationDnsConfigurationResult(dict):
    def __init__(__self__, *,
                 is_override_dns: Optional[bool] = None,
                 override_dns_ip: Optional[str] = None):
        if is_override_dns is not None:
            pulumi.set(__self__, "is_override_dns", is_override_dns)
        if override_dns_ip is not None:
            pulumi.set(__self__, "override_dns_ip", override_dns_ip)

    @property
    @pulumi.getter(name="isOverrideDns")
    def is_override_dns(self) -> Optional[bool]:
        return pulumi.get(self, "is_override_dns")

    @property
    @pulumi.getter(name="overrideDnsIp")
    def override_dns_ip(self) -> Optional[str]:
        return pulumi.get(self, "override_dns_ip")


@pulumi.output_type
class GetMonitorConfigurationNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 number_of_hops: Optional[int] = None,
                 probe_mode: Optional[str] = None,
                 probe_per_hop: Optional[int] = None,
                 protocol: Optional[str] = None,
                 transmission_rate: Optional[int] = None):
        if number_of_hops is not None:
            pulumi.set(__self__, "number_of_hops", number_of_hops)
        if probe_mode is not None:
            pulumi.set(__self__, "probe_mode", probe_mode)
        if probe_per_hop is not None:
            pulumi.set(__self__, "probe_per_hop", probe_per_hop)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if transmission_rate is not None:
            pulumi.set(__self__, "transmission_rate", transmission_rate)

    @property
    @pulumi.getter(name="numberOfHops")
    def number_of_hops(self) -> Optional[int]:
        return pulumi.get(self, "number_of_hops")

    @property
    @pulumi.getter(name="probeMode")
    def probe_mode(self) -> Optional[str]:
        return pulumi.get(self, "probe_mode")

    @property
    @pulumi.getter(name="probePerHop")
    def probe_per_hop(self) -> Optional[int]:
        return pulumi.get(self, "probe_per_hop")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="transmissionRate")
    def transmission_rate(self) -> Optional[int]:
        return pulumi.get(self, "transmission_rate")


@pulumi.output_type
class GetMonitorConfigurationReqAuthenticationDetailResult(dict):
    def __init__(__self__, *,
                 auth_headers: Optional[Sequence['outputs.GetMonitorConfigurationReqAuthenticationDetailAuthHeaderResult']] = None,
                 auth_request_method: Optional[str] = None,
                 auth_request_post_body: Optional[str] = None,
                 auth_token: Optional[str] = None,
                 auth_url: Optional[str] = None,
                 auth_user_name: Optional[str] = None,
                 auth_user_password: Optional[str] = None,
                 oauth_scheme: Optional[str] = None):
        if auth_headers is not None:
            pulumi.set(__self__, "auth_headers", auth_headers)
        if auth_request_method is not None:
            pulumi.set(__self__, "auth_request_method", auth_request_method)
        if auth_request_post_body is not None:
            pulumi.set(__self__, "auth_request_post_body", auth_request_post_body)
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if auth_user_name is not None:
            pulumi.set(__self__, "auth_user_name", auth_user_name)
        if auth_user_password is not None:
            pulumi.set(__self__, "auth_user_password", auth_user_password)
        if oauth_scheme is not None:
            pulumi.set(__self__, "oauth_scheme", oauth_scheme)

    @property
    @pulumi.getter(name="authHeaders")
    def auth_headers(self) -> Optional[Sequence['outputs.GetMonitorConfigurationReqAuthenticationDetailAuthHeaderResult']]:
        return pulumi.get(self, "auth_headers")

    @property
    @pulumi.getter(name="authRequestMethod")
    def auth_request_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_request_method")

    @property
    @pulumi.getter(name="authRequestPostBody")
    def auth_request_post_body(self) -> Optional[str]:
        return pulumi.get(self, "auth_request_post_body")

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[str]:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_url")

    @property
    @pulumi.getter(name="authUserName")
    def auth_user_name(self) -> Optional[str]:
        return pulumi.get(self, "auth_user_name")

    @property
    @pulumi.getter(name="authUserPassword")
    def auth_user_password(self) -> Optional[str]:
        return pulumi.get(self, "auth_user_password")

    @property
    @pulumi.getter(name="oauthScheme")
    def oauth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "oauth_scheme")


@pulumi.output_type
class GetMonitorConfigurationReqAuthenticationDetailAuthHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 header_value: Optional[str] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")


@pulumi.output_type
class GetMonitorConfigurationRequestHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 header_value: Optional[str] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")


@pulumi.output_type
class GetMonitorConfigurationRequestQueryParamResult(dict):
    def __init__(__self__, *,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None):
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetMonitorConfigurationVerifyTextResult(dict):
    def __init__(__self__, *,
                 text: Optional[str] = None):
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")


@pulumi.output_type
class GetMonitorMaintenanceWindowScheduleResult(dict):
    def __init__(__self__, *,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None):
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetMonitorScriptParameterResult(dict):
    def __init__(__self__, *,
                 is_overwritten: Optional[bool] = None,
                 is_secret: Optional[bool] = None,
                 monitor_script_parameters: Optional[Sequence['outputs.GetMonitorScriptParameterMonitorScriptParameterResult']] = None,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None):
        if is_overwritten is not None:
            pulumi.set(__self__, "is_overwritten", is_overwritten)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if monitor_script_parameters is not None:
            pulumi.set(__self__, "monitor_script_parameters", monitor_script_parameters)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)

    @property
    @pulumi.getter(name="isOverwritten")
    def is_overwritten(self) -> Optional[bool]:
        return pulumi.get(self, "is_overwritten")

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[bool]:
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="monitorScriptParameters")
    def monitor_script_parameters(self) -> Optional[Sequence['outputs.GetMonitorScriptParameterMonitorScriptParameterResult']]:
        return pulumi.get(self, "monitor_script_parameters")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetMonitorScriptParameterMonitorScriptParameterResult(dict):
    def __init__(__self__, *,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None):
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetMonitorVantagePointResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 name: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMonitorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMonitorsMonitorCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemResult(dict):
    def __init__(__self__, *,
                 apm_domain_id: Optional[str] = None,
                 availability_configurations: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemAvailabilityConfigurationResult']] = None,
                 batch_interval_in_seconds: Optional[int] = None,
                 configurations: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_run_now: Optional[bool] = None,
                 is_run_once: Optional[bool] = None,
                 maintenance_window_schedules: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemMaintenanceWindowScheduleResult']] = None,
                 monitor_type: Optional[str] = None,
                 repeat_interval_in_seconds: Optional[int] = None,
                 scheduling_policy: Optional[str] = None,
                 script_id: Optional[str] = None,
                 script_name: Optional[str] = None,
                 script_parameters: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemScriptParameterResult']] = None,
                 status: Optional[str] = None,
                 target: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 timeout_in_seconds: Optional[int] = None,
                 vantage_point_count: Optional[int] = None,
                 vantage_points: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemVantagePointResult']] = None):
        if apm_domain_id is not None:
            pulumi.set(__self__, "apm_domain_id", apm_domain_id)
        if availability_configurations is not None:
            pulumi.set(__self__, "availability_configurations", availability_configurations)
        if batch_interval_in_seconds is not None:
            pulumi.set(__self__, "batch_interval_in_seconds", batch_interval_in_seconds)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_run_now is not None:
            pulumi.set(__self__, "is_run_now", is_run_now)
        if is_run_once is not None:
            pulumi.set(__self__, "is_run_once", is_run_once)
        if maintenance_window_schedules is not None:
            pulumi.set(__self__, "maintenance_window_schedules", maintenance_window_schedules)
        if monitor_type is not None:
            pulumi.set(__self__, "monitor_type", monitor_type)
        if repeat_interval_in_seconds is not None:
            pulumi.set(__self__, "repeat_interval_in_seconds", repeat_interval_in_seconds)
        if scheduling_policy is not None:
            pulumi.set(__self__, "scheduling_policy", scheduling_policy)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if script_name is not None:
            pulumi.set(__self__, "script_name", script_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if vantage_point_count is not None:
            pulumi.set(__self__, "vantage_point_count", vantage_point_count)
        if vantage_points is not None:
            pulumi.set(__self__, "vantage_points", vantage_points)

    @property
    @pulumi.getter(name="apmDomainId")
    def apm_domain_id(self) -> Optional[str]:
        return pulumi.get(self, "apm_domain_id")

    @property
    @pulumi.getter(name="availabilityConfigurations")
    def availability_configurations(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemAvailabilityConfigurationResult']]:
        return pulumi.get(self, "availability_configurations")

    @property
    @pulumi.getter(name="batchIntervalInSeconds")
    def batch_interval_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "batch_interval_in_seconds")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRunNow")
    def is_run_now(self) -> Optional[bool]:
        return pulumi.get(self, "is_run_now")

    @property
    @pulumi.getter(name="isRunOnce")
    def is_run_once(self) -> Optional[bool]:
        return pulumi.get(self, "is_run_once")

    @property
    @pulumi.getter(name="maintenanceWindowSchedules")
    def maintenance_window_schedules(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemMaintenanceWindowScheduleResult']]:
        return pulumi.get(self, "maintenance_window_schedules")

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> Optional[str]:
        return pulumi.get(self, "monitor_type")

    @property
    @pulumi.getter(name="repeatIntervalInSeconds")
    def repeat_interval_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "repeat_interval_in_seconds")

    @property
    @pulumi.getter(name="schedulingPolicy")
    def scheduling_policy(self) -> Optional[str]:
        return pulumi.get(self, "scheduling_policy")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[str]:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> Optional[str]:
        return pulumi.get(self, "script_name")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemScriptParameterResult']]:
        return pulumi.get(self, "script_parameters")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="vantagePointCount")
    def vantage_point_count(self) -> Optional[int]:
        return pulumi.get(self, "vantage_point_count")

    @property
    @pulumi.getter(name="vantagePoints")
    def vantage_points(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemVantagePointResult']]:
        return pulumi.get(self, "vantage_points")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemAvailabilityConfigurationResult(dict):
    def __init__(__self__, *,
                 max_allowed_failures_per_interval: Optional[int] = None,
                 min_allowed_runs_per_interval: Optional[int] = None):
        if max_allowed_failures_per_interval is not None:
            pulumi.set(__self__, "max_allowed_failures_per_interval", max_allowed_failures_per_interval)
        if min_allowed_runs_per_interval is not None:
            pulumi.set(__self__, "min_allowed_runs_per_interval", min_allowed_runs_per_interval)

    @property
    @pulumi.getter(name="maxAllowedFailuresPerInterval")
    def max_allowed_failures_per_interval(self) -> Optional[int]:
        return pulumi.get(self, "max_allowed_failures_per_interval")

    @property
    @pulumi.getter(name="minAllowedRunsPerInterval")
    def min_allowed_runs_per_interval(self) -> Optional[int]:
        return pulumi.get(self, "min_allowed_runs_per_interval")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationResult(dict):
    def __init__(__self__, *,
                 client_certificate_details: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailResult']] = None,
                 config_type: Optional[str] = None,
                 dns_configurations: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationDnsConfigurationResult']] = None,
                 is_certificate_validation_enabled: Optional[bool] = None,
                 is_default_snapshot_enabled: Optional[bool] = None,
                 is_failure_retried: Optional[bool] = None,
                 is_redirection_enabled: Optional[bool] = None,
                 network_configurations: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationNetworkConfigurationResult']] = None,
                 req_authentication_details: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailResult']] = None,
                 req_authentication_scheme: Optional[str] = None,
                 request_headers: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationRequestHeaderResult']] = None,
                 request_method: Optional[str] = None,
                 request_post_body: Optional[str] = None,
                 request_query_params: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationRequestQueryParamResult']] = None,
                 verify_response_codes: Optional[Sequence[str]] = None,
                 verify_response_content: Optional[str] = None,
                 verify_texts: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationVerifyTextResult']] = None):
        if client_certificate_details is not None:
            pulumi.set(__self__, "client_certificate_details", client_certificate_details)
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if dns_configurations is not None:
            pulumi.set(__self__, "dns_configurations", dns_configurations)
        if is_certificate_validation_enabled is not None:
            pulumi.set(__self__, "is_certificate_validation_enabled", is_certificate_validation_enabled)
        if is_default_snapshot_enabled is not None:
            pulumi.set(__self__, "is_default_snapshot_enabled", is_default_snapshot_enabled)
        if is_failure_retried is not None:
            pulumi.set(__self__, "is_failure_retried", is_failure_retried)
        if is_redirection_enabled is not None:
            pulumi.set(__self__, "is_redirection_enabled", is_redirection_enabled)
        if network_configurations is not None:
            pulumi.set(__self__, "network_configurations", network_configurations)
        if req_authentication_details is not None:
            pulumi.set(__self__, "req_authentication_details", req_authentication_details)
        if req_authentication_scheme is not None:
            pulumi.set(__self__, "req_authentication_scheme", req_authentication_scheme)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if request_post_body is not None:
            pulumi.set(__self__, "request_post_body", request_post_body)
        if request_query_params is not None:
            pulumi.set(__self__, "request_query_params", request_query_params)
        if verify_response_codes is not None:
            pulumi.set(__self__, "verify_response_codes", verify_response_codes)
        if verify_response_content is not None:
            pulumi.set(__self__, "verify_response_content", verify_response_content)
        if verify_texts is not None:
            pulumi.set(__self__, "verify_texts", verify_texts)

    @property
    @pulumi.getter(name="clientCertificateDetails")
    def client_certificate_details(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailResult']]:
        return pulumi.get(self, "client_certificate_details")

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[str]:
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="dnsConfigurations")
    def dns_configurations(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationDnsConfigurationResult']]:
        return pulumi.get(self, "dns_configurations")

    @property
    @pulumi.getter(name="isCertificateValidationEnabled")
    def is_certificate_validation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_certificate_validation_enabled")

    @property
    @pulumi.getter(name="isDefaultSnapshotEnabled")
    def is_default_snapshot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_snapshot_enabled")

    @property
    @pulumi.getter(name="isFailureRetried")
    def is_failure_retried(self) -> Optional[bool]:
        return pulumi.get(self, "is_failure_retried")

    @property
    @pulumi.getter(name="isRedirectionEnabled")
    def is_redirection_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_redirection_enabled")

    @property
    @pulumi.getter(name="networkConfigurations")
    def network_configurations(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationNetworkConfigurationResult']]:
        return pulumi.get(self, "network_configurations")

    @property
    @pulumi.getter(name="reqAuthenticationDetails")
    def req_authentication_details(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailResult']]:
        return pulumi.get(self, "req_authentication_details")

    @property
    @pulumi.getter(name="reqAuthenticationScheme")
    def req_authentication_scheme(self) -> Optional[str]:
        return pulumi.get(self, "req_authentication_scheme")

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationRequestHeaderResult']]:
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[str]:
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestPostBody")
    def request_post_body(self) -> Optional[str]:
        return pulumi.get(self, "request_post_body")

    @property
    @pulumi.getter(name="requestQueryParams")
    def request_query_params(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationRequestQueryParamResult']]:
        return pulumi.get(self, "request_query_params")

    @property
    @pulumi.getter(name="verifyResponseCodes")
    def verify_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "verify_response_codes")

    @property
    @pulumi.getter(name="verifyResponseContent")
    def verify_response_content(self) -> Optional[str]:
        return pulumi.get(self, "verify_response_content")

    @property
    @pulumi.getter(name="verifyTexts")
    def verify_texts(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationVerifyTextResult']]:
        return pulumi.get(self, "verify_texts")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailResult(dict):
    def __init__(__self__, *,
                 client_certificates: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailClientCertificateResult']] = None,
                 private_keys: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailPrivateKeyResult']] = None):
        if client_certificates is not None:
            pulumi.set(__self__, "client_certificates", client_certificates)
        if private_keys is not None:
            pulumi.set(__self__, "private_keys", private_keys)

    @property
    @pulumi.getter(name="clientCertificates")
    def client_certificates(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailClientCertificateResult']]:
        return pulumi.get(self, "client_certificates")

    @property
    @pulumi.getter(name="privateKeys")
    def private_keys(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailPrivateKeyResult']]:
        return pulumi.get(self, "private_keys")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailClientCertificateResult(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 file_name: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailPrivateKeyResult(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 file_name: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationDnsConfigurationResult(dict):
    def __init__(__self__, *,
                 is_override_dns: Optional[bool] = None,
                 override_dns_ip: Optional[str] = None):
        if is_override_dns is not None:
            pulumi.set(__self__, "is_override_dns", is_override_dns)
        if override_dns_ip is not None:
            pulumi.set(__self__, "override_dns_ip", override_dns_ip)

    @property
    @pulumi.getter(name="isOverrideDns")
    def is_override_dns(self) -> Optional[bool]:
        return pulumi.get(self, "is_override_dns")

    @property
    @pulumi.getter(name="overrideDnsIp")
    def override_dns_ip(self) -> Optional[str]:
        return pulumi.get(self, "override_dns_ip")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 number_of_hops: Optional[int] = None,
                 probe_mode: Optional[str] = None,
                 probe_per_hop: Optional[int] = None,
                 protocol: Optional[str] = None,
                 transmission_rate: Optional[int] = None):
        if number_of_hops is not None:
            pulumi.set(__self__, "number_of_hops", number_of_hops)
        if probe_mode is not None:
            pulumi.set(__self__, "probe_mode", probe_mode)
        if probe_per_hop is not None:
            pulumi.set(__self__, "probe_per_hop", probe_per_hop)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if transmission_rate is not None:
            pulumi.set(__self__, "transmission_rate", transmission_rate)

    @property
    @pulumi.getter(name="numberOfHops")
    def number_of_hops(self) -> Optional[int]:
        return pulumi.get(self, "number_of_hops")

    @property
    @pulumi.getter(name="probeMode")
    def probe_mode(self) -> Optional[str]:
        return pulumi.get(self, "probe_mode")

    @property
    @pulumi.getter(name="probePerHop")
    def probe_per_hop(self) -> Optional[int]:
        return pulumi.get(self, "probe_per_hop")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="transmissionRate")
    def transmission_rate(self) -> Optional[int]:
        return pulumi.get(self, "transmission_rate")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailResult(dict):
    def __init__(__self__, *,
                 auth_headers: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailAuthHeaderResult']] = None,
                 auth_request_method: Optional[str] = None,
                 auth_request_post_body: Optional[str] = None,
                 auth_token: Optional[str] = None,
                 auth_url: Optional[str] = None,
                 auth_user_name: Optional[str] = None,
                 auth_user_password: Optional[str] = None,
                 oauth_scheme: Optional[str] = None):
        if auth_headers is not None:
            pulumi.set(__self__, "auth_headers", auth_headers)
        if auth_request_method is not None:
            pulumi.set(__self__, "auth_request_method", auth_request_method)
        if auth_request_post_body is not None:
            pulumi.set(__self__, "auth_request_post_body", auth_request_post_body)
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if auth_user_name is not None:
            pulumi.set(__self__, "auth_user_name", auth_user_name)
        if auth_user_password is not None:
            pulumi.set(__self__, "auth_user_password", auth_user_password)
        if oauth_scheme is not None:
            pulumi.set(__self__, "oauth_scheme", oauth_scheme)

    @property
    @pulumi.getter(name="authHeaders")
    def auth_headers(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailAuthHeaderResult']]:
        return pulumi.get(self, "auth_headers")

    @property
    @pulumi.getter(name="authRequestMethod")
    def auth_request_method(self) -> Optional[str]:
        return pulumi.get(self, "auth_request_method")

    @property
    @pulumi.getter(name="authRequestPostBody")
    def auth_request_post_body(self) -> Optional[str]:
        return pulumi.get(self, "auth_request_post_body")

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[str]:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_url")

    @property
    @pulumi.getter(name="authUserName")
    def auth_user_name(self) -> Optional[str]:
        return pulumi.get(self, "auth_user_name")

    @property
    @pulumi.getter(name="authUserPassword")
    def auth_user_password(self) -> Optional[str]:
        return pulumi.get(self, "auth_user_password")

    @property
    @pulumi.getter(name="oauthScheme")
    def oauth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "oauth_scheme")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailAuthHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 header_value: Optional[str] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationRequestHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 header_value: Optional[str] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationRequestQueryParamResult(dict):
    def __init__(__self__, *,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None):
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemConfigurationVerifyTextResult(dict):
    def __init__(__self__, *,
                 text: Optional[str] = None):
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemMaintenanceWindowScheduleResult(dict):
    def __init__(__self__, *,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None):
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemScriptParameterResult(dict):
    def __init__(__self__, *,
                 is_overwritten: Optional[bool] = None,
                 is_secret: Optional[bool] = None,
                 monitor_script_parameters: Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemScriptParameterMonitorScriptParameterResult']] = None,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None):
        if is_overwritten is not None:
            pulumi.set(__self__, "is_overwritten", is_overwritten)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if monitor_script_parameters is not None:
            pulumi.set(__self__, "monitor_script_parameters", monitor_script_parameters)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)

    @property
    @pulumi.getter(name="isOverwritten")
    def is_overwritten(self) -> Optional[bool]:
        return pulumi.get(self, "is_overwritten")

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[bool]:
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="monitorScriptParameters")
    def monitor_script_parameters(self) -> Optional[Sequence['outputs.GetMonitorsMonitorCollectionItemScriptParameterMonitorScriptParameterResult']]:
        return pulumi.get(self, "monitor_script_parameters")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemScriptParameterMonitorScriptParameterResult(dict):
    def __init__(__self__, *,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None):
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetMonitorsMonitorCollectionItemVantagePointResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 name: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetResultResultDataSetResult(dict):
    def __init__(__self__, *,
                 byte_content: Optional[str] = None,
                 name: Optional[str] = None,
                 string_content: Optional[str] = None,
                 timestamp: Optional[str] = None):
        if byte_content is not None:
            pulumi.set(__self__, "byte_content", byte_content)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if string_content is not None:
            pulumi.set(__self__, "string_content", string_content)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter(name="byteContent")
    def byte_content(self) -> Optional[str]:
        return pulumi.get(self, "byte_content")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stringContent")
    def string_content(self) -> Optional[str]:
        return pulumi.get(self, "string_content")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetScriptMonitorStatusCountMapResult(dict):
    def __init__(__self__, *,
                 disabled: Optional[int] = None,
                 enabled: Optional[int] = None,
                 invalid: Optional[int] = None,
                 total: Optional[int] = None):
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if invalid is not None:
            pulumi.set(__self__, "invalid", invalid)
        if total is not None:
            pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[int]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[int]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def invalid(self) -> Optional[int]:
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        return pulumi.get(self, "total")


@pulumi.output_type
class GetScriptParameterResult(dict):
    def __init__(__self__, *,
                 is_overwritten: Optional[bool] = None,
                 is_secret: Optional[bool] = None,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None,
                 script_parameters: Optional[Sequence['outputs.GetScriptParameterScriptParameterResult']] = None):
        if is_overwritten is not None:
            pulumi.set(__self__, "is_overwritten", is_overwritten)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)

    @property
    @pulumi.getter(name="isOverwritten")
    def is_overwritten(self) -> Optional[bool]:
        return pulumi.get(self, "is_overwritten")

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[bool]:
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        return pulumi.get(self, "param_value")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[Sequence['outputs.GetScriptParameterScriptParameterResult']]:
        return pulumi.get(self, "script_parameters")


@pulumi.output_type
class GetScriptParameterScriptParameterResult(dict):
    def __init__(__self__, *,
                 is_secret: Optional[bool] = None,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None):
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[bool]:
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetScriptsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetScriptsScriptCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetScriptsScriptCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetScriptsScriptCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetScriptsScriptCollectionItemResult(dict):
    def __init__(__self__, *,
                 apm_domain_id: Optional[str] = None,
                 content: Optional[str] = None,
                 content_file_name: Optional[str] = None,
                 content_size_in_bytes: Optional[int] = None,
                 content_type: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 monitor_status_count_maps: Optional[Sequence['outputs.GetScriptsScriptCollectionItemMonitorStatusCountMapResult']] = None,
                 parameters: Optional[Sequence['outputs.GetScriptsScriptCollectionItemParameterResult']] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 time_uploaded: Optional[str] = None):
        if apm_domain_id is not None:
            pulumi.set(__self__, "apm_domain_id", apm_domain_id)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_file_name is not None:
            pulumi.set(__self__, "content_file_name", content_file_name)
        if content_size_in_bytes is not None:
            pulumi.set(__self__, "content_size_in_bytes", content_size_in_bytes)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if monitor_status_count_maps is not None:
            pulumi.set(__self__, "monitor_status_count_maps", monitor_status_count_maps)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if time_uploaded is not None:
            pulumi.set(__self__, "time_uploaded", time_uploaded)

    @property
    @pulumi.getter(name="apmDomainId")
    def apm_domain_id(self) -> Optional[str]:
        return pulumi.get(self, "apm_domain_id")

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentFileName")
    def content_file_name(self) -> Optional[str]:
        return pulumi.get(self, "content_file_name")

    @property
    @pulumi.getter(name="contentSizeInBytes")
    def content_size_in_bytes(self) -> Optional[int]:
        return pulumi.get(self, "content_size_in_bytes")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monitorStatusCountMaps")
    def monitor_status_count_maps(self) -> Optional[Sequence['outputs.GetScriptsScriptCollectionItemMonitorStatusCountMapResult']]:
        return pulumi.get(self, "monitor_status_count_maps")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.GetScriptsScriptCollectionItemParameterResult']]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="timeUploaded")
    def time_uploaded(self) -> Optional[str]:
        return pulumi.get(self, "time_uploaded")


@pulumi.output_type
class GetScriptsScriptCollectionItemMonitorStatusCountMapResult(dict):
    def __init__(__self__, *,
                 disabled: Optional[int] = None,
                 enabled: Optional[int] = None,
                 invalid: Optional[int] = None,
                 total: Optional[int] = None):
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if invalid is not None:
            pulumi.set(__self__, "invalid", invalid)
        if total is not None:
            pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[int]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[int]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def invalid(self) -> Optional[int]:
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        return pulumi.get(self, "total")


@pulumi.output_type
class GetScriptsScriptCollectionItemParameterResult(dict):
    def __init__(__self__, *,
                 is_overwritten: Optional[bool] = None,
                 is_secret: Optional[bool] = None,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None,
                 script_parameters: Optional[Sequence['outputs.GetScriptsScriptCollectionItemParameterScriptParameterResult']] = None):
        if is_overwritten is not None:
            pulumi.set(__self__, "is_overwritten", is_overwritten)
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)

    @property
    @pulumi.getter(name="isOverwritten")
    def is_overwritten(self) -> Optional[bool]:
        return pulumi.get(self, "is_overwritten")

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[bool]:
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        return pulumi.get(self, "param_value")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[Sequence['outputs.GetScriptsScriptCollectionItemParameterScriptParameterResult']]:
        return pulumi.get(self, "script_parameters")


@pulumi.output_type
class GetScriptsScriptCollectionItemParameterScriptParameterResult(dict):
    def __init__(__self__, *,
                 is_secret: Optional[bool] = None,
                 param_name: Optional[str] = None,
                 param_value: Optional[str] = None):
        if is_secret is not None:
            pulumi.set(__self__, "is_secret", is_secret)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)

    @property
    @pulumi.getter(name="isSecret")
    def is_secret(self) -> Optional[bool]:
        return pulumi.get(self, "is_secret")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[str]:
        return pulumi.get(self, "param_value")


@pulumi.output_type
class GetVantagePointItemResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 geos: Optional[Sequence['outputs.GetVantagePointItemGeoResult']] = None,
                 name: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if geos is not None:
            pulumi.set(__self__, "geos", geos)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def geos(self) -> Optional[Sequence['outputs.GetVantagePointItemGeoResult']]:
        return pulumi.get(self, "geos")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVantagePointItemGeoResult(dict):
    def __init__(__self__, *,
                 admin_div_code: Optional[str] = None,
                 city_name: Optional[str] = None,
                 country_code: Optional[str] = None,
                 country_name: Optional[str] = None,
                 latitude: Optional[float] = None,
                 longitude: Optional[float] = None):
        if admin_div_code is not None:
            pulumi.set(__self__, "admin_div_code", admin_div_code)
        if city_name is not None:
            pulumi.set(__self__, "city_name", city_name)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if country_name is not None:
            pulumi.set(__self__, "country_name", country_name)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)

    @property
    @pulumi.getter(name="adminDivCode")
    def admin_div_code(self) -> Optional[str]:
        return pulumi.get(self, "admin_div_code")

    @property
    @pulumi.getter(name="cityName")
    def city_name(self) -> Optional[str]:
        return pulumi.get(self, "city_name")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[str]:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="countryName")
    def country_name(self) -> Optional[str]:
        return pulumi.get(self, "country_name")

    @property
    @pulumi.getter
    def latitude(self) -> Optional[float]:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> Optional[float]:
        return pulumi.get(self, "longitude")


@pulumi.output_type
class GetVantagePointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVantagePointsPublicVantagePointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetVantagePointsPublicVantagePointCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetVantagePointsPublicVantagePointCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetVantagePointsPublicVantagePointCollectionItemResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 geos: Optional[Sequence['outputs.GetVantagePointsPublicVantagePointCollectionItemGeoResult']] = None,
                 name: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if geos is not None:
            pulumi.set(__self__, "geos", geos)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def geos(self) -> Optional[Sequence['outputs.GetVantagePointsPublicVantagePointCollectionItemGeoResult']]:
        return pulumi.get(self, "geos")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVantagePointsPublicVantagePointCollectionItemGeoResult(dict):
    def __init__(__self__, *,
                 admin_div_code: Optional[str] = None,
                 city_name: Optional[str] = None,
                 country_code: Optional[str] = None,
                 country_name: Optional[str] = None,
                 latitude: Optional[float] = None,
                 longitude: Optional[float] = None):
        if admin_div_code is not None:
            pulumi.set(__self__, "admin_div_code", admin_div_code)
        if city_name is not None:
            pulumi.set(__self__, "city_name", city_name)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if country_name is not None:
            pulumi.set(__self__, "country_name", country_name)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)

    @property
    @pulumi.getter(name="adminDivCode")
    def admin_div_code(self) -> Optional[str]:
        return pulumi.get(self, "admin_div_code")

    @property
    @pulumi.getter(name="cityName")
    def city_name(self) -> Optional[str]:
        return pulumi.get(self, "city_name")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[str]:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="countryName")
    def country_name(self) -> Optional[str]:
        return pulumi.get(self, "country_name")

    @property
    @pulumi.getter
    def latitude(self) -> Optional[float]:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> Optional[float]:
        return pulumi.get(self, "longitude")


