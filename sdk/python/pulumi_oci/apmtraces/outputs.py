# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetQueryQuickPicksFilterResult',
    'GetQueryQuickPicksQuickPickResult',
    'GetTraceAggregatedSnapshotDataDetailResult',
    'GetTraceServiceSummaryResult',
    'GetTraceSnapshotDataTraceSnapshotDetailResult',
    'GetTraceSpanResult',
    'GetTraceSpanLogResult',
    'GetTraceSpanLogSpanLogResult',
    'GetTraceSpanSummaryResult',
    'GetTraceSpanSummaryServiceSummaryResult',
    'GetTraceSpanTagResult',
]

@pulumi.output_type
class GetQueryQuickPicksFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetQueryQuickPicksQuickPickResult(dict):
    def __init__(__self__, *,
                 quick_pick_name: builtins.str,
                 quick_pick_query: builtins.str):
        """
        :param builtins.str quick_pick_name: Quick Pick name for the query.
        :param builtins.str quick_pick_query: Query for the Quick Pick.
        """
        pulumi.set(__self__, "quick_pick_name", quick_pick_name)
        pulumi.set(__self__, "quick_pick_query", quick_pick_query)

    @property
    @pulumi.getter(name="quickPickName")
    def quick_pick_name(self) -> builtins.str:
        """
        Quick Pick name for the query.
        """
        return pulumi.get(self, "quick_pick_name")

    @property
    @pulumi.getter(name="quickPickQuery")
    def quick_pick_query(self) -> builtins.str:
        """
        Query for the Quick Pick.
        """
        return pulumi.get(self, "quick_pick_query")


@pulumi.output_type
class GetTraceAggregatedSnapshotDataDetailResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: Name of the property.
        :param builtins.str value: Value of the property.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        Name of the property.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of the property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTraceServiceSummaryResult(dict):
    def __init__(__self__, *,
                 error_spans: builtins.str,
                 span_service_name: builtins.str,
                 total_spans: builtins.str):
        """
        :param builtins.str error_spans: Number of spans with errors for serviceName in the trace.
        :param builtins.str span_service_name: Name associated with the service.
        :param builtins.str total_spans: Number of spans for serviceName in the trace.
        """
        pulumi.set(__self__, "error_spans", error_spans)
        pulumi.set(__self__, "span_service_name", span_service_name)
        pulumi.set(__self__, "total_spans", total_spans)

    @property
    @pulumi.getter(name="errorSpans")
    def error_spans(self) -> builtins.str:
        """
        Number of spans with errors for serviceName in the trace.
        """
        return pulumi.get(self, "error_spans")

    @property
    @pulumi.getter(name="spanServiceName")
    def span_service_name(self) -> builtins.str:
        """
        Name associated with the service.
        """
        return pulumi.get(self, "span_service_name")

    @property
    @pulumi.getter(name="totalSpans")
    def total_spans(self) -> builtins.str:
        """
        Number of spans for serviceName in the trace.
        """
        return pulumi.get(self, "total_spans")


@pulumi.output_type
class GetTraceSnapshotDataTraceSnapshotDetailResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: Name of the property.
        :param builtins.str value: Value of the property.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        Name of the property.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of the property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTraceSpanResult(dict):
    def __init__(__self__, *,
                 duration_in_ms: builtins.str,
                 is_error: builtins.bool,
                 key: builtins.str,
                 kind: builtins.str,
                 logs: Sequence['outputs.GetTraceSpanLogResult'],
                 operation_name: builtins.str,
                 parent_span_key: builtins.str,
                 service_name: builtins.str,
                 source_name: builtins.str,
                 tags: Sequence['outputs.GetTraceSpanTagResult'],
                 time_ended: builtins.str,
                 time_started: builtins.str,
                 trace_key: builtins.str):
        """
        :param builtins.str duration_in_ms: Total span duration in milliseconds.
        :param builtins.bool is_error: Indicates if the span has an error.
        :param builtins.str key: Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
        :param builtins.str kind: Kind associated with the span.
        :param Sequence['GetTraceSpanLogArgs'] logs: List of logs associated with the span.
        :param builtins.str operation_name: Span name associated with the trace.  This is usually the method or URI of the request.
        :param builtins.str parent_span_key: Unique parent identifier for the span if one exists. For root spans this will be null.
        :param builtins.str service_name: Service name associated with the span.
        :param builtins.str source_name: Source of span (spans, syn_spans).
        :param Sequence['GetTraceSpanTagArgs'] tags: List of tags associated with the span.
        :param builtins.str time_ended: Span end time.  Timestamp when the span was completed.
        :param builtins.str time_started: Span start time.  Timestamp when the span was started.
        :param builtins.str trace_key: Unique Application Performance Monitoring trace identifier (traceId).
        """
        pulumi.set(__self__, "duration_in_ms", duration_in_ms)
        pulumi.set(__self__, "is_error", is_error)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "logs", logs)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "parent_span_key", parent_span_key)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "source_name", source_name)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "time_ended", time_ended)
        pulumi.set(__self__, "time_started", time_started)
        pulumi.set(__self__, "trace_key", trace_key)

    @property
    @pulumi.getter(name="durationInMs")
    def duration_in_ms(self) -> builtins.str:
        """
        Total span duration in milliseconds.
        """
        return pulumi.get(self, "duration_in_ms")

    @property
    @pulumi.getter(name="isError")
    def is_error(self) -> builtins.bool:
        """
        Indicates if the span has an error.
        """
        return pulumi.get(self, "is_error")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Kind associated with the span.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def logs(self) -> Sequence['outputs.GetTraceSpanLogResult']:
        """
        List of logs associated with the span.
        """
        return pulumi.get(self, "logs")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> builtins.str:
        """
        Span name associated with the trace.  This is usually the method or URI of the request.
        """
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="parentSpanKey")
    def parent_span_key(self) -> builtins.str:
        """
        Unique parent identifier for the span if one exists. For root spans this will be null.
        """
        return pulumi.get(self, "parent_span_key")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        """
        Service name associated with the span.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> builtins.str:
        """
        Source of span (spans, syn_spans).
        """
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetTraceSpanTagResult']:
        """
        List of tags associated with the span.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> builtins.str:
        """
        Span end time.  Timestamp when the span was completed.
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        Span start time.  Timestamp when the span was started.
        """
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="traceKey")
    def trace_key(self) -> builtins.str:
        """
        Unique Application Performance Monitoring trace identifier (traceId).
        """
        return pulumi.get(self, "trace_key")


@pulumi.output_type
class GetTraceSpanLogResult(dict):
    def __init__(__self__, *,
                 event_name: builtins.str,
                 span_logs: Sequence['outputs.GetTraceSpanLogSpanLogResult'],
                 time_created: builtins.str):
        """
        :param builtins.str event_name: Name of the event for which the log is created.
        :param Sequence['GetTraceSpanLogSpanLogArgs'] span_logs: List of logs associated with the span at the given timestamp.
        :param builtins.str time_created: Timestamp at which the log is created.
        """
        pulumi.set(__self__, "event_name", event_name)
        pulumi.set(__self__, "span_logs", span_logs)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="eventName")
    def event_name(self) -> builtins.str:
        """
        Name of the event for which the log is created.
        """
        return pulumi.get(self, "event_name")

    @property
    @pulumi.getter(name="spanLogs")
    def span_logs(self) -> Sequence['outputs.GetTraceSpanLogSpanLogResult']:
        """
        List of logs associated with the span at the given timestamp.
        """
        return pulumi.get(self, "span_logs")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        Timestamp at which the log is created.
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetTraceSpanLogSpanLogResult(dict):
    def __init__(__self__, *,
                 log_key: builtins.str,
                 log_value: builtins.str):
        """
        :param builtins.str log_key: Key that specifies the log name.
        :param builtins.str log_value: Value associated with the log key.
        """
        pulumi.set(__self__, "log_key", log_key)
        pulumi.set(__self__, "log_value", log_value)

    @property
    @pulumi.getter(name="logKey")
    def log_key(self) -> builtins.str:
        """
        Key that specifies the log name.
        """
        return pulumi.get(self, "log_key")

    @property
    @pulumi.getter(name="logValue")
    def log_value(self) -> builtins.str:
        """
        Value associated with the log key.
        """
        return pulumi.get(self, "log_value")


@pulumi.output_type
class GetTraceSpanSummaryResult(dict):
    def __init__(__self__, *,
                 error_span_count: builtins.int,
                 is_fault: builtins.bool,
                 key: builtins.str,
                 root_span_duration_in_ms: builtins.int,
                 root_span_operation_name: builtins.str,
                 root_span_service_name: builtins.str,
                 service_summaries: Sequence['outputs.GetTraceSpanSummaryServiceSummaryResult'],
                 span_count: builtins.int,
                 time_earliest_span_started: builtins.str,
                 time_latest_span_ended: builtins.str,
                 time_root_span_ended: builtins.str,
                 time_root_span_started: builtins.str,
                 trace_duration_in_ms: builtins.int,
                 trace_error_code: builtins.str,
                 trace_error_type: builtins.str,
                 trace_status: builtins.str):
        """
        :param builtins.int error_span_count: The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
        :param builtins.bool is_fault: Boolean flag that indicates whether the trace has an error.
        :param builtins.str key: Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
        :param builtins.int root_span_duration_in_ms: Time taken for the root span operation to complete in milliseconds.
        :param builtins.str root_span_operation_name: Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
        :param builtins.str root_span_service_name: Service associated with the trace.
        :param Sequence['GetTraceSpanSummaryServiceSummaryArgs'] service_summaries: A summary of the spans by service.
        :param builtins.int span_count: The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
        :param builtins.str time_earliest_span_started: Start time of the earliest span in the span collection.
        :param builtins.str time_latest_span_ended: End time of the span that most recently ended in the span collection.
        :param builtins.str time_root_span_ended: End time of the root span for the span collection.
        :param builtins.str time_root_span_started: Start time of the root span for the span collection.
        :param builtins.int trace_duration_in_ms: Time between the start of the earliest span and the end of the most recent span in milliseconds.
        :param builtins.str trace_error_code: Error code of the trace.
        :param builtins.str trace_error_type: Error type of the trace.
        :param builtins.str trace_status: The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
        """
        pulumi.set(__self__, "error_span_count", error_span_count)
        pulumi.set(__self__, "is_fault", is_fault)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "root_span_duration_in_ms", root_span_duration_in_ms)
        pulumi.set(__self__, "root_span_operation_name", root_span_operation_name)
        pulumi.set(__self__, "root_span_service_name", root_span_service_name)
        pulumi.set(__self__, "service_summaries", service_summaries)
        pulumi.set(__self__, "span_count", span_count)
        pulumi.set(__self__, "time_earliest_span_started", time_earliest_span_started)
        pulumi.set(__self__, "time_latest_span_ended", time_latest_span_ended)
        pulumi.set(__self__, "time_root_span_ended", time_root_span_ended)
        pulumi.set(__self__, "time_root_span_started", time_root_span_started)
        pulumi.set(__self__, "trace_duration_in_ms", trace_duration_in_ms)
        pulumi.set(__self__, "trace_error_code", trace_error_code)
        pulumi.set(__self__, "trace_error_type", trace_error_type)
        pulumi.set(__self__, "trace_status", trace_status)

    @property
    @pulumi.getter(name="errorSpanCount")
    def error_span_count(self) -> builtins.int:
        """
        The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
        """
        return pulumi.get(self, "error_span_count")

    @property
    @pulumi.getter(name="isFault")
    def is_fault(self) -> builtins.bool:
        """
        Boolean flag that indicates whether the trace has an error.
        """
        return pulumi.get(self, "is_fault")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="rootSpanDurationInMs")
    def root_span_duration_in_ms(self) -> builtins.int:
        """
        Time taken for the root span operation to complete in milliseconds.
        """
        return pulumi.get(self, "root_span_duration_in_ms")

    @property
    @pulumi.getter(name="rootSpanOperationName")
    def root_span_operation_name(self) -> builtins.str:
        """
        Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
        """
        return pulumi.get(self, "root_span_operation_name")

    @property
    @pulumi.getter(name="rootSpanServiceName")
    def root_span_service_name(self) -> builtins.str:
        """
        Service associated with the trace.
        """
        return pulumi.get(self, "root_span_service_name")

    @property
    @pulumi.getter(name="serviceSummaries")
    def service_summaries(self) -> Sequence['outputs.GetTraceSpanSummaryServiceSummaryResult']:
        """
        A summary of the spans by service.
        """
        return pulumi.get(self, "service_summaries")

    @property
    @pulumi.getter(name="spanCount")
    def span_count(self) -> builtins.int:
        """
        The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
        """
        return pulumi.get(self, "span_count")

    @property
    @pulumi.getter(name="timeEarliestSpanStarted")
    def time_earliest_span_started(self) -> builtins.str:
        """
        Start time of the earliest span in the span collection.
        """
        return pulumi.get(self, "time_earliest_span_started")

    @property
    @pulumi.getter(name="timeLatestSpanEnded")
    def time_latest_span_ended(self) -> builtins.str:
        """
        End time of the span that most recently ended in the span collection.
        """
        return pulumi.get(self, "time_latest_span_ended")

    @property
    @pulumi.getter(name="timeRootSpanEnded")
    def time_root_span_ended(self) -> builtins.str:
        """
        End time of the root span for the span collection.
        """
        return pulumi.get(self, "time_root_span_ended")

    @property
    @pulumi.getter(name="timeRootSpanStarted")
    def time_root_span_started(self) -> builtins.str:
        """
        Start time of the root span for the span collection.
        """
        return pulumi.get(self, "time_root_span_started")

    @property
    @pulumi.getter(name="traceDurationInMs")
    def trace_duration_in_ms(self) -> builtins.int:
        """
        Time between the start of the earliest span and the end of the most recent span in milliseconds.
        """
        return pulumi.get(self, "trace_duration_in_ms")

    @property
    @pulumi.getter(name="traceErrorCode")
    def trace_error_code(self) -> builtins.str:
        """
        Error code of the trace.
        """
        return pulumi.get(self, "trace_error_code")

    @property
    @pulumi.getter(name="traceErrorType")
    def trace_error_type(self) -> builtins.str:
        """
        Error type of the trace.
        """
        return pulumi.get(self, "trace_error_type")

    @property
    @pulumi.getter(name="traceStatus")
    def trace_status(self) -> builtins.str:
        """
        The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
        """
        return pulumi.get(self, "trace_status")


@pulumi.output_type
class GetTraceSpanSummaryServiceSummaryResult(dict):
    def __init__(__self__, *,
                 error_spans: builtins.str,
                 span_service_name: builtins.str,
                 total_spans: builtins.str):
        """
        :param builtins.str error_spans: Number of spans with errors for serviceName in the trace.
        :param builtins.str span_service_name: Name associated with the service.
        :param builtins.str total_spans: Number of spans for serviceName in the trace.
        """
        pulumi.set(__self__, "error_spans", error_spans)
        pulumi.set(__self__, "span_service_name", span_service_name)
        pulumi.set(__self__, "total_spans", total_spans)

    @property
    @pulumi.getter(name="errorSpans")
    def error_spans(self) -> builtins.str:
        """
        Number of spans with errors for serviceName in the trace.
        """
        return pulumi.get(self, "error_spans")

    @property
    @pulumi.getter(name="spanServiceName")
    def span_service_name(self) -> builtins.str:
        """
        Name associated with the service.
        """
        return pulumi.get(self, "span_service_name")

    @property
    @pulumi.getter(name="totalSpans")
    def total_spans(self) -> builtins.str:
        """
        Number of spans for serviceName in the trace.
        """
        return pulumi.get(self, "total_spans")


@pulumi.output_type
class GetTraceSpanTagResult(dict):
    def __init__(__self__, *,
                 tag_name: builtins.str,
                 tag_value: builtins.str):
        """
        :param builtins.str tag_name: Key that specifies the tag name.
        :param builtins.str tag_value: Value associated with the tag key.
        """
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> builtins.str:
        """
        Key that specifies the tag name.
        """
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> builtins.str:
        """
        Value associated with the tag key.
        """
        return pulumi.get(self, "tag_value")


