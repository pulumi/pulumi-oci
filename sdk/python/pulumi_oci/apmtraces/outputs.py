# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetQueryQuickPicksFilterResult',
    'GetQueryQuickPicksQuickPickResult',
    'GetTraceAggregatedSnapshotDataDetailResult',
    'GetTraceServiceSummaryResult',
    'GetTraceSnapshotDataTraceSnapshotDetailResult',
    'GetTraceSpanResult',
    'GetTraceSpanLogResult',
    'GetTraceSpanLogSpanLogResult',
    'GetTraceSpanSummaryResult',
    'GetTraceSpanSummaryServiceSummaryResult',
    'GetTraceSpanTagResult',
]

@pulumi.output_type
class GetQueryQuickPicksFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetQueryQuickPicksQuickPickResult(dict):
    def __init__(__self__, *,
                 quick_pick_name: Optional[str] = None,
                 quick_pick_query: Optional[str] = None):
        if quick_pick_name is not None:
            pulumi.set(__self__, "quick_pick_name", quick_pick_name)
        if quick_pick_query is not None:
            pulumi.set(__self__, "quick_pick_query", quick_pick_query)

    @property
    @pulumi.getter(name="quickPickName")
    def quick_pick_name(self) -> Optional[str]:
        return pulumi.get(self, "quick_pick_name")

    @property
    @pulumi.getter(name="quickPickQuery")
    def quick_pick_query(self) -> Optional[str]:
        return pulumi.get(self, "quick_pick_query")


@pulumi.output_type
class GetTraceAggregatedSnapshotDataDetailResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTraceServiceSummaryResult(dict):
    def __init__(__self__, *,
                 error_spans: Optional[str] = None,
                 span_service_name: Optional[str] = None,
                 total_spans: Optional[str] = None):
        if error_spans is not None:
            pulumi.set(__self__, "error_spans", error_spans)
        if span_service_name is not None:
            pulumi.set(__self__, "span_service_name", span_service_name)
        if total_spans is not None:
            pulumi.set(__self__, "total_spans", total_spans)

    @property
    @pulumi.getter(name="errorSpans")
    def error_spans(self) -> Optional[str]:
        return pulumi.get(self, "error_spans")

    @property
    @pulumi.getter(name="spanServiceName")
    def span_service_name(self) -> Optional[str]:
        return pulumi.get(self, "span_service_name")

    @property
    @pulumi.getter(name="totalSpans")
    def total_spans(self) -> Optional[str]:
        return pulumi.get(self, "total_spans")


@pulumi.output_type
class GetTraceSnapshotDataTraceSnapshotDetailResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTraceSpanResult(dict):
    def __init__(__self__, *,
                 duration_in_ms: Optional[str] = None,
                 is_error: Optional[bool] = None,
                 key: Optional[str] = None,
                 kind: Optional[str] = None,
                 logs: Optional[Sequence['outputs.GetTraceSpanLogResult']] = None,
                 operation_name: Optional[str] = None,
                 parent_span_key: Optional[str] = None,
                 service_name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GetTraceSpanTagResult']] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None,
                 trace_key: Optional[str] = None):
        if duration_in_ms is not None:
            pulumi.set(__self__, "duration_in_ms", duration_in_ms)
        if is_error is not None:
            pulumi.set(__self__, "is_error", is_error)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if parent_span_key is not None:
            pulumi.set(__self__, "parent_span_key", parent_span_key)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if trace_key is not None:
            pulumi.set(__self__, "trace_key", trace_key)

    @property
    @pulumi.getter(name="durationInMs")
    def duration_in_ms(self) -> Optional[str]:
        return pulumi.get(self, "duration_in_ms")

    @property
    @pulumi.getter(name="isError")
    def is_error(self) -> Optional[bool]:
        return pulumi.get(self, "is_error")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def logs(self) -> Optional[Sequence['outputs.GetTraceSpanLogResult']]:
        return pulumi.get(self, "logs")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="parentSpanKey")
    def parent_span_key(self) -> Optional[str]:
        return pulumi.get(self, "parent_span_key")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetTraceSpanTagResult']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="traceKey")
    def trace_key(self) -> Optional[str]:
        return pulumi.get(self, "trace_key")


@pulumi.output_type
class GetTraceSpanLogResult(dict):
    def __init__(__self__, *,
                 span_logs: Optional[Sequence['outputs.GetTraceSpanLogSpanLogResult']] = None,
                 time_created: Optional[str] = None):
        if span_logs is not None:
            pulumi.set(__self__, "span_logs", span_logs)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="spanLogs")
    def span_logs(self) -> Optional[Sequence['outputs.GetTraceSpanLogSpanLogResult']]:
        return pulumi.get(self, "span_logs")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetTraceSpanLogSpanLogResult(dict):
    def __init__(__self__, *,
                 log_key: Optional[str] = None,
                 log_value: Optional[str] = None):
        if log_key is not None:
            pulumi.set(__self__, "log_key", log_key)
        if log_value is not None:
            pulumi.set(__self__, "log_value", log_value)

    @property
    @pulumi.getter(name="logKey")
    def log_key(self) -> Optional[str]:
        return pulumi.get(self, "log_key")

    @property
    @pulumi.getter(name="logValue")
    def log_value(self) -> Optional[str]:
        return pulumi.get(self, "log_value")


@pulumi.output_type
class GetTraceSpanSummaryResult(dict):
    def __init__(__self__, *,
                 error_span_count: Optional[int] = None,
                 is_fault: Optional[bool] = None,
                 key: Optional[str] = None,
                 root_span_duration_in_ms: Optional[int] = None,
                 root_span_operation_name: Optional[str] = None,
                 root_span_service_name: Optional[str] = None,
                 service_summaries: Optional[Sequence['outputs.GetTraceSpanSummaryServiceSummaryResult']] = None,
                 span_count: Optional[int] = None,
                 time_earliest_span_started: Optional[str] = None,
                 time_latest_span_ended: Optional[str] = None,
                 time_root_span_ended: Optional[str] = None,
                 time_root_span_started: Optional[str] = None,
                 trace_duration_in_ms: Optional[int] = None,
                 trace_error_code: Optional[str] = None,
                 trace_error_type: Optional[str] = None,
                 trace_status: Optional[str] = None):
        if error_span_count is not None:
            pulumi.set(__self__, "error_span_count", error_span_count)
        if is_fault is not None:
            pulumi.set(__self__, "is_fault", is_fault)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if root_span_duration_in_ms is not None:
            pulumi.set(__self__, "root_span_duration_in_ms", root_span_duration_in_ms)
        if root_span_operation_name is not None:
            pulumi.set(__self__, "root_span_operation_name", root_span_operation_name)
        if root_span_service_name is not None:
            pulumi.set(__self__, "root_span_service_name", root_span_service_name)
        if service_summaries is not None:
            pulumi.set(__self__, "service_summaries", service_summaries)
        if span_count is not None:
            pulumi.set(__self__, "span_count", span_count)
        if time_earliest_span_started is not None:
            pulumi.set(__self__, "time_earliest_span_started", time_earliest_span_started)
        if time_latest_span_ended is not None:
            pulumi.set(__self__, "time_latest_span_ended", time_latest_span_ended)
        if time_root_span_ended is not None:
            pulumi.set(__self__, "time_root_span_ended", time_root_span_ended)
        if time_root_span_started is not None:
            pulumi.set(__self__, "time_root_span_started", time_root_span_started)
        if trace_duration_in_ms is not None:
            pulumi.set(__self__, "trace_duration_in_ms", trace_duration_in_ms)
        if trace_error_code is not None:
            pulumi.set(__self__, "trace_error_code", trace_error_code)
        if trace_error_type is not None:
            pulumi.set(__self__, "trace_error_type", trace_error_type)
        if trace_status is not None:
            pulumi.set(__self__, "trace_status", trace_status)

    @property
    @pulumi.getter(name="errorSpanCount")
    def error_span_count(self) -> Optional[int]:
        return pulumi.get(self, "error_span_count")

    @property
    @pulumi.getter(name="isFault")
    def is_fault(self) -> Optional[bool]:
        return pulumi.get(self, "is_fault")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="rootSpanDurationInMs")
    def root_span_duration_in_ms(self) -> Optional[int]:
        return pulumi.get(self, "root_span_duration_in_ms")

    @property
    @pulumi.getter(name="rootSpanOperationName")
    def root_span_operation_name(self) -> Optional[str]:
        return pulumi.get(self, "root_span_operation_name")

    @property
    @pulumi.getter(name="rootSpanServiceName")
    def root_span_service_name(self) -> Optional[str]:
        return pulumi.get(self, "root_span_service_name")

    @property
    @pulumi.getter(name="serviceSummaries")
    def service_summaries(self) -> Optional[Sequence['outputs.GetTraceSpanSummaryServiceSummaryResult']]:
        return pulumi.get(self, "service_summaries")

    @property
    @pulumi.getter(name="spanCount")
    def span_count(self) -> Optional[int]:
        return pulumi.get(self, "span_count")

    @property
    @pulumi.getter(name="timeEarliestSpanStarted")
    def time_earliest_span_started(self) -> Optional[str]:
        return pulumi.get(self, "time_earliest_span_started")

    @property
    @pulumi.getter(name="timeLatestSpanEnded")
    def time_latest_span_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_latest_span_ended")

    @property
    @pulumi.getter(name="timeRootSpanEnded")
    def time_root_span_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_root_span_ended")

    @property
    @pulumi.getter(name="timeRootSpanStarted")
    def time_root_span_started(self) -> Optional[str]:
        return pulumi.get(self, "time_root_span_started")

    @property
    @pulumi.getter(name="traceDurationInMs")
    def trace_duration_in_ms(self) -> Optional[int]:
        return pulumi.get(self, "trace_duration_in_ms")

    @property
    @pulumi.getter(name="traceErrorCode")
    def trace_error_code(self) -> Optional[str]:
        return pulumi.get(self, "trace_error_code")

    @property
    @pulumi.getter(name="traceErrorType")
    def trace_error_type(self) -> Optional[str]:
        return pulumi.get(self, "trace_error_type")

    @property
    @pulumi.getter(name="traceStatus")
    def trace_status(self) -> Optional[str]:
        return pulumi.get(self, "trace_status")


@pulumi.output_type
class GetTraceSpanSummaryServiceSummaryResult(dict):
    def __init__(__self__, *,
                 error_spans: Optional[str] = None,
                 span_service_name: Optional[str] = None,
                 total_spans: Optional[str] = None):
        if error_spans is not None:
            pulumi.set(__self__, "error_spans", error_spans)
        if span_service_name is not None:
            pulumi.set(__self__, "span_service_name", span_service_name)
        if total_spans is not None:
            pulumi.set(__self__, "total_spans", total_spans)

    @property
    @pulumi.getter(name="errorSpans")
    def error_spans(self) -> Optional[str]:
        return pulumi.get(self, "error_spans")

    @property
    @pulumi.getter(name="spanServiceName")
    def span_service_name(self) -> Optional[str]:
        return pulumi.get(self, "span_service_name")

    @property
    @pulumi.getter(name="totalSpans")
    def total_spans(self) -> Optional[str]:
        return pulumi.get(self, "total_spans")


@pulumi.output_type
class GetTraceSpanTagResult(dict):
    def __init__(__self__, *,
                 tag_name: Optional[str] = None,
                 tag_value: Optional[str] = None):
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[str]:
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[str]:
        return pulumi.get(self, "tag_value")


