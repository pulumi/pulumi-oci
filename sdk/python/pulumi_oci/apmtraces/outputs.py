# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ScheduledQueryScheduledQueryProcessingConfiguration',
    'ScheduledQueryScheduledQueryProcessingConfigurationCustomMetric',
    'ScheduledQueryScheduledQueryProcessingConfigurationObjectStorage',
    'ScheduledQueryScheduledQueryProcessingConfigurationStreaming',
    'GetLogAttributeResult',
    'GetQueryQuickPicksFilterResult',
    'GetQueryQuickPicksQuickPickResult',
    'GetScheduledQueriesFilterResult',
    'GetScheduledQueriesScheduledQueryCollectionResult',
    'GetScheduledQueriesScheduledQueryCollectionItemResult',
    'GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationResult',
    'GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationCustomMetricResult',
    'GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationObjectStorageResult',
    'GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationStreamingResult',
    'GetScheduledQueryScheduledQueryProcessingConfigurationResult',
    'GetScheduledQueryScheduledQueryProcessingConfigurationCustomMetricResult',
    'GetScheduledQueryScheduledQueryProcessingConfigurationObjectStorageResult',
    'GetScheduledQueryScheduledQueryProcessingConfigurationStreamingResult',
    'GetTraceAggregatedSnapshotDataDetailResult',
    'GetTraceServiceSummaryResult',
    'GetTraceSnapshotDataTraceSnapshotDetailResult',
    'GetTraceSpanResult',
    'GetTraceSpanLogResult',
    'GetTraceSpanLogSpanLogResult',
    'GetTraceSpanSummaryResult',
    'GetTraceSpanSummaryServiceSummaryResult',
    'GetTraceSpanTagResult',
]

@pulumi.output_type
class ScheduledQueryScheduledQueryProcessingConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customMetric":
            suggest = "custom_metric"
        elif key == "objectStorage":
            suggest = "object_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryScheduledQueryProcessingConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryScheduledQueryProcessingConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryScheduledQueryProcessingConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_metric: Optional['outputs.ScheduledQueryScheduledQueryProcessingConfigurationCustomMetric'] = None,
                 object_storage: Optional['outputs.ScheduledQueryScheduledQueryProcessingConfigurationObjectStorage'] = None,
                 streaming: Optional['outputs.ScheduledQueryScheduledQueryProcessingConfigurationStreaming'] = None):
        """
        :param 'ScheduledQueryScheduledQueryProcessingConfigurationCustomMetricArgs' custom_metric: (Updatable) Definition of the Custom Metric.
        :param 'ScheduledQueryScheduledQueryProcessingConfigurationObjectStorageArgs' object_storage: (Updatable) Definition of the object storage.
        :param 'ScheduledQueryScheduledQueryProcessingConfigurationStreamingArgs' streaming: (Updatable) Definition of the Stream.
        """
        if custom_metric is not None:
            pulumi.set(__self__, "custom_metric", custom_metric)
        if object_storage is not None:
            pulumi.set(__self__, "object_storage", object_storage)
        if streaming is not None:
            pulumi.set(__self__, "streaming", streaming)

    @_builtins.property
    @pulumi.getter(name="customMetric")
    def custom_metric(self) -> Optional['outputs.ScheduledQueryScheduledQueryProcessingConfigurationCustomMetric']:
        """
        (Updatable) Definition of the Custom Metric.
        """
        return pulumi.get(self, "custom_metric")

    @_builtins.property
    @pulumi.getter(name="objectStorage")
    def object_storage(self) -> Optional['outputs.ScheduledQueryScheduledQueryProcessingConfigurationObjectStorage']:
        """
        (Updatable) Definition of the object storage.
        """
        return pulumi.get(self, "object_storage")

    @_builtins.property
    @pulumi.getter
    def streaming(self) -> Optional['outputs.ScheduledQueryScheduledQueryProcessingConfigurationStreaming']:
        """
        (Updatable) Definition of the Stream.
        """
        return pulumi.get(self, "streaming")


@pulumi.output_type
class ScheduledQueryScheduledQueryProcessingConfigurationCustomMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isAnomalyDetectionEnabled":
            suggest = "is_anomaly_detection_enabled"
        elif key == "isMetricPublished":
            suggest = "is_metric_published"
        elif key == "resourceGroup":
            suggest = "resource_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryScheduledQueryProcessingConfigurationCustomMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryScheduledQueryProcessingConfigurationCustomMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryScheduledQueryProcessingConfigurationCustomMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 compartment: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 is_anomaly_detection_enabled: Optional[_builtins.bool] = None,
                 is_metric_published: Optional[_builtins.bool] = None,
                 namespace: Optional[_builtins.str] = None,
                 resource_group: Optional[_builtins.str] = None,
                 unit: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: (Updatable) Name of the Custom Metric.
        :param _builtins.str compartment: (Updatable) Compartment of the Monitoring Service. It defaults to the APM domain's compartment if not specified.  If specified, the necessary Oracle Cloud Infrastructure policies should be set to allow APM to write to that compartment.
        :param _builtins.str description: (Updatable) Description of the Custom Metric.
        :param _builtins.bool is_anomaly_detection_enabled: (Updatable) Indicates whether anomaly Detection should be performed on the generated metric.
        :param _builtins.bool is_metric_published: (Updatable) Used in conjunction with the dry run header.  When the dry run header is set and the isPublishMetric flag is set to true, the  scheduled query is not created, but validations happen to check if the right Oracle Cloud Infrastructure policies have been set to write to the specified namespace/compartment.
        :param _builtins.str namespace: (Updatable) Namespace in the Custom Metric. It defaults to `oracle_apm_custom` if not specified.  If specified, the necessary Oracle Cloud Infrastructure policies should be set to allow APM to write to that namespace.
        :param _builtins.str resource_group: (Updatable) Resource Group of the Custom Metric.
        :param _builtins.str unit: (Updatable) Unit in which the metric value is reported. For example 'ms'.
        """
        pulumi.set(__self__, "name", name)
        if compartment is not None:
            pulumi.set(__self__, "compartment", compartment)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_anomaly_detection_enabled is not None:
            pulumi.set(__self__, "is_anomaly_detection_enabled", is_anomaly_detection_enabled)
        if is_metric_published is not None:
            pulumi.set(__self__, "is_metric_published", is_metric_published)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        (Updatable) Name of the Custom Metric.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def compartment(self) -> Optional[_builtins.str]:
        """
        (Updatable) Compartment of the Monitoring Service. It defaults to the APM domain's compartment if not specified.  If specified, the necessary Oracle Cloud Infrastructure policies should be set to allow APM to write to that compartment.
        """
        return pulumi.get(self, "compartment")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        (Updatable) Description of the Custom Metric.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isAnomalyDetectionEnabled")
    def is_anomaly_detection_enabled(self) -> Optional[_builtins.bool]:
        """
        (Updatable) Indicates whether anomaly Detection should be performed on the generated metric.
        """
        return pulumi.get(self, "is_anomaly_detection_enabled")

    @_builtins.property
    @pulumi.getter(name="isMetricPublished")
    def is_metric_published(self) -> Optional[_builtins.bool]:
        """
        (Updatable) Used in conjunction with the dry run header.  When the dry run header is set and the isPublishMetric flag is set to true, the  scheduled query is not created, but validations happen to check if the right Oracle Cloud Infrastructure policies have been set to write to the specified namespace/compartment.
        """
        return pulumi.get(self, "is_metric_published")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        """
        (Updatable) Namespace in the Custom Metric. It defaults to `oracle_apm_custom` if not specified.  If specified, the necessary Oracle Cloud Infrastructure policies should be set to allow APM to write to that namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        """
        (Updatable) Resource Group of the Custom Metric.
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> Optional[_builtins.str]:
        """
        (Updatable) Unit in which the metric value is reported. For example 'ms'.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class ScheduledQueryScheduledQueryProcessingConfigurationObjectStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameSpace":
            suggest = "name_space"
        elif key == "objectNamePrefix":
            suggest = "object_name_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryScheduledQueryProcessingConfigurationObjectStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryScheduledQueryProcessingConfigurationObjectStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryScheduledQueryProcessingConfigurationObjectStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: Optional[_builtins.str] = None,
                 name_space: Optional[_builtins.str] = None,
                 object_name_prefix: Optional[_builtins.str] = None):
        """
        :param _builtins.str bucket: (Updatable) Bucket name in the object store.
        :param _builtins.str name_space: (Updatable) Namespace in the object store.
        :param _builtins.str object_name_prefix: (Updatable) Object name prefix in the object store.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if name_space is not None:
            pulumi.set(__self__, "name_space", name_space)
        if object_name_prefix is not None:
            pulumi.set(__self__, "object_name_prefix", object_name_prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[_builtins.str]:
        """
        (Updatable) Bucket name in the object store.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="nameSpace")
    def name_space(self) -> Optional[_builtins.str]:
        """
        (Updatable) Namespace in the object store.
        """
        return pulumi.get(self, "name_space")

    @_builtins.property
    @pulumi.getter(name="objectNamePrefix")
    def object_name_prefix(self) -> Optional[_builtins.str]:
        """
        (Updatable) Object name prefix in the object store.
        """
        return pulumi.get(self, "object_name_prefix")


@pulumi.output_type
class ScheduledQueryScheduledQueryProcessingConfigurationStreaming(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamId":
            suggest = "stream_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryScheduledQueryProcessingConfigurationStreaming. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryScheduledQueryProcessingConfigurationStreaming.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryScheduledQueryProcessingConfigurationStreaming.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str stream_id: (Updatable) Stream Id.
        """
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)

    @_builtins.property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) Stream Id.
        """
        return pulumi.get(self, "stream_id")


@pulumi.output_type
class GetLogAttributeResult(dict):
    def __init__(__self__, *,
                 attribute_name: _builtins.str,
                 attribute_value: _builtins.str):
        """
        :param _builtins.str attribute_name: Key that specifies the attribute name.
        :param _builtins.str attribute_value: Value associated with the attribute key.
        """
        pulumi.set(__self__, "attribute_name", attribute_name)
        pulumi.set(__self__, "attribute_value", attribute_value)

    @_builtins.property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> _builtins.str:
        """
        Key that specifies the attribute name.
        """
        return pulumi.get(self, "attribute_name")

    @_builtins.property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> _builtins.str:
        """
        Value associated with the attribute key.
        """
        return pulumi.get(self, "attribute_value")


@pulumi.output_type
class GetQueryQuickPicksFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetQueryQuickPicksQuickPickResult(dict):
    def __init__(__self__, *,
                 quick_pick_name: _builtins.str,
                 quick_pick_query: _builtins.str):
        """
        :param _builtins.str quick_pick_name: Quick Pick name for the query.
        :param _builtins.str quick_pick_query: Query for the Quick Pick.
        """
        pulumi.set(__self__, "quick_pick_name", quick_pick_name)
        pulumi.set(__self__, "quick_pick_query", quick_pick_query)

    @_builtins.property
    @pulumi.getter(name="quickPickName")
    def quick_pick_name(self) -> _builtins.str:
        """
        Quick Pick name for the query.
        """
        return pulumi.get(self, "quick_pick_name")

    @_builtins.property
    @pulumi.getter(name="quickPickQuery")
    def quick_pick_query(self) -> _builtins.str:
        """
        Query for the Quick Pick.
        """
        return pulumi.get(self, "quick_pick_query")


@pulumi.output_type
class GetScheduledQueriesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Name of the Custom Metric.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the Custom Metric.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetScheduledQueriesScheduledQueryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetScheduledQueriesScheduledQueryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetScheduledQueriesScheduledQueryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetScheduledQueriesScheduledQueryCollectionItemResult(dict):
    def __init__(__self__, *,
                 apm_domain_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 opc_dry_run: _builtins.str,
                 scheduled_query_description: _builtins.str,
                 scheduled_query_instances: _builtins.str,
                 scheduled_query_maximum_runtime_in_seconds: _builtins.str,
                 scheduled_query_name: _builtins.str,
                 scheduled_query_next_run_in_ms: _builtins.str,
                 scheduled_query_processing_configurations: Sequence['outputs.GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationResult'],
                 scheduled_query_processing_sub_type: _builtins.str,
                 scheduled_query_processing_type: _builtins.str,
                 scheduled_query_retention_criteria: _builtins.str,
                 scheduled_query_retention_period_in_ms: _builtins.str,
                 scheduled_query_schedule: _builtins.str,
                 scheduled_query_text: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str]):
        """
        :param _builtins.str apm_domain_id: The APM Domain ID for the intended request.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the scheduled query . An OCID is generated when the scheduled query is created.
        :param _builtins.str scheduled_query_description: Description for the scheduled query.
        :param _builtins.str scheduled_query_instances: Scheduled query instances.
        :param _builtins.str scheduled_query_maximum_runtime_in_seconds: Maximum runtime for the scheduled query in seconds.
        :param _builtins.str scheduled_query_name: Name of the scheduled query.
        :param _builtins.str scheduled_query_next_run_in_ms: Next run for the scheduled query.
        :param Sequence['GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationArgs'] scheduled_query_processing_configurations: Definition of the scheduled query processing configuration.
        :param _builtins.str scheduled_query_processing_sub_type: Processing sub type of the scheduled query.
        :param _builtins.str scheduled_query_processing_type: Processing type of the scheduled query.
        :param _builtins.str scheduled_query_retention_criteria: Retention criteria for the scheduled query.
        :param _builtins.str scheduled_query_retention_period_in_ms: Retention period for the scheduled query in milliseconds.
        :param _builtins.str scheduled_query_schedule: Schedule for the scheduled query.
        :param _builtins.str scheduled_query_text: Scheduled query to be run.
        :param _builtins.str state: The current lifecycle state of the Scheduled Query.
        :param Mapping[str, _builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        pulumi.set(__self__, "apm_domain_id", apm_domain_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "opc_dry_run", opc_dry_run)
        pulumi.set(__self__, "scheduled_query_description", scheduled_query_description)
        pulumi.set(__self__, "scheduled_query_instances", scheduled_query_instances)
        pulumi.set(__self__, "scheduled_query_maximum_runtime_in_seconds", scheduled_query_maximum_runtime_in_seconds)
        pulumi.set(__self__, "scheduled_query_name", scheduled_query_name)
        pulumi.set(__self__, "scheduled_query_next_run_in_ms", scheduled_query_next_run_in_ms)
        pulumi.set(__self__, "scheduled_query_processing_configurations", scheduled_query_processing_configurations)
        pulumi.set(__self__, "scheduled_query_processing_sub_type", scheduled_query_processing_sub_type)
        pulumi.set(__self__, "scheduled_query_processing_type", scheduled_query_processing_type)
        pulumi.set(__self__, "scheduled_query_retention_criteria", scheduled_query_retention_criteria)
        pulumi.set(__self__, "scheduled_query_retention_period_in_ms", scheduled_query_retention_period_in_ms)
        pulumi.set(__self__, "scheduled_query_schedule", scheduled_query_schedule)
        pulumi.set(__self__, "scheduled_query_text", scheduled_query_text)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)

    @_builtins.property
    @pulumi.getter(name="apmDomainId")
    def apm_domain_id(self) -> _builtins.str:
        """
        The APM Domain ID for the intended request.
        """
        return pulumi.get(self, "apm_domain_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the scheduled query . An OCID is generated when the scheduled query is created.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="opcDryRun")
    def opc_dry_run(self) -> _builtins.str:
        return pulumi.get(self, "opc_dry_run")

    @_builtins.property
    @pulumi.getter(name="scheduledQueryDescription")
    def scheduled_query_description(self) -> _builtins.str:
        """
        Description for the scheduled query.
        """
        return pulumi.get(self, "scheduled_query_description")

    @_builtins.property
    @pulumi.getter(name="scheduledQueryInstances")
    def scheduled_query_instances(self) -> _builtins.str:
        """
        Scheduled query instances.
        """
        return pulumi.get(self, "scheduled_query_instances")

    @_builtins.property
    @pulumi.getter(name="scheduledQueryMaximumRuntimeInSeconds")
    def scheduled_query_maximum_runtime_in_seconds(self) -> _builtins.str:
        """
        Maximum runtime for the scheduled query in seconds.
        """
        return pulumi.get(self, "scheduled_query_maximum_runtime_in_seconds")

    @_builtins.property
    @pulumi.getter(name="scheduledQueryName")
    def scheduled_query_name(self) -> _builtins.str:
        """
        Name of the scheduled query.
        """
        return pulumi.get(self, "scheduled_query_name")

    @_builtins.property
    @pulumi.getter(name="scheduledQueryNextRunInMs")
    def scheduled_query_next_run_in_ms(self) -> _builtins.str:
        """
        Next run for the scheduled query.
        """
        return pulumi.get(self, "scheduled_query_next_run_in_ms")

    @_builtins.property
    @pulumi.getter(name="scheduledQueryProcessingConfigurations")
    def scheduled_query_processing_configurations(self) -> Sequence['outputs.GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationResult']:
        """
        Definition of the scheduled query processing configuration.
        """
        return pulumi.get(self, "scheduled_query_processing_configurations")

    @_builtins.property
    @pulumi.getter(name="scheduledQueryProcessingSubType")
    def scheduled_query_processing_sub_type(self) -> _builtins.str:
        """
        Processing sub type of the scheduled query.
        """
        return pulumi.get(self, "scheduled_query_processing_sub_type")

    @_builtins.property
    @pulumi.getter(name="scheduledQueryProcessingType")
    def scheduled_query_processing_type(self) -> _builtins.str:
        """
        Processing type of the scheduled query.
        """
        return pulumi.get(self, "scheduled_query_processing_type")

    @_builtins.property
    @pulumi.getter(name="scheduledQueryRetentionCriteria")
    def scheduled_query_retention_criteria(self) -> _builtins.str:
        """
        Retention criteria for the scheduled query.
        """
        return pulumi.get(self, "scheduled_query_retention_criteria")

    @_builtins.property
    @pulumi.getter(name="scheduledQueryRetentionPeriodInMs")
    def scheduled_query_retention_period_in_ms(self) -> _builtins.str:
        """
        Retention period for the scheduled query in milliseconds.
        """
        return pulumi.get(self, "scheduled_query_retention_period_in_ms")

    @_builtins.property
    @pulumi.getter(name="scheduledQuerySchedule")
    def scheduled_query_schedule(self) -> _builtins.str:
        """
        Schedule for the scheduled query.
        """
        return pulumi.get(self, "scheduled_query_schedule")

    @_builtins.property
    @pulumi.getter(name="scheduledQueryText")
    def scheduled_query_text(self) -> _builtins.str:
        """
        Scheduled query to be run.
        """
        return pulumi.get(self, "scheduled_query_text")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current lifecycle state of the Scheduled Query.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationResult(dict):
    def __init__(__self__, *,
                 custom_metrics: Sequence['outputs.GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationCustomMetricResult'],
                 object_storages: Sequence['outputs.GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationObjectStorageResult'],
                 streamings: Sequence['outputs.GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationStreamingResult']):
        """
        :param Sequence['GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationCustomMetricArgs'] custom_metrics: Definition of the Custom Metric.
        :param Sequence['GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationObjectStorageArgs'] object_storages: Definition of the object storage.
        :param Sequence['GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationStreamingArgs'] streamings: Definition of the Stream.
        """
        pulumi.set(__self__, "custom_metrics", custom_metrics)
        pulumi.set(__self__, "object_storages", object_storages)
        pulumi.set(__self__, "streamings", streamings)

    @_builtins.property
    @pulumi.getter(name="customMetrics")
    def custom_metrics(self) -> Sequence['outputs.GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationCustomMetricResult']:
        """
        Definition of the Custom Metric.
        """
        return pulumi.get(self, "custom_metrics")

    @_builtins.property
    @pulumi.getter(name="objectStorages")
    def object_storages(self) -> Sequence['outputs.GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationObjectStorageResult']:
        """
        Definition of the object storage.
        """
        return pulumi.get(self, "object_storages")

    @_builtins.property
    @pulumi.getter
    def streamings(self) -> Sequence['outputs.GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationStreamingResult']:
        """
        Definition of the Stream.
        """
        return pulumi.get(self, "streamings")


@pulumi.output_type
class GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationCustomMetricResult(dict):
    def __init__(__self__, *,
                 compartment: _builtins.str,
                 description: _builtins.str,
                 is_anomaly_detection_enabled: _builtins.bool,
                 is_metric_published: _builtins.bool,
                 name: _builtins.str,
                 namespace: _builtins.str,
                 resource_group: _builtins.str,
                 unit: _builtins.str):
        """
        :param _builtins.str compartment: Compartment of the Monitoring Service. It defaults to the APM domain's compartment if not specified.  If specified, the necessary Oracle Cloud Infrastructure policies should be set to allow APM to write to that compartment.
        :param _builtins.str description: Description of the Custom Metric.
        :param _builtins.bool is_anomaly_detection_enabled: Indicates whether anomaly Detection should be performed on the generated metric.
        :param _builtins.bool is_metric_published: Used in conjunction with the dry run header.  When the dry run header is set and the isPublishMetric flag is set to true, the  scheduled query is not created, but validations happen to check if the right Oracle Cloud Infrastructure policies have been set to write to the specified namespace/compartment.
        :param _builtins.str name: Name of the Custom Metric.
        :param _builtins.str namespace: Namespace in the Custom Metric. It defaults to `oracle_apm_custom` if not specified.  If specified, the necessary Oracle Cloud Infrastructure policies should be set to allow APM to write to that namespace.
        :param _builtins.str resource_group: Resource Group of the Custom Metric.
        :param _builtins.str unit: Unit in which the metric value is reported. For example 'ms'.
        """
        pulumi.set(__self__, "compartment", compartment)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_anomaly_detection_enabled", is_anomaly_detection_enabled)
        pulumi.set(__self__, "is_metric_published", is_metric_published)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "unit", unit)

    @_builtins.property
    @pulumi.getter
    def compartment(self) -> _builtins.str:
        """
        Compartment of the Monitoring Service. It defaults to the APM domain's compartment if not specified.  If specified, the necessary Oracle Cloud Infrastructure policies should be set to allow APM to write to that compartment.
        """
        return pulumi.get(self, "compartment")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the Custom Metric.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isAnomalyDetectionEnabled")
    def is_anomaly_detection_enabled(self) -> _builtins.bool:
        """
        Indicates whether anomaly Detection should be performed on the generated metric.
        """
        return pulumi.get(self, "is_anomaly_detection_enabled")

    @_builtins.property
    @pulumi.getter(name="isMetricPublished")
    def is_metric_published(self) -> _builtins.bool:
        """
        Used in conjunction with the dry run header.  When the dry run header is set and the isPublishMetric flag is set to true, the  scheduled query is not created, but validations happen to check if the right Oracle Cloud Infrastructure policies have been set to write to the specified namespace/compartment.
        """
        return pulumi.get(self, "is_metric_published")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the Custom Metric.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Namespace in the Custom Metric. It defaults to `oracle_apm_custom` if not specified.  If specified, the necessary Oracle Cloud Infrastructure policies should be set to allow APM to write to that namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        """
        Resource Group of the Custom Metric.
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        Unit in which the metric value is reported. For example 'ms'.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationObjectStorageResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 name_space: _builtins.str,
                 object_name_prefix: _builtins.str):
        """
        :param _builtins.str bucket: Bucket name in the object store.
        :param _builtins.str name_space: Namespace in the object store.
        :param _builtins.str object_name_prefix: Object name prefix in the object store.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "name_space", name_space)
        pulumi.set(__self__, "object_name_prefix", object_name_prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        Bucket name in the object store.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="nameSpace")
    def name_space(self) -> _builtins.str:
        """
        Namespace in the object store.
        """
        return pulumi.get(self, "name_space")

    @_builtins.property
    @pulumi.getter(name="objectNamePrefix")
    def object_name_prefix(self) -> _builtins.str:
        """
        Object name prefix in the object store.
        """
        return pulumi.get(self, "object_name_prefix")


@pulumi.output_type
class GetScheduledQueriesScheduledQueryCollectionItemScheduledQueryProcessingConfigurationStreamingResult(dict):
    def __init__(__self__, *,
                 stream_id: _builtins.str):
        """
        :param _builtins.str stream_id: Stream Id.
        """
        pulumi.set(__self__, "stream_id", stream_id)

    @_builtins.property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> _builtins.str:
        """
        Stream Id.
        """
        return pulumi.get(self, "stream_id")


@pulumi.output_type
class GetScheduledQueryScheduledQueryProcessingConfigurationResult(dict):
    def __init__(__self__, *,
                 custom_metrics: Sequence['outputs.GetScheduledQueryScheduledQueryProcessingConfigurationCustomMetricResult'],
                 object_storages: Sequence['outputs.GetScheduledQueryScheduledQueryProcessingConfigurationObjectStorageResult'],
                 streamings: Sequence['outputs.GetScheduledQueryScheduledQueryProcessingConfigurationStreamingResult']):
        """
        :param Sequence['GetScheduledQueryScheduledQueryProcessingConfigurationCustomMetricArgs'] custom_metrics: Definition of the Custom Metric.
        :param Sequence['GetScheduledQueryScheduledQueryProcessingConfigurationObjectStorageArgs'] object_storages: Definition of the object storage.
        :param Sequence['GetScheduledQueryScheduledQueryProcessingConfigurationStreamingArgs'] streamings: Definition of the Stream.
        """
        pulumi.set(__self__, "custom_metrics", custom_metrics)
        pulumi.set(__self__, "object_storages", object_storages)
        pulumi.set(__self__, "streamings", streamings)

    @_builtins.property
    @pulumi.getter(name="customMetrics")
    def custom_metrics(self) -> Sequence['outputs.GetScheduledQueryScheduledQueryProcessingConfigurationCustomMetricResult']:
        """
        Definition of the Custom Metric.
        """
        return pulumi.get(self, "custom_metrics")

    @_builtins.property
    @pulumi.getter(name="objectStorages")
    def object_storages(self) -> Sequence['outputs.GetScheduledQueryScheduledQueryProcessingConfigurationObjectStorageResult']:
        """
        Definition of the object storage.
        """
        return pulumi.get(self, "object_storages")

    @_builtins.property
    @pulumi.getter
    def streamings(self) -> Sequence['outputs.GetScheduledQueryScheduledQueryProcessingConfigurationStreamingResult']:
        """
        Definition of the Stream.
        """
        return pulumi.get(self, "streamings")


@pulumi.output_type
class GetScheduledQueryScheduledQueryProcessingConfigurationCustomMetricResult(dict):
    def __init__(__self__, *,
                 compartment: _builtins.str,
                 description: _builtins.str,
                 is_anomaly_detection_enabled: _builtins.bool,
                 is_metric_published: _builtins.bool,
                 name: _builtins.str,
                 namespace: _builtins.str,
                 resource_group: _builtins.str,
                 unit: _builtins.str):
        """
        :param _builtins.str compartment: Compartment of the Monitoring Service. It defaults to the APM domain's compartment if not specified.  If specified, the necessary Oracle Cloud Infrastructure policies should be set to allow APM to write to that compartment.
        :param _builtins.str description: Description of the Custom Metric.
        :param _builtins.bool is_anomaly_detection_enabled: Indicates whether anomaly Detection should be performed on the generated metric.
        :param _builtins.bool is_metric_published: Used in conjunction with the dry run header.  When the dry run header is set and the isPublishMetric flag is set to true, the  scheduled query is not created, but validations happen to check if the right Oracle Cloud Infrastructure policies have been set to write to the specified namespace/compartment.
        :param _builtins.str name: Name of the Custom Metric.
        :param _builtins.str namespace: Namespace in the Custom Metric. It defaults to `oracle_apm_custom` if not specified.  If specified, the necessary Oracle Cloud Infrastructure policies should be set to allow APM to write to that namespace.
        :param _builtins.str resource_group: Resource Group of the Custom Metric.
        :param _builtins.str unit: Unit in which the metric value is reported. For example 'ms'.
        """
        pulumi.set(__self__, "compartment", compartment)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_anomaly_detection_enabled", is_anomaly_detection_enabled)
        pulumi.set(__self__, "is_metric_published", is_metric_published)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "unit", unit)

    @_builtins.property
    @pulumi.getter
    def compartment(self) -> _builtins.str:
        """
        Compartment of the Monitoring Service. It defaults to the APM domain's compartment if not specified.  If specified, the necessary Oracle Cloud Infrastructure policies should be set to allow APM to write to that compartment.
        """
        return pulumi.get(self, "compartment")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the Custom Metric.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isAnomalyDetectionEnabled")
    def is_anomaly_detection_enabled(self) -> _builtins.bool:
        """
        Indicates whether anomaly Detection should be performed on the generated metric.
        """
        return pulumi.get(self, "is_anomaly_detection_enabled")

    @_builtins.property
    @pulumi.getter(name="isMetricPublished")
    def is_metric_published(self) -> _builtins.bool:
        """
        Used in conjunction with the dry run header.  When the dry run header is set and the isPublishMetric flag is set to true, the  scheduled query is not created, but validations happen to check if the right Oracle Cloud Infrastructure policies have been set to write to the specified namespace/compartment.
        """
        return pulumi.get(self, "is_metric_published")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the Custom Metric.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        Namespace in the Custom Metric. It defaults to `oracle_apm_custom` if not specified.  If specified, the necessary Oracle Cloud Infrastructure policies should be set to allow APM to write to that namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        """
        Resource Group of the Custom Metric.
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        Unit in which the metric value is reported. For example 'ms'.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetScheduledQueryScheduledQueryProcessingConfigurationObjectStorageResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 name_space: _builtins.str,
                 object_name_prefix: _builtins.str):
        """
        :param _builtins.str bucket: Bucket name in the object store.
        :param _builtins.str name_space: Namespace in the object store.
        :param _builtins.str object_name_prefix: Object name prefix in the object store.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "name_space", name_space)
        pulumi.set(__self__, "object_name_prefix", object_name_prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        Bucket name in the object store.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="nameSpace")
    def name_space(self) -> _builtins.str:
        """
        Namespace in the object store.
        """
        return pulumi.get(self, "name_space")

    @_builtins.property
    @pulumi.getter(name="objectNamePrefix")
    def object_name_prefix(self) -> _builtins.str:
        """
        Object name prefix in the object store.
        """
        return pulumi.get(self, "object_name_prefix")


@pulumi.output_type
class GetScheduledQueryScheduledQueryProcessingConfigurationStreamingResult(dict):
    def __init__(__self__, *,
                 stream_id: _builtins.str):
        """
        :param _builtins.str stream_id: Stream Id.
        """
        pulumi.set(__self__, "stream_id", stream_id)

    @_builtins.property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> _builtins.str:
        """
        Stream Id.
        """
        return pulumi.get(self, "stream_id")


@pulumi.output_type
class GetTraceAggregatedSnapshotDataDetailResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Name of the property.
        :param _builtins.str value: Value of the property.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Name of the property.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value of the property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTraceServiceSummaryResult(dict):
    def __init__(__self__, *,
                 error_spans: _builtins.str,
                 span_service_name: _builtins.str,
                 total_spans: _builtins.str):
        """
        :param _builtins.str error_spans: Number of spans with errors for serviceName in the trace.
        :param _builtins.str span_service_name: Name associated with the service.
        :param _builtins.str total_spans: Number of spans for serviceName in the trace.
        """
        pulumi.set(__self__, "error_spans", error_spans)
        pulumi.set(__self__, "span_service_name", span_service_name)
        pulumi.set(__self__, "total_spans", total_spans)

    @_builtins.property
    @pulumi.getter(name="errorSpans")
    def error_spans(self) -> _builtins.str:
        """
        Number of spans with errors for serviceName in the trace.
        """
        return pulumi.get(self, "error_spans")

    @_builtins.property
    @pulumi.getter(name="spanServiceName")
    def span_service_name(self) -> _builtins.str:
        """
        Name associated with the service.
        """
        return pulumi.get(self, "span_service_name")

    @_builtins.property
    @pulumi.getter(name="totalSpans")
    def total_spans(self) -> _builtins.str:
        """
        Number of spans for serviceName in the trace.
        """
        return pulumi.get(self, "total_spans")


@pulumi.output_type
class GetTraceSnapshotDataTraceSnapshotDetailResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: Name of the property.
        :param _builtins.str value: Value of the property.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Name of the property.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Value of the property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTraceSpanResult(dict):
    def __init__(__self__, *,
                 duration_in_ms: _builtins.str,
                 is_error: _builtins.bool,
                 key: _builtins.str,
                 kind: _builtins.str,
                 logs: Sequence['outputs.GetTraceSpanLogResult'],
                 operation_name: _builtins.str,
                 parent_span_key: _builtins.str,
                 service_name: _builtins.str,
                 source_name: _builtins.str,
                 tags: Sequence['outputs.GetTraceSpanTagResult'],
                 time_ended: _builtins.str,
                 time_started: _builtins.str,
                 trace_key: _builtins.str):
        """
        :param _builtins.str duration_in_ms: Total span duration in milliseconds.
        :param _builtins.bool is_error: Indicates if the span has an error.
        :param _builtins.str key: Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
        :param _builtins.str kind: Kind associated with the span.
        :param Sequence['GetTraceSpanLogArgs'] logs: List of logs associated with the span.
        :param _builtins.str operation_name: Span name associated with the trace.  This is usually the method or URI of the request.
        :param _builtins.str parent_span_key: Unique parent identifier for the span if one exists. For root spans this will be null.
        :param _builtins.str service_name: Service name associated with the span.
        :param _builtins.str source_name: Source of span (spans, syn_spans).
        :param Sequence['GetTraceSpanTagArgs'] tags: List of tags associated with the span.
        :param _builtins.str time_ended: Span end time.  Timestamp when the span was completed.
        :param _builtins.str time_started: Span start time.  Timestamp when the span was started.
        :param _builtins.str trace_key: Unique Application Performance Monitoring trace identifier (traceId).
        """
        pulumi.set(__self__, "duration_in_ms", duration_in_ms)
        pulumi.set(__self__, "is_error", is_error)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "logs", logs)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "parent_span_key", parent_span_key)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "source_name", source_name)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "time_ended", time_ended)
        pulumi.set(__self__, "time_started", time_started)
        pulumi.set(__self__, "trace_key", trace_key)

    @_builtins.property
    @pulumi.getter(name="durationInMs")
    def duration_in_ms(self) -> _builtins.str:
        """
        Total span duration in milliseconds.
        """
        return pulumi.get(self, "duration_in_ms")

    @_builtins.property
    @pulumi.getter(name="isError")
    def is_error(self) -> _builtins.bool:
        """
        Indicates if the span has an error.
        """
        return pulumi.get(self, "is_error")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Kind associated with the span.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def logs(self) -> Sequence['outputs.GetTraceSpanLogResult']:
        """
        List of logs associated with the span.
        """
        return pulumi.get(self, "logs")

    @_builtins.property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> _builtins.str:
        """
        Span name associated with the trace.  This is usually the method or URI of the request.
        """
        return pulumi.get(self, "operation_name")

    @_builtins.property
    @pulumi.getter(name="parentSpanKey")
    def parent_span_key(self) -> _builtins.str:
        """
        Unique parent identifier for the span if one exists. For root spans this will be null.
        """
        return pulumi.get(self, "parent_span_key")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        Service name associated with the span.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> _builtins.str:
        """
        Source of span (spans, syn_spans).
        """
        return pulumi.get(self, "source_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetTraceSpanTagResult']:
        """
        List of tags associated with the span.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> _builtins.str:
        """
        Span end time.  Timestamp when the span was completed.
        """
        return pulumi.get(self, "time_ended")

    @_builtins.property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> _builtins.str:
        """
        Span start time.  Timestamp when the span was started.
        """
        return pulumi.get(self, "time_started")

    @_builtins.property
    @pulumi.getter(name="traceKey")
    def trace_key(self) -> _builtins.str:
        """
        Unique Application Performance Monitoring trace identifier (traceId).
        """
        return pulumi.get(self, "trace_key")


@pulumi.output_type
class GetTraceSpanLogResult(dict):
    def __init__(__self__, *,
                 event_name: _builtins.str,
                 span_logs: Sequence['outputs.GetTraceSpanLogSpanLogResult'],
                 time_created: _builtins.str):
        """
        :param _builtins.str event_name: Name of the event for which the log is created.
        :param Sequence['GetTraceSpanLogSpanLogArgs'] span_logs: List of logs associated with the span at the given timestamp.
        :param _builtins.str time_created: Timestamp at which the log is created.
        """
        pulumi.set(__self__, "event_name", event_name)
        pulumi.set(__self__, "span_logs", span_logs)
        pulumi.set(__self__, "time_created", time_created)

    @_builtins.property
    @pulumi.getter(name="eventName")
    def event_name(self) -> _builtins.str:
        """
        Name of the event for which the log is created.
        """
        return pulumi.get(self, "event_name")

    @_builtins.property
    @pulumi.getter(name="spanLogs")
    def span_logs(self) -> Sequence['outputs.GetTraceSpanLogSpanLogResult']:
        """
        List of logs associated with the span at the given timestamp.
        """
        return pulumi.get(self, "span_logs")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        Timestamp at which the log is created.
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetTraceSpanLogSpanLogResult(dict):
    def __init__(__self__, *,
                 log_key: _builtins.str,
                 log_value: _builtins.str):
        """
        :param _builtins.str log_key: Key that specifies the log name.
        :param _builtins.str log_value: Value associated with the log key.
        """
        pulumi.set(__self__, "log_key", log_key)
        pulumi.set(__self__, "log_value", log_value)

    @_builtins.property
    @pulumi.getter(name="logKey")
    def log_key(self) -> _builtins.str:
        """
        Key that specifies the log name.
        """
        return pulumi.get(self, "log_key")

    @_builtins.property
    @pulumi.getter(name="logValue")
    def log_value(self) -> _builtins.str:
        """
        Value associated with the log key.
        """
        return pulumi.get(self, "log_value")


@pulumi.output_type
class GetTraceSpanSummaryResult(dict):
    def __init__(__self__, *,
                 error_span_count: _builtins.int,
                 is_fault: _builtins.bool,
                 key: _builtins.str,
                 root_span_duration_in_ms: _builtins.int,
                 root_span_operation_name: _builtins.str,
                 root_span_service_name: _builtins.str,
                 service_summaries: Sequence['outputs.GetTraceSpanSummaryServiceSummaryResult'],
                 span_count: _builtins.int,
                 time_earliest_span_started: _builtins.str,
                 time_latest_span_ended: _builtins.str,
                 time_root_span_ended: _builtins.str,
                 time_root_span_started: _builtins.str,
                 trace_duration_in_ms: _builtins.int,
                 trace_error_code: _builtins.str,
                 trace_error_type: _builtins.str,
                 trace_status: _builtins.str):
        """
        :param _builtins.int error_span_count: The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
        :param _builtins.bool is_fault: Boolean flag that indicates whether the trace has an error.
        :param _builtins.str key: Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
        :param _builtins.int root_span_duration_in_ms: Time taken for the root span operation to complete in milliseconds.
        :param _builtins.str root_span_operation_name: Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
        :param _builtins.str root_span_service_name: Service associated with the trace.
        :param Sequence['GetTraceSpanSummaryServiceSummaryArgs'] service_summaries: A summary of the spans by service.
        :param _builtins.int span_count: The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
        :param _builtins.str time_earliest_span_started: Start time of the earliest span in the span collection.
        :param _builtins.str time_latest_span_ended: End time of the span that most recently ended in the span collection.
        :param _builtins.str time_root_span_ended: End time of the root span for the span collection.
        :param _builtins.str time_root_span_started: Start time of the root span for the span collection.
        :param _builtins.int trace_duration_in_ms: Time between the start of the earliest span and the end of the most recent span in milliseconds.
        :param _builtins.str trace_error_code: Error code of the trace.
        :param _builtins.str trace_error_type: Error type of the trace.
        :param _builtins.str trace_status: The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
        """
        pulumi.set(__self__, "error_span_count", error_span_count)
        pulumi.set(__self__, "is_fault", is_fault)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "root_span_duration_in_ms", root_span_duration_in_ms)
        pulumi.set(__self__, "root_span_operation_name", root_span_operation_name)
        pulumi.set(__self__, "root_span_service_name", root_span_service_name)
        pulumi.set(__self__, "service_summaries", service_summaries)
        pulumi.set(__self__, "span_count", span_count)
        pulumi.set(__self__, "time_earliest_span_started", time_earliest_span_started)
        pulumi.set(__self__, "time_latest_span_ended", time_latest_span_ended)
        pulumi.set(__self__, "time_root_span_ended", time_root_span_ended)
        pulumi.set(__self__, "time_root_span_started", time_root_span_started)
        pulumi.set(__self__, "trace_duration_in_ms", trace_duration_in_ms)
        pulumi.set(__self__, "trace_error_code", trace_error_code)
        pulumi.set(__self__, "trace_error_type", trace_error_type)
        pulumi.set(__self__, "trace_status", trace_status)

    @_builtins.property
    @pulumi.getter(name="errorSpanCount")
    def error_span_count(self) -> _builtins.int:
        """
        The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
        """
        return pulumi.get(self, "error_span_count")

    @_builtins.property
    @pulumi.getter(name="isFault")
    def is_fault(self) -> _builtins.bool:
        """
        Boolean flag that indicates whether the trace has an error.
        """
        return pulumi.get(self, "is_fault")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="rootSpanDurationInMs")
    def root_span_duration_in_ms(self) -> _builtins.int:
        """
        Time taken for the root span operation to complete in milliseconds.
        """
        return pulumi.get(self, "root_span_duration_in_ms")

    @_builtins.property
    @pulumi.getter(name="rootSpanOperationName")
    def root_span_operation_name(self) -> _builtins.str:
        """
        Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
        """
        return pulumi.get(self, "root_span_operation_name")

    @_builtins.property
    @pulumi.getter(name="rootSpanServiceName")
    def root_span_service_name(self) -> _builtins.str:
        """
        Service associated with the trace.
        """
        return pulumi.get(self, "root_span_service_name")

    @_builtins.property
    @pulumi.getter(name="serviceSummaries")
    def service_summaries(self) -> Sequence['outputs.GetTraceSpanSummaryServiceSummaryResult']:
        """
        A summary of the spans by service.
        """
        return pulumi.get(self, "service_summaries")

    @_builtins.property
    @pulumi.getter(name="spanCount")
    def span_count(self) -> _builtins.int:
        """
        The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
        """
        return pulumi.get(self, "span_count")

    @_builtins.property
    @pulumi.getter(name="timeEarliestSpanStarted")
    def time_earliest_span_started(self) -> _builtins.str:
        """
        Start time of the earliest span in the span collection.
        """
        return pulumi.get(self, "time_earliest_span_started")

    @_builtins.property
    @pulumi.getter(name="timeLatestSpanEnded")
    def time_latest_span_ended(self) -> _builtins.str:
        """
        End time of the span that most recently ended in the span collection.
        """
        return pulumi.get(self, "time_latest_span_ended")

    @_builtins.property
    @pulumi.getter(name="timeRootSpanEnded")
    def time_root_span_ended(self) -> _builtins.str:
        """
        End time of the root span for the span collection.
        """
        return pulumi.get(self, "time_root_span_ended")

    @_builtins.property
    @pulumi.getter(name="timeRootSpanStarted")
    def time_root_span_started(self) -> _builtins.str:
        """
        Start time of the root span for the span collection.
        """
        return pulumi.get(self, "time_root_span_started")

    @_builtins.property
    @pulumi.getter(name="traceDurationInMs")
    def trace_duration_in_ms(self) -> _builtins.int:
        """
        Time between the start of the earliest span and the end of the most recent span in milliseconds.
        """
        return pulumi.get(self, "trace_duration_in_ms")

    @_builtins.property
    @pulumi.getter(name="traceErrorCode")
    def trace_error_code(self) -> _builtins.str:
        """
        Error code of the trace.
        """
        return pulumi.get(self, "trace_error_code")

    @_builtins.property
    @pulumi.getter(name="traceErrorType")
    def trace_error_type(self) -> _builtins.str:
        """
        Error type of the trace.
        """
        return pulumi.get(self, "trace_error_type")

    @_builtins.property
    @pulumi.getter(name="traceStatus")
    def trace_status(self) -> _builtins.str:
        """
        The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
        """
        return pulumi.get(self, "trace_status")


@pulumi.output_type
class GetTraceSpanSummaryServiceSummaryResult(dict):
    def __init__(__self__, *,
                 error_spans: _builtins.str,
                 span_service_name: _builtins.str,
                 total_spans: _builtins.str):
        """
        :param _builtins.str error_spans: Number of spans with errors for serviceName in the trace.
        :param _builtins.str span_service_name: Name associated with the service.
        :param _builtins.str total_spans: Number of spans for serviceName in the trace.
        """
        pulumi.set(__self__, "error_spans", error_spans)
        pulumi.set(__self__, "span_service_name", span_service_name)
        pulumi.set(__self__, "total_spans", total_spans)

    @_builtins.property
    @pulumi.getter(name="errorSpans")
    def error_spans(self) -> _builtins.str:
        """
        Number of spans with errors for serviceName in the trace.
        """
        return pulumi.get(self, "error_spans")

    @_builtins.property
    @pulumi.getter(name="spanServiceName")
    def span_service_name(self) -> _builtins.str:
        """
        Name associated with the service.
        """
        return pulumi.get(self, "span_service_name")

    @_builtins.property
    @pulumi.getter(name="totalSpans")
    def total_spans(self) -> _builtins.str:
        """
        Number of spans for serviceName in the trace.
        """
        return pulumi.get(self, "total_spans")


@pulumi.output_type
class GetTraceSpanTagResult(dict):
    def __init__(__self__, *,
                 tag_name: _builtins.str,
                 tag_value: _builtins.str):
        """
        :param _builtins.str tag_name: Key that specifies the tag name.
        :param _builtins.str tag_value: Value associated with the tag key.
        """
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "tag_value", tag_value)

    @_builtins.property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> _builtins.str:
        """
        Key that specifies the tag name.
        """
        return pulumi.get(self, "tag_name")

    @_builtins.property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> _builtins.str:
        """
        Value associated with the tag key.
        """
        return pulumi.get(self, "tag_value")


