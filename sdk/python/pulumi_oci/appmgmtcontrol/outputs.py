# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMonitoredInstancesFilterResult',
    'GetMonitoredInstancesMonitoredInstanceCollectionResult',
    'GetMonitoredInstancesMonitoredInstanceCollectionItemResult',
]

@pulumi.output_type
class GetMonitoredInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetMonitoredInstancesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMonitoredInstancesMonitoredInstanceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMonitoredInstancesMonitoredInstanceCollectionItemResult']):
        GetMonitoredInstancesMonitoredInstanceCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetMonitoredInstancesMonitoredInstanceCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMonitoredInstancesMonitoredInstanceCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMonitoredInstancesMonitoredInstanceCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 display_name: str,
                 instance_id: str,
                 lifecycle_details: str,
                 management_agent_id: str,
                 monitoring_state: str,
                 state: str,
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The ID of the compartment in which to list resources.
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param str instance_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of monitored instance.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str management_agent_id: Management Agent Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Used to invoke manage operations on Management Agent Cloud Service.
        :param str monitoring_state: Monitoring status. Can be either enabled or disabled.
        :param str state: The current state of the monitored instance.
        :param str time_created: The time the MonitoredInstance was created. An RFC3339 formatted datetime string
        :param str time_updated: The time the MonitoredInstance was updated. An RFC3339 formatted datetime string
        """
        GetMonitoredInstancesMonitoredInstanceCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            display_name=display_name,
            instance_id=instance_id,
            lifecycle_details=lifecycle_details,
            management_agent_id=management_agent_id,
            monitoring_state=monitoring_state,
            state=state,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             display_name: str,
             instance_id: str,
             lifecycle_details: str,
             management_agent_id: str,
             monitoring_state: str,
             state: str,
             time_created: str,
             time_updated: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'instanceId' in kwargs:
            instance_id = kwargs['instanceId']
        if 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if 'managementAgentId' in kwargs:
            management_agent_id = kwargs['managementAgentId']
        if 'monitoringState' in kwargs:
            monitoring_state = kwargs['monitoringState']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']

        _setter("compartment_id", compartment_id)
        _setter("display_name", display_name)
        _setter("instance_id", instance_id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("management_agent_id", management_agent_id)
        _setter("monitoring_state", monitoring_state)
        _setter("state", state)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of monitored instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managementAgentId")
    def management_agent_id(self) -> str:
        """
        Management Agent Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Used to invoke manage operations on Management Agent Cloud Service.
        """
        return pulumi.get(self, "management_agent_id")

    @property
    @pulumi.getter(name="monitoringState")
    def monitoring_state(self) -> str:
        """
        Monitoring status. Can be either enabled or disabled.
        """
        return pulumi.get(self, "monitoring_state")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the monitored instance.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the MonitoredInstance was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the MonitoredInstance was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")


