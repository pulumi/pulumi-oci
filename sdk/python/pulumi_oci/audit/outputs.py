# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetEventsAuditEventResult',
    'GetEventsAuditEventDataResult',
    'GetEventsAuditEventDataIdentityResult',
    'GetEventsAuditEventDataRequestResult',
    'GetEventsAuditEventDataResponseResult',
    'GetEventsAuditEventDataStateChangeResult',
    'GetEventsFilterResult',
]

@pulumi.output_type
class GetEventsAuditEventResult(dict):
    def __init__(__self__, *,
                 cloud_events_version: Optional[str] = None,
                 content_type: Optional[str] = None,
                 datas: Optional[Sequence['outputs.GetEventsAuditEventDataResult']] = None,
                 event_id: Optional[str] = None,
                 event_time: Optional[str] = None,
                 event_type: Optional[str] = None,
                 event_type_version: Optional[str] = None,
                 source: Optional[str] = None):
        if cloud_events_version is not None:
            pulumi.set(__self__, "cloud_events_version", cloud_events_version)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if event_id is not None:
            pulumi.set(__self__, "event_id", event_id)
        if event_time is not None:
            pulumi.set(__self__, "event_time", event_time)
        if event_type is not None:
            pulumi.set(__self__, "event_type", event_type)
        if event_type_version is not None:
            pulumi.set(__self__, "event_type_version", event_type_version)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="cloudEventsVersion")
    def cloud_events_version(self) -> Optional[str]:
        return pulumi.get(self, "cloud_events_version")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def datas(self) -> Optional[Sequence['outputs.GetEventsAuditEventDataResult']]:
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> Optional[str]:
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="eventTime")
    def event_time(self) -> Optional[str]:
        return pulumi.get(self, "event_time")

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> Optional[str]:
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter(name="eventTypeVersion")
    def event_type_version(self) -> Optional[str]:
        return pulumi.get(self, "event_type_version")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")


@pulumi.output_type
class GetEventsAuditEventDataResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 compartment_name: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 event_grouping_id: Optional[str] = None,
                 event_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 identities: Optional[Sequence['outputs.GetEventsAuditEventDataIdentityResult']] = None,
                 requests: Optional[Sequence['outputs.GetEventsAuditEventDataRequestResult']] = None,
                 resource_id: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 responses: Optional[Sequence['outputs.GetEventsAuditEventDataResponseResult']] = None,
                 state_changes: Optional[Sequence['outputs.GetEventsAuditEventDataStateChangeResult']] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compartment_name is not None:
            pulumi.set(__self__, "compartment_name", compartment_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if event_grouping_id is not None:
            pulumi.set(__self__, "event_grouping_id", event_grouping_id)
        if event_name is not None:
            pulumi.set(__self__, "event_name", event_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if identities is not None:
            pulumi.set(__self__, "identities", identities)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if responses is not None:
            pulumi.set(__self__, "responses", responses)
        if state_changes is not None:
            pulumi.set(__self__, "state_changes", state_changes)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compartmentName")
    def compartment_name(self) -> Optional[str]:
        return pulumi.get(self, "compartment_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="eventGroupingId")
    def event_grouping_id(self) -> Optional[str]:
        return pulumi.get(self, "event_grouping_id")

    @property
    @pulumi.getter(name="eventName")
    def event_name(self) -> Optional[str]:
        return pulumi.get(self, "event_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def identities(self) -> Optional[Sequence['outputs.GetEventsAuditEventDataIdentityResult']]:
        return pulumi.get(self, "identities")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.GetEventsAuditEventDataRequestResult']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def responses(self) -> Optional[Sequence['outputs.GetEventsAuditEventDataResponseResult']]:
        return pulumi.get(self, "responses")

    @property
    @pulumi.getter(name="stateChanges")
    def state_changes(self) -> Optional[Sequence['outputs.GetEventsAuditEventDataStateChangeResult']]:
        return pulumi.get(self, "state_changes")


@pulumi.output_type
class GetEventsAuditEventDataIdentityResult(dict):
    def __init__(__self__, *,
                 auth_type: Optional[str] = None,
                 caller_id: Optional[str] = None,
                 caller_name: Optional[str] = None,
                 console_session_id: Optional[str] = None,
                 credentials: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 principal_id: Optional[str] = None,
                 principal_name: Optional[str] = None,
                 tenant_id: Optional[str] = None,
                 user_agent: Optional[str] = None):
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if caller_id is not None:
            pulumi.set(__self__, "caller_id", caller_id)
        if caller_name is not None:
            pulumi.set(__self__, "caller_name", caller_name)
        if console_session_id is not None:
            pulumi.set(__self__, "console_session_id", console_session_id)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if principal_name is not None:
            pulumi.set(__self__, "principal_name", principal_name)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="callerId")
    def caller_id(self) -> Optional[str]:
        return pulumi.get(self, "caller_id")

    @property
    @pulumi.getter(name="callerName")
    def caller_name(self) -> Optional[str]:
        return pulumi.get(self, "caller_name")

    @property
    @pulumi.getter(name="consoleSessionId")
    def console_session_id(self) -> Optional[str]:
        return pulumi.get(self, "console_session_id")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[str]:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> Optional[str]:
        return pulumi.get(self, "principal_name")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[str]:
        return pulumi.get(self, "user_agent")


@pulumi.output_type
class GetEventsAuditEventDataRequestResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 headers: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 parameters: Optional[Mapping[str, Any]] = None,
                 path: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetEventsAuditEventDataResponseResult(dict):
    def __init__(__self__, *,
                 headers: Optional[Mapping[str, Any]] = None,
                 message: Optional[str] = None,
                 payload: Optional[Mapping[str, Any]] = None,
                 response_time: Optional[str] = None,
                 status: Optional[str] = None):
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)
        if response_time is not None:
            pulumi.set(__self__, "response_time", response_time)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def headers(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def payload(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "payload")

    @property
    @pulumi.getter(name="responseTime")
    def response_time(self) -> Optional[str]:
        return pulumi.get(self, "response_time")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetEventsAuditEventDataStateChangeResult(dict):
    def __init__(__self__, *,
                 current: Optional[Mapping[str, Any]] = None,
                 previous: Optional[Mapping[str, Any]] = None):
        if current is not None:
            pulumi.set(__self__, "current", current)
        if previous is not None:
            pulumi.set(__self__, "previous", previous)

    @property
    @pulumi.getter
    def current(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "current")

    @property
    @pulumi.getter
    def previous(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "previous")


@pulumi.output_type
class GetEventsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


