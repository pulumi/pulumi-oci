# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAutoScalingConfigurationResult',
    'AwaitableGetAutoScalingConfigurationResult',
    'get_auto_scaling_configuration',
    'get_auto_scaling_configuration_output',
]

@pulumi.output_type
class GetAutoScalingConfigurationResult:
    """
    A collection of values returned by getAutoScalingConfiguration.
    """
    def __init__(__self__, auto_scaling_configuration_id=None, auto_scaling_resources=None, compartment_id=None, cool_down_in_seconds=None, defined_tags=None, display_name=None, freeform_tags=None, id=None, is_enabled=None, max_resource_count=None, min_resource_count=None, policies=None, time_created=None):
        if auto_scaling_configuration_id and not isinstance(auto_scaling_configuration_id, str):
            raise TypeError("Expected argument 'auto_scaling_configuration_id' to be a str")
        pulumi.set(__self__, "auto_scaling_configuration_id", auto_scaling_configuration_id)
        if auto_scaling_resources and not isinstance(auto_scaling_resources, list):
            raise TypeError("Expected argument 'auto_scaling_resources' to be a list")
        pulumi.set(__self__, "auto_scaling_resources", auto_scaling_resources)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if cool_down_in_seconds and not isinstance(cool_down_in_seconds, int):
            raise TypeError("Expected argument 'cool_down_in_seconds' to be a int")
        pulumi.set(__self__, "cool_down_in_seconds", cool_down_in_seconds)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_enabled and not isinstance(is_enabled, bool):
            raise TypeError("Expected argument 'is_enabled' to be a bool")
        pulumi.set(__self__, "is_enabled", is_enabled)
        if max_resource_count and not isinstance(max_resource_count, int):
            raise TypeError("Expected argument 'max_resource_count' to be a int")
        pulumi.set(__self__, "max_resource_count", max_resource_count)
        if min_resource_count and not isinstance(min_resource_count, int):
            raise TypeError("Expected argument 'min_resource_count' to be a int")
        pulumi.set(__self__, "min_resource_count", min_resource_count)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="autoScalingConfigurationId")
    def auto_scaling_configuration_id(self) -> str:
        return pulumi.get(self, "auto_scaling_configuration_id")

    @property
    @pulumi.getter(name="autoScalingResources")
    def auto_scaling_resources(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationAutoScalingResourceResult']]:
        return pulumi.get(self, "auto_scaling_resources")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="coolDownInSeconds")
    def cool_down_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "cool_down_in_seconds")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="maxResourceCount")
    def max_resource_count(self) -> Optional[int]:
        return pulumi.get(self, "max_resource_count")

    @property
    @pulumi.getter(name="minResourceCount")
    def min_resource_count(self) -> Optional[int]:
        return pulumi.get(self, "min_resource_count")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyResult']]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


class AwaitableGetAutoScalingConfigurationResult(GetAutoScalingConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutoScalingConfigurationResult(
            auto_scaling_configuration_id=self.auto_scaling_configuration_id,
            auto_scaling_resources=self.auto_scaling_resources,
            compartment_id=self.compartment_id,
            cool_down_in_seconds=self.cool_down_in_seconds,
            defined_tags=self.defined_tags,
            display_name=self.display_name,
            freeform_tags=self.freeform_tags,
            id=self.id,
            is_enabled=self.is_enabled,
            max_resource_count=self.max_resource_count,
            min_resource_count=self.min_resource_count,
            policies=self.policies,
            time_created=self.time_created)


def get_auto_scaling_configuration(auto_scaling_configuration_id: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutoScalingConfigurationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['autoScalingConfigurationId'] = auto_scaling_configuration_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Autoscaling/getAutoScalingConfiguration:getAutoScalingConfiguration', __args__, opts=opts, typ=GetAutoScalingConfigurationResult).value

    return AwaitableGetAutoScalingConfigurationResult(
        auto_scaling_configuration_id=pulumi.get(__ret__, 'auto_scaling_configuration_id'),
        auto_scaling_resources=pulumi.get(__ret__, 'auto_scaling_resources'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        cool_down_in_seconds=pulumi.get(__ret__, 'cool_down_in_seconds'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        display_name=pulumi.get(__ret__, 'display_name'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        id=pulumi.get(__ret__, 'id'),
        is_enabled=pulumi.get(__ret__, 'is_enabled'),
        max_resource_count=pulumi.get(__ret__, 'max_resource_count'),
        min_resource_count=pulumi.get(__ret__, 'min_resource_count'),
        policies=pulumi.get(__ret__, 'policies'),
        time_created=pulumi.get(__ret__, 'time_created'))


@_utilities.lift_output_func(get_auto_scaling_configuration)
def get_auto_scaling_configuration_output(auto_scaling_configuration_id: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAutoScalingConfigurationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
