# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'SessionKeyDetails',
    'SessionTargetResourceDetails',
    'GetBastionsBastionResult',
    'GetBastionsFilterResult',
    'GetSessionKeyDetailResult',
    'GetSessionTargetResourceDetailResult',
    'GetSessionsFilterResult',
    'GetSessionsSessionResult',
    'GetSessionsSessionKeyDetailResult',
    'GetSessionsSessionTargetResourceDetailResult',
]

@pulumi.output_type
class SessionKeyDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicKeyContent":
            suggest = "public_key_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SessionKeyDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SessionKeyDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SessionKeyDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_key_content: str):
        pulumi.set(__self__, "public_key_content", public_key_content)

    @property
    @pulumi.getter(name="publicKeyContent")
    def public_key_content(self) -> str:
        return pulumi.get(self, "public_key_content")


@pulumi.output_type
class SessionTargetResourceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sessionType":
            suggest = "session_type"
        elif key == "targetResourceDisplayName":
            suggest = "target_resource_display_name"
        elif key == "targetResourceFqdn":
            suggest = "target_resource_fqdn"
        elif key == "targetResourceId":
            suggest = "target_resource_id"
        elif key == "targetResourceOperatingSystemUserName":
            suggest = "target_resource_operating_system_user_name"
        elif key == "targetResourcePort":
            suggest = "target_resource_port"
        elif key == "targetResourcePrivateIpAddress":
            suggest = "target_resource_private_ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SessionTargetResourceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SessionTargetResourceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SessionTargetResourceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 session_type: str,
                 target_resource_display_name: Optional[str] = None,
                 target_resource_fqdn: Optional[str] = None,
                 target_resource_id: Optional[str] = None,
                 target_resource_operating_system_user_name: Optional[str] = None,
                 target_resource_port: Optional[int] = None,
                 target_resource_private_ip_address: Optional[str] = None):
        pulumi.set(__self__, "session_type", session_type)
        if target_resource_display_name is not None:
            pulumi.set(__self__, "target_resource_display_name", target_resource_display_name)
        if target_resource_fqdn is not None:
            pulumi.set(__self__, "target_resource_fqdn", target_resource_fqdn)
        if target_resource_id is not None:
            pulumi.set(__self__, "target_resource_id", target_resource_id)
        if target_resource_operating_system_user_name is not None:
            pulumi.set(__self__, "target_resource_operating_system_user_name", target_resource_operating_system_user_name)
        if target_resource_port is not None:
            pulumi.set(__self__, "target_resource_port", target_resource_port)
        if target_resource_private_ip_address is not None:
            pulumi.set(__self__, "target_resource_private_ip_address", target_resource_private_ip_address)

    @property
    @pulumi.getter(name="sessionType")
    def session_type(self) -> str:
        return pulumi.get(self, "session_type")

    @property
    @pulumi.getter(name="targetResourceDisplayName")
    def target_resource_display_name(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_display_name")

    @property
    @pulumi.getter(name="targetResourceFqdn")
    def target_resource_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_fqdn")

    @property
    @pulumi.getter(name="targetResourceId")
    def target_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_id")

    @property
    @pulumi.getter(name="targetResourceOperatingSystemUserName")
    def target_resource_operating_system_user_name(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_operating_system_user_name")

    @property
    @pulumi.getter(name="targetResourcePort")
    def target_resource_port(self) -> Optional[int]:
        return pulumi.get(self, "target_resource_port")

    @property
    @pulumi.getter(name="targetResourcePrivateIpAddress")
    def target_resource_private_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_private_ip_address")


@pulumi.output_type
class GetBastionsBastionResult(dict):
    def __init__(__self__, *,
                 bastion_type: Optional[str] = None,
                 client_cidr_block_allow_lists: Optional[Sequence[str]] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 dns_proxy_status: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 max_session_ttl_in_seconds: Optional[int] = None,
                 max_sessions_allowed: Optional[int] = None,
                 name: Optional[str] = None,
                 phone_book_entry: Optional[str] = None,
                 private_endpoint_ip_address: Optional[str] = None,
                 state: Optional[str] = None,
                 static_jump_host_ip_addresses: Optional[Sequence[str]] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_subnet_id: Optional[str] = None,
                 target_vcn_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if bastion_type is not None:
            pulumi.set(__self__, "bastion_type", bastion_type)
        if client_cidr_block_allow_lists is not None:
            pulumi.set(__self__, "client_cidr_block_allow_lists", client_cidr_block_allow_lists)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if dns_proxy_status is not None:
            pulumi.set(__self__, "dns_proxy_status", dns_proxy_status)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if max_session_ttl_in_seconds is not None:
            pulumi.set(__self__, "max_session_ttl_in_seconds", max_session_ttl_in_seconds)
        if max_sessions_allowed is not None:
            pulumi.set(__self__, "max_sessions_allowed", max_sessions_allowed)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone_book_entry is not None:
            pulumi.set(__self__, "phone_book_entry", phone_book_entry)
        if private_endpoint_ip_address is not None:
            pulumi.set(__self__, "private_endpoint_ip_address", private_endpoint_ip_address)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if static_jump_host_ip_addresses is not None:
            pulumi.set(__self__, "static_jump_host_ip_addresses", static_jump_host_ip_addresses)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_subnet_id is not None:
            pulumi.set(__self__, "target_subnet_id", target_subnet_id)
        if target_vcn_id is not None:
            pulumi.set(__self__, "target_vcn_id", target_vcn_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="bastionType")
    def bastion_type(self) -> Optional[str]:
        return pulumi.get(self, "bastion_type")

    @property
    @pulumi.getter(name="clientCidrBlockAllowLists")
    def client_cidr_block_allow_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "client_cidr_block_allow_lists")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="dnsProxyStatus")
    def dns_proxy_status(self) -> Optional[str]:
        return pulumi.get(self, "dns_proxy_status")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="maxSessionTtlInSeconds")
    def max_session_ttl_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "max_session_ttl_in_seconds")

    @property
    @pulumi.getter(name="maxSessionsAllowed")
    def max_sessions_allowed(self) -> Optional[int]:
        return pulumi.get(self, "max_sessions_allowed")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="phoneBookEntry")
    def phone_book_entry(self) -> Optional[str]:
        return pulumi.get(self, "phone_book_entry")

    @property
    @pulumi.getter(name="privateEndpointIpAddress")
    def private_endpoint_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_ip_address")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="staticJumpHostIpAddresses")
    def static_jump_host_ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "static_jump_host_ip_addresses")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetSubnetId")
    def target_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "target_subnet_id")

    @property
    @pulumi.getter(name="targetVcnId")
    def target_vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "target_vcn_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetBastionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSessionKeyDetailResult(dict):
    def __init__(__self__, *,
                 public_key_content: Optional[str] = None):
        if public_key_content is not None:
            pulumi.set(__self__, "public_key_content", public_key_content)

    @property
    @pulumi.getter(name="publicKeyContent")
    def public_key_content(self) -> Optional[str]:
        return pulumi.get(self, "public_key_content")


@pulumi.output_type
class GetSessionTargetResourceDetailResult(dict):
    def __init__(__self__, *,
                 session_type: Optional[str] = None,
                 target_resource_display_name: Optional[str] = None,
                 target_resource_fqdn: Optional[str] = None,
                 target_resource_id: Optional[str] = None,
                 target_resource_operating_system_user_name: Optional[str] = None,
                 target_resource_port: Optional[int] = None,
                 target_resource_private_ip_address: Optional[str] = None):
        if session_type is not None:
            pulumi.set(__self__, "session_type", session_type)
        if target_resource_display_name is not None:
            pulumi.set(__self__, "target_resource_display_name", target_resource_display_name)
        if target_resource_fqdn is not None:
            pulumi.set(__self__, "target_resource_fqdn", target_resource_fqdn)
        if target_resource_id is not None:
            pulumi.set(__self__, "target_resource_id", target_resource_id)
        if target_resource_operating_system_user_name is not None:
            pulumi.set(__self__, "target_resource_operating_system_user_name", target_resource_operating_system_user_name)
        if target_resource_port is not None:
            pulumi.set(__self__, "target_resource_port", target_resource_port)
        if target_resource_private_ip_address is not None:
            pulumi.set(__self__, "target_resource_private_ip_address", target_resource_private_ip_address)

    @property
    @pulumi.getter(name="sessionType")
    def session_type(self) -> Optional[str]:
        return pulumi.get(self, "session_type")

    @property
    @pulumi.getter(name="targetResourceDisplayName")
    def target_resource_display_name(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_display_name")

    @property
    @pulumi.getter(name="targetResourceFqdn")
    def target_resource_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_fqdn")

    @property
    @pulumi.getter(name="targetResourceId")
    def target_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_id")

    @property
    @pulumi.getter(name="targetResourceOperatingSystemUserName")
    def target_resource_operating_system_user_name(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_operating_system_user_name")

    @property
    @pulumi.getter(name="targetResourcePort")
    def target_resource_port(self) -> Optional[int]:
        return pulumi.get(self, "target_resource_port")

    @property
    @pulumi.getter(name="targetResourcePrivateIpAddress")
    def target_resource_private_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_private_ip_address")


@pulumi.output_type
class GetSessionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSessionsSessionResult(dict):
    def __init__(__self__, *,
                 bastion_id: Optional[str] = None,
                 bastion_name: Optional[str] = None,
                 bastion_public_host_key_info: Optional[str] = None,
                 bastion_user_name: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 key_details: Optional[Sequence['outputs.GetSessionsSessionKeyDetailResult']] = None,
                 key_type: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 session_ttl_in_seconds: Optional[int] = None,
                 ssh_metadata: Optional[Mapping[str, Any]] = None,
                 state: Optional[str] = None,
                 target_resource_details: Optional[Sequence['outputs.GetSessionsSessionTargetResourceDetailResult']] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if bastion_id is not None:
            pulumi.set(__self__, "bastion_id", bastion_id)
        if bastion_name is not None:
            pulumi.set(__self__, "bastion_name", bastion_name)
        if bastion_public_host_key_info is not None:
            pulumi.set(__self__, "bastion_public_host_key_info", bastion_public_host_key_info)
        if bastion_user_name is not None:
            pulumi.set(__self__, "bastion_user_name", bastion_user_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_details is not None:
            pulumi.set(__self__, "key_details", key_details)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if session_ttl_in_seconds is not None:
            pulumi.set(__self__, "session_ttl_in_seconds", session_ttl_in_seconds)
        if ssh_metadata is not None:
            pulumi.set(__self__, "ssh_metadata", ssh_metadata)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if target_resource_details is not None:
            pulumi.set(__self__, "target_resource_details", target_resource_details)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="bastionId")
    def bastion_id(self) -> Optional[str]:
        return pulumi.get(self, "bastion_id")

    @property
    @pulumi.getter(name="bastionName")
    def bastion_name(self) -> Optional[str]:
        return pulumi.get(self, "bastion_name")

    @property
    @pulumi.getter(name="bastionPublicHostKeyInfo")
    def bastion_public_host_key_info(self) -> Optional[str]:
        return pulumi.get(self, "bastion_public_host_key_info")

    @property
    @pulumi.getter(name="bastionUserName")
    def bastion_user_name(self) -> Optional[str]:
        return pulumi.get(self, "bastion_user_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyDetails")
    def key_details(self) -> Optional[Sequence['outputs.GetSessionsSessionKeyDetailResult']]:
        return pulumi.get(self, "key_details")

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[str]:
        return pulumi.get(self, "key_type")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="sessionTtlInSeconds")
    def session_ttl_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "session_ttl_in_seconds")

    @property
    @pulumi.getter(name="sshMetadata")
    def ssh_metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "ssh_metadata")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetResourceDetails")
    def target_resource_details(self) -> Optional[Sequence['outputs.GetSessionsSessionTargetResourceDetailResult']]:
        return pulumi.get(self, "target_resource_details")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSessionsSessionKeyDetailResult(dict):
    def __init__(__self__, *,
                 public_key_content: Optional[str] = None):
        if public_key_content is not None:
            pulumi.set(__self__, "public_key_content", public_key_content)

    @property
    @pulumi.getter(name="publicKeyContent")
    def public_key_content(self) -> Optional[str]:
        return pulumi.get(self, "public_key_content")


@pulumi.output_type
class GetSessionsSessionTargetResourceDetailResult(dict):
    def __init__(__self__, *,
                 session_type: Optional[str] = None,
                 target_resource_display_name: Optional[str] = None,
                 target_resource_fqdn: Optional[str] = None,
                 target_resource_id: Optional[str] = None,
                 target_resource_operating_system_user_name: Optional[str] = None,
                 target_resource_port: Optional[int] = None,
                 target_resource_private_ip_address: Optional[str] = None):
        if session_type is not None:
            pulumi.set(__self__, "session_type", session_type)
        if target_resource_display_name is not None:
            pulumi.set(__self__, "target_resource_display_name", target_resource_display_name)
        if target_resource_fqdn is not None:
            pulumi.set(__self__, "target_resource_fqdn", target_resource_fqdn)
        if target_resource_id is not None:
            pulumi.set(__self__, "target_resource_id", target_resource_id)
        if target_resource_operating_system_user_name is not None:
            pulumi.set(__self__, "target_resource_operating_system_user_name", target_resource_operating_system_user_name)
        if target_resource_port is not None:
            pulumi.set(__self__, "target_resource_port", target_resource_port)
        if target_resource_private_ip_address is not None:
            pulumi.set(__self__, "target_resource_private_ip_address", target_resource_private_ip_address)

    @property
    @pulumi.getter(name="sessionType")
    def session_type(self) -> Optional[str]:
        return pulumi.get(self, "session_type")

    @property
    @pulumi.getter(name="targetResourceDisplayName")
    def target_resource_display_name(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_display_name")

    @property
    @pulumi.getter(name="targetResourceFqdn")
    def target_resource_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_fqdn")

    @property
    @pulumi.getter(name="targetResourceId")
    def target_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_id")

    @property
    @pulumi.getter(name="targetResourceOperatingSystemUserName")
    def target_resource_operating_system_user_name(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_operating_system_user_name")

    @property
    @pulumi.getter(name="targetResourcePort")
    def target_resource_port(self) -> Optional[int]:
        return pulumi.get(self, "target_resource_port")

    @property
    @pulumi.getter(name="targetResourcePrivateIpAddress")
    def target_resource_private_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_private_ip_address")


