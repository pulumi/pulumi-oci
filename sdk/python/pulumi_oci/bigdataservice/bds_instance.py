# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BdsInstanceArgs', 'BdsInstance']

@pulumi.input_type
class BdsInstanceArgs:
    def __init__(__self__, *,
                 cluster_admin_password: pulumi.Input[str],
                 cluster_public_key: pulumi.Input[str],
                 cluster_version: pulumi.Input[str],
                 compartment_id: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 is_high_availability: pulumi.Input[bool],
                 is_secure: pulumi.Input[bool],
                 master_node: pulumi.Input['BdsInstanceMasterNodeArgs'],
                 util_node: pulumi.Input['BdsInstanceUtilNodeArgs'],
                 worker_node: pulumi.Input['BdsInstanceWorkerNodeArgs'],
                 cloud_sql_details: Optional[pulumi.Input[Sequence[pulumi.Input['BdsInstanceCloudSqlDetailArgs']]]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_cloud_sql_configured: Optional[pulumi.Input[bool]] = None,
                 network_config: Optional[pulumi.Input['BdsInstanceNetworkConfigArgs']] = None):
        """
        The set of arguments for constructing a BdsInstance resource.
        :param pulumi.Input[str] cluster_admin_password: Base-64 encoded password for the cluster (and Cloudera Manager) admin user.
        :param pulumi.Input[str] cluster_public_key: The SSH public key used to authenticate the cluster connection.
        :param pulumi.Input[str] cluster_version: Version of the Hadoop distribution.
        :param pulumi.Input[str] compartment_id: (Updatable) The OCID of the compartment.
        :param pulumi.Input[str] display_name: (Updatable) Name of the Big Data Service cluster.
        :param pulumi.Input[bool] is_high_availability: Boolean flag specifying whether or not the cluster is highly available (HA).
        :param pulumi.Input[bool] is_secure: Boolean flag specifying whether or not the cluster should be set up as secure.
        :param pulumi.Input[Sequence[pulumi.Input['BdsInstanceCloudSqlDetailArgs']]] cloud_sql_details: The information about added Cloud SQL capability
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example, `{"foo-namespace": {"bar-key": "value"}}`
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. For example, `{"bar-key": "value"}`
        :param pulumi.Input[bool] is_cloud_sql_configured: Boolean flag specifying whether or not Cloud SQL should be configured.
        :param pulumi.Input['BdsInstanceNetworkConfigArgs'] network_config: Additional configuration of the user's network.
        """
        pulumi.set(__self__, "cluster_admin_password", cluster_admin_password)
        pulumi.set(__self__, "cluster_public_key", cluster_public_key)
        pulumi.set(__self__, "cluster_version", cluster_version)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "is_high_availability", is_high_availability)
        pulumi.set(__self__, "is_secure", is_secure)
        pulumi.set(__self__, "master_node", master_node)
        pulumi.set(__self__, "util_node", util_node)
        pulumi.set(__self__, "worker_node", worker_node)
        if cloud_sql_details is not None:
            pulumi.set(__self__, "cloud_sql_details", cloud_sql_details)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_cloud_sql_configured is not None:
            pulumi.set(__self__, "is_cloud_sql_configured", is_cloud_sql_configured)
        if network_config is not None:
            pulumi.set(__self__, "network_config", network_config)

    @property
    @pulumi.getter(name="clusterAdminPassword")
    def cluster_admin_password(self) -> pulumi.Input[str]:
        """
        Base-64 encoded password for the cluster (and Cloudera Manager) admin user.
        """
        return pulumi.get(self, "cluster_admin_password")

    @cluster_admin_password.setter
    def cluster_admin_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_admin_password", value)

    @property
    @pulumi.getter(name="clusterPublicKey")
    def cluster_public_key(self) -> pulumi.Input[str]:
        """
        The SSH public key used to authenticate the cluster connection.
        """
        return pulumi.get(self, "cluster_public_key")

    @cluster_public_key.setter
    def cluster_public_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_public_key", value)

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> pulumi.Input[str]:
        """
        Version of the Hadoop distribution.
        """
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_version", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        (Updatable) The OCID of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        (Updatable) Name of the Big Data Service cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="isHighAvailability")
    def is_high_availability(self) -> pulumi.Input[bool]:
        """
        Boolean flag specifying whether or not the cluster is highly available (HA).
        """
        return pulumi.get(self, "is_high_availability")

    @is_high_availability.setter
    def is_high_availability(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_high_availability", value)

    @property
    @pulumi.getter(name="isSecure")
    def is_secure(self) -> pulumi.Input[bool]:
        """
        Boolean flag specifying whether or not the cluster should be set up as secure.
        """
        return pulumi.get(self, "is_secure")

    @is_secure.setter
    def is_secure(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_secure", value)

    @property
    @pulumi.getter(name="masterNode")
    def master_node(self) -> pulumi.Input['BdsInstanceMasterNodeArgs']:
        return pulumi.get(self, "master_node")

    @master_node.setter
    def master_node(self, value: pulumi.Input['BdsInstanceMasterNodeArgs']):
        pulumi.set(self, "master_node", value)

    @property
    @pulumi.getter(name="utilNode")
    def util_node(self) -> pulumi.Input['BdsInstanceUtilNodeArgs']:
        return pulumi.get(self, "util_node")

    @util_node.setter
    def util_node(self, value: pulumi.Input['BdsInstanceUtilNodeArgs']):
        pulumi.set(self, "util_node", value)

    @property
    @pulumi.getter(name="workerNode")
    def worker_node(self) -> pulumi.Input['BdsInstanceWorkerNodeArgs']:
        return pulumi.get(self, "worker_node")

    @worker_node.setter
    def worker_node(self, value: pulumi.Input['BdsInstanceWorkerNodeArgs']):
        pulumi.set(self, "worker_node", value)

    @property
    @pulumi.getter(name="cloudSqlDetails")
    def cloud_sql_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BdsInstanceCloudSqlDetailArgs']]]]:
        """
        The information about added Cloud SQL capability
        """
        return pulumi.get(self, "cloud_sql_details")

    @cloud_sql_details.setter
    def cloud_sql_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BdsInstanceCloudSqlDetailArgs']]]]):
        pulumi.set(self, "cloud_sql_details", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example, `{"foo-namespace": {"bar-key": "value"}}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. For example, `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isCloudSqlConfigured")
    def is_cloud_sql_configured(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean flag specifying whether or not Cloud SQL should be configured.
        """
        return pulumi.get(self, "is_cloud_sql_configured")

    @is_cloud_sql_configured.setter
    def is_cloud_sql_configured(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_cloud_sql_configured", value)

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> Optional[pulumi.Input['BdsInstanceNetworkConfigArgs']]:
        """
        Additional configuration of the user's network.
        """
        return pulumi.get(self, "network_config")

    @network_config.setter
    def network_config(self, value: Optional[pulumi.Input['BdsInstanceNetworkConfigArgs']]):
        pulumi.set(self, "network_config", value)


@pulumi.input_type
class _BdsInstanceState:
    def __init__(__self__, *,
                 cloud_sql_details: Optional[pulumi.Input[Sequence[pulumi.Input['BdsInstanceCloudSqlDetailArgs']]]] = None,
                 cluster_admin_password: Optional[pulumi.Input[str]] = None,
                 cluster_details: Optional[pulumi.Input[Sequence[pulumi.Input['BdsInstanceClusterDetailArgs']]]] = None,
                 cluster_public_key: Optional[pulumi.Input[str]] = None,
                 cluster_version: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_cloud_sql_configured: Optional[pulumi.Input[bool]] = None,
                 is_high_availability: Optional[pulumi.Input[bool]] = None,
                 is_secure: Optional[pulumi.Input[bool]] = None,
                 master_node: Optional[pulumi.Input['BdsInstanceMasterNodeArgs']] = None,
                 network_config: Optional[pulumi.Input['BdsInstanceNetworkConfigArgs']] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['BdsInstanceNodeArgs']]]] = None,
                 number_of_nodes: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 util_node: Optional[pulumi.Input['BdsInstanceUtilNodeArgs']] = None,
                 worker_node: Optional[pulumi.Input['BdsInstanceWorkerNodeArgs']] = None):
        """
        Input properties used for looking up and filtering BdsInstance resources.
        :param pulumi.Input[Sequence[pulumi.Input['BdsInstanceCloudSqlDetailArgs']]] cloud_sql_details: The information about added Cloud SQL capability
        :param pulumi.Input[str] cluster_admin_password: Base-64 encoded password for the cluster (and Cloudera Manager) admin user.
        :param pulumi.Input[Sequence[pulumi.Input['BdsInstanceClusterDetailArgs']]] cluster_details: Specific info about a Hadoop cluster
        :param pulumi.Input[str] cluster_public_key: The SSH public key used to authenticate the cluster connection.
        :param pulumi.Input[str] cluster_version: Version of the Hadoop distribution.
        :param pulumi.Input[str] compartment_id: (Updatable) The OCID of the compartment.
        :param pulumi.Input[str] created_by: The user who created the cluster.
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example, `{"foo-namespace": {"bar-key": "value"}}`
        :param pulumi.Input[str] display_name: (Updatable) Name of the Big Data Service cluster.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. For example, `{"bar-key": "value"}`
        :param pulumi.Input[bool] is_cloud_sql_configured: Boolean flag specifying whether or not Cloud SQL should be configured.
        :param pulumi.Input[bool] is_high_availability: Boolean flag specifying whether or not the cluster is highly available (HA).
        :param pulumi.Input[bool] is_secure: Boolean flag specifying whether or not the cluster should be set up as secure.
        :param pulumi.Input['BdsInstanceNetworkConfigArgs'] network_config: Additional configuration of the user's network.
        :param pulumi.Input[Sequence[pulumi.Input['BdsInstanceNodeArgs']]] nodes: The list of nodes in the Big Data Service cluster.
        :param pulumi.Input[int] number_of_nodes: The number of nodes that form the cluster.
        :param pulumi.Input[str] state: The state of the cluster.
        :param pulumi.Input[str] time_created: The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        :param pulumi.Input[str] time_updated: The time the cluster was updated, shown as an RFC 3339 formatted datetime string.
        """
        if cloud_sql_details is not None:
            pulumi.set(__self__, "cloud_sql_details", cloud_sql_details)
        if cluster_admin_password is not None:
            pulumi.set(__self__, "cluster_admin_password", cluster_admin_password)
        if cluster_details is not None:
            pulumi.set(__self__, "cluster_details", cluster_details)
        if cluster_public_key is not None:
            pulumi.set(__self__, "cluster_public_key", cluster_public_key)
        if cluster_version is not None:
            pulumi.set(__self__, "cluster_version", cluster_version)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_cloud_sql_configured is not None:
            pulumi.set(__self__, "is_cloud_sql_configured", is_cloud_sql_configured)
        if is_high_availability is not None:
            pulumi.set(__self__, "is_high_availability", is_high_availability)
        if is_secure is not None:
            pulumi.set(__self__, "is_secure", is_secure)
        if master_node is not None:
            pulumi.set(__self__, "master_node", master_node)
        if network_config is not None:
            pulumi.set(__self__, "network_config", network_config)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if number_of_nodes is not None:
            pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if util_node is not None:
            pulumi.set(__self__, "util_node", util_node)
        if worker_node is not None:
            pulumi.set(__self__, "worker_node", worker_node)

    @property
    @pulumi.getter(name="cloudSqlDetails")
    def cloud_sql_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BdsInstanceCloudSqlDetailArgs']]]]:
        """
        The information about added Cloud SQL capability
        """
        return pulumi.get(self, "cloud_sql_details")

    @cloud_sql_details.setter
    def cloud_sql_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BdsInstanceCloudSqlDetailArgs']]]]):
        pulumi.set(self, "cloud_sql_details", value)

    @property
    @pulumi.getter(name="clusterAdminPassword")
    def cluster_admin_password(self) -> Optional[pulumi.Input[str]]:
        """
        Base-64 encoded password for the cluster (and Cloudera Manager) admin user.
        """
        return pulumi.get(self, "cluster_admin_password")

    @cluster_admin_password.setter
    def cluster_admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_admin_password", value)

    @property
    @pulumi.getter(name="clusterDetails")
    def cluster_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BdsInstanceClusterDetailArgs']]]]:
        """
        Specific info about a Hadoop cluster
        """
        return pulumi.get(self, "cluster_details")

    @cluster_details.setter
    def cluster_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BdsInstanceClusterDetailArgs']]]]):
        pulumi.set(self, "cluster_details", value)

    @property
    @pulumi.getter(name="clusterPublicKey")
    def cluster_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        The SSH public key used to authenticate the cluster connection.
        """
        return pulumi.get(self, "cluster_public_key")

    @cluster_public_key.setter
    def cluster_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_public_key", value)

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the Hadoop distribution.
        """
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_version", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user who created the cluster.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example, `{"foo-namespace": {"bar-key": "value"}}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Name of the Big Data Service cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. For example, `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isCloudSqlConfigured")
    def is_cloud_sql_configured(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean flag specifying whether or not Cloud SQL should be configured.
        """
        return pulumi.get(self, "is_cloud_sql_configured")

    @is_cloud_sql_configured.setter
    def is_cloud_sql_configured(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_cloud_sql_configured", value)

    @property
    @pulumi.getter(name="isHighAvailability")
    def is_high_availability(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean flag specifying whether or not the cluster is highly available (HA).
        """
        return pulumi.get(self, "is_high_availability")

    @is_high_availability.setter
    def is_high_availability(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_high_availability", value)

    @property
    @pulumi.getter(name="isSecure")
    def is_secure(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean flag specifying whether or not the cluster should be set up as secure.
        """
        return pulumi.get(self, "is_secure")

    @is_secure.setter
    def is_secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_secure", value)

    @property
    @pulumi.getter(name="masterNode")
    def master_node(self) -> Optional[pulumi.Input['BdsInstanceMasterNodeArgs']]:
        return pulumi.get(self, "master_node")

    @master_node.setter
    def master_node(self, value: Optional[pulumi.Input['BdsInstanceMasterNodeArgs']]):
        pulumi.set(self, "master_node", value)

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> Optional[pulumi.Input['BdsInstanceNetworkConfigArgs']]:
        """
        Additional configuration of the user's network.
        """
        return pulumi.get(self, "network_config")

    @network_config.setter
    def network_config(self, value: Optional[pulumi.Input['BdsInstanceNetworkConfigArgs']]):
        pulumi.set(self, "network_config", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BdsInstanceNodeArgs']]]]:
        """
        The list of nodes in the Big Data Service cluster.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BdsInstanceNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes that form the cluster.
        """
        return pulumi.get(self, "number_of_nodes")

    @number_of_nodes.setter
    def number_of_nodes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_nodes", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The state of the cluster.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The time the cluster was updated, shown as an RFC 3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="utilNode")
    def util_node(self) -> Optional[pulumi.Input['BdsInstanceUtilNodeArgs']]:
        return pulumi.get(self, "util_node")

    @util_node.setter
    def util_node(self, value: Optional[pulumi.Input['BdsInstanceUtilNodeArgs']]):
        pulumi.set(self, "util_node", value)

    @property
    @pulumi.getter(name="workerNode")
    def worker_node(self) -> Optional[pulumi.Input['BdsInstanceWorkerNodeArgs']]:
        return pulumi.get(self, "worker_node")

    @worker_node.setter
    def worker_node(self, value: Optional[pulumi.Input['BdsInstanceWorkerNodeArgs']]):
        pulumi.set(self, "worker_node", value)


class BdsInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_sql_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BdsInstanceCloudSqlDetailArgs']]]]] = None,
                 cluster_admin_password: Optional[pulumi.Input[str]] = None,
                 cluster_public_key: Optional[pulumi.Input[str]] = None,
                 cluster_version: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_cloud_sql_configured: Optional[pulumi.Input[bool]] = None,
                 is_high_availability: Optional[pulumi.Input[bool]] = None,
                 is_secure: Optional[pulumi.Input[bool]] = None,
                 master_node: Optional[pulumi.Input[pulumi.InputType['BdsInstanceMasterNodeArgs']]] = None,
                 network_config: Optional[pulumi.Input[pulumi.InputType['BdsInstanceNetworkConfigArgs']]] = None,
                 util_node: Optional[pulumi.Input[pulumi.InputType['BdsInstanceUtilNodeArgs']]] = None,
                 worker_node: Optional[pulumi.Input[pulumi.InputType['BdsInstanceWorkerNodeArgs']]] = None,
                 __props__=None):
        """
        This resource provides the Bds Instance resource in Oracle Cloud Infrastructure Big Data Service service.

        Creates a Big Data Service cluster.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_bds_instance = oci.big_data_service.BdsInstance("testBdsInstance",
            cluster_admin_password=var["bds_instance_cluster_admin_password"],
            cluster_public_key=var["bds_instance_cluster_public_key"],
            cluster_version=var["bds_instance_cluster_version"],
            compartment_id=var["compartment_id"],
            display_name=var["bds_instance_display_name"],
            is_high_availability=var["bds_instance_is_high_availability"],
            is_secure=var["bds_instance_is_secure"],
            master_node=oci.big.data.service.BdsInstanceMasterNodeArgs(
                shape=var["bds_instance_nodes_shape"],
                subnet_id=oci_core_subnet["test_subnet"]["id"],
                block_volume_size_in_gbs=var["bds_instance_nodes_block_volume_size_in_gbs"],
                number_of_nodes=var["bds_instance_number_of_nodes"],
            ),
            util_node=oci.big.data.service.BdsInstanceUtilNodeArgs(
                shape=var["bds_instance_nodes_shape"],
                subnet_id=oci_core_subnet["test_subnet"]["id"],
                block_volume_size_in_gbs=var["bds_instance_nodes_block_volume_size_in_gbs"],
                number_of_nodes=var["bds_instance_number_of_nodes"],
            ),
            worker_node=oci.big.data.service.BdsInstanceWorkerNodeArgs(
                shape=var["bds_instance_nodes_shape"],
                subnet_id=oci_core_subnet["test_subnet"]["id"],
                block_volume_size_in_gbs=var["bds_instance_nodes_block_volume_size_in_gbs"],
                number_of_nodes=var["bds_instance_number_of_nodes"],
            ),
            defined_tags=var["bds_instance_defined_tags"],
            freeform_tags=var["bds_instance_freeform_tags"],
            network_config=oci.big.data.service.BdsInstanceNetworkConfigArgs(
                cidr_block=var["bds_instance_network_config_cidr_block"],
                is_nat_gateway_required=var["bds_instance_network_config_is_nat_gateway_required"],
            ))
        ```

        ## Import

        BdsInstances can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:BigDataService/bdsInstance:BdsInstance test_bds_instance "id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BdsInstanceCloudSqlDetailArgs']]]] cloud_sql_details: The information about added Cloud SQL capability
        :param pulumi.Input[str] cluster_admin_password: Base-64 encoded password for the cluster (and Cloudera Manager) admin user.
        :param pulumi.Input[str] cluster_public_key: The SSH public key used to authenticate the cluster connection.
        :param pulumi.Input[str] cluster_version: Version of the Hadoop distribution.
        :param pulumi.Input[str] compartment_id: (Updatable) The OCID of the compartment.
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example, `{"foo-namespace": {"bar-key": "value"}}`
        :param pulumi.Input[str] display_name: (Updatable) Name of the Big Data Service cluster.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. For example, `{"bar-key": "value"}`
        :param pulumi.Input[bool] is_cloud_sql_configured: Boolean flag specifying whether or not Cloud SQL should be configured.
        :param pulumi.Input[bool] is_high_availability: Boolean flag specifying whether or not the cluster is highly available (HA).
        :param pulumi.Input[bool] is_secure: Boolean flag specifying whether or not the cluster should be set up as secure.
        :param pulumi.Input[pulumi.InputType['BdsInstanceNetworkConfigArgs']] network_config: Additional configuration of the user's network.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BdsInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Bds Instance resource in Oracle Cloud Infrastructure Big Data Service service.

        Creates a Big Data Service cluster.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_bds_instance = oci.big_data_service.BdsInstance("testBdsInstance",
            cluster_admin_password=var["bds_instance_cluster_admin_password"],
            cluster_public_key=var["bds_instance_cluster_public_key"],
            cluster_version=var["bds_instance_cluster_version"],
            compartment_id=var["compartment_id"],
            display_name=var["bds_instance_display_name"],
            is_high_availability=var["bds_instance_is_high_availability"],
            is_secure=var["bds_instance_is_secure"],
            master_node=oci.big.data.service.BdsInstanceMasterNodeArgs(
                shape=var["bds_instance_nodes_shape"],
                subnet_id=oci_core_subnet["test_subnet"]["id"],
                block_volume_size_in_gbs=var["bds_instance_nodes_block_volume_size_in_gbs"],
                number_of_nodes=var["bds_instance_number_of_nodes"],
            ),
            util_node=oci.big.data.service.BdsInstanceUtilNodeArgs(
                shape=var["bds_instance_nodes_shape"],
                subnet_id=oci_core_subnet["test_subnet"]["id"],
                block_volume_size_in_gbs=var["bds_instance_nodes_block_volume_size_in_gbs"],
                number_of_nodes=var["bds_instance_number_of_nodes"],
            ),
            worker_node=oci.big.data.service.BdsInstanceWorkerNodeArgs(
                shape=var["bds_instance_nodes_shape"],
                subnet_id=oci_core_subnet["test_subnet"]["id"],
                block_volume_size_in_gbs=var["bds_instance_nodes_block_volume_size_in_gbs"],
                number_of_nodes=var["bds_instance_number_of_nodes"],
            ),
            defined_tags=var["bds_instance_defined_tags"],
            freeform_tags=var["bds_instance_freeform_tags"],
            network_config=oci.big.data.service.BdsInstanceNetworkConfigArgs(
                cidr_block=var["bds_instance_network_config_cidr_block"],
                is_nat_gateway_required=var["bds_instance_network_config_is_nat_gateway_required"],
            ))
        ```

        ## Import

        BdsInstances can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:BigDataService/bdsInstance:BdsInstance test_bds_instance "id"
        ```

        :param str resource_name: The name of the resource.
        :param BdsInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BdsInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_sql_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BdsInstanceCloudSqlDetailArgs']]]]] = None,
                 cluster_admin_password: Optional[pulumi.Input[str]] = None,
                 cluster_public_key: Optional[pulumi.Input[str]] = None,
                 cluster_version: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_cloud_sql_configured: Optional[pulumi.Input[bool]] = None,
                 is_high_availability: Optional[pulumi.Input[bool]] = None,
                 is_secure: Optional[pulumi.Input[bool]] = None,
                 master_node: Optional[pulumi.Input[pulumi.InputType['BdsInstanceMasterNodeArgs']]] = None,
                 network_config: Optional[pulumi.Input[pulumi.InputType['BdsInstanceNetworkConfigArgs']]] = None,
                 util_node: Optional[pulumi.Input[pulumi.InputType['BdsInstanceUtilNodeArgs']]] = None,
                 worker_node: Optional[pulumi.Input[pulumi.InputType['BdsInstanceWorkerNodeArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BdsInstanceArgs.__new__(BdsInstanceArgs)

            __props__.__dict__["cloud_sql_details"] = cloud_sql_details
            if cluster_admin_password is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_admin_password'")
            __props__.__dict__["cluster_admin_password"] = cluster_admin_password
            if cluster_public_key is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_public_key'")
            __props__.__dict__["cluster_public_key"] = cluster_public_key
            if cluster_version is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_version'")
            __props__.__dict__["cluster_version"] = cluster_version
            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["defined_tags"] = defined_tags
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["is_cloud_sql_configured"] = is_cloud_sql_configured
            if is_high_availability is None and not opts.urn:
                raise TypeError("Missing required property 'is_high_availability'")
            __props__.__dict__["is_high_availability"] = is_high_availability
            if is_secure is None and not opts.urn:
                raise TypeError("Missing required property 'is_secure'")
            __props__.__dict__["is_secure"] = is_secure
            if master_node is None and not opts.urn:
                raise TypeError("Missing required property 'master_node'")
            __props__.__dict__["master_node"] = master_node
            __props__.__dict__["network_config"] = network_config
            if util_node is None and not opts.urn:
                raise TypeError("Missing required property 'util_node'")
            __props__.__dict__["util_node"] = util_node
            if worker_node is None and not opts.urn:
                raise TypeError("Missing required property 'worker_node'")
            __props__.__dict__["worker_node"] = worker_node
            __props__.__dict__["cluster_details"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["nodes"] = None
            __props__.__dict__["number_of_nodes"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        super(BdsInstance, __self__).__init__(
            'oci:BigDataService/bdsInstance:BdsInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cloud_sql_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BdsInstanceCloudSqlDetailArgs']]]]] = None,
            cluster_admin_password: Optional[pulumi.Input[str]] = None,
            cluster_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BdsInstanceClusterDetailArgs']]]]] = None,
            cluster_public_key: Optional[pulumi.Input[str]] = None,
            cluster_version: Optional[pulumi.Input[str]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            created_by: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            is_cloud_sql_configured: Optional[pulumi.Input[bool]] = None,
            is_high_availability: Optional[pulumi.Input[bool]] = None,
            is_secure: Optional[pulumi.Input[bool]] = None,
            master_node: Optional[pulumi.Input[pulumi.InputType['BdsInstanceMasterNodeArgs']]] = None,
            network_config: Optional[pulumi.Input[pulumi.InputType['BdsInstanceNetworkConfigArgs']]] = None,
            nodes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BdsInstanceNodeArgs']]]]] = None,
            number_of_nodes: Optional[pulumi.Input[int]] = None,
            state: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None,
            util_node: Optional[pulumi.Input[pulumi.InputType['BdsInstanceUtilNodeArgs']]] = None,
            worker_node: Optional[pulumi.Input[pulumi.InputType['BdsInstanceWorkerNodeArgs']]] = None) -> 'BdsInstance':
        """
        Get an existing BdsInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BdsInstanceCloudSqlDetailArgs']]]] cloud_sql_details: The information about added Cloud SQL capability
        :param pulumi.Input[str] cluster_admin_password: Base-64 encoded password for the cluster (and Cloudera Manager) admin user.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BdsInstanceClusterDetailArgs']]]] cluster_details: Specific info about a Hadoop cluster
        :param pulumi.Input[str] cluster_public_key: The SSH public key used to authenticate the cluster connection.
        :param pulumi.Input[str] cluster_version: Version of the Hadoop distribution.
        :param pulumi.Input[str] compartment_id: (Updatable) The OCID of the compartment.
        :param pulumi.Input[str] created_by: The user who created the cluster.
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example, `{"foo-namespace": {"bar-key": "value"}}`
        :param pulumi.Input[str] display_name: (Updatable) Name of the Big Data Service cluster.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. For example, `{"bar-key": "value"}`
        :param pulumi.Input[bool] is_cloud_sql_configured: Boolean flag specifying whether or not Cloud SQL should be configured.
        :param pulumi.Input[bool] is_high_availability: Boolean flag specifying whether or not the cluster is highly available (HA).
        :param pulumi.Input[bool] is_secure: Boolean flag specifying whether or not the cluster should be set up as secure.
        :param pulumi.Input[pulumi.InputType['BdsInstanceNetworkConfigArgs']] network_config: Additional configuration of the user's network.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BdsInstanceNodeArgs']]]] nodes: The list of nodes in the Big Data Service cluster.
        :param pulumi.Input[int] number_of_nodes: The number of nodes that form the cluster.
        :param pulumi.Input[str] state: The state of the cluster.
        :param pulumi.Input[str] time_created: The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        :param pulumi.Input[str] time_updated: The time the cluster was updated, shown as an RFC 3339 formatted datetime string.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BdsInstanceState.__new__(_BdsInstanceState)

        __props__.__dict__["cloud_sql_details"] = cloud_sql_details
        __props__.__dict__["cluster_admin_password"] = cluster_admin_password
        __props__.__dict__["cluster_details"] = cluster_details
        __props__.__dict__["cluster_public_key"] = cluster_public_key
        __props__.__dict__["cluster_version"] = cluster_version
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["is_cloud_sql_configured"] = is_cloud_sql_configured
        __props__.__dict__["is_high_availability"] = is_high_availability
        __props__.__dict__["is_secure"] = is_secure
        __props__.__dict__["master_node"] = master_node
        __props__.__dict__["network_config"] = network_config
        __props__.__dict__["nodes"] = nodes
        __props__.__dict__["number_of_nodes"] = number_of_nodes
        __props__.__dict__["state"] = state
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        __props__.__dict__["util_node"] = util_node
        __props__.__dict__["worker_node"] = worker_node
        return BdsInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cloudSqlDetails")
    def cloud_sql_details(self) -> pulumi.Output[Sequence['outputs.BdsInstanceCloudSqlDetail']]:
        """
        The information about added Cloud SQL capability
        """
        return pulumi.get(self, "cloud_sql_details")

    @property
    @pulumi.getter(name="clusterAdminPassword")
    def cluster_admin_password(self) -> pulumi.Output[str]:
        """
        Base-64 encoded password for the cluster (and Cloudera Manager) admin user.
        """
        return pulumi.get(self, "cluster_admin_password")

    @property
    @pulumi.getter(name="clusterDetails")
    def cluster_details(self) -> pulumi.Output[Sequence['outputs.BdsInstanceClusterDetail']]:
        """
        Specific info about a Hadoop cluster
        """
        return pulumi.get(self, "cluster_details")

    @property
    @pulumi.getter(name="clusterPublicKey")
    def cluster_public_key(self) -> pulumi.Output[str]:
        """
        The SSH public key used to authenticate the cluster connection.
        """
        return pulumi.get(self, "cluster_public_key")

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> pulumi.Output[str]:
        """
        Version of the Hadoop distribution.
        """
        return pulumi.get(self, "cluster_version")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        """
        (Updatable) The OCID of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[str]:
        """
        The user who created the cluster.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example, `{"foo-namespace": {"bar-key": "value"}}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        (Updatable) Name of the Big Data Service cluster.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. For example, `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isCloudSqlConfigured")
    def is_cloud_sql_configured(self) -> pulumi.Output[bool]:
        """
        Boolean flag specifying whether or not Cloud SQL should be configured.
        """
        return pulumi.get(self, "is_cloud_sql_configured")

    @property
    @pulumi.getter(name="isHighAvailability")
    def is_high_availability(self) -> pulumi.Output[bool]:
        """
        Boolean flag specifying whether or not the cluster is highly available (HA).
        """
        return pulumi.get(self, "is_high_availability")

    @property
    @pulumi.getter(name="isSecure")
    def is_secure(self) -> pulumi.Output[bool]:
        """
        Boolean flag specifying whether or not the cluster should be set up as secure.
        """
        return pulumi.get(self, "is_secure")

    @property
    @pulumi.getter(name="masterNode")
    def master_node(self) -> pulumi.Output['outputs.BdsInstanceMasterNode']:
        return pulumi.get(self, "master_node")

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> pulumi.Output['outputs.BdsInstanceNetworkConfig']:
        """
        Additional configuration of the user's network.
        """
        return pulumi.get(self, "network_config")

    @property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Sequence['outputs.BdsInstanceNode']]:
        """
        The list of nodes in the Big Data Service cluster.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> pulumi.Output[int]:
        """
        The number of nodes that form the cluster.
        """
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The state of the cluster.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[str]:
        """
        The time the cluster was created, shown as an RFC 3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[str]:
        """
        The time the cluster was updated, shown as an RFC 3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="utilNode")
    def util_node(self) -> pulumi.Output['outputs.BdsInstanceUtilNode']:
        return pulumi.get(self, "util_node")

    @property
    @pulumi.getter(name="workerNode")
    def worker_node(self) -> pulumi.Output['outputs.BdsInstanceWorkerNode']:
        return pulumi.get(self, "worker_node")

