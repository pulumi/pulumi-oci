# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AutoScalingConfigurationPolicy',
    'AutoScalingConfigurationPolicyDetails',
    'AutoScalingConfigurationPolicyDetailsScaleDownConfig',
    'AutoScalingConfigurationPolicyDetailsScaleDownConfigMetric',
    'AutoScalingConfigurationPolicyDetailsScaleDownConfigMetricThreshold',
    'AutoScalingConfigurationPolicyDetailsScaleInConfig',
    'AutoScalingConfigurationPolicyDetailsScaleInConfigMetric',
    'AutoScalingConfigurationPolicyDetailsScaleInConfigMetricThreshold',
    'AutoScalingConfigurationPolicyDetailsScaleOutConfig',
    'AutoScalingConfigurationPolicyDetailsScaleOutConfigMetric',
    'AutoScalingConfigurationPolicyDetailsScaleOutConfigMetricThreshold',
    'AutoScalingConfigurationPolicyDetailsScaleUpConfig',
    'AutoScalingConfigurationPolicyDetailsScaleUpConfigMetric',
    'AutoScalingConfigurationPolicyDetailsScaleUpConfigMetricThreshold',
    'AutoScalingConfigurationPolicyDetailsScheduleDetail',
    'AutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndHorizontalScalingConfig',
    'AutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndVerticalScalingConfig',
    'AutoScalingConfigurationPolicyRule',
    'AutoScalingConfigurationPolicyRuleMetric',
    'AutoScalingConfigurationPolicyRuleMetricThreshold',
    'BdsInstanceCloudSqlDetail',
    'BdsInstanceCloudSqlDetailKerberosDetail',
    'BdsInstanceClusterDetail',
    'BdsInstanceComputeOnlyWorkerNode',
    'BdsInstanceComputeOnlyWorkerNodeShapeConfig',
    'BdsInstanceEdgeNode',
    'BdsInstanceEdgeNodeShapeConfig',
    'BdsInstanceKafkaBrokerNode',
    'BdsInstanceKafkaBrokerNodeShapeConfig',
    'BdsInstanceMasterNode',
    'BdsInstanceMasterNodeShapeConfig',
    'BdsInstanceNetworkConfig',
    'BdsInstanceNode',
    'BdsInstanceNodeAttachedBlockVolume',
    'BdsInstanceUtilNode',
    'BdsInstanceUtilNodeShapeConfig',
    'BdsInstanceWorkerNode',
    'BdsInstanceWorkerNodeShapeConfig',
    'GetAutoScalingConfigurationPolicyResult',
    'GetAutoScalingConfigurationPolicyDetailResult',
    'GetAutoScalingConfigurationPolicyDetailScaleDownConfigResult',
    'GetAutoScalingConfigurationPolicyDetailScaleDownConfigMetricResult',
    'GetAutoScalingConfigurationPolicyDetailScaleDownConfigMetricThresholdResult',
    'GetAutoScalingConfigurationPolicyDetailScaleInConfigResult',
    'GetAutoScalingConfigurationPolicyDetailScaleInConfigMetricResult',
    'GetAutoScalingConfigurationPolicyDetailScaleInConfigMetricThresholdResult',
    'GetAutoScalingConfigurationPolicyDetailScaleOutConfigResult',
    'GetAutoScalingConfigurationPolicyDetailScaleOutConfigMetricResult',
    'GetAutoScalingConfigurationPolicyDetailScaleOutConfigMetricThresholdResult',
    'GetAutoScalingConfigurationPolicyDetailScaleUpConfigResult',
    'GetAutoScalingConfigurationPolicyDetailScaleUpConfigMetricResult',
    'GetAutoScalingConfigurationPolicyDetailScaleUpConfigMetricThresholdResult',
    'GetAutoScalingConfigurationPolicyDetailScheduleDetailResult',
    'GetAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndHorizontalScalingConfigResult',
    'GetAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfigResult',
    'GetAutoScalingConfigurationPolicyRuleResult',
    'GetAutoScalingConfigurationPolicyRuleMetricResult',
    'GetAutoScalingConfigurationPolicyRuleMetricThresholdResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigMetricResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigMetricThresholdResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigMetricResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigMetricThresholdResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigMetricResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigMetricThresholdResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigMetricResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigMetricThresholdResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndHorizontalScalingConfigResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfigResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetricResult',
    'GetAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetricThresholdResult',
    'GetAutoScalingConfigurationsFilterResult',
    'GetBdsInstanceApiKeysBdsApiKeyResult',
    'GetBdsInstanceApiKeysFilterResult',
    'GetBdsInstanceCloudSqlDetailResult',
    'GetBdsInstanceCloudSqlDetailKerberosDetailResult',
    'GetBdsInstanceClusterDetailResult',
    'GetBdsInstanceComputeOnlyWorkerNodeResult',
    'GetBdsInstanceComputeOnlyWorkerNodeShapeConfigResult',
    'GetBdsInstanceEdgeNodeResult',
    'GetBdsInstanceEdgeNodeShapeConfigResult',
    'GetBdsInstanceGetOsPatchFilterResult',
    'GetBdsInstanceGetOsPatchTargetPackageResult',
    'GetBdsInstanceKafkaBrokerNodeResult',
    'GetBdsInstanceKafkaBrokerNodeShapeConfigResult',
    'GetBdsInstanceListOsPatchesFilterResult',
    'GetBdsInstanceListOsPatchesOsPatchResult',
    'GetBdsInstanceMasterNodeResult',
    'GetBdsInstanceMasterNodeShapeConfigResult',
    'GetBdsInstanceMetastoreConfigsBdsMetastoreConfigurationResult',
    'GetBdsInstanceMetastoreConfigsFilterResult',
    'GetBdsInstanceNetworkConfigResult',
    'GetBdsInstanceNodeResult',
    'GetBdsInstanceNodeAttachedBlockVolumeResult',
    'GetBdsInstancePatchHistoriesFilterResult',
    'GetBdsInstancePatchHistoriesPatchHistoryResult',
    'GetBdsInstancePatchesFilterResult',
    'GetBdsInstancePatchesPatchResult',
    'GetBdsInstanceUtilNodeResult',
    'GetBdsInstanceUtilNodeShapeConfigResult',
    'GetBdsInstanceWorkerNodeResult',
    'GetBdsInstanceWorkerNodeShapeConfigResult',
    'GetBdsInstancesBdsInstanceResult',
    'GetBdsInstancesBdsInstanceCloudSqlDetailResult',
    'GetBdsInstancesBdsInstanceCloudSqlDetailKerberosDetailResult',
    'GetBdsInstancesBdsInstanceClusterDetailResult',
    'GetBdsInstancesBdsInstanceComputeOnlyWorkerNodeResult',
    'GetBdsInstancesBdsInstanceComputeOnlyWorkerNodeShapeConfigResult',
    'GetBdsInstancesBdsInstanceEdgeNodeResult',
    'GetBdsInstancesBdsInstanceEdgeNodeShapeConfigResult',
    'GetBdsInstancesBdsInstanceKafkaBrokerNodeResult',
    'GetBdsInstancesBdsInstanceKafkaBrokerNodeShapeConfigResult',
    'GetBdsInstancesBdsInstanceMasterNodeResult',
    'GetBdsInstancesBdsInstanceMasterNodeShapeConfigResult',
    'GetBdsInstancesBdsInstanceNetworkConfigResult',
    'GetBdsInstancesBdsInstanceNodeResult',
    'GetBdsInstancesBdsInstanceNodeAttachedBlockVolumeResult',
    'GetBdsInstancesBdsInstanceUtilNodeResult',
    'GetBdsInstancesBdsInstanceUtilNodeShapeConfigResult',
    'GetBdsInstancesBdsInstanceWorkerNodeResult',
    'GetBdsInstancesBdsInstanceWorkerNodeShapeConfigResult',
    'GetBdsInstancesFilterResult',
]

@pulumi.output_type
class AutoScalingConfigurationPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyType":
            suggest = "policy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_type: str,
                 rules: Sequence['outputs.AutoScalingConfigurationPolicyRule']):
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.AutoScalingConfigurationPolicyRule']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyType":
            suggest = "policy_type"
        elif key == "actionType":
            suggest = "action_type"
        elif key == "scaleDownConfig":
            suggest = "scale_down_config"
        elif key == "scaleInConfig":
            suggest = "scale_in_config"
        elif key == "scaleOutConfig":
            suggest = "scale_out_config"
        elif key == "scaleUpConfig":
            suggest = "scale_up_config"
        elif key == "scheduleDetails":
            suggest = "schedule_details"
        elif key == "triggerType":
            suggest = "trigger_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_type: str,
                 action_type: Optional[str] = None,
                 scale_down_config: Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleDownConfig'] = None,
                 scale_in_config: Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleInConfig'] = None,
                 scale_out_config: Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleOutConfig'] = None,
                 scale_up_config: Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleUpConfig'] = None,
                 schedule_details: Optional[Sequence['outputs.AutoScalingConfigurationPolicyDetailsScheduleDetail']] = None,
                 timezone: Optional[str] = None,
                 trigger_type: Optional[str] = None):
        pulumi.set(__self__, "policy_type", policy_type)
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if scale_down_config is not None:
            pulumi.set(__self__, "scale_down_config", scale_down_config)
        if scale_in_config is not None:
            pulumi.set(__self__, "scale_in_config", scale_in_config)
        if scale_out_config is not None:
            pulumi.set(__self__, "scale_out_config", scale_out_config)
        if scale_up_config is not None:
            pulumi.set(__self__, "scale_up_config", scale_up_config)
        if schedule_details is not None:
            pulumi.set(__self__, "schedule_details", schedule_details)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="scaleDownConfig")
    def scale_down_config(self) -> Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleDownConfig']:
        return pulumi.get(self, "scale_down_config")

    @property
    @pulumi.getter(name="scaleInConfig")
    def scale_in_config(self) -> Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleInConfig']:
        return pulumi.get(self, "scale_in_config")

    @property
    @pulumi.getter(name="scaleOutConfig")
    def scale_out_config(self) -> Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleOutConfig']:
        return pulumi.get(self, "scale_out_config")

    @property
    @pulumi.getter(name="scaleUpConfig")
    def scale_up_config(self) -> Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleUpConfig']:
        return pulumi.get(self, "scale_up_config")

    @property
    @pulumi.getter(name="scheduleDetails")
    def schedule_details(self) -> Optional[Sequence['outputs.AutoScalingConfigurationPolicyDetailsScheduleDetail']]:
        return pulumi.get(self, "schedule_details")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[str]:
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetailsScaleDownConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryStepSize":
            suggest = "memory_step_size"
        elif key == "minMemoryPerNode":
            suggest = "min_memory_per_node"
        elif key == "minOcpusPerNode":
            suggest = "min_ocpus_per_node"
        elif key == "ocpuStepSize":
            suggest = "ocpu_step_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetailsScaleDownConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleDownConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleDownConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_step_size: Optional[int] = None,
                 metric: Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleDownConfigMetric'] = None,
                 min_memory_per_node: Optional[int] = None,
                 min_ocpus_per_node: Optional[int] = None,
                 ocpu_step_size: Optional[int] = None):
        if memory_step_size is not None:
            pulumi.set(__self__, "memory_step_size", memory_step_size)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if min_memory_per_node is not None:
            pulumi.set(__self__, "min_memory_per_node", min_memory_per_node)
        if min_ocpus_per_node is not None:
            pulumi.set(__self__, "min_ocpus_per_node", min_ocpus_per_node)
        if ocpu_step_size is not None:
            pulumi.set(__self__, "ocpu_step_size", ocpu_step_size)

    @property
    @pulumi.getter(name="memoryStepSize")
    def memory_step_size(self) -> Optional[int]:
        return pulumi.get(self, "memory_step_size")

    @property
    @pulumi.getter
    def metric(self) -> Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleDownConfigMetric']:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="minMemoryPerNode")
    def min_memory_per_node(self) -> Optional[int]:
        return pulumi.get(self, "min_memory_per_node")

    @property
    @pulumi.getter(name="minOcpusPerNode")
    def min_ocpus_per_node(self) -> Optional[int]:
        return pulumi.get(self, "min_ocpus_per_node")

    @property
    @pulumi.getter(name="ocpuStepSize")
    def ocpu_step_size(self) -> Optional[int]:
        return pulumi.get(self, "ocpu_step_size")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetailsScaleDownConfigMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetailsScaleDownConfigMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleDownConfigMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleDownConfigMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_type: Optional[str] = None,
                 threshold: Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleDownConfigMetricThreshold'] = None):
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def threshold(self) -> Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleDownConfigMetricThreshold']:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetailsScaleDownConfigMetricThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMinutes":
            suggest = "duration_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetailsScaleDownConfigMetricThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleDownConfigMetricThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleDownConfigMetricThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 operator: Optional[str] = None,
                 value: Optional[int] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetailsScaleInConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minNodeCount":
            suggest = "min_node_count"
        elif key == "stepSize":
            suggest = "step_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetailsScaleInConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleInConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleInConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleInConfigMetric'] = None,
                 min_node_count: Optional[int] = None,
                 step_size: Optional[int] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if min_node_count is not None:
            pulumi.set(__self__, "min_node_count", min_node_count)
        if step_size is not None:
            pulumi.set(__self__, "step_size", step_size)

    @property
    @pulumi.getter
    def metric(self) -> Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleInConfigMetric']:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="minNodeCount")
    def min_node_count(self) -> Optional[int]:
        return pulumi.get(self, "min_node_count")

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> Optional[int]:
        return pulumi.get(self, "step_size")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetailsScaleInConfigMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetailsScaleInConfigMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleInConfigMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleInConfigMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_type: Optional[str] = None,
                 threshold: Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleInConfigMetricThreshold'] = None):
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def threshold(self) -> Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleInConfigMetricThreshold']:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetailsScaleInConfigMetricThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMinutes":
            suggest = "duration_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetailsScaleInConfigMetricThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleInConfigMetricThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleInConfigMetricThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 operator: Optional[str] = None,
                 value: Optional[int] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetailsScaleOutConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxNodeCount":
            suggest = "max_node_count"
        elif key == "stepSize":
            suggest = "step_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetailsScaleOutConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleOutConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleOutConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_node_count: Optional[int] = None,
                 metric: Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleOutConfigMetric'] = None,
                 step_size: Optional[int] = None):
        if max_node_count is not None:
            pulumi.set(__self__, "max_node_count", max_node_count)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if step_size is not None:
            pulumi.set(__self__, "step_size", step_size)

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> Optional[int]:
        return pulumi.get(self, "max_node_count")

    @property
    @pulumi.getter
    def metric(self) -> Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleOutConfigMetric']:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> Optional[int]:
        return pulumi.get(self, "step_size")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetailsScaleOutConfigMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetailsScaleOutConfigMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleOutConfigMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleOutConfigMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_type: Optional[str] = None,
                 threshold: Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleOutConfigMetricThreshold'] = None):
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def threshold(self) -> Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleOutConfigMetricThreshold']:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetailsScaleOutConfigMetricThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMinutes":
            suggest = "duration_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetailsScaleOutConfigMetricThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleOutConfigMetricThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleOutConfigMetricThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 operator: Optional[str] = None,
                 value: Optional[int] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetailsScaleUpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxMemoryPerNode":
            suggest = "max_memory_per_node"
        elif key == "maxOcpusPerNode":
            suggest = "max_ocpus_per_node"
        elif key == "memoryStepSize":
            suggest = "memory_step_size"
        elif key == "ocpuStepSize":
            suggest = "ocpu_step_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetailsScaleUpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleUpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleUpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_memory_per_node: Optional[int] = None,
                 max_ocpus_per_node: Optional[int] = None,
                 memory_step_size: Optional[int] = None,
                 metric: Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleUpConfigMetric'] = None,
                 ocpu_step_size: Optional[int] = None):
        if max_memory_per_node is not None:
            pulumi.set(__self__, "max_memory_per_node", max_memory_per_node)
        if max_ocpus_per_node is not None:
            pulumi.set(__self__, "max_ocpus_per_node", max_ocpus_per_node)
        if memory_step_size is not None:
            pulumi.set(__self__, "memory_step_size", memory_step_size)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if ocpu_step_size is not None:
            pulumi.set(__self__, "ocpu_step_size", ocpu_step_size)

    @property
    @pulumi.getter(name="maxMemoryPerNode")
    def max_memory_per_node(self) -> Optional[int]:
        return pulumi.get(self, "max_memory_per_node")

    @property
    @pulumi.getter(name="maxOcpusPerNode")
    def max_ocpus_per_node(self) -> Optional[int]:
        return pulumi.get(self, "max_ocpus_per_node")

    @property
    @pulumi.getter(name="memoryStepSize")
    def memory_step_size(self) -> Optional[int]:
        return pulumi.get(self, "memory_step_size")

    @property
    @pulumi.getter
    def metric(self) -> Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleUpConfigMetric']:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="ocpuStepSize")
    def ocpu_step_size(self) -> Optional[int]:
        return pulumi.get(self, "ocpu_step_size")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetailsScaleUpConfigMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetailsScaleUpConfigMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleUpConfigMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleUpConfigMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_type: Optional[str] = None,
                 threshold: Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleUpConfigMetricThreshold'] = None):
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def threshold(self) -> Optional['outputs.AutoScalingConfigurationPolicyDetailsScaleUpConfigMetricThreshold']:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetailsScaleUpConfigMetricThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMinutes":
            suggest = "duration_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetailsScaleUpConfigMetricThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleUpConfigMetricThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetailsScaleUpConfigMetricThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 operator: Optional[str] = None,
                 value: Optional[int] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetailsScheduleDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scheduleType":
            suggest = "schedule_type"
        elif key == "timeAndHorizontalScalingConfigs":
            suggest = "time_and_horizontal_scaling_configs"
        elif key == "timeAndVerticalScalingConfigs":
            suggest = "time_and_vertical_scaling_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetailsScheduleDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetailsScheduleDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetailsScheduleDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule_type: Optional[str] = None,
                 time_and_horizontal_scaling_configs: Optional[Sequence['outputs.AutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndHorizontalScalingConfig']] = None,
                 time_and_vertical_scaling_configs: Optional[Sequence['outputs.AutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndVerticalScalingConfig']] = None):
        if schedule_type is not None:
            pulumi.set(__self__, "schedule_type", schedule_type)
        if time_and_horizontal_scaling_configs is not None:
            pulumi.set(__self__, "time_and_horizontal_scaling_configs", time_and_horizontal_scaling_configs)
        if time_and_vertical_scaling_configs is not None:
            pulumi.set(__self__, "time_and_vertical_scaling_configs", time_and_vertical_scaling_configs)

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> Optional[str]:
        return pulumi.get(self, "schedule_type")

    @property
    @pulumi.getter(name="timeAndHorizontalScalingConfigs")
    def time_and_horizontal_scaling_configs(self) -> Optional[Sequence['outputs.AutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndHorizontalScalingConfig']]:
        return pulumi.get(self, "time_and_horizontal_scaling_configs")

    @property
    @pulumi.getter(name="timeAndVerticalScalingConfigs")
    def time_and_vertical_scaling_configs(self) -> Optional[Sequence['outputs.AutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndVerticalScalingConfig']]:
        return pulumi.get(self, "time_and_vertical_scaling_configs")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndHorizontalScalingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetNodeCount":
            suggest = "target_node_count"
        elif key == "timeRecurrence":
            suggest = "time_recurrence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndHorizontalScalingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndHorizontalScalingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndHorizontalScalingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_node_count: Optional[int] = None,
                 time_recurrence: Optional[str] = None):
        if target_node_count is not None:
            pulumi.set(__self__, "target_node_count", target_node_count)
        if time_recurrence is not None:
            pulumi.set(__self__, "time_recurrence", time_recurrence)

    @property
    @pulumi.getter(name="targetNodeCount")
    def target_node_count(self) -> Optional[int]:
        return pulumi.get(self, "target_node_count")

    @property
    @pulumi.getter(name="timeRecurrence")
    def time_recurrence(self) -> Optional[str]:
        return pulumi.get(self, "time_recurrence")


@pulumi.output_type
class AutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndVerticalScalingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetMemoryPerNode":
            suggest = "target_memory_per_node"
        elif key == "targetOcpusPerNode":
            suggest = "target_ocpus_per_node"
        elif key == "targetShape":
            suggest = "target_shape"
        elif key == "timeRecurrence":
            suggest = "time_recurrence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndVerticalScalingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndVerticalScalingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyDetailsScheduleDetailTimeAndVerticalScalingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_memory_per_node: Optional[int] = None,
                 target_ocpus_per_node: Optional[int] = None,
                 target_shape: Optional[str] = None,
                 time_recurrence: Optional[str] = None):
        if target_memory_per_node is not None:
            pulumi.set(__self__, "target_memory_per_node", target_memory_per_node)
        if target_ocpus_per_node is not None:
            pulumi.set(__self__, "target_ocpus_per_node", target_ocpus_per_node)
        if target_shape is not None:
            pulumi.set(__self__, "target_shape", target_shape)
        if time_recurrence is not None:
            pulumi.set(__self__, "time_recurrence", time_recurrence)

    @property
    @pulumi.getter(name="targetMemoryPerNode")
    def target_memory_per_node(self) -> Optional[int]:
        return pulumi.get(self, "target_memory_per_node")

    @property
    @pulumi.getter(name="targetOcpusPerNode")
    def target_ocpus_per_node(self) -> Optional[int]:
        return pulumi.get(self, "target_ocpus_per_node")

    @property
    @pulumi.getter(name="targetShape")
    def target_shape(self) -> Optional[str]:
        return pulumi.get(self, "target_shape")

    @property
    @pulumi.getter(name="timeRecurrence")
    def time_recurrence(self) -> Optional[str]:
        return pulumi.get(self, "time_recurrence")


@pulumi.output_type
class AutoScalingConfigurationPolicyRule(dict):
    def __init__(__self__, *,
                 action: str,
                 metric: 'outputs.AutoScalingConfigurationPolicyRuleMetric'):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def metric(self) -> 'outputs.AutoScalingConfigurationPolicyRuleMetric':
        return pulumi.get(self, "metric")


@pulumi.output_type
class AutoScalingConfigurationPolicyRuleMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyRuleMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyRuleMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyRuleMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_type: str,
                 threshold: 'outputs.AutoScalingConfigurationPolicyRuleMetricThreshold'):
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def threshold(self) -> 'outputs.AutoScalingConfigurationPolicyRuleMetricThreshold':
        return pulumi.get(self, "threshold")


@pulumi.output_type
class AutoScalingConfigurationPolicyRuleMetricThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMinutes":
            suggest = "duration_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutoScalingConfigurationPolicyRuleMetricThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutoScalingConfigurationPolicyRuleMetricThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutoScalingConfigurationPolicyRuleMetricThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_in_minutes: int,
                 operator: str,
                 value: int):
        pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> int:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class BdsInstanceCloudSqlDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockVolumeSizeInGbs":
            suggest = "block_volume_size_in_gbs"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "isKerberosMappedToDatabaseUsers":
            suggest = "is_kerberos_mapped_to_database_users"
        elif key == "kerberosDetails":
            suggest = "kerberos_details"
        elif key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceCloudSqlDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceCloudSqlDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceCloudSqlDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shape: str,
                 block_volume_size_in_gbs: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 is_kerberos_mapped_to_database_users: Optional[bool] = None,
                 kerberos_details: Optional[Sequence['outputs.BdsInstanceCloudSqlDetailKerberosDetail']] = None,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        pulumi.set(__self__, "shape", shape)
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_kerberos_mapped_to_database_users is not None:
            pulumi.set(__self__, "is_kerberos_mapped_to_database_users", is_kerberos_mapped_to_database_users)
        if kerberos_details is not None:
            pulumi.set(__self__, "kerberos_details", kerberos_details)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter
    def shape(self) -> str:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isKerberosMappedToDatabaseUsers")
    def is_kerberos_mapped_to_database_users(self) -> Optional[bool]:
        return pulumi.get(self, "is_kerberos_mapped_to_database_users")

    @property
    @pulumi.getter(name="kerberosDetails")
    def kerberos_details(self) -> Optional[Sequence['outputs.BdsInstanceCloudSqlDetailKerberosDetail']]:
        return pulumi.get(self, "kerberos_details")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class BdsInstanceCloudSqlDetailKerberosDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keytabFile":
            suggest = "keytab_file"
        elif key == "principalName":
            suggest = "principal_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceCloudSqlDetailKerberosDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceCloudSqlDetailKerberosDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceCloudSqlDetailKerberosDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keytab_file: Optional[str] = None,
                 principal_name: Optional[str] = None):
        if keytab_file is not None:
            pulumi.set(__self__, "keytab_file", keytab_file)
        if principal_name is not None:
            pulumi.set(__self__, "principal_name", principal_name)

    @property
    @pulumi.getter(name="keytabFile")
    def keytab_file(self) -> Optional[str]:
        return pulumi.get(self, "keytab_file")

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> Optional[str]:
        return pulumi.get(self, "principal_name")


@pulumi.output_type
class BdsInstanceClusterDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ambariUrl":
            suggest = "ambari_url"
        elif key == "bdCellVersion":
            suggest = "bd_cell_version"
        elif key == "bdaVersion":
            suggest = "bda_version"
        elif key == "bdmVersion":
            suggest = "bdm_version"
        elif key == "bdsVersion":
            suggest = "bds_version"
        elif key == "bigDataManagerUrl":
            suggest = "big_data_manager_url"
        elif key == "clouderaManagerUrl":
            suggest = "cloudera_manager_url"
        elif key == "csqlCellVersion":
            suggest = "csql_cell_version"
        elif key == "dbVersion":
            suggest = "db_version"
        elif key == "hueServerUrl":
            suggest = "hue_server_url"
        elif key == "jupyterHubUrl":
            suggest = "jupyter_hub_url"
        elif key == "odhVersion":
            suggest = "odh_version"
        elif key == "osVersion":
            suggest = "os_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeRefreshed":
            suggest = "time_refreshed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceClusterDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceClusterDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceClusterDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ambari_url: Optional[str] = None,
                 bd_cell_version: Optional[str] = None,
                 bda_version: Optional[str] = None,
                 bdm_version: Optional[str] = None,
                 bds_version: Optional[str] = None,
                 big_data_manager_url: Optional[str] = None,
                 cloudera_manager_url: Optional[str] = None,
                 csql_cell_version: Optional[str] = None,
                 db_version: Optional[str] = None,
                 hue_server_url: Optional[str] = None,
                 jupyter_hub_url: Optional[str] = None,
                 odh_version: Optional[str] = None,
                 os_version: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_refreshed: Optional[str] = None):
        if ambari_url is not None:
            pulumi.set(__self__, "ambari_url", ambari_url)
        if bd_cell_version is not None:
            pulumi.set(__self__, "bd_cell_version", bd_cell_version)
        if bda_version is not None:
            pulumi.set(__self__, "bda_version", bda_version)
        if bdm_version is not None:
            pulumi.set(__self__, "bdm_version", bdm_version)
        if bds_version is not None:
            pulumi.set(__self__, "bds_version", bds_version)
        if big_data_manager_url is not None:
            pulumi.set(__self__, "big_data_manager_url", big_data_manager_url)
        if cloudera_manager_url is not None:
            pulumi.set(__self__, "cloudera_manager_url", cloudera_manager_url)
        if csql_cell_version is not None:
            pulumi.set(__self__, "csql_cell_version", csql_cell_version)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if hue_server_url is not None:
            pulumi.set(__self__, "hue_server_url", hue_server_url)
        if jupyter_hub_url is not None:
            pulumi.set(__self__, "jupyter_hub_url", jupyter_hub_url)
        if odh_version is not None:
            pulumi.set(__self__, "odh_version", odh_version)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_refreshed is not None:
            pulumi.set(__self__, "time_refreshed", time_refreshed)

    @property
    @pulumi.getter(name="ambariUrl")
    def ambari_url(self) -> Optional[str]:
        return pulumi.get(self, "ambari_url")

    @property
    @pulumi.getter(name="bdCellVersion")
    def bd_cell_version(self) -> Optional[str]:
        return pulumi.get(self, "bd_cell_version")

    @property
    @pulumi.getter(name="bdaVersion")
    def bda_version(self) -> Optional[str]:
        return pulumi.get(self, "bda_version")

    @property
    @pulumi.getter(name="bdmVersion")
    def bdm_version(self) -> Optional[str]:
        return pulumi.get(self, "bdm_version")

    @property
    @pulumi.getter(name="bdsVersion")
    def bds_version(self) -> Optional[str]:
        return pulumi.get(self, "bds_version")

    @property
    @pulumi.getter(name="bigDataManagerUrl")
    def big_data_manager_url(self) -> Optional[str]:
        return pulumi.get(self, "big_data_manager_url")

    @property
    @pulumi.getter(name="clouderaManagerUrl")
    def cloudera_manager_url(self) -> Optional[str]:
        return pulumi.get(self, "cloudera_manager_url")

    @property
    @pulumi.getter(name="csqlCellVersion")
    def csql_cell_version(self) -> Optional[str]:
        return pulumi.get(self, "csql_cell_version")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="hueServerUrl")
    def hue_server_url(self) -> Optional[str]:
        return pulumi.get(self, "hue_server_url")

    @property
    @pulumi.getter(name="jupyterHubUrl")
    def jupyter_hub_url(self) -> Optional[str]:
        return pulumi.get(self, "jupyter_hub_url")

    @property
    @pulumi.getter(name="odhVersion")
    def odh_version(self) -> Optional[str]:
        return pulumi.get(self, "odh_version")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[str]:
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeRefreshed")
    def time_refreshed(self) -> Optional[str]:
        return pulumi.get(self, "time_refreshed")


@pulumi.output_type
class BdsInstanceComputeOnlyWorkerNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numberOfNodes":
            suggest = "number_of_nodes"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "blockVolumeSizeInGbs":
            suggest = "block_volume_size_in_gbs"
        elif key == "shapeConfig":
            suggest = "shape_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceComputeOnlyWorkerNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceComputeOnlyWorkerNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceComputeOnlyWorkerNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number_of_nodes: int,
                 shape: str,
                 subnet_id: str,
                 block_volume_size_in_gbs: Optional[str] = None,
                 shape_config: Optional['outputs.BdsInstanceComputeOnlyWorkerNodeShapeConfig'] = None):
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if shape_config is not None:
            pulumi.set(__self__, "shape_config", shape_config)

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> int:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> str:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfig")
    def shape_config(self) -> Optional['outputs.BdsInstanceComputeOnlyWorkerNodeShapeConfig']:
        return pulumi.get(self, "shape_config")


@pulumi.output_type
class BdsInstanceComputeOnlyWorkerNodeShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceComputeOnlyWorkerNodeShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceComputeOnlyWorkerNodeShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceComputeOnlyWorkerNodeShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class BdsInstanceEdgeNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numberOfNodes":
            suggest = "number_of_nodes"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "blockVolumeSizeInGbs":
            suggest = "block_volume_size_in_gbs"
        elif key == "shapeConfig":
            suggest = "shape_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceEdgeNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceEdgeNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceEdgeNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number_of_nodes: int,
                 shape: str,
                 subnet_id: str,
                 block_volume_size_in_gbs: Optional[str] = None,
                 shape_config: Optional['outputs.BdsInstanceEdgeNodeShapeConfig'] = None):
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if shape_config is not None:
            pulumi.set(__self__, "shape_config", shape_config)

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> int:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> str:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfig")
    def shape_config(self) -> Optional['outputs.BdsInstanceEdgeNodeShapeConfig']:
        return pulumi.get(self, "shape_config")


@pulumi.output_type
class BdsInstanceEdgeNodeShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceEdgeNodeShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceEdgeNodeShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceEdgeNodeShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class BdsInstanceKafkaBrokerNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numberOfKafkaNodes":
            suggest = "number_of_kafka_nodes"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "blockVolumeSizeInGbs":
            suggest = "block_volume_size_in_gbs"
        elif key == "shapeConfig":
            suggest = "shape_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceKafkaBrokerNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceKafkaBrokerNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceKafkaBrokerNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number_of_kafka_nodes: int,
                 shape: str,
                 subnet_id: str,
                 block_volume_size_in_gbs: Optional[str] = None,
                 shape_config: Optional['outputs.BdsInstanceKafkaBrokerNodeShapeConfig'] = None):
        pulumi.set(__self__, "number_of_kafka_nodes", number_of_kafka_nodes)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if shape_config is not None:
            pulumi.set(__self__, "shape_config", shape_config)

    @property
    @pulumi.getter(name="numberOfKafkaNodes")
    def number_of_kafka_nodes(self) -> int:
        return pulumi.get(self, "number_of_kafka_nodes")

    @property
    @pulumi.getter
    def shape(self) -> str:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfig")
    def shape_config(self) -> Optional['outputs.BdsInstanceKafkaBrokerNodeShapeConfig']:
        return pulumi.get(self, "shape_config")


@pulumi.output_type
class BdsInstanceKafkaBrokerNodeShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceKafkaBrokerNodeShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceKafkaBrokerNodeShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceKafkaBrokerNodeShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class BdsInstanceMasterNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numberOfNodes":
            suggest = "number_of_nodes"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "blockVolumeSizeInGbs":
            suggest = "block_volume_size_in_gbs"
        elif key == "shapeConfig":
            suggest = "shape_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceMasterNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceMasterNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceMasterNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number_of_nodes: int,
                 shape: str,
                 subnet_id: str,
                 block_volume_size_in_gbs: Optional[str] = None,
                 shape_config: Optional['outputs.BdsInstanceMasterNodeShapeConfig'] = None):
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if shape_config is not None:
            pulumi.set(__self__, "shape_config", shape_config)

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> int:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> str:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfig")
    def shape_config(self) -> Optional['outputs.BdsInstanceMasterNodeShapeConfig']:
        return pulumi.get(self, "shape_config")


@pulumi.output_type
class BdsInstanceMasterNodeShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceMasterNodeShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceMasterNodeShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceMasterNodeShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class BdsInstanceNetworkConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrBlock":
            suggest = "cidr_block"
        elif key == "isNatGatewayRequired":
            suggest = "is_nat_gateway_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceNetworkConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceNetworkConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceNetworkConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_block: Optional[str] = None,
                 is_nat_gateway_required: Optional[bool] = None):
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if is_nat_gateway_required is not None:
            pulumi.set(__self__, "is_nat_gateway_required", is_nat_gateway_required)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="isNatGatewayRequired")
    def is_nat_gateway_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_nat_gateway_required")


@pulumi.output_type
class BdsInstanceNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attachedBlockVolumes":
            suggest = "attached_block_volumes"
        elif key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "faultDomain":
            suggest = "fault_domain"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "memoryInGbs":
            suggest = "memory_in_gbs"
        elif key == "nodeType":
            suggest = "node_type"
        elif key == "sshFingerprint":
            suggest = "ssh_fingerprint"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeMaintenanceRebootDue":
            suggest = "time_maintenance_reboot_due"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attached_block_volumes: Optional[Sequence['outputs.BdsInstanceNodeAttachedBlockVolume']] = None,
                 availability_domain: Optional[str] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 hostname: Optional[str] = None,
                 image_id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 memory_in_gbs: Optional[int] = None,
                 node_type: Optional[str] = None,
                 ocpus: Optional[int] = None,
                 shape: Optional[str] = None,
                 ssh_fingerprint: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_maintenance_reboot_due: Optional[str] = None):
        if attached_block_volumes is not None:
            pulumi.set(__self__, "attached_block_volumes", attached_block_volumes)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if ssh_fingerprint is not None:
            pulumi.set(__self__, "ssh_fingerprint", ssh_fingerprint)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_maintenance_reboot_due is not None:
            pulumi.set(__self__, "time_maintenance_reboot_due", time_maintenance_reboot_due)

    @property
    @pulumi.getter(name="attachedBlockVolumes")
    def attached_block_volumes(self) -> Optional[Sequence['outputs.BdsInstanceNodeAttachedBlockVolume']]:
        return pulumi.get(self, "attached_block_volumes")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[str]:
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="sshFingerprint")
    def ssh_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "ssh_fingerprint")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeMaintenanceRebootDue")
    def time_maintenance_reboot_due(self) -> Optional[str]:
        return pulumi.get(self, "time_maintenance_reboot_due")


@pulumi.output_type
class BdsInstanceNodeAttachedBlockVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeAttachmentId":
            suggest = "volume_attachment_id"
        elif key == "volumeSizeInGbs":
            suggest = "volume_size_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceNodeAttachedBlockVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceNodeAttachedBlockVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceNodeAttachedBlockVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 volume_attachment_id: Optional[str] = None,
                 volume_size_in_gbs: Optional[str] = None):
        if volume_attachment_id is not None:
            pulumi.set(__self__, "volume_attachment_id", volume_attachment_id)
        if volume_size_in_gbs is not None:
            pulumi.set(__self__, "volume_size_in_gbs", volume_size_in_gbs)

    @property
    @pulumi.getter(name="volumeAttachmentId")
    def volume_attachment_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_attachment_id")

    @property
    @pulumi.getter(name="volumeSizeInGbs")
    def volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "volume_size_in_gbs")


@pulumi.output_type
class BdsInstanceUtilNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numberOfNodes":
            suggest = "number_of_nodes"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "blockVolumeSizeInGbs":
            suggest = "block_volume_size_in_gbs"
        elif key == "shapeConfig":
            suggest = "shape_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceUtilNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceUtilNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceUtilNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number_of_nodes: int,
                 shape: str,
                 subnet_id: str,
                 block_volume_size_in_gbs: Optional[str] = None,
                 shape_config: Optional['outputs.BdsInstanceUtilNodeShapeConfig'] = None):
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if shape_config is not None:
            pulumi.set(__self__, "shape_config", shape_config)

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> int:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> str:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfig")
    def shape_config(self) -> Optional['outputs.BdsInstanceUtilNodeShapeConfig']:
        return pulumi.get(self, "shape_config")


@pulumi.output_type
class BdsInstanceUtilNodeShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceUtilNodeShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceUtilNodeShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceUtilNodeShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class BdsInstanceWorkerNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numberOfNodes":
            suggest = "number_of_nodes"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "blockVolumeSizeInGbs":
            suggest = "block_volume_size_in_gbs"
        elif key == "shapeConfig":
            suggest = "shape_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceWorkerNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceWorkerNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceWorkerNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number_of_nodes: int,
                 shape: str,
                 subnet_id: str,
                 block_volume_size_in_gbs: Optional[str] = None,
                 shape_config: Optional['outputs.BdsInstanceWorkerNodeShapeConfig'] = None):
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if shape_config is not None:
            pulumi.set(__self__, "shape_config", shape_config)

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> int:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> str:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfig")
    def shape_config(self) -> Optional['outputs.BdsInstanceWorkerNodeShapeConfig']:
        return pulumi.get(self, "shape_config")


@pulumi.output_type
class BdsInstanceWorkerNodeShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BdsInstanceWorkerNodeShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BdsInstanceWorkerNodeShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BdsInstanceWorkerNodeShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyResult(dict):
    def __init__(__self__, *,
                 policy_type: Optional[str] = None,
                 rules: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyRuleResult']] = None):
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyRuleResult']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailResult(dict):
    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 policy_type: Optional[str] = None,
                 scale_down_configs: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleDownConfigResult']] = None,
                 scale_in_configs: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleInConfigResult']] = None,
                 scale_out_configs: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleOutConfigResult']] = None,
                 scale_up_configs: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleUpConfigResult']] = None,
                 schedule_details: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScheduleDetailResult']] = None,
                 timezone: Optional[str] = None,
                 trigger_type: Optional[str] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if scale_down_configs is not None:
            pulumi.set(__self__, "scale_down_configs", scale_down_configs)
        if scale_in_configs is not None:
            pulumi.set(__self__, "scale_in_configs", scale_in_configs)
        if scale_out_configs is not None:
            pulumi.set(__self__, "scale_out_configs", scale_out_configs)
        if scale_up_configs is not None:
            pulumi.set(__self__, "scale_up_configs", scale_up_configs)
        if schedule_details is not None:
            pulumi.set(__self__, "schedule_details", schedule_details)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="scaleDownConfigs")
    def scale_down_configs(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleDownConfigResult']]:
        return pulumi.get(self, "scale_down_configs")

    @property
    @pulumi.getter(name="scaleInConfigs")
    def scale_in_configs(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleInConfigResult']]:
        return pulumi.get(self, "scale_in_configs")

    @property
    @pulumi.getter(name="scaleOutConfigs")
    def scale_out_configs(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleOutConfigResult']]:
        return pulumi.get(self, "scale_out_configs")

    @property
    @pulumi.getter(name="scaleUpConfigs")
    def scale_up_configs(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleUpConfigResult']]:
        return pulumi.get(self, "scale_up_configs")

    @property
    @pulumi.getter(name="scheduleDetails")
    def schedule_details(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScheduleDetailResult']]:
        return pulumi.get(self, "schedule_details")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[str]:
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailScaleDownConfigResult(dict):
    def __init__(__self__, *,
                 memory_step_size: Optional[int] = None,
                 metrics: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleDownConfigMetricResult']] = None,
                 min_memory_per_node: Optional[int] = None,
                 min_ocpus_per_node: Optional[int] = None,
                 ocpu_step_size: Optional[int] = None):
        if memory_step_size is not None:
            pulumi.set(__self__, "memory_step_size", memory_step_size)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if min_memory_per_node is not None:
            pulumi.set(__self__, "min_memory_per_node", min_memory_per_node)
        if min_ocpus_per_node is not None:
            pulumi.set(__self__, "min_ocpus_per_node", min_ocpus_per_node)
        if ocpu_step_size is not None:
            pulumi.set(__self__, "ocpu_step_size", ocpu_step_size)

    @property
    @pulumi.getter(name="memoryStepSize")
    def memory_step_size(self) -> Optional[int]:
        return pulumi.get(self, "memory_step_size")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleDownConfigMetricResult']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="minMemoryPerNode")
    def min_memory_per_node(self) -> Optional[int]:
        return pulumi.get(self, "min_memory_per_node")

    @property
    @pulumi.getter(name="minOcpusPerNode")
    def min_ocpus_per_node(self) -> Optional[int]:
        return pulumi.get(self, "min_ocpus_per_node")

    @property
    @pulumi.getter(name="ocpuStepSize")
    def ocpu_step_size(self) -> Optional[int]:
        return pulumi.get(self, "ocpu_step_size")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailScaleDownConfigMetricResult(dict):
    def __init__(__self__, *,
                 metric_type: Optional[str] = None,
                 thresholds: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleDownConfigMetricThresholdResult']] = None):
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleDownConfigMetricThresholdResult']]:
        return pulumi.get(self, "thresholds")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailScaleDownConfigMetricThresholdResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 operator: Optional[str] = None,
                 value: Optional[int] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailScaleInConfigResult(dict):
    def __init__(__self__, *,
                 metrics: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleInConfigMetricResult']] = None,
                 min_node_count: Optional[int] = None,
                 step_size: Optional[int] = None):
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if min_node_count is not None:
            pulumi.set(__self__, "min_node_count", min_node_count)
        if step_size is not None:
            pulumi.set(__self__, "step_size", step_size)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleInConfigMetricResult']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="minNodeCount")
    def min_node_count(self) -> Optional[int]:
        return pulumi.get(self, "min_node_count")

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> Optional[int]:
        return pulumi.get(self, "step_size")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailScaleInConfigMetricResult(dict):
    def __init__(__self__, *,
                 metric_type: Optional[str] = None,
                 thresholds: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleInConfigMetricThresholdResult']] = None):
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleInConfigMetricThresholdResult']]:
        return pulumi.get(self, "thresholds")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailScaleInConfigMetricThresholdResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 operator: Optional[str] = None,
                 value: Optional[int] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailScaleOutConfigResult(dict):
    def __init__(__self__, *,
                 max_node_count: Optional[int] = None,
                 metrics: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleOutConfigMetricResult']] = None,
                 step_size: Optional[int] = None):
        if max_node_count is not None:
            pulumi.set(__self__, "max_node_count", max_node_count)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if step_size is not None:
            pulumi.set(__self__, "step_size", step_size)

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> Optional[int]:
        return pulumi.get(self, "max_node_count")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleOutConfigMetricResult']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> Optional[int]:
        return pulumi.get(self, "step_size")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailScaleOutConfigMetricResult(dict):
    def __init__(__self__, *,
                 metric_type: Optional[str] = None,
                 thresholds: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleOutConfigMetricThresholdResult']] = None):
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleOutConfigMetricThresholdResult']]:
        return pulumi.get(self, "thresholds")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailScaleOutConfigMetricThresholdResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 operator: Optional[str] = None,
                 value: Optional[int] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailScaleUpConfigResult(dict):
    def __init__(__self__, *,
                 max_memory_per_node: Optional[int] = None,
                 max_ocpus_per_node: Optional[int] = None,
                 memory_step_size: Optional[int] = None,
                 metrics: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleUpConfigMetricResult']] = None,
                 ocpu_step_size: Optional[int] = None):
        if max_memory_per_node is not None:
            pulumi.set(__self__, "max_memory_per_node", max_memory_per_node)
        if max_ocpus_per_node is not None:
            pulumi.set(__self__, "max_ocpus_per_node", max_ocpus_per_node)
        if memory_step_size is not None:
            pulumi.set(__self__, "memory_step_size", memory_step_size)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if ocpu_step_size is not None:
            pulumi.set(__self__, "ocpu_step_size", ocpu_step_size)

    @property
    @pulumi.getter(name="maxMemoryPerNode")
    def max_memory_per_node(self) -> Optional[int]:
        return pulumi.get(self, "max_memory_per_node")

    @property
    @pulumi.getter(name="maxOcpusPerNode")
    def max_ocpus_per_node(self) -> Optional[int]:
        return pulumi.get(self, "max_ocpus_per_node")

    @property
    @pulumi.getter(name="memoryStepSize")
    def memory_step_size(self) -> Optional[int]:
        return pulumi.get(self, "memory_step_size")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleUpConfigMetricResult']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="ocpuStepSize")
    def ocpu_step_size(self) -> Optional[int]:
        return pulumi.get(self, "ocpu_step_size")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailScaleUpConfigMetricResult(dict):
    def __init__(__self__, *,
                 metric_type: Optional[str] = None,
                 thresholds: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleUpConfigMetricThresholdResult']] = None):
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScaleUpConfigMetricThresholdResult']]:
        return pulumi.get(self, "thresholds")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailScaleUpConfigMetricThresholdResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 operator: Optional[str] = None,
                 value: Optional[int] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailScheduleDetailResult(dict):
    def __init__(__self__, *,
                 schedule_type: Optional[str] = None,
                 time_and_horizontal_scaling_configs: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndHorizontalScalingConfigResult']] = None,
                 time_and_vertical_scaling_configs: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfigResult']] = None):
        if schedule_type is not None:
            pulumi.set(__self__, "schedule_type", schedule_type)
        if time_and_horizontal_scaling_configs is not None:
            pulumi.set(__self__, "time_and_horizontal_scaling_configs", time_and_horizontal_scaling_configs)
        if time_and_vertical_scaling_configs is not None:
            pulumi.set(__self__, "time_and_vertical_scaling_configs", time_and_vertical_scaling_configs)

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> Optional[str]:
        return pulumi.get(self, "schedule_type")

    @property
    @pulumi.getter(name="timeAndHorizontalScalingConfigs")
    def time_and_horizontal_scaling_configs(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndHorizontalScalingConfigResult']]:
        return pulumi.get(self, "time_and_horizontal_scaling_configs")

    @property
    @pulumi.getter(name="timeAndVerticalScalingConfigs")
    def time_and_vertical_scaling_configs(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfigResult']]:
        return pulumi.get(self, "time_and_vertical_scaling_configs")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndHorizontalScalingConfigResult(dict):
    def __init__(__self__, *,
                 target_node_count: Optional[int] = None,
                 time_recurrence: Optional[str] = None):
        if target_node_count is not None:
            pulumi.set(__self__, "target_node_count", target_node_count)
        if time_recurrence is not None:
            pulumi.set(__self__, "time_recurrence", time_recurrence)

    @property
    @pulumi.getter(name="targetNodeCount")
    def target_node_count(self) -> Optional[int]:
        return pulumi.get(self, "target_node_count")

    @property
    @pulumi.getter(name="timeRecurrence")
    def time_recurrence(self) -> Optional[str]:
        return pulumi.get(self, "time_recurrence")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfigResult(dict):
    def __init__(__self__, *,
                 target_memory_per_node: Optional[int] = None,
                 target_ocpus_per_node: Optional[int] = None,
                 target_shape: Optional[str] = None,
                 time_recurrence: Optional[str] = None):
        if target_memory_per_node is not None:
            pulumi.set(__self__, "target_memory_per_node", target_memory_per_node)
        if target_ocpus_per_node is not None:
            pulumi.set(__self__, "target_ocpus_per_node", target_ocpus_per_node)
        if target_shape is not None:
            pulumi.set(__self__, "target_shape", target_shape)
        if time_recurrence is not None:
            pulumi.set(__self__, "time_recurrence", time_recurrence)

    @property
    @pulumi.getter(name="targetMemoryPerNode")
    def target_memory_per_node(self) -> Optional[int]:
        return pulumi.get(self, "target_memory_per_node")

    @property
    @pulumi.getter(name="targetOcpusPerNode")
    def target_ocpus_per_node(self) -> Optional[int]:
        return pulumi.get(self, "target_ocpus_per_node")

    @property
    @pulumi.getter(name="targetShape")
    def target_shape(self) -> Optional[str]:
        return pulumi.get(self, "target_shape")

    @property
    @pulumi.getter(name="timeRecurrence")
    def time_recurrence(self) -> Optional[str]:
        return pulumi.get(self, "time_recurrence")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyRuleResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 metrics: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyRuleMetricResult']] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyRuleMetricResult']]:
        return pulumi.get(self, "metrics")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyRuleMetricResult(dict):
    def __init__(__self__, *,
                 metric_type: Optional[str] = None,
                 thresholds: Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyRuleMetricThresholdResult']] = None):
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationPolicyRuleMetricThresholdResult']]:
        return pulumi.get(self, "thresholds")


@pulumi.output_type
class GetAutoScalingConfigurationPolicyRuleMetricThresholdResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 operator: Optional[str] = None,
                 value: Optional[int] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationResult(dict):
    def __init__(__self__, *,
                 bds_instance_id: Optional[str] = None,
                 cluster_admin_password: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 node_type: Optional[str] = None,
                 policies: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyResult']] = None,
                 policy_details: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if bds_instance_id is not None:
            pulumi.set(__self__, "bds_instance_id", bds_instance_id)
        if cluster_admin_password is not None:
            pulumi.set(__self__, "cluster_admin_password", cluster_admin_password)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if policy_details is not None:
            pulumi.set(__self__, "policy_details", policy_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="bdsInstanceId")
    def bds_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "bds_instance_id")

    @property
    @pulumi.getter(name="clusterAdminPassword")
    def cluster_admin_password(self) -> Optional[str]:
        return pulumi.get(self, "cluster_admin_password")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[str]:
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyResult']]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="policyDetails")
    def policy_details(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailResult']]:
        return pulumi.get(self, "policy_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyResult(dict):
    def __init__(__self__, *,
                 policy_type: Optional[str] = None,
                 rules: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleResult']] = None):
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleResult']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailResult(dict):
    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 policy_type: Optional[str] = None,
                 scale_down_configs: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigResult']] = None,
                 scale_in_configs: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigResult']] = None,
                 scale_out_configs: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigResult']] = None,
                 scale_up_configs: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigResult']] = None,
                 schedule_details: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailResult']] = None,
                 timezone: Optional[str] = None,
                 trigger_type: Optional[str] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if scale_down_configs is not None:
            pulumi.set(__self__, "scale_down_configs", scale_down_configs)
        if scale_in_configs is not None:
            pulumi.set(__self__, "scale_in_configs", scale_in_configs)
        if scale_out_configs is not None:
            pulumi.set(__self__, "scale_out_configs", scale_out_configs)
        if scale_up_configs is not None:
            pulumi.set(__self__, "scale_up_configs", scale_up_configs)
        if schedule_details is not None:
            pulumi.set(__self__, "schedule_details", schedule_details)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="scaleDownConfigs")
    def scale_down_configs(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigResult']]:
        return pulumi.get(self, "scale_down_configs")

    @property
    @pulumi.getter(name="scaleInConfigs")
    def scale_in_configs(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigResult']]:
        return pulumi.get(self, "scale_in_configs")

    @property
    @pulumi.getter(name="scaleOutConfigs")
    def scale_out_configs(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigResult']]:
        return pulumi.get(self, "scale_out_configs")

    @property
    @pulumi.getter(name="scaleUpConfigs")
    def scale_up_configs(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigResult']]:
        return pulumi.get(self, "scale_up_configs")

    @property
    @pulumi.getter(name="scheduleDetails")
    def schedule_details(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailResult']]:
        return pulumi.get(self, "schedule_details")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[str]:
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigResult(dict):
    def __init__(__self__, *,
                 memory_step_size: Optional[int] = None,
                 metrics: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigMetricResult']] = None,
                 min_memory_per_node: Optional[int] = None,
                 min_ocpus_per_node: Optional[int] = None,
                 ocpu_step_size: Optional[int] = None):
        if memory_step_size is not None:
            pulumi.set(__self__, "memory_step_size", memory_step_size)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if min_memory_per_node is not None:
            pulumi.set(__self__, "min_memory_per_node", min_memory_per_node)
        if min_ocpus_per_node is not None:
            pulumi.set(__self__, "min_ocpus_per_node", min_ocpus_per_node)
        if ocpu_step_size is not None:
            pulumi.set(__self__, "ocpu_step_size", ocpu_step_size)

    @property
    @pulumi.getter(name="memoryStepSize")
    def memory_step_size(self) -> Optional[int]:
        return pulumi.get(self, "memory_step_size")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigMetricResult']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="minMemoryPerNode")
    def min_memory_per_node(self) -> Optional[int]:
        return pulumi.get(self, "min_memory_per_node")

    @property
    @pulumi.getter(name="minOcpusPerNode")
    def min_ocpus_per_node(self) -> Optional[int]:
        return pulumi.get(self, "min_ocpus_per_node")

    @property
    @pulumi.getter(name="ocpuStepSize")
    def ocpu_step_size(self) -> Optional[int]:
        return pulumi.get(self, "ocpu_step_size")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigMetricResult(dict):
    def __init__(__self__, *,
                 metric_type: Optional[str] = None,
                 thresholds: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigMetricThresholdResult']] = None):
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigMetricThresholdResult']]:
        return pulumi.get(self, "thresholds")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleDownConfigMetricThresholdResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 operator: Optional[str] = None,
                 value: Optional[int] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigResult(dict):
    def __init__(__self__, *,
                 metrics: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigMetricResult']] = None,
                 min_node_count: Optional[int] = None,
                 step_size: Optional[int] = None):
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if min_node_count is not None:
            pulumi.set(__self__, "min_node_count", min_node_count)
        if step_size is not None:
            pulumi.set(__self__, "step_size", step_size)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigMetricResult']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="minNodeCount")
    def min_node_count(self) -> Optional[int]:
        return pulumi.get(self, "min_node_count")

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> Optional[int]:
        return pulumi.get(self, "step_size")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigMetricResult(dict):
    def __init__(__self__, *,
                 metric_type: Optional[str] = None,
                 thresholds: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigMetricThresholdResult']] = None):
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigMetricThresholdResult']]:
        return pulumi.get(self, "thresholds")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleInConfigMetricThresholdResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 operator: Optional[str] = None,
                 value: Optional[int] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigResult(dict):
    def __init__(__self__, *,
                 max_node_count: Optional[int] = None,
                 metrics: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigMetricResult']] = None,
                 step_size: Optional[int] = None):
        if max_node_count is not None:
            pulumi.set(__self__, "max_node_count", max_node_count)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if step_size is not None:
            pulumi.set(__self__, "step_size", step_size)

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> Optional[int]:
        return pulumi.get(self, "max_node_count")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigMetricResult']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> Optional[int]:
        return pulumi.get(self, "step_size")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigMetricResult(dict):
    def __init__(__self__, *,
                 metric_type: Optional[str] = None,
                 thresholds: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigMetricThresholdResult']] = None):
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigMetricThresholdResult']]:
        return pulumi.get(self, "thresholds")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleOutConfigMetricThresholdResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 operator: Optional[str] = None,
                 value: Optional[int] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigResult(dict):
    def __init__(__self__, *,
                 max_memory_per_node: Optional[int] = None,
                 max_ocpus_per_node: Optional[int] = None,
                 memory_step_size: Optional[int] = None,
                 metrics: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigMetricResult']] = None,
                 ocpu_step_size: Optional[int] = None):
        if max_memory_per_node is not None:
            pulumi.set(__self__, "max_memory_per_node", max_memory_per_node)
        if max_ocpus_per_node is not None:
            pulumi.set(__self__, "max_ocpus_per_node", max_ocpus_per_node)
        if memory_step_size is not None:
            pulumi.set(__self__, "memory_step_size", memory_step_size)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if ocpu_step_size is not None:
            pulumi.set(__self__, "ocpu_step_size", ocpu_step_size)

    @property
    @pulumi.getter(name="maxMemoryPerNode")
    def max_memory_per_node(self) -> Optional[int]:
        return pulumi.get(self, "max_memory_per_node")

    @property
    @pulumi.getter(name="maxOcpusPerNode")
    def max_ocpus_per_node(self) -> Optional[int]:
        return pulumi.get(self, "max_ocpus_per_node")

    @property
    @pulumi.getter(name="memoryStepSize")
    def memory_step_size(self) -> Optional[int]:
        return pulumi.get(self, "memory_step_size")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigMetricResult']]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="ocpuStepSize")
    def ocpu_step_size(self) -> Optional[int]:
        return pulumi.get(self, "ocpu_step_size")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigMetricResult(dict):
    def __init__(__self__, *,
                 metric_type: Optional[str] = None,
                 thresholds: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigMetricThresholdResult']] = None):
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigMetricThresholdResult']]:
        return pulumi.get(self, "thresholds")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScaleUpConfigMetricThresholdResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 operator: Optional[str] = None,
                 value: Optional[int] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailResult(dict):
    def __init__(__self__, *,
                 schedule_type: Optional[str] = None,
                 time_and_horizontal_scaling_configs: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndHorizontalScalingConfigResult']] = None,
                 time_and_vertical_scaling_configs: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfigResult']] = None):
        if schedule_type is not None:
            pulumi.set(__self__, "schedule_type", schedule_type)
        if time_and_horizontal_scaling_configs is not None:
            pulumi.set(__self__, "time_and_horizontal_scaling_configs", time_and_horizontal_scaling_configs)
        if time_and_vertical_scaling_configs is not None:
            pulumi.set(__self__, "time_and_vertical_scaling_configs", time_and_vertical_scaling_configs)

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> Optional[str]:
        return pulumi.get(self, "schedule_type")

    @property
    @pulumi.getter(name="timeAndHorizontalScalingConfigs")
    def time_and_horizontal_scaling_configs(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndHorizontalScalingConfigResult']]:
        return pulumi.get(self, "time_and_horizontal_scaling_configs")

    @property
    @pulumi.getter(name="timeAndVerticalScalingConfigs")
    def time_and_vertical_scaling_configs(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfigResult']]:
        return pulumi.get(self, "time_and_vertical_scaling_configs")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndHorizontalScalingConfigResult(dict):
    def __init__(__self__, *,
                 target_node_count: Optional[int] = None,
                 time_recurrence: Optional[str] = None):
        if target_node_count is not None:
            pulumi.set(__self__, "target_node_count", target_node_count)
        if time_recurrence is not None:
            pulumi.set(__self__, "time_recurrence", time_recurrence)

    @property
    @pulumi.getter(name="targetNodeCount")
    def target_node_count(self) -> Optional[int]:
        return pulumi.get(self, "target_node_count")

    @property
    @pulumi.getter(name="timeRecurrence")
    def time_recurrence(self) -> Optional[str]:
        return pulumi.get(self, "time_recurrence")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyDetailScheduleDetailTimeAndVerticalScalingConfigResult(dict):
    def __init__(__self__, *,
                 target_memory_per_node: Optional[int] = None,
                 target_ocpus_per_node: Optional[int] = None,
                 target_shape: Optional[str] = None,
                 time_recurrence: Optional[str] = None):
        if target_memory_per_node is not None:
            pulumi.set(__self__, "target_memory_per_node", target_memory_per_node)
        if target_ocpus_per_node is not None:
            pulumi.set(__self__, "target_ocpus_per_node", target_ocpus_per_node)
        if target_shape is not None:
            pulumi.set(__self__, "target_shape", target_shape)
        if time_recurrence is not None:
            pulumi.set(__self__, "time_recurrence", time_recurrence)

    @property
    @pulumi.getter(name="targetMemoryPerNode")
    def target_memory_per_node(self) -> Optional[int]:
        return pulumi.get(self, "target_memory_per_node")

    @property
    @pulumi.getter(name="targetOcpusPerNode")
    def target_ocpus_per_node(self) -> Optional[int]:
        return pulumi.get(self, "target_ocpus_per_node")

    @property
    @pulumi.getter(name="targetShape")
    def target_shape(self) -> Optional[str]:
        return pulumi.get(self, "target_shape")

    @property
    @pulumi.getter(name="timeRecurrence")
    def time_recurrence(self) -> Optional[str]:
        return pulumi.get(self, "time_recurrence")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 metrics: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetricResult']] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetricResult']]:
        return pulumi.get(self, "metrics")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetricResult(dict):
    def __init__(__self__, *,
                 metric_type: Optional[str] = None,
                 thresholds: Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetricThresholdResult']] = None):
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[Sequence['outputs.GetAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetricThresholdResult']]:
        return pulumi.get(self, "thresholds")


@pulumi.output_type
class GetAutoScalingConfigurationsAutoScalingConfigurationPolicyRuleMetricThresholdResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 operator: Optional[str] = None,
                 value: Optional[int] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutoScalingConfigurationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBdsInstanceApiKeysBdsApiKeyResult(dict):
    def __init__(__self__, *,
                 bds_instance_id: Optional[str] = None,
                 default_region: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 id: Optional[str] = None,
                 key_alias: Optional[str] = None,
                 passphrase: Optional[str] = None,
                 pemfilepath: Optional[str] = None,
                 state: Optional[str] = None,
                 tenant_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 user_id: Optional[str] = None):
        if bds_instance_id is not None:
            pulumi.set(__self__, "bds_instance_id", bds_instance_id)
        if default_region is not None:
            pulumi.set(__self__, "default_region", default_region)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_alias is not None:
            pulumi.set(__self__, "key_alias", key_alias)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if pemfilepath is not None:
            pulumi.set(__self__, "pemfilepath", pemfilepath)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="bdsInstanceId")
    def bds_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "bds_instance_id")

    @property
    @pulumi.getter(name="defaultRegion")
    def default_region(self) -> Optional[str]:
        return pulumi.get(self, "default_region")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyAlias")
    def key_alias(self) -> Optional[str]:
        return pulumi.get(self, "key_alias")

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[str]:
        return pulumi.get(self, "passphrase")

    @property
    @pulumi.getter
    def pemfilepath(self) -> Optional[str]:
        return pulumi.get(self, "pemfilepath")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetBdsInstanceApiKeysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBdsInstanceCloudSqlDetailResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 is_kerberos_mapped_to_database_users: Optional[bool] = None,
                 kerberos_details: Optional[Sequence['outputs.GetBdsInstanceCloudSqlDetailKerberosDetailResult']] = None,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None,
                 shape: Optional[str] = None):
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_kerberos_mapped_to_database_users is not None:
            pulumi.set(__self__, "is_kerberos_mapped_to_database_users", is_kerberos_mapped_to_database_users)
        if kerberos_details is not None:
            pulumi.set(__self__, "kerberos_details", kerberos_details)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isKerberosMappedToDatabaseUsers")
    def is_kerberos_mapped_to_database_users(self) -> Optional[bool]:
        return pulumi.get(self, "is_kerberos_mapped_to_database_users")

    @property
    @pulumi.getter(name="kerberosDetails")
    def kerberos_details(self) -> Optional[Sequence['outputs.GetBdsInstanceCloudSqlDetailKerberosDetailResult']]:
        return pulumi.get(self, "kerberos_details")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")


@pulumi.output_type
class GetBdsInstanceCloudSqlDetailKerberosDetailResult(dict):
    def __init__(__self__, *,
                 keytab_file: Optional[str] = None,
                 principal_name: Optional[str] = None):
        if keytab_file is not None:
            pulumi.set(__self__, "keytab_file", keytab_file)
        if principal_name is not None:
            pulumi.set(__self__, "principal_name", principal_name)

    @property
    @pulumi.getter(name="keytabFile")
    def keytab_file(self) -> Optional[str]:
        return pulumi.get(self, "keytab_file")

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> Optional[str]:
        return pulumi.get(self, "principal_name")


@pulumi.output_type
class GetBdsInstanceClusterDetailResult(dict):
    def __init__(__self__, *,
                 ambari_url: Optional[str] = None,
                 bd_cell_version: Optional[str] = None,
                 bda_version: Optional[str] = None,
                 bdm_version: Optional[str] = None,
                 bds_version: Optional[str] = None,
                 big_data_manager_url: Optional[str] = None,
                 cloudera_manager_url: Optional[str] = None,
                 csql_cell_version: Optional[str] = None,
                 db_version: Optional[str] = None,
                 hue_server_url: Optional[str] = None,
                 jupyter_hub_url: Optional[str] = None,
                 odh_version: Optional[str] = None,
                 os_version: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_refreshed: Optional[str] = None):
        if ambari_url is not None:
            pulumi.set(__self__, "ambari_url", ambari_url)
        if bd_cell_version is not None:
            pulumi.set(__self__, "bd_cell_version", bd_cell_version)
        if bda_version is not None:
            pulumi.set(__self__, "bda_version", bda_version)
        if bdm_version is not None:
            pulumi.set(__self__, "bdm_version", bdm_version)
        if bds_version is not None:
            pulumi.set(__self__, "bds_version", bds_version)
        if big_data_manager_url is not None:
            pulumi.set(__self__, "big_data_manager_url", big_data_manager_url)
        if cloudera_manager_url is not None:
            pulumi.set(__self__, "cloudera_manager_url", cloudera_manager_url)
        if csql_cell_version is not None:
            pulumi.set(__self__, "csql_cell_version", csql_cell_version)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if hue_server_url is not None:
            pulumi.set(__self__, "hue_server_url", hue_server_url)
        if jupyter_hub_url is not None:
            pulumi.set(__self__, "jupyter_hub_url", jupyter_hub_url)
        if odh_version is not None:
            pulumi.set(__self__, "odh_version", odh_version)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_refreshed is not None:
            pulumi.set(__self__, "time_refreshed", time_refreshed)

    @property
    @pulumi.getter(name="ambariUrl")
    def ambari_url(self) -> Optional[str]:
        return pulumi.get(self, "ambari_url")

    @property
    @pulumi.getter(name="bdCellVersion")
    def bd_cell_version(self) -> Optional[str]:
        return pulumi.get(self, "bd_cell_version")

    @property
    @pulumi.getter(name="bdaVersion")
    def bda_version(self) -> Optional[str]:
        return pulumi.get(self, "bda_version")

    @property
    @pulumi.getter(name="bdmVersion")
    def bdm_version(self) -> Optional[str]:
        return pulumi.get(self, "bdm_version")

    @property
    @pulumi.getter(name="bdsVersion")
    def bds_version(self) -> Optional[str]:
        return pulumi.get(self, "bds_version")

    @property
    @pulumi.getter(name="bigDataManagerUrl")
    def big_data_manager_url(self) -> Optional[str]:
        return pulumi.get(self, "big_data_manager_url")

    @property
    @pulumi.getter(name="clouderaManagerUrl")
    def cloudera_manager_url(self) -> Optional[str]:
        return pulumi.get(self, "cloudera_manager_url")

    @property
    @pulumi.getter(name="csqlCellVersion")
    def csql_cell_version(self) -> Optional[str]:
        return pulumi.get(self, "csql_cell_version")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="hueServerUrl")
    def hue_server_url(self) -> Optional[str]:
        return pulumi.get(self, "hue_server_url")

    @property
    @pulumi.getter(name="jupyterHubUrl")
    def jupyter_hub_url(self) -> Optional[str]:
        return pulumi.get(self, "jupyter_hub_url")

    @property
    @pulumi.getter(name="odhVersion")
    def odh_version(self) -> Optional[str]:
        return pulumi.get(self, "odh_version")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[str]:
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeRefreshed")
    def time_refreshed(self) -> Optional[str]:
        return pulumi.get(self, "time_refreshed")


@pulumi.output_type
class GetBdsInstanceComputeOnlyWorkerNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: Optional[str] = None,
                 number_of_nodes: Optional[int] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetBdsInstanceComputeOnlyWorkerNodeShapeConfigResult']] = None,
                 subnet_id: Optional[str] = None):
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if number_of_nodes is not None:
            pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetBdsInstanceComputeOnlyWorkerNodeShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstanceComputeOnlyWorkerNodeShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetBdsInstanceEdgeNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: Optional[str] = None,
                 number_of_nodes: Optional[int] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetBdsInstanceEdgeNodeShapeConfigResult']] = None,
                 subnet_id: Optional[str] = None):
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if number_of_nodes is not None:
            pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetBdsInstanceEdgeNodeShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstanceEdgeNodeShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetBdsInstanceGetOsPatchFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBdsInstanceGetOsPatchTargetPackageResult(dict):
    def __init__(__self__, *,
                 package_name: Optional[str] = None,
                 related_cv_es: Optional[Sequence[str]] = None,
                 target_version: Optional[str] = None,
                 update_type: Optional[str] = None):
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)
        if related_cv_es is not None:
            pulumi.set(__self__, "related_cv_es", related_cv_es)
        if target_version is not None:
            pulumi.set(__self__, "target_version", target_version)
        if update_type is not None:
            pulumi.set(__self__, "update_type", update_type)

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[str]:
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter(name="relatedCvEs")
    def related_cv_es(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "related_cv_es")

    @property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> Optional[str]:
        return pulumi.get(self, "target_version")

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> Optional[str]:
        return pulumi.get(self, "update_type")


@pulumi.output_type
class GetBdsInstanceKafkaBrokerNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: Optional[str] = None,
                 number_of_kafka_nodes: Optional[int] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetBdsInstanceKafkaBrokerNodeShapeConfigResult']] = None,
                 subnet_id: Optional[str] = None):
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if number_of_kafka_nodes is not None:
            pulumi.set(__self__, "number_of_kafka_nodes", number_of_kafka_nodes)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfKafkaNodes")
    def number_of_kafka_nodes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_kafka_nodes")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetBdsInstanceKafkaBrokerNodeShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstanceKafkaBrokerNodeShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetBdsInstanceListOsPatchesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBdsInstanceListOsPatchesOsPatchResult(dict):
    def __init__(__self__, *,
                 bds_instance_id: str,
                 os_patch_version: Optional[str] = None,
                 release_date: Optional[str] = None):
        pulumi.set(__self__, "bds_instance_id", bds_instance_id)
        if os_patch_version is not None:
            pulumi.set(__self__, "os_patch_version", os_patch_version)
        if release_date is not None:
            pulumi.set(__self__, "release_date", release_date)

    @property
    @pulumi.getter(name="bdsInstanceId")
    def bds_instance_id(self) -> str:
        return pulumi.get(self, "bds_instance_id")

    @property
    @pulumi.getter(name="osPatchVersion")
    def os_patch_version(self) -> Optional[str]:
        return pulumi.get(self, "os_patch_version")

    @property
    @pulumi.getter(name="releaseDate")
    def release_date(self) -> Optional[str]:
        return pulumi.get(self, "release_date")


@pulumi.output_type
class GetBdsInstanceMasterNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: Optional[str] = None,
                 number_of_nodes: Optional[int] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetBdsInstanceMasterNodeShapeConfigResult']] = None,
                 subnet_id: Optional[str] = None):
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if number_of_nodes is not None:
            pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetBdsInstanceMasterNodeShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstanceMasterNodeShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetBdsInstanceMetastoreConfigsBdsMetastoreConfigurationResult(dict):
    def __init__(__self__, *,
                 activate_trigger: Optional[int] = None,
                 bds_api_key_id: Optional[str] = None,
                 bds_api_key_passphrase: Optional[str] = None,
                 bds_instance_id: Optional[str] = None,
                 cluster_admin_password: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 metastore_id: Optional[str] = None,
                 metastore_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if activate_trigger is not None:
            pulumi.set(__self__, "activate_trigger", activate_trigger)
        if bds_api_key_id is not None:
            pulumi.set(__self__, "bds_api_key_id", bds_api_key_id)
        if bds_api_key_passphrase is not None:
            pulumi.set(__self__, "bds_api_key_passphrase", bds_api_key_passphrase)
        if bds_instance_id is not None:
            pulumi.set(__self__, "bds_instance_id", bds_instance_id)
        if cluster_admin_password is not None:
            pulumi.set(__self__, "cluster_admin_password", cluster_admin_password)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metastore_id is not None:
            pulumi.set(__self__, "metastore_id", metastore_id)
        if metastore_type is not None:
            pulumi.set(__self__, "metastore_type", metastore_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="activateTrigger")
    def activate_trigger(self) -> Optional[int]:
        return pulumi.get(self, "activate_trigger")

    @property
    @pulumi.getter(name="bdsApiKeyId")
    def bds_api_key_id(self) -> Optional[str]:
        return pulumi.get(self, "bds_api_key_id")

    @property
    @pulumi.getter(name="bdsApiKeyPassphrase")
    def bds_api_key_passphrase(self) -> Optional[str]:
        return pulumi.get(self, "bds_api_key_passphrase")

    @property
    @pulumi.getter(name="bdsInstanceId")
    def bds_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "bds_instance_id")

    @property
    @pulumi.getter(name="clusterAdminPassword")
    def cluster_admin_password(self) -> Optional[str]:
        return pulumi.get(self, "cluster_admin_password")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="metastoreId")
    def metastore_id(self) -> Optional[str]:
        return pulumi.get(self, "metastore_id")

    @property
    @pulumi.getter(name="metastoreType")
    def metastore_type(self) -> Optional[str]:
        return pulumi.get(self, "metastore_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetBdsInstanceMetastoreConfigsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBdsInstanceNetworkConfigResult(dict):
    def __init__(__self__, *,
                 cidr_block: Optional[str] = None,
                 is_nat_gateway_required: Optional[bool] = None):
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if is_nat_gateway_required is not None:
            pulumi.set(__self__, "is_nat_gateway_required", is_nat_gateway_required)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="isNatGatewayRequired")
    def is_nat_gateway_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_nat_gateway_required")


@pulumi.output_type
class GetBdsInstanceNodeResult(dict):
    def __init__(__self__, *,
                 attached_block_volumes: Optional[Sequence['outputs.GetBdsInstanceNodeAttachedBlockVolumeResult']] = None,
                 availability_domain: Optional[str] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 hostname: Optional[str] = None,
                 image_id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 memory_in_gbs: Optional[int] = None,
                 node_type: Optional[str] = None,
                 ocpus: Optional[int] = None,
                 shape: Optional[str] = None,
                 ssh_fingerprint: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_maintenance_reboot_due: Optional[str] = None):
        if attached_block_volumes is not None:
            pulumi.set(__self__, "attached_block_volumes", attached_block_volumes)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if ssh_fingerprint is not None:
            pulumi.set(__self__, "ssh_fingerprint", ssh_fingerprint)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_maintenance_reboot_due is not None:
            pulumi.set(__self__, "time_maintenance_reboot_due", time_maintenance_reboot_due)

    @property
    @pulumi.getter(name="attachedBlockVolumes")
    def attached_block_volumes(self) -> Optional[Sequence['outputs.GetBdsInstanceNodeAttachedBlockVolumeResult']]:
        return pulumi.get(self, "attached_block_volumes")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[str]:
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="sshFingerprint")
    def ssh_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "ssh_fingerprint")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeMaintenanceRebootDue")
    def time_maintenance_reboot_due(self) -> Optional[str]:
        return pulumi.get(self, "time_maintenance_reboot_due")


@pulumi.output_type
class GetBdsInstanceNodeAttachedBlockVolumeResult(dict):
    def __init__(__self__, *,
                 volume_attachment_id: Optional[str] = None,
                 volume_size_in_gbs: Optional[str] = None):
        if volume_attachment_id is not None:
            pulumi.set(__self__, "volume_attachment_id", volume_attachment_id)
        if volume_size_in_gbs is not None:
            pulumi.set(__self__, "volume_size_in_gbs", volume_size_in_gbs)

    @property
    @pulumi.getter(name="volumeAttachmentId")
    def volume_attachment_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_attachment_id")

    @property
    @pulumi.getter(name="volumeSizeInGbs")
    def volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "volume_size_in_gbs")


@pulumi.output_type
class GetBdsInstancePatchHistoriesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBdsInstancePatchHistoriesPatchHistoryResult(dict):
    def __init__(__self__, *,
                 patch_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if patch_type is not None:
            pulumi.set(__self__, "patch_type", patch_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="patchType")
    def patch_type(self) -> Optional[str]:
        return pulumi.get(self, "patch_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetBdsInstancePatchesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBdsInstancePatchesPatchResult(dict):
    def __init__(__self__, *,
                 time_released: Optional[str] = None,
                 version: Optional[str] = None):
        if time_released is not None:
            pulumi.set(__self__, "time_released", time_released)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="timeReleased")
    def time_released(self) -> Optional[str]:
        return pulumi.get(self, "time_released")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetBdsInstanceUtilNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: Optional[str] = None,
                 number_of_nodes: Optional[int] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetBdsInstanceUtilNodeShapeConfigResult']] = None,
                 subnet_id: Optional[str] = None):
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if number_of_nodes is not None:
            pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetBdsInstanceUtilNodeShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstanceUtilNodeShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetBdsInstanceWorkerNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: Optional[str] = None,
                 number_of_nodes: Optional[int] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetBdsInstanceWorkerNodeShapeConfigResult']] = None,
                 subnet_id: Optional[str] = None):
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if number_of_nodes is not None:
            pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetBdsInstanceWorkerNodeShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstanceWorkerNodeShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetBdsInstancesBdsInstanceResult(dict):
    def __init__(__self__, *,
                 bootstrap_script_url: Optional[str] = None,
                 cloud_sql_details: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceCloudSqlDetailResult']] = None,
                 cluster_admin_password: Optional[str] = None,
                 cluster_details: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceClusterDetailResult']] = None,
                 cluster_profile: Optional[str] = None,
                 cluster_public_key: Optional[str] = None,
                 cluster_version: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 compute_only_worker_nodes: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceComputeOnlyWorkerNodeResult']] = None,
                 created_by: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 edge_nodes: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceEdgeNodeResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_cloud_sql_configured: Optional[bool] = None,
                 is_force_stop_jobs: Optional[bool] = None,
                 is_high_availability: Optional[bool] = None,
                 is_kafka_configured: Optional[bool] = None,
                 is_secure: Optional[bool] = None,
                 kafka_broker_nodes: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceKafkaBrokerNodeResult']] = None,
                 kerberos_realm_name: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 master_nodes: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceMasterNodeResult']] = None,
                 network_configs: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceNetworkConfigResult']] = None,
                 nodes: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceNodeResult']] = None,
                 number_of_nodes: Optional[int] = None,
                 number_of_nodes_requiring_maintenance_reboot: Optional[int] = None,
                 os_patch_version: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 util_nodes: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceUtilNodeResult']] = None,
                 worker_nodes: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceWorkerNodeResult']] = None):
        if bootstrap_script_url is not None:
            pulumi.set(__self__, "bootstrap_script_url", bootstrap_script_url)
        if cloud_sql_details is not None:
            pulumi.set(__self__, "cloud_sql_details", cloud_sql_details)
        if cluster_admin_password is not None:
            pulumi.set(__self__, "cluster_admin_password", cluster_admin_password)
        if cluster_details is not None:
            pulumi.set(__self__, "cluster_details", cluster_details)
        if cluster_profile is not None:
            pulumi.set(__self__, "cluster_profile", cluster_profile)
        if cluster_public_key is not None:
            pulumi.set(__self__, "cluster_public_key", cluster_public_key)
        if cluster_version is not None:
            pulumi.set(__self__, "cluster_version", cluster_version)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compute_only_worker_nodes is not None:
            pulumi.set(__self__, "compute_only_worker_nodes", compute_only_worker_nodes)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if edge_nodes is not None:
            pulumi.set(__self__, "edge_nodes", edge_nodes)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_cloud_sql_configured is not None:
            pulumi.set(__self__, "is_cloud_sql_configured", is_cloud_sql_configured)
        if is_force_stop_jobs is not None:
            pulumi.set(__self__, "is_force_stop_jobs", is_force_stop_jobs)
        if is_high_availability is not None:
            pulumi.set(__self__, "is_high_availability", is_high_availability)
        if is_kafka_configured is not None:
            pulumi.set(__self__, "is_kafka_configured", is_kafka_configured)
        if is_secure is not None:
            pulumi.set(__self__, "is_secure", is_secure)
        if kafka_broker_nodes is not None:
            pulumi.set(__self__, "kafka_broker_nodes", kafka_broker_nodes)
        if kerberos_realm_name is not None:
            pulumi.set(__self__, "kerberos_realm_name", kerberos_realm_name)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if master_nodes is not None:
            pulumi.set(__self__, "master_nodes", master_nodes)
        if network_configs is not None:
            pulumi.set(__self__, "network_configs", network_configs)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if number_of_nodes is not None:
            pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        if number_of_nodes_requiring_maintenance_reboot is not None:
            pulumi.set(__self__, "number_of_nodes_requiring_maintenance_reboot", number_of_nodes_requiring_maintenance_reboot)
        if os_patch_version is not None:
            pulumi.set(__self__, "os_patch_version", os_patch_version)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if util_nodes is not None:
            pulumi.set(__self__, "util_nodes", util_nodes)
        if worker_nodes is not None:
            pulumi.set(__self__, "worker_nodes", worker_nodes)

    @property
    @pulumi.getter(name="bootstrapScriptUrl")
    def bootstrap_script_url(self) -> Optional[str]:
        return pulumi.get(self, "bootstrap_script_url")

    @property
    @pulumi.getter(name="cloudSqlDetails")
    def cloud_sql_details(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceCloudSqlDetailResult']]:
        return pulumi.get(self, "cloud_sql_details")

    @property
    @pulumi.getter(name="clusterAdminPassword")
    def cluster_admin_password(self) -> Optional[str]:
        return pulumi.get(self, "cluster_admin_password")

    @property
    @pulumi.getter(name="clusterDetails")
    def cluster_details(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceClusterDetailResult']]:
        return pulumi.get(self, "cluster_details")

    @property
    @pulumi.getter(name="clusterProfile")
    def cluster_profile(self) -> Optional[str]:
        return pulumi.get(self, "cluster_profile")

    @property
    @pulumi.getter(name="clusterPublicKey")
    def cluster_public_key(self) -> Optional[str]:
        return pulumi.get(self, "cluster_public_key")

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> Optional[str]:
        return pulumi.get(self, "cluster_version")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeOnlyWorkerNodes")
    def compute_only_worker_nodes(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceComputeOnlyWorkerNodeResult']]:
        return pulumi.get(self, "compute_only_worker_nodes")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="edgeNodes")
    def edge_nodes(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceEdgeNodeResult']]:
        return pulumi.get(self, "edge_nodes")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCloudSqlConfigured")
    def is_cloud_sql_configured(self) -> Optional[bool]:
        return pulumi.get(self, "is_cloud_sql_configured")

    @property
    @pulumi.getter(name="isForceStopJobs")
    def is_force_stop_jobs(self) -> Optional[bool]:
        return pulumi.get(self, "is_force_stop_jobs")

    @property
    @pulumi.getter(name="isHighAvailability")
    def is_high_availability(self) -> Optional[bool]:
        return pulumi.get(self, "is_high_availability")

    @property
    @pulumi.getter(name="isKafkaConfigured")
    def is_kafka_configured(self) -> Optional[bool]:
        return pulumi.get(self, "is_kafka_configured")

    @property
    @pulumi.getter(name="isSecure")
    def is_secure(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure")

    @property
    @pulumi.getter(name="kafkaBrokerNodes")
    def kafka_broker_nodes(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceKafkaBrokerNodeResult']]:
        return pulumi.get(self, "kafka_broker_nodes")

    @property
    @pulumi.getter(name="kerberosRealmName")
    def kerberos_realm_name(self) -> Optional[str]:
        return pulumi.get(self, "kerberos_realm_name")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="masterNodes")
    def master_nodes(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceMasterNodeResult']]:
        return pulumi.get(self, "master_nodes")

    @property
    @pulumi.getter(name="networkConfigs")
    def network_configs(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceNetworkConfigResult']]:
        return pulumi.get(self, "network_configs")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceNodeResult']]:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter(name="numberOfNodesRequiringMaintenanceReboot")
    def number_of_nodes_requiring_maintenance_reboot(self) -> Optional[int]:
        return pulumi.get(self, "number_of_nodes_requiring_maintenance_reboot")

    @property
    @pulumi.getter(name="osPatchVersion")
    def os_patch_version(self) -> Optional[str]:
        return pulumi.get(self, "os_patch_version")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="utilNodes")
    def util_nodes(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceUtilNodeResult']]:
        return pulumi.get(self, "util_nodes")

    @property
    @pulumi.getter(name="workerNodes")
    def worker_nodes(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceWorkerNodeResult']]:
        return pulumi.get(self, "worker_nodes")


@pulumi.output_type
class GetBdsInstancesBdsInstanceCloudSqlDetailResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 is_kerberos_mapped_to_database_users: Optional[bool] = None,
                 kerberos_details: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceCloudSqlDetailKerberosDetailResult']] = None,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None,
                 shape: Optional[str] = None):
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_kerberos_mapped_to_database_users is not None:
            pulumi.set(__self__, "is_kerberos_mapped_to_database_users", is_kerberos_mapped_to_database_users)
        if kerberos_details is not None:
            pulumi.set(__self__, "kerberos_details", kerberos_details)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isKerberosMappedToDatabaseUsers")
    def is_kerberos_mapped_to_database_users(self) -> Optional[bool]:
        return pulumi.get(self, "is_kerberos_mapped_to_database_users")

    @property
    @pulumi.getter(name="kerberosDetails")
    def kerberos_details(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceCloudSqlDetailKerberosDetailResult']]:
        return pulumi.get(self, "kerberos_details")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")


@pulumi.output_type
class GetBdsInstancesBdsInstanceCloudSqlDetailKerberosDetailResult(dict):
    def __init__(__self__, *,
                 keytab_file: Optional[str] = None,
                 principal_name: Optional[str] = None):
        if keytab_file is not None:
            pulumi.set(__self__, "keytab_file", keytab_file)
        if principal_name is not None:
            pulumi.set(__self__, "principal_name", principal_name)

    @property
    @pulumi.getter(name="keytabFile")
    def keytab_file(self) -> Optional[str]:
        return pulumi.get(self, "keytab_file")

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> Optional[str]:
        return pulumi.get(self, "principal_name")


@pulumi.output_type
class GetBdsInstancesBdsInstanceClusterDetailResult(dict):
    def __init__(__self__, *,
                 ambari_url: Optional[str] = None,
                 bd_cell_version: Optional[str] = None,
                 bda_version: Optional[str] = None,
                 bdm_version: Optional[str] = None,
                 bds_version: Optional[str] = None,
                 big_data_manager_url: Optional[str] = None,
                 cloudera_manager_url: Optional[str] = None,
                 csql_cell_version: Optional[str] = None,
                 db_version: Optional[str] = None,
                 hue_server_url: Optional[str] = None,
                 jupyter_hub_url: Optional[str] = None,
                 odh_version: Optional[str] = None,
                 os_version: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_refreshed: Optional[str] = None):
        if ambari_url is not None:
            pulumi.set(__self__, "ambari_url", ambari_url)
        if bd_cell_version is not None:
            pulumi.set(__self__, "bd_cell_version", bd_cell_version)
        if bda_version is not None:
            pulumi.set(__self__, "bda_version", bda_version)
        if bdm_version is not None:
            pulumi.set(__self__, "bdm_version", bdm_version)
        if bds_version is not None:
            pulumi.set(__self__, "bds_version", bds_version)
        if big_data_manager_url is not None:
            pulumi.set(__self__, "big_data_manager_url", big_data_manager_url)
        if cloudera_manager_url is not None:
            pulumi.set(__self__, "cloudera_manager_url", cloudera_manager_url)
        if csql_cell_version is not None:
            pulumi.set(__self__, "csql_cell_version", csql_cell_version)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if hue_server_url is not None:
            pulumi.set(__self__, "hue_server_url", hue_server_url)
        if jupyter_hub_url is not None:
            pulumi.set(__self__, "jupyter_hub_url", jupyter_hub_url)
        if odh_version is not None:
            pulumi.set(__self__, "odh_version", odh_version)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_refreshed is not None:
            pulumi.set(__self__, "time_refreshed", time_refreshed)

    @property
    @pulumi.getter(name="ambariUrl")
    def ambari_url(self) -> Optional[str]:
        return pulumi.get(self, "ambari_url")

    @property
    @pulumi.getter(name="bdCellVersion")
    def bd_cell_version(self) -> Optional[str]:
        return pulumi.get(self, "bd_cell_version")

    @property
    @pulumi.getter(name="bdaVersion")
    def bda_version(self) -> Optional[str]:
        return pulumi.get(self, "bda_version")

    @property
    @pulumi.getter(name="bdmVersion")
    def bdm_version(self) -> Optional[str]:
        return pulumi.get(self, "bdm_version")

    @property
    @pulumi.getter(name="bdsVersion")
    def bds_version(self) -> Optional[str]:
        return pulumi.get(self, "bds_version")

    @property
    @pulumi.getter(name="bigDataManagerUrl")
    def big_data_manager_url(self) -> Optional[str]:
        return pulumi.get(self, "big_data_manager_url")

    @property
    @pulumi.getter(name="clouderaManagerUrl")
    def cloudera_manager_url(self) -> Optional[str]:
        return pulumi.get(self, "cloudera_manager_url")

    @property
    @pulumi.getter(name="csqlCellVersion")
    def csql_cell_version(self) -> Optional[str]:
        return pulumi.get(self, "csql_cell_version")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="hueServerUrl")
    def hue_server_url(self) -> Optional[str]:
        return pulumi.get(self, "hue_server_url")

    @property
    @pulumi.getter(name="jupyterHubUrl")
    def jupyter_hub_url(self) -> Optional[str]:
        return pulumi.get(self, "jupyter_hub_url")

    @property
    @pulumi.getter(name="odhVersion")
    def odh_version(self) -> Optional[str]:
        return pulumi.get(self, "odh_version")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[str]:
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeRefreshed")
    def time_refreshed(self) -> Optional[str]:
        return pulumi.get(self, "time_refreshed")


@pulumi.output_type
class GetBdsInstancesBdsInstanceComputeOnlyWorkerNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: Optional[str] = None,
                 number_of_nodes: Optional[int] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceComputeOnlyWorkerNodeShapeConfigResult']] = None,
                 subnet_id: Optional[str] = None):
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if number_of_nodes is not None:
            pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceComputeOnlyWorkerNodeShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstancesBdsInstanceComputeOnlyWorkerNodeShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetBdsInstancesBdsInstanceEdgeNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: Optional[str] = None,
                 number_of_nodes: Optional[int] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceEdgeNodeShapeConfigResult']] = None,
                 subnet_id: Optional[str] = None):
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if number_of_nodes is not None:
            pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceEdgeNodeShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstancesBdsInstanceEdgeNodeShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetBdsInstancesBdsInstanceKafkaBrokerNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: Optional[str] = None,
                 number_of_kafka_nodes: Optional[int] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceKafkaBrokerNodeShapeConfigResult']] = None,
                 subnet_id: Optional[str] = None):
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if number_of_kafka_nodes is not None:
            pulumi.set(__self__, "number_of_kafka_nodes", number_of_kafka_nodes)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfKafkaNodes")
    def number_of_kafka_nodes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_kafka_nodes")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceKafkaBrokerNodeShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstancesBdsInstanceKafkaBrokerNodeShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetBdsInstancesBdsInstanceMasterNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: Optional[str] = None,
                 number_of_nodes: Optional[int] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceMasterNodeShapeConfigResult']] = None,
                 subnet_id: Optional[str] = None):
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if number_of_nodes is not None:
            pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceMasterNodeShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstancesBdsInstanceMasterNodeShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetBdsInstancesBdsInstanceNetworkConfigResult(dict):
    def __init__(__self__, *,
                 cidr_block: Optional[str] = None,
                 is_nat_gateway_required: Optional[bool] = None):
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if is_nat_gateway_required is not None:
            pulumi.set(__self__, "is_nat_gateway_required", is_nat_gateway_required)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="isNatGatewayRequired")
    def is_nat_gateway_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_nat_gateway_required")


@pulumi.output_type
class GetBdsInstancesBdsInstanceNodeResult(dict):
    def __init__(__self__, *,
                 attached_block_volumes: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceNodeAttachedBlockVolumeResult']] = None,
                 availability_domain: Optional[str] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 hostname: Optional[str] = None,
                 image_id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 memory_in_gbs: Optional[int] = None,
                 node_type: Optional[str] = None,
                 ocpus: Optional[int] = None,
                 shape: Optional[str] = None,
                 ssh_fingerprint: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_maintenance_reboot_due: Optional[str] = None):
        if attached_block_volumes is not None:
            pulumi.set(__self__, "attached_block_volumes", attached_block_volumes)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if ssh_fingerprint is not None:
            pulumi.set(__self__, "ssh_fingerprint", ssh_fingerprint)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_maintenance_reboot_due is not None:
            pulumi.set(__self__, "time_maintenance_reboot_due", time_maintenance_reboot_due)

    @property
    @pulumi.getter(name="attachedBlockVolumes")
    def attached_block_volumes(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceNodeAttachedBlockVolumeResult']]:
        return pulumi.get(self, "attached_block_volumes")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[str]:
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="sshFingerprint")
    def ssh_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "ssh_fingerprint")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeMaintenanceRebootDue")
    def time_maintenance_reboot_due(self) -> Optional[str]:
        return pulumi.get(self, "time_maintenance_reboot_due")


@pulumi.output_type
class GetBdsInstancesBdsInstanceNodeAttachedBlockVolumeResult(dict):
    def __init__(__self__, *,
                 volume_attachment_id: Optional[str] = None,
                 volume_size_in_gbs: Optional[str] = None):
        if volume_attachment_id is not None:
            pulumi.set(__self__, "volume_attachment_id", volume_attachment_id)
        if volume_size_in_gbs is not None:
            pulumi.set(__self__, "volume_size_in_gbs", volume_size_in_gbs)

    @property
    @pulumi.getter(name="volumeAttachmentId")
    def volume_attachment_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_attachment_id")

    @property
    @pulumi.getter(name="volumeSizeInGbs")
    def volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "volume_size_in_gbs")


@pulumi.output_type
class GetBdsInstancesBdsInstanceUtilNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: Optional[str] = None,
                 number_of_nodes: Optional[int] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceUtilNodeShapeConfigResult']] = None,
                 subnet_id: Optional[str] = None):
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if number_of_nodes is not None:
            pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceUtilNodeShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstancesBdsInstanceUtilNodeShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetBdsInstancesBdsInstanceWorkerNodeResult(dict):
    def __init__(__self__, *,
                 block_volume_size_in_gbs: Optional[str] = None,
                 number_of_nodes: Optional[int] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetBdsInstancesBdsInstanceWorkerNodeShapeConfigResult']] = None,
                 subnet_id: Optional[str] = None):
        if block_volume_size_in_gbs is not None:
            pulumi.set(__self__, "block_volume_size_in_gbs", block_volume_size_in_gbs)
        if number_of_nodes is not None:
            pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockVolumeSizeInGbs")
    def block_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_size_in_gbs")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetBdsInstancesBdsInstanceWorkerNodeShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBdsInstancesBdsInstanceWorkerNodeShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[int] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetBdsInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


