# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAlertRulesResult',
    'AwaitableGetAlertRulesResult',
    'get_alert_rules',
    'get_alert_rules_output',
]

@pulumi.output_type
class GetAlertRulesResult:
    """
    A collection of values returned by getAlertRules.
    """
    def __init__(__self__, alert_rules=None, budget_id=None, display_name=None, filters=None, id=None, state=None):
        if alert_rules and not isinstance(alert_rules, list):
            raise TypeError("Expected argument 'alert_rules' to be a list")
        pulumi.set(__self__, "alert_rules", alert_rules)
        if budget_id and not isinstance(budget_id, str):
            raise TypeError("Expected argument 'budget_id' to be a str")
        pulumi.set(__self__, "budget_id", budget_id)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="alertRules")
    def alert_rules(self) -> Sequence['outputs.GetAlertRulesAlertRuleResult']:
        """
        The list of alert_rules.
        """
        return pulumi.get(self, "alert_rules")

    @property
    @pulumi.getter(name="budgetId")
    def budget_id(self) -> str:
        """
        The OCID of the budget.
        """
        return pulumi.get(self, "budget_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The name of the alert rule. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetAlertRulesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of the alert rule.
        """
        return pulumi.get(self, "state")


class AwaitableGetAlertRulesResult(GetAlertRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlertRulesResult(
            alert_rules=self.alert_rules,
            budget_id=self.budget_id,
            display_name=self.display_name,
            filters=self.filters,
            id=self.id,
            state=self.state)


def get_alert_rules(budget_id: Optional[str] = None,
                    display_name: Optional[str] = None,
                    filters: Optional[Sequence[pulumi.InputType['GetAlertRulesFilterArgs']]] = None,
                    state: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlertRulesResult:
    """
    This data source provides the list of Alert Rules in Oracle Cloud Infrastructure Budget service.

    Returns a list of Alert Rules for a specified budget.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_alert_rules = oci.Budget.get_alert_rules(budget_id=oci_budget_budget["test_budget"]["id"],
        display_name=var["alert_rule_display_name"],
        state=var["alert_rule_state"])
    ```


    :param str budget_id: The unique budget OCID.
    :param str display_name: A user-friendly name. This does not have to be unique, and it's changeable.  Example: `My new resource`
    :param str state: The current state of the resource to filter by.
    """
    __args__ = dict()
    __args__['budgetId'] = budget_id
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Budget/getAlertRules:getAlertRules', __args__, opts=opts, typ=GetAlertRulesResult).value

    return AwaitableGetAlertRulesResult(
        alert_rules=pulumi.get(__ret__, 'alert_rules'),
        budget_id=pulumi.get(__ret__, 'budget_id'),
        display_name=pulumi.get(__ret__, 'display_name'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        state=pulumi.get(__ret__, 'state'))


@_utilities.lift_output_func(get_alert_rules)
def get_alert_rules_output(budget_id: Optional[pulumi.Input[str]] = None,
                           display_name: Optional[pulumi.Input[Optional[str]]] = None,
                           filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetAlertRulesFilterArgs']]]]] = None,
                           state: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAlertRulesResult]:
    """
    This data source provides the list of Alert Rules in Oracle Cloud Infrastructure Budget service.

    Returns a list of Alert Rules for a specified budget.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_alert_rules = oci.Budget.get_alert_rules(budget_id=oci_budget_budget["test_budget"]["id"],
        display_name=var["alert_rule_display_name"],
        state=var["alert_rule_state"])
    ```


    :param str budget_id: The unique budget OCID.
    :param str display_name: A user-friendly name. This does not have to be unique, and it's changeable.  Example: `My new resource`
    :param str state: The current state of the resource to filter by.
    """
    ...
