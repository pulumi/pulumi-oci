# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['OccCustomerGroupOccCustomerArgs', 'OccCustomerGroupOccCustomer']

@pulumi.input_type
class OccCustomerGroupOccCustomerArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 occ_customer_group_id: pulumi.Input[str],
                 tenancy_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OccCustomerGroupOccCustomer resource.
        :param pulumi.Input[str] display_name: (Updatable) The display name for the customer.
        :param pulumi.Input[str] occ_customer_group_id: The OCID of the customer group.
        :param pulumi.Input[str] tenancy_id: The OCID of the tenancy belonging to the customer.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] description: (Updatable) The description about the customer group.
        :param pulumi.Input[str] status: (Updatable) To determine whether the customer is enabled/disabled.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "occ_customer_group_id", occ_customer_group_id)
        pulumi.set(__self__, "tenancy_id", tenancy_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        (Updatable) The display name for the customer.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> pulumi.Input[str]:
        """
        The OCID of the customer group.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @occ_customer_group_id.setter
    def occ_customer_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "occ_customer_group_id", value)

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> pulumi.Input[str]:
        """
        The OCID of the tenancy belonging to the customer.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "tenancy_id")

    @tenancy_id.setter
    def tenancy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenancy_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The description about the customer group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) To determine whether the customer is enabled/disabled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _OccCustomerGroupOccCustomerState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 occ_customer_group_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tenancy_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OccCustomerGroupOccCustomer resources.
        :param pulumi.Input[str] description: (Updatable) The description about the customer group.
        :param pulumi.Input[str] display_name: (Updatable) The display name for the customer.
        :param pulumi.Input[str] occ_customer_group_id: The OCID of the customer group.
        :param pulumi.Input[str] status: (Updatable) To determine whether the customer is enabled/disabled.
        :param pulumi.Input[str] tenancy_id: The OCID of the tenancy belonging to the customer.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if occ_customer_group_id is not None:
            pulumi.set(__self__, "occ_customer_group_id", occ_customer_group_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tenancy_id is not None:
            pulumi.set(__self__, "tenancy_id", tenancy_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The description about the customer group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The display name for the customer.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OCID of the customer group.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @occ_customer_group_id.setter
    def occ_customer_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "occ_customer_group_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) To determine whether the customer is enabled/disabled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OCID of the tenancy belonging to the customer.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "tenancy_id")

    @tenancy_id.setter
    def tenancy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenancy_id", value)


class OccCustomerGroupOccCustomer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 occ_customer_group_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tenancy_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource provides the Occ Customer Group Occ Customer resource in Oracle Cloud Infrastructure Capacity Management service.

        Create customer.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_occ_customer_group_occ_customer = oci.capacity_management.OccCustomerGroupOccCustomer("test_occ_customer_group_occ_customer",
            display_name=occ_customer_group_occ_customer_display_name,
            occ_customer_group_id=test_occ_customer_group["id"],
            tenancy_id=test_tenancy["id"],
            description=occ_customer_group_occ_customer_description,
            status=occ_customer_group_occ_customer_status)
        ```

        ## Import

        OccCustomerGroupOccCustomers can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:CapacityManagement/occCustomerGroupOccCustomer:OccCustomerGroupOccCustomer test_occ_customer_group_occ_customer "id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: (Updatable) The description about the customer group.
        :param pulumi.Input[str] display_name: (Updatable) The display name for the customer.
        :param pulumi.Input[str] occ_customer_group_id: The OCID of the customer group.
        :param pulumi.Input[str] status: (Updatable) To determine whether the customer is enabled/disabled.
        :param pulumi.Input[str] tenancy_id: The OCID of the tenancy belonging to the customer.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OccCustomerGroupOccCustomerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Occ Customer Group Occ Customer resource in Oracle Cloud Infrastructure Capacity Management service.

        Create customer.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_occ_customer_group_occ_customer = oci.capacity_management.OccCustomerGroupOccCustomer("test_occ_customer_group_occ_customer",
            display_name=occ_customer_group_occ_customer_display_name,
            occ_customer_group_id=test_occ_customer_group["id"],
            tenancy_id=test_tenancy["id"],
            description=occ_customer_group_occ_customer_description,
            status=occ_customer_group_occ_customer_status)
        ```

        ## Import

        OccCustomerGroupOccCustomers can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:CapacityManagement/occCustomerGroupOccCustomer:OccCustomerGroupOccCustomer test_occ_customer_group_occ_customer "id"
        ```

        :param str resource_name: The name of the resource.
        :param OccCustomerGroupOccCustomerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OccCustomerGroupOccCustomerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 occ_customer_group_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tenancy_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OccCustomerGroupOccCustomerArgs.__new__(OccCustomerGroupOccCustomerArgs)

            __props__.__dict__["description"] = description
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            if occ_customer_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'occ_customer_group_id'")
            __props__.__dict__["occ_customer_group_id"] = occ_customer_group_id
            __props__.__dict__["status"] = status
            if tenancy_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenancy_id'")
            __props__.__dict__["tenancy_id"] = tenancy_id
        super(OccCustomerGroupOccCustomer, __self__).__init__(
            'oci:CapacityManagement/occCustomerGroupOccCustomer:OccCustomerGroupOccCustomer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            occ_customer_group_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tenancy_id: Optional[pulumi.Input[str]] = None) -> 'OccCustomerGroupOccCustomer':
        """
        Get an existing OccCustomerGroupOccCustomer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: (Updatable) The description about the customer group.
        :param pulumi.Input[str] display_name: (Updatable) The display name for the customer.
        :param pulumi.Input[str] occ_customer_group_id: The OCID of the customer group.
        :param pulumi.Input[str] status: (Updatable) To determine whether the customer is enabled/disabled.
        :param pulumi.Input[str] tenancy_id: The OCID of the tenancy belonging to the customer.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OccCustomerGroupOccCustomerState.__new__(_OccCustomerGroupOccCustomerState)

        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["occ_customer_group_id"] = occ_customer_group_id
        __props__.__dict__["status"] = status
        __props__.__dict__["tenancy_id"] = tenancy_id
        return OccCustomerGroupOccCustomer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        (Updatable) The description about the customer group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        (Updatable) The display name for the customer.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> pulumi.Output[str]:
        """
        The OCID of the customer group.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        (Updatable) To determine whether the customer is enabled/disabled.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> pulumi.Output[str]:
        """
        The OCID of the tenancy belonging to the customer.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "tenancy_id")

