# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'OccAvailabilityCatalogDetail',
    'OccAvailabilityCatalogMetadataDetails',
    'OccCapacityRequestDetail',
    'OccCapacityRequestDetailAssociatedOccHandoverResourceBlockList',
    'OccCapacityRequestPatchOperation',
    'OccCustomerGroupCustomersList',
    'GetInternalNamespaceOccOverviewsFilterResult',
    'GetInternalNamespaceOccOverviewsOccOverviewCollectionResult',
    'GetInternalNamespaceOccOverviewsOccOverviewCollectionItemResult',
    'GetInternalOccAvailabilityCatalogsFilterResult',
    'GetInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionResult',
    'GetInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemResult',
    'GetInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemMetadataDetailResult',
    'GetInternalOccHandoverResourceBlockDetailsFilterResult',
    'GetInternalOccHandoverResourceBlockDetailsOccHandoverResourceBlockDetailCollectionResult',
    'GetInternalOccHandoverResourceBlockDetailsOccHandoverResourceBlockDetailCollectionItemResult',
    'GetInternalOccHandoverResourceBlocksFilterResult',
    'GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionResult',
    'GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemResult',
    'GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemAssociatedCapacityRequestResult',
    'GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemPlacementDetailResult',
    'GetInternalOccmDemandSignalCatalogResourcesFilterResult',
    'GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionResult',
    'GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResult',
    'GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyResult',
    'GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintResult',
    'GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintItemResult',
    'GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemResult',
    'GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemPropertyOptionResult',
    'GetInternalOccmDemandSignalCatalogsFilterResult',
    'GetInternalOccmDemandSignalCatalogsOccmDemandSignalCatalogCollectionResult',
    'GetInternalOccmDemandSignalCatalogsOccmDemandSignalCatalogCollectionItemResult',
    'GetInternalOccmDemandSignalDeliveriesFilterResult',
    'GetInternalOccmDemandSignalDeliveriesInternalOccmDemandSignalDeliveryCollectionResult',
    'GetInternalOccmDemandSignalDeliveriesInternalOccmDemandSignalDeliveryCollectionItemResult',
    'GetInternalOccmDemandSignalItemsFilterResult',
    'GetInternalOccmDemandSignalItemsInternalOccmDemandSignalItemCollectionResult',
    'GetInternalOccmDemandSignalItemsInternalOccmDemandSignalItemCollectionItemResult',
    'GetInternalOccmDemandSignalsFilterResult',
    'GetInternalOccmDemandSignalsInternalOccmDemandSignalCollectionResult',
    'GetInternalOccmDemandSignalsInternalOccmDemandSignalCollectionItemResult',
    'GetNamespaceOccOverviewsFilterResult',
    'GetNamespaceOccOverviewsOccOverviewCollectionResult',
    'GetNamespaceOccOverviewsOccOverviewCollectionItemResult',
    'GetOccAvailabilityCatalogDetailResult',
    'GetOccAvailabilityCatalogMetadataDetailResult',
    'GetOccAvailabilityCatalogOccAvailabilitiesFilterResult',
    'GetOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollectionResult',
    'GetOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollectionItemResult',
    'GetOccAvailabilityCatalogsFilterResult',
    'GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionResult',
    'GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemResult',
    'GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemDetailResult',
    'GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemMetadataDetailResult',
    'GetOccCapacityRequestDetailResult',
    'GetOccCapacityRequestDetailAssociatedOccHandoverResourceBlockListResult',
    'GetOccCapacityRequestPatchOperationResult',
    'GetOccCapacityRequestsFilterResult',
    'GetOccCapacityRequestsOccCapacityRequestCollectionResult',
    'GetOccCapacityRequestsOccCapacityRequestCollectionItemResult',
    'GetOccCapacityRequestsOccCapacityRequestCollectionItemDetailResult',
    'GetOccCapacityRequestsOccCapacityRequestCollectionItemDetailAssociatedOccHandoverResourceBlockListResult',
    'GetOccCapacityRequestsOccCapacityRequestCollectionItemPatchOperationResult',
    'GetOccCustomerGroupCustomersListResult',
    'GetOccCustomerGroupsFilterResult',
    'GetOccCustomerGroupsOccCustomerGroupCollectionResult',
    'GetOccCustomerGroupsOccCustomerGroupCollectionItemResult',
    'GetOccCustomerGroupsOccCustomerGroupCollectionItemCustomersListResult',
    'GetOccHandoverResourceBlockDetailsFilterResult',
    'GetOccHandoverResourceBlockDetailsOccHandoverResourceBlockDetailCollectionResult',
    'GetOccHandoverResourceBlockDetailsOccHandoverResourceBlockDetailCollectionItemResult',
    'GetOccHandoverResourceBlocksFilterResult',
    'GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionResult',
    'GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemResult',
    'GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemAssociatedCapacityRequestResult',
    'GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemPlacementDetailResult',
    'GetOccmDemandSignalCatalogResourcesFilterResult',
    'GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionResult',
    'GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResult',
    'GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyResult',
    'GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintResult',
    'GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintItemResult',
    'GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemResult',
    'GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemPropertyOptionResult',
    'GetOccmDemandSignalDeliveriesFilterResult',
    'GetOccmDemandSignalDeliveriesOccmDemandSignalDeliveryCollectionResult',
    'GetOccmDemandSignalDeliveriesOccmDemandSignalDeliveryCollectionItemResult',
    'GetOccmDemandSignalItemsFilterResult',
    'GetOccmDemandSignalItemsOccmDemandSignalItemCollectionResult',
    'GetOccmDemandSignalItemsOccmDemandSignalItemCollectionItemResult',
    'GetOccmDemandSignalsFilterResult',
    'GetOccmDemandSignalsOccmDemandSignalCollectionResult',
    'GetOccmDemandSignalsOccmDemandSignalCollectionItemResult',
]

@pulumi.output_type
class OccAvailabilityCatalogDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availableQuantity":
            suggest = "available_quantity"
        elif key == "catalogId":
            suggest = "catalog_id"
        elif key == "dateExpectedCapacityHandover":
            suggest = "date_expected_capacity_handover"
        elif key == "dateFinalCustomerOrder":
            suggest = "date_final_customer_order"
        elif key == "demandedQuantity":
            suggest = "demanded_quantity"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "systemTags":
            suggest = "system_tags"
        elif key == "totalAvailableQuantity":
            suggest = "total_available_quantity"
        elif key == "workloadType":
            suggest = "workload_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OccAvailabilityCatalogDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OccAvailabilityCatalogDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OccAvailabilityCatalogDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 available_quantity: Optional[_builtins.str] = None,
                 catalog_id: Optional[_builtins.str] = None,
                 date_expected_capacity_handover: Optional[_builtins.str] = None,
                 date_final_customer_order: Optional[_builtins.str] = None,
                 demanded_quantity: Optional[_builtins.str] = None,
                 namespace: Optional[_builtins.str] = None,
                 resource_name: Optional[_builtins.str] = None,
                 resource_type: Optional[_builtins.str] = None,
                 system_tags: Optional[Mapping[str, _builtins.str]] = None,
                 total_available_quantity: Optional[_builtins.str] = None,
                 unit: Optional[_builtins.str] = None,
                 workload_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str available_quantity: The quantity of resource currently available that the customer can request.
        :param _builtins.str catalog_id: The OCID of the availability catalog.
        :param _builtins.str date_expected_capacity_handover: The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
        :param _builtins.str date_final_customer_order: The date by which the customer must place the order to have their capacity requirements met by the customer handover date.
        :param _builtins.str demanded_quantity: The quantity of resource currently demanded by the customer.
        :param _builtins.str namespace: The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
        :param _builtins.str resource_name: The name of the resource that the customer can request.
        :param _builtins.str resource_type: The different types of resources against which customers can place capacity requests.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str total_available_quantity: The total quantity of resource that the customer can request.
        :param _builtins.str unit: The unit in which the resource available is measured.
        :param _builtins.str workload_type: The type of workload (Generic/ROW).
        """
        if available_quantity is not None:
            pulumi.set(__self__, "available_quantity", available_quantity)
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if date_expected_capacity_handover is not None:
            pulumi.set(__self__, "date_expected_capacity_handover", date_expected_capacity_handover)
        if date_final_customer_order is not None:
            pulumi.set(__self__, "date_final_customer_order", date_final_customer_order)
        if demanded_quantity is not None:
            pulumi.set(__self__, "demanded_quantity", demanded_quantity)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if total_available_quantity is not None:
            pulumi.set(__self__, "total_available_quantity", total_available_quantity)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @_builtins.property
    @pulumi.getter(name="availableQuantity")
    def available_quantity(self) -> Optional[_builtins.str]:
        """
        The quantity of resource currently available that the customer can request.
        """
        return pulumi.get(self, "available_quantity")

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the availability catalog.
        """
        return pulumi.get(self, "catalog_id")

    @_builtins.property
    @pulumi.getter(name="dateExpectedCapacityHandover")
    def date_expected_capacity_handover(self) -> Optional[_builtins.str]:
        """
        The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
        """
        return pulumi.get(self, "date_expected_capacity_handover")

    @_builtins.property
    @pulumi.getter(name="dateFinalCustomerOrder")
    def date_final_customer_order(self) -> Optional[_builtins.str]:
        """
        The date by which the customer must place the order to have their capacity requirements met by the customer handover date.
        """
        return pulumi.get(self, "date_final_customer_order")

    @_builtins.property
    @pulumi.getter(name="demandedQuantity")
    def demanded_quantity(self) -> Optional[_builtins.str]:
        """
        The quantity of resource currently demanded by the customer.
        """
        return pulumi.get(self, "demanded_quantity")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        """
        The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[_builtins.str]:
        """
        The name of the resource that the customer can request.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        """
        The different types of resources against which customers can place capacity requests.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="totalAvailableQuantity")
    def total_available_quantity(self) -> Optional[_builtins.str]:
        """
        The total quantity of resource that the customer can request.
        """
        return pulumi.get(self, "total_available_quantity")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> Optional[_builtins.str]:
        """
        The unit in which the resource available is measured.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[_builtins.str]:
        """
        The type of workload (Generic/ROW).
        """
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class OccAvailabilityCatalogMetadataDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatVersion":
            suggest = "format_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OccAvailabilityCatalogMetadataDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OccAvailabilityCatalogMetadataDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OccAvailabilityCatalogMetadataDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_version: _builtins.str):
        """
        :param _builtins.str format_version: The version for the format of the catalog file being uploaded.
        """
        pulumi.set(__self__, "format_version", format_version)

    @_builtins.property
    @pulumi.getter(name="formatVersion")
    def format_version(self) -> _builtins.str:
        """
        The version for the format of the catalog file being uploaded.
        """
        return pulumi.get(self, "format_version")


@pulumi.output_type
class OccCapacityRequestDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "demandQuantity":
            suggest = "demand_quantity"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "workloadType":
            suggest = "workload_type"
        elif key == "actualHandoverQuantity":
            suggest = "actual_handover_quantity"
        elif key == "associatedOccHandoverResourceBlockLists":
            suggest = "associated_occ_handover_resource_block_lists"
        elif key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "dateActualHandover":
            suggest = "date_actual_handover"
        elif key == "dateExpectedHandover":
            suggest = "date_expected_handover"
        elif key == "expectedHandoverQuantity":
            suggest = "expected_handover_quantity"
        elif key == "sourceWorkloadType":
            suggest = "source_workload_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OccCapacityRequestDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OccCapacityRequestDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OccCapacityRequestDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 demand_quantity: _builtins.str,
                 resource_name: _builtins.str,
                 resource_type: _builtins.str,
                 workload_type: _builtins.str,
                 actual_handover_quantity: Optional[_builtins.str] = None,
                 associated_occ_handover_resource_block_lists: Optional[Sequence['outputs.OccCapacityRequestDetailAssociatedOccHandoverResourceBlockList']] = None,
                 availability_domain: Optional[_builtins.str] = None,
                 date_actual_handover: Optional[_builtins.str] = None,
                 date_expected_handover: Optional[_builtins.str] = None,
                 expected_handover_quantity: Optional[_builtins.str] = None,
                 source_workload_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str demand_quantity: The number of compute server's with name <resourceName> required by the user.
        :param _builtins.str resource_name: The name of the COMPUTE server shape for which the request is made. Do not use CAPACITY_CONSTRAINT as the resource name.
        :param _builtins.str resource_type: The type of the resource against which the user wants to place a capacity request.
        :param _builtins.str workload_type: The type of the workload (Generic/ROW).
        :param _builtins.str actual_handover_quantity: The actual handed over quantity of resources at the time of request resolution.
        :param Sequence['OccCapacityRequestDetailAssociatedOccHandoverResourceBlockListArgs'] associated_occ_handover_resource_block_lists: A list containing details about occHandoverResourceBlocks which were handed over for the corresponding resource name.
        :param _builtins.str availability_domain: The availability domain of the resource which is to be transferred. Note that this is only required for Capacity Request Transfer requests.
        :param _builtins.str date_actual_handover: The date on which the actual handover quantity of resources is delivered.
        :param _builtins.str date_expected_handover: The date on which the latest increment to supplied quantity of resources was delivered.
        :param _builtins.str expected_handover_quantity: The incremental quantity of resources supplied as the provisioning is underway.
        :param _builtins.str source_workload_type: The WorkloadType from where capacity request are to be transferred.
        """
        pulumi.set(__self__, "demand_quantity", demand_quantity)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "workload_type", workload_type)
        if actual_handover_quantity is not None:
            pulumi.set(__self__, "actual_handover_quantity", actual_handover_quantity)
        if associated_occ_handover_resource_block_lists is not None:
            pulumi.set(__self__, "associated_occ_handover_resource_block_lists", associated_occ_handover_resource_block_lists)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if date_actual_handover is not None:
            pulumi.set(__self__, "date_actual_handover", date_actual_handover)
        if date_expected_handover is not None:
            pulumi.set(__self__, "date_expected_handover", date_expected_handover)
        if expected_handover_quantity is not None:
            pulumi.set(__self__, "expected_handover_quantity", expected_handover_quantity)
        if source_workload_type is not None:
            pulumi.set(__self__, "source_workload_type", source_workload_type)

    @_builtins.property
    @pulumi.getter(name="demandQuantity")
    def demand_quantity(self) -> _builtins.str:
        """
        The number of compute server's with name <resourceName> required by the user.
        """
        return pulumi.get(self, "demand_quantity")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the COMPUTE server shape for which the request is made. Do not use CAPACITY_CONSTRAINT as the resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The type of the resource against which the user wants to place a capacity request.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> _builtins.str:
        """
        The type of the workload (Generic/ROW).
        """
        return pulumi.get(self, "workload_type")

    @_builtins.property
    @pulumi.getter(name="actualHandoverQuantity")
    def actual_handover_quantity(self) -> Optional[_builtins.str]:
        """
        The actual handed over quantity of resources at the time of request resolution.
        """
        return pulumi.get(self, "actual_handover_quantity")

    @_builtins.property
    @pulumi.getter(name="associatedOccHandoverResourceBlockLists")
    def associated_occ_handover_resource_block_lists(self) -> Optional[Sequence['outputs.OccCapacityRequestDetailAssociatedOccHandoverResourceBlockList']]:
        """
        A list containing details about occHandoverResourceBlocks which were handed over for the corresponding resource name.
        """
        return pulumi.get(self, "associated_occ_handover_resource_block_lists")

    @_builtins.property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[_builtins.str]:
        """
        The availability domain of the resource which is to be transferred. Note that this is only required for Capacity Request Transfer requests.
        """
        return pulumi.get(self, "availability_domain")

    @_builtins.property
    @pulumi.getter(name="dateActualHandover")
    def date_actual_handover(self) -> Optional[_builtins.str]:
        """
        The date on which the actual handover quantity of resources is delivered.
        """
        return pulumi.get(self, "date_actual_handover")

    @_builtins.property
    @pulumi.getter(name="dateExpectedHandover")
    def date_expected_handover(self) -> Optional[_builtins.str]:
        """
        The date on which the latest increment to supplied quantity of resources was delivered.
        """
        return pulumi.get(self, "date_expected_handover")

    @_builtins.property
    @pulumi.getter(name="expectedHandoverQuantity")
    def expected_handover_quantity(self) -> Optional[_builtins.str]:
        """
        The incremental quantity of resources supplied as the provisioning is underway.
        """
        return pulumi.get(self, "expected_handover_quantity")

    @_builtins.property
    @pulumi.getter(name="sourceWorkloadType")
    def source_workload_type(self) -> Optional[_builtins.str]:
        """
        The WorkloadType from where capacity request are to be transferred.
        """
        return pulumi.get(self, "source_workload_type")


@pulumi.output_type
class OccCapacityRequestDetailAssociatedOccHandoverResourceBlockList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "handoverQuantity":
            suggest = "handover_quantity"
        elif key == "occHandoverResourceBlockId":
            suggest = "occ_handover_resource_block_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OccCapacityRequestDetailAssociatedOccHandoverResourceBlockList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OccCapacityRequestDetailAssociatedOccHandoverResourceBlockList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OccCapacityRequestDetailAssociatedOccHandoverResourceBlockList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 handover_quantity: Optional[_builtins.str] = None,
                 occ_handover_resource_block_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str handover_quantity: The total quantity of the resource that was made available to the customer as part of this resource block
        :param _builtins.str occ_handover_resource_block_id: The OCID of the handed over resource block.
        """
        if handover_quantity is not None:
            pulumi.set(__self__, "handover_quantity", handover_quantity)
        if occ_handover_resource_block_id is not None:
            pulumi.set(__self__, "occ_handover_resource_block_id", occ_handover_resource_block_id)

    @_builtins.property
    @pulumi.getter(name="handoverQuantity")
    def handover_quantity(self) -> Optional[_builtins.str]:
        """
        The total quantity of the resource that was made available to the customer as part of this resource block
        """
        return pulumi.get(self, "handover_quantity")

    @_builtins.property
    @pulumi.getter(name="occHandoverResourceBlockId")
    def occ_handover_resource_block_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the handed over resource block.
        """
        return pulumi.get(self, "occ_handover_resource_block_id")


@pulumi.output_type
class OccCapacityRequestPatchOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"
        elif key == "selectedItem":
            suggest = "selected_item"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OccCapacityRequestPatchOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OccCapacityRequestPatchOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OccCapacityRequestPatchOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: _builtins.str,
                 operation: _builtins.str,
                 selection: _builtins.str,
                 value: Mapping[str, _builtins.str],
                 position: Optional[_builtins.str] = None,
                 selected_item: Optional[_builtins.str] = None):
        """
        :param _builtins.str from_: (Updatable)
        :param _builtins.str operation: (Updatable) The operation can be one of these values: `INSERT`, `INSERT_MULTIPLE`, `MERGE`, `MOVE`, `PROHIBIT`, `REMOVE`, `REPLACE`, `REQUIRE`
        :param _builtins.str selection: (Updatable)
        :param Mapping[str, _builtins.str] value: (Updatable)
        :param _builtins.str position: (Updatable)
        :param _builtins.str selected_item: (Updatable)
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "selection", selection)
        pulumi.set(__self__, "value", value)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if selected_item is not None:
            pulumi.set(__self__, "selected_item", selected_item)

    @_builtins.property
    @pulumi.getter(name="from")
    def from_(self) -> _builtins.str:
        """
        (Updatable)
        """
        return pulumi.get(self, "from_")

    @_builtins.property
    @pulumi.getter
    def operation(self) -> _builtins.str:
        """
        (Updatable) The operation can be one of these values: `INSERT`, `INSERT_MULTIPLE`, `MERGE`, `MOVE`, `PROHIBIT`, `REMOVE`, `REPLACE`, `REQUIRE`
        """
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter
    def selection(self) -> _builtins.str:
        """
        (Updatable)
        """
        return pulumi.get(self, "selection")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Mapping[str, _builtins.str]:
        """
        (Updatable)
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter
    def position(self) -> Optional[_builtins.str]:
        """
        (Updatable)
        """
        return pulumi.get(self, "position")

    @_builtins.property
    @pulumi.getter(name="selectedItem")
    def selected_item(self) -> Optional[_builtins.str]:
        """
        (Updatable)
        """
        return pulumi.get(self, "selected_item")


@pulumi.output_type
class OccCustomerGroupCustomersList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "tenancyId":
            suggest = "tenancy_id"
        elif key == "occCustomerGroupId":
            suggest = "occ_customer_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OccCustomerGroupCustomersList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OccCustomerGroupCustomersList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OccCustomerGroupCustomersList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: _builtins.str,
                 tenancy_id: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 occ_customer_group_id: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str display_name: The display name for the customer.
        :param _builtins.str tenancy_id: The OCID of the tenancy belonging to the customer.
        :param _builtins.str description: The description about the customer group.
        :param _builtins.str occ_customer_group_id: The OCID of the customer group.
        :param _builtins.str status: To determine whether the customer is enabled/disabled.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "tenancy_id", tenancy_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if occ_customer_group_id is not None:
            pulumi.set(__self__, "occ_customer_group_id", occ_customer_group_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name for the customer.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> _builtins.str:
        """
        The OCID of the tenancy belonging to the customer.
        """
        return pulumi.get(self, "tenancy_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description about the customer group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the customer group.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        To determine whether the customer is enabled/disabled.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetInternalNamespaceOccOverviewsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInternalNamespaceOccOverviewsOccOverviewCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInternalNamespaceOccOverviewsOccOverviewCollectionItemResult']):
        """
        :param Sequence['GetInternalNamespaceOccOverviewsOccOverviewCollectionItemArgs'] items: An array of overview summary.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInternalNamespaceOccOverviewsOccOverviewCollectionItemResult']:
        """
        An array of overview summary.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInternalNamespaceOccOverviewsOccOverviewCollectionItemResult(dict):
    def __init__(__self__, *,
                 capacity_requests_blob: _builtins.str,
                 compartment_id: _builtins.str,
                 period_value: _builtins.str,
                 resource_name: _builtins.str,
                 total_available: _builtins.str,
                 total_cancelled: _builtins.str,
                 total_demanded: _builtins.str,
                 total_rejected: _builtins.str,
                 total_supplied: _builtins.str,
                 total_unfulfilled: _builtins.str,
                 unit: _builtins.str,
                 workload_type_breakdown_blob: _builtins.str):
        """
        :param _builtins.str capacity_requests_blob: A raw json blob containing all the capacity requests corresponding to the resource name
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param _builtins.str period_value: The name of the month along with year for which this summary corresponds to.
        :param _builtins.str resource_name: The name of the resource for which we have aggregated the value.
        :param _builtins.str total_available: The quantity of the resource which is available at the end of the period of aggregationDetails model in consideration.
        :param _builtins.str total_cancelled: The quantity of the resource which is cancelled by the customer. Once the capacity request was submitted, the customer can still cancel it. This field sums up those values.
        :param _builtins.str total_demanded: The quantity of the resource which is demanded by customers via capacity requests against the resource name at the end of the time period in consideration for overview.
        :param _builtins.str total_rejected: The quantity of the resource which is rejected by Oracle.
        :param _builtins.str total_supplied: The quantity of the resource which is supplied by Oracle to the customer against the resource name at the end of the time period in consideration.
        :param _builtins.str total_unfulfilled: The quantity of the resource which Oracle was unable to supply. For a given capacity request, Oracle sometimes cannot supply the entire value demanded by the customer. In such cases a partial value is provided, thereby leaving behind a portion of unfulfilled values. This field sums that up.
        :param _builtins.str unit: The unit e.g SERVER in which the above values like totalAvailable, totalSupplied etc is measured.
        :param _builtins.str workload_type_breakdown_blob: A raw json blob containing breakdown of totalAvailable, totalDemanded, totalSupplied, totalRejected, totalCancelled and totalUnfulfilled by workload types
        """
        pulumi.set(__self__, "capacity_requests_blob", capacity_requests_blob)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "period_value", period_value)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "total_available", total_available)
        pulumi.set(__self__, "total_cancelled", total_cancelled)
        pulumi.set(__self__, "total_demanded", total_demanded)
        pulumi.set(__self__, "total_rejected", total_rejected)
        pulumi.set(__self__, "total_supplied", total_supplied)
        pulumi.set(__self__, "total_unfulfilled", total_unfulfilled)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "workload_type_breakdown_blob", workload_type_breakdown_blob)

    @_builtins.property
    @pulumi.getter(name="capacityRequestsBlob")
    def capacity_requests_blob(self) -> _builtins.str:
        """
        A raw json blob containing all the capacity requests corresponding to the resource name
        """
        return pulumi.get(self, "capacity_requests_blob")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="periodValue")
    def period_value(self) -> _builtins.str:
        """
        The name of the month along with year for which this summary corresponds to.
        """
        return pulumi.get(self, "period_value")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the resource for which we have aggregated the value.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="totalAvailable")
    def total_available(self) -> _builtins.str:
        """
        The quantity of the resource which is available at the end of the period of aggregationDetails model in consideration.
        """
        return pulumi.get(self, "total_available")

    @_builtins.property
    @pulumi.getter(name="totalCancelled")
    def total_cancelled(self) -> _builtins.str:
        """
        The quantity of the resource which is cancelled by the customer. Once the capacity request was submitted, the customer can still cancel it. This field sums up those values.
        """
        return pulumi.get(self, "total_cancelled")

    @_builtins.property
    @pulumi.getter(name="totalDemanded")
    def total_demanded(self) -> _builtins.str:
        """
        The quantity of the resource which is demanded by customers via capacity requests against the resource name at the end of the time period in consideration for overview.
        """
        return pulumi.get(self, "total_demanded")

    @_builtins.property
    @pulumi.getter(name="totalRejected")
    def total_rejected(self) -> _builtins.str:
        """
        The quantity of the resource which is rejected by Oracle.
        """
        return pulumi.get(self, "total_rejected")

    @_builtins.property
    @pulumi.getter(name="totalSupplied")
    def total_supplied(self) -> _builtins.str:
        """
        The quantity of the resource which is supplied by Oracle to the customer against the resource name at the end of the time period in consideration.
        """
        return pulumi.get(self, "total_supplied")

    @_builtins.property
    @pulumi.getter(name="totalUnfulfilled")
    def total_unfulfilled(self) -> _builtins.str:
        """
        The quantity of the resource which Oracle was unable to supply. For a given capacity request, Oracle sometimes cannot supply the entire value demanded by the customer. In such cases a partial value is provided, thereby leaving behind a portion of unfulfilled values. This field sums that up.
        """
        return pulumi.get(self, "total_unfulfilled")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The unit e.g SERVER in which the above values like totalAvailable, totalSupplied etc is measured.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter(name="workloadTypeBreakdownBlob")
    def workload_type_breakdown_blob(self) -> _builtins.str:
        """
        A raw json blob containing breakdown of totalAvailable, totalDemanded, totalSupplied, totalRejected, totalCancelled and totalUnfulfilled by workload types
        """
        return pulumi.get(self, "workload_type_breakdown_blob")


@pulumi.output_type
class GetInternalOccAvailabilityCatalogsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemResult']):
        """
        :param Sequence['GetInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemArgs'] items: An array of availability catalogs.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemResult']:
        """
        An array of availability catalogs.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemResult(dict):
    def __init__(__self__, *,
                 catalog_state: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 metadata_details: Sequence['outputs.GetInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemMetadataDetailResult'],
                 namespace: _builtins.str,
                 occ_customer_group_id: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str catalog_state: Filter the list of availability catalogs based on the catalog state.
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param _builtins.str description: Text information about the availability catalog.
        :param _builtins.str display_name: A filter to return only the resources that match the entire display name. The match is not case sensitive.
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: The OCID of the availability catalog to filter the list of availability catalogs.
        :param _builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed State.
        :param Sequence['GetInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemMetadataDetailArgs'] metadata_details: Used for representing the metadata of the catalog. This denotes the version and format of the CSV file for parsing.
        :param _builtins.str namespace: The namespace by which we would filter the list.
        :param _builtins.str occ_customer_group_id: The customer group ocid by which we would filter the list.
        :param _builtins.str state: The current lifecycle state of the customer group.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The time when the availability catalog was created.
        :param _builtins.str time_updated: The time when the availability catalog was last updated.
        """
        pulumi.set(__self__, "catalog_state", catalog_state)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "metadata_details", metadata_details)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "occ_customer_group_id", occ_customer_group_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="catalogState")
    def catalog_state(self) -> _builtins.str:
        """
        Filter the list of availability catalogs based on the catalog state.
        """
        return pulumi.get(self, "catalog_state")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Text information about the availability catalog.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only the resources that match the entire display name. The match is not case sensitive.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the availability catalog to filter the list of availability catalogs.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed State.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="metadataDetails")
    def metadata_details(self) -> Sequence['outputs.GetInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemMetadataDetailResult']:
        """
        Used for representing the metadata of the catalog. This denotes the version and format of the CSV file for parsing.
        """
        return pulumi.get(self, "metadata_details")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace by which we would filter the list.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> _builtins.str:
        """
        The customer group ocid by which we would filter the list.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current lifecycle state of the customer group.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time when the availability catalog was created.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The time when the availability catalog was last updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetInternalOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemMetadataDetailResult(dict):
    def __init__(__self__, *,
                 format_version: _builtins.str):
        """
        :param _builtins.str format_version: The version for the format of the catalog file being uploaded.
        """
        pulumi.set(__self__, "format_version", format_version)

    @_builtins.property
    @pulumi.getter(name="formatVersion")
    def format_version(self) -> _builtins.str:
        """
        The version for the format of the catalog file being uploaded.
        """
        return pulumi.get(self, "format_version")


@pulumi.output_type
class GetInternalOccHandoverResourceBlockDetailsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInternalOccHandoverResourceBlockDetailsOccHandoverResourceBlockDetailCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInternalOccHandoverResourceBlockDetailsOccHandoverResourceBlockDetailCollectionItemResult']):
        """
        :param Sequence['GetInternalOccHandoverResourceBlockDetailsOccHandoverResourceBlockDetailCollectionItemArgs'] items: An array of details about an occ handover resource block.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInternalOccHandoverResourceBlockDetailsOccHandoverResourceBlockDetailCollectionItemResult']:
        """
        An array of details about an occ handover resource block.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInternalOccHandoverResourceBlockDetailsOccHandoverResourceBlockDetailCollectionItemResult(dict):
    def __init__(__self__, *,
                 details: Mapping[str, _builtins.str],
                 occ_resource_handover_block_id: _builtins.str):
        """
        :param Mapping[str, _builtins.str] details: A map that contains additional details for a given handover resource. For example for compute namespace this includes host ocid, host serial etc.
        :param _builtins.str occ_resource_handover_block_id: The OCID of the occResourceHandoverBlock.
        """
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "occ_resource_handover_block_id", occ_resource_handover_block_id)

    @_builtins.property
    @pulumi.getter
    def details(self) -> Mapping[str, _builtins.str]:
        """
        A map that contains additional details for a given handover resource. For example for compute namespace this includes host ocid, host serial etc.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="occResourceHandoverBlockId")
    def occ_resource_handover_block_id(self) -> _builtins.str:
        """
        The OCID of the occResourceHandoverBlock.
        """
        return pulumi.get(self, "occ_resource_handover_block_id")


@pulumi.output_type
class GetInternalOccHandoverResourceBlocksFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemResult']):
        """
        :param Sequence['GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemArgs'] items: An array of occ handover resource blocks.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemResult']:
        """
        An array of occ handover resource blocks.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemResult(dict):
    def __init__(__self__, *,
                 associated_capacity_requests: Sequence['outputs.GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemAssociatedCapacityRequestResult'],
                 compartment_id: _builtins.str,
                 handover_date: _builtins.str,
                 handover_resource_name: _builtins.str,
                 id: _builtins.str,
                 namespace: _builtins.str,
                 occ_customer_group_id: _builtins.str,
                 placement_details: Sequence['outputs.GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemPlacementDetailResult'],
                 total_handover_quantity: _builtins.str):
        """
        :param Sequence['GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemAssociatedCapacityRequestArgs'] associated_capacity_requests: A list containing details about the capacity requests against which the resources were provisioned by oracle.
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param _builtins.str handover_date: The date on which the resource was handed over to the customer.
        :param _builtins.str handover_resource_name: A filter to return only the list of resources that match the name provided in this filter.
        :param _builtins.str id: The OCID of the resource block.
        :param _builtins.str namespace: The namespace enum value that needs to be passed as a required query parameter.
        :param _builtins.str occ_customer_group_id: The customer group ocid by which we would filter the list.
        :param Sequence['GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemPlacementDetailArgs'] placement_details: Details like building, room and block where the resource was placed after provisioning in the datacenter.
        :param _builtins.str total_handover_quantity: The total quantity of the resource that was made available to the customer by Oracle.
        """
        pulumi.set(__self__, "associated_capacity_requests", associated_capacity_requests)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "handover_date", handover_date)
        pulumi.set(__self__, "handover_resource_name", handover_resource_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "occ_customer_group_id", occ_customer_group_id)
        pulumi.set(__self__, "placement_details", placement_details)
        pulumi.set(__self__, "total_handover_quantity", total_handover_quantity)

    @_builtins.property
    @pulumi.getter(name="associatedCapacityRequests")
    def associated_capacity_requests(self) -> Sequence['outputs.GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemAssociatedCapacityRequestResult']:
        """
        A list containing details about the capacity requests against which the resources were provisioned by oracle.
        """
        return pulumi.get(self, "associated_capacity_requests")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="handoverDate")
    def handover_date(self) -> _builtins.str:
        """
        The date on which the resource was handed over to the customer.
        """
        return pulumi.get(self, "handover_date")

    @_builtins.property
    @pulumi.getter(name="handoverResourceName")
    def handover_resource_name(self) -> _builtins.str:
        """
        A filter to return only the list of resources that match the name provided in this filter.
        """
        return pulumi.get(self, "handover_resource_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the resource block.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace enum value that needs to be passed as a required query parameter.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> _builtins.str:
        """
        The customer group ocid by which we would filter the list.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @_builtins.property
    @pulumi.getter(name="placementDetails")
    def placement_details(self) -> Sequence['outputs.GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemPlacementDetailResult']:
        """
        Details like building, room and block where the resource was placed after provisioning in the datacenter.
        """
        return pulumi.get(self, "placement_details")

    @_builtins.property
    @pulumi.getter(name="totalHandoverQuantity")
    def total_handover_quantity(self) -> _builtins.str:
        """
        The total quantity of the resource that was made available to the customer by Oracle.
        """
        return pulumi.get(self, "total_handover_quantity")


@pulumi.output_type
class GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemAssociatedCapacityRequestResult(dict):
    def __init__(__self__, *,
                 handover_quantity: _builtins.str,
                 occ_capacity_request_id: _builtins.str):
        """
        :param _builtins.str handover_quantity: The total quantity of the bare metal hardware that was made available corresponding to the capacity request ocid.
        :param _builtins.str occ_capacity_request_id: The OCID of the capacity request against which the resources were provisioned.
        """
        pulumi.set(__self__, "handover_quantity", handover_quantity)
        pulumi.set(__self__, "occ_capacity_request_id", occ_capacity_request_id)

    @_builtins.property
    @pulumi.getter(name="handoverQuantity")
    def handover_quantity(self) -> _builtins.str:
        """
        The total quantity of the bare metal hardware that was made available corresponding to the capacity request ocid.
        """
        return pulumi.get(self, "handover_quantity")

    @_builtins.property
    @pulumi.getter(name="occCapacityRequestId")
    def occ_capacity_request_id(self) -> _builtins.str:
        """
        The OCID of the capacity request against which the resources were provisioned.
        """
        return pulumi.get(self, "occ_capacity_request_id")


@pulumi.output_type
class GetInternalOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemPlacementDetailResult(dict):
    def __init__(__self__, *,
                 availability_domain: _builtins.str,
                 block: _builtins.str,
                 building: _builtins.str,
                 region: _builtins.str,
                 room: _builtins.str,
                 workload_type: _builtins.str):
        """
        :param _builtins.str availability_domain: The availability domain (AD) for which the resources were provisioned.
        :param _builtins.str block: The block in the datacenter room where the resource was placed.
        :param _builtins.str building: The datacenter building where the resource was placed.
        :param _builtins.str region: The name of the region for which the resources were provisioned.
        :param _builtins.str room: The name of the room in the dataacenter building where the resource was placed.
        :param _builtins.str workload_type: The type of workload to which these resources were provisioned.
        """
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "block", block)
        pulumi.set(__self__, "building", building)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "room", room)
        pulumi.set(__self__, "workload_type", workload_type)

    @_builtins.property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> _builtins.str:
        """
        The availability domain (AD) for which the resources were provisioned.
        """
        return pulumi.get(self, "availability_domain")

    @_builtins.property
    @pulumi.getter
    def block(self) -> _builtins.str:
        """
        The block in the datacenter room where the resource was placed.
        """
        return pulumi.get(self, "block")

    @_builtins.property
    @pulumi.getter
    def building(self) -> _builtins.str:
        """
        The datacenter building where the resource was placed.
        """
        return pulumi.get(self, "building")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The name of the region for which the resources were provisioned.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def room(self) -> _builtins.str:
        """
        The name of the room in the dataacenter building where the resource was placed.
        """
        return pulumi.get(self, "room")

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> _builtins.str:
        """
        The type of workload to which these resources were provisioned.
        """
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetInternalOccmDemandSignalCatalogResourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: A query parameter to filter the list of demand signal catalog resource based on the resource name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        A query parameter to filter the list of demand signal catalog resource based on the resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResult']):
        """
        :param Sequence['GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemArgs'] items: An array of items containing detailed information about a resource's property dependecies.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResult']:
        """
        An array of items containing detailed information about a resource's property dependecies.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 availability_domain: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 name: _builtins.str,
                 namespace: _builtins.str,
                 occ_customer_group_id: _builtins.str,
                 occm_demand_signal_catalog_id: _builtins.str,
                 region: _builtins.str,
                 resource_properties: Sequence['outputs.GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyResult'],
                 resource_property_constraints: Sequence['outputs.GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintResult'],
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_compartment_id: _builtins.str,
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str availability_domain: The name of the availability domain for which you want to request the Oracle Cloud Infrastructure resource. This is an optional parameter.
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: The OCID of the demand signal catalog resource.
        :param _builtins.str name: A query parameter to filter the list of demand signal catalog resource based on the resource name.
        :param _builtins.str namespace: The name of the Oracle Cloud Infrastructure service in consideration for demand signal submission. For example: COMPUTE, NETWORK, GPU etc.
        :param _builtins.str occ_customer_group_id: The customer group ocid by which we would filter the list.
        :param _builtins.str occm_demand_signal_catalog_id: The ocid of demand signal catalog id.
        :param _builtins.str region: The name of region for which you want to request the Oracle Cloud Infrastructure resource. This is an optional parameter.
        :param Sequence['GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyArgs'] resource_properties: A list containing detailed information about a resource's properties.
        :param Sequence['GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintArgs'] resource_property_constraints: A list containing detailed information about a resource's property constraints.
        :param _builtins.str state: The current lifecycle state of the demand signal catalog resource.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_compartment_id: The OCID of the customer tenancy for which this resource will be available for the customer to order against.
        :param _builtins.str time_created: The time when the demand signal catalog resource was created.
        :param _builtins.str time_updated: The time when the demand signal catalog resource was last updated.
        """
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "occ_customer_group_id", occ_customer_group_id)
        pulumi.set(__self__, "occm_demand_signal_catalog_id", occm_demand_signal_catalog_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "resource_properties", resource_properties)
        pulumi.set(__self__, "resource_property_constraints", resource_property_constraints)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> _builtins.str:
        """
        The name of the availability domain for which you want to request the Oracle Cloud Infrastructure resource. This is an optional parameter.
        """
        return pulumi.get(self, "availability_domain")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the demand signal catalog resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        A query parameter to filter the list of demand signal catalog resource based on the resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The name of the Oracle Cloud Infrastructure service in consideration for demand signal submission. For example: COMPUTE, NETWORK, GPU etc.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> _builtins.str:
        """
        The customer group ocid by which we would filter the list.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @_builtins.property
    @pulumi.getter(name="occmDemandSignalCatalogId")
    def occm_demand_signal_catalog_id(self) -> _builtins.str:
        """
        The ocid of demand signal catalog id.
        """
        return pulumi.get(self, "occm_demand_signal_catalog_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The name of region for which you want to request the Oracle Cloud Infrastructure resource. This is an optional parameter.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceProperties")
    def resource_properties(self) -> Sequence['outputs.GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyResult']:
        """
        A list containing detailed information about a resource's properties.
        """
        return pulumi.get(self, "resource_properties")

    @_builtins.property
    @pulumi.getter(name="resourcePropertyConstraints")
    def resource_property_constraints(self) -> Sequence['outputs.GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintResult']:
        """
        A list containing detailed information about a resource's property constraints.
        """
        return pulumi.get(self, "resource_property_constraints")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current lifecycle state of the demand signal catalog resource.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> _builtins.str:
        """
        The OCID of the customer tenancy for which this resource will be available for the customer to order against.
        """
        return pulumi.get(self, "target_compartment_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time when the demand signal catalog resource was created.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The time when the demand signal catalog resource was last updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemResult']):
        """
        :param Sequence['GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemArgs'] items: An array of items containing detailed information about a resource's property dependecies.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemResult']:
        """
        An array of items containing detailed information about a resource's property dependecies.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintItemResult']):
        """
        :param Sequence['GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintItemArgs'] items: An array of items containing detailed information about a resource's property dependecies.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintItemResult']:
        """
        An array of items containing detailed information about a resource's property dependecies.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintItemResult(dict):
    def __init__(__self__, *,
                 constraint_name: _builtins.str,
                 constraint_value: _builtins.str):
        """
        :param _builtins.str constraint_name: The name of demand signal resource's property constraint.
        :param _builtins.str constraint_value: The value of demand signal resource's property constraint.
        """
        pulumi.set(__self__, "constraint_name", constraint_name)
        pulumi.set(__self__, "constraint_value", constraint_value)

    @_builtins.property
    @pulumi.getter(name="constraintName")
    def constraint_name(self) -> _builtins.str:
        """
        The name of demand signal resource's property constraint.
        """
        return pulumi.get(self, "constraint_name")

    @_builtins.property
    @pulumi.getter(name="constraintValue")
    def constraint_value(self) -> _builtins.str:
        """
        The value of demand signal resource's property constraint.
        """
        return pulumi.get(self, "constraint_value")


@pulumi.output_type
class GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemResult(dict):
    def __init__(__self__, *,
                 is_editable: _builtins.bool,
                 property_max_value: _builtins.str,
                 property_min_value: _builtins.str,
                 property_name: _builtins.str,
                 property_options: Sequence['outputs.GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemPropertyOptionResult'],
                 property_unit: _builtins.str,
                 property_value: _builtins.str):
        """
        :param _builtins.bool is_editable: This will indicate if demand signal resource's property is editable.
        :param _builtins.str property_max_value: The maximum value of demand signal resource's property. This is an optional parameter.
        :param _builtins.str property_min_value: The minimum value of demand signal resource's property. This is an optional parameter.
        :param _builtins.str property_name: The name of demand signal resource's property.
        :param Sequence['GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemPropertyOptionArgs'] property_options: Predefined options for demand signal resource's property. This is an optional parameter.
        :param _builtins.str property_unit: Unit for demand signal resource's property.
        :param _builtins.str property_value: Default value of demand signal resource's property.
        """
        pulumi.set(__self__, "is_editable", is_editable)
        pulumi.set(__self__, "property_max_value", property_max_value)
        pulumi.set(__self__, "property_min_value", property_min_value)
        pulumi.set(__self__, "property_name", property_name)
        pulumi.set(__self__, "property_options", property_options)
        pulumi.set(__self__, "property_unit", property_unit)
        pulumi.set(__self__, "property_value", property_value)

    @_builtins.property
    @pulumi.getter(name="isEditable")
    def is_editable(self) -> _builtins.bool:
        """
        This will indicate if demand signal resource's property is editable.
        """
        return pulumi.get(self, "is_editable")

    @_builtins.property
    @pulumi.getter(name="propertyMaxValue")
    def property_max_value(self) -> _builtins.str:
        """
        The maximum value of demand signal resource's property. This is an optional parameter.
        """
        return pulumi.get(self, "property_max_value")

    @_builtins.property
    @pulumi.getter(name="propertyMinValue")
    def property_min_value(self) -> _builtins.str:
        """
        The minimum value of demand signal resource's property. This is an optional parameter.
        """
        return pulumi.get(self, "property_min_value")

    @_builtins.property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> _builtins.str:
        """
        The name of demand signal resource's property.
        """
        return pulumi.get(self, "property_name")

    @_builtins.property
    @pulumi.getter(name="propertyOptions")
    def property_options(self) -> Sequence['outputs.GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemPropertyOptionResult']:
        """
        Predefined options for demand signal resource's property. This is an optional parameter.
        """
        return pulumi.get(self, "property_options")

    @_builtins.property
    @pulumi.getter(name="propertyUnit")
    def property_unit(self) -> _builtins.str:
        """
        Unit for demand signal resource's property.
        """
        return pulumi.get(self, "property_unit")

    @_builtins.property
    @pulumi.getter(name="propertyValue")
    def property_value(self) -> _builtins.str:
        """
        Default value of demand signal resource's property.
        """
        return pulumi.get(self, "property_value")


@pulumi.output_type
class GetInternalOccmDemandSignalCatalogResourcesInternalOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemPropertyOptionResult(dict):
    def __init__(__self__, *,
                 option_key: _builtins.str,
                 option_value: _builtins.str):
        """
        :param _builtins.str option_key: key of a property option like memoryValue, ocpuValue.
        :param _builtins.str option_value: value of a property option like 64, 2 fastconnect etc.
        """
        pulumi.set(__self__, "option_key", option_key)
        pulumi.set(__self__, "option_value", option_value)

    @_builtins.property
    @pulumi.getter(name="optionKey")
    def option_key(self) -> _builtins.str:
        """
        key of a property option like memoryValue, ocpuValue.
        """
        return pulumi.get(self, "option_key")

    @_builtins.property
    @pulumi.getter(name="optionValue")
    def option_value(self) -> _builtins.str:
        """
        value of a property option like 64, 2 fastconnect etc.
        """
        return pulumi.get(self, "option_value")


@pulumi.output_type
class GetInternalOccmDemandSignalCatalogsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInternalOccmDemandSignalCatalogsOccmDemandSignalCatalogCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInternalOccmDemandSignalCatalogsOccmDemandSignalCatalogCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInternalOccmDemandSignalCatalogsOccmDemandSignalCatalogCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInternalOccmDemandSignalCatalogsOccmDemandSignalCatalogCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 occ_customer_group_id: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param _builtins.str description: description of demand signal catalog.
        :param _builtins.str display_name: A filter to return only the resources that match the entire display name. The match is not case sensitive.
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: The ocid of demand signal catalog.
        :param _builtins.str occ_customer_group_id: The customer group ocid by which we would filter the list.
        :param _builtins.str state: The current lifecycle state of the resource.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The time when the demand signal catalog was created.
        :param _builtins.str time_updated: The time when the demand signal catalog was last updated.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "occ_customer_group_id", occ_customer_group_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        description of demand signal catalog.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only the resources that match the entire display name. The match is not case sensitive.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ocid of demand signal catalog.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> _builtins.str:
        """
        The customer group ocid by which we would filter the list.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current lifecycle state of the resource.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time when the demand signal catalog was created.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The time when the demand signal catalog was last updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetInternalOccmDemandSignalDeliveriesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInternalOccmDemandSignalDeliveriesInternalOccmDemandSignalDeliveryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInternalOccmDemandSignalDeliveriesInternalOccmDemandSignalDeliveryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInternalOccmDemandSignalDeliveriesInternalOccmDemandSignalDeliveryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInternalOccmDemandSignalDeliveriesInternalOccmDemandSignalDeliveryCollectionItemResult(dict):
    def __init__(__self__, *,
                 accepted_quantity: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 demand_signal_id: _builtins.str,
                 demand_signal_item_id: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 justification: _builtins.str,
                 lifecycle_details: _builtins.str,
                 notes: _builtins.str,
                 occ_customer_group_id: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_delivered: _builtins.str):
        """
        :param _builtins.str accepted_quantity: The quantity of the resource that Oracle Cloud Infrastructure will supply to the customer.
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param _builtins.str demand_signal_id: The OCID of the demand signal under which this delivery will be grouped.
        :param _builtins.str demand_signal_item_id: The OCID of the demand signal item corresponding to which this delivery is made.
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: A query parameter to filter the list of demand signals based on it's OCID.
        :param _builtins.str justification: This field could be used by Oracle Cloud Infrastructure to communicate the reason for accepting or declining the request.
        :param _builtins.str lifecycle_details: The enum values corresponding to the various states associated with the delivery resource.
        :param _builtins.str notes: This field acts as a notes section for operators.
        :param _builtins.str occ_customer_group_id: The customer group ocid by which we would filter the list.
        :param _builtins.str state: The current lifecycle state of the resource.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_delivered: The date on which the Oracle Cloud Infrastructure delivered the resource to the customers. The default value for this will be the corresponding demand signal item resource's need by date.
        """
        pulumi.set(__self__, "accepted_quantity", accepted_quantity)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "demand_signal_id", demand_signal_id)
        pulumi.set(__self__, "demand_signal_item_id", demand_signal_item_id)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "occ_customer_group_id", occ_customer_group_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_delivered", time_delivered)

    @_builtins.property
    @pulumi.getter(name="acceptedQuantity")
    def accepted_quantity(self) -> _builtins.str:
        """
        The quantity of the resource that Oracle Cloud Infrastructure will supply to the customer.
        """
        return pulumi.get(self, "accepted_quantity")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter(name="demandSignalId")
    def demand_signal_id(self) -> _builtins.str:
        """
        The OCID of the demand signal under which this delivery will be grouped.
        """
        return pulumi.get(self, "demand_signal_id")

    @_builtins.property
    @pulumi.getter(name="demandSignalItemId")
    def demand_signal_item_id(self) -> _builtins.str:
        """
        The OCID of the demand signal item corresponding to which this delivery is made.
        """
        return pulumi.get(self, "demand_signal_item_id")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        A query parameter to filter the list of demand signals based on it's OCID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        This field could be used by Oracle Cloud Infrastructure to communicate the reason for accepting or declining the request.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        The enum values corresponding to the various states associated with the delivery resource.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> _builtins.str:
        """
        This field acts as a notes section for operators.
        """
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> _builtins.str:
        """
        The customer group ocid by which we would filter the list.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current lifecycle state of the resource.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeDelivered")
    def time_delivered(self) -> _builtins.str:
        """
        The date on which the Oracle Cloud Infrastructure delivered the resource to the customers. The default value for this will be the corresponding demand signal item resource's need by date.
        """
        return pulumi.get(self, "time_delivered")


@pulumi.output_type
class GetInternalOccmDemandSignalItemsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInternalOccmDemandSignalItemsInternalOccmDemandSignalItemCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInternalOccmDemandSignalItemsInternalOccmDemandSignalItemCollectionItemResult']):
        """
        :param Sequence['GetInternalOccmDemandSignalItemsInternalOccmDemandSignalItemCollectionItemArgs'] items: An array of items containing detailed information about different resource demanded as part of a demand signal.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInternalOccmDemandSignalItemsInternalOccmDemandSignalItemCollectionItemResult']:
        """
        An array of items containing detailed information about different resource demanded as part of a demand signal.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInternalOccmDemandSignalItemsInternalOccmDemandSignalItemCollectionItemResult(dict):
    def __init__(__self__, *,
                 availability_domain: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 demand_signal_catalog_resource_id: _builtins.str,
                 demand_signal_id: _builtins.str,
                 demand_signal_namespace: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 notes: _builtins.str,
                 occ_customer_group_id: _builtins.str,
                 quantity: _builtins.str,
                 region: _builtins.str,
                 request_type: _builtins.str,
                 resource_name: _builtins.str,
                 resource_properties: Mapping[str, _builtins.str],
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_compartment_id: _builtins.str,
                 time_needed_before: _builtins.str):
        """
        :param _builtins.str availability_domain: The name of the availability domain for which you want to request the Oracle Cloud Infrastructure resource.
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param _builtins.str demand_signal_catalog_resource_id: The OCID of the corresponding demand signal catalog resource.
        :param _builtins.str demand_signal_id: The OCID of the demand signal under which this item will be grouped.
        :param _builtins.str demand_signal_namespace: A query parameter to filter the list of demand signal details based on the namespace.
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: The OCID of the demand signal resource request.
        :param _builtins.str notes: This field will serve as notes section for you. You can use this section to convey a message to Oracle Cloud Infrastructure regarding your resource request.
        :param _builtins.str occ_customer_group_id: The customer group ocid by which we would filter the list.
        :param _builtins.str quantity: The quantity of the resource that you want to demand from Oracle Cloud Infrastructure or return to OCI.
        :param _builtins.str region: The name of region for which you want to request the Oracle Cloud Infrastructure resource.
        :param _builtins.str request_type: The type of request (DEMAND or RETURN) made against a particular demand signal item.
        :param _builtins.str resource_name: A query parameter to filter the list of demand signal details based on the resource name.
        :param Mapping[str, _builtins.str] resource_properties: A map of various properties associated with the Oracle Cloud Infrastructure resource.
        :param _builtins.str state: The current lifecycle state of the demand signal item.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_compartment_id: The ocid of the tenancy for which you want to request the Oracle Cloud Infrastructure resource for. This is an optional parameter.
        :param _builtins.str time_needed_before: the date before which you would ideally like the Oracle Cloud Infrastructure resource to be delivered to you.
        """
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "demand_signal_catalog_resource_id", demand_signal_catalog_resource_id)
        pulumi.set(__self__, "demand_signal_id", demand_signal_id)
        pulumi.set(__self__, "demand_signal_namespace", demand_signal_namespace)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "occ_customer_group_id", occ_customer_group_id)
        pulumi.set(__self__, "quantity", quantity)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "request_type", request_type)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_properties", resource_properties)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        pulumi.set(__self__, "time_needed_before", time_needed_before)

    @_builtins.property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> _builtins.str:
        """
        The name of the availability domain for which you want to request the Oracle Cloud Infrastructure resource.
        """
        return pulumi.get(self, "availability_domain")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter(name="demandSignalCatalogResourceId")
    def demand_signal_catalog_resource_id(self) -> _builtins.str:
        """
        The OCID of the corresponding demand signal catalog resource.
        """
        return pulumi.get(self, "demand_signal_catalog_resource_id")

    @_builtins.property
    @pulumi.getter(name="demandSignalId")
    def demand_signal_id(self) -> _builtins.str:
        """
        The OCID of the demand signal under which this item will be grouped.
        """
        return pulumi.get(self, "demand_signal_id")

    @_builtins.property
    @pulumi.getter(name="demandSignalNamespace")
    def demand_signal_namespace(self) -> _builtins.str:
        """
        A query parameter to filter the list of demand signal details based on the namespace.
        """
        return pulumi.get(self, "demand_signal_namespace")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the demand signal resource request.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> _builtins.str:
        """
        This field will serve as notes section for you. You can use this section to convey a message to Oracle Cloud Infrastructure regarding your resource request.
        """
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> _builtins.str:
        """
        The customer group ocid by which we would filter the list.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @_builtins.property
    @pulumi.getter
    def quantity(self) -> _builtins.str:
        """
        The quantity of the resource that you want to demand from Oracle Cloud Infrastructure or return to OCI.
        """
        return pulumi.get(self, "quantity")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The name of region for which you want to request the Oracle Cloud Infrastructure resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="requestType")
    def request_type(self) -> _builtins.str:
        """
        The type of request (DEMAND or RETURN) made against a particular demand signal item.
        """
        return pulumi.get(self, "request_type")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        A query parameter to filter the list of demand signal details based on the resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceProperties")
    def resource_properties(self) -> Mapping[str, _builtins.str]:
        """
        A map of various properties associated with the Oracle Cloud Infrastructure resource.
        """
        return pulumi.get(self, "resource_properties")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current lifecycle state of the demand signal item.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> _builtins.str:
        """
        The ocid of the tenancy for which you want to request the Oracle Cloud Infrastructure resource for. This is an optional parameter.
        """
        return pulumi.get(self, "target_compartment_id")

    @_builtins.property
    @pulumi.getter(name="timeNeededBefore")
    def time_needed_before(self) -> _builtins.str:
        """
        the date before which you would ideally like the Oracle Cloud Infrastructure resource to be delivered to you.
        """
        return pulumi.get(self, "time_needed_before")


@pulumi.output_type
class GetInternalOccmDemandSignalsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInternalOccmDemandSignalsInternalOccmDemandSignalCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInternalOccmDemandSignalsInternalOccmDemandSignalCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInternalOccmDemandSignalsInternalOccmDemandSignalCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInternalOccmDemandSignalsInternalOccmDemandSignalCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 occ_customer_group_id: _builtins.str,
                 occm_demand_signal_id: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param _builtins.str description: A short description about the demand signal.
        :param _builtins.str display_name: A filter to return only the resources that match the entire display name. The match is not case sensitive.
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: A query parameter to filter the list of demand signals based on it's OCID.
        :param _builtins.str lifecycle_details: A query parameter to filter the list of demand signals based on its state.
        :param _builtins.str occ_customer_group_id: The customer group ocid by which we would filter the list.
        :param _builtins.str state: The current lifecycle state of the demand signal.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The time when the demand signal was created.
        :param _builtins.str time_updated: The time when the demand signal was last updated.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "occ_customer_group_id", occ_customer_group_id)
        pulumi.set(__self__, "occm_demand_signal_id", occm_demand_signal_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A short description about the demand signal.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only the resources that match the entire display name. The match is not case sensitive.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        A query parameter to filter the list of demand signals based on it's OCID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        A query parameter to filter the list of demand signals based on its state.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> _builtins.str:
        """
        The customer group ocid by which we would filter the list.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @_builtins.property
    @pulumi.getter(name="occmDemandSignalId")
    def occm_demand_signal_id(self) -> _builtins.str:
        return pulumi.get(self, "occm_demand_signal_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current lifecycle state of the demand signal.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time when the demand signal was created.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The time when the demand signal was last updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetNamespaceOccOverviewsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNamespaceOccOverviewsOccOverviewCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetNamespaceOccOverviewsOccOverviewCollectionItemResult']):
        """
        :param Sequence['GetNamespaceOccOverviewsOccOverviewCollectionItemArgs'] items: An array of overview summary.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetNamespaceOccOverviewsOccOverviewCollectionItemResult']:
        """
        An array of overview summary.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetNamespaceOccOverviewsOccOverviewCollectionItemResult(dict):
    def __init__(__self__, *,
                 capacity_requests_blob: _builtins.str,
                 compartment_id: _builtins.str,
                 period_value: _builtins.str,
                 resource_name: _builtins.str,
                 total_available: _builtins.str,
                 total_cancelled: _builtins.str,
                 total_demanded: _builtins.str,
                 total_rejected: _builtins.str,
                 total_supplied: _builtins.str,
                 total_unfulfilled: _builtins.str,
                 unit: _builtins.str,
                 workload_type_breakdown_blob: _builtins.str):
        """
        :param _builtins.str capacity_requests_blob: A raw json blob containing all the capacity requests corresponding to the resource name
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param _builtins.str period_value: The name of the month along with year for which this summary corresponds to.
        :param _builtins.str resource_name: The name of the resource for which we have aggregated the value.
        :param _builtins.str total_available: The quantity of the resource which is available at the end of the period of aggregationDetails model in consideration.
        :param _builtins.str total_cancelled: The quantity of the resource which is cancelled by the customer. Once the capacity request was submitted, the customer can still cancel it. This field sums up those values.
        :param _builtins.str total_demanded: The quantity of the resource which is demanded by customers via capacity requests against the resource name at the end of the time period in consideration for overview.
        :param _builtins.str total_rejected: The quantity of the resource which is rejected by Oracle.
        :param _builtins.str total_supplied: The quantity of the resource which is supplied by Oracle to the customer against the resource name at the end of the time period in consideration.
        :param _builtins.str total_unfulfilled: The quantity of the resource which Oracle was unable to supply. For a given capacity request, Oracle sometimes cannot supply the entire value demanded by the customer. In such cases a partial value is provided, thereby leaving behind a portion of unfulfilled values. This field sums that up.
        :param _builtins.str unit: The unit e.g SERVER in which the above values like totalAvailable, totalSupplied etc is measured.
        :param _builtins.str workload_type_breakdown_blob: A raw json blob containing breakdown of totalAvailable, totalDemanded, totalSupplied, totalRejected, totalCancelled and totalUnfulfilled by workload types
        """
        pulumi.set(__self__, "capacity_requests_blob", capacity_requests_blob)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "period_value", period_value)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "total_available", total_available)
        pulumi.set(__self__, "total_cancelled", total_cancelled)
        pulumi.set(__self__, "total_demanded", total_demanded)
        pulumi.set(__self__, "total_rejected", total_rejected)
        pulumi.set(__self__, "total_supplied", total_supplied)
        pulumi.set(__self__, "total_unfulfilled", total_unfulfilled)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "workload_type_breakdown_blob", workload_type_breakdown_blob)

    @_builtins.property
    @pulumi.getter(name="capacityRequestsBlob")
    def capacity_requests_blob(self) -> _builtins.str:
        """
        A raw json blob containing all the capacity requests corresponding to the resource name
        """
        return pulumi.get(self, "capacity_requests_blob")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="periodValue")
    def period_value(self) -> _builtins.str:
        """
        The name of the month along with year for which this summary corresponds to.
        """
        return pulumi.get(self, "period_value")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the resource for which we have aggregated the value.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="totalAvailable")
    def total_available(self) -> _builtins.str:
        """
        The quantity of the resource which is available at the end of the period of aggregationDetails model in consideration.
        """
        return pulumi.get(self, "total_available")

    @_builtins.property
    @pulumi.getter(name="totalCancelled")
    def total_cancelled(self) -> _builtins.str:
        """
        The quantity of the resource which is cancelled by the customer. Once the capacity request was submitted, the customer can still cancel it. This field sums up those values.
        """
        return pulumi.get(self, "total_cancelled")

    @_builtins.property
    @pulumi.getter(name="totalDemanded")
    def total_demanded(self) -> _builtins.str:
        """
        The quantity of the resource which is demanded by customers via capacity requests against the resource name at the end of the time period in consideration for overview.
        """
        return pulumi.get(self, "total_demanded")

    @_builtins.property
    @pulumi.getter(name="totalRejected")
    def total_rejected(self) -> _builtins.str:
        """
        The quantity of the resource which is rejected by Oracle.
        """
        return pulumi.get(self, "total_rejected")

    @_builtins.property
    @pulumi.getter(name="totalSupplied")
    def total_supplied(self) -> _builtins.str:
        """
        The quantity of the resource which is supplied by Oracle to the customer against the resource name at the end of the time period in consideration.
        """
        return pulumi.get(self, "total_supplied")

    @_builtins.property
    @pulumi.getter(name="totalUnfulfilled")
    def total_unfulfilled(self) -> _builtins.str:
        """
        The quantity of the resource which Oracle was unable to supply. For a given capacity request, Oracle sometimes cannot supply the entire value demanded by the customer. In such cases a partial value is provided, thereby leaving behind a portion of unfulfilled values. This field sums that up.
        """
        return pulumi.get(self, "total_unfulfilled")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The unit e.g SERVER in which the above values like totalAvailable, totalSupplied etc is measured.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter(name="workloadTypeBreakdownBlob")
    def workload_type_breakdown_blob(self) -> _builtins.str:
        """
        A raw json blob containing breakdown of totalAvailable, totalDemanded, totalSupplied, totalRejected, totalCancelled and totalUnfulfilled by workload types
        """
        return pulumi.get(self, "workload_type_breakdown_blob")


@pulumi.output_type
class GetOccAvailabilityCatalogDetailResult(dict):
    def __init__(__self__, *,
                 available_quantity: _builtins.str,
                 catalog_id: _builtins.str,
                 date_expected_capacity_handover: _builtins.str,
                 date_final_customer_order: _builtins.str,
                 demanded_quantity: _builtins.str,
                 namespace: _builtins.str,
                 resource_name: _builtins.str,
                 resource_type: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 total_available_quantity: _builtins.str,
                 unit: _builtins.str,
                 workload_type: _builtins.str):
        """
        :param _builtins.str available_quantity: The quantity of resource currently available that the customer can request.
        :param _builtins.str catalog_id: The OCID of the availability catalog.
        :param _builtins.str date_expected_capacity_handover: The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
        :param _builtins.str date_final_customer_order: The date by which the customer must place the order to have their capacity requirements met by the customer handover date.
        :param _builtins.str demanded_quantity: The quantity of resource currently demanded by the customer.
        :param _builtins.str namespace: The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
        :param _builtins.str resource_name: The name of the resource that the customer can request.
        :param _builtins.str resource_type: The different types of resources against which customers can place capacity requests.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str total_available_quantity: The total quantity of resource that the customer can request.
        :param _builtins.str unit: The unit in which the resource available is measured.
        :param _builtins.str workload_type: The type of workload (Generic/ROW).
        """
        pulumi.set(__self__, "available_quantity", available_quantity)
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "date_expected_capacity_handover", date_expected_capacity_handover)
        pulumi.set(__self__, "date_final_customer_order", date_final_customer_order)
        pulumi.set(__self__, "demanded_quantity", demanded_quantity)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "total_available_quantity", total_available_quantity)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "workload_type", workload_type)

    @_builtins.property
    @pulumi.getter(name="availableQuantity")
    def available_quantity(self) -> _builtins.str:
        """
        The quantity of resource currently available that the customer can request.
        """
        return pulumi.get(self, "available_quantity")

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> _builtins.str:
        """
        The OCID of the availability catalog.
        """
        return pulumi.get(self, "catalog_id")

    @_builtins.property
    @pulumi.getter(name="dateExpectedCapacityHandover")
    def date_expected_capacity_handover(self) -> _builtins.str:
        """
        The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
        """
        return pulumi.get(self, "date_expected_capacity_handover")

    @_builtins.property
    @pulumi.getter(name="dateFinalCustomerOrder")
    def date_final_customer_order(self) -> _builtins.str:
        """
        The date by which the customer must place the order to have their capacity requirements met by the customer handover date.
        """
        return pulumi.get(self, "date_final_customer_order")

    @_builtins.property
    @pulumi.getter(name="demandedQuantity")
    def demanded_quantity(self) -> _builtins.str:
        """
        The quantity of resource currently demanded by the customer.
        """
        return pulumi.get(self, "demanded_quantity")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the resource that the customer can request.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The different types of resources against which customers can place capacity requests.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="totalAvailableQuantity")
    def total_available_quantity(self) -> _builtins.str:
        """
        The total quantity of resource that the customer can request.
        """
        return pulumi.get(self, "total_available_quantity")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The unit in which the resource available is measured.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> _builtins.str:
        """
        The type of workload (Generic/ROW).
        """
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetOccAvailabilityCatalogMetadataDetailResult(dict):
    def __init__(__self__, *,
                 format_version: _builtins.str):
        """
        :param _builtins.str format_version: The version for the format of the catalog file being uploaded.
        """
        pulumi.set(__self__, "format_version", format_version)

    @_builtins.property
    @pulumi.getter(name="formatVersion")
    def format_version(self) -> _builtins.str:
        """
        The version for the format of the catalog file being uploaded.
        """
        return pulumi.get(self, "format_version")


@pulumi.output_type
class GetOccAvailabilityCatalogOccAvailabilitiesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollectionItemResult']):
        """
        :param Sequence['GetOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollectionItemArgs'] items: An array of capacity constraints.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollectionItemResult']:
        """
        An array of capacity constraints.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollectionItemResult(dict):
    def __init__(__self__, *,
                 available_quantity: _builtins.str,
                 catalog_id: _builtins.str,
                 date_expected_capacity_handover: _builtins.str,
                 date_final_customer_order: _builtins.str,
                 demanded_quantity: _builtins.str,
                 namespace: _builtins.str,
                 resource_name: _builtins.str,
                 resource_type: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 total_available_quantity: _builtins.str,
                 unit: _builtins.str,
                 workload_type: _builtins.str):
        """
        :param _builtins.str available_quantity: The quantity of resource currently available that the customer can request.
        :param _builtins.str catalog_id: The OCID of the availability catalog.
        :param _builtins.str date_expected_capacity_handover: The capacity handover date of the capacity constraint to filter the list of capacity constraints.
        :param _builtins.str date_final_customer_order: The date by which the customer must place the order to have their capacity requirements met by the customer handover date.
        :param _builtins.str demanded_quantity: The quantity of resource currently demanded by the customer.
        :param _builtins.str namespace: The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
        :param _builtins.str resource_name: The name of the resource to filter the list of capacity constraints.
        :param _builtins.str resource_type: Resource type using which the capacity constraints of an availability catalog can be filtered.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str total_available_quantity: The total quantity of resource that the customer can request.
        :param _builtins.str unit: The unit in which the resource available is measured.
        :param _builtins.str workload_type: Workload type using the resources in an availability catalog can be filtered.
        """
        pulumi.set(__self__, "available_quantity", available_quantity)
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "date_expected_capacity_handover", date_expected_capacity_handover)
        pulumi.set(__self__, "date_final_customer_order", date_final_customer_order)
        pulumi.set(__self__, "demanded_quantity", demanded_quantity)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "total_available_quantity", total_available_quantity)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "workload_type", workload_type)

    @_builtins.property
    @pulumi.getter(name="availableQuantity")
    def available_quantity(self) -> _builtins.str:
        """
        The quantity of resource currently available that the customer can request.
        """
        return pulumi.get(self, "available_quantity")

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> _builtins.str:
        """
        The OCID of the availability catalog.
        """
        return pulumi.get(self, "catalog_id")

    @_builtins.property
    @pulumi.getter(name="dateExpectedCapacityHandover")
    def date_expected_capacity_handover(self) -> _builtins.str:
        """
        The capacity handover date of the capacity constraint to filter the list of capacity constraints.
        """
        return pulumi.get(self, "date_expected_capacity_handover")

    @_builtins.property
    @pulumi.getter(name="dateFinalCustomerOrder")
    def date_final_customer_order(self) -> _builtins.str:
        """
        The date by which the customer must place the order to have their capacity requirements met by the customer handover date.
        """
        return pulumi.get(self, "date_final_customer_order")

    @_builtins.property
    @pulumi.getter(name="demandedQuantity")
    def demanded_quantity(self) -> _builtins.str:
        """
        The quantity of resource currently demanded by the customer.
        """
        return pulumi.get(self, "demanded_quantity")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the resource to filter the list of capacity constraints.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        Resource type using which the capacity constraints of an availability catalog can be filtered.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="totalAvailableQuantity")
    def total_available_quantity(self) -> _builtins.str:
        """
        The total quantity of resource that the customer can request.
        """
        return pulumi.get(self, "total_available_quantity")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The unit in which the resource available is measured.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> _builtins.str:
        """
        Workload type using the resources in an availability catalog can be filtered.
        """
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetOccAvailabilityCatalogsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemResult(dict):
    def __init__(__self__, *,
                 base64encoded_catalog_details: _builtins.str,
                 catalog_state: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 details: Sequence['outputs.GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemDetailResult'],
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 metadata_details: Sequence['outputs.GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemMetadataDetailResult'],
                 namespace: _builtins.str,
                 occ_customer_group_id: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str catalog_state: Filter the list of availability catalogs based on the catalog state.
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param _builtins.str description: Text information about the availability catalog.
        :param Sequence['GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemDetailArgs'] details: Details about capacity available for different resources in catalog.
        :param _builtins.str display_name: A filter to return only the resources that match the entire display name. The match is not case sensitive.
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: The OCID of the availability catalog to filter the list of availability catalogs.
        :param _builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed State.
        :param Sequence['GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemMetadataDetailArgs'] metadata_details: Used for representing the metadata of the catalog. This denotes the version and format of the CSV file for parsing.
        :param _builtins.str namespace: The namespace by which we would filter the list.
        :param _builtins.str occ_customer_group_id: The customer group OCID to which the availability catalog belongs.
        :param _builtins.str state: The current lifecycle state of the resource.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The time when the availability catalog was created.
        :param _builtins.str time_updated: The time when the availability catalog was last updated.
        """
        pulumi.set(__self__, "base64encoded_catalog_details", base64encoded_catalog_details)
        pulumi.set(__self__, "catalog_state", catalog_state)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "metadata_details", metadata_details)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "occ_customer_group_id", occ_customer_group_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="base64encodedCatalogDetails")
    def base64encoded_catalog_details(self) -> _builtins.str:
        return pulumi.get(self, "base64encoded_catalog_details")

    @_builtins.property
    @pulumi.getter(name="catalogState")
    def catalog_state(self) -> _builtins.str:
        """
        Filter the list of availability catalogs based on the catalog state.
        """
        return pulumi.get(self, "catalog_state")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Text information about the availability catalog.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemDetailResult']:
        """
        Details about capacity available for different resources in catalog.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only the resources that match the entire display name. The match is not case sensitive.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the availability catalog to filter the list of availability catalogs.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed State.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="metadataDetails")
    def metadata_details(self) -> Sequence['outputs.GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemMetadataDetailResult']:
        """
        Used for representing the metadata of the catalog. This denotes the version and format of the CSV file for parsing.
        """
        return pulumi.get(self, "metadata_details")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace by which we would filter the list.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> _builtins.str:
        """
        The customer group OCID to which the availability catalog belongs.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current lifecycle state of the resource.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time when the availability catalog was created.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The time when the availability catalog was last updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemDetailResult(dict):
    def __init__(__self__, *,
                 available_quantity: _builtins.str,
                 catalog_id: _builtins.str,
                 date_expected_capacity_handover: _builtins.str,
                 date_final_customer_order: _builtins.str,
                 demanded_quantity: _builtins.str,
                 namespace: _builtins.str,
                 resource_name: _builtins.str,
                 resource_type: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 total_available_quantity: _builtins.str,
                 unit: _builtins.str,
                 workload_type: _builtins.str):
        """
        :param _builtins.str available_quantity: The quantity of resource currently available that the customer can request.
        :param _builtins.str catalog_id: The OCID of the availability catalog.
        :param _builtins.str date_expected_capacity_handover: The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
        :param _builtins.str date_final_customer_order: The date by which the customer must place the order to have their capacity requirements met by the customer handover date.
        :param _builtins.str demanded_quantity: The quantity of resource currently demanded by the customer.
        :param _builtins.str namespace: The namespace by which we would filter the list.
        :param _builtins.str resource_name: The name of the resource that the customer can request.
        :param _builtins.str resource_type: The different types of resources against which customers can place capacity requests.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str total_available_quantity: The total quantity of resource that the customer can request.
        :param _builtins.str unit: The unit in which the resource available is measured.
        :param _builtins.str workload_type: The type of workload (Generic/ROW).
        """
        pulumi.set(__self__, "available_quantity", available_quantity)
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "date_expected_capacity_handover", date_expected_capacity_handover)
        pulumi.set(__self__, "date_final_customer_order", date_final_customer_order)
        pulumi.set(__self__, "demanded_quantity", demanded_quantity)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "total_available_quantity", total_available_quantity)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "workload_type", workload_type)

    @_builtins.property
    @pulumi.getter(name="availableQuantity")
    def available_quantity(self) -> _builtins.str:
        """
        The quantity of resource currently available that the customer can request.
        """
        return pulumi.get(self, "available_quantity")

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> _builtins.str:
        """
        The OCID of the availability catalog.
        """
        return pulumi.get(self, "catalog_id")

    @_builtins.property
    @pulumi.getter(name="dateExpectedCapacityHandover")
    def date_expected_capacity_handover(self) -> _builtins.str:
        """
        The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
        """
        return pulumi.get(self, "date_expected_capacity_handover")

    @_builtins.property
    @pulumi.getter(name="dateFinalCustomerOrder")
    def date_final_customer_order(self) -> _builtins.str:
        """
        The date by which the customer must place the order to have their capacity requirements met by the customer handover date.
        """
        return pulumi.get(self, "date_final_customer_order")

    @_builtins.property
    @pulumi.getter(name="demandedQuantity")
    def demanded_quantity(self) -> _builtins.str:
        """
        The quantity of resource currently demanded by the customer.
        """
        return pulumi.get(self, "demanded_quantity")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace by which we would filter the list.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the resource that the customer can request.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The different types of resources against which customers can place capacity requests.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="totalAvailableQuantity")
    def total_available_quantity(self) -> _builtins.str:
        """
        The total quantity of resource that the customer can request.
        """
        return pulumi.get(self, "total_available_quantity")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The unit in which the resource available is measured.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> _builtins.str:
        """
        The type of workload (Generic/ROW).
        """
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionItemMetadataDetailResult(dict):
    def __init__(__self__, *,
                 format_version: _builtins.str):
        """
        :param _builtins.str format_version: The version for the format of the catalog file being uploaded.
        """
        pulumi.set(__self__, "format_version", format_version)

    @_builtins.property
    @pulumi.getter(name="formatVersion")
    def format_version(self) -> _builtins.str:
        """
        The version for the format of the catalog file being uploaded.
        """
        return pulumi.get(self, "format_version")


@pulumi.output_type
class GetOccCapacityRequestDetailResult(dict):
    def __init__(__self__, *,
                 actual_handover_quantity: _builtins.str,
                 associated_occ_handover_resource_block_lists: Sequence['outputs.GetOccCapacityRequestDetailAssociatedOccHandoverResourceBlockListResult'],
                 availability_domain: _builtins.str,
                 date_actual_handover: _builtins.str,
                 date_expected_handover: _builtins.str,
                 demand_quantity: _builtins.str,
                 expected_handover_quantity: _builtins.str,
                 resource_name: _builtins.str,
                 resource_type: _builtins.str,
                 source_workload_type: _builtins.str,
                 workload_type: _builtins.str):
        """
        :param _builtins.str actual_handover_quantity: The actual handed over quantity of resources at the time of request resolution.
        :param Sequence['GetOccCapacityRequestDetailAssociatedOccHandoverResourceBlockListArgs'] associated_occ_handover_resource_block_lists: A list containing details about occHandoverResourceBlocks which were handed over for the corresponding resource name.
        :param _builtins.str availability_domain: The availability domain of the resource which is to be transferred. Note that this is only required for Capacity Request Transfer requests.
        :param _builtins.str date_actual_handover: The date on which the actual handover quantity of resources is delivered.
        :param _builtins.str date_expected_handover: The date on which the latest increment to supplied quantity of resources was delivered.
        :param _builtins.str demand_quantity: The number of compute server's with name <resourceName> required by the user.
        :param _builtins.str expected_handover_quantity: The incremental quantity of resources supplied as the provisioning is underway.
        :param _builtins.str resource_name: The name of the COMPUTE server shape for which the request is made. Do not use CAPACITY_CONSTRAINT as the resource name.
        :param _builtins.str resource_type: The type of the resource against which the user wants to place a capacity request.
        :param _builtins.str source_workload_type: The WorkloadType from where capacity request are to be transferred.
        :param _builtins.str workload_type: The type of the workload (Generic/ROW).
        """
        pulumi.set(__self__, "actual_handover_quantity", actual_handover_quantity)
        pulumi.set(__self__, "associated_occ_handover_resource_block_lists", associated_occ_handover_resource_block_lists)
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "date_actual_handover", date_actual_handover)
        pulumi.set(__self__, "date_expected_handover", date_expected_handover)
        pulumi.set(__self__, "demand_quantity", demand_quantity)
        pulumi.set(__self__, "expected_handover_quantity", expected_handover_quantity)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "source_workload_type", source_workload_type)
        pulumi.set(__self__, "workload_type", workload_type)

    @_builtins.property
    @pulumi.getter(name="actualHandoverQuantity")
    def actual_handover_quantity(self) -> _builtins.str:
        """
        The actual handed over quantity of resources at the time of request resolution.
        """
        return pulumi.get(self, "actual_handover_quantity")

    @_builtins.property
    @pulumi.getter(name="associatedOccHandoverResourceBlockLists")
    def associated_occ_handover_resource_block_lists(self) -> Sequence['outputs.GetOccCapacityRequestDetailAssociatedOccHandoverResourceBlockListResult']:
        """
        A list containing details about occHandoverResourceBlocks which were handed over for the corresponding resource name.
        """
        return pulumi.get(self, "associated_occ_handover_resource_block_lists")

    @_builtins.property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> _builtins.str:
        """
        The availability domain of the resource which is to be transferred. Note that this is only required for Capacity Request Transfer requests.
        """
        return pulumi.get(self, "availability_domain")

    @_builtins.property
    @pulumi.getter(name="dateActualHandover")
    def date_actual_handover(self) -> _builtins.str:
        """
        The date on which the actual handover quantity of resources is delivered.
        """
        return pulumi.get(self, "date_actual_handover")

    @_builtins.property
    @pulumi.getter(name="dateExpectedHandover")
    def date_expected_handover(self) -> _builtins.str:
        """
        The date on which the latest increment to supplied quantity of resources was delivered.
        """
        return pulumi.get(self, "date_expected_handover")

    @_builtins.property
    @pulumi.getter(name="demandQuantity")
    def demand_quantity(self) -> _builtins.str:
        """
        The number of compute server's with name <resourceName> required by the user.
        """
        return pulumi.get(self, "demand_quantity")

    @_builtins.property
    @pulumi.getter(name="expectedHandoverQuantity")
    def expected_handover_quantity(self) -> _builtins.str:
        """
        The incremental quantity of resources supplied as the provisioning is underway.
        """
        return pulumi.get(self, "expected_handover_quantity")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the COMPUTE server shape for which the request is made. Do not use CAPACITY_CONSTRAINT as the resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The type of the resource against which the user wants to place a capacity request.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="sourceWorkloadType")
    def source_workload_type(self) -> _builtins.str:
        """
        The WorkloadType from where capacity request are to be transferred.
        """
        return pulumi.get(self, "source_workload_type")

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> _builtins.str:
        """
        The type of the workload (Generic/ROW).
        """
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetOccCapacityRequestDetailAssociatedOccHandoverResourceBlockListResult(dict):
    def __init__(__self__, *,
                 handover_quantity: _builtins.str,
                 occ_handover_resource_block_id: _builtins.str):
        """
        :param _builtins.str handover_quantity: The total quantity of the resource that was made available to the customer as part of this resource block
        :param _builtins.str occ_handover_resource_block_id: The OCID of the handed over resource block.
        """
        pulumi.set(__self__, "handover_quantity", handover_quantity)
        pulumi.set(__self__, "occ_handover_resource_block_id", occ_handover_resource_block_id)

    @_builtins.property
    @pulumi.getter(name="handoverQuantity")
    def handover_quantity(self) -> _builtins.str:
        """
        The total quantity of the resource that was made available to the customer as part of this resource block
        """
        return pulumi.get(self, "handover_quantity")

    @_builtins.property
    @pulumi.getter(name="occHandoverResourceBlockId")
    def occ_handover_resource_block_id(self) -> _builtins.str:
        """
        The OCID of the handed over resource block.
        """
        return pulumi.get(self, "occ_handover_resource_block_id")


@pulumi.output_type
class GetOccCapacityRequestPatchOperationResult(dict):
    def __init__(__self__, *,
                 from_: _builtins.str,
                 operation: _builtins.str,
                 position: _builtins.str,
                 selected_item: _builtins.str,
                 selection: _builtins.str,
                 value: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "selected_item", selected_item)
        pulumi.set(__self__, "selection", selection)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="from")
    def from_(self) -> _builtins.str:
        return pulumi.get(self, "from_")

    @_builtins.property
    @pulumi.getter
    def operation(self) -> _builtins.str:
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter
    def position(self) -> _builtins.str:
        return pulumi.get(self, "position")

    @_builtins.property
    @pulumi.getter(name="selectedItem")
    def selected_item(self) -> _builtins.str:
        return pulumi.get(self, "selected_item")

    @_builtins.property
    @pulumi.getter
    def selection(self) -> _builtins.str:
        return pulumi.get(self, "selection")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOccCapacityRequestsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOccCapacityRequestsOccCapacityRequestCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOccCapacityRequestsOccCapacityRequestCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOccCapacityRequestsOccCapacityRequestCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOccCapacityRequestsOccCapacityRequestCollectionItemResult(dict):
    def __init__(__self__, *,
                 availability_domain: _builtins.str,
                 compartment_id: _builtins.str,
                 date_expected_capacity_handover: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 details: Sequence['outputs.GetOccCapacityRequestsOccCapacityRequestCollectionItemDetailResult'],
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 namespace: _builtins.str,
                 occ_availability_catalog_id: _builtins.str,
                 occ_customer_group_id: _builtins.str,
                 patch_operations: Sequence['outputs.GetOccCapacityRequestsOccCapacityRequestCollectionItemPatchOperationResult'],
                 region: _builtins.str,
                 request_state: _builtins.str,
                 request_type: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str availability_domain: The availability domain of the resource which is to be transferred. Note that this is only required for Capacity Request Transfer requests.
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param _builtins.str date_expected_capacity_handover: The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param _builtins.str description: Meaningful text about the capacity request.
        :param Sequence['GetOccCapacityRequestsOccCapacityRequestCollectionItemDetailArgs'] details: A list of resources requested as part of this request
        :param _builtins.str display_name: A filter to return only the resources that match the entire display name. The match is not case sensitive.
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: A filter to return the list of capacity requests based on the OCID of the capacity request. This is done for the users who have INSPECT permission on the resource but do not have READ permission.
        :param _builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed State.
        :param _builtins.str namespace: The namespace by which we would filter the list.
        :param _builtins.str occ_availability_catalog_id: A filter to return the list of capacity requests based on the OCID of the availability catalog against which they were created.
        :param _builtins.str occ_customer_group_id: The OCID of the customer group to which this customer belongs to.
        :param _builtins.str region: The name of the region for which the capacity request was made.
        :param _builtins.str request_state: The different states the capacity request goes through.
        :param _builtins.str request_type: A filter to return only the resources that match the request type. The match is not case sensitive.
        :param _builtins.str state: The current lifecycle state of the resource.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The time when the capacity request was created.
        :param _builtins.str time_updated: The time when the capacity request was updated.
        """
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "date_expected_capacity_handover", date_expected_capacity_handover)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "occ_availability_catalog_id", occ_availability_catalog_id)
        pulumi.set(__self__, "occ_customer_group_id", occ_customer_group_id)
        pulumi.set(__self__, "patch_operations", patch_operations)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "request_state", request_state)
        pulumi.set(__self__, "request_type", request_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> _builtins.str:
        """
        The availability domain of the resource which is to be transferred. Note that this is only required for Capacity Request Transfer requests.
        """
        return pulumi.get(self, "availability_domain")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="dateExpectedCapacityHandover")
    def date_expected_capacity_handover(self) -> _builtins.str:
        """
        The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
        """
        return pulumi.get(self, "date_expected_capacity_handover")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Meaningful text about the capacity request.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetOccCapacityRequestsOccCapacityRequestCollectionItemDetailResult']:
        """
        A list of resources requested as part of this request
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only the resources that match the entire display name. The match is not case sensitive.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        A filter to return the list of capacity requests based on the OCID of the capacity request. This is done for the users who have INSPECT permission on the resource but do not have READ permission.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed State.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace by which we would filter the list.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="occAvailabilityCatalogId")
    def occ_availability_catalog_id(self) -> _builtins.str:
        """
        A filter to return the list of capacity requests based on the OCID of the availability catalog against which they were created.
        """
        return pulumi.get(self, "occ_availability_catalog_id")

    @_builtins.property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> _builtins.str:
        """
        The OCID of the customer group to which this customer belongs to.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @_builtins.property
    @pulumi.getter(name="patchOperations")
    def patch_operations(self) -> Sequence['outputs.GetOccCapacityRequestsOccCapacityRequestCollectionItemPatchOperationResult']:
        return pulumi.get(self, "patch_operations")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The name of the region for which the capacity request was made.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="requestState")
    def request_state(self) -> _builtins.str:
        """
        The different states the capacity request goes through.
        """
        return pulumi.get(self, "request_state")

    @_builtins.property
    @pulumi.getter(name="requestType")
    def request_type(self) -> _builtins.str:
        """
        A filter to return only the resources that match the request type. The match is not case sensitive.
        """
        return pulumi.get(self, "request_type")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current lifecycle state of the resource.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time when the capacity request was created.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The time when the capacity request was updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOccCapacityRequestsOccCapacityRequestCollectionItemDetailResult(dict):
    def __init__(__self__, *,
                 actual_handover_quantity: _builtins.str,
                 associated_occ_handover_resource_block_lists: Sequence['outputs.GetOccCapacityRequestsOccCapacityRequestCollectionItemDetailAssociatedOccHandoverResourceBlockListResult'],
                 availability_domain: _builtins.str,
                 date_actual_handover: _builtins.str,
                 date_expected_handover: _builtins.str,
                 demand_quantity: _builtins.str,
                 expected_handover_quantity: _builtins.str,
                 resource_name: _builtins.str,
                 resource_type: _builtins.str,
                 source_workload_type: _builtins.str,
                 workload_type: _builtins.str):
        """
        :param _builtins.str actual_handover_quantity: The actual handed over quantity of resources at the time of request resolution.
        :param Sequence['GetOccCapacityRequestsOccCapacityRequestCollectionItemDetailAssociatedOccHandoverResourceBlockListArgs'] associated_occ_handover_resource_block_lists: A list containing details about occHandoverResourceBlocks which were handed over for the corresponding resource name.
        :param _builtins.str availability_domain: The availability domain of the resource which is to be transferred. Note that this is only required for Capacity Request Transfer requests.
        :param _builtins.str date_actual_handover: The date on which the actual handover quantity of resources is delivered.
        :param _builtins.str date_expected_handover: The date on which the latest increment to supplied quantity of resources was delivered.
        :param _builtins.str demand_quantity: The number of compute server's with name <resourceName> required by the user.
        :param _builtins.str expected_handover_quantity: The incremental quantity of resources supplied as the provisioning is underway.
        :param _builtins.str resource_name: The name of the COMPUTE server shape for which the request is made. Do not use CAPACITY_CONSTRAINT as the resource name.
        :param _builtins.str resource_type: The type of the resource against which the user wants to place a capacity request.
        :param _builtins.str source_workload_type: The WorkloadType from where capacity request are to be transferred.
        :param _builtins.str workload_type: The type of the workload (Generic/ROW).
        """
        pulumi.set(__self__, "actual_handover_quantity", actual_handover_quantity)
        pulumi.set(__self__, "associated_occ_handover_resource_block_lists", associated_occ_handover_resource_block_lists)
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "date_actual_handover", date_actual_handover)
        pulumi.set(__self__, "date_expected_handover", date_expected_handover)
        pulumi.set(__self__, "demand_quantity", demand_quantity)
        pulumi.set(__self__, "expected_handover_quantity", expected_handover_quantity)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "source_workload_type", source_workload_type)
        pulumi.set(__self__, "workload_type", workload_type)

    @_builtins.property
    @pulumi.getter(name="actualHandoverQuantity")
    def actual_handover_quantity(self) -> _builtins.str:
        """
        The actual handed over quantity of resources at the time of request resolution.
        """
        return pulumi.get(self, "actual_handover_quantity")

    @_builtins.property
    @pulumi.getter(name="associatedOccHandoverResourceBlockLists")
    def associated_occ_handover_resource_block_lists(self) -> Sequence['outputs.GetOccCapacityRequestsOccCapacityRequestCollectionItemDetailAssociatedOccHandoverResourceBlockListResult']:
        """
        A list containing details about occHandoverResourceBlocks which were handed over for the corresponding resource name.
        """
        return pulumi.get(self, "associated_occ_handover_resource_block_lists")

    @_builtins.property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> _builtins.str:
        """
        The availability domain of the resource which is to be transferred. Note that this is only required for Capacity Request Transfer requests.
        """
        return pulumi.get(self, "availability_domain")

    @_builtins.property
    @pulumi.getter(name="dateActualHandover")
    def date_actual_handover(self) -> _builtins.str:
        """
        The date on which the actual handover quantity of resources is delivered.
        """
        return pulumi.get(self, "date_actual_handover")

    @_builtins.property
    @pulumi.getter(name="dateExpectedHandover")
    def date_expected_handover(self) -> _builtins.str:
        """
        The date on which the latest increment to supplied quantity of resources was delivered.
        """
        return pulumi.get(self, "date_expected_handover")

    @_builtins.property
    @pulumi.getter(name="demandQuantity")
    def demand_quantity(self) -> _builtins.str:
        """
        The number of compute server's with name <resourceName> required by the user.
        """
        return pulumi.get(self, "demand_quantity")

    @_builtins.property
    @pulumi.getter(name="expectedHandoverQuantity")
    def expected_handover_quantity(self) -> _builtins.str:
        """
        The incremental quantity of resources supplied as the provisioning is underway.
        """
        return pulumi.get(self, "expected_handover_quantity")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The name of the COMPUTE server shape for which the request is made. Do not use CAPACITY_CONSTRAINT as the resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The type of the resource against which the user wants to place a capacity request.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="sourceWorkloadType")
    def source_workload_type(self) -> _builtins.str:
        """
        The WorkloadType from where capacity request are to be transferred.
        """
        return pulumi.get(self, "source_workload_type")

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> _builtins.str:
        """
        The type of the workload (Generic/ROW).
        """
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetOccCapacityRequestsOccCapacityRequestCollectionItemDetailAssociatedOccHandoverResourceBlockListResult(dict):
    def __init__(__self__, *,
                 handover_quantity: _builtins.str,
                 occ_handover_resource_block_id: _builtins.str):
        """
        :param _builtins.str handover_quantity: The total quantity of the resource that was made available to the customer as part of this resource block
        :param _builtins.str occ_handover_resource_block_id: The OCID of the handed over resource block.
        """
        pulumi.set(__self__, "handover_quantity", handover_quantity)
        pulumi.set(__self__, "occ_handover_resource_block_id", occ_handover_resource_block_id)

    @_builtins.property
    @pulumi.getter(name="handoverQuantity")
    def handover_quantity(self) -> _builtins.str:
        """
        The total quantity of the resource that was made available to the customer as part of this resource block
        """
        return pulumi.get(self, "handover_quantity")

    @_builtins.property
    @pulumi.getter(name="occHandoverResourceBlockId")
    def occ_handover_resource_block_id(self) -> _builtins.str:
        """
        The OCID of the handed over resource block.
        """
        return pulumi.get(self, "occ_handover_resource_block_id")


@pulumi.output_type
class GetOccCapacityRequestsOccCapacityRequestCollectionItemPatchOperationResult(dict):
    def __init__(__self__, *,
                 from_: _builtins.str,
                 operation: _builtins.str,
                 position: _builtins.str,
                 selected_item: _builtins.str,
                 selection: _builtins.str,
                 value: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "selected_item", selected_item)
        pulumi.set(__self__, "selection", selection)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="from")
    def from_(self) -> _builtins.str:
        return pulumi.get(self, "from_")

    @_builtins.property
    @pulumi.getter
    def operation(self) -> _builtins.str:
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter
    def position(self) -> _builtins.str:
        return pulumi.get(self, "position")

    @_builtins.property
    @pulumi.getter(name="selectedItem")
    def selected_item(self) -> _builtins.str:
        return pulumi.get(self, "selected_item")

    @_builtins.property
    @pulumi.getter
    def selection(self) -> _builtins.str:
        return pulumi.get(self, "selection")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOccCustomerGroupCustomersListResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 display_name: _builtins.str,
                 occ_customer_group_id: _builtins.str,
                 status: _builtins.str,
                 tenancy_id: _builtins.str):
        """
        :param _builtins.str description: The description about the customer group.
        :param _builtins.str display_name: The display name of the customer group.
        :param _builtins.str occ_customer_group_id: The OCID of the customer group.
        :param _builtins.str status: To determine whether the customer group is enabled/disabled.
        :param _builtins.str tenancy_id: The OCID of the tenancy belonging to the customer.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "occ_customer_group_id", occ_customer_group_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tenancy_id", tenancy_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description about the customer group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the customer group.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> _builtins.str:
        """
        The OCID of the customer group.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        To determine whether the customer group is enabled/disabled.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> _builtins.str:
        """
        The OCID of the tenancy belonging to the customer.
        """
        return pulumi.get(self, "tenancy_id")


@pulumi.output_type
class GetOccCustomerGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOccCustomerGroupsOccCustomerGroupCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOccCustomerGroupsOccCustomerGroupCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOccCustomerGroupsOccCustomerGroupCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOccCustomerGroupsOccCustomerGroupCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 customers_lists: Sequence['outputs.GetOccCustomerGroupsOccCustomerGroupCollectionItemCustomersListResult'],
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 state: _builtins.str,
                 status: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param Sequence['GetOccCustomerGroupsOccCustomerGroupCollectionItemCustomersListArgs'] customers_lists: A list containing all the customers that belong to this customer group
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param _builtins.str description: The description about the customer group.
        :param _builtins.str display_name: A filter to return only the resources that match the entire display name. The match is not case sensitive.
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: A query filter to return the list result based on the customer group OCID. This is done for users who have INSPECT permission but do not have READ permission.
        :param _builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed State.
        :param _builtins.str state: The current lifecycle state of the resource.
        :param _builtins.str status: A query filter to return the list result based on status.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The time when the customer group was created.
        :param _builtins.str time_updated: The time when the customer group was last updated.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "customers_lists", customers_lists)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="customersLists")
    def customers_lists(self) -> Sequence['outputs.GetOccCustomerGroupsOccCustomerGroupCollectionItemCustomersListResult']:
        """
        A list containing all the customers that belong to this customer group
        """
        return pulumi.get(self, "customers_lists")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description about the customer group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only the resources that match the entire display name. The match is not case sensitive.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        A query filter to return the list result based on the customer group OCID. This is done for users who have INSPECT permission but do not have READ permission.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed State.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current lifecycle state of the resource.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        A query filter to return the list result based on status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time when the customer group was created.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The time when the customer group was last updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOccCustomerGroupsOccCustomerGroupCollectionItemCustomersListResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 display_name: _builtins.str,
                 occ_customer_group_id: _builtins.str,
                 status: _builtins.str,
                 tenancy_id: _builtins.str):
        """
        :param _builtins.str description: The description about the customer group.
        :param _builtins.str display_name: A filter to return only the resources that match the entire display name. The match is not case sensitive.
        :param _builtins.str occ_customer_group_id: The OCID of the customer group.
        :param _builtins.str status: A query filter to return the list result based on status.
        :param _builtins.str tenancy_id: The OCID of the tenancy belonging to the customer.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "occ_customer_group_id", occ_customer_group_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tenancy_id", tenancy_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description about the customer group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only the resources that match the entire display name. The match is not case sensitive.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> _builtins.str:
        """
        The OCID of the customer group.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        A query filter to return the list result based on status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> _builtins.str:
        """
        The OCID of the tenancy belonging to the customer.
        """
        return pulumi.get(self, "tenancy_id")


@pulumi.output_type
class GetOccHandoverResourceBlockDetailsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOccHandoverResourceBlockDetailsOccHandoverResourceBlockDetailCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOccHandoverResourceBlockDetailsOccHandoverResourceBlockDetailCollectionItemResult']):
        """
        :param Sequence['GetOccHandoverResourceBlockDetailsOccHandoverResourceBlockDetailCollectionItemArgs'] items: An array of details about an occ handover resource block.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOccHandoverResourceBlockDetailsOccHandoverResourceBlockDetailCollectionItemResult']:
        """
        An array of details about an occ handover resource block.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOccHandoverResourceBlockDetailsOccHandoverResourceBlockDetailCollectionItemResult(dict):
    def __init__(__self__, *,
                 details: Mapping[str, _builtins.str],
                 occ_resource_handover_block_id: _builtins.str):
        """
        :param Mapping[str, _builtins.str] details: A map that contains additional details for a given handover resource. For example for compute namespace this includes host ocid, host serial etc.
        :param _builtins.str occ_resource_handover_block_id: The OCID of the occResourceHandoverBlock.
        """
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "occ_resource_handover_block_id", occ_resource_handover_block_id)

    @_builtins.property
    @pulumi.getter
    def details(self) -> Mapping[str, _builtins.str]:
        """
        A map that contains additional details for a given handover resource. For example for compute namespace this includes host ocid, host serial etc.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="occResourceHandoverBlockId")
    def occ_resource_handover_block_id(self) -> _builtins.str:
        """
        The OCID of the occResourceHandoverBlock.
        """
        return pulumi.get(self, "occ_resource_handover_block_id")


@pulumi.output_type
class GetOccHandoverResourceBlocksFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemResult']):
        """
        :param Sequence['GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemArgs'] items: An array of occ handover resource blocks.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemResult']:
        """
        An array of occ handover resource blocks.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemResult(dict):
    def __init__(__self__, *,
                 associated_capacity_requests: Sequence['outputs.GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemAssociatedCapacityRequestResult'],
                 compartment_id: _builtins.str,
                 handover_date: _builtins.str,
                 handover_resource_name: _builtins.str,
                 id: _builtins.str,
                 namespace: _builtins.str,
                 occ_customer_group_id: _builtins.str,
                 placement_details: Sequence['outputs.GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemPlacementDetailResult'],
                 total_handover_quantity: _builtins.str):
        """
        :param Sequence['GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemAssociatedCapacityRequestArgs'] associated_capacity_requests: A list containing details about the capacity requests against which the resources were provisioned by oracle.
        :param _builtins.str compartment_id: The OCID of the compartment or tenancy in which resources are to be listed.
        :param _builtins.str handover_date: The date on which the resource was handed over to the customer.
        :param _builtins.str handover_resource_name: A filter to return only the list of resources that match the name provided in this filter.
        :param _builtins.str id: The OCID of the resource block.
        :param _builtins.str namespace: The namespace by which we would filter the list.
        :param _builtins.str occ_customer_group_id: The OCID of the customer group for which the resources were provisioned.
        :param Sequence['GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemPlacementDetailArgs'] placement_details: Details like building, room and block where the resource was placed after provisioning in the datacenter.
        :param _builtins.str total_handover_quantity: The total quantity of the resource that was made available to the customer by Oracle.
        """
        pulumi.set(__self__, "associated_capacity_requests", associated_capacity_requests)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "handover_date", handover_date)
        pulumi.set(__self__, "handover_resource_name", handover_resource_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "occ_customer_group_id", occ_customer_group_id)
        pulumi.set(__self__, "placement_details", placement_details)
        pulumi.set(__self__, "total_handover_quantity", total_handover_quantity)

    @_builtins.property
    @pulumi.getter(name="associatedCapacityRequests")
    def associated_capacity_requests(self) -> Sequence['outputs.GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemAssociatedCapacityRequestResult']:
        """
        A list containing details about the capacity requests against which the resources were provisioned by oracle.
        """
        return pulumi.get(self, "associated_capacity_requests")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The OCID of the compartment or tenancy in which resources are to be listed.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="handoverDate")
    def handover_date(self) -> _builtins.str:
        """
        The date on which the resource was handed over to the customer.
        """
        return pulumi.get(self, "handover_date")

    @_builtins.property
    @pulumi.getter(name="handoverResourceName")
    def handover_resource_name(self) -> _builtins.str:
        """
        A filter to return only the list of resources that match the name provided in this filter.
        """
        return pulumi.get(self, "handover_resource_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the resource block.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The namespace by which we would filter the list.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="occCustomerGroupId")
    def occ_customer_group_id(self) -> _builtins.str:
        """
        The OCID of the customer group for which the resources were provisioned.
        """
        return pulumi.get(self, "occ_customer_group_id")

    @_builtins.property
    @pulumi.getter(name="placementDetails")
    def placement_details(self) -> Sequence['outputs.GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemPlacementDetailResult']:
        """
        Details like building, room and block where the resource was placed after provisioning in the datacenter.
        """
        return pulumi.get(self, "placement_details")

    @_builtins.property
    @pulumi.getter(name="totalHandoverQuantity")
    def total_handover_quantity(self) -> _builtins.str:
        """
        The total quantity of the resource that was made available to the customer by Oracle.
        """
        return pulumi.get(self, "total_handover_quantity")


@pulumi.output_type
class GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemAssociatedCapacityRequestResult(dict):
    def __init__(__self__, *,
                 handover_quantity: _builtins.str,
                 occ_capacity_request_id: _builtins.str):
        """
        :param _builtins.str handover_quantity: The total quantity of the bare metal hardware that was made available corresponding to the capacity request ocid.
        :param _builtins.str occ_capacity_request_id: The OCID of the capacity request against which the resources were provisioned.
        """
        pulumi.set(__self__, "handover_quantity", handover_quantity)
        pulumi.set(__self__, "occ_capacity_request_id", occ_capacity_request_id)

    @_builtins.property
    @pulumi.getter(name="handoverQuantity")
    def handover_quantity(self) -> _builtins.str:
        """
        The total quantity of the bare metal hardware that was made available corresponding to the capacity request ocid.
        """
        return pulumi.get(self, "handover_quantity")

    @_builtins.property
    @pulumi.getter(name="occCapacityRequestId")
    def occ_capacity_request_id(self) -> _builtins.str:
        """
        The OCID of the capacity request against which the resources were provisioned.
        """
        return pulumi.get(self, "occ_capacity_request_id")


@pulumi.output_type
class GetOccHandoverResourceBlocksOccHandoverResourceBlockCollectionItemPlacementDetailResult(dict):
    def __init__(__self__, *,
                 availability_domain: _builtins.str,
                 block: _builtins.str,
                 building: _builtins.str,
                 region: _builtins.str,
                 room: _builtins.str,
                 workload_type: _builtins.str):
        """
        :param _builtins.str availability_domain: The availability domain (AD) for which the resources were provisioned.
        :param _builtins.str block: The block in the datacenter room where the resource was placed.
        :param _builtins.str building: The datacenter building where the resource was placed.
        :param _builtins.str region: The name of the region for which the resources were provisioned.
        :param _builtins.str room: The name of the room in the dataacenter building where the resource was placed.
        :param _builtins.str workload_type: The type of workload to which these resources were provisioned.
        """
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "block", block)
        pulumi.set(__self__, "building", building)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "room", room)
        pulumi.set(__self__, "workload_type", workload_type)

    @_builtins.property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> _builtins.str:
        """
        The availability domain (AD) for which the resources were provisioned.
        """
        return pulumi.get(self, "availability_domain")

    @_builtins.property
    @pulumi.getter
    def block(self) -> _builtins.str:
        """
        The block in the datacenter room where the resource was placed.
        """
        return pulumi.get(self, "block")

    @_builtins.property
    @pulumi.getter
    def building(self) -> _builtins.str:
        """
        The datacenter building where the resource was placed.
        """
        return pulumi.get(self, "building")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The name of the region for which the resources were provisioned.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def room(self) -> _builtins.str:
        """
        The name of the room in the dataacenter building where the resource was placed.
        """
        return pulumi.get(self, "room")

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> _builtins.str:
        """
        The type of workload to which these resources were provisioned.
        """
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetOccmDemandSignalCatalogResourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: A query parameter to filter the list of demand signal catalog resource based on the resource name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        A query parameter to filter the list of demand signal catalog resource based on the resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResult']):
        """
        :param Sequence['GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemArgs'] items: An array of items containing detailed information about a resource's property dependecies.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResult']:
        """
        An array of items containing detailed information about a resource's property dependecies.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 availability_domain: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 name: _builtins.str,
                 namespace: _builtins.str,
                 region: _builtins.str,
                 resource_properties: Sequence['outputs.GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyResult'],
                 resource_property_constraints: Sequence['outputs.GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintResult'],
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_compartment_id: _builtins.str,
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str availability_domain: The name of the availability domain for which you want to request the Oracle Cloud Infrastructure resource. This is an optional parameter.
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: The OCID of the demand signal catalog resource.
        :param _builtins.str name: A query parameter to filter the list of demand signal catalog resource based on the resource name.
        :param _builtins.str namespace: The name of the Oracle Cloud Infrastructure service in consideration for demand signal submission. For example: COMPUTE, NETWORK, GPU etc.
        :param _builtins.str region: The name of region for which you want to request the Oracle Cloud Infrastructure resource. This is an optional parameter.
        :param Sequence['GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyArgs'] resource_properties: A list containing detailed information about a resource's properties.
        :param Sequence['GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintArgs'] resource_property_constraints: A list containing detailed information about a resource's property constraints.
        :param _builtins.str state: The current lifecycles state of the demand signal catalog resource.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_compartment_id: The OCID of the customer tenancy for which this resource will be available for the customer to order against.
        :param _builtins.str time_created: The time when the demand signal catalog resource was created.
        :param _builtins.str time_updated: The time when the demand signal catalog resource was last updated.
        """
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "resource_properties", resource_properties)
        pulumi.set(__self__, "resource_property_constraints", resource_property_constraints)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> _builtins.str:
        """
        The name of the availability domain for which you want to request the Oracle Cloud Infrastructure resource. This is an optional parameter.
        """
        return pulumi.get(self, "availability_domain")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the demand signal catalog resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        A query parameter to filter the list of demand signal catalog resource based on the resource name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The name of the Oracle Cloud Infrastructure service in consideration for demand signal submission. For example: COMPUTE, NETWORK, GPU etc.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The name of region for which you want to request the Oracle Cloud Infrastructure resource. This is an optional parameter.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceProperties")
    def resource_properties(self) -> Sequence['outputs.GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyResult']:
        """
        A list containing detailed information about a resource's properties.
        """
        return pulumi.get(self, "resource_properties")

    @_builtins.property
    @pulumi.getter(name="resourcePropertyConstraints")
    def resource_property_constraints(self) -> Sequence['outputs.GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintResult']:
        """
        A list containing detailed information about a resource's property constraints.
        """
        return pulumi.get(self, "resource_property_constraints")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current lifecycles state of the demand signal catalog resource.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> _builtins.str:
        """
        The OCID of the customer tenancy for which this resource will be available for the customer to order against.
        """
        return pulumi.get(self, "target_compartment_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time when the demand signal catalog resource was created.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The time when the demand signal catalog resource was last updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemResult']):
        """
        :param Sequence['GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemArgs'] items: An array of items containing detailed information about a resource's property dependecies.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemResult']:
        """
        An array of items containing detailed information about a resource's property dependecies.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintItemResult']):
        """
        :param Sequence['GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintItemArgs'] items: An array of items containing detailed information about a resource's property dependecies.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintItemResult']:
        """
        An array of items containing detailed information about a resource's property dependecies.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyConstraintItemResult(dict):
    def __init__(__self__, *,
                 constraint_name: _builtins.str,
                 constraint_value: _builtins.str):
        """
        :param _builtins.str constraint_name: The name of demand signal resource's property constraint.
        :param _builtins.str constraint_value: The value of demand signal resource's property constraint.
        """
        pulumi.set(__self__, "constraint_name", constraint_name)
        pulumi.set(__self__, "constraint_value", constraint_value)

    @_builtins.property
    @pulumi.getter(name="constraintName")
    def constraint_name(self) -> _builtins.str:
        """
        The name of demand signal resource's property constraint.
        """
        return pulumi.get(self, "constraint_name")

    @_builtins.property
    @pulumi.getter(name="constraintValue")
    def constraint_value(self) -> _builtins.str:
        """
        The value of demand signal resource's property constraint.
        """
        return pulumi.get(self, "constraint_value")


@pulumi.output_type
class GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemResult(dict):
    def __init__(__self__, *,
                 is_editable: _builtins.bool,
                 property_max_value: _builtins.str,
                 property_min_value: _builtins.str,
                 property_name: _builtins.str,
                 property_options: Sequence['outputs.GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemPropertyOptionResult'],
                 property_unit: _builtins.str,
                 property_value: _builtins.str):
        """
        :param _builtins.bool is_editable: This will indicate if demand signal resource's property is editable.
        :param _builtins.str property_max_value: The maximum value of demand signal resource's property. This is an optional parameter.
        :param _builtins.str property_min_value: The minimum value of demand signal resource's property. This is an optional parameter.
        :param _builtins.str property_name: The name of demand signal resource's property.
        :param Sequence['GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemPropertyOptionArgs'] property_options: Predefined options for demand signal resource's property. This is an optional parameter.
        :param _builtins.str property_unit: Unit for demand signal resource's property.
        :param _builtins.str property_value: Default value of demand signal resource's property.
        """
        pulumi.set(__self__, "is_editable", is_editable)
        pulumi.set(__self__, "property_max_value", property_max_value)
        pulumi.set(__self__, "property_min_value", property_min_value)
        pulumi.set(__self__, "property_name", property_name)
        pulumi.set(__self__, "property_options", property_options)
        pulumi.set(__self__, "property_unit", property_unit)
        pulumi.set(__self__, "property_value", property_value)

    @_builtins.property
    @pulumi.getter(name="isEditable")
    def is_editable(self) -> _builtins.bool:
        """
        This will indicate if demand signal resource's property is editable.
        """
        return pulumi.get(self, "is_editable")

    @_builtins.property
    @pulumi.getter(name="propertyMaxValue")
    def property_max_value(self) -> _builtins.str:
        """
        The maximum value of demand signal resource's property. This is an optional parameter.
        """
        return pulumi.get(self, "property_max_value")

    @_builtins.property
    @pulumi.getter(name="propertyMinValue")
    def property_min_value(self) -> _builtins.str:
        """
        The minimum value of demand signal resource's property. This is an optional parameter.
        """
        return pulumi.get(self, "property_min_value")

    @_builtins.property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> _builtins.str:
        """
        The name of demand signal resource's property.
        """
        return pulumi.get(self, "property_name")

    @_builtins.property
    @pulumi.getter(name="propertyOptions")
    def property_options(self) -> Sequence['outputs.GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemPropertyOptionResult']:
        """
        Predefined options for demand signal resource's property. This is an optional parameter.
        """
        return pulumi.get(self, "property_options")

    @_builtins.property
    @pulumi.getter(name="propertyUnit")
    def property_unit(self) -> _builtins.str:
        """
        Unit for demand signal resource's property.
        """
        return pulumi.get(self, "property_unit")

    @_builtins.property
    @pulumi.getter(name="propertyValue")
    def property_value(self) -> _builtins.str:
        """
        Default value of demand signal resource's property.
        """
        return pulumi.get(self, "property_value")


@pulumi.output_type
class GetOccmDemandSignalCatalogResourcesOccmDemandSignalCatalogResourceCollectionItemResourcePropertyItemPropertyOptionResult(dict):
    def __init__(__self__, *,
                 option_key: _builtins.str,
                 option_value: _builtins.str):
        """
        :param _builtins.str option_key: key of a property option like memoryValue, ocpuValue.
        :param _builtins.str option_value: value of a property option like 64, 2 fastconnect etc.
        """
        pulumi.set(__self__, "option_key", option_key)
        pulumi.set(__self__, "option_value", option_value)

    @_builtins.property
    @pulumi.getter(name="optionKey")
    def option_key(self) -> _builtins.str:
        """
        key of a property option like memoryValue, ocpuValue.
        """
        return pulumi.get(self, "option_key")

    @_builtins.property
    @pulumi.getter(name="optionValue")
    def option_value(self) -> _builtins.str:
        """
        value of a property option like 64, 2 fastconnect etc.
        """
        return pulumi.get(self, "option_value")


@pulumi.output_type
class GetOccmDemandSignalDeliveriesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOccmDemandSignalDeliveriesOccmDemandSignalDeliveryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOccmDemandSignalDeliveriesOccmDemandSignalDeliveryCollectionItemResult']):
        """
        :param Sequence['GetOccmDemandSignalDeliveriesOccmDemandSignalDeliveryCollectionItemArgs'] items: An array of items containing detailed information about demand signal delivery resources.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOccmDemandSignalDeliveriesOccmDemandSignalDeliveryCollectionItemResult']:
        """
        An array of items containing detailed information about demand signal delivery resources.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOccmDemandSignalDeliveriesOccmDemandSignalDeliveryCollectionItemResult(dict):
    def __init__(__self__, *,
                 accepted_quantity: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 demand_signal_id: _builtins.str,
                 demand_signal_item_id: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 justification: _builtins.str,
                 lifecycle_details: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_delivered: _builtins.str):
        """
        :param _builtins.str accepted_quantity: The quantity of the resource that Oracle Cloud Infrastructure will supply to the customer.
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param _builtins.str demand_signal_id: The OCID of the demand signal under which this delivery will be grouped.
        :param _builtins.str demand_signal_item_id: The OCID of the demand signal item corresponding to which this delivery is made.
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: A query parameter to filter the list of demand signals based on it's OCID.
        :param _builtins.str justification: This field could be used by Oracle Cloud Infrastructure to communicate the reason for accepting or declining the request.
        :param _builtins.str lifecycle_details: The enum values corresponding to the various states associated with the delivery resource.
        :param _builtins.str state: The current lifecycle state of the resource.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_delivered: The date on which the Oracle Cloud Infrastructure delivered the resource to the customers.
        """
        pulumi.set(__self__, "accepted_quantity", accepted_quantity)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "demand_signal_id", demand_signal_id)
        pulumi.set(__self__, "demand_signal_item_id", demand_signal_item_id)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_delivered", time_delivered)

    @_builtins.property
    @pulumi.getter(name="acceptedQuantity")
    def accepted_quantity(self) -> _builtins.str:
        """
        The quantity of the resource that Oracle Cloud Infrastructure will supply to the customer.
        """
        return pulumi.get(self, "accepted_quantity")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter(name="demandSignalId")
    def demand_signal_id(self) -> _builtins.str:
        """
        The OCID of the demand signal under which this delivery will be grouped.
        """
        return pulumi.get(self, "demand_signal_id")

    @_builtins.property
    @pulumi.getter(name="demandSignalItemId")
    def demand_signal_item_id(self) -> _builtins.str:
        """
        The OCID of the demand signal item corresponding to which this delivery is made.
        """
        return pulumi.get(self, "demand_signal_item_id")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        A query parameter to filter the list of demand signals based on it's OCID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        This field could be used by Oracle Cloud Infrastructure to communicate the reason for accepting or declining the request.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        The enum values corresponding to the various states associated with the delivery resource.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current lifecycle state of the resource.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeDelivered")
    def time_delivered(self) -> _builtins.str:
        """
        The date on which the Oracle Cloud Infrastructure delivered the resource to the customers.
        """
        return pulumi.get(self, "time_delivered")


@pulumi.output_type
class GetOccmDemandSignalItemsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOccmDemandSignalItemsOccmDemandSignalItemCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOccmDemandSignalItemsOccmDemandSignalItemCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOccmDemandSignalItemsOccmDemandSignalItemCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOccmDemandSignalItemsOccmDemandSignalItemCollectionItemResult(dict):
    def __init__(__self__, *,
                 availability_domain: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 demand_quantity: _builtins.str,
                 demand_signal_catalog_resource_id: _builtins.str,
                 demand_signal_id: _builtins.str,
                 demand_signal_namespace: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 notes: _builtins.str,
                 region: _builtins.str,
                 request_type: _builtins.str,
                 resource_name: _builtins.str,
                 resource_properties: Mapping[str, _builtins.str],
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_compartment_id: _builtins.str,
                 time_needed_before: _builtins.str):
        """
        :param _builtins.str availability_domain: The name of the availability domain for which you want to request the Oracle Cloud Infrastructure resource.
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param _builtins.str demand_quantity: The quantity of the resource that you want to demand from OCI.
        :param _builtins.str demand_signal_catalog_resource_id: The OCID of the corresponding demand signal catalog resource.
        :param _builtins.str demand_signal_id: The OCID of the demand signal under which this item will be grouped.
        :param _builtins.str demand_signal_namespace: A query parameter to filter the list of demand signal details based on the namespace.
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: The OCID of the demand signal item.
        :param _builtins.str notes: This field will serve as notes section for you. You can use this section to convey a message to Oracle Cloud Infrastructure regarding your resource request.
        :param _builtins.str region: The name of region for which you want to request the Oracle Cloud Infrastructure resource.
        :param _builtins.str request_type: The type of request (DEMAND or RETURN) made against a particular demand signal item.
        :param _builtins.str resource_name: A query parameter to filter the list of demand signal details based on the resource name.
        :param Mapping[str, _builtins.str] resource_properties: A map of various properties associated with the Oracle Cloud Infrastructure resource.
        :param _builtins.str state: The current lifecycle state of the resource.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_compartment_id: The OCID of the tenancy for which you want to request the Oracle Cloud Infrastructure resource for. This is an optional parameter.
        :param _builtins.str time_needed_before: the date before which you would ideally like the Oracle Cloud Infrastructure resource to be delivered to you.
        """
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "demand_quantity", demand_quantity)
        pulumi.set(__self__, "demand_signal_catalog_resource_id", demand_signal_catalog_resource_id)
        pulumi.set(__self__, "demand_signal_id", demand_signal_id)
        pulumi.set(__self__, "demand_signal_namespace", demand_signal_namespace)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "request_type", request_type)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_properties", resource_properties)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        pulumi.set(__self__, "time_needed_before", time_needed_before)

    @_builtins.property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> _builtins.str:
        """
        The name of the availability domain for which you want to request the Oracle Cloud Infrastructure resource.
        """
        return pulumi.get(self, "availability_domain")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter(name="demandQuantity")
    def demand_quantity(self) -> _builtins.str:
        """
        The quantity of the resource that you want to demand from OCI.
        """
        return pulumi.get(self, "demand_quantity")

    @_builtins.property
    @pulumi.getter(name="demandSignalCatalogResourceId")
    def demand_signal_catalog_resource_id(self) -> _builtins.str:
        """
        The OCID of the corresponding demand signal catalog resource.
        """
        return pulumi.get(self, "demand_signal_catalog_resource_id")

    @_builtins.property
    @pulumi.getter(name="demandSignalId")
    def demand_signal_id(self) -> _builtins.str:
        """
        The OCID of the demand signal under which this item will be grouped.
        """
        return pulumi.get(self, "demand_signal_id")

    @_builtins.property
    @pulumi.getter(name="demandSignalNamespace")
    def demand_signal_namespace(self) -> _builtins.str:
        """
        A query parameter to filter the list of demand signal details based on the namespace.
        """
        return pulumi.get(self, "demand_signal_namespace")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the demand signal item.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> _builtins.str:
        """
        This field will serve as notes section for you. You can use this section to convey a message to Oracle Cloud Infrastructure regarding your resource request.
        """
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The name of region for which you want to request the Oracle Cloud Infrastructure resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="requestType")
    def request_type(self) -> _builtins.str:
        """
        The type of request (DEMAND or RETURN) made against a particular demand signal item.
        """
        return pulumi.get(self, "request_type")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        A query parameter to filter the list of demand signal details based on the resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceProperties")
    def resource_properties(self) -> Mapping[str, _builtins.str]:
        """
        A map of various properties associated with the Oracle Cloud Infrastructure resource.
        """
        return pulumi.get(self, "resource_properties")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current lifecycle state of the resource.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> _builtins.str:
        """
        The OCID of the tenancy for which you want to request the Oracle Cloud Infrastructure resource for. This is an optional parameter.
        """
        return pulumi.get(self, "target_compartment_id")

    @_builtins.property
    @pulumi.getter(name="timeNeededBefore")
    def time_needed_before(self) -> _builtins.str:
        """
        the date before which you would ideally like the Oracle Cloud Infrastructure resource to be delivered to you.
        """
        return pulumi.get(self, "time_needed_before")


@pulumi.output_type
class GetOccmDemandSignalsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOccmDemandSignalsOccmDemandSignalCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOccmDemandSignalsOccmDemandSignalCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOccmDemandSignalsOccmDemandSignalCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOccmDemandSignalsOccmDemandSignalCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param _builtins.str description: Meaningful text about the demand signal.
        :param _builtins.str display_name: A filter to return only the resources that match the entire display name. The match is not case sensitive.
        :param Mapping[str, _builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param _builtins.str id: A query parameter to filter the list of demand signals based on it's OCID.
        :param _builtins.str lifecycle_details: A query parameter to filter the list of demand signals based on its state.
        :param _builtins.str state: The current lifecycle state of the resource.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The time when the demand signal was created.
        :param _builtins.str time_updated: The time when the demand signal was last updated.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Meaningful text about the demand signal.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only the resources that match the entire display name. The match is not case sensitive.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        A query parameter to filter the list of demand signals based on it's OCID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        A query parameter to filter the list of demand signals based on its state.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current lifecycle state of the resource.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time when the demand signal was created.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The time when the demand signal was last updated.
        """
        return pulumi.get(self, "time_updated")


