# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CertificateAuthorityCertificateAuthorityConfig',
    'CertificateAuthorityCertificateAuthorityConfigSubject',
    'CertificateAuthorityCertificateAuthorityConfigValidity',
    'CertificateAuthorityCertificateAuthorityRule',
    'CertificateAuthorityCertificateRevocationListDetails',
    'CertificateAuthorityCertificateRevocationListDetailsObjectStorageConfig',
    'CertificateAuthorityCurrentVersion',
    'CertificateAuthorityCurrentVersionRevocationStatus',
    'CertificateAuthorityCurrentVersionValidity',
    'CertificateAuthoritySubject',
    'CertificateCertificateConfig',
    'CertificateCertificateConfigSubject',
    'CertificateCertificateConfigSubjectAlternativeName',
    'CertificateCertificateConfigValidity',
    'CertificateCertificateRevocationListDetail',
    'CertificateCertificateRevocationListDetailObjectStorageConfig',
    'CertificateCertificateRule',
    'CertificateCurrentVersion',
    'CertificateCurrentVersionRevocationStatus',
    'CertificateCurrentVersionSubjectAlternativeName',
    'CertificateCurrentVersionValidity',
    'CertificateSubject',
    'GetAssociationsAssociationCollectionResult',
    'GetAssociationsAssociationCollectionItemResult',
    'GetAssociationsFilterResult',
    'GetCaBundlesCaBundleCollectionResult',
    'GetCaBundlesCaBundleCollectionItemResult',
    'GetCaBundlesFilterResult',
    'GetCertificateAuthoritiesCertificateAuthorityCollectionResult',
    'GetCertificateAuthoritiesCertificateAuthorityCollectionItemResult',
    'GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigResult',
    'GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigSubjectResult',
    'GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigValidityResult',
    'GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityRuleResult',
    'GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateRevocationListDetailResult',
    'GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateRevocationListDetailObjectStorageConfigResult',
    'GetCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionResult',
    'GetCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionRevocationStatusResult',
    'GetCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionValidityResult',
    'GetCertificateAuthoritiesCertificateAuthorityCollectionItemSubjectResult',
    'GetCertificateAuthoritiesFilterResult',
    'GetCertificateAuthorityCertificateAuthorityConfigResult',
    'GetCertificateAuthorityCertificateAuthorityConfigSubjectResult',
    'GetCertificateAuthorityCertificateAuthorityConfigValidityResult',
    'GetCertificateAuthorityCertificateAuthorityRuleResult',
    'GetCertificateAuthorityCertificateRevocationListDetailResult',
    'GetCertificateAuthorityCertificateRevocationListDetailObjectStorageConfigResult',
    'GetCertificateAuthorityCurrentVersionResult',
    'GetCertificateAuthorityCurrentVersionRevocationStatusResult',
    'GetCertificateAuthorityCurrentVersionValidityResult',
    'GetCertificateAuthoritySubjectResult',
    'GetCertificateAuthorityVersionRevocationStatusResult',
    'GetCertificateAuthorityVersionSubjectAlternativeNameResult',
    'GetCertificateAuthorityVersionValidityResult',
    'GetCertificateAuthorityVersionsCertificateAuthorityVersionCollectionResult',
    'GetCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemResult',
    'GetCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemRevocationStatusResult',
    'GetCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemValidityResult',
    'GetCertificateAuthorityVersionsFilterResult',
    'GetCertificateCertificateConfigResult',
    'GetCertificateCertificateConfigSubjectResult',
    'GetCertificateCertificateConfigSubjectAlternativeNameResult',
    'GetCertificateCertificateConfigValidityResult',
    'GetCertificateCertificateRevocationListDetailResult',
    'GetCertificateCertificateRevocationListDetailObjectStorageConfigResult',
    'GetCertificateCertificateRuleResult',
    'GetCertificateCurrentVersionResult',
    'GetCertificateCurrentVersionRevocationStatusResult',
    'GetCertificateCurrentVersionSubjectAlternativeNameResult',
    'GetCertificateCurrentVersionValidityResult',
    'GetCertificateSubjectResult',
    'GetCertificateVersionRevocationStatusResult',
    'GetCertificateVersionSubjectAlternativeNameResult',
    'GetCertificateVersionValidityResult',
    'GetCertificateVersionsCertificateVersionCollectionResult',
    'GetCertificateVersionsCertificateVersionCollectionItemResult',
    'GetCertificateVersionsCertificateVersionCollectionItemRevocationStatusResult',
    'GetCertificateVersionsCertificateVersionCollectionItemSubjectAlternativeNameResult',
    'GetCertificateVersionsCertificateVersionCollectionItemValidityResult',
    'GetCertificateVersionsFilterResult',
    'GetCertificatesCertificateCollectionResult',
    'GetCertificatesCertificateCollectionItemResult',
    'GetCertificatesCertificateCollectionItemCertificateConfigResult',
    'GetCertificatesCertificateCollectionItemCertificateConfigSubjectResult',
    'GetCertificatesCertificateCollectionItemCertificateConfigSubjectAlternativeNameResult',
    'GetCertificatesCertificateCollectionItemCertificateConfigValidityResult',
    'GetCertificatesCertificateCollectionItemCertificateRevocationListDetailResult',
    'GetCertificatesCertificateCollectionItemCertificateRevocationListDetailObjectStorageConfigResult',
    'GetCertificatesCertificateCollectionItemCertificateRuleResult',
    'GetCertificatesCertificateCollectionItemCurrentVersionResult',
    'GetCertificatesCertificateCollectionItemCurrentVersionRevocationStatusResult',
    'GetCertificatesCertificateCollectionItemCurrentVersionSubjectAlternativeNameResult',
    'GetCertificatesCertificateCollectionItemCurrentVersionValidityResult',
    'GetCertificatesCertificateCollectionItemSubjectResult',
    'GetCertificatesFilterResult',
]

@pulumi.output_type
class CertificateAuthorityCertificateAuthorityConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configType":
            suggest = "config_type"
        elif key == "issuerCertificateAuthorityId":
            suggest = "issuer_certificate_authority_id"
        elif key == "signingAlgorithm":
            suggest = "signing_algorithm"
        elif key == "versionName":
            suggest = "version_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthorityCertificateAuthorityConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthorityCertificateAuthorityConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthorityCertificateAuthorityConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_type: str,
                 subject: 'outputs.CertificateAuthorityCertificateAuthorityConfigSubject',
                 issuer_certificate_authority_id: Optional[str] = None,
                 signing_algorithm: Optional[str] = None,
                 validity: Optional['outputs.CertificateAuthorityCertificateAuthorityConfigValidity'] = None,
                 version_name: Optional[str] = None):
        pulumi.set(__self__, "config_type", config_type)
        pulumi.set(__self__, "subject", subject)
        if issuer_certificate_authority_id is not None:
            pulumi.set(__self__, "issuer_certificate_authority_id", issuer_certificate_authority_id)
        if signing_algorithm is not None:
            pulumi.set(__self__, "signing_algorithm", signing_algorithm)
        if validity is not None:
            pulumi.set(__self__, "validity", validity)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> str:
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter
    def subject(self) -> 'outputs.CertificateAuthorityCertificateAuthorityConfigSubject':
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="issuerCertificateAuthorityId")
    def issuer_certificate_authority_id(self) -> Optional[str]:
        return pulumi.get(self, "issuer_certificate_authority_id")

    @property
    @pulumi.getter(name="signingAlgorithm")
    def signing_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signing_algorithm")

    @property
    @pulumi.getter
    def validity(self) -> Optional['outputs.CertificateAuthorityCertificateAuthorityConfigValidity']:
        return pulumi.get(self, "validity")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[str]:
        return pulumi.get(self, "version_name")


@pulumi.output_type
class CertificateAuthorityCertificateAuthorityConfigSubject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonName":
            suggest = "common_name"
        elif key == "distinguishedNameQualifier":
            suggest = "distinguished_name_qualifier"
        elif key == "domainComponent":
            suggest = "domain_component"
        elif key == "generationQualifier":
            suggest = "generation_qualifier"
        elif key == "givenName":
            suggest = "given_name"
        elif key == "localityName":
            suggest = "locality_name"
        elif key == "organizationalUnit":
            suggest = "organizational_unit"
        elif key == "serialNumber":
            suggest = "serial_number"
        elif key == "stateOrProvinceName":
            suggest = "state_or_province_name"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthorityCertificateAuthorityConfigSubject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthorityCertificateAuthorityConfigSubject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthorityCertificateAuthorityConfigSubject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_name: str,
                 country: Optional[str] = None,
                 distinguished_name_qualifier: Optional[str] = None,
                 domain_component: Optional[str] = None,
                 generation_qualifier: Optional[str] = None,
                 given_name: Optional[str] = None,
                 initials: Optional[str] = None,
                 locality_name: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 pseudonym: Optional[str] = None,
                 serial_number: Optional[str] = None,
                 state_or_province_name: Optional[str] = None,
                 street: Optional[str] = None,
                 surname: Optional[str] = None,
                 title: Optional[str] = None,
                 user_id: Optional[str] = None):
        pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if distinguished_name_qualifier is not None:
            pulumi.set(__self__, "distinguished_name_qualifier", distinguished_name_qualifier)
        if domain_component is not None:
            pulumi.set(__self__, "domain_component", domain_component)
        if generation_qualifier is not None:
            pulumi.set(__self__, "generation_qualifier", generation_qualifier)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if initials is not None:
            pulumi.set(__self__, "initials", initials)
        if locality_name is not None:
            pulumi.set(__self__, "locality_name", locality_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if pseudonym is not None:
            pulumi.set(__self__, "pseudonym", pseudonym)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if state_or_province_name is not None:
            pulumi.set(__self__, "state_or_province_name", state_or_province_name)
        if street is not None:
            pulumi.set(__self__, "street", street)
        if surname is not None:
            pulumi.set(__self__, "surname", surname)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> str:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="distinguishedNameQualifier")
    def distinguished_name_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "distinguished_name_qualifier")

    @property
    @pulumi.getter(name="domainComponent")
    def domain_component(self) -> Optional[str]:
        return pulumi.get(self, "domain_component")

    @property
    @pulumi.getter(name="generationQualifier")
    def generation_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "generation_qualifier")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def initials(self) -> Optional[str]:
        return pulumi.get(self, "initials")

    @property
    @pulumi.getter(name="localityName")
    def locality_name(self) -> Optional[str]:
        return pulumi.get(self, "locality_name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def pseudonym(self) -> Optional[str]:
        return pulumi.get(self, "pseudonym")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="stateOrProvinceName")
    def state_or_province_name(self) -> Optional[str]:
        return pulumi.get(self, "state_or_province_name")

    @property
    @pulumi.getter
    def street(self) -> Optional[str]:
        return pulumi.get(self, "street")

    @property
    @pulumi.getter
    def surname(self) -> Optional[str]:
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class CertificateAuthorityCertificateAuthorityConfigValidity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeOfValidityNotAfter":
            suggest = "time_of_validity_not_after"
        elif key == "timeOfValidityNotBefore":
            suggest = "time_of_validity_not_before"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthorityCertificateAuthorityConfigValidity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthorityCertificateAuthorityConfigValidity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthorityCertificateAuthorityConfigValidity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_of_validity_not_after: str,
                 time_of_validity_not_before: Optional[str] = None):
        pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> str:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class CertificateAuthorityCertificateAuthorityRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleType":
            suggest = "rule_type"
        elif key == "certificateAuthorityMaxValidityDuration":
            suggest = "certificate_authority_max_validity_duration"
        elif key == "leafCertificateMaxValidityDuration":
            suggest = "leaf_certificate_max_validity_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthorityCertificateAuthorityRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthorityCertificateAuthorityRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthorityCertificateAuthorityRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_type: str,
                 certificate_authority_max_validity_duration: Optional[str] = None,
                 leaf_certificate_max_validity_duration: Optional[str] = None):
        pulumi.set(__self__, "rule_type", rule_type)
        if certificate_authority_max_validity_duration is not None:
            pulumi.set(__self__, "certificate_authority_max_validity_duration", certificate_authority_max_validity_duration)
        if leaf_certificate_max_validity_duration is not None:
            pulumi.set(__self__, "leaf_certificate_max_validity_duration", leaf_certificate_max_validity_duration)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter(name="certificateAuthorityMaxValidityDuration")
    def certificate_authority_max_validity_duration(self) -> Optional[str]:
        return pulumi.get(self, "certificate_authority_max_validity_duration")

    @property
    @pulumi.getter(name="leafCertificateMaxValidityDuration")
    def leaf_certificate_max_validity_duration(self) -> Optional[str]:
        return pulumi.get(self, "leaf_certificate_max_validity_duration")


@pulumi.output_type
class CertificateAuthorityCertificateRevocationListDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectStorageConfig":
            suggest = "object_storage_config"
        elif key == "customFormattedUrls":
            suggest = "custom_formatted_urls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthorityCertificateRevocationListDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthorityCertificateRevocationListDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthorityCertificateRevocationListDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_storage_config: 'outputs.CertificateAuthorityCertificateRevocationListDetailsObjectStorageConfig',
                 custom_formatted_urls: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "object_storage_config", object_storage_config)
        if custom_formatted_urls is not None:
            pulumi.set(__self__, "custom_formatted_urls", custom_formatted_urls)

    @property
    @pulumi.getter(name="objectStorageConfig")
    def object_storage_config(self) -> 'outputs.CertificateAuthorityCertificateRevocationListDetailsObjectStorageConfig':
        return pulumi.get(self, "object_storage_config")

    @property
    @pulumi.getter(name="customFormattedUrls")
    def custom_formatted_urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_formatted_urls")


@pulumi.output_type
class CertificateAuthorityCertificateRevocationListDetailsObjectStorageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectStorageBucketName":
            suggest = "object_storage_bucket_name"
        elif key == "objectStorageObjectNameFormat":
            suggest = "object_storage_object_name_format"
        elif key == "objectStorageNamespace":
            suggest = "object_storage_namespace"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthorityCertificateRevocationListDetailsObjectStorageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthorityCertificateRevocationListDetailsObjectStorageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthorityCertificateRevocationListDetailsObjectStorageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_storage_bucket_name: str,
                 object_storage_object_name_format: str,
                 object_storage_namespace: Optional[str] = None):
        pulumi.set(__self__, "object_storage_bucket_name", object_storage_bucket_name)
        pulumi.set(__self__, "object_storage_object_name_format", object_storage_object_name_format)
        if object_storage_namespace is not None:
            pulumi.set(__self__, "object_storage_namespace", object_storage_namespace)

    @property
    @pulumi.getter(name="objectStorageBucketName")
    def object_storage_bucket_name(self) -> str:
        return pulumi.get(self, "object_storage_bucket_name")

    @property
    @pulumi.getter(name="objectStorageObjectNameFormat")
    def object_storage_object_name_format(self) -> str:
        return pulumi.get(self, "object_storage_object_name_format")

    @property
    @pulumi.getter(name="objectStorageNamespace")
    def object_storage_namespace(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_namespace")


@pulumi.output_type
class CertificateAuthorityCurrentVersion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateAuthorityId":
            suggest = "certificate_authority_id"
        elif key == "issuerCaVersionNumber":
            suggest = "issuer_ca_version_number"
        elif key == "revocationStatuses":
            suggest = "revocation_statuses"
        elif key == "serialNumber":
            suggest = "serial_number"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeOfDeletion":
            suggest = "time_of_deletion"
        elif key == "versionName":
            suggest = "version_name"
        elif key == "versionNumber":
            suggest = "version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthorityCurrentVersion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthorityCurrentVersion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthorityCurrentVersion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_authority_id: Optional[str] = None,
                 issuer_ca_version_number: Optional[str] = None,
                 revocation_statuses: Optional[Sequence['outputs.CertificateAuthorityCurrentVersionRevocationStatus']] = None,
                 serial_number: Optional[str] = None,
                 stages: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_of_deletion: Optional[str] = None,
                 validities: Optional[Sequence['outputs.CertificateAuthorityCurrentVersionValidity']] = None,
                 version_name: Optional[str] = None,
                 version_number: Optional[str] = None):
        if certificate_authority_id is not None:
            pulumi.set(__self__, "certificate_authority_id", certificate_authority_id)
        if issuer_ca_version_number is not None:
            pulumi.set(__self__, "issuer_ca_version_number", issuer_ca_version_number)
        if revocation_statuses is not None:
            pulumi.set(__self__, "revocation_statuses", revocation_statuses)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)
        if validities is not None:
            pulumi.set(__self__, "validities", validities)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)
        if version_number is not None:
            pulumi.set(__self__, "version_number", version_number)

    @property
    @pulumi.getter(name="certificateAuthorityId")
    def certificate_authority_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_authority_id")

    @property
    @pulumi.getter(name="issuerCaVersionNumber")
    def issuer_ca_version_number(self) -> Optional[str]:
        return pulumi.get(self, "issuer_ca_version_number")

    @property
    @pulumi.getter(name="revocationStatuses")
    def revocation_statuses(self) -> Optional[Sequence['outputs.CertificateAuthorityCurrentVersionRevocationStatus']]:
        return pulumi.get(self, "revocation_statuses")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter
    def stages(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[str]:
        return pulumi.get(self, "time_of_deletion")

    @property
    @pulumi.getter
    def validities(self) -> Optional[Sequence['outputs.CertificateAuthorityCurrentVersionValidity']]:
        return pulumi.get(self, "validities")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[str]:
        return pulumi.get(self, "version_name")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> Optional[str]:
        return pulumi.get(self, "version_number")


@pulumi.output_type
class CertificateAuthorityCurrentVersionRevocationStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "revocationReason":
            suggest = "revocation_reason"
        elif key == "timeOfRevocation":
            suggest = "time_of_revocation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthorityCurrentVersionRevocationStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthorityCurrentVersionRevocationStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthorityCurrentVersionRevocationStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 revocation_reason: Optional[str] = None,
                 time_of_revocation: Optional[str] = None):
        if revocation_reason is not None:
            pulumi.set(__self__, "revocation_reason", revocation_reason)
        if time_of_revocation is not None:
            pulumi.set(__self__, "time_of_revocation", time_of_revocation)

    @property
    @pulumi.getter(name="revocationReason")
    def revocation_reason(self) -> Optional[str]:
        return pulumi.get(self, "revocation_reason")

    @property
    @pulumi.getter(name="timeOfRevocation")
    def time_of_revocation(self) -> Optional[str]:
        return pulumi.get(self, "time_of_revocation")


@pulumi.output_type
class CertificateAuthorityCurrentVersionValidity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeOfValidityNotAfter":
            suggest = "time_of_validity_not_after"
        elif key == "timeOfValidityNotBefore":
            suggest = "time_of_validity_not_before"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthorityCurrentVersionValidity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthorityCurrentVersionValidity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthorityCurrentVersionValidity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_of_validity_not_after: Optional[str] = None,
                 time_of_validity_not_before: Optional[str] = None):
        if time_of_validity_not_after is not None:
            pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class CertificateAuthoritySubject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonName":
            suggest = "common_name"
        elif key == "distinguishedNameQualifier":
            suggest = "distinguished_name_qualifier"
        elif key == "domainComponent":
            suggest = "domain_component"
        elif key == "generationQualifier":
            suggest = "generation_qualifier"
        elif key == "givenName":
            suggest = "given_name"
        elif key == "localityName":
            suggest = "locality_name"
        elif key == "organizationalUnit":
            suggest = "organizational_unit"
        elif key == "serialNumber":
            suggest = "serial_number"
        elif key == "stateOrProvinceName":
            suggest = "state_or_province_name"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateAuthoritySubject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateAuthoritySubject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateAuthoritySubject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 distinguished_name_qualifier: Optional[str] = None,
                 domain_component: Optional[str] = None,
                 generation_qualifier: Optional[str] = None,
                 given_name: Optional[str] = None,
                 initials: Optional[str] = None,
                 locality_name: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 pseudonym: Optional[str] = None,
                 serial_number: Optional[str] = None,
                 state_or_province_name: Optional[str] = None,
                 street: Optional[str] = None,
                 surname: Optional[str] = None,
                 title: Optional[str] = None,
                 user_id: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if distinguished_name_qualifier is not None:
            pulumi.set(__self__, "distinguished_name_qualifier", distinguished_name_qualifier)
        if domain_component is not None:
            pulumi.set(__self__, "domain_component", domain_component)
        if generation_qualifier is not None:
            pulumi.set(__self__, "generation_qualifier", generation_qualifier)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if initials is not None:
            pulumi.set(__self__, "initials", initials)
        if locality_name is not None:
            pulumi.set(__self__, "locality_name", locality_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if pseudonym is not None:
            pulumi.set(__self__, "pseudonym", pseudonym)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if state_or_province_name is not None:
            pulumi.set(__self__, "state_or_province_name", state_or_province_name)
        if street is not None:
            pulumi.set(__self__, "street", street)
        if surname is not None:
            pulumi.set(__self__, "surname", surname)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="distinguishedNameQualifier")
    def distinguished_name_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "distinguished_name_qualifier")

    @property
    @pulumi.getter(name="domainComponent")
    def domain_component(self) -> Optional[str]:
        return pulumi.get(self, "domain_component")

    @property
    @pulumi.getter(name="generationQualifier")
    def generation_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "generation_qualifier")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def initials(self) -> Optional[str]:
        return pulumi.get(self, "initials")

    @property
    @pulumi.getter(name="localityName")
    def locality_name(self) -> Optional[str]:
        return pulumi.get(self, "locality_name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def pseudonym(self) -> Optional[str]:
        return pulumi.get(self, "pseudonym")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="stateOrProvinceName")
    def state_or_province_name(self) -> Optional[str]:
        return pulumi.get(self, "state_or_province_name")

    @property
    @pulumi.getter
    def street(self) -> Optional[str]:
        return pulumi.get(self, "street")

    @property
    @pulumi.getter
    def surname(self) -> Optional[str]:
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class CertificateCertificateConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configType":
            suggest = "config_type"
        elif key == "certificateProfileType":
            suggest = "certificate_profile_type"
        elif key == "csrPem":
            suggest = "csr_pem"
        elif key == "issuerCertificateAuthorityId":
            suggest = "issuer_certificate_authority_id"
        elif key == "keyAlgorithm":
            suggest = "key_algorithm"
        elif key == "signatureAlgorithm":
            suggest = "signature_algorithm"
        elif key == "subjectAlternativeNames":
            suggest = "subject_alternative_names"
        elif key == "versionName":
            suggest = "version_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateCertificateConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateCertificateConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateCertificateConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_type: str,
                 certificate_profile_type: Optional[str] = None,
                 csr_pem: Optional[str] = None,
                 issuer_certificate_authority_id: Optional[str] = None,
                 key_algorithm: Optional[str] = None,
                 signature_algorithm: Optional[str] = None,
                 subject: Optional['outputs.CertificateCertificateConfigSubject'] = None,
                 subject_alternative_names: Optional[Sequence['outputs.CertificateCertificateConfigSubjectAlternativeName']] = None,
                 validity: Optional['outputs.CertificateCertificateConfigValidity'] = None,
                 version_name: Optional[str] = None):
        pulumi.set(__self__, "config_type", config_type)
        if certificate_profile_type is not None:
            pulumi.set(__self__, "certificate_profile_type", certificate_profile_type)
        if csr_pem is not None:
            pulumi.set(__self__, "csr_pem", csr_pem)
        if issuer_certificate_authority_id is not None:
            pulumi.set(__self__, "issuer_certificate_authority_id", issuer_certificate_authority_id)
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if validity is not None:
            pulumi.set(__self__, "validity", validity)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> str:
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="certificateProfileType")
    def certificate_profile_type(self) -> Optional[str]:
        return pulumi.get(self, "certificate_profile_type")

    @property
    @pulumi.getter(name="csrPem")
    def csr_pem(self) -> Optional[str]:
        return pulumi.get(self, "csr_pem")

    @property
    @pulumi.getter(name="issuerCertificateAuthorityId")
    def issuer_certificate_authority_id(self) -> Optional[str]:
        return pulumi.get(self, "issuer_certificate_authority_id")

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "key_algorithm")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter
    def subject(self) -> Optional['outputs.CertificateCertificateConfigSubject']:
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[Sequence['outputs.CertificateCertificateConfigSubjectAlternativeName']]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter
    def validity(self) -> Optional['outputs.CertificateCertificateConfigValidity']:
        return pulumi.get(self, "validity")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[str]:
        return pulumi.get(self, "version_name")


@pulumi.output_type
class CertificateCertificateConfigSubject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonName":
            suggest = "common_name"
        elif key == "distinguishedNameQualifier":
            suggest = "distinguished_name_qualifier"
        elif key == "domainComponent":
            suggest = "domain_component"
        elif key == "generationQualifier":
            suggest = "generation_qualifier"
        elif key == "givenName":
            suggest = "given_name"
        elif key == "localityName":
            suggest = "locality_name"
        elif key == "organizationalUnit":
            suggest = "organizational_unit"
        elif key == "serialNumber":
            suggest = "serial_number"
        elif key == "stateOrProvinceName":
            suggest = "state_or_province_name"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateCertificateConfigSubject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateCertificateConfigSubject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateCertificateConfigSubject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_name: str,
                 country: Optional[str] = None,
                 distinguished_name_qualifier: Optional[str] = None,
                 domain_component: Optional[str] = None,
                 generation_qualifier: Optional[str] = None,
                 given_name: Optional[str] = None,
                 initials: Optional[str] = None,
                 locality_name: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 pseudonym: Optional[str] = None,
                 serial_number: Optional[str] = None,
                 state_or_province_name: Optional[str] = None,
                 street: Optional[str] = None,
                 surname: Optional[str] = None,
                 title: Optional[str] = None,
                 user_id: Optional[str] = None):
        pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if distinguished_name_qualifier is not None:
            pulumi.set(__self__, "distinguished_name_qualifier", distinguished_name_qualifier)
        if domain_component is not None:
            pulumi.set(__self__, "domain_component", domain_component)
        if generation_qualifier is not None:
            pulumi.set(__self__, "generation_qualifier", generation_qualifier)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if initials is not None:
            pulumi.set(__self__, "initials", initials)
        if locality_name is not None:
            pulumi.set(__self__, "locality_name", locality_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if pseudonym is not None:
            pulumi.set(__self__, "pseudonym", pseudonym)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if state_or_province_name is not None:
            pulumi.set(__self__, "state_or_province_name", state_or_province_name)
        if street is not None:
            pulumi.set(__self__, "street", street)
        if surname is not None:
            pulumi.set(__self__, "surname", surname)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> str:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="distinguishedNameQualifier")
    def distinguished_name_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "distinguished_name_qualifier")

    @property
    @pulumi.getter(name="domainComponent")
    def domain_component(self) -> Optional[str]:
        return pulumi.get(self, "domain_component")

    @property
    @pulumi.getter(name="generationQualifier")
    def generation_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "generation_qualifier")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def initials(self) -> Optional[str]:
        return pulumi.get(self, "initials")

    @property
    @pulumi.getter(name="localityName")
    def locality_name(self) -> Optional[str]:
        return pulumi.get(self, "locality_name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def pseudonym(self) -> Optional[str]:
        return pulumi.get(self, "pseudonym")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="stateOrProvinceName")
    def state_or_province_name(self) -> Optional[str]:
        return pulumi.get(self, "state_or_province_name")

    @property
    @pulumi.getter
    def street(self) -> Optional[str]:
        return pulumi.get(self, "street")

    @property
    @pulumi.getter
    def surname(self) -> Optional[str]:
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class CertificateCertificateConfigSubjectAlternativeName(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class CertificateCertificateConfigValidity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeOfValidityNotAfter":
            suggest = "time_of_validity_not_after"
        elif key == "timeOfValidityNotBefore":
            suggest = "time_of_validity_not_before"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateCertificateConfigValidity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateCertificateConfigValidity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateCertificateConfigValidity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_of_validity_not_after: str,
                 time_of_validity_not_before: Optional[str] = None):
        pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> str:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class CertificateCertificateRevocationListDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customFormattedUrls":
            suggest = "custom_formatted_urls"
        elif key == "objectStorageConfigs":
            suggest = "object_storage_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateCertificateRevocationListDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateCertificateRevocationListDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateCertificateRevocationListDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_formatted_urls: Optional[Sequence[str]] = None,
                 object_storage_configs: Optional[Sequence['outputs.CertificateCertificateRevocationListDetailObjectStorageConfig']] = None):
        if custom_formatted_urls is not None:
            pulumi.set(__self__, "custom_formatted_urls", custom_formatted_urls)
        if object_storage_configs is not None:
            pulumi.set(__self__, "object_storage_configs", object_storage_configs)

    @property
    @pulumi.getter(name="customFormattedUrls")
    def custom_formatted_urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_formatted_urls")

    @property
    @pulumi.getter(name="objectStorageConfigs")
    def object_storage_configs(self) -> Optional[Sequence['outputs.CertificateCertificateRevocationListDetailObjectStorageConfig']]:
        return pulumi.get(self, "object_storage_configs")


@pulumi.output_type
class CertificateCertificateRevocationListDetailObjectStorageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectStorageBucketName":
            suggest = "object_storage_bucket_name"
        elif key == "objectStorageNamespace":
            suggest = "object_storage_namespace"
        elif key == "objectStorageObjectNameFormat":
            suggest = "object_storage_object_name_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateCertificateRevocationListDetailObjectStorageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateCertificateRevocationListDetailObjectStorageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateCertificateRevocationListDetailObjectStorageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_storage_bucket_name: Optional[str] = None,
                 object_storage_namespace: Optional[str] = None,
                 object_storage_object_name_format: Optional[str] = None):
        if object_storage_bucket_name is not None:
            pulumi.set(__self__, "object_storage_bucket_name", object_storage_bucket_name)
        if object_storage_namespace is not None:
            pulumi.set(__self__, "object_storage_namespace", object_storage_namespace)
        if object_storage_object_name_format is not None:
            pulumi.set(__self__, "object_storage_object_name_format", object_storage_object_name_format)

    @property
    @pulumi.getter(name="objectStorageBucketName")
    def object_storage_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_bucket_name")

    @property
    @pulumi.getter(name="objectStorageNamespace")
    def object_storage_namespace(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_namespace")

    @property
    @pulumi.getter(name="objectStorageObjectNameFormat")
    def object_storage_object_name_format(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_object_name_format")


@pulumi.output_type
class CertificateCertificateRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advanceRenewalPeriod":
            suggest = "advance_renewal_period"
        elif key == "renewalInterval":
            suggest = "renewal_interval"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateCertificateRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateCertificateRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateCertificateRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advance_renewal_period: str,
                 renewal_interval: str,
                 rule_type: str):
        pulumi.set(__self__, "advance_renewal_period", advance_renewal_period)
        pulumi.set(__self__, "renewal_interval", renewal_interval)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="advanceRenewalPeriod")
    def advance_renewal_period(self) -> str:
        return pulumi.get(self, "advance_renewal_period")

    @property
    @pulumi.getter(name="renewalInterval")
    def renewal_interval(self) -> str:
        return pulumi.get(self, "renewal_interval")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class CertificateCurrentVersion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateId":
            suggest = "certificate_id"
        elif key == "issuerCaVersionNumber":
            suggest = "issuer_ca_version_number"
        elif key == "revocationStatuses":
            suggest = "revocation_statuses"
        elif key == "serialNumber":
            suggest = "serial_number"
        elif key == "subjectAlternativeNames":
            suggest = "subject_alternative_names"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeOfDeletion":
            suggest = "time_of_deletion"
        elif key == "versionName":
            suggest = "version_name"
        elif key == "versionNumber":
            suggest = "version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateCurrentVersion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateCurrentVersion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateCurrentVersion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_id: Optional[str] = None,
                 issuer_ca_version_number: Optional[str] = None,
                 revocation_statuses: Optional[Sequence['outputs.CertificateCurrentVersionRevocationStatus']] = None,
                 serial_number: Optional[str] = None,
                 stages: Optional[Sequence[str]] = None,
                 subject_alternative_names: Optional[Sequence['outputs.CertificateCurrentVersionSubjectAlternativeName']] = None,
                 time_created: Optional[str] = None,
                 time_of_deletion: Optional[str] = None,
                 validities: Optional[Sequence['outputs.CertificateCurrentVersionValidity']] = None,
                 version_name: Optional[str] = None,
                 version_number: Optional[str] = None):
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if issuer_ca_version_number is not None:
            pulumi.set(__self__, "issuer_ca_version_number", issuer_ca_version_number)
        if revocation_statuses is not None:
            pulumi.set(__self__, "revocation_statuses", revocation_statuses)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)
        if validities is not None:
            pulumi.set(__self__, "validities", validities)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)
        if version_number is not None:
            pulumi.set(__self__, "version_number", version_number)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="issuerCaVersionNumber")
    def issuer_ca_version_number(self) -> Optional[str]:
        return pulumi.get(self, "issuer_ca_version_number")

    @property
    @pulumi.getter(name="revocationStatuses")
    def revocation_statuses(self) -> Optional[Sequence['outputs.CertificateCurrentVersionRevocationStatus']]:
        return pulumi.get(self, "revocation_statuses")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter
    def stages(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[Sequence['outputs.CertificateCurrentVersionSubjectAlternativeName']]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[str]:
        return pulumi.get(self, "time_of_deletion")

    @property
    @pulumi.getter
    def validities(self) -> Optional[Sequence['outputs.CertificateCurrentVersionValidity']]:
        return pulumi.get(self, "validities")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[str]:
        return pulumi.get(self, "version_name")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> Optional[str]:
        return pulumi.get(self, "version_number")


@pulumi.output_type
class CertificateCurrentVersionRevocationStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "revocationReason":
            suggest = "revocation_reason"
        elif key == "timeOfRevocation":
            suggest = "time_of_revocation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateCurrentVersionRevocationStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateCurrentVersionRevocationStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateCurrentVersionRevocationStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 revocation_reason: Optional[str] = None,
                 time_of_revocation: Optional[str] = None):
        if revocation_reason is not None:
            pulumi.set(__self__, "revocation_reason", revocation_reason)
        if time_of_revocation is not None:
            pulumi.set(__self__, "time_of_revocation", time_of_revocation)

    @property
    @pulumi.getter(name="revocationReason")
    def revocation_reason(self) -> Optional[str]:
        return pulumi.get(self, "revocation_reason")

    @property
    @pulumi.getter(name="timeOfRevocation")
    def time_of_revocation(self) -> Optional[str]:
        return pulumi.get(self, "time_of_revocation")


@pulumi.output_type
class CertificateCurrentVersionSubjectAlternativeName(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class CertificateCurrentVersionValidity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeOfValidityNotAfter":
            suggest = "time_of_validity_not_after"
        elif key == "timeOfValidityNotBefore":
            suggest = "time_of_validity_not_before"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateCurrentVersionValidity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateCurrentVersionValidity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateCurrentVersionValidity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_of_validity_not_after: Optional[str] = None,
                 time_of_validity_not_before: Optional[str] = None):
        if time_of_validity_not_after is not None:
            pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class CertificateSubject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commonName":
            suggest = "common_name"
        elif key == "distinguishedNameQualifier":
            suggest = "distinguished_name_qualifier"
        elif key == "domainComponent":
            suggest = "domain_component"
        elif key == "generationQualifier":
            suggest = "generation_qualifier"
        elif key == "givenName":
            suggest = "given_name"
        elif key == "localityName":
            suggest = "locality_name"
        elif key == "organizationalUnit":
            suggest = "organizational_unit"
        elif key == "serialNumber":
            suggest = "serial_number"
        elif key == "stateOrProvinceName":
            suggest = "state_or_province_name"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateSubject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateSubject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateSubject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 distinguished_name_qualifier: Optional[str] = None,
                 domain_component: Optional[str] = None,
                 generation_qualifier: Optional[str] = None,
                 given_name: Optional[str] = None,
                 initials: Optional[str] = None,
                 locality_name: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 pseudonym: Optional[str] = None,
                 serial_number: Optional[str] = None,
                 state_or_province_name: Optional[str] = None,
                 street: Optional[str] = None,
                 surname: Optional[str] = None,
                 title: Optional[str] = None,
                 user_id: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if distinguished_name_qualifier is not None:
            pulumi.set(__self__, "distinguished_name_qualifier", distinguished_name_qualifier)
        if domain_component is not None:
            pulumi.set(__self__, "domain_component", domain_component)
        if generation_qualifier is not None:
            pulumi.set(__self__, "generation_qualifier", generation_qualifier)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if initials is not None:
            pulumi.set(__self__, "initials", initials)
        if locality_name is not None:
            pulumi.set(__self__, "locality_name", locality_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if pseudonym is not None:
            pulumi.set(__self__, "pseudonym", pseudonym)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if state_or_province_name is not None:
            pulumi.set(__self__, "state_or_province_name", state_or_province_name)
        if street is not None:
            pulumi.set(__self__, "street", street)
        if surname is not None:
            pulumi.set(__self__, "surname", surname)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="distinguishedNameQualifier")
    def distinguished_name_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "distinguished_name_qualifier")

    @property
    @pulumi.getter(name="domainComponent")
    def domain_component(self) -> Optional[str]:
        return pulumi.get(self, "domain_component")

    @property
    @pulumi.getter(name="generationQualifier")
    def generation_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "generation_qualifier")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def initials(self) -> Optional[str]:
        return pulumi.get(self, "initials")

    @property
    @pulumi.getter(name="localityName")
    def locality_name(self) -> Optional[str]:
        return pulumi.get(self, "locality_name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def pseudonym(self) -> Optional[str]:
        return pulumi.get(self, "pseudonym")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="stateOrProvinceName")
    def state_or_province_name(self) -> Optional[str]:
        return pulumi.get(self, "state_or_province_name")

    @property
    @pulumi.getter
    def street(self) -> Optional[str]:
        return pulumi.get(self, "street")

    @property
    @pulumi.getter
    def surname(self) -> Optional[str]:
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetAssociationsAssociationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAssociationsAssociationCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAssociationsAssociationCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAssociationsAssociationCollectionItemResult(dict):
    def __init__(__self__, *,
                 associated_resource_id: Optional[str] = None,
                 association_type: Optional[str] = None,
                 certificates_resource_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if associated_resource_id is not None:
            pulumi.set(__self__, "associated_resource_id", associated_resource_id)
        if association_type is not None:
            pulumi.set(__self__, "association_type", association_type)
        if certificates_resource_id is not None:
            pulumi.set(__self__, "certificates_resource_id", certificates_resource_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="associatedResourceId")
    def associated_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "associated_resource_id")

    @property
    @pulumi.getter(name="associationType")
    def association_type(self) -> Optional[str]:
        return pulumi.get(self, "association_type")

    @property
    @pulumi.getter(name="certificatesResourceId")
    def certificates_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "certificates_resource_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetAssociationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCaBundlesCaBundleCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetCaBundlesCaBundleCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetCaBundlesCaBundleCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCaBundlesCaBundleCollectionItemResult(dict):
    def __init__(__self__, *,
                 ca_bundle_pem: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if ca_bundle_pem is not None:
            pulumi.set(__self__, "ca_bundle_pem", ca_bundle_pem)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="caBundlePem")
    def ca_bundle_pem(self) -> Optional[str]:
        return pulumi.get(self, "ca_bundle_pem")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetCaBundlesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCertificateAuthoritiesCertificateAuthorityCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCertificateAuthoritiesCertificateAuthorityCollectionItemResult(dict):
    def __init__(__self__, *,
                 certificate_authority_configs: Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigResult']] = None,
                 certificate_authority_rules: Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityRuleResult']] = None,
                 certificate_revocation_list_details: Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateRevocationListDetailResult']] = None,
                 compartment_id: Optional[str] = None,
                 config_type: Optional[str] = None,
                 current_versions: Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 issuer_certificate_authority_id: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 name: Optional[str] = None,
                 signing_algorithm: Optional[str] = None,
                 state: Optional[str] = None,
                 subjects: Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemSubjectResult']] = None,
                 time_created: Optional[str] = None,
                 time_of_deletion: Optional[str] = None):
        if certificate_authority_configs is not None:
            pulumi.set(__self__, "certificate_authority_configs", certificate_authority_configs)
        if certificate_authority_rules is not None:
            pulumi.set(__self__, "certificate_authority_rules", certificate_authority_rules)
        if certificate_revocation_list_details is not None:
            pulumi.set(__self__, "certificate_revocation_list_details", certificate_revocation_list_details)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if current_versions is not None:
            pulumi.set(__self__, "current_versions", current_versions)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if issuer_certificate_authority_id is not None:
            pulumi.set(__self__, "issuer_certificate_authority_id", issuer_certificate_authority_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if signing_algorithm is not None:
            pulumi.set(__self__, "signing_algorithm", signing_algorithm)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subjects is not None:
            pulumi.set(__self__, "subjects", subjects)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)

    @property
    @pulumi.getter(name="certificateAuthorityConfigs")
    def certificate_authority_configs(self) -> Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigResult']]:
        return pulumi.get(self, "certificate_authority_configs")

    @property
    @pulumi.getter(name="certificateAuthorityRules")
    def certificate_authority_rules(self) -> Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityRuleResult']]:
        return pulumi.get(self, "certificate_authority_rules")

    @property
    @pulumi.getter(name="certificateRevocationListDetails")
    def certificate_revocation_list_details(self) -> Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateRevocationListDetailResult']]:
        return pulumi.get(self, "certificate_revocation_list_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[str]:
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="currentVersions")
    def current_versions(self) -> Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionResult']]:
        return pulumi.get(self, "current_versions")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="issuerCertificateAuthorityId")
    def issuer_certificate_authority_id(self) -> Optional[str]:
        return pulumi.get(self, "issuer_certificate_authority_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="signingAlgorithm")
    def signing_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signing_algorithm")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def subjects(self) -> Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemSubjectResult']]:
        return pulumi.get(self, "subjects")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[str]:
        return pulumi.get(self, "time_of_deletion")


@pulumi.output_type
class GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigResult(dict):
    def __init__(__self__, *,
                 config_type: Optional[str] = None,
                 issuer_certificate_authority_id: Optional[str] = None,
                 signing_algorithm: Optional[str] = None,
                 subjects: Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigSubjectResult']] = None,
                 validities: Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigValidityResult']] = None,
                 version_name: Optional[str] = None):
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if issuer_certificate_authority_id is not None:
            pulumi.set(__self__, "issuer_certificate_authority_id", issuer_certificate_authority_id)
        if signing_algorithm is not None:
            pulumi.set(__self__, "signing_algorithm", signing_algorithm)
        if subjects is not None:
            pulumi.set(__self__, "subjects", subjects)
        if validities is not None:
            pulumi.set(__self__, "validities", validities)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[str]:
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="issuerCertificateAuthorityId")
    def issuer_certificate_authority_id(self) -> Optional[str]:
        return pulumi.get(self, "issuer_certificate_authority_id")

    @property
    @pulumi.getter(name="signingAlgorithm")
    def signing_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signing_algorithm")

    @property
    @pulumi.getter
    def subjects(self) -> Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigSubjectResult']]:
        return pulumi.get(self, "subjects")

    @property
    @pulumi.getter
    def validities(self) -> Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigValidityResult']]:
        return pulumi.get(self, "validities")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[str]:
        return pulumi.get(self, "version_name")


@pulumi.output_type
class GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigSubjectResult(dict):
    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 distinguished_name_qualifier: Optional[str] = None,
                 domain_component: Optional[str] = None,
                 generation_qualifier: Optional[str] = None,
                 given_name: Optional[str] = None,
                 initials: Optional[str] = None,
                 locality_name: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 pseudonym: Optional[str] = None,
                 serial_number: Optional[str] = None,
                 state_or_province_name: Optional[str] = None,
                 street: Optional[str] = None,
                 surname: Optional[str] = None,
                 title: Optional[str] = None,
                 user_id: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if distinguished_name_qualifier is not None:
            pulumi.set(__self__, "distinguished_name_qualifier", distinguished_name_qualifier)
        if domain_component is not None:
            pulumi.set(__self__, "domain_component", domain_component)
        if generation_qualifier is not None:
            pulumi.set(__self__, "generation_qualifier", generation_qualifier)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if initials is not None:
            pulumi.set(__self__, "initials", initials)
        if locality_name is not None:
            pulumi.set(__self__, "locality_name", locality_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if pseudonym is not None:
            pulumi.set(__self__, "pseudonym", pseudonym)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if state_or_province_name is not None:
            pulumi.set(__self__, "state_or_province_name", state_or_province_name)
        if street is not None:
            pulumi.set(__self__, "street", street)
        if surname is not None:
            pulumi.set(__self__, "surname", surname)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="distinguishedNameQualifier")
    def distinguished_name_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "distinguished_name_qualifier")

    @property
    @pulumi.getter(name="domainComponent")
    def domain_component(self) -> Optional[str]:
        return pulumi.get(self, "domain_component")

    @property
    @pulumi.getter(name="generationQualifier")
    def generation_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "generation_qualifier")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def initials(self) -> Optional[str]:
        return pulumi.get(self, "initials")

    @property
    @pulumi.getter(name="localityName")
    def locality_name(self) -> Optional[str]:
        return pulumi.get(self, "locality_name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def pseudonym(self) -> Optional[str]:
        return pulumi.get(self, "pseudonym")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="stateOrProvinceName")
    def state_or_province_name(self) -> Optional[str]:
        return pulumi.get(self, "state_or_province_name")

    @property
    @pulumi.getter
    def street(self) -> Optional[str]:
        return pulumi.get(self, "street")

    @property
    @pulumi.getter
    def surname(self) -> Optional[str]:
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigValidityResult(dict):
    def __init__(__self__, *,
                 time_of_validity_not_after: Optional[str] = None,
                 time_of_validity_not_before: Optional[str] = None):
        if time_of_validity_not_after is not None:
            pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityRuleResult(dict):
    def __init__(__self__, *,
                 certificate_authority_max_validity_duration: Optional[str] = None,
                 leaf_certificate_max_validity_duration: Optional[str] = None,
                 rule_type: Optional[str] = None):
        if certificate_authority_max_validity_duration is not None:
            pulumi.set(__self__, "certificate_authority_max_validity_duration", certificate_authority_max_validity_duration)
        if leaf_certificate_max_validity_duration is not None:
            pulumi.set(__self__, "leaf_certificate_max_validity_duration", leaf_certificate_max_validity_duration)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="certificateAuthorityMaxValidityDuration")
    def certificate_authority_max_validity_duration(self) -> Optional[str]:
        return pulumi.get(self, "certificate_authority_max_validity_duration")

    @property
    @pulumi.getter(name="leafCertificateMaxValidityDuration")
    def leaf_certificate_max_validity_duration(self) -> Optional[str]:
        return pulumi.get(self, "leaf_certificate_max_validity_duration")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateRevocationListDetailResult(dict):
    def __init__(__self__, *,
                 custom_formatted_urls: Optional[Sequence[str]] = None,
                 object_storage_configs: Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateRevocationListDetailObjectStorageConfigResult']] = None):
        if custom_formatted_urls is not None:
            pulumi.set(__self__, "custom_formatted_urls", custom_formatted_urls)
        if object_storage_configs is not None:
            pulumi.set(__self__, "object_storage_configs", object_storage_configs)

    @property
    @pulumi.getter(name="customFormattedUrls")
    def custom_formatted_urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_formatted_urls")

    @property
    @pulumi.getter(name="objectStorageConfigs")
    def object_storage_configs(self) -> Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateRevocationListDetailObjectStorageConfigResult']]:
        return pulumi.get(self, "object_storage_configs")


@pulumi.output_type
class GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateRevocationListDetailObjectStorageConfigResult(dict):
    def __init__(__self__, *,
                 object_storage_bucket_name: Optional[str] = None,
                 object_storage_namespace: Optional[str] = None,
                 object_storage_object_name_format: Optional[str] = None):
        if object_storage_bucket_name is not None:
            pulumi.set(__self__, "object_storage_bucket_name", object_storage_bucket_name)
        if object_storage_namespace is not None:
            pulumi.set(__self__, "object_storage_namespace", object_storage_namespace)
        if object_storage_object_name_format is not None:
            pulumi.set(__self__, "object_storage_object_name_format", object_storage_object_name_format)

    @property
    @pulumi.getter(name="objectStorageBucketName")
    def object_storage_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_bucket_name")

    @property
    @pulumi.getter(name="objectStorageNamespace")
    def object_storage_namespace(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_namespace")

    @property
    @pulumi.getter(name="objectStorageObjectNameFormat")
    def object_storage_object_name_format(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_object_name_format")


@pulumi.output_type
class GetCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionResult(dict):
    def __init__(__self__, *,
                 certificate_authority_id: Optional[str] = None,
                 issuer_ca_version_number: Optional[str] = None,
                 revocation_statuses: Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionRevocationStatusResult']] = None,
                 serial_number: Optional[str] = None,
                 stages: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_of_deletion: Optional[str] = None,
                 validities: Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionValidityResult']] = None,
                 version_name: Optional[str] = None,
                 version_number: Optional[str] = None):
        if certificate_authority_id is not None:
            pulumi.set(__self__, "certificate_authority_id", certificate_authority_id)
        if issuer_ca_version_number is not None:
            pulumi.set(__self__, "issuer_ca_version_number", issuer_ca_version_number)
        if revocation_statuses is not None:
            pulumi.set(__self__, "revocation_statuses", revocation_statuses)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)
        if validities is not None:
            pulumi.set(__self__, "validities", validities)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)
        if version_number is not None:
            pulumi.set(__self__, "version_number", version_number)

    @property
    @pulumi.getter(name="certificateAuthorityId")
    def certificate_authority_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_authority_id")

    @property
    @pulumi.getter(name="issuerCaVersionNumber")
    def issuer_ca_version_number(self) -> Optional[str]:
        return pulumi.get(self, "issuer_ca_version_number")

    @property
    @pulumi.getter(name="revocationStatuses")
    def revocation_statuses(self) -> Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionRevocationStatusResult']]:
        return pulumi.get(self, "revocation_statuses")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter
    def stages(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[str]:
        return pulumi.get(self, "time_of_deletion")

    @property
    @pulumi.getter
    def validities(self) -> Optional[Sequence['outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionValidityResult']]:
        return pulumi.get(self, "validities")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[str]:
        return pulumi.get(self, "version_name")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> Optional[str]:
        return pulumi.get(self, "version_number")


@pulumi.output_type
class GetCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionRevocationStatusResult(dict):
    def __init__(__self__, *,
                 revocation_reason: Optional[str] = None,
                 time_of_revocation: Optional[str] = None):
        if revocation_reason is not None:
            pulumi.set(__self__, "revocation_reason", revocation_reason)
        if time_of_revocation is not None:
            pulumi.set(__self__, "time_of_revocation", time_of_revocation)

    @property
    @pulumi.getter(name="revocationReason")
    def revocation_reason(self) -> Optional[str]:
        return pulumi.get(self, "revocation_reason")

    @property
    @pulumi.getter(name="timeOfRevocation")
    def time_of_revocation(self) -> Optional[str]:
        return pulumi.get(self, "time_of_revocation")


@pulumi.output_type
class GetCertificateAuthoritiesCertificateAuthorityCollectionItemCurrentVersionValidityResult(dict):
    def __init__(__self__, *,
                 time_of_validity_not_after: Optional[str] = None,
                 time_of_validity_not_before: Optional[str] = None):
        if time_of_validity_not_after is not None:
            pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class GetCertificateAuthoritiesCertificateAuthorityCollectionItemSubjectResult(dict):
    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 distinguished_name_qualifier: Optional[str] = None,
                 domain_component: Optional[str] = None,
                 generation_qualifier: Optional[str] = None,
                 given_name: Optional[str] = None,
                 initials: Optional[str] = None,
                 locality_name: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 pseudonym: Optional[str] = None,
                 serial_number: Optional[str] = None,
                 state_or_province_name: Optional[str] = None,
                 street: Optional[str] = None,
                 surname: Optional[str] = None,
                 title: Optional[str] = None,
                 user_id: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if distinguished_name_qualifier is not None:
            pulumi.set(__self__, "distinguished_name_qualifier", distinguished_name_qualifier)
        if domain_component is not None:
            pulumi.set(__self__, "domain_component", domain_component)
        if generation_qualifier is not None:
            pulumi.set(__self__, "generation_qualifier", generation_qualifier)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if initials is not None:
            pulumi.set(__self__, "initials", initials)
        if locality_name is not None:
            pulumi.set(__self__, "locality_name", locality_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if pseudonym is not None:
            pulumi.set(__self__, "pseudonym", pseudonym)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if state_or_province_name is not None:
            pulumi.set(__self__, "state_or_province_name", state_or_province_name)
        if street is not None:
            pulumi.set(__self__, "street", street)
        if surname is not None:
            pulumi.set(__self__, "surname", surname)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="distinguishedNameQualifier")
    def distinguished_name_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "distinguished_name_qualifier")

    @property
    @pulumi.getter(name="domainComponent")
    def domain_component(self) -> Optional[str]:
        return pulumi.get(self, "domain_component")

    @property
    @pulumi.getter(name="generationQualifier")
    def generation_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "generation_qualifier")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def initials(self) -> Optional[str]:
        return pulumi.get(self, "initials")

    @property
    @pulumi.getter(name="localityName")
    def locality_name(self) -> Optional[str]:
        return pulumi.get(self, "locality_name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def pseudonym(self) -> Optional[str]:
        return pulumi.get(self, "pseudonym")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="stateOrProvinceName")
    def state_or_province_name(self) -> Optional[str]:
        return pulumi.get(self, "state_or_province_name")

    @property
    @pulumi.getter
    def street(self) -> Optional[str]:
        return pulumi.get(self, "street")

    @property
    @pulumi.getter
    def surname(self) -> Optional[str]:
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetCertificateAuthoritiesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCertificateAuthorityCertificateAuthorityConfigResult(dict):
    def __init__(__self__, *,
                 config_type: Optional[str] = None,
                 issuer_certificate_authority_id: Optional[str] = None,
                 signing_algorithm: Optional[str] = None,
                 subjects: Optional[Sequence['outputs.GetCertificateAuthorityCertificateAuthorityConfigSubjectResult']] = None,
                 validities: Optional[Sequence['outputs.GetCertificateAuthorityCertificateAuthorityConfigValidityResult']] = None,
                 version_name: Optional[str] = None):
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if issuer_certificate_authority_id is not None:
            pulumi.set(__self__, "issuer_certificate_authority_id", issuer_certificate_authority_id)
        if signing_algorithm is not None:
            pulumi.set(__self__, "signing_algorithm", signing_algorithm)
        if subjects is not None:
            pulumi.set(__self__, "subjects", subjects)
        if validities is not None:
            pulumi.set(__self__, "validities", validities)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[str]:
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="issuerCertificateAuthorityId")
    def issuer_certificate_authority_id(self) -> Optional[str]:
        return pulumi.get(self, "issuer_certificate_authority_id")

    @property
    @pulumi.getter(name="signingAlgorithm")
    def signing_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signing_algorithm")

    @property
    @pulumi.getter
    def subjects(self) -> Optional[Sequence['outputs.GetCertificateAuthorityCertificateAuthorityConfigSubjectResult']]:
        return pulumi.get(self, "subjects")

    @property
    @pulumi.getter
    def validities(self) -> Optional[Sequence['outputs.GetCertificateAuthorityCertificateAuthorityConfigValidityResult']]:
        return pulumi.get(self, "validities")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[str]:
        return pulumi.get(self, "version_name")


@pulumi.output_type
class GetCertificateAuthorityCertificateAuthorityConfigSubjectResult(dict):
    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 distinguished_name_qualifier: Optional[str] = None,
                 domain_component: Optional[str] = None,
                 generation_qualifier: Optional[str] = None,
                 given_name: Optional[str] = None,
                 initials: Optional[str] = None,
                 locality_name: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 pseudonym: Optional[str] = None,
                 serial_number: Optional[str] = None,
                 state_or_province_name: Optional[str] = None,
                 street: Optional[str] = None,
                 surname: Optional[str] = None,
                 title: Optional[str] = None,
                 user_id: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if distinguished_name_qualifier is not None:
            pulumi.set(__self__, "distinguished_name_qualifier", distinguished_name_qualifier)
        if domain_component is not None:
            pulumi.set(__self__, "domain_component", domain_component)
        if generation_qualifier is not None:
            pulumi.set(__self__, "generation_qualifier", generation_qualifier)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if initials is not None:
            pulumi.set(__self__, "initials", initials)
        if locality_name is not None:
            pulumi.set(__self__, "locality_name", locality_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if pseudonym is not None:
            pulumi.set(__self__, "pseudonym", pseudonym)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if state_or_province_name is not None:
            pulumi.set(__self__, "state_or_province_name", state_or_province_name)
        if street is not None:
            pulumi.set(__self__, "street", street)
        if surname is not None:
            pulumi.set(__self__, "surname", surname)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="distinguishedNameQualifier")
    def distinguished_name_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "distinguished_name_qualifier")

    @property
    @pulumi.getter(name="domainComponent")
    def domain_component(self) -> Optional[str]:
        return pulumi.get(self, "domain_component")

    @property
    @pulumi.getter(name="generationQualifier")
    def generation_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "generation_qualifier")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def initials(self) -> Optional[str]:
        return pulumi.get(self, "initials")

    @property
    @pulumi.getter(name="localityName")
    def locality_name(self) -> Optional[str]:
        return pulumi.get(self, "locality_name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def pseudonym(self) -> Optional[str]:
        return pulumi.get(self, "pseudonym")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="stateOrProvinceName")
    def state_or_province_name(self) -> Optional[str]:
        return pulumi.get(self, "state_or_province_name")

    @property
    @pulumi.getter
    def street(self) -> Optional[str]:
        return pulumi.get(self, "street")

    @property
    @pulumi.getter
    def surname(self) -> Optional[str]:
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetCertificateAuthorityCertificateAuthorityConfigValidityResult(dict):
    def __init__(__self__, *,
                 time_of_validity_not_after: Optional[str] = None,
                 time_of_validity_not_before: Optional[str] = None):
        if time_of_validity_not_after is not None:
            pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class GetCertificateAuthorityCertificateAuthorityRuleResult(dict):
    def __init__(__self__, *,
                 certificate_authority_max_validity_duration: Optional[str] = None,
                 leaf_certificate_max_validity_duration: Optional[str] = None,
                 rule_type: Optional[str] = None):
        if certificate_authority_max_validity_duration is not None:
            pulumi.set(__self__, "certificate_authority_max_validity_duration", certificate_authority_max_validity_duration)
        if leaf_certificate_max_validity_duration is not None:
            pulumi.set(__self__, "leaf_certificate_max_validity_duration", leaf_certificate_max_validity_duration)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="certificateAuthorityMaxValidityDuration")
    def certificate_authority_max_validity_duration(self) -> Optional[str]:
        return pulumi.get(self, "certificate_authority_max_validity_duration")

    @property
    @pulumi.getter(name="leafCertificateMaxValidityDuration")
    def leaf_certificate_max_validity_duration(self) -> Optional[str]:
        return pulumi.get(self, "leaf_certificate_max_validity_duration")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class GetCertificateAuthorityCertificateRevocationListDetailResult(dict):
    def __init__(__self__, *,
                 custom_formatted_urls: Optional[Sequence[str]] = None,
                 object_storage_configs: Optional[Sequence['outputs.GetCertificateAuthorityCertificateRevocationListDetailObjectStorageConfigResult']] = None):
        if custom_formatted_urls is not None:
            pulumi.set(__self__, "custom_formatted_urls", custom_formatted_urls)
        if object_storage_configs is not None:
            pulumi.set(__self__, "object_storage_configs", object_storage_configs)

    @property
    @pulumi.getter(name="customFormattedUrls")
    def custom_formatted_urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_formatted_urls")

    @property
    @pulumi.getter(name="objectStorageConfigs")
    def object_storage_configs(self) -> Optional[Sequence['outputs.GetCertificateAuthorityCertificateRevocationListDetailObjectStorageConfigResult']]:
        return pulumi.get(self, "object_storage_configs")


@pulumi.output_type
class GetCertificateAuthorityCertificateRevocationListDetailObjectStorageConfigResult(dict):
    def __init__(__self__, *,
                 object_storage_bucket_name: Optional[str] = None,
                 object_storage_namespace: Optional[str] = None,
                 object_storage_object_name_format: Optional[str] = None):
        if object_storage_bucket_name is not None:
            pulumi.set(__self__, "object_storage_bucket_name", object_storage_bucket_name)
        if object_storage_namespace is not None:
            pulumi.set(__self__, "object_storage_namespace", object_storage_namespace)
        if object_storage_object_name_format is not None:
            pulumi.set(__self__, "object_storage_object_name_format", object_storage_object_name_format)

    @property
    @pulumi.getter(name="objectStorageBucketName")
    def object_storage_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_bucket_name")

    @property
    @pulumi.getter(name="objectStorageNamespace")
    def object_storage_namespace(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_namespace")

    @property
    @pulumi.getter(name="objectStorageObjectNameFormat")
    def object_storage_object_name_format(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_object_name_format")


@pulumi.output_type
class GetCertificateAuthorityCurrentVersionResult(dict):
    def __init__(__self__, *,
                 certificate_authority_id: Optional[str] = None,
                 issuer_ca_version_number: Optional[str] = None,
                 revocation_statuses: Optional[Sequence['outputs.GetCertificateAuthorityCurrentVersionRevocationStatusResult']] = None,
                 serial_number: Optional[str] = None,
                 stages: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_of_deletion: Optional[str] = None,
                 validities: Optional[Sequence['outputs.GetCertificateAuthorityCurrentVersionValidityResult']] = None,
                 version_name: Optional[str] = None,
                 version_number: Optional[str] = None):
        if certificate_authority_id is not None:
            pulumi.set(__self__, "certificate_authority_id", certificate_authority_id)
        if issuer_ca_version_number is not None:
            pulumi.set(__self__, "issuer_ca_version_number", issuer_ca_version_number)
        if revocation_statuses is not None:
            pulumi.set(__self__, "revocation_statuses", revocation_statuses)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)
        if validities is not None:
            pulumi.set(__self__, "validities", validities)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)
        if version_number is not None:
            pulumi.set(__self__, "version_number", version_number)

    @property
    @pulumi.getter(name="certificateAuthorityId")
    def certificate_authority_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_authority_id")

    @property
    @pulumi.getter(name="issuerCaVersionNumber")
    def issuer_ca_version_number(self) -> Optional[str]:
        return pulumi.get(self, "issuer_ca_version_number")

    @property
    @pulumi.getter(name="revocationStatuses")
    def revocation_statuses(self) -> Optional[Sequence['outputs.GetCertificateAuthorityCurrentVersionRevocationStatusResult']]:
        return pulumi.get(self, "revocation_statuses")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter
    def stages(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[str]:
        return pulumi.get(self, "time_of_deletion")

    @property
    @pulumi.getter
    def validities(self) -> Optional[Sequence['outputs.GetCertificateAuthorityCurrentVersionValidityResult']]:
        return pulumi.get(self, "validities")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[str]:
        return pulumi.get(self, "version_name")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> Optional[str]:
        return pulumi.get(self, "version_number")


@pulumi.output_type
class GetCertificateAuthorityCurrentVersionRevocationStatusResult(dict):
    def __init__(__self__, *,
                 revocation_reason: Optional[str] = None,
                 time_of_revocation: Optional[str] = None):
        if revocation_reason is not None:
            pulumi.set(__self__, "revocation_reason", revocation_reason)
        if time_of_revocation is not None:
            pulumi.set(__self__, "time_of_revocation", time_of_revocation)

    @property
    @pulumi.getter(name="revocationReason")
    def revocation_reason(self) -> Optional[str]:
        return pulumi.get(self, "revocation_reason")

    @property
    @pulumi.getter(name="timeOfRevocation")
    def time_of_revocation(self) -> Optional[str]:
        return pulumi.get(self, "time_of_revocation")


@pulumi.output_type
class GetCertificateAuthorityCurrentVersionValidityResult(dict):
    def __init__(__self__, *,
                 time_of_validity_not_after: Optional[str] = None,
                 time_of_validity_not_before: Optional[str] = None):
        if time_of_validity_not_after is not None:
            pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class GetCertificateAuthoritySubjectResult(dict):
    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 distinguished_name_qualifier: Optional[str] = None,
                 domain_component: Optional[str] = None,
                 generation_qualifier: Optional[str] = None,
                 given_name: Optional[str] = None,
                 initials: Optional[str] = None,
                 locality_name: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 pseudonym: Optional[str] = None,
                 serial_number: Optional[str] = None,
                 state_or_province_name: Optional[str] = None,
                 street: Optional[str] = None,
                 surname: Optional[str] = None,
                 title: Optional[str] = None,
                 user_id: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if distinguished_name_qualifier is not None:
            pulumi.set(__self__, "distinguished_name_qualifier", distinguished_name_qualifier)
        if domain_component is not None:
            pulumi.set(__self__, "domain_component", domain_component)
        if generation_qualifier is not None:
            pulumi.set(__self__, "generation_qualifier", generation_qualifier)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if initials is not None:
            pulumi.set(__self__, "initials", initials)
        if locality_name is not None:
            pulumi.set(__self__, "locality_name", locality_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if pseudonym is not None:
            pulumi.set(__self__, "pseudonym", pseudonym)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if state_or_province_name is not None:
            pulumi.set(__self__, "state_or_province_name", state_or_province_name)
        if street is not None:
            pulumi.set(__self__, "street", street)
        if surname is not None:
            pulumi.set(__self__, "surname", surname)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="distinguishedNameQualifier")
    def distinguished_name_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "distinguished_name_qualifier")

    @property
    @pulumi.getter(name="domainComponent")
    def domain_component(self) -> Optional[str]:
        return pulumi.get(self, "domain_component")

    @property
    @pulumi.getter(name="generationQualifier")
    def generation_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "generation_qualifier")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def initials(self) -> Optional[str]:
        return pulumi.get(self, "initials")

    @property
    @pulumi.getter(name="localityName")
    def locality_name(self) -> Optional[str]:
        return pulumi.get(self, "locality_name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def pseudonym(self) -> Optional[str]:
        return pulumi.get(self, "pseudonym")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="stateOrProvinceName")
    def state_or_province_name(self) -> Optional[str]:
        return pulumi.get(self, "state_or_province_name")

    @property
    @pulumi.getter
    def street(self) -> Optional[str]:
        return pulumi.get(self, "street")

    @property
    @pulumi.getter
    def surname(self) -> Optional[str]:
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetCertificateAuthorityVersionRevocationStatusResult(dict):
    def __init__(__self__, *,
                 revocation_reason: Optional[str] = None,
                 time_of_revocation: Optional[str] = None):
        if revocation_reason is not None:
            pulumi.set(__self__, "revocation_reason", revocation_reason)
        if time_of_revocation is not None:
            pulumi.set(__self__, "time_of_revocation", time_of_revocation)

    @property
    @pulumi.getter(name="revocationReason")
    def revocation_reason(self) -> Optional[str]:
        return pulumi.get(self, "revocation_reason")

    @property
    @pulumi.getter(name="timeOfRevocation")
    def time_of_revocation(self) -> Optional[str]:
        return pulumi.get(self, "time_of_revocation")


@pulumi.output_type
class GetCertificateAuthorityVersionSubjectAlternativeNameResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCertificateAuthorityVersionValidityResult(dict):
    def __init__(__self__, *,
                 time_of_validity_not_after: Optional[str] = None,
                 time_of_validity_not_before: Optional[str] = None):
        if time_of_validity_not_after is not None:
            pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class GetCertificateAuthorityVersionsCertificateAuthorityVersionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemResult(dict):
    def __init__(__self__, *,
                 certificate_authority_id: Optional[str] = None,
                 issuer_ca_version_number: Optional[str] = None,
                 revocation_statuses: Optional[Sequence['outputs.GetCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemRevocationStatusResult']] = None,
                 serial_number: Optional[str] = None,
                 stages: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_of_deletion: Optional[str] = None,
                 validities: Optional[Sequence['outputs.GetCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemValidityResult']] = None,
                 version_name: Optional[str] = None,
                 version_number: Optional[str] = None):
        if certificate_authority_id is not None:
            pulumi.set(__self__, "certificate_authority_id", certificate_authority_id)
        if issuer_ca_version_number is not None:
            pulumi.set(__self__, "issuer_ca_version_number", issuer_ca_version_number)
        if revocation_statuses is not None:
            pulumi.set(__self__, "revocation_statuses", revocation_statuses)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)
        if validities is not None:
            pulumi.set(__self__, "validities", validities)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)
        if version_number is not None:
            pulumi.set(__self__, "version_number", version_number)

    @property
    @pulumi.getter(name="certificateAuthorityId")
    def certificate_authority_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_authority_id")

    @property
    @pulumi.getter(name="issuerCaVersionNumber")
    def issuer_ca_version_number(self) -> Optional[str]:
        return pulumi.get(self, "issuer_ca_version_number")

    @property
    @pulumi.getter(name="revocationStatuses")
    def revocation_statuses(self) -> Optional[Sequence['outputs.GetCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemRevocationStatusResult']]:
        return pulumi.get(self, "revocation_statuses")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter
    def stages(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[str]:
        return pulumi.get(self, "time_of_deletion")

    @property
    @pulumi.getter
    def validities(self) -> Optional[Sequence['outputs.GetCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemValidityResult']]:
        return pulumi.get(self, "validities")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[str]:
        return pulumi.get(self, "version_name")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> Optional[str]:
        return pulumi.get(self, "version_number")


@pulumi.output_type
class GetCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemRevocationStatusResult(dict):
    def __init__(__self__, *,
                 revocation_reason: Optional[str] = None,
                 time_of_revocation: Optional[str] = None):
        if revocation_reason is not None:
            pulumi.set(__self__, "revocation_reason", revocation_reason)
        if time_of_revocation is not None:
            pulumi.set(__self__, "time_of_revocation", time_of_revocation)

    @property
    @pulumi.getter(name="revocationReason")
    def revocation_reason(self) -> Optional[str]:
        return pulumi.get(self, "revocation_reason")

    @property
    @pulumi.getter(name="timeOfRevocation")
    def time_of_revocation(self) -> Optional[str]:
        return pulumi.get(self, "time_of_revocation")


@pulumi.output_type
class GetCertificateAuthorityVersionsCertificateAuthorityVersionCollectionItemValidityResult(dict):
    def __init__(__self__, *,
                 time_of_validity_not_after: Optional[str] = None,
                 time_of_validity_not_before: Optional[str] = None):
        if time_of_validity_not_after is not None:
            pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class GetCertificateAuthorityVersionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCertificateCertificateConfigResult(dict):
    def __init__(__self__, *,
                 certificate_profile_type: Optional[str] = None,
                 config_type: Optional[str] = None,
                 csr_pem: Optional[str] = None,
                 issuer_certificate_authority_id: Optional[str] = None,
                 key_algorithm: Optional[str] = None,
                 signature_algorithm: Optional[str] = None,
                 subject_alternative_names: Optional[Sequence['outputs.GetCertificateCertificateConfigSubjectAlternativeNameResult']] = None,
                 subjects: Optional[Sequence['outputs.GetCertificateCertificateConfigSubjectResult']] = None,
                 validities: Optional[Sequence['outputs.GetCertificateCertificateConfigValidityResult']] = None,
                 version_name: Optional[str] = None):
        if certificate_profile_type is not None:
            pulumi.set(__self__, "certificate_profile_type", certificate_profile_type)
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if csr_pem is not None:
            pulumi.set(__self__, "csr_pem", csr_pem)
        if issuer_certificate_authority_id is not None:
            pulumi.set(__self__, "issuer_certificate_authority_id", issuer_certificate_authority_id)
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if subjects is not None:
            pulumi.set(__self__, "subjects", subjects)
        if validities is not None:
            pulumi.set(__self__, "validities", validities)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)

    @property
    @pulumi.getter(name="certificateProfileType")
    def certificate_profile_type(self) -> Optional[str]:
        return pulumi.get(self, "certificate_profile_type")

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[str]:
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="csrPem")
    def csr_pem(self) -> Optional[str]:
        return pulumi.get(self, "csr_pem")

    @property
    @pulumi.getter(name="issuerCertificateAuthorityId")
    def issuer_certificate_authority_id(self) -> Optional[str]:
        return pulumi.get(self, "issuer_certificate_authority_id")

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "key_algorithm")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[Sequence['outputs.GetCertificateCertificateConfigSubjectAlternativeNameResult']]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter
    def subjects(self) -> Optional[Sequence['outputs.GetCertificateCertificateConfigSubjectResult']]:
        return pulumi.get(self, "subjects")

    @property
    @pulumi.getter
    def validities(self) -> Optional[Sequence['outputs.GetCertificateCertificateConfigValidityResult']]:
        return pulumi.get(self, "validities")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[str]:
        return pulumi.get(self, "version_name")


@pulumi.output_type
class GetCertificateCertificateConfigSubjectResult(dict):
    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 distinguished_name_qualifier: Optional[str] = None,
                 domain_component: Optional[str] = None,
                 generation_qualifier: Optional[str] = None,
                 given_name: Optional[str] = None,
                 initials: Optional[str] = None,
                 locality_name: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 pseudonym: Optional[str] = None,
                 serial_number: Optional[str] = None,
                 state_or_province_name: Optional[str] = None,
                 street: Optional[str] = None,
                 surname: Optional[str] = None,
                 title: Optional[str] = None,
                 user_id: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if distinguished_name_qualifier is not None:
            pulumi.set(__self__, "distinguished_name_qualifier", distinguished_name_qualifier)
        if domain_component is not None:
            pulumi.set(__self__, "domain_component", domain_component)
        if generation_qualifier is not None:
            pulumi.set(__self__, "generation_qualifier", generation_qualifier)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if initials is not None:
            pulumi.set(__self__, "initials", initials)
        if locality_name is not None:
            pulumi.set(__self__, "locality_name", locality_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if pseudonym is not None:
            pulumi.set(__self__, "pseudonym", pseudonym)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if state_or_province_name is not None:
            pulumi.set(__self__, "state_or_province_name", state_or_province_name)
        if street is not None:
            pulumi.set(__self__, "street", street)
        if surname is not None:
            pulumi.set(__self__, "surname", surname)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="distinguishedNameQualifier")
    def distinguished_name_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "distinguished_name_qualifier")

    @property
    @pulumi.getter(name="domainComponent")
    def domain_component(self) -> Optional[str]:
        return pulumi.get(self, "domain_component")

    @property
    @pulumi.getter(name="generationQualifier")
    def generation_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "generation_qualifier")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def initials(self) -> Optional[str]:
        return pulumi.get(self, "initials")

    @property
    @pulumi.getter(name="localityName")
    def locality_name(self) -> Optional[str]:
        return pulumi.get(self, "locality_name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def pseudonym(self) -> Optional[str]:
        return pulumi.get(self, "pseudonym")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="stateOrProvinceName")
    def state_or_province_name(self) -> Optional[str]:
        return pulumi.get(self, "state_or_province_name")

    @property
    @pulumi.getter
    def street(self) -> Optional[str]:
        return pulumi.get(self, "street")

    @property
    @pulumi.getter
    def surname(self) -> Optional[str]:
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetCertificateCertificateConfigSubjectAlternativeNameResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCertificateCertificateConfigValidityResult(dict):
    def __init__(__self__, *,
                 time_of_validity_not_after: Optional[str] = None,
                 time_of_validity_not_before: Optional[str] = None):
        if time_of_validity_not_after is not None:
            pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class GetCertificateCertificateRevocationListDetailResult(dict):
    def __init__(__self__, *,
                 custom_formatted_urls: Optional[Sequence[str]] = None,
                 object_storage_configs: Optional[Sequence['outputs.GetCertificateCertificateRevocationListDetailObjectStorageConfigResult']] = None):
        if custom_formatted_urls is not None:
            pulumi.set(__self__, "custom_formatted_urls", custom_formatted_urls)
        if object_storage_configs is not None:
            pulumi.set(__self__, "object_storage_configs", object_storage_configs)

    @property
    @pulumi.getter(name="customFormattedUrls")
    def custom_formatted_urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_formatted_urls")

    @property
    @pulumi.getter(name="objectStorageConfigs")
    def object_storage_configs(self) -> Optional[Sequence['outputs.GetCertificateCertificateRevocationListDetailObjectStorageConfigResult']]:
        return pulumi.get(self, "object_storage_configs")


@pulumi.output_type
class GetCertificateCertificateRevocationListDetailObjectStorageConfigResult(dict):
    def __init__(__self__, *,
                 object_storage_bucket_name: Optional[str] = None,
                 object_storage_namespace: Optional[str] = None,
                 object_storage_object_name_format: Optional[str] = None):
        if object_storage_bucket_name is not None:
            pulumi.set(__self__, "object_storage_bucket_name", object_storage_bucket_name)
        if object_storage_namespace is not None:
            pulumi.set(__self__, "object_storage_namespace", object_storage_namespace)
        if object_storage_object_name_format is not None:
            pulumi.set(__self__, "object_storage_object_name_format", object_storage_object_name_format)

    @property
    @pulumi.getter(name="objectStorageBucketName")
    def object_storage_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_bucket_name")

    @property
    @pulumi.getter(name="objectStorageNamespace")
    def object_storage_namespace(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_namespace")

    @property
    @pulumi.getter(name="objectStorageObjectNameFormat")
    def object_storage_object_name_format(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_object_name_format")


@pulumi.output_type
class GetCertificateCertificateRuleResult(dict):
    def __init__(__self__, *,
                 advance_renewal_period: Optional[str] = None,
                 renewal_interval: Optional[str] = None,
                 rule_type: Optional[str] = None):
        if advance_renewal_period is not None:
            pulumi.set(__self__, "advance_renewal_period", advance_renewal_period)
        if renewal_interval is not None:
            pulumi.set(__self__, "renewal_interval", renewal_interval)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="advanceRenewalPeriod")
    def advance_renewal_period(self) -> Optional[str]:
        return pulumi.get(self, "advance_renewal_period")

    @property
    @pulumi.getter(name="renewalInterval")
    def renewal_interval(self) -> Optional[str]:
        return pulumi.get(self, "renewal_interval")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class GetCertificateCurrentVersionResult(dict):
    def __init__(__self__, *,
                 certificate_id: Optional[str] = None,
                 issuer_ca_version_number: Optional[str] = None,
                 revocation_statuses: Optional[Sequence['outputs.GetCertificateCurrentVersionRevocationStatusResult']] = None,
                 serial_number: Optional[str] = None,
                 stages: Optional[Sequence[str]] = None,
                 subject_alternative_names: Optional[Sequence['outputs.GetCertificateCurrentVersionSubjectAlternativeNameResult']] = None,
                 time_created: Optional[str] = None,
                 time_of_deletion: Optional[str] = None,
                 validities: Optional[Sequence['outputs.GetCertificateCurrentVersionValidityResult']] = None,
                 version_name: Optional[str] = None,
                 version_number: Optional[str] = None):
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if issuer_ca_version_number is not None:
            pulumi.set(__self__, "issuer_ca_version_number", issuer_ca_version_number)
        if revocation_statuses is not None:
            pulumi.set(__self__, "revocation_statuses", revocation_statuses)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)
        if validities is not None:
            pulumi.set(__self__, "validities", validities)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)
        if version_number is not None:
            pulumi.set(__self__, "version_number", version_number)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="issuerCaVersionNumber")
    def issuer_ca_version_number(self) -> Optional[str]:
        return pulumi.get(self, "issuer_ca_version_number")

    @property
    @pulumi.getter(name="revocationStatuses")
    def revocation_statuses(self) -> Optional[Sequence['outputs.GetCertificateCurrentVersionRevocationStatusResult']]:
        return pulumi.get(self, "revocation_statuses")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter
    def stages(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[Sequence['outputs.GetCertificateCurrentVersionSubjectAlternativeNameResult']]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[str]:
        return pulumi.get(self, "time_of_deletion")

    @property
    @pulumi.getter
    def validities(self) -> Optional[Sequence['outputs.GetCertificateCurrentVersionValidityResult']]:
        return pulumi.get(self, "validities")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[str]:
        return pulumi.get(self, "version_name")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> Optional[str]:
        return pulumi.get(self, "version_number")


@pulumi.output_type
class GetCertificateCurrentVersionRevocationStatusResult(dict):
    def __init__(__self__, *,
                 revocation_reason: Optional[str] = None,
                 time_of_revocation: Optional[str] = None):
        if revocation_reason is not None:
            pulumi.set(__self__, "revocation_reason", revocation_reason)
        if time_of_revocation is not None:
            pulumi.set(__self__, "time_of_revocation", time_of_revocation)

    @property
    @pulumi.getter(name="revocationReason")
    def revocation_reason(self) -> Optional[str]:
        return pulumi.get(self, "revocation_reason")

    @property
    @pulumi.getter(name="timeOfRevocation")
    def time_of_revocation(self) -> Optional[str]:
        return pulumi.get(self, "time_of_revocation")


@pulumi.output_type
class GetCertificateCurrentVersionSubjectAlternativeNameResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCertificateCurrentVersionValidityResult(dict):
    def __init__(__self__, *,
                 time_of_validity_not_after: Optional[str] = None,
                 time_of_validity_not_before: Optional[str] = None):
        if time_of_validity_not_after is not None:
            pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class GetCertificateSubjectResult(dict):
    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 distinguished_name_qualifier: Optional[str] = None,
                 domain_component: Optional[str] = None,
                 generation_qualifier: Optional[str] = None,
                 given_name: Optional[str] = None,
                 initials: Optional[str] = None,
                 locality_name: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 pseudonym: Optional[str] = None,
                 serial_number: Optional[str] = None,
                 state_or_province_name: Optional[str] = None,
                 street: Optional[str] = None,
                 surname: Optional[str] = None,
                 title: Optional[str] = None,
                 user_id: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if distinguished_name_qualifier is not None:
            pulumi.set(__self__, "distinguished_name_qualifier", distinguished_name_qualifier)
        if domain_component is not None:
            pulumi.set(__self__, "domain_component", domain_component)
        if generation_qualifier is not None:
            pulumi.set(__self__, "generation_qualifier", generation_qualifier)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if initials is not None:
            pulumi.set(__self__, "initials", initials)
        if locality_name is not None:
            pulumi.set(__self__, "locality_name", locality_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if pseudonym is not None:
            pulumi.set(__self__, "pseudonym", pseudonym)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if state_or_province_name is not None:
            pulumi.set(__self__, "state_or_province_name", state_or_province_name)
        if street is not None:
            pulumi.set(__self__, "street", street)
        if surname is not None:
            pulumi.set(__self__, "surname", surname)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="distinguishedNameQualifier")
    def distinguished_name_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "distinguished_name_qualifier")

    @property
    @pulumi.getter(name="domainComponent")
    def domain_component(self) -> Optional[str]:
        return pulumi.get(self, "domain_component")

    @property
    @pulumi.getter(name="generationQualifier")
    def generation_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "generation_qualifier")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def initials(self) -> Optional[str]:
        return pulumi.get(self, "initials")

    @property
    @pulumi.getter(name="localityName")
    def locality_name(self) -> Optional[str]:
        return pulumi.get(self, "locality_name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def pseudonym(self) -> Optional[str]:
        return pulumi.get(self, "pseudonym")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="stateOrProvinceName")
    def state_or_province_name(self) -> Optional[str]:
        return pulumi.get(self, "state_or_province_name")

    @property
    @pulumi.getter
    def street(self) -> Optional[str]:
        return pulumi.get(self, "street")

    @property
    @pulumi.getter
    def surname(self) -> Optional[str]:
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetCertificateVersionRevocationStatusResult(dict):
    def __init__(__self__, *,
                 revocation_reason: Optional[str] = None,
                 time_of_revocation: Optional[str] = None):
        if revocation_reason is not None:
            pulumi.set(__self__, "revocation_reason", revocation_reason)
        if time_of_revocation is not None:
            pulumi.set(__self__, "time_of_revocation", time_of_revocation)

    @property
    @pulumi.getter(name="revocationReason")
    def revocation_reason(self) -> Optional[str]:
        return pulumi.get(self, "revocation_reason")

    @property
    @pulumi.getter(name="timeOfRevocation")
    def time_of_revocation(self) -> Optional[str]:
        return pulumi.get(self, "time_of_revocation")


@pulumi.output_type
class GetCertificateVersionSubjectAlternativeNameResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCertificateVersionValidityResult(dict):
    def __init__(__self__, *,
                 time_of_validity_not_after: Optional[str] = None,
                 time_of_validity_not_before: Optional[str] = None):
        if time_of_validity_not_after is not None:
            pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class GetCertificateVersionsCertificateVersionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetCertificateVersionsCertificateVersionCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetCertificateVersionsCertificateVersionCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCertificateVersionsCertificateVersionCollectionItemResult(dict):
    def __init__(__self__, *,
                 certificate_id: Optional[str] = None,
                 issuer_ca_version_number: Optional[str] = None,
                 revocation_statuses: Optional[Sequence['outputs.GetCertificateVersionsCertificateVersionCollectionItemRevocationStatusResult']] = None,
                 serial_number: Optional[str] = None,
                 stages: Optional[Sequence[str]] = None,
                 subject_alternative_names: Optional[Sequence['outputs.GetCertificateVersionsCertificateVersionCollectionItemSubjectAlternativeNameResult']] = None,
                 time_created: Optional[str] = None,
                 time_of_deletion: Optional[str] = None,
                 validities: Optional[Sequence['outputs.GetCertificateVersionsCertificateVersionCollectionItemValidityResult']] = None,
                 version_name: Optional[str] = None,
                 version_number: Optional[str] = None):
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if issuer_ca_version_number is not None:
            pulumi.set(__self__, "issuer_ca_version_number", issuer_ca_version_number)
        if revocation_statuses is not None:
            pulumi.set(__self__, "revocation_statuses", revocation_statuses)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)
        if validities is not None:
            pulumi.set(__self__, "validities", validities)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)
        if version_number is not None:
            pulumi.set(__self__, "version_number", version_number)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="issuerCaVersionNumber")
    def issuer_ca_version_number(self) -> Optional[str]:
        return pulumi.get(self, "issuer_ca_version_number")

    @property
    @pulumi.getter(name="revocationStatuses")
    def revocation_statuses(self) -> Optional[Sequence['outputs.GetCertificateVersionsCertificateVersionCollectionItemRevocationStatusResult']]:
        return pulumi.get(self, "revocation_statuses")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter
    def stages(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[Sequence['outputs.GetCertificateVersionsCertificateVersionCollectionItemSubjectAlternativeNameResult']]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[str]:
        return pulumi.get(self, "time_of_deletion")

    @property
    @pulumi.getter
    def validities(self) -> Optional[Sequence['outputs.GetCertificateVersionsCertificateVersionCollectionItemValidityResult']]:
        return pulumi.get(self, "validities")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[str]:
        return pulumi.get(self, "version_name")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> Optional[str]:
        return pulumi.get(self, "version_number")


@pulumi.output_type
class GetCertificateVersionsCertificateVersionCollectionItemRevocationStatusResult(dict):
    def __init__(__self__, *,
                 revocation_reason: Optional[str] = None,
                 time_of_revocation: Optional[str] = None):
        if revocation_reason is not None:
            pulumi.set(__self__, "revocation_reason", revocation_reason)
        if time_of_revocation is not None:
            pulumi.set(__self__, "time_of_revocation", time_of_revocation)

    @property
    @pulumi.getter(name="revocationReason")
    def revocation_reason(self) -> Optional[str]:
        return pulumi.get(self, "revocation_reason")

    @property
    @pulumi.getter(name="timeOfRevocation")
    def time_of_revocation(self) -> Optional[str]:
        return pulumi.get(self, "time_of_revocation")


@pulumi.output_type
class GetCertificateVersionsCertificateVersionCollectionItemSubjectAlternativeNameResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCertificateVersionsCertificateVersionCollectionItemValidityResult(dict):
    def __init__(__self__, *,
                 time_of_validity_not_after: Optional[str] = None,
                 time_of_validity_not_before: Optional[str] = None):
        if time_of_validity_not_after is not None:
            pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class GetCertificateVersionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCertificatesCertificateCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCertificatesCertificateCollectionItemResult(dict):
    def __init__(__self__, *,
                 certificate_configs: Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCertificateConfigResult']] = None,
                 certificate_profile_type: Optional[str] = None,
                 certificate_revocation_list_details: Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCertificateRevocationListDetailResult']] = None,
                 certificate_rules: Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCertificateRuleResult']] = None,
                 compartment_id: Optional[str] = None,
                 config_type: Optional[str] = None,
                 current_versions: Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCurrentVersionResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 issuer_certificate_authority_id: Optional[str] = None,
                 key_algorithm: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 name: Optional[str] = None,
                 signature_algorithm: Optional[str] = None,
                 state: Optional[str] = None,
                 subjects: Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemSubjectResult']] = None,
                 time_created: Optional[str] = None,
                 time_of_deletion: Optional[str] = None):
        if certificate_configs is not None:
            pulumi.set(__self__, "certificate_configs", certificate_configs)
        if certificate_profile_type is not None:
            pulumi.set(__self__, "certificate_profile_type", certificate_profile_type)
        if certificate_revocation_list_details is not None:
            pulumi.set(__self__, "certificate_revocation_list_details", certificate_revocation_list_details)
        if certificate_rules is not None:
            pulumi.set(__self__, "certificate_rules", certificate_rules)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if current_versions is not None:
            pulumi.set(__self__, "current_versions", current_versions)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if issuer_certificate_authority_id is not None:
            pulumi.set(__self__, "issuer_certificate_authority_id", issuer_certificate_authority_id)
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subjects is not None:
            pulumi.set(__self__, "subjects", subjects)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)

    @property
    @pulumi.getter(name="certificateConfigs")
    def certificate_configs(self) -> Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCertificateConfigResult']]:
        return pulumi.get(self, "certificate_configs")

    @property
    @pulumi.getter(name="certificateProfileType")
    def certificate_profile_type(self) -> Optional[str]:
        return pulumi.get(self, "certificate_profile_type")

    @property
    @pulumi.getter(name="certificateRevocationListDetails")
    def certificate_revocation_list_details(self) -> Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCertificateRevocationListDetailResult']]:
        return pulumi.get(self, "certificate_revocation_list_details")

    @property
    @pulumi.getter(name="certificateRules")
    def certificate_rules(self) -> Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCertificateRuleResult']]:
        return pulumi.get(self, "certificate_rules")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[str]:
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="currentVersions")
    def current_versions(self) -> Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCurrentVersionResult']]:
        return pulumi.get(self, "current_versions")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="issuerCertificateAuthorityId")
    def issuer_certificate_authority_id(self) -> Optional[str]:
        return pulumi.get(self, "issuer_certificate_authority_id")

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "key_algorithm")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def subjects(self) -> Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemSubjectResult']]:
        return pulumi.get(self, "subjects")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[str]:
        return pulumi.get(self, "time_of_deletion")


@pulumi.output_type
class GetCertificatesCertificateCollectionItemCertificateConfigResult(dict):
    def __init__(__self__, *,
                 certificate_profile_type: Optional[str] = None,
                 config_type: Optional[str] = None,
                 csr_pem: Optional[str] = None,
                 issuer_certificate_authority_id: Optional[str] = None,
                 key_algorithm: Optional[str] = None,
                 signature_algorithm: Optional[str] = None,
                 subject_alternative_names: Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCertificateConfigSubjectAlternativeNameResult']] = None,
                 subjects: Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCertificateConfigSubjectResult']] = None,
                 validities: Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCertificateConfigValidityResult']] = None,
                 version_name: Optional[str] = None):
        if certificate_profile_type is not None:
            pulumi.set(__self__, "certificate_profile_type", certificate_profile_type)
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if csr_pem is not None:
            pulumi.set(__self__, "csr_pem", csr_pem)
        if issuer_certificate_authority_id is not None:
            pulumi.set(__self__, "issuer_certificate_authority_id", issuer_certificate_authority_id)
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if subjects is not None:
            pulumi.set(__self__, "subjects", subjects)
        if validities is not None:
            pulumi.set(__self__, "validities", validities)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)

    @property
    @pulumi.getter(name="certificateProfileType")
    def certificate_profile_type(self) -> Optional[str]:
        return pulumi.get(self, "certificate_profile_type")

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[str]:
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="csrPem")
    def csr_pem(self) -> Optional[str]:
        return pulumi.get(self, "csr_pem")

    @property
    @pulumi.getter(name="issuerCertificateAuthorityId")
    def issuer_certificate_authority_id(self) -> Optional[str]:
        return pulumi.get(self, "issuer_certificate_authority_id")

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "key_algorithm")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCertificateConfigSubjectAlternativeNameResult']]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter
    def subjects(self) -> Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCertificateConfigSubjectResult']]:
        return pulumi.get(self, "subjects")

    @property
    @pulumi.getter
    def validities(self) -> Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCertificateConfigValidityResult']]:
        return pulumi.get(self, "validities")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[str]:
        return pulumi.get(self, "version_name")


@pulumi.output_type
class GetCertificatesCertificateCollectionItemCertificateConfigSubjectResult(dict):
    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 distinguished_name_qualifier: Optional[str] = None,
                 domain_component: Optional[str] = None,
                 generation_qualifier: Optional[str] = None,
                 given_name: Optional[str] = None,
                 initials: Optional[str] = None,
                 locality_name: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 pseudonym: Optional[str] = None,
                 serial_number: Optional[str] = None,
                 state_or_province_name: Optional[str] = None,
                 street: Optional[str] = None,
                 surname: Optional[str] = None,
                 title: Optional[str] = None,
                 user_id: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if distinguished_name_qualifier is not None:
            pulumi.set(__self__, "distinguished_name_qualifier", distinguished_name_qualifier)
        if domain_component is not None:
            pulumi.set(__self__, "domain_component", domain_component)
        if generation_qualifier is not None:
            pulumi.set(__self__, "generation_qualifier", generation_qualifier)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if initials is not None:
            pulumi.set(__self__, "initials", initials)
        if locality_name is not None:
            pulumi.set(__self__, "locality_name", locality_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if pseudonym is not None:
            pulumi.set(__self__, "pseudonym", pseudonym)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if state_or_province_name is not None:
            pulumi.set(__self__, "state_or_province_name", state_or_province_name)
        if street is not None:
            pulumi.set(__self__, "street", street)
        if surname is not None:
            pulumi.set(__self__, "surname", surname)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="distinguishedNameQualifier")
    def distinguished_name_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "distinguished_name_qualifier")

    @property
    @pulumi.getter(name="domainComponent")
    def domain_component(self) -> Optional[str]:
        return pulumi.get(self, "domain_component")

    @property
    @pulumi.getter(name="generationQualifier")
    def generation_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "generation_qualifier")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def initials(self) -> Optional[str]:
        return pulumi.get(self, "initials")

    @property
    @pulumi.getter(name="localityName")
    def locality_name(self) -> Optional[str]:
        return pulumi.get(self, "locality_name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def pseudonym(self) -> Optional[str]:
        return pulumi.get(self, "pseudonym")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="stateOrProvinceName")
    def state_or_province_name(self) -> Optional[str]:
        return pulumi.get(self, "state_or_province_name")

    @property
    @pulumi.getter
    def street(self) -> Optional[str]:
        return pulumi.get(self, "street")

    @property
    @pulumi.getter
    def surname(self) -> Optional[str]:
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetCertificatesCertificateCollectionItemCertificateConfigSubjectAlternativeNameResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCertificatesCertificateCollectionItemCertificateConfigValidityResult(dict):
    def __init__(__self__, *,
                 time_of_validity_not_after: Optional[str] = None,
                 time_of_validity_not_before: Optional[str] = None):
        if time_of_validity_not_after is not None:
            pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class GetCertificatesCertificateCollectionItemCertificateRevocationListDetailResult(dict):
    def __init__(__self__, *,
                 custom_formatted_urls: Optional[Sequence[str]] = None,
                 object_storage_configs: Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCertificateRevocationListDetailObjectStorageConfigResult']] = None):
        if custom_formatted_urls is not None:
            pulumi.set(__self__, "custom_formatted_urls", custom_formatted_urls)
        if object_storage_configs is not None:
            pulumi.set(__self__, "object_storage_configs", object_storage_configs)

    @property
    @pulumi.getter(name="customFormattedUrls")
    def custom_formatted_urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_formatted_urls")

    @property
    @pulumi.getter(name="objectStorageConfigs")
    def object_storage_configs(self) -> Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCertificateRevocationListDetailObjectStorageConfigResult']]:
        return pulumi.get(self, "object_storage_configs")


@pulumi.output_type
class GetCertificatesCertificateCollectionItemCertificateRevocationListDetailObjectStorageConfigResult(dict):
    def __init__(__self__, *,
                 object_storage_bucket_name: Optional[str] = None,
                 object_storage_namespace: Optional[str] = None,
                 object_storage_object_name_format: Optional[str] = None):
        if object_storage_bucket_name is not None:
            pulumi.set(__self__, "object_storage_bucket_name", object_storage_bucket_name)
        if object_storage_namespace is not None:
            pulumi.set(__self__, "object_storage_namespace", object_storage_namespace)
        if object_storage_object_name_format is not None:
            pulumi.set(__self__, "object_storage_object_name_format", object_storage_object_name_format)

    @property
    @pulumi.getter(name="objectStorageBucketName")
    def object_storage_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_bucket_name")

    @property
    @pulumi.getter(name="objectStorageNamespace")
    def object_storage_namespace(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_namespace")

    @property
    @pulumi.getter(name="objectStorageObjectNameFormat")
    def object_storage_object_name_format(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_object_name_format")


@pulumi.output_type
class GetCertificatesCertificateCollectionItemCertificateRuleResult(dict):
    def __init__(__self__, *,
                 advance_renewal_period: Optional[str] = None,
                 renewal_interval: Optional[str] = None,
                 rule_type: Optional[str] = None):
        if advance_renewal_period is not None:
            pulumi.set(__self__, "advance_renewal_period", advance_renewal_period)
        if renewal_interval is not None:
            pulumi.set(__self__, "renewal_interval", renewal_interval)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="advanceRenewalPeriod")
    def advance_renewal_period(self) -> Optional[str]:
        return pulumi.get(self, "advance_renewal_period")

    @property
    @pulumi.getter(name="renewalInterval")
    def renewal_interval(self) -> Optional[str]:
        return pulumi.get(self, "renewal_interval")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class GetCertificatesCertificateCollectionItemCurrentVersionResult(dict):
    def __init__(__self__, *,
                 certificate_id: Optional[str] = None,
                 issuer_ca_version_number: Optional[str] = None,
                 revocation_statuses: Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCurrentVersionRevocationStatusResult']] = None,
                 serial_number: Optional[str] = None,
                 stages: Optional[Sequence[str]] = None,
                 subject_alternative_names: Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCurrentVersionSubjectAlternativeNameResult']] = None,
                 time_created: Optional[str] = None,
                 time_of_deletion: Optional[str] = None,
                 validities: Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCurrentVersionValidityResult']] = None,
                 version_name: Optional[str] = None,
                 version_number: Optional[str] = None):
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if issuer_ca_version_number is not None:
            pulumi.set(__self__, "issuer_ca_version_number", issuer_ca_version_number)
        if revocation_statuses is not None:
            pulumi.set(__self__, "revocation_statuses", revocation_statuses)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_of_deletion is not None:
            pulumi.set(__self__, "time_of_deletion", time_of_deletion)
        if validities is not None:
            pulumi.set(__self__, "validities", validities)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)
        if version_number is not None:
            pulumi.set(__self__, "version_number", version_number)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="issuerCaVersionNumber")
    def issuer_ca_version_number(self) -> Optional[str]:
        return pulumi.get(self, "issuer_ca_version_number")

    @property
    @pulumi.getter(name="revocationStatuses")
    def revocation_statuses(self) -> Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCurrentVersionRevocationStatusResult']]:
        return pulumi.get(self, "revocation_statuses")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter
    def stages(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "stages")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCurrentVersionSubjectAlternativeNameResult']]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfDeletion")
    def time_of_deletion(self) -> Optional[str]:
        return pulumi.get(self, "time_of_deletion")

    @property
    @pulumi.getter
    def validities(self) -> Optional[Sequence['outputs.GetCertificatesCertificateCollectionItemCurrentVersionValidityResult']]:
        return pulumi.get(self, "validities")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[str]:
        return pulumi.get(self, "version_name")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> Optional[str]:
        return pulumi.get(self, "version_number")


@pulumi.output_type
class GetCertificatesCertificateCollectionItemCurrentVersionRevocationStatusResult(dict):
    def __init__(__self__, *,
                 revocation_reason: Optional[str] = None,
                 time_of_revocation: Optional[str] = None):
        if revocation_reason is not None:
            pulumi.set(__self__, "revocation_reason", revocation_reason)
        if time_of_revocation is not None:
            pulumi.set(__self__, "time_of_revocation", time_of_revocation)

    @property
    @pulumi.getter(name="revocationReason")
    def revocation_reason(self) -> Optional[str]:
        return pulumi.get(self, "revocation_reason")

    @property
    @pulumi.getter(name="timeOfRevocation")
    def time_of_revocation(self) -> Optional[str]:
        return pulumi.get(self, "time_of_revocation")


@pulumi.output_type
class GetCertificatesCertificateCollectionItemCurrentVersionSubjectAlternativeNameResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCertificatesCertificateCollectionItemCurrentVersionValidityResult(dict):
    def __init__(__self__, *,
                 time_of_validity_not_after: Optional[str] = None,
                 time_of_validity_not_before: Optional[str] = None):
        if time_of_validity_not_after is not None:
            pulumi.set(__self__, "time_of_validity_not_after", time_of_validity_not_after)
        if time_of_validity_not_before is not None:
            pulumi.set(__self__, "time_of_validity_not_before", time_of_validity_not_before)

    @property
    @pulumi.getter(name="timeOfValidityNotAfter")
    def time_of_validity_not_after(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_after")

    @property
    @pulumi.getter(name="timeOfValidityNotBefore")
    def time_of_validity_not_before(self) -> Optional[str]:
        return pulumi.get(self, "time_of_validity_not_before")


@pulumi.output_type
class GetCertificatesCertificateCollectionItemSubjectResult(dict):
    def __init__(__self__, *,
                 common_name: Optional[str] = None,
                 country: Optional[str] = None,
                 distinguished_name_qualifier: Optional[str] = None,
                 domain_component: Optional[str] = None,
                 generation_qualifier: Optional[str] = None,
                 given_name: Optional[str] = None,
                 initials: Optional[str] = None,
                 locality_name: Optional[str] = None,
                 organization: Optional[str] = None,
                 organizational_unit: Optional[str] = None,
                 pseudonym: Optional[str] = None,
                 serial_number: Optional[str] = None,
                 state_or_province_name: Optional[str] = None,
                 street: Optional[str] = None,
                 surname: Optional[str] = None,
                 title: Optional[str] = None,
                 user_id: Optional[str] = None):
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if distinguished_name_qualifier is not None:
            pulumi.set(__self__, "distinguished_name_qualifier", distinguished_name_qualifier)
        if domain_component is not None:
            pulumi.set(__self__, "domain_component", domain_component)
        if generation_qualifier is not None:
            pulumi.set(__self__, "generation_qualifier", generation_qualifier)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)
        if initials is not None:
            pulumi.set(__self__, "initials", initials)
        if locality_name is not None:
            pulumi.set(__self__, "locality_name", locality_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organizational_unit is not None:
            pulumi.set(__self__, "organizational_unit", organizational_unit)
        if pseudonym is not None:
            pulumi.set(__self__, "pseudonym", pseudonym)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if state_or_province_name is not None:
            pulumi.set(__self__, "state_or_province_name", state_or_province_name)
        if street is not None:
            pulumi.set(__self__, "street", street)
        if surname is not None:
            pulumi.set(__self__, "surname", surname)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="distinguishedNameQualifier")
    def distinguished_name_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "distinguished_name_qualifier")

    @property
    @pulumi.getter(name="domainComponent")
    def domain_component(self) -> Optional[str]:
        return pulumi.get(self, "domain_component")

    @property
    @pulumi.getter(name="generationQualifier")
    def generation_qualifier(self) -> Optional[str]:
        return pulumi.get(self, "generation_qualifier")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def initials(self) -> Optional[str]:
        return pulumi.get(self, "initials")

    @property
    @pulumi.getter(name="localityName")
    def locality_name(self) -> Optional[str]:
        return pulumi.get(self, "locality_name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> Optional[str]:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def pseudonym(self) -> Optional[str]:
        return pulumi.get(self, "pseudonym")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="stateOrProvinceName")
    def state_or_province_name(self) -> Optional[str]:
        return pulumi.get(self, "state_or_province_name")

    @property
    @pulumi.getter
    def street(self) -> Optional[str]:
        return pulumi.get(self, "street")

    @property
    @pulumi.getter
    def surname(self) -> Optional[str]:
        return pulumi.get(self, "surname")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetCertificatesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


