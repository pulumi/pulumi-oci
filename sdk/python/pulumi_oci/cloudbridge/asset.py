# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AssetArgs', 'Asset']

@pulumi.input_type
class AssetArgs:
    def __init__(__self__, *,
                 asset_type: pulumi.Input[str],
                 compartment_id: pulumi.Input[str],
                 external_asset_key: pulumi.Input[str],
                 inventory_id: pulumi.Input[str],
                 source_key: pulumi.Input[str],
                 asset_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 compute: Optional[pulumi.Input['AssetComputeArgs']] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vm: Optional[pulumi.Input['AssetVmArgs']] = None,
                 vmware_vcenter: Optional[pulumi.Input['AssetVmwareVcenterArgs']] = None,
                 vmware_vm: Optional[pulumi.Input['AssetVmwareVmArgs']] = None):
        """
        The set of arguments for constructing a Asset resource.
        """
        pulumi.set(__self__, "asset_type", asset_type)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "external_asset_key", external_asset_key)
        pulumi.set(__self__, "inventory_id", inventory_id)
        pulumi.set(__self__, "source_key", source_key)
        if asset_source_ids is not None:
            pulumi.set(__self__, "asset_source_ids", asset_source_ids)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if vm is not None:
            pulumi.set(__self__, "vm", vm)
        if vmware_vcenter is not None:
            pulumi.set(__self__, "vmware_vcenter", vmware_vcenter)
        if vmware_vm is not None:
            pulumi.set(__self__, "vmware_vm", vmware_vm)

    @property
    @pulumi.getter(name="assetType")
    def asset_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "asset_type")

    @asset_type.setter
    def asset_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "asset_type", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="externalAssetKey")
    def external_asset_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "external_asset_key")

    @external_asset_key.setter
    def external_asset_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_asset_key", value)

    @property
    @pulumi.getter(name="inventoryId")
    def inventory_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "inventory_id")

    @inventory_id.setter
    def inventory_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "inventory_id", value)

    @property
    @pulumi.getter(name="sourceKey")
    def source_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_key")

    @source_key.setter
    def source_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_key", value)

    @property
    @pulumi.getter(name="assetSourceIds")
    def asset_source_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "asset_source_ids")

    @asset_source_ids.setter
    def asset_source_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "asset_source_ids", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['AssetComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['AssetComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter
    def vm(self) -> Optional[pulumi.Input['AssetVmArgs']]:
        return pulumi.get(self, "vm")

    @vm.setter
    def vm(self, value: Optional[pulumi.Input['AssetVmArgs']]):
        pulumi.set(self, "vm", value)

    @property
    @pulumi.getter(name="vmwareVcenter")
    def vmware_vcenter(self) -> Optional[pulumi.Input['AssetVmwareVcenterArgs']]:
        return pulumi.get(self, "vmware_vcenter")

    @vmware_vcenter.setter
    def vmware_vcenter(self, value: Optional[pulumi.Input['AssetVmwareVcenterArgs']]):
        pulumi.set(self, "vmware_vcenter", value)

    @property
    @pulumi.getter(name="vmwareVm")
    def vmware_vm(self) -> Optional[pulumi.Input['AssetVmwareVmArgs']]:
        return pulumi.get(self, "vmware_vm")

    @vmware_vm.setter
    def vmware_vm(self, value: Optional[pulumi.Input['AssetVmwareVmArgs']]):
        pulumi.set(self, "vmware_vm", value)


@pulumi.input_type
class _AssetState:
    def __init__(__self__, *,
                 asset_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 asset_type: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 compute: Optional[pulumi.Input['AssetComputeArgs']] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 external_asset_key: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 inventory_id: Optional[pulumi.Input[str]] = None,
                 source_key: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 vm: Optional[pulumi.Input['AssetVmArgs']] = None,
                 vmware_vcenter: Optional[pulumi.Input['AssetVmwareVcenterArgs']] = None,
                 vmware_vm: Optional[pulumi.Input['AssetVmwareVmArgs']] = None):
        """
        Input properties used for looking up and filtering Asset resources.
        """
        if asset_source_ids is not None:
            pulumi.set(__self__, "asset_source_ids", asset_source_ids)
        if asset_type is not None:
            pulumi.set(__self__, "asset_type", asset_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_asset_key is not None:
            pulumi.set(__self__, "external_asset_key", external_asset_key)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if inventory_id is not None:
            pulumi.set(__self__, "inventory_id", inventory_id)
        if source_key is not None:
            pulumi.set(__self__, "source_key", source_key)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if vm is not None:
            pulumi.set(__self__, "vm", vm)
        if vmware_vcenter is not None:
            pulumi.set(__self__, "vmware_vcenter", vmware_vcenter)
        if vmware_vm is not None:
            pulumi.set(__self__, "vmware_vm", vmware_vm)

    @property
    @pulumi.getter(name="assetSourceIds")
    def asset_source_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "asset_source_ids")

    @asset_source_ids.setter
    def asset_source_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "asset_source_ids", value)

    @property
    @pulumi.getter(name="assetType")
    def asset_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "asset_type")

    @asset_type.setter
    def asset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_type", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['AssetComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['AssetComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="externalAssetKey")
    def external_asset_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_asset_key")

    @external_asset_key.setter
    def external_asset_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_asset_key", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="inventoryId")
    def inventory_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inventory_id")

    @inventory_id.setter
    def inventory_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inventory_id", value)

    @property
    @pulumi.getter(name="sourceKey")
    def source_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_key")

    @source_key.setter
    def source_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_key", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "system_tags", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter
    def vm(self) -> Optional[pulumi.Input['AssetVmArgs']]:
        return pulumi.get(self, "vm")

    @vm.setter
    def vm(self, value: Optional[pulumi.Input['AssetVmArgs']]):
        pulumi.set(self, "vm", value)

    @property
    @pulumi.getter(name="vmwareVcenter")
    def vmware_vcenter(self) -> Optional[pulumi.Input['AssetVmwareVcenterArgs']]:
        return pulumi.get(self, "vmware_vcenter")

    @vmware_vcenter.setter
    def vmware_vcenter(self, value: Optional[pulumi.Input['AssetVmwareVcenterArgs']]):
        pulumi.set(self, "vmware_vcenter", value)

    @property
    @pulumi.getter(name="vmwareVm")
    def vmware_vm(self) -> Optional[pulumi.Input['AssetVmwareVmArgs']]:
        return pulumi.get(self, "vmware_vm")

    @vmware_vm.setter
    def vmware_vm(self, value: Optional[pulumi.Input['AssetVmwareVmArgs']]):
        pulumi.set(self, "vmware_vm", value)


class Asset(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 asset_type: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 compute: Optional[pulumi.Input[pulumi.InputType['AssetComputeArgs']]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 external_asset_key: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 inventory_id: Optional[pulumi.Input[str]] = None,
                 source_key: Optional[pulumi.Input[str]] = None,
                 vm: Optional[pulumi.Input[pulumi.InputType['AssetVmArgs']]] = None,
                 vmware_vcenter: Optional[pulumi.Input[pulumi.InputType['AssetVmwareVcenterArgs']]] = None,
                 vmware_vm: Optional[pulumi.Input[pulumi.InputType['AssetVmwareVmArgs']]] = None,
                 __props__=None):
        """
        Create a Asset resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AssetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Asset resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AssetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AssetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 asset_type: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 compute: Optional[pulumi.Input[pulumi.InputType['AssetComputeArgs']]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 external_asset_key: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 inventory_id: Optional[pulumi.Input[str]] = None,
                 source_key: Optional[pulumi.Input[str]] = None,
                 vm: Optional[pulumi.Input[pulumi.InputType['AssetVmArgs']]] = None,
                 vmware_vcenter: Optional[pulumi.Input[pulumi.InputType['AssetVmwareVcenterArgs']]] = None,
                 vmware_vm: Optional[pulumi.Input[pulumi.InputType['AssetVmwareVmArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AssetArgs.__new__(AssetArgs)

            __props__.__dict__["asset_source_ids"] = asset_source_ids
            if asset_type is None and not opts.urn:
                raise TypeError("Missing required property 'asset_type'")
            __props__.__dict__["asset_type"] = asset_type
            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["compute"] = compute
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["display_name"] = display_name
            if external_asset_key is None and not opts.urn:
                raise TypeError("Missing required property 'external_asset_key'")
            __props__.__dict__["external_asset_key"] = external_asset_key
            __props__.__dict__["freeform_tags"] = freeform_tags
            if inventory_id is None and not opts.urn:
                raise TypeError("Missing required property 'inventory_id'")
            __props__.__dict__["inventory_id"] = inventory_id
            if source_key is None and not opts.urn:
                raise TypeError("Missing required property 'source_key'")
            __props__.__dict__["source_key"] = source_key
            __props__.__dict__["vm"] = vm
            __props__.__dict__["vmware_vcenter"] = vmware_vcenter
            __props__.__dict__["vmware_vm"] = vmware_vm
            __props__.__dict__["state"] = None
            __props__.__dict__["system_tags"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        super(Asset, __self__).__init__(
            'oci:CloudBridge/asset:Asset',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            asset_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            asset_type: Optional[pulumi.Input[str]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            compute: Optional[pulumi.Input[pulumi.InputType['AssetComputeArgs']]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            external_asset_key: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            inventory_id: Optional[pulumi.Input[str]] = None,
            source_key: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None,
            vm: Optional[pulumi.Input[pulumi.InputType['AssetVmArgs']]] = None,
            vmware_vcenter: Optional[pulumi.Input[pulumi.InputType['AssetVmwareVcenterArgs']]] = None,
            vmware_vm: Optional[pulumi.Input[pulumi.InputType['AssetVmwareVmArgs']]] = None) -> 'Asset':
        """
        Get an existing Asset resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AssetState.__new__(_AssetState)

        __props__.__dict__["asset_source_ids"] = asset_source_ids
        __props__.__dict__["asset_type"] = asset_type
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["compute"] = compute
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["external_asset_key"] = external_asset_key
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["inventory_id"] = inventory_id
        __props__.__dict__["source_key"] = source_key
        __props__.__dict__["state"] = state
        __props__.__dict__["system_tags"] = system_tags
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        __props__.__dict__["vm"] = vm
        __props__.__dict__["vmware_vcenter"] = vmware_vcenter
        __props__.__dict__["vmware_vm"] = vmware_vm
        return Asset(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assetSourceIds")
    def asset_source_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "asset_source_ids")

    @property
    @pulumi.getter(name="assetType")
    def asset_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "asset_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def compute(self) -> pulumi.Output[Optional['outputs.AssetCompute']]:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalAssetKey")
    def external_asset_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "external_asset_key")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="inventoryId")
    def inventory_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "inventory_id")

    @property
    @pulumi.getter(name="sourceKey")
    def source_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_key")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def vm(self) -> pulumi.Output[Optional['outputs.AssetVm']]:
        return pulumi.get(self, "vm")

    @property
    @pulumi.getter(name="vmwareVcenter")
    def vmware_vcenter(self) -> pulumi.Output[Optional['outputs.AssetVmwareVcenter']]:
        return pulumi.get(self, "vmware_vcenter")

    @property
    @pulumi.getter(name="vmwareVm")
    def vmware_vm(self) -> pulumi.Output[Optional['outputs.AssetVmwareVm']]:
        return pulumi.get(self, "vmware_vm")

