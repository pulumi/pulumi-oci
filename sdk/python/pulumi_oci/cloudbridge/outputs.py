# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AgentPluginList',
    'AssetCompute',
    'AssetComputeDisk',
    'AssetComputeGpuDevice',
    'AssetComputeNic',
    'AssetComputeNvdimm',
    'AssetComputeNvdimmController',
    'AssetComputeScsiController',
    'AssetSourceDiscoveryCredentials',
    'AssetSourceReplicationCredentials',
    'AssetVm',
    'AssetVmwareVcenter',
    'AssetVmwareVm',
    'AssetVmwareVmCustomerTag',
    'GetAgentDependenciesAgentDependencyCollectionResult',
    'GetAgentDependenciesAgentDependencyCollectionItemResult',
    'GetAgentDependenciesFilterResult',
    'GetAgentPluginListResult',
    'GetAgentsAgentCollectionResult',
    'GetAgentsAgentCollectionItemResult',
    'GetAgentsAgentCollectionItemPluginListResult',
    'GetAgentsFilterResult',
    'GetApplianceImageItemResult',
    'GetApplianceImagesApplianceImageCollectionResult',
    'GetApplianceImagesApplianceImageCollectionItemResult',
    'GetApplianceImagesFilterResult',
    'GetAssetComputeResult',
    'GetAssetComputeDiskResult',
    'GetAssetComputeGpuDeviceResult',
    'GetAssetComputeNicResult',
    'GetAssetComputeNvdimmResult',
    'GetAssetComputeNvdimmControllerResult',
    'GetAssetComputeScsiControllerResult',
    'GetAssetSourceDiscoveryCredentialResult',
    'GetAssetSourceReplicationCredentialResult',
    'GetAssetSourcesAssetSourceCollectionResult',
    'GetAssetSourcesAssetSourceCollectionItemResult',
    'GetAssetSourcesAssetSourceCollectionItemDiscoveryCredentialResult',
    'GetAssetSourcesAssetSourceCollectionItemReplicationCredentialResult',
    'GetAssetSourcesFilterResult',
    'GetAssetVmResult',
    'GetAssetVmwareVcenterResult',
    'GetAssetVmwareVmResult',
    'GetAssetVmwareVmCustomerTagResult',
    'GetAssetsAssetCollectionResult',
    'GetAssetsAssetCollectionItemResult',
    'GetAssetsAssetCollectionItemComputeResult',
    'GetAssetsAssetCollectionItemComputeDiskResult',
    'GetAssetsAssetCollectionItemComputeGpuDeviceResult',
    'GetAssetsAssetCollectionItemComputeNicResult',
    'GetAssetsAssetCollectionItemComputeNvdimmResult',
    'GetAssetsAssetCollectionItemComputeNvdimmControllerResult',
    'GetAssetsAssetCollectionItemComputeScsiControllerResult',
    'GetAssetsAssetCollectionItemVmResult',
    'GetAssetsAssetCollectionItemVmwareVcenterResult',
    'GetAssetsAssetCollectionItemVmwareVmResult',
    'GetAssetsAssetCollectionItemVmwareVmCustomerTagResult',
    'GetAssetsFilterResult',
    'GetDiscoverySchedulesDiscoveryScheduleCollectionResult',
    'GetDiscoverySchedulesDiscoveryScheduleCollectionItemResult',
    'GetDiscoverySchedulesFilterResult',
    'GetEnvironmentsEnvironmentCollectionResult',
    'GetEnvironmentsEnvironmentCollectionItemResult',
    'GetEnvironmentsFilterResult',
    'GetInventoriesFilterResult',
    'GetInventoriesInventoryCollectionResult',
    'GetInventoriesInventoryCollectionItemResult',
]

@pulumi.output_type
class AgentPluginList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentId":
            suggest = "agent_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "pluginVersion":
            suggest = "plugin_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentPluginList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentPluginList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentPluginList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 lifecycle_details: Optional[str] = None,
                 name: Optional[str] = None,
                 plugin_version: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plugin_version is not None:
            pulumi.set(__self__, "plugin_version", plugin_version)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pluginVersion")
    def plugin_version(self) -> Optional[str]:
        return pulumi.get(self, "plugin_version")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class AssetCompute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectedNetworks":
            suggest = "connected_networks"
        elif key == "coresCount":
            suggest = "cores_count"
        elif key == "cpuModel":
            suggest = "cpu_model"
        elif key == "disksCount":
            suggest = "disks_count"
        elif key == "dnsName":
            suggest = "dns_name"
        elif key == "gpuDevices":
            suggest = "gpu_devices"
        elif key == "gpuDevicesCount":
            suggest = "gpu_devices_count"
        elif key == "guestState":
            suggest = "guest_state"
        elif key == "hardwareVersion":
            suggest = "hardware_version"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "isPmemEnabled":
            suggest = "is_pmem_enabled"
        elif key == "isTpmEnabled":
            suggest = "is_tpm_enabled"
        elif key == "latencySensitivity":
            suggest = "latency_sensitivity"
        elif key == "memoryInMbs":
            suggest = "memory_in_mbs"
        elif key == "nicsCount":
            suggest = "nics_count"
        elif key == "nvdimmController":
            suggest = "nvdimm_controller"
        elif key == "operatingSystem":
            suggest = "operating_system"
        elif key == "operatingSystemVersion":
            suggest = "operating_system_version"
        elif key == "pmemInMbs":
            suggest = "pmem_in_mbs"
        elif key == "powerState":
            suggest = "power_state"
        elif key == "primaryIp":
            suggest = "primary_ip"
        elif key == "scsiController":
            suggest = "scsi_controller"
        elif key == "storageProvisionedInMbs":
            suggest = "storage_provisioned_in_mbs"
        elif key == "threadsPerCoreCount":
            suggest = "threads_per_core_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetCompute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetCompute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetCompute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connected_networks: Optional[int] = None,
                 cores_count: Optional[int] = None,
                 cpu_model: Optional[str] = None,
                 description: Optional[str] = None,
                 disks: Optional[Sequence['outputs.AssetComputeDisk']] = None,
                 disks_count: Optional[int] = None,
                 dns_name: Optional[str] = None,
                 firmware: Optional[str] = None,
                 gpu_devices: Optional[Sequence['outputs.AssetComputeGpuDevice']] = None,
                 gpu_devices_count: Optional[int] = None,
                 guest_state: Optional[str] = None,
                 hardware_version: Optional[str] = None,
                 host_name: Optional[str] = None,
                 is_pmem_enabled: Optional[bool] = None,
                 is_tpm_enabled: Optional[bool] = None,
                 latency_sensitivity: Optional[str] = None,
                 memory_in_mbs: Optional[str] = None,
                 nics: Optional[Sequence['outputs.AssetComputeNic']] = None,
                 nics_count: Optional[int] = None,
                 nvdimm_controller: Optional['outputs.AssetComputeNvdimmController'] = None,
                 nvdimms: Optional[Sequence['outputs.AssetComputeNvdimm']] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None,
                 pmem_in_mbs: Optional[str] = None,
                 power_state: Optional[str] = None,
                 primary_ip: Optional[str] = None,
                 scsi_controller: Optional['outputs.AssetComputeScsiController'] = None,
                 storage_provisioned_in_mbs: Optional[str] = None,
                 threads_per_core_count: Optional[int] = None):
        if connected_networks is not None:
            pulumi.set(__self__, "connected_networks", connected_networks)
        if cores_count is not None:
            pulumi.set(__self__, "cores_count", cores_count)
        if cpu_model is not None:
            pulumi.set(__self__, "cpu_model", cpu_model)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if disks_count is not None:
            pulumi.set(__self__, "disks_count", disks_count)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if gpu_devices is not None:
            pulumi.set(__self__, "gpu_devices", gpu_devices)
        if gpu_devices_count is not None:
            pulumi.set(__self__, "gpu_devices_count", gpu_devices_count)
        if guest_state is not None:
            pulumi.set(__self__, "guest_state", guest_state)
        if hardware_version is not None:
            pulumi.set(__self__, "hardware_version", hardware_version)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if is_pmem_enabled is not None:
            pulumi.set(__self__, "is_pmem_enabled", is_pmem_enabled)
        if is_tpm_enabled is not None:
            pulumi.set(__self__, "is_tpm_enabled", is_tpm_enabled)
        if latency_sensitivity is not None:
            pulumi.set(__self__, "latency_sensitivity", latency_sensitivity)
        if memory_in_mbs is not None:
            pulumi.set(__self__, "memory_in_mbs", memory_in_mbs)
        if nics is not None:
            pulumi.set(__self__, "nics", nics)
        if nics_count is not None:
            pulumi.set(__self__, "nics_count", nics_count)
        if nvdimm_controller is not None:
            pulumi.set(__self__, "nvdimm_controller", nvdimm_controller)
        if nvdimms is not None:
            pulumi.set(__self__, "nvdimms", nvdimms)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)
        if pmem_in_mbs is not None:
            pulumi.set(__self__, "pmem_in_mbs", pmem_in_mbs)
        if power_state is not None:
            pulumi.set(__self__, "power_state", power_state)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if scsi_controller is not None:
            pulumi.set(__self__, "scsi_controller", scsi_controller)
        if storage_provisioned_in_mbs is not None:
            pulumi.set(__self__, "storage_provisioned_in_mbs", storage_provisioned_in_mbs)
        if threads_per_core_count is not None:
            pulumi.set(__self__, "threads_per_core_count", threads_per_core_count)

    @property
    @pulumi.getter(name="connectedNetworks")
    def connected_networks(self) -> Optional[int]:
        return pulumi.get(self, "connected_networks")

    @property
    @pulumi.getter(name="coresCount")
    def cores_count(self) -> Optional[int]:
        return pulumi.get(self, "cores_count")

    @property
    @pulumi.getter(name="cpuModel")
    def cpu_model(self) -> Optional[str]:
        return pulumi.get(self, "cpu_model")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def disks(self) -> Optional[Sequence['outputs.AssetComputeDisk']]:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter(name="disksCount")
    def disks_count(self) -> Optional[int]:
        return pulumi.get(self, "disks_count")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[str]:
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter
    def firmware(self) -> Optional[str]:
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="gpuDevices")
    def gpu_devices(self) -> Optional[Sequence['outputs.AssetComputeGpuDevice']]:
        return pulumi.get(self, "gpu_devices")

    @property
    @pulumi.getter(name="gpuDevicesCount")
    def gpu_devices_count(self) -> Optional[int]:
        return pulumi.get(self, "gpu_devices_count")

    @property
    @pulumi.getter(name="guestState")
    def guest_state(self) -> Optional[str]:
        return pulumi.get(self, "guest_state")

    @property
    @pulumi.getter(name="hardwareVersion")
    def hardware_version(self) -> Optional[str]:
        return pulumi.get(self, "hardware_version")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="isPmemEnabled")
    def is_pmem_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pmem_enabled")

    @property
    @pulumi.getter(name="isTpmEnabled")
    def is_tpm_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_tpm_enabled")

    @property
    @pulumi.getter(name="latencySensitivity")
    def latency_sensitivity(self) -> Optional[str]:
        return pulumi.get(self, "latency_sensitivity")

    @property
    @pulumi.getter(name="memoryInMbs")
    def memory_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "memory_in_mbs")

    @property
    @pulumi.getter
    def nics(self) -> Optional[Sequence['outputs.AssetComputeNic']]:
        return pulumi.get(self, "nics")

    @property
    @pulumi.getter(name="nicsCount")
    def nics_count(self) -> Optional[int]:
        return pulumi.get(self, "nics_count")

    @property
    @pulumi.getter(name="nvdimmController")
    def nvdimm_controller(self) -> Optional['outputs.AssetComputeNvdimmController']:
        return pulumi.get(self, "nvdimm_controller")

    @property
    @pulumi.getter
    def nvdimms(self) -> Optional[Sequence['outputs.AssetComputeNvdimm']]:
        return pulumi.get(self, "nvdimms")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")

    @property
    @pulumi.getter(name="pmemInMbs")
    def pmem_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "pmem_in_mbs")

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> Optional[str]:
        return pulumi.get(self, "power_state")

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[str]:
        return pulumi.get(self, "primary_ip")

    @property
    @pulumi.getter(name="scsiController")
    def scsi_controller(self) -> Optional['outputs.AssetComputeScsiController']:
        return pulumi.get(self, "scsi_controller")

    @property
    @pulumi.getter(name="storageProvisionedInMbs")
    def storage_provisioned_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "storage_provisioned_in_mbs")

    @property
    @pulumi.getter(name="threadsPerCoreCount")
    def threads_per_core_count(self) -> Optional[int]:
        return pulumi.get(self, "threads_per_core_count")


@pulumi.output_type
class AssetComputeDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootOrder":
            suggest = "boot_order"
        elif key == "persistentMode":
            suggest = "persistent_mode"
        elif key == "sizeInMbs":
            suggest = "size_in_mbs"
        elif key == "uuidLun":
            suggest = "uuid_lun"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetComputeDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetComputeDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetComputeDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_order: Optional[int] = None,
                 location: Optional[str] = None,
                 name: Optional[str] = None,
                 persistent_mode: Optional[str] = None,
                 size_in_mbs: Optional[str] = None,
                 uuid: Optional[str] = None,
                 uuid_lun: Optional[str] = None):
        if boot_order is not None:
            pulumi.set(__self__, "boot_order", boot_order)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if persistent_mode is not None:
            pulumi.set(__self__, "persistent_mode", persistent_mode)
        if size_in_mbs is not None:
            pulumi.set(__self__, "size_in_mbs", size_in_mbs)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if uuid_lun is not None:
            pulumi.set(__self__, "uuid_lun", uuid_lun)

    @property
    @pulumi.getter(name="bootOrder")
    def boot_order(self) -> Optional[int]:
        return pulumi.get(self, "boot_order")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="persistentMode")
    def persistent_mode(self) -> Optional[str]:
        return pulumi.get(self, "persistent_mode")

    @property
    @pulumi.getter(name="sizeInMbs")
    def size_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_mbs")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="uuidLun")
    def uuid_lun(self) -> Optional[str]:
        return pulumi.get(self, "uuid_lun")


@pulumi.output_type
class AssetComputeGpuDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coresCount":
            suggest = "cores_count"
        elif key == "memoryInMbs":
            suggest = "memory_in_mbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetComputeGpuDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetComputeGpuDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetComputeGpuDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cores_count: Optional[int] = None,
                 description: Optional[str] = None,
                 manufacturer: Optional[str] = None,
                 memory_in_mbs: Optional[str] = None,
                 name: Optional[str] = None):
        if cores_count is not None:
            pulumi.set(__self__, "cores_count", cores_count)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if manufacturer is not None:
            pulumi.set(__self__, "manufacturer", manufacturer)
        if memory_in_mbs is not None:
            pulumi.set(__self__, "memory_in_mbs", memory_in_mbs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="coresCount")
    def cores_count(self) -> Optional[int]:
        return pulumi.get(self, "cores_count")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def manufacturer(self) -> Optional[str]:
        return pulumi.get(self, "manufacturer")

    @property
    @pulumi.getter(name="memoryInMbs")
    def memory_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "memory_in_mbs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class AssetComputeNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "macAddressType":
            suggest = "mac_address_type"
        elif key == "networkName":
            suggest = "network_name"
        elif key == "switchName":
            suggest = "switch_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetComputeNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetComputeNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetComputeNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_addresses: Optional[Sequence[str]] = None,
                 label: Optional[str] = None,
                 mac_address: Optional[str] = None,
                 mac_address_type: Optional[str] = None,
                 network_name: Optional[str] = None,
                 switch_name: Optional[str] = None):
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_type is not None:
            pulumi.set(__self__, "mac_address_type", mac_address_type)
        if network_name is not None:
            pulumi.set(__self__, "network_name", network_name)
        if switch_name is not None:
            pulumi.set(__self__, "switch_name", switch_name)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="macAddressType")
    def mac_address_type(self) -> Optional[str]:
        return pulumi.get(self, "mac_address_type")

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> Optional[str]:
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter(name="switchName")
    def switch_name(self) -> Optional[str]:
        return pulumi.get(self, "switch_name")


@pulumi.output_type
class AssetComputeNvdimm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controllerKey":
            suggest = "controller_key"
        elif key == "unitNumber":
            suggest = "unit_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetComputeNvdimm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetComputeNvdimm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetComputeNvdimm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 controller_key: Optional[int] = None,
                 label: Optional[str] = None,
                 unit_number: Optional[int] = None):
        if controller_key is not None:
            pulumi.set(__self__, "controller_key", controller_key)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if unit_number is not None:
            pulumi.set(__self__, "unit_number", unit_number)

    @property
    @pulumi.getter(name="controllerKey")
    def controller_key(self) -> Optional[int]:
        return pulumi.get(self, "controller_key")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> Optional[int]:
        return pulumi.get(self, "unit_number")


@pulumi.output_type
class AssetComputeNvdimmController(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "busNumber":
            suggest = "bus_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetComputeNvdimmController. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetComputeNvdimmController.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetComputeNvdimmController.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bus_number: Optional[int] = None,
                 label: Optional[str] = None):
        if bus_number is not None:
            pulumi.set(__self__, "bus_number", bus_number)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> Optional[int]:
        return pulumi.get(self, "bus_number")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")


@pulumi.output_type
class AssetComputeScsiController(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sharedBus":
            suggest = "shared_bus"
        elif key == "unitNumber":
            suggest = "unit_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetComputeScsiController. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetComputeScsiController.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetComputeScsiController.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label: Optional[str] = None,
                 shared_bus: Optional[str] = None,
                 unit_number: Optional[int] = None):
        if label is not None:
            pulumi.set(__self__, "label", label)
        if shared_bus is not None:
            pulumi.set(__self__, "shared_bus", shared_bus)
        if unit_number is not None:
            pulumi.set(__self__, "unit_number", unit_number)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="sharedBus")
    def shared_bus(self) -> Optional[str]:
        return pulumi.get(self, "shared_bus")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> Optional[int]:
        return pulumi.get(self, "unit_number")


@pulumi.output_type
class AssetSourceDiscoveryCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretId":
            suggest = "secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetSourceDiscoveryCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetSourceDiscoveryCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetSourceDiscoveryCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_id: str,
                 type: str):
        pulumi.set(__self__, "secret_id", secret_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> str:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class AssetSourceReplicationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretId":
            suggest = "secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetSourceReplicationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetSourceReplicationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetSourceReplicationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_id: str,
                 type: str):
        pulumi.set(__self__, "secret_id", secret_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> str:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class AssetVm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hypervisorHost":
            suggest = "hypervisor_host"
        elif key == "hypervisorVendor":
            suggest = "hypervisor_vendor"
        elif key == "hypervisorVersion":
            suggest = "hypervisor_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetVm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetVm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetVm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hypervisor_host: Optional[str] = None,
                 hypervisor_vendor: Optional[str] = None,
                 hypervisor_version: Optional[str] = None):
        if hypervisor_host is not None:
            pulumi.set(__self__, "hypervisor_host", hypervisor_host)
        if hypervisor_vendor is not None:
            pulumi.set(__self__, "hypervisor_vendor", hypervisor_vendor)
        if hypervisor_version is not None:
            pulumi.set(__self__, "hypervisor_version", hypervisor_version)

    @property
    @pulumi.getter(name="hypervisorHost")
    def hypervisor_host(self) -> Optional[str]:
        return pulumi.get(self, "hypervisor_host")

    @property
    @pulumi.getter(name="hypervisorVendor")
    def hypervisor_vendor(self) -> Optional[str]:
        return pulumi.get(self, "hypervisor_vendor")

    @property
    @pulumi.getter(name="hypervisorVersion")
    def hypervisor_version(self) -> Optional[str]:
        return pulumi.get(self, "hypervisor_version")


@pulumi.output_type
class AssetVmwareVcenter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataCenter":
            suggest = "data_center"
        elif key == "vcenterKey":
            suggest = "vcenter_key"
        elif key == "vcenterVersion":
            suggest = "vcenter_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetVmwareVcenter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetVmwareVcenter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetVmwareVcenter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_center: Optional[str] = None,
                 vcenter_key: Optional[str] = None,
                 vcenter_version: Optional[str] = None):
        if data_center is not None:
            pulumi.set(__self__, "data_center", data_center)
        if vcenter_key is not None:
            pulumi.set(__self__, "vcenter_key", vcenter_key)
        if vcenter_version is not None:
            pulumi.set(__self__, "vcenter_version", vcenter_version)

    @property
    @pulumi.getter(name="dataCenter")
    def data_center(self) -> Optional[str]:
        return pulumi.get(self, "data_center")

    @property
    @pulumi.getter(name="vcenterKey")
    def vcenter_key(self) -> Optional[str]:
        return pulumi.get(self, "vcenter_key")

    @property
    @pulumi.getter(name="vcenterVersion")
    def vcenter_version(self) -> Optional[str]:
        return pulumi.get(self, "vcenter_version")


@pulumi.output_type
class AssetVmwareVm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerFields":
            suggest = "customer_fields"
        elif key == "customerTags":
            suggest = "customer_tags"
        elif key == "faultToleranceBandwidth":
            suggest = "fault_tolerance_bandwidth"
        elif key == "faultToleranceSecondaryLatency":
            suggest = "fault_tolerance_secondary_latency"
        elif key == "faultToleranceState":
            suggest = "fault_tolerance_state"
        elif key == "instanceUuid":
            suggest = "instance_uuid"
        elif key == "isDisksCbtEnabled":
            suggest = "is_disks_cbt_enabled"
        elif key == "isDisksUuidEnabled":
            suggest = "is_disks_uuid_enabled"
        elif key == "vmwareToolsStatus":
            suggest = "vmware_tools_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssetVmwareVm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssetVmwareVm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssetVmwareVm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster: Optional[str] = None,
                 customer_fields: Optional[Sequence[str]] = None,
                 customer_tags: Optional[Sequence['outputs.AssetVmwareVmCustomerTag']] = None,
                 fault_tolerance_bandwidth: Optional[int] = None,
                 fault_tolerance_secondary_latency: Optional[int] = None,
                 fault_tolerance_state: Optional[str] = None,
                 instance_uuid: Optional[str] = None,
                 is_disks_cbt_enabled: Optional[bool] = None,
                 is_disks_uuid_enabled: Optional[bool] = None,
                 path: Optional[str] = None,
                 vmware_tools_status: Optional[str] = None):
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if customer_fields is not None:
            pulumi.set(__self__, "customer_fields", customer_fields)
        if customer_tags is not None:
            pulumi.set(__self__, "customer_tags", customer_tags)
        if fault_tolerance_bandwidth is not None:
            pulumi.set(__self__, "fault_tolerance_bandwidth", fault_tolerance_bandwidth)
        if fault_tolerance_secondary_latency is not None:
            pulumi.set(__self__, "fault_tolerance_secondary_latency", fault_tolerance_secondary_latency)
        if fault_tolerance_state is not None:
            pulumi.set(__self__, "fault_tolerance_state", fault_tolerance_state)
        if instance_uuid is not None:
            pulumi.set(__self__, "instance_uuid", instance_uuid)
        if is_disks_cbt_enabled is not None:
            pulumi.set(__self__, "is_disks_cbt_enabled", is_disks_cbt_enabled)
        if is_disks_uuid_enabled is not None:
            pulumi.set(__self__, "is_disks_uuid_enabled", is_disks_uuid_enabled)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if vmware_tools_status is not None:
            pulumi.set(__self__, "vmware_tools_status", vmware_tools_status)

    @property
    @pulumi.getter
    def cluster(self) -> Optional[str]:
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter(name="customerFields")
    def customer_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "customer_fields")

    @property
    @pulumi.getter(name="customerTags")
    def customer_tags(self) -> Optional[Sequence['outputs.AssetVmwareVmCustomerTag']]:
        return pulumi.get(self, "customer_tags")

    @property
    @pulumi.getter(name="faultToleranceBandwidth")
    def fault_tolerance_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "fault_tolerance_bandwidth")

    @property
    @pulumi.getter(name="faultToleranceSecondaryLatency")
    def fault_tolerance_secondary_latency(self) -> Optional[int]:
        return pulumi.get(self, "fault_tolerance_secondary_latency")

    @property
    @pulumi.getter(name="faultToleranceState")
    def fault_tolerance_state(self) -> Optional[str]:
        return pulumi.get(self, "fault_tolerance_state")

    @property
    @pulumi.getter(name="instanceUuid")
    def instance_uuid(self) -> Optional[str]:
        return pulumi.get(self, "instance_uuid")

    @property
    @pulumi.getter(name="isDisksCbtEnabled")
    def is_disks_cbt_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disks_cbt_enabled")

    @property
    @pulumi.getter(name="isDisksUuidEnabled")
    def is_disks_uuid_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disks_uuid_enabled")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="vmwareToolsStatus")
    def vmware_tools_status(self) -> Optional[str]:
        return pulumi.get(self, "vmware_tools_status")


@pulumi.output_type
class AssetVmwareVmCustomerTag(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAgentDependenciesAgentDependencyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAgentDependenciesAgentDependencyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAgentDependenciesAgentDependencyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAgentDependenciesAgentDependencyCollectionItemResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 checksum: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 dependency_name: Optional[str] = None,
                 dependency_version: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 e_tag: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if dependency_name is not None:
            pulumi.set(__self__, "dependency_name", dependency_name)
        if dependency_version is not None:
            pulumi.set(__self__, "dependency_version", dependency_version)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if e_tag is not None:
            pulumi.set(__self__, "e_tag", e_tag)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def checksum(self) -> Optional[str]:
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="dependencyName")
    def dependency_name(self) -> Optional[str]:
        return pulumi.get(self, "dependency_name")

    @property
    @pulumi.getter(name="dependencyVersion")
    def dependency_version(self) -> Optional[str]:
        return pulumi.get(self, "dependency_version")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="eTag")
    def e_tag(self) -> Optional[str]:
        return pulumi.get(self, "e_tag")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetAgentDependenciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAgentPluginListResult(dict):
    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 lifecycle_details: Optional[str] = None,
                 name: Optional[str] = None,
                 plugin_version: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plugin_version is not None:
            pulumi.set(__self__, "plugin_version", plugin_version)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pluginVersion")
    def plugin_version(self) -> Optional[str]:
        return pulumi.get(self, "plugin_version")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAgentsAgentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAgentsAgentCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAgentsAgentCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAgentsAgentCollectionItemResult(dict):
    def __init__(__self__, *,
                 agent_pub_key: Optional[str] = None,
                 agent_type: Optional[str] = None,
                 agent_version: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 environment_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 heart_beat_status: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 os_version: Optional[str] = None,
                 plugin_lists: Optional[Sequence['outputs.GetAgentsAgentCollectionItemPluginListResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_expire_agent_key_in_ms: Optional[str] = None,
                 time_last_sync_received: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if agent_pub_key is not None:
            pulumi.set(__self__, "agent_pub_key", agent_pub_key)
        if agent_type is not None:
            pulumi.set(__self__, "agent_type", agent_type)
        if agent_version is not None:
            pulumi.set(__self__, "agent_version", agent_version)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if heart_beat_status is not None:
            pulumi.set(__self__, "heart_beat_status", heart_beat_status)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if plugin_lists is not None:
            pulumi.set(__self__, "plugin_lists", plugin_lists)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_expire_agent_key_in_ms is not None:
            pulumi.set(__self__, "time_expire_agent_key_in_ms", time_expire_agent_key_in_ms)
        if time_last_sync_received is not None:
            pulumi.set(__self__, "time_last_sync_received", time_last_sync_received)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="agentPubKey")
    def agent_pub_key(self) -> Optional[str]:
        return pulumi.get(self, "agent_pub_key")

    @property
    @pulumi.getter(name="agentType")
    def agent_type(self) -> Optional[str]:
        return pulumi.get(self, "agent_type")

    @property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> Optional[str]:
        return pulumi.get(self, "agent_version")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[str]:
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="heartBeatStatus")
    def heart_beat_status(self) -> Optional[str]:
        return pulumi.get(self, "heart_beat_status")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[str]:
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter(name="pluginLists")
    def plugin_lists(self) -> Optional[Sequence['outputs.GetAgentsAgentCollectionItemPluginListResult']]:
        return pulumi.get(self, "plugin_lists")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpireAgentKeyInMs")
    def time_expire_agent_key_in_ms(self) -> Optional[str]:
        return pulumi.get(self, "time_expire_agent_key_in_ms")

    @property
    @pulumi.getter(name="timeLastSyncReceived")
    def time_last_sync_received(self) -> Optional[str]:
        return pulumi.get(self, "time_last_sync_received")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAgentsAgentCollectionItemPluginListResult(dict):
    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 lifecycle_details: Optional[str] = None,
                 name: Optional[str] = None,
                 plugin_version: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plugin_version is not None:
            pulumi.set(__self__, "plugin_version", plugin_version)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pluginVersion")
    def plugin_version(self) -> Optional[str]:
        return pulumi.get(self, "plugin_version")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAgentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetApplianceImageItemResult(dict):
    def __init__(__self__, *,
                 checksum: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 download_url: Optional[str] = None,
                 file_name: Optional[str] = None,
                 format: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 platform: Optional[str] = None,
                 size_in_mbs: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if download_url is not None:
            pulumi.set(__self__, "download_url", download_url)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if size_in_mbs is not None:
            pulumi.set(__self__, "size_in_mbs", size_in_mbs)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[str]:
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="downloadUrl")
    def download_url(self) -> Optional[str]:
        return pulumi.get(self, "download_url")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def platform(self) -> Optional[str]:
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sizeInMbs")
    def size_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_mbs")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetApplianceImagesApplianceImageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetApplianceImagesApplianceImageCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetApplianceImagesApplianceImageCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetApplianceImagesApplianceImageCollectionItemResult(dict):
    def __init__(__self__, *,
                 checksum: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 download_url: Optional[str] = None,
                 file_name: Optional[str] = None,
                 format: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 platform: Optional[str] = None,
                 size_in_mbs: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if download_url is not None:
            pulumi.set(__self__, "download_url", download_url)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if size_in_mbs is not None:
            pulumi.set(__self__, "size_in_mbs", size_in_mbs)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def checksum(self) -> Optional[str]:
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="downloadUrl")
    def download_url(self) -> Optional[str]:
        return pulumi.get(self, "download_url")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def platform(self) -> Optional[str]:
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sizeInMbs")
    def size_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_mbs")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetApplianceImagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAssetComputeResult(dict):
    def __init__(__self__, *,
                 connected_networks: Optional[int] = None,
                 cores_count: Optional[int] = None,
                 cpu_model: Optional[str] = None,
                 description: Optional[str] = None,
                 disks: Optional[Sequence['outputs.GetAssetComputeDiskResult']] = None,
                 disks_count: Optional[int] = None,
                 dns_name: Optional[str] = None,
                 firmware: Optional[str] = None,
                 gpu_devices: Optional[Sequence['outputs.GetAssetComputeGpuDeviceResult']] = None,
                 gpu_devices_count: Optional[int] = None,
                 guest_state: Optional[str] = None,
                 hardware_version: Optional[str] = None,
                 host_name: Optional[str] = None,
                 is_pmem_enabled: Optional[bool] = None,
                 is_tpm_enabled: Optional[bool] = None,
                 latency_sensitivity: Optional[str] = None,
                 memory_in_mbs: Optional[str] = None,
                 nics: Optional[Sequence['outputs.GetAssetComputeNicResult']] = None,
                 nics_count: Optional[int] = None,
                 nvdimm_controllers: Optional[Sequence['outputs.GetAssetComputeNvdimmControllerResult']] = None,
                 nvdimms: Optional[Sequence['outputs.GetAssetComputeNvdimmResult']] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None,
                 pmem_in_mbs: Optional[str] = None,
                 power_state: Optional[str] = None,
                 primary_ip: Optional[str] = None,
                 scsi_controllers: Optional[Sequence['outputs.GetAssetComputeScsiControllerResult']] = None,
                 storage_provisioned_in_mbs: Optional[str] = None,
                 threads_per_core_count: Optional[int] = None):
        if connected_networks is not None:
            pulumi.set(__self__, "connected_networks", connected_networks)
        if cores_count is not None:
            pulumi.set(__self__, "cores_count", cores_count)
        if cpu_model is not None:
            pulumi.set(__self__, "cpu_model", cpu_model)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if disks_count is not None:
            pulumi.set(__self__, "disks_count", disks_count)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if gpu_devices is not None:
            pulumi.set(__self__, "gpu_devices", gpu_devices)
        if gpu_devices_count is not None:
            pulumi.set(__self__, "gpu_devices_count", gpu_devices_count)
        if guest_state is not None:
            pulumi.set(__self__, "guest_state", guest_state)
        if hardware_version is not None:
            pulumi.set(__self__, "hardware_version", hardware_version)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if is_pmem_enabled is not None:
            pulumi.set(__self__, "is_pmem_enabled", is_pmem_enabled)
        if is_tpm_enabled is not None:
            pulumi.set(__self__, "is_tpm_enabled", is_tpm_enabled)
        if latency_sensitivity is not None:
            pulumi.set(__self__, "latency_sensitivity", latency_sensitivity)
        if memory_in_mbs is not None:
            pulumi.set(__self__, "memory_in_mbs", memory_in_mbs)
        if nics is not None:
            pulumi.set(__self__, "nics", nics)
        if nics_count is not None:
            pulumi.set(__self__, "nics_count", nics_count)
        if nvdimm_controllers is not None:
            pulumi.set(__self__, "nvdimm_controllers", nvdimm_controllers)
        if nvdimms is not None:
            pulumi.set(__self__, "nvdimms", nvdimms)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)
        if pmem_in_mbs is not None:
            pulumi.set(__self__, "pmem_in_mbs", pmem_in_mbs)
        if power_state is not None:
            pulumi.set(__self__, "power_state", power_state)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if scsi_controllers is not None:
            pulumi.set(__self__, "scsi_controllers", scsi_controllers)
        if storage_provisioned_in_mbs is not None:
            pulumi.set(__self__, "storage_provisioned_in_mbs", storage_provisioned_in_mbs)
        if threads_per_core_count is not None:
            pulumi.set(__self__, "threads_per_core_count", threads_per_core_count)

    @property
    @pulumi.getter(name="connectedNetworks")
    def connected_networks(self) -> Optional[int]:
        return pulumi.get(self, "connected_networks")

    @property
    @pulumi.getter(name="coresCount")
    def cores_count(self) -> Optional[int]:
        return pulumi.get(self, "cores_count")

    @property
    @pulumi.getter(name="cpuModel")
    def cpu_model(self) -> Optional[str]:
        return pulumi.get(self, "cpu_model")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def disks(self) -> Optional[Sequence['outputs.GetAssetComputeDiskResult']]:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter(name="disksCount")
    def disks_count(self) -> Optional[int]:
        return pulumi.get(self, "disks_count")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[str]:
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter
    def firmware(self) -> Optional[str]:
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="gpuDevices")
    def gpu_devices(self) -> Optional[Sequence['outputs.GetAssetComputeGpuDeviceResult']]:
        return pulumi.get(self, "gpu_devices")

    @property
    @pulumi.getter(name="gpuDevicesCount")
    def gpu_devices_count(self) -> Optional[int]:
        return pulumi.get(self, "gpu_devices_count")

    @property
    @pulumi.getter(name="guestState")
    def guest_state(self) -> Optional[str]:
        return pulumi.get(self, "guest_state")

    @property
    @pulumi.getter(name="hardwareVersion")
    def hardware_version(self) -> Optional[str]:
        return pulumi.get(self, "hardware_version")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="isPmemEnabled")
    def is_pmem_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pmem_enabled")

    @property
    @pulumi.getter(name="isTpmEnabled")
    def is_tpm_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_tpm_enabled")

    @property
    @pulumi.getter(name="latencySensitivity")
    def latency_sensitivity(self) -> Optional[str]:
        return pulumi.get(self, "latency_sensitivity")

    @property
    @pulumi.getter(name="memoryInMbs")
    def memory_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "memory_in_mbs")

    @property
    @pulumi.getter
    def nics(self) -> Optional[Sequence['outputs.GetAssetComputeNicResult']]:
        return pulumi.get(self, "nics")

    @property
    @pulumi.getter(name="nicsCount")
    def nics_count(self) -> Optional[int]:
        return pulumi.get(self, "nics_count")

    @property
    @pulumi.getter(name="nvdimmControllers")
    def nvdimm_controllers(self) -> Optional[Sequence['outputs.GetAssetComputeNvdimmControllerResult']]:
        return pulumi.get(self, "nvdimm_controllers")

    @property
    @pulumi.getter
    def nvdimms(self) -> Optional[Sequence['outputs.GetAssetComputeNvdimmResult']]:
        return pulumi.get(self, "nvdimms")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")

    @property
    @pulumi.getter(name="pmemInMbs")
    def pmem_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "pmem_in_mbs")

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> Optional[str]:
        return pulumi.get(self, "power_state")

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[str]:
        return pulumi.get(self, "primary_ip")

    @property
    @pulumi.getter(name="scsiControllers")
    def scsi_controllers(self) -> Optional[Sequence['outputs.GetAssetComputeScsiControllerResult']]:
        return pulumi.get(self, "scsi_controllers")

    @property
    @pulumi.getter(name="storageProvisionedInMbs")
    def storage_provisioned_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "storage_provisioned_in_mbs")

    @property
    @pulumi.getter(name="threadsPerCoreCount")
    def threads_per_core_count(self) -> Optional[int]:
        return pulumi.get(self, "threads_per_core_count")


@pulumi.output_type
class GetAssetComputeDiskResult(dict):
    def __init__(__self__, *,
                 boot_order: Optional[int] = None,
                 location: Optional[str] = None,
                 name: Optional[str] = None,
                 persistent_mode: Optional[str] = None,
                 size_in_mbs: Optional[str] = None,
                 uuid: Optional[str] = None,
                 uuid_lun: Optional[str] = None):
        if boot_order is not None:
            pulumi.set(__self__, "boot_order", boot_order)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if persistent_mode is not None:
            pulumi.set(__self__, "persistent_mode", persistent_mode)
        if size_in_mbs is not None:
            pulumi.set(__self__, "size_in_mbs", size_in_mbs)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if uuid_lun is not None:
            pulumi.set(__self__, "uuid_lun", uuid_lun)

    @property
    @pulumi.getter(name="bootOrder")
    def boot_order(self) -> Optional[int]:
        return pulumi.get(self, "boot_order")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="persistentMode")
    def persistent_mode(self) -> Optional[str]:
        return pulumi.get(self, "persistent_mode")

    @property
    @pulumi.getter(name="sizeInMbs")
    def size_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_mbs")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="uuidLun")
    def uuid_lun(self) -> Optional[str]:
        return pulumi.get(self, "uuid_lun")


@pulumi.output_type
class GetAssetComputeGpuDeviceResult(dict):
    def __init__(__self__, *,
                 cores_count: Optional[int] = None,
                 description: Optional[str] = None,
                 manufacturer: Optional[str] = None,
                 memory_in_mbs: Optional[str] = None,
                 name: Optional[str] = None):
        if cores_count is not None:
            pulumi.set(__self__, "cores_count", cores_count)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if manufacturer is not None:
            pulumi.set(__self__, "manufacturer", manufacturer)
        if memory_in_mbs is not None:
            pulumi.set(__self__, "memory_in_mbs", memory_in_mbs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="coresCount")
    def cores_count(self) -> Optional[int]:
        return pulumi.get(self, "cores_count")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def manufacturer(self) -> Optional[str]:
        return pulumi.get(self, "manufacturer")

    @property
    @pulumi.getter(name="memoryInMbs")
    def memory_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "memory_in_mbs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAssetComputeNicResult(dict):
    def __init__(__self__, *,
                 ip_addresses: Optional[Sequence[str]] = None,
                 label: Optional[str] = None,
                 mac_address: Optional[str] = None,
                 mac_address_type: Optional[str] = None,
                 network_name: Optional[str] = None,
                 switch_name: Optional[str] = None):
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_type is not None:
            pulumi.set(__self__, "mac_address_type", mac_address_type)
        if network_name is not None:
            pulumi.set(__self__, "network_name", network_name)
        if switch_name is not None:
            pulumi.set(__self__, "switch_name", switch_name)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="macAddressType")
    def mac_address_type(self) -> Optional[str]:
        return pulumi.get(self, "mac_address_type")

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> Optional[str]:
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter(name="switchName")
    def switch_name(self) -> Optional[str]:
        return pulumi.get(self, "switch_name")


@pulumi.output_type
class GetAssetComputeNvdimmResult(dict):
    def __init__(__self__, *,
                 controller_key: Optional[int] = None,
                 label: Optional[str] = None,
                 unit_number: Optional[int] = None):
        if controller_key is not None:
            pulumi.set(__self__, "controller_key", controller_key)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if unit_number is not None:
            pulumi.set(__self__, "unit_number", unit_number)

    @property
    @pulumi.getter(name="controllerKey")
    def controller_key(self) -> Optional[int]:
        return pulumi.get(self, "controller_key")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> Optional[int]:
        return pulumi.get(self, "unit_number")


@pulumi.output_type
class GetAssetComputeNvdimmControllerResult(dict):
    def __init__(__self__, *,
                 bus_number: Optional[int] = None,
                 label: Optional[str] = None):
        if bus_number is not None:
            pulumi.set(__self__, "bus_number", bus_number)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> Optional[int]:
        return pulumi.get(self, "bus_number")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")


@pulumi.output_type
class GetAssetComputeScsiControllerResult(dict):
    def __init__(__self__, *,
                 label: Optional[str] = None,
                 shared_bus: Optional[str] = None,
                 unit_number: Optional[int] = None):
        if label is not None:
            pulumi.set(__self__, "label", label)
        if shared_bus is not None:
            pulumi.set(__self__, "shared_bus", shared_bus)
        if unit_number is not None:
            pulumi.set(__self__, "unit_number", unit_number)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="sharedBus")
    def shared_bus(self) -> Optional[str]:
        return pulumi.get(self, "shared_bus")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> Optional[int]:
        return pulumi.get(self, "unit_number")


@pulumi.output_type
class GetAssetSourceDiscoveryCredentialResult(dict):
    def __init__(__self__, *,
                 secret_id: Optional[str] = None,
                 type: Optional[str] = None):
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAssetSourceReplicationCredentialResult(dict):
    def __init__(__self__, *,
                 secret_id: Optional[str] = None,
                 type: Optional[str] = None):
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAssetSourcesAssetSourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAssetSourcesAssetSourceCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAssetSourcesAssetSourceCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAssetSourcesAssetSourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 are_historical_metrics_collected: Optional[bool] = None,
                 are_realtime_metrics_collected: Optional[bool] = None,
                 assets_compartment_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 discovery_credentials: Optional[Sequence['outputs.GetAssetSourcesAssetSourceCollectionItemDiscoveryCredentialResult']] = None,
                 discovery_schedule_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 environment_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 inventory_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 replication_credentials: Optional[Sequence['outputs.GetAssetSourcesAssetSourceCollectionItemReplicationCredentialResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None,
                 vcenter_endpoint: Optional[str] = None):
        if are_historical_metrics_collected is not None:
            pulumi.set(__self__, "are_historical_metrics_collected", are_historical_metrics_collected)
        if are_realtime_metrics_collected is not None:
            pulumi.set(__self__, "are_realtime_metrics_collected", are_realtime_metrics_collected)
        if assets_compartment_id is not None:
            pulumi.set(__self__, "assets_compartment_id", assets_compartment_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if discovery_credentials is not None:
            pulumi.set(__self__, "discovery_credentials", discovery_credentials)
        if discovery_schedule_id is not None:
            pulumi.set(__self__, "discovery_schedule_id", discovery_schedule_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inventory_id is not None:
            pulumi.set(__self__, "inventory_id", inventory_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if replication_credentials is not None:
            pulumi.set(__self__, "replication_credentials", replication_credentials)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vcenter_endpoint is not None:
            pulumi.set(__self__, "vcenter_endpoint", vcenter_endpoint)

    @property
    @pulumi.getter(name="areHistoricalMetricsCollected")
    def are_historical_metrics_collected(self) -> Optional[bool]:
        return pulumi.get(self, "are_historical_metrics_collected")

    @property
    @pulumi.getter(name="areRealtimeMetricsCollected")
    def are_realtime_metrics_collected(self) -> Optional[bool]:
        return pulumi.get(self, "are_realtime_metrics_collected")

    @property
    @pulumi.getter(name="assetsCompartmentId")
    def assets_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "assets_compartment_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="discoveryCredentials")
    def discovery_credentials(self) -> Optional[Sequence['outputs.GetAssetSourcesAssetSourceCollectionItemDiscoveryCredentialResult']]:
        return pulumi.get(self, "discovery_credentials")

    @property
    @pulumi.getter(name="discoveryScheduleId")
    def discovery_schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "discovery_schedule_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[str]:
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inventoryId")
    def inventory_id(self) -> Optional[str]:
        return pulumi.get(self, "inventory_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="replicationCredentials")
    def replication_credentials(self) -> Optional[Sequence['outputs.GetAssetSourcesAssetSourceCollectionItemReplicationCredentialResult']]:
        return pulumi.get(self, "replication_credentials")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vcenterEndpoint")
    def vcenter_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "vcenter_endpoint")


@pulumi.output_type
class GetAssetSourcesAssetSourceCollectionItemDiscoveryCredentialResult(dict):
    def __init__(__self__, *,
                 secret_id: Optional[str] = None,
                 type: Optional[str] = None):
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAssetSourcesAssetSourceCollectionItemReplicationCredentialResult(dict):
    def __init__(__self__, *,
                 secret_id: Optional[str] = None,
                 type: Optional[str] = None):
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAssetSourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAssetVmResult(dict):
    def __init__(__self__, *,
                 hypervisor_host: Optional[str] = None,
                 hypervisor_vendor: Optional[str] = None,
                 hypervisor_version: Optional[str] = None):
        if hypervisor_host is not None:
            pulumi.set(__self__, "hypervisor_host", hypervisor_host)
        if hypervisor_vendor is not None:
            pulumi.set(__self__, "hypervisor_vendor", hypervisor_vendor)
        if hypervisor_version is not None:
            pulumi.set(__self__, "hypervisor_version", hypervisor_version)

    @property
    @pulumi.getter(name="hypervisorHost")
    def hypervisor_host(self) -> Optional[str]:
        return pulumi.get(self, "hypervisor_host")

    @property
    @pulumi.getter(name="hypervisorVendor")
    def hypervisor_vendor(self) -> Optional[str]:
        return pulumi.get(self, "hypervisor_vendor")

    @property
    @pulumi.getter(name="hypervisorVersion")
    def hypervisor_version(self) -> Optional[str]:
        return pulumi.get(self, "hypervisor_version")


@pulumi.output_type
class GetAssetVmwareVcenterResult(dict):
    def __init__(__self__, *,
                 data_center: Optional[str] = None,
                 vcenter_key: Optional[str] = None,
                 vcenter_version: Optional[str] = None):
        if data_center is not None:
            pulumi.set(__self__, "data_center", data_center)
        if vcenter_key is not None:
            pulumi.set(__self__, "vcenter_key", vcenter_key)
        if vcenter_version is not None:
            pulumi.set(__self__, "vcenter_version", vcenter_version)

    @property
    @pulumi.getter(name="dataCenter")
    def data_center(self) -> Optional[str]:
        return pulumi.get(self, "data_center")

    @property
    @pulumi.getter(name="vcenterKey")
    def vcenter_key(self) -> Optional[str]:
        return pulumi.get(self, "vcenter_key")

    @property
    @pulumi.getter(name="vcenterVersion")
    def vcenter_version(self) -> Optional[str]:
        return pulumi.get(self, "vcenter_version")


@pulumi.output_type
class GetAssetVmwareVmResult(dict):
    def __init__(__self__, *,
                 cluster: Optional[str] = None,
                 customer_fields: Optional[Sequence[str]] = None,
                 customer_tags: Optional[Sequence['outputs.GetAssetVmwareVmCustomerTagResult']] = None,
                 fault_tolerance_bandwidth: Optional[int] = None,
                 fault_tolerance_secondary_latency: Optional[int] = None,
                 fault_tolerance_state: Optional[str] = None,
                 instance_uuid: Optional[str] = None,
                 is_disks_cbt_enabled: Optional[bool] = None,
                 is_disks_uuid_enabled: Optional[bool] = None,
                 path: Optional[str] = None,
                 vmware_tools_status: Optional[str] = None):
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if customer_fields is not None:
            pulumi.set(__self__, "customer_fields", customer_fields)
        if customer_tags is not None:
            pulumi.set(__self__, "customer_tags", customer_tags)
        if fault_tolerance_bandwidth is not None:
            pulumi.set(__self__, "fault_tolerance_bandwidth", fault_tolerance_bandwidth)
        if fault_tolerance_secondary_latency is not None:
            pulumi.set(__self__, "fault_tolerance_secondary_latency", fault_tolerance_secondary_latency)
        if fault_tolerance_state is not None:
            pulumi.set(__self__, "fault_tolerance_state", fault_tolerance_state)
        if instance_uuid is not None:
            pulumi.set(__self__, "instance_uuid", instance_uuid)
        if is_disks_cbt_enabled is not None:
            pulumi.set(__self__, "is_disks_cbt_enabled", is_disks_cbt_enabled)
        if is_disks_uuid_enabled is not None:
            pulumi.set(__self__, "is_disks_uuid_enabled", is_disks_uuid_enabled)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if vmware_tools_status is not None:
            pulumi.set(__self__, "vmware_tools_status", vmware_tools_status)

    @property
    @pulumi.getter
    def cluster(self) -> Optional[str]:
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter(name="customerFields")
    def customer_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "customer_fields")

    @property
    @pulumi.getter(name="customerTags")
    def customer_tags(self) -> Optional[Sequence['outputs.GetAssetVmwareVmCustomerTagResult']]:
        return pulumi.get(self, "customer_tags")

    @property
    @pulumi.getter(name="faultToleranceBandwidth")
    def fault_tolerance_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "fault_tolerance_bandwidth")

    @property
    @pulumi.getter(name="faultToleranceSecondaryLatency")
    def fault_tolerance_secondary_latency(self) -> Optional[int]:
        return pulumi.get(self, "fault_tolerance_secondary_latency")

    @property
    @pulumi.getter(name="faultToleranceState")
    def fault_tolerance_state(self) -> Optional[str]:
        return pulumi.get(self, "fault_tolerance_state")

    @property
    @pulumi.getter(name="instanceUuid")
    def instance_uuid(self) -> Optional[str]:
        return pulumi.get(self, "instance_uuid")

    @property
    @pulumi.getter(name="isDisksCbtEnabled")
    def is_disks_cbt_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disks_cbt_enabled")

    @property
    @pulumi.getter(name="isDisksUuidEnabled")
    def is_disks_uuid_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disks_uuid_enabled")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="vmwareToolsStatus")
    def vmware_tools_status(self) -> Optional[str]:
        return pulumi.get(self, "vmware_tools_status")


@pulumi.output_type
class GetAssetVmwareVmCustomerTagResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAssetsAssetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAssetsAssetCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAssetsAssetCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAssetsAssetCollectionItemResult(dict):
    def __init__(__self__, *,
                 asset_source_ids: Optional[Sequence[str]] = None,
                 asset_type: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 computes: Optional[Sequence['outputs.GetAssetsAssetCollectionItemComputeResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 external_asset_key: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 inventory_id: Optional[str] = None,
                 source_key: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 vms: Optional[Sequence['outputs.GetAssetsAssetCollectionItemVmResult']] = None,
                 vmware_vcenters: Optional[Sequence['outputs.GetAssetsAssetCollectionItemVmwareVcenterResult']] = None,
                 vmware_vms: Optional[Sequence['outputs.GetAssetsAssetCollectionItemVmwareVmResult']] = None):
        if asset_source_ids is not None:
            pulumi.set(__self__, "asset_source_ids", asset_source_ids)
        if asset_type is not None:
            pulumi.set(__self__, "asset_type", asset_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if computes is not None:
            pulumi.set(__self__, "computes", computes)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_asset_key is not None:
            pulumi.set(__self__, "external_asset_key", external_asset_key)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inventory_id is not None:
            pulumi.set(__self__, "inventory_id", inventory_id)
        if source_key is not None:
            pulumi.set(__self__, "source_key", source_key)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if vms is not None:
            pulumi.set(__self__, "vms", vms)
        if vmware_vcenters is not None:
            pulumi.set(__self__, "vmware_vcenters", vmware_vcenters)
        if vmware_vms is not None:
            pulumi.set(__self__, "vmware_vms", vmware_vms)

    @property
    @pulumi.getter(name="assetSourceIds")
    def asset_source_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "asset_source_ids")

    @property
    @pulumi.getter(name="assetType")
    def asset_type(self) -> Optional[str]:
        return pulumi.get(self, "asset_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def computes(self) -> Optional[Sequence['outputs.GetAssetsAssetCollectionItemComputeResult']]:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalAssetKey")
    def external_asset_key(self) -> Optional[str]:
        return pulumi.get(self, "external_asset_key")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inventoryId")
    def inventory_id(self) -> Optional[str]:
        return pulumi.get(self, "inventory_id")

    @property
    @pulumi.getter(name="sourceKey")
    def source_key(self) -> Optional[str]:
        return pulumi.get(self, "source_key")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def vms(self) -> Optional[Sequence['outputs.GetAssetsAssetCollectionItemVmResult']]:
        return pulumi.get(self, "vms")

    @property
    @pulumi.getter(name="vmwareVcenters")
    def vmware_vcenters(self) -> Optional[Sequence['outputs.GetAssetsAssetCollectionItemVmwareVcenterResult']]:
        return pulumi.get(self, "vmware_vcenters")

    @property
    @pulumi.getter(name="vmwareVms")
    def vmware_vms(self) -> Optional[Sequence['outputs.GetAssetsAssetCollectionItemVmwareVmResult']]:
        return pulumi.get(self, "vmware_vms")


@pulumi.output_type
class GetAssetsAssetCollectionItemComputeResult(dict):
    def __init__(__self__, *,
                 connected_networks: Optional[int] = None,
                 cores_count: Optional[int] = None,
                 cpu_model: Optional[str] = None,
                 description: Optional[str] = None,
                 disks: Optional[Sequence['outputs.GetAssetsAssetCollectionItemComputeDiskResult']] = None,
                 disks_count: Optional[int] = None,
                 dns_name: Optional[str] = None,
                 firmware: Optional[str] = None,
                 gpu_devices: Optional[Sequence['outputs.GetAssetsAssetCollectionItemComputeGpuDeviceResult']] = None,
                 gpu_devices_count: Optional[int] = None,
                 guest_state: Optional[str] = None,
                 hardware_version: Optional[str] = None,
                 host_name: Optional[str] = None,
                 is_pmem_enabled: Optional[bool] = None,
                 is_tpm_enabled: Optional[bool] = None,
                 latency_sensitivity: Optional[str] = None,
                 memory_in_mbs: Optional[str] = None,
                 nics: Optional[Sequence['outputs.GetAssetsAssetCollectionItemComputeNicResult']] = None,
                 nics_count: Optional[int] = None,
                 nvdimm_controllers: Optional[Sequence['outputs.GetAssetsAssetCollectionItemComputeNvdimmControllerResult']] = None,
                 nvdimms: Optional[Sequence['outputs.GetAssetsAssetCollectionItemComputeNvdimmResult']] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None,
                 pmem_in_mbs: Optional[str] = None,
                 power_state: Optional[str] = None,
                 primary_ip: Optional[str] = None,
                 scsi_controllers: Optional[Sequence['outputs.GetAssetsAssetCollectionItemComputeScsiControllerResult']] = None,
                 storage_provisioned_in_mbs: Optional[str] = None,
                 threads_per_core_count: Optional[int] = None):
        if connected_networks is not None:
            pulumi.set(__self__, "connected_networks", connected_networks)
        if cores_count is not None:
            pulumi.set(__self__, "cores_count", cores_count)
        if cpu_model is not None:
            pulumi.set(__self__, "cpu_model", cpu_model)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if disks_count is not None:
            pulumi.set(__self__, "disks_count", disks_count)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if gpu_devices is not None:
            pulumi.set(__self__, "gpu_devices", gpu_devices)
        if gpu_devices_count is not None:
            pulumi.set(__self__, "gpu_devices_count", gpu_devices_count)
        if guest_state is not None:
            pulumi.set(__self__, "guest_state", guest_state)
        if hardware_version is not None:
            pulumi.set(__self__, "hardware_version", hardware_version)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if is_pmem_enabled is not None:
            pulumi.set(__self__, "is_pmem_enabled", is_pmem_enabled)
        if is_tpm_enabled is not None:
            pulumi.set(__self__, "is_tpm_enabled", is_tpm_enabled)
        if latency_sensitivity is not None:
            pulumi.set(__self__, "latency_sensitivity", latency_sensitivity)
        if memory_in_mbs is not None:
            pulumi.set(__self__, "memory_in_mbs", memory_in_mbs)
        if nics is not None:
            pulumi.set(__self__, "nics", nics)
        if nics_count is not None:
            pulumi.set(__self__, "nics_count", nics_count)
        if nvdimm_controllers is not None:
            pulumi.set(__self__, "nvdimm_controllers", nvdimm_controllers)
        if nvdimms is not None:
            pulumi.set(__self__, "nvdimms", nvdimms)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)
        if pmem_in_mbs is not None:
            pulumi.set(__self__, "pmem_in_mbs", pmem_in_mbs)
        if power_state is not None:
            pulumi.set(__self__, "power_state", power_state)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if scsi_controllers is not None:
            pulumi.set(__self__, "scsi_controllers", scsi_controllers)
        if storage_provisioned_in_mbs is not None:
            pulumi.set(__self__, "storage_provisioned_in_mbs", storage_provisioned_in_mbs)
        if threads_per_core_count is not None:
            pulumi.set(__self__, "threads_per_core_count", threads_per_core_count)

    @property
    @pulumi.getter(name="connectedNetworks")
    def connected_networks(self) -> Optional[int]:
        return pulumi.get(self, "connected_networks")

    @property
    @pulumi.getter(name="coresCount")
    def cores_count(self) -> Optional[int]:
        return pulumi.get(self, "cores_count")

    @property
    @pulumi.getter(name="cpuModel")
    def cpu_model(self) -> Optional[str]:
        return pulumi.get(self, "cpu_model")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def disks(self) -> Optional[Sequence['outputs.GetAssetsAssetCollectionItemComputeDiskResult']]:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter(name="disksCount")
    def disks_count(self) -> Optional[int]:
        return pulumi.get(self, "disks_count")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[str]:
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter
    def firmware(self) -> Optional[str]:
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="gpuDevices")
    def gpu_devices(self) -> Optional[Sequence['outputs.GetAssetsAssetCollectionItemComputeGpuDeviceResult']]:
        return pulumi.get(self, "gpu_devices")

    @property
    @pulumi.getter(name="gpuDevicesCount")
    def gpu_devices_count(self) -> Optional[int]:
        return pulumi.get(self, "gpu_devices_count")

    @property
    @pulumi.getter(name="guestState")
    def guest_state(self) -> Optional[str]:
        return pulumi.get(self, "guest_state")

    @property
    @pulumi.getter(name="hardwareVersion")
    def hardware_version(self) -> Optional[str]:
        return pulumi.get(self, "hardware_version")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="isPmemEnabled")
    def is_pmem_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pmem_enabled")

    @property
    @pulumi.getter(name="isTpmEnabled")
    def is_tpm_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_tpm_enabled")

    @property
    @pulumi.getter(name="latencySensitivity")
    def latency_sensitivity(self) -> Optional[str]:
        return pulumi.get(self, "latency_sensitivity")

    @property
    @pulumi.getter(name="memoryInMbs")
    def memory_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "memory_in_mbs")

    @property
    @pulumi.getter
    def nics(self) -> Optional[Sequence['outputs.GetAssetsAssetCollectionItemComputeNicResult']]:
        return pulumi.get(self, "nics")

    @property
    @pulumi.getter(name="nicsCount")
    def nics_count(self) -> Optional[int]:
        return pulumi.get(self, "nics_count")

    @property
    @pulumi.getter(name="nvdimmControllers")
    def nvdimm_controllers(self) -> Optional[Sequence['outputs.GetAssetsAssetCollectionItemComputeNvdimmControllerResult']]:
        return pulumi.get(self, "nvdimm_controllers")

    @property
    @pulumi.getter
    def nvdimms(self) -> Optional[Sequence['outputs.GetAssetsAssetCollectionItemComputeNvdimmResult']]:
        return pulumi.get(self, "nvdimms")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")

    @property
    @pulumi.getter(name="pmemInMbs")
    def pmem_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "pmem_in_mbs")

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> Optional[str]:
        return pulumi.get(self, "power_state")

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[str]:
        return pulumi.get(self, "primary_ip")

    @property
    @pulumi.getter(name="scsiControllers")
    def scsi_controllers(self) -> Optional[Sequence['outputs.GetAssetsAssetCollectionItemComputeScsiControllerResult']]:
        return pulumi.get(self, "scsi_controllers")

    @property
    @pulumi.getter(name="storageProvisionedInMbs")
    def storage_provisioned_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "storage_provisioned_in_mbs")

    @property
    @pulumi.getter(name="threadsPerCoreCount")
    def threads_per_core_count(self) -> Optional[int]:
        return pulumi.get(self, "threads_per_core_count")


@pulumi.output_type
class GetAssetsAssetCollectionItemComputeDiskResult(dict):
    def __init__(__self__, *,
                 boot_order: Optional[int] = None,
                 location: Optional[str] = None,
                 name: Optional[str] = None,
                 persistent_mode: Optional[str] = None,
                 size_in_mbs: Optional[str] = None,
                 uuid: Optional[str] = None,
                 uuid_lun: Optional[str] = None):
        if boot_order is not None:
            pulumi.set(__self__, "boot_order", boot_order)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if persistent_mode is not None:
            pulumi.set(__self__, "persistent_mode", persistent_mode)
        if size_in_mbs is not None:
            pulumi.set(__self__, "size_in_mbs", size_in_mbs)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if uuid_lun is not None:
            pulumi.set(__self__, "uuid_lun", uuid_lun)

    @property
    @pulumi.getter(name="bootOrder")
    def boot_order(self) -> Optional[int]:
        return pulumi.get(self, "boot_order")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="persistentMode")
    def persistent_mode(self) -> Optional[str]:
        return pulumi.get(self, "persistent_mode")

    @property
    @pulumi.getter(name="sizeInMbs")
    def size_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_mbs")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="uuidLun")
    def uuid_lun(self) -> Optional[str]:
        return pulumi.get(self, "uuid_lun")


@pulumi.output_type
class GetAssetsAssetCollectionItemComputeGpuDeviceResult(dict):
    def __init__(__self__, *,
                 cores_count: Optional[int] = None,
                 description: Optional[str] = None,
                 manufacturer: Optional[str] = None,
                 memory_in_mbs: Optional[str] = None,
                 name: Optional[str] = None):
        if cores_count is not None:
            pulumi.set(__self__, "cores_count", cores_count)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if manufacturer is not None:
            pulumi.set(__self__, "manufacturer", manufacturer)
        if memory_in_mbs is not None:
            pulumi.set(__self__, "memory_in_mbs", memory_in_mbs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="coresCount")
    def cores_count(self) -> Optional[int]:
        return pulumi.get(self, "cores_count")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def manufacturer(self) -> Optional[str]:
        return pulumi.get(self, "manufacturer")

    @property
    @pulumi.getter(name="memoryInMbs")
    def memory_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "memory_in_mbs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAssetsAssetCollectionItemComputeNicResult(dict):
    def __init__(__self__, *,
                 ip_addresses: Optional[Sequence[str]] = None,
                 label: Optional[str] = None,
                 mac_address: Optional[str] = None,
                 mac_address_type: Optional[str] = None,
                 network_name: Optional[str] = None,
                 switch_name: Optional[str] = None):
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_type is not None:
            pulumi.set(__self__, "mac_address_type", mac_address_type)
        if network_name is not None:
            pulumi.set(__self__, "network_name", network_name)
        if switch_name is not None:
            pulumi.set(__self__, "switch_name", switch_name)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="macAddressType")
    def mac_address_type(self) -> Optional[str]:
        return pulumi.get(self, "mac_address_type")

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> Optional[str]:
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter(name="switchName")
    def switch_name(self) -> Optional[str]:
        return pulumi.get(self, "switch_name")


@pulumi.output_type
class GetAssetsAssetCollectionItemComputeNvdimmResult(dict):
    def __init__(__self__, *,
                 controller_key: Optional[int] = None,
                 label: Optional[str] = None,
                 unit_number: Optional[int] = None):
        if controller_key is not None:
            pulumi.set(__self__, "controller_key", controller_key)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if unit_number is not None:
            pulumi.set(__self__, "unit_number", unit_number)

    @property
    @pulumi.getter(name="controllerKey")
    def controller_key(self) -> Optional[int]:
        return pulumi.get(self, "controller_key")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> Optional[int]:
        return pulumi.get(self, "unit_number")


@pulumi.output_type
class GetAssetsAssetCollectionItemComputeNvdimmControllerResult(dict):
    def __init__(__self__, *,
                 bus_number: Optional[int] = None,
                 label: Optional[str] = None):
        if bus_number is not None:
            pulumi.set(__self__, "bus_number", bus_number)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter(name="busNumber")
    def bus_number(self) -> Optional[int]:
        return pulumi.get(self, "bus_number")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")


@pulumi.output_type
class GetAssetsAssetCollectionItemComputeScsiControllerResult(dict):
    def __init__(__self__, *,
                 label: Optional[str] = None,
                 shared_bus: Optional[str] = None,
                 unit_number: Optional[int] = None):
        if label is not None:
            pulumi.set(__self__, "label", label)
        if shared_bus is not None:
            pulumi.set(__self__, "shared_bus", shared_bus)
        if unit_number is not None:
            pulumi.set(__self__, "unit_number", unit_number)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="sharedBus")
    def shared_bus(self) -> Optional[str]:
        return pulumi.get(self, "shared_bus")

    @property
    @pulumi.getter(name="unitNumber")
    def unit_number(self) -> Optional[int]:
        return pulumi.get(self, "unit_number")


@pulumi.output_type
class GetAssetsAssetCollectionItemVmResult(dict):
    def __init__(__self__, *,
                 hypervisor_host: Optional[str] = None,
                 hypervisor_vendor: Optional[str] = None,
                 hypervisor_version: Optional[str] = None):
        if hypervisor_host is not None:
            pulumi.set(__self__, "hypervisor_host", hypervisor_host)
        if hypervisor_vendor is not None:
            pulumi.set(__self__, "hypervisor_vendor", hypervisor_vendor)
        if hypervisor_version is not None:
            pulumi.set(__self__, "hypervisor_version", hypervisor_version)

    @property
    @pulumi.getter(name="hypervisorHost")
    def hypervisor_host(self) -> Optional[str]:
        return pulumi.get(self, "hypervisor_host")

    @property
    @pulumi.getter(name="hypervisorVendor")
    def hypervisor_vendor(self) -> Optional[str]:
        return pulumi.get(self, "hypervisor_vendor")

    @property
    @pulumi.getter(name="hypervisorVersion")
    def hypervisor_version(self) -> Optional[str]:
        return pulumi.get(self, "hypervisor_version")


@pulumi.output_type
class GetAssetsAssetCollectionItemVmwareVcenterResult(dict):
    def __init__(__self__, *,
                 data_center: Optional[str] = None,
                 vcenter_key: Optional[str] = None,
                 vcenter_version: Optional[str] = None):
        if data_center is not None:
            pulumi.set(__self__, "data_center", data_center)
        if vcenter_key is not None:
            pulumi.set(__self__, "vcenter_key", vcenter_key)
        if vcenter_version is not None:
            pulumi.set(__self__, "vcenter_version", vcenter_version)

    @property
    @pulumi.getter(name="dataCenter")
    def data_center(self) -> Optional[str]:
        return pulumi.get(self, "data_center")

    @property
    @pulumi.getter(name="vcenterKey")
    def vcenter_key(self) -> Optional[str]:
        return pulumi.get(self, "vcenter_key")

    @property
    @pulumi.getter(name="vcenterVersion")
    def vcenter_version(self) -> Optional[str]:
        return pulumi.get(self, "vcenter_version")


@pulumi.output_type
class GetAssetsAssetCollectionItemVmwareVmResult(dict):
    def __init__(__self__, *,
                 cluster: Optional[str] = None,
                 customer_fields: Optional[Sequence[str]] = None,
                 customer_tags: Optional[Sequence['outputs.GetAssetsAssetCollectionItemVmwareVmCustomerTagResult']] = None,
                 fault_tolerance_bandwidth: Optional[int] = None,
                 fault_tolerance_secondary_latency: Optional[int] = None,
                 fault_tolerance_state: Optional[str] = None,
                 instance_uuid: Optional[str] = None,
                 is_disks_cbt_enabled: Optional[bool] = None,
                 is_disks_uuid_enabled: Optional[bool] = None,
                 path: Optional[str] = None,
                 vmware_tools_status: Optional[str] = None):
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if customer_fields is not None:
            pulumi.set(__self__, "customer_fields", customer_fields)
        if customer_tags is not None:
            pulumi.set(__self__, "customer_tags", customer_tags)
        if fault_tolerance_bandwidth is not None:
            pulumi.set(__self__, "fault_tolerance_bandwidth", fault_tolerance_bandwidth)
        if fault_tolerance_secondary_latency is not None:
            pulumi.set(__self__, "fault_tolerance_secondary_latency", fault_tolerance_secondary_latency)
        if fault_tolerance_state is not None:
            pulumi.set(__self__, "fault_tolerance_state", fault_tolerance_state)
        if instance_uuid is not None:
            pulumi.set(__self__, "instance_uuid", instance_uuid)
        if is_disks_cbt_enabled is not None:
            pulumi.set(__self__, "is_disks_cbt_enabled", is_disks_cbt_enabled)
        if is_disks_uuid_enabled is not None:
            pulumi.set(__self__, "is_disks_uuid_enabled", is_disks_uuid_enabled)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if vmware_tools_status is not None:
            pulumi.set(__self__, "vmware_tools_status", vmware_tools_status)

    @property
    @pulumi.getter
    def cluster(self) -> Optional[str]:
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter(name="customerFields")
    def customer_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "customer_fields")

    @property
    @pulumi.getter(name="customerTags")
    def customer_tags(self) -> Optional[Sequence['outputs.GetAssetsAssetCollectionItemVmwareVmCustomerTagResult']]:
        return pulumi.get(self, "customer_tags")

    @property
    @pulumi.getter(name="faultToleranceBandwidth")
    def fault_tolerance_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "fault_tolerance_bandwidth")

    @property
    @pulumi.getter(name="faultToleranceSecondaryLatency")
    def fault_tolerance_secondary_latency(self) -> Optional[int]:
        return pulumi.get(self, "fault_tolerance_secondary_latency")

    @property
    @pulumi.getter(name="faultToleranceState")
    def fault_tolerance_state(self) -> Optional[str]:
        return pulumi.get(self, "fault_tolerance_state")

    @property
    @pulumi.getter(name="instanceUuid")
    def instance_uuid(self) -> Optional[str]:
        return pulumi.get(self, "instance_uuid")

    @property
    @pulumi.getter(name="isDisksCbtEnabled")
    def is_disks_cbt_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disks_cbt_enabled")

    @property
    @pulumi.getter(name="isDisksUuidEnabled")
    def is_disks_uuid_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disks_uuid_enabled")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="vmwareToolsStatus")
    def vmware_tools_status(self) -> Optional[str]:
        return pulumi.get(self, "vmware_tools_status")


@pulumi.output_type
class GetAssetsAssetCollectionItemVmwareVmCustomerTagResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAssetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDiscoverySchedulesDiscoveryScheduleCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDiscoverySchedulesDiscoveryScheduleCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDiscoverySchedulesDiscoveryScheduleCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDiscoverySchedulesDiscoveryScheduleCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 execution_recurrences: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if execution_recurrences is not None:
            pulumi.set(__self__, "execution_recurrences", execution_recurrences)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionRecurrences")
    def execution_recurrences(self) -> Optional[str]:
        return pulumi.get(self, "execution_recurrences")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDiscoverySchedulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetEnvironmentsEnvironmentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetEnvironmentsEnvironmentCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetEnvironmentsEnvironmentCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetEnvironmentsEnvironmentCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetEnvironmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInventoriesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInventoriesInventoryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetInventoriesInventoryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetInventoriesInventoryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInventoriesInventoryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


