# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetResponderRecipesResult',
    'AwaitableGetResponderRecipesResult',
    'get_responder_recipes',
    'get_responder_recipes_output',
]

@pulumi.output_type
class GetResponderRecipesResult:
    """
    A collection of values returned by getResponderRecipes.
    """
    def __init__(__self__, access_level=None, compartment_id=None, compartment_id_in_subtree=None, display_name=None, filters=None, id=None, resource_metadata_only=None, responder_recipe_collections=None, state=None):
        if access_level and not isinstance(access_level, str):
            raise TypeError("Expected argument 'access_level' to be a str")
        pulumi.set(__self__, "access_level", access_level)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if compartment_id_in_subtree and not isinstance(compartment_id_in_subtree, bool):
            raise TypeError("Expected argument 'compartment_id_in_subtree' to be a bool")
        pulumi.set(__self__, "compartment_id_in_subtree", compartment_id_in_subtree)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if resource_metadata_only and not isinstance(resource_metadata_only, bool):
            raise TypeError("Expected argument 'resource_metadata_only' to be a bool")
        pulumi.set(__self__, "resource_metadata_only", resource_metadata_only)
        if responder_recipe_collections and not isinstance(responder_recipe_collections, list):
            raise TypeError("Expected argument 'responder_recipe_collections' to be a list")
        pulumi.set(__self__, "responder_recipe_collections", responder_recipe_collections)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[str]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compartmentIdInSubtree")
    def compartment_id_in_subtree(self) -> Optional[bool]:
        return pulumi.get(self, "compartment_id_in_subtree")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetResponderRecipesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resourceMetadataOnly")
    def resource_metadata_only(self) -> Optional[bool]:
        return pulumi.get(self, "resource_metadata_only")

    @property
    @pulumi.getter(name="responderRecipeCollections")
    def responder_recipe_collections(self) -> Optional[Sequence['outputs.GetResponderRecipesResponderRecipeCollectionResult']]:
        return pulumi.get(self, "responder_recipe_collections")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


class AwaitableGetResponderRecipesResult(GetResponderRecipesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResponderRecipesResult(
            access_level=self.access_level,
            compartment_id=self.compartment_id,
            compartment_id_in_subtree=self.compartment_id_in_subtree,
            display_name=self.display_name,
            filters=self.filters,
            id=self.id,
            resource_metadata_only=self.resource_metadata_only,
            responder_recipe_collections=self.responder_recipe_collections,
            state=self.state)


def get_responder_recipes(access_level: Optional[str] = None,
                          compartment_id: Optional[str] = None,
                          compartment_id_in_subtree: Optional[bool] = None,
                          display_name: Optional[str] = None,
                          filters: Optional[Sequence[pulumi.InputType['GetResponderRecipesFilterArgs']]] = None,
                          resource_metadata_only: Optional[bool] = None,
                          state: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResponderRecipesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessLevel'] = access_level
    __args__['compartmentId'] = compartment_id
    __args__['compartmentIdInSubtree'] = compartment_id_in_subtree
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['resourceMetadataOnly'] = resource_metadata_only
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:CloudGuard/getResponderRecipes:getResponderRecipes', __args__, opts=opts, typ=GetResponderRecipesResult).value

    return AwaitableGetResponderRecipesResult(
        access_level=pulumi.get(__ret__, 'access_level'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        compartment_id_in_subtree=pulumi.get(__ret__, 'compartment_id_in_subtree'),
        display_name=pulumi.get(__ret__, 'display_name'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        resource_metadata_only=pulumi.get(__ret__, 'resource_metadata_only'),
        responder_recipe_collections=pulumi.get(__ret__, 'responder_recipe_collections'),
        state=pulumi.get(__ret__, 'state'))


@_utilities.lift_output_func(get_responder_recipes)
def get_responder_recipes_output(access_level: Optional[pulumi.Input[Optional[str]]] = None,
                                 compartment_id: Optional[pulumi.Input[str]] = None,
                                 compartment_id_in_subtree: Optional[pulumi.Input[Optional[bool]]] = None,
                                 display_name: Optional[pulumi.Input[Optional[str]]] = None,
                                 filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetResponderRecipesFilterArgs']]]]] = None,
                                 resource_metadata_only: Optional[pulumi.Input[Optional[bool]]] = None,
                                 state: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetResponderRecipesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
