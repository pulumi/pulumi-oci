# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CloudGuardDataSourceDataSourceDetails',
    'CloudGuardDataSourceDataSourceDetailsLoggingQueryDetails',
    'CloudGuardDataSourceDataSourceDetailsQueryStartTime',
    'CloudGuardDataSourceDataSourceDetectorMappingInfo',
    'CloudGuardDataSourceRegionStatusDetail',
    'DataMaskRuleTargetSelected',
    'DetectorRecipeDetectorRule',
    'DetectorRecipeDetectorRuleCandidateResponderRule',
    'DetectorRecipeDetectorRuleDetails',
    'DetectorRecipeDetectorRuleDetailsConfiguration',
    'DetectorRecipeDetectorRuleDetailsConfigurationValue',
    'DetectorRecipeDetectorRuleDetailsEntitiesMapping',
    'DetectorRecipeDetectorRuleEntitiesMapping',
    'DetectorRecipeEffectiveDetectorRule',
    'DetectorRecipeEffectiveDetectorRuleCandidateResponderRule',
    'DetectorRecipeEffectiveDetectorRuleDetail',
    'DetectorRecipeEffectiveDetectorRuleDetailConfiguration',
    'DetectorRecipeEffectiveDetectorRuleDetailConfigurationValue',
    'DetectorRecipeEffectiveDetectorRuleEntitiesMapping',
    'ResponderRecipeEffectiveResponderRule',
    'ResponderRecipeEffectiveResponderRuleDetail',
    'ResponderRecipeEffectiveResponderRuleDetailConfiguration',
    'ResponderRecipeResponderRule',
    'ResponderRecipeResponderRuleDetails',
    'ResponderRecipeResponderRuleDetailsConfiguration',
    'TargetTargetDetail',
    'TargetTargetDetailTargetSecurityZoneRecipe',
    'TargetTargetDetectorRecipe',
    'TargetTargetDetectorRecipeDetectorRule',
    'TargetTargetDetectorRecipeDetectorRuleDetails',
    'TargetTargetDetectorRecipeDetectorRuleDetailsConditionGroup',
    'TargetTargetDetectorRecipeDetectorRuleDetailsConfiguration',
    'TargetTargetDetectorRecipeDetectorRuleDetailsConfigurationValue',
    'TargetTargetDetectorRecipeDetectorRuleEntitiesMapping',
    'TargetTargetDetectorRecipeEffectiveDetectorRule',
    'TargetTargetDetectorRecipeEffectiveDetectorRuleDetail',
    'TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup',
    'TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration',
    'TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue',
    'TargetTargetDetectorRecipeEffectiveDetectorRuleEntitiesMapping',
    'TargetTargetResponderRecipe',
    'TargetTargetResponderRecipeEffectiveResponderRule',
    'TargetTargetResponderRecipeEffectiveResponderRuleDetail',
    'TargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration',
    'TargetTargetResponderRecipeResponderRule',
    'TargetTargetResponderRecipeResponderRuleDetails',
    'TargetTargetResponderRecipeResponderRuleDetailsConfiguration',
    'GetDataMaskRuleTargetSelectedResult',
    'GetDataMaskRulesDataMaskRuleCollectionResult',
    'GetDataMaskRulesDataMaskRuleCollectionItemResult',
    'GetDataMaskRulesDataMaskRuleCollectionItemTargetSelectedResult',
    'GetDataMaskRulesFilterResult',
    'GetDataSourceDataSourceDetailResult',
    'GetDataSourceDataSourceDetailLoggingQueryDetailResult',
    'GetDataSourceDataSourceDetailQueryStartTimeResult',
    'GetDataSourceDataSourceDetectorMappingInfoResult',
    'GetDataSourceEventItemResult',
    'GetDataSourceEventItemEventInfoResult',
    'GetDataSourceEventsDataSourceEventCollectionResult',
    'GetDataSourceEventsDataSourceEventCollectionItemResult',
    'GetDataSourceEventsDataSourceEventCollectionItemEventInfoResult',
    'GetDataSourceEventsFilterResult',
    'GetDataSourceRegionStatusDetailResult',
    'GetDataSourcesDataSourceCollectionResult',
    'GetDataSourcesDataSourceCollectionItemResult',
    'GetDataSourcesDataSourceCollectionItemDataSourceDetailResult',
    'GetDataSourcesDataSourceCollectionItemDataSourceDetailLoggingQueryDetailResult',
    'GetDataSourcesDataSourceCollectionItemDataSourceDetailQueryStartTimeResult',
    'GetDataSourcesDataSourceCollectionItemDataSourceDetectorMappingInfoResult',
    'GetDataSourcesDataSourceCollectionItemRegionStatusDetailResult',
    'GetDataSourcesFilterResult',
    'GetDetectorRecipeDetectorRuleResult',
    'GetDetectorRecipeDetectorRuleCandidateResponderRuleResult',
    'GetDetectorRecipeDetectorRuleDetailResult',
    'GetDetectorRecipeDetectorRuleDetailConfigurationResult',
    'GetDetectorRecipeDetectorRuleDetailConfigurationValueResult',
    'GetDetectorRecipeDetectorRuleDetailEntitiesMappingResult',
    'GetDetectorRecipeDetectorRuleEntitiesMappingResult',
    'GetDetectorRecipeEffectiveDetectorRuleResult',
    'GetDetectorRecipeEffectiveDetectorRuleCandidateResponderRuleResult',
    'GetDetectorRecipeEffectiveDetectorRuleDetailResult',
    'GetDetectorRecipeEffectiveDetectorRuleDetailConfigurationResult',
    'GetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValueResult',
    'GetDetectorRecipeEffectiveDetectorRuleEntitiesMappingResult',
    'GetDetectorRecipesDetectorRecipeCollectionResult',
    'GetDetectorRecipesDetectorRecipeCollectionItemResult',
    'GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleResult',
    'GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleCandidateResponderRuleResult',
    'GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailResult',
    'GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailConfigurationResult',
    'GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailConfigurationValueResult',
    'GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailEntitiesMappingResult',
    'GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleEntitiesMappingResult',
    'GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleResult',
    'GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleCandidateResponderRuleResult',
    'GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailResult',
    'GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailConfigurationResult',
    'GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailConfigurationValueResult',
    'GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleEntitiesMappingResult',
    'GetDetectorRecipesFilterResult',
    'GetGuardTargetTargetDetailResult',
    'GetGuardTargetTargetDetailTargetSecurityZoneRecipeResult',
    'GetGuardTargetTargetDetectorRecipeResult',
    'GetGuardTargetTargetDetectorRecipeDetectorRuleResult',
    'GetGuardTargetTargetDetectorRecipeDetectorRuleDetailResult',
    'GetGuardTargetTargetDetectorRecipeDetectorRuleDetailConditionGroupResult',
    'GetGuardTargetTargetDetectorRecipeDetectorRuleDetailConfigurationResult',
    'GetGuardTargetTargetDetectorRecipeDetectorRuleDetailConfigurationValueResult',
    'GetGuardTargetTargetDetectorRecipeDetectorRuleEntitiesMappingResult',
    'GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleResult',
    'GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailResult',
    'GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroupResult',
    'GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationResult',
    'GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValueResult',
    'GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleEntitiesMappingResult',
    'GetGuardTargetTargetResponderRecipeResult',
    'GetGuardTargetTargetResponderRecipeEffectiveResponderRuleResult',
    'GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailResult',
    'GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailConfigurationResult',
    'GetGuardTargetTargetResponderRecipeResponderRuleResult',
    'GetGuardTargetTargetResponderRecipeResponderRuleDetailResult',
    'GetGuardTargetTargetResponderRecipeResponderRuleDetailConfigurationResult',
    'GetGuardTargetsFilterResult',
    'GetGuardTargetsTargetCollectionResult',
    'GetGuardTargetsTargetCollectionItemResult',
    'GetGuardTargetsTargetCollectionItemTargetDetailResult',
    'GetGuardTargetsTargetCollectionItemTargetDetailTargetSecurityZoneRecipeResult',
    'GetGuardTargetsTargetCollectionItemTargetDetectorRecipeResult',
    'GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleResult',
    'GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailResult',
    'GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConditionGroupResult',
    'GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConfigurationResult',
    'GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConfigurationValueResult',
    'GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleEntitiesMappingResult',
    'GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleResult',
    'GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailResult',
    'GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroupResult',
    'GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationResult',
    'GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValueResult',
    'GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleEntitiesMappingResult',
    'GetGuardTargetsTargetCollectionItemTargetResponderRecipeResult',
    'GetGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleResult',
    'GetGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleDetailResult',
    'GetGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleDetailConfigurationResult',
    'GetGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleResult',
    'GetGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleDetailResult',
    'GetGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleDetailConfigurationResult',
    'GetManagedListsFilterResult',
    'GetManagedListsManagedListCollectionResult',
    'GetManagedListsManagedListCollectionItemResult',
    'GetProblemEntitiesFilterResult',
    'GetProblemEntitiesProblemEntityCollectionResult',
    'GetProblemEntitiesProblemEntityCollectionItemResult',
    'GetProblemEntitiesProblemEntityCollectionItemEntityDetailResult',
    'GetProblemEntityItemResult',
    'GetProblemEntityItemEntityDetailResult',
    'GetResponderRecipeEffectiveResponderRuleResult',
    'GetResponderRecipeEffectiveResponderRuleDetailResult',
    'GetResponderRecipeEffectiveResponderRuleDetailConfigurationResult',
    'GetResponderRecipeResponderRuleResult',
    'GetResponderRecipeResponderRuleDetailResult',
    'GetResponderRecipeResponderRuleDetailConfigurationResult',
    'GetResponderRecipesFilterResult',
    'GetResponderRecipesResponderRecipeCollectionResult',
    'GetResponderRecipesResponderRecipeCollectionItemResult',
    'GetResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleResult',
    'GetResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleDetailResult',
    'GetResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleDetailConfigurationResult',
    'GetResponderRecipesResponderRecipeCollectionItemResponderRuleResult',
    'GetResponderRecipesResponderRecipeCollectionItemResponderRuleDetailResult',
    'GetResponderRecipesResponderRecipeCollectionItemResponderRuleDetailConfigurationResult',
    'GetSecurityPoliciesFilterResult',
    'GetSecurityPoliciesSecurityPolicyCollectionResult',
    'GetSecurityPoliciesSecurityPolicyCollectionItemResult',
    'GetSecurityRecipesFilterResult',
    'GetSecurityRecipesSecurityRecipeCollectionResult',
    'GetSecurityRecipesSecurityRecipeCollectionItemResult',
    'GetSecurityZonesFilterResult',
    'GetSecurityZonesSecurityZoneCollectionResult',
    'GetSecurityZonesSecurityZoneCollectionItemResult',
]

@pulumi.output_type
class CloudGuardDataSourceDataSourceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceFeedProvider":
            suggest = "data_source_feed_provider"
        elif key == "additionalEntitiesCount":
            suggest = "additional_entities_count"
        elif key == "intervalInMinutes":
            suggest = "interval_in_minutes"
        elif key == "loggingQueryDetails":
            suggest = "logging_query_details"
        elif key == "loggingQueryType":
            suggest = "logging_query_type"
        elif key == "queryStartTime":
            suggest = "query_start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudGuardDataSourceDataSourceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudGuardDataSourceDataSourceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudGuardDataSourceDataSourceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_feed_provider: str,
                 additional_entities_count: Optional[int] = None,
                 interval_in_minutes: Optional[int] = None,
                 logging_query_details: Optional['outputs.CloudGuardDataSourceDataSourceDetailsLoggingQueryDetails'] = None,
                 logging_query_type: Optional[str] = None,
                 operator: Optional[str] = None,
                 query: Optional[str] = None,
                 query_start_time: Optional['outputs.CloudGuardDataSourceDataSourceDetailsQueryStartTime'] = None,
                 regions: Optional[Sequence[str]] = None,
                 threshold: Optional[int] = None):
        pulumi.set(__self__, "data_source_feed_provider", data_source_feed_provider)
        if additional_entities_count is not None:
            pulumi.set(__self__, "additional_entities_count", additional_entities_count)
        if interval_in_minutes is not None:
            pulumi.set(__self__, "interval_in_minutes", interval_in_minutes)
        if logging_query_details is not None:
            pulumi.set(__self__, "logging_query_details", logging_query_details)
        if logging_query_type is not None:
            pulumi.set(__self__, "logging_query_type", logging_query_type)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if query_start_time is not None:
            pulumi.set(__self__, "query_start_time", query_start_time)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="dataSourceFeedProvider")
    def data_source_feed_provider(self) -> str:
        return pulumi.get(self, "data_source_feed_provider")

    @property
    @pulumi.getter(name="additionalEntitiesCount")
    def additional_entities_count(self) -> Optional[int]:
        return pulumi.get(self, "additional_entities_count")

    @property
    @pulumi.getter(name="intervalInMinutes")
    def interval_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "interval_in_minutes")

    @property
    @pulumi.getter(name="loggingQueryDetails")
    def logging_query_details(self) -> Optional['outputs.CloudGuardDataSourceDataSourceDetailsLoggingQueryDetails']:
        return pulumi.get(self, "logging_query_details")

    @property
    @pulumi.getter(name="loggingQueryType")
    def logging_query_type(self) -> Optional[str]:
        return pulumi.get(self, "logging_query_type")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="queryStartTime")
    def query_start_time(self) -> Optional['outputs.CloudGuardDataSourceDataSourceDetailsQueryStartTime']:
        return pulumi.get(self, "query_start_time")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[int]:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class CloudGuardDataSourceDataSourceDetailsLoggingQueryDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loggingQueryType":
            suggest = "logging_query_type"
        elif key == "keyEntitiesCount":
            suggest = "key_entities_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudGuardDataSourceDataSourceDetailsLoggingQueryDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudGuardDataSourceDataSourceDetailsLoggingQueryDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudGuardDataSourceDataSourceDetailsLoggingQueryDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 logging_query_type: str,
                 key_entities_count: Optional[int] = None):
        pulumi.set(__self__, "logging_query_type", logging_query_type)
        if key_entities_count is not None:
            pulumi.set(__self__, "key_entities_count", key_entities_count)

    @property
    @pulumi.getter(name="loggingQueryType")
    def logging_query_type(self) -> str:
        return pulumi.get(self, "logging_query_type")

    @property
    @pulumi.getter(name="keyEntitiesCount")
    def key_entities_count(self) -> Optional[int]:
        return pulumi.get(self, "key_entities_count")


@pulumi.output_type
class CloudGuardDataSourceDataSourceDetailsQueryStartTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startPolicyType":
            suggest = "start_policy_type"
        elif key == "queryStartTime":
            suggest = "query_start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudGuardDataSourceDataSourceDetailsQueryStartTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudGuardDataSourceDataSourceDetailsQueryStartTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudGuardDataSourceDataSourceDetailsQueryStartTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_policy_type: str,
                 query_start_time: Optional[str] = None):
        pulumi.set(__self__, "start_policy_type", start_policy_type)
        if query_start_time is not None:
            pulumi.set(__self__, "query_start_time", query_start_time)

    @property
    @pulumi.getter(name="startPolicyType")
    def start_policy_type(self) -> str:
        return pulumi.get(self, "start_policy_type")

    @property
    @pulumi.getter(name="queryStartTime")
    def query_start_time(self) -> Optional[str]:
        return pulumi.get(self, "query_start_time")


@pulumi.output_type
class CloudGuardDataSourceDataSourceDetectorMappingInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "detectorRecipeId":
            suggest = "detector_recipe_id"
        elif key == "detectorRuleId":
            suggest = "detector_rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudGuardDataSourceDataSourceDetectorMappingInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudGuardDataSourceDataSourceDetectorMappingInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudGuardDataSourceDataSourceDetectorMappingInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 detector_recipe_id: Optional[str] = None,
                 detector_rule_id: Optional[str] = None):
        if detector_recipe_id is not None:
            pulumi.set(__self__, "detector_recipe_id", detector_recipe_id)
        if detector_rule_id is not None:
            pulumi.set(__self__, "detector_rule_id", detector_rule_id)

    @property
    @pulumi.getter(name="detectorRecipeId")
    def detector_recipe_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_recipe_id")

    @property
    @pulumi.getter(name="detectorRuleId")
    def detector_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_rule_id")


@pulumi.output_type
class CloudGuardDataSourceRegionStatusDetail(dict):
    def __init__(__self__, *,
                 region: Optional[str] = None,
                 status: Optional[str] = None):
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class DataMaskRuleTargetSelected(dict):
    def __init__(__self__, *,
                 kind: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "kind", kind)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DetectorRecipeDetectorRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "detectorRuleId":
            suggest = "detector_rule_id"
        elif key == "candidateResponderRules":
            suggest = "candidate_responder_rules"
        elif key == "dataSourceId":
            suggest = "data_source_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "entitiesMappings":
            suggest = "entities_mappings"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "managedListTypes":
            suggest = "managed_list_types"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "serviceType":
            suggest = "service_type"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetectorRecipeDetectorRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetectorRecipeDetectorRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetectorRecipeDetectorRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 details: 'outputs.DetectorRecipeDetectorRuleDetails',
                 detector_rule_id: str,
                 candidate_responder_rules: Optional[Sequence['outputs.DetectorRecipeDetectorRuleCandidateResponderRule']] = None,
                 data_source_id: Optional[str] = None,
                 description: Optional[str] = None,
                 detector: Optional[str] = None,
                 display_name: Optional[str] = None,
                 entities_mappings: Optional[Sequence['outputs.DetectorRecipeDetectorRuleEntitiesMapping']] = None,
                 lifecycle_details: Optional[str] = None,
                 managed_list_types: Optional[Sequence[str]] = None,
                 recommendation: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 service_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "detector_rule_id", detector_rule_id)
        if candidate_responder_rules is not None:
            pulumi.set(__self__, "candidate_responder_rules", candidate_responder_rules)
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entities_mappings is not None:
            pulumi.set(__self__, "entities_mappings", entities_mappings)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if managed_list_types is not None:
            pulumi.set(__self__, "managed_list_types", managed_list_types)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def details(self) -> 'outputs.DetectorRecipeDetectorRuleDetails':
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="detectorRuleId")
    def detector_rule_id(self) -> str:
        return pulumi.get(self, "detector_rule_id")

    @property
    @pulumi.getter(name="candidateResponderRules")
    def candidate_responder_rules(self) -> Optional[Sequence['outputs.DetectorRecipeDetectorRuleCandidateResponderRule']]:
        return pulumi.get(self, "candidate_responder_rules")

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitiesMappings")
    def entities_mappings(self) -> Optional[Sequence['outputs.DetectorRecipeDetectorRuleEntitiesMapping']]:
        return pulumi.get(self, "entities_mappings")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managedListTypes")
    def managed_list_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "managed_list_types")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class DetectorRecipeDetectorRuleCandidateResponderRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "isPreferred":
            suggest = "is_preferred"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetectorRecipeDetectorRuleCandidateResponderRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetectorRecipeDetectorRuleCandidateResponderRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetectorRecipeDetectorRuleCandidateResponderRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_preferred: Optional[bool] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_preferred is not None:
            pulumi.set(__self__, "is_preferred", is_preferred)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPreferred")
    def is_preferred(self) -> Optional[bool]:
        return pulumi.get(self, "is_preferred")


@pulumi.output_type
class DetectorRecipeDetectorRuleDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "riskLevel":
            suggest = "risk_level"
        elif key == "dataSourceId":
            suggest = "data_source_id"
        elif key == "entitiesMappings":
            suggest = "entities_mappings"
        elif key == "isConfigurationAllowed":
            suggest = "is_configuration_allowed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetectorRecipeDetectorRuleDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetectorRecipeDetectorRuleDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetectorRecipeDetectorRuleDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: bool,
                 risk_level: str,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.DetectorRecipeDetectorRuleDetailsConfiguration']] = None,
                 data_source_id: Optional[str] = None,
                 description: Optional[str] = None,
                 entities_mappings: Optional[Sequence['outputs.DetectorRecipeDetectorRuleDetailsEntitiesMapping']] = None,
                 is_configuration_allowed: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 recommendation: Optional[str] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "risk_level", risk_level)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entities_mappings is not None:
            pulumi.set(__self__, "entities_mappings", entities_mappings)
        if is_configuration_allowed is not None:
            pulumi.set(__self__, "is_configuration_allowed", is_configuration_allowed)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> str:
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.DetectorRecipeDetectorRuleDetailsConfiguration']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="entitiesMappings")
    def entities_mappings(self) -> Optional[Sequence['outputs.DetectorRecipeDetectorRuleDetailsEntitiesMapping']]:
        return pulumi.get(self, "entities_mappings")

    @property
    @pulumi.getter(name="isConfigurationAllowed")
    def is_configuration_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_configuration_allowed")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")


@pulumi.output_type
class DetectorRecipeDetectorRuleDetailsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configKey":
            suggest = "config_key"
        elif key == "dataType":
            suggest = "data_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetectorRecipeDetectorRuleDetailsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetectorRecipeDetectorRuleDetailsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetectorRecipeDetectorRuleDetailsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_key: str,
                 name: str,
                 data_type: Optional[str] = None,
                 value: Optional[str] = None,
                 values: Optional[Sequence['outputs.DetectorRecipeDetectorRuleDetailsConfigurationValue']] = None):
        pulumi.set(__self__, "config_key", config_key)
        pulumi.set(__self__, "name", name)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> str:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.DetectorRecipeDetectorRuleDetailsConfigurationValue']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DetectorRecipeDetectorRuleDetailsConfigurationValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listType":
            suggest = "list_type"
        elif key == "managedListType":
            suggest = "managed_list_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetectorRecipeDetectorRuleDetailsConfigurationValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetectorRecipeDetectorRuleDetailsConfigurationValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetectorRecipeDetectorRuleDetailsConfigurationValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 list_type: str,
                 managed_list_type: str,
                 value: str):
        pulumi.set(__self__, "list_type", list_type)
        pulumi.set(__self__, "managed_list_type", managed_list_type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> str:
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter(name="managedListType")
    def managed_list_type(self) -> str:
        return pulumi.get(self, "managed_list_type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DetectorRecipeDetectorRuleDetailsEntitiesMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryField":
            suggest = "query_field"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "entityType":
            suggest = "entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetectorRecipeDetectorRuleDetailsEntitiesMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetectorRecipeDetectorRuleDetailsEntitiesMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetectorRecipeDetectorRuleDetailsEntitiesMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query_field: str,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None):
        pulumi.set(__self__, "query_field", query_field)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)

    @property
    @pulumi.getter(name="queryField")
    def query_field(self) -> str:
        return pulumi.get(self, "query_field")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")


@pulumi.output_type
class DetectorRecipeDetectorRuleEntitiesMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "queryField":
            suggest = "query_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetectorRecipeDetectorRuleEntitiesMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetectorRecipeDetectorRuleEntitiesMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetectorRecipeDetectorRuleEntitiesMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 query_field: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if query_field is not None:
            pulumi.set(__self__, "query_field", query_field)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="queryField")
    def query_field(self) -> Optional[str]:
        return pulumi.get(self, "query_field")


@pulumi.output_type
class DetectorRecipeEffectiveDetectorRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "candidateResponderRules":
            suggest = "candidate_responder_rules"
        elif key == "dataSourceId":
            suggest = "data_source_id"
        elif key == "detectorRuleId":
            suggest = "detector_rule_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "entitiesMappings":
            suggest = "entities_mappings"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "managedListTypes":
            suggest = "managed_list_types"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "serviceType":
            suggest = "service_type"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetectorRecipeEffectiveDetectorRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetectorRecipeEffectiveDetectorRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetectorRecipeEffectiveDetectorRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 candidate_responder_rules: Optional[Sequence['outputs.DetectorRecipeEffectiveDetectorRuleCandidateResponderRule']] = None,
                 data_source_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.DetectorRecipeEffectiveDetectorRuleDetail']] = None,
                 detector: Optional[str] = None,
                 detector_rule_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 entities_mappings: Optional[Sequence['outputs.DetectorRecipeEffectiveDetectorRuleEntitiesMapping']] = None,
                 lifecycle_details: Optional[str] = None,
                 managed_list_types: Optional[Sequence[str]] = None,
                 recommendation: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 service_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if candidate_responder_rules is not None:
            pulumi.set(__self__, "candidate_responder_rules", candidate_responder_rules)
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if detector_rule_id is not None:
            pulumi.set(__self__, "detector_rule_id", detector_rule_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entities_mappings is not None:
            pulumi.set(__self__, "entities_mappings", entities_mappings)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if managed_list_types is not None:
            pulumi.set(__self__, "managed_list_types", managed_list_types)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="candidateResponderRules")
    def candidate_responder_rules(self) -> Optional[Sequence['outputs.DetectorRecipeEffectiveDetectorRuleCandidateResponderRule']]:
        return pulumi.get(self, "candidate_responder_rules")

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.DetectorRecipeEffectiveDetectorRuleDetail']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="detectorRuleId")
    def detector_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_rule_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitiesMappings")
    def entities_mappings(self) -> Optional[Sequence['outputs.DetectorRecipeEffectiveDetectorRuleEntitiesMapping']]:
        return pulumi.get(self, "entities_mappings")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managedListTypes")
    def managed_list_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "managed_list_types")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class DetectorRecipeEffectiveDetectorRuleCandidateResponderRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "isPreferred":
            suggest = "is_preferred"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetectorRecipeEffectiveDetectorRuleCandidateResponderRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetectorRecipeEffectiveDetectorRuleCandidateResponderRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetectorRecipeEffectiveDetectorRuleCandidateResponderRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_preferred: Optional[bool] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_preferred is not None:
            pulumi.set(__self__, "is_preferred", is_preferred)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPreferred")
    def is_preferred(self) -> Optional[bool]:
        return pulumi.get(self, "is_preferred")


@pulumi.output_type
class DetectorRecipeEffectiveDetectorRuleDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isConfigurationAllowed":
            suggest = "is_configuration_allowed"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "riskLevel":
            suggest = "risk_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetectorRecipeEffectiveDetectorRuleDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetectorRecipeEffectiveDetectorRuleDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetectorRecipeEffectiveDetectorRuleDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.DetectorRecipeEffectiveDetectorRuleDetailConfiguration']] = None,
                 is_configuration_allowed: Optional[bool] = None,
                 is_enabled: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 risk_level: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_configuration_allowed is not None:
            pulumi.set(__self__, "is_configuration_allowed", is_configuration_allowed)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.DetectorRecipeEffectiveDetectorRuleDetailConfiguration']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isConfigurationAllowed")
    def is_configuration_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_configuration_allowed")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")


@pulumi.output_type
class DetectorRecipeEffectiveDetectorRuleDetailConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configKey":
            suggest = "config_key"
        elif key == "dataType":
            suggest = "data_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetectorRecipeEffectiveDetectorRuleDetailConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetectorRecipeEffectiveDetectorRuleDetailConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetectorRecipeEffectiveDetectorRuleDetailConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 data_type: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None,
                 values: Optional[Sequence['outputs.DetectorRecipeEffectiveDetectorRuleDetailConfigurationValue']] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.DetectorRecipeEffectiveDetectorRuleDetailConfigurationValue']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DetectorRecipeEffectiveDetectorRuleDetailConfigurationValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listType":
            suggest = "list_type"
        elif key == "managedListType":
            suggest = "managed_list_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetectorRecipeEffectiveDetectorRuleDetailConfigurationValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetectorRecipeEffectiveDetectorRuleDetailConfigurationValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetectorRecipeEffectiveDetectorRuleDetailConfigurationValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 list_type: Optional[str] = None,
                 managed_list_type: Optional[str] = None,
                 value: Optional[str] = None):
        if list_type is not None:
            pulumi.set(__self__, "list_type", list_type)
        if managed_list_type is not None:
            pulumi.set(__self__, "managed_list_type", managed_list_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> Optional[str]:
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter(name="managedListType")
    def managed_list_type(self) -> Optional[str]:
        return pulumi.get(self, "managed_list_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DetectorRecipeEffectiveDetectorRuleEntitiesMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "queryField":
            suggest = "query_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DetectorRecipeEffectiveDetectorRuleEntitiesMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DetectorRecipeEffectiveDetectorRuleEntitiesMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DetectorRecipeEffectiveDetectorRuleEntitiesMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 query_field: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if query_field is not None:
            pulumi.set(__self__, "query_field", query_field)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="queryField")
    def query_field(self) -> Optional[str]:
        return pulumi.get(self, "query_field")


@pulumi.output_type
class ResponderRecipeEffectiveResponderRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "responderRuleId":
            suggest = "responder_rule_id"
        elif key == "supportedModes":
            suggest = "supported_modes"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponderRecipeEffectiveResponderRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponderRecipeEffectiveResponderRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponderRecipeEffectiveResponderRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.ResponderRecipeEffectiveResponderRuleDetail']] = None,
                 display_name: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 policies: Optional[Sequence[str]] = None,
                 responder_rule_id: Optional[str] = None,
                 state: Optional[str] = None,
                 supported_modes: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if responder_rule_id is not None:
            pulumi.set(__self__, "responder_rule_id", responder_rule_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_modes is not None:
            pulumi.set(__self__, "supported_modes", supported_modes)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.ResponderRecipeEffectiveResponderRuleDetail']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="responderRuleId")
    def responder_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "responder_rule_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedModes")
    def supported_modes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_modes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ResponderRecipeEffectiveResponderRuleDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponderRecipeEffectiveResponderRuleDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponderRecipeEffectiveResponderRuleDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponderRecipeEffectiveResponderRuleDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.ResponderRecipeEffectiveResponderRuleDetailConfiguration']] = None,
                 is_enabled: Optional[bool] = None,
                 mode: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.ResponderRecipeEffectiveResponderRuleDetailConfiguration']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class ResponderRecipeEffectiveResponderRuleDetailConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configKey":
            suggest = "config_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponderRecipeEffectiveResponderRuleDetailConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponderRecipeEffectiveResponderRuleDetailConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponderRecipeEffectiveResponderRuleDetailConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ResponderRecipeResponderRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "responderRuleId":
            suggest = "responder_rule_id"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "supportedModes":
            suggest = "supported_modes"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponderRecipeResponderRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponderRecipeResponderRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponderRecipeResponderRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 details: 'outputs.ResponderRecipeResponderRuleDetails',
                 responder_rule_id: str,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 policies: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 supported_modes: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "responder_rule_id", responder_rule_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_modes is not None:
            pulumi.set(__self__, "supported_modes", supported_modes)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def details(self) -> 'outputs.ResponderRecipeResponderRuleDetails':
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="responderRuleId")
    def responder_rule_id(self) -> str:
        return pulumi.get(self, "responder_rule_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedModes")
    def supported_modes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_modes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ResponderRecipeResponderRuleDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponderRecipeResponderRuleDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponderRecipeResponderRuleDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponderRecipeResponderRuleDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: bool,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.ResponderRecipeResponderRuleDetailsConfiguration']] = None,
                 mode: Optional[str] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.ResponderRecipeResponderRuleDetailsConfiguration']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class ResponderRecipeResponderRuleDetailsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configKey":
            suggest = "config_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponderRecipeResponderRuleDetailsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponderRecipeResponderRuleDetailsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponderRecipeResponderRuleDetailsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TargetTargetDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityZoneDisplayName":
            suggest = "security_zone_display_name"
        elif key == "securityZoneId":
            suggest = "security_zone_id"
        elif key == "targetResourceType":
            suggest = "target_resource_type"
        elif key == "targetSecurityZoneRecipes":
            suggest = "target_security_zone_recipes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_zone_display_name: Optional[str] = None,
                 security_zone_id: Optional[str] = None,
                 target_resource_type: Optional[str] = None,
                 target_security_zone_recipes: Optional[Sequence['outputs.TargetTargetDetailTargetSecurityZoneRecipe']] = None):
        if security_zone_display_name is not None:
            pulumi.set(__self__, "security_zone_display_name", security_zone_display_name)
        if security_zone_id is not None:
            pulumi.set(__self__, "security_zone_id", security_zone_id)
        if target_resource_type is not None:
            pulumi.set(__self__, "target_resource_type", target_resource_type)
        if target_security_zone_recipes is not None:
            pulumi.set(__self__, "target_security_zone_recipes", target_security_zone_recipes)

    @property
    @pulumi.getter(name="securityZoneDisplayName")
    def security_zone_display_name(self) -> Optional[str]:
        return pulumi.get(self, "security_zone_display_name")

    @property
    @pulumi.getter(name="securityZoneId")
    def security_zone_id(self) -> Optional[str]:
        return pulumi.get(self, "security_zone_id")

    @property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_type")

    @property
    @pulumi.getter(name="targetSecurityZoneRecipes")
    def target_security_zone_recipes(self) -> Optional[Sequence['outputs.TargetTargetDetailTargetSecurityZoneRecipe']]:
        return pulumi.get(self, "target_security_zone_recipes")


@pulumi.output_type
class TargetTargetDetailTargetSecurityZoneRecipe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "securityPolicies":
            suggest = "security_policies"
        elif key == "systemTags":
            suggest = "system_tags"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetDetailTargetSecurityZoneRecipe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetDetailTargetSecurityZoneRecipe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetDetailTargetSecurityZoneRecipe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 owner: Optional[str] = None,
                 security_policies: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if security_policies is not None:
            pulumi.set(__self__, "security_policies", security_policies)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="securityPolicies")
    def security_policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_policies")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class TargetTargetDetectorRecipe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "detectorRecipeId":
            suggest = "detector_recipe_id"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "detectorRules":
            suggest = "detector_rules"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "effectiveDetectorRules":
            suggest = "effective_detector_rules"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetDetectorRecipe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetDetectorRecipe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetDetectorRecipe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 detector_recipe_id: str,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 detector: Optional[str] = None,
                 detector_rules: Optional[Sequence['outputs.TargetTargetDetectorRecipeDetectorRule']] = None,
                 display_name: Optional[str] = None,
                 effective_detector_rules: Optional[Sequence['outputs.TargetTargetDetectorRecipeEffectiveDetectorRule']] = None,
                 id: Optional[str] = None,
                 owner: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        pulumi.set(__self__, "detector_recipe_id", detector_recipe_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if detector_rules is not None:
            pulumi.set(__self__, "detector_rules", detector_rules)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if effective_detector_rules is not None:
            pulumi.set(__self__, "effective_detector_rules", effective_detector_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="detectorRecipeId")
    def detector_recipe_id(self) -> str:
        return pulumi.get(self, "detector_recipe_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="detectorRules")
    def detector_rules(self) -> Optional[Sequence['outputs.TargetTargetDetectorRecipeDetectorRule']]:
        return pulumi.get(self, "detector_rules")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="effectiveDetectorRules")
    def effective_detector_rules(self) -> Optional[Sequence['outputs.TargetTargetDetectorRecipeEffectiveDetectorRule']]:
        return pulumi.get(self, "effective_detector_rules")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class TargetTargetDetectorRecipeDetectorRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "detectorRuleId":
            suggest = "detector_rule_id"
        elif key == "dataSourceId":
            suggest = "data_source_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "entitiesMappings":
            suggest = "entities_mappings"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "managedListTypes":
            suggest = "managed_list_types"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "serviceType":
            suggest = "service_type"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetDetectorRecipeDetectorRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetDetectorRecipeDetectorRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetDetectorRecipeDetectorRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 details: 'outputs.TargetTargetDetectorRecipeDetectorRuleDetails',
                 detector_rule_id: str,
                 data_source_id: Optional[str] = None,
                 description: Optional[str] = None,
                 detector: Optional[str] = None,
                 display_name: Optional[str] = None,
                 entities_mappings: Optional[Sequence['outputs.TargetTargetDetectorRecipeDetectorRuleEntitiesMapping']] = None,
                 lifecycle_details: Optional[str] = None,
                 managed_list_types: Optional[Sequence[str]] = None,
                 recommendation: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 service_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "detector_rule_id", detector_rule_id)
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entities_mappings is not None:
            pulumi.set(__self__, "entities_mappings", entities_mappings)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if managed_list_types is not None:
            pulumi.set(__self__, "managed_list_types", managed_list_types)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def details(self) -> 'outputs.TargetTargetDetectorRecipeDetectorRuleDetails':
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="detectorRuleId")
    def detector_rule_id(self) -> str:
        return pulumi.get(self, "detector_rule_id")

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitiesMappings")
    def entities_mappings(self) -> Optional[Sequence['outputs.TargetTargetDetectorRecipeDetectorRuleEntitiesMapping']]:
        return pulumi.get(self, "entities_mappings")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managedListTypes")
    def managed_list_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "managed_list_types")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class TargetTargetDetectorRecipeDetectorRuleDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionGroups":
            suggest = "condition_groups"
        elif key == "isConfigurationAllowed":
            suggest = "is_configuration_allowed"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "riskLevel":
            suggest = "risk_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetDetectorRecipeDetectorRuleDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetDetectorRecipeDetectorRuleDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetDetectorRecipeDetectorRuleDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition_groups: Optional[Sequence['outputs.TargetTargetDetectorRecipeDetectorRuleDetailsConditionGroup']] = None,
                 configurations: Optional[Sequence['outputs.TargetTargetDetectorRecipeDetectorRuleDetailsConfiguration']] = None,
                 is_configuration_allowed: Optional[bool] = None,
                 is_enabled: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 risk_level: Optional[str] = None):
        if condition_groups is not None:
            pulumi.set(__self__, "condition_groups", condition_groups)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_configuration_allowed is not None:
            pulumi.set(__self__, "is_configuration_allowed", is_configuration_allowed)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)

    @property
    @pulumi.getter(name="conditionGroups")
    def condition_groups(self) -> Optional[Sequence['outputs.TargetTargetDetectorRecipeDetectorRuleDetailsConditionGroup']]:
        return pulumi.get(self, "condition_groups")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.TargetTargetDetectorRecipeDetectorRuleDetailsConfiguration']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isConfigurationAllowed")
    def is_configuration_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_configuration_allowed")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")


@pulumi.output_type
class TargetTargetDetectorRecipeDetectorRuleDetailsConditionGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetDetectorRecipeDetectorRuleDetailsConditionGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetDetectorRecipeDetectorRuleDetailsConditionGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetDetectorRecipeDetectorRuleDetailsConditionGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: str,
                 condition: str):
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "condition", condition)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def condition(self) -> str:
        return pulumi.get(self, "condition")


@pulumi.output_type
class TargetTargetDetectorRecipeDetectorRuleDetailsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configKey":
            suggest = "config_key"
        elif key == "dataType":
            suggest = "data_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetDetectorRecipeDetectorRuleDetailsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetDetectorRecipeDetectorRuleDetailsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetDetectorRecipeDetectorRuleDetailsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 data_type: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None,
                 values: Optional[Sequence['outputs.TargetTargetDetectorRecipeDetectorRuleDetailsConfigurationValue']] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.TargetTargetDetectorRecipeDetectorRuleDetailsConfigurationValue']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class TargetTargetDetectorRecipeDetectorRuleDetailsConfigurationValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listType":
            suggest = "list_type"
        elif key == "managedListType":
            suggest = "managed_list_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetDetectorRecipeDetectorRuleDetailsConfigurationValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetDetectorRecipeDetectorRuleDetailsConfigurationValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetDetectorRecipeDetectorRuleDetailsConfigurationValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 list_type: Optional[str] = None,
                 managed_list_type: Optional[str] = None,
                 value: Optional[str] = None):
        if list_type is not None:
            pulumi.set(__self__, "list_type", list_type)
        if managed_list_type is not None:
            pulumi.set(__self__, "managed_list_type", managed_list_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> Optional[str]:
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter(name="managedListType")
    def managed_list_type(self) -> Optional[str]:
        return pulumi.get(self, "managed_list_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TargetTargetDetectorRecipeDetectorRuleEntitiesMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "queryField":
            suggest = "query_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetDetectorRecipeDetectorRuleEntitiesMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetDetectorRecipeDetectorRuleEntitiesMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetDetectorRecipeDetectorRuleEntitiesMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 query_field: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if query_field is not None:
            pulumi.set(__self__, "query_field", query_field)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="queryField")
    def query_field(self) -> Optional[str]:
        return pulumi.get(self, "query_field")


@pulumi.output_type
class TargetTargetDetectorRecipeEffectiveDetectorRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceId":
            suggest = "data_source_id"
        elif key == "detectorRuleId":
            suggest = "detector_rule_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "entitiesMappings":
            suggest = "entities_mappings"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "managedListTypes":
            suggest = "managed_list_types"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "serviceType":
            suggest = "service_type"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetDetectorRecipeEffectiveDetectorRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetDetectorRecipeEffectiveDetectorRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetDetectorRecipeEffectiveDetectorRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.TargetTargetDetectorRecipeEffectiveDetectorRuleDetail']] = None,
                 detector: Optional[str] = None,
                 detector_rule_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 entities_mappings: Optional[Sequence['outputs.TargetTargetDetectorRecipeEffectiveDetectorRuleEntitiesMapping']] = None,
                 lifecycle_details: Optional[str] = None,
                 managed_list_types: Optional[Sequence[str]] = None,
                 recommendation: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 service_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if detector_rule_id is not None:
            pulumi.set(__self__, "detector_rule_id", detector_rule_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entities_mappings is not None:
            pulumi.set(__self__, "entities_mappings", entities_mappings)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if managed_list_types is not None:
            pulumi.set(__self__, "managed_list_types", managed_list_types)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.TargetTargetDetectorRecipeEffectiveDetectorRuleDetail']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="detectorRuleId")
    def detector_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_rule_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitiesMappings")
    def entities_mappings(self) -> Optional[Sequence['outputs.TargetTargetDetectorRecipeEffectiveDetectorRuleEntitiesMapping']]:
        return pulumi.get(self, "entities_mappings")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managedListTypes")
    def managed_list_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "managed_list_types")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class TargetTargetDetectorRecipeEffectiveDetectorRuleDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionGroups":
            suggest = "condition_groups"
        elif key == "isConfigurationAllowed":
            suggest = "is_configuration_allowed"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "riskLevel":
            suggest = "risk_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetDetectorRecipeEffectiveDetectorRuleDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetDetectorRecipeEffectiveDetectorRuleDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetDetectorRecipeEffectiveDetectorRuleDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition_groups: Optional[Sequence['outputs.TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup']] = None,
                 configurations: Optional[Sequence['outputs.TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration']] = None,
                 is_configuration_allowed: Optional[bool] = None,
                 is_enabled: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 risk_level: Optional[str] = None):
        if condition_groups is not None:
            pulumi.set(__self__, "condition_groups", condition_groups)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_configuration_allowed is not None:
            pulumi.set(__self__, "is_configuration_allowed", is_configuration_allowed)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)

    @property
    @pulumi.getter(name="conditionGroups")
    def condition_groups(self) -> Optional[Sequence['outputs.TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup']]:
        return pulumi.get(self, "condition_groups")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isConfigurationAllowed")
    def is_configuration_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_configuration_allowed")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")


@pulumi.output_type
class TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 condition: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")


@pulumi.output_type
class TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configKey":
            suggest = "config_key"
        elif key == "dataType":
            suggest = "data_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 data_type: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None,
                 values: Optional[Sequence['outputs.TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue']] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listType":
            suggest = "list_type"
        elif key == "managedListType":
            suggest = "managed_list_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 list_type: Optional[str] = None,
                 managed_list_type: Optional[str] = None,
                 value: Optional[str] = None):
        if list_type is not None:
            pulumi.set(__self__, "list_type", list_type)
        if managed_list_type is not None:
            pulumi.set(__self__, "managed_list_type", managed_list_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> Optional[str]:
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter(name="managedListType")
    def managed_list_type(self) -> Optional[str]:
        return pulumi.get(self, "managed_list_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TargetTargetDetectorRecipeEffectiveDetectorRuleEntitiesMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "queryField":
            suggest = "query_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetDetectorRecipeEffectiveDetectorRuleEntitiesMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetDetectorRecipeEffectiveDetectorRuleEntitiesMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetDetectorRecipeEffectiveDetectorRuleEntitiesMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 query_field: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if query_field is not None:
            pulumi.set(__self__, "query_field", query_field)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="queryField")
    def query_field(self) -> Optional[str]:
        return pulumi.get(self, "query_field")


@pulumi.output_type
class TargetTargetResponderRecipe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "responderRecipeId":
            suggest = "responder_recipe_id"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "effectiveResponderRules":
            suggest = "effective_responder_rules"
        elif key == "responderRules":
            suggest = "responder_rules"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetResponderRecipe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetResponderRecipe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetResponderRecipe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 responder_recipe_id: str,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 effective_responder_rules: Optional[Sequence['outputs.TargetTargetResponderRecipeEffectiveResponderRule']] = None,
                 id: Optional[str] = None,
                 owner: Optional[str] = None,
                 responder_rules: Optional[Sequence['outputs.TargetTargetResponderRecipeResponderRule']] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        pulumi.set(__self__, "responder_recipe_id", responder_recipe_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if effective_responder_rules is not None:
            pulumi.set(__self__, "effective_responder_rules", effective_responder_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if responder_rules is not None:
            pulumi.set(__self__, "responder_rules", responder_rules)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="responderRecipeId")
    def responder_recipe_id(self) -> str:
        return pulumi.get(self, "responder_recipe_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="effectiveResponderRules")
    def effective_responder_rules(self) -> Optional[Sequence['outputs.TargetTargetResponderRecipeEffectiveResponderRule']]:
        return pulumi.get(self, "effective_responder_rules")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="responderRules")
    def responder_rules(self) -> Optional[Sequence['outputs.TargetTargetResponderRecipeResponderRule']]:
        return pulumi.get(self, "responder_rules")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class TargetTargetResponderRecipeEffectiveResponderRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "responderRuleId":
            suggest = "responder_rule_id"
        elif key == "supportedModes":
            suggest = "supported_modes"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetResponderRecipeEffectiveResponderRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetResponderRecipeEffectiveResponderRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetResponderRecipeEffectiveResponderRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.TargetTargetResponderRecipeEffectiveResponderRuleDetail']] = None,
                 display_name: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 policies: Optional[Sequence[str]] = None,
                 responder_rule_id: Optional[str] = None,
                 state: Optional[str] = None,
                 supported_modes: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if responder_rule_id is not None:
            pulumi.set(__self__, "responder_rule_id", responder_rule_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_modes is not None:
            pulumi.set(__self__, "supported_modes", supported_modes)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.TargetTargetResponderRecipeEffectiveResponderRuleDetail']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="responderRuleId")
    def responder_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "responder_rule_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedModes")
    def supported_modes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_modes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TargetTargetResponderRecipeEffectiveResponderRuleDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetResponderRecipeEffectiveResponderRuleDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetResponderRecipeEffectiveResponderRuleDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetResponderRecipeEffectiveResponderRuleDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.TargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration']] = None,
                 is_enabled: Optional[bool] = None,
                 mode: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.TargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class TargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configKey":
            suggest = "config_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetResponderRecipeEffectiveResponderRuleDetailConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TargetTargetResponderRecipeResponderRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "responderRuleId":
            suggest = "responder_rule_id"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "supportedModes":
            suggest = "supported_modes"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetResponderRecipeResponderRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetResponderRecipeResponderRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetResponderRecipeResponderRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 details: 'outputs.TargetTargetResponderRecipeResponderRuleDetails',
                 responder_rule_id: str,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 policies: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 supported_modes: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "responder_rule_id", responder_rule_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_modes is not None:
            pulumi.set(__self__, "supported_modes", supported_modes)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def details(self) -> 'outputs.TargetTargetResponderRecipeResponderRuleDetails':
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="responderRuleId")
    def responder_rule_id(self) -> str:
        return pulumi.get(self, "responder_rule_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedModes")
    def supported_modes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_modes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TargetTargetResponderRecipeResponderRuleDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetResponderRecipeResponderRuleDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetResponderRecipeResponderRuleDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetResponderRecipeResponderRuleDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.TargetTargetResponderRecipeResponderRuleDetailsConfiguration']] = None,
                 is_enabled: Optional[bool] = None,
                 mode: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.TargetTargetResponderRecipeResponderRuleDetailsConfiguration']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class TargetTargetResponderRecipeResponderRuleDetailsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configKey":
            suggest = "config_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetTargetResponderRecipeResponderRuleDetailsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetTargetResponderRecipeResponderRuleDetailsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetTargetResponderRecipeResponderRuleDetailsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_key: str,
                 name: str,
                 value: str):
        pulumi.set(__self__, "config_key", config_key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> str:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDataMaskRuleTargetSelectedResult(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDataMaskRulesDataMaskRuleCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDataMaskRulesDataMaskRuleCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDataMaskRulesDataMaskRuleCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDataMaskRulesDataMaskRuleCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 data_mask_categories: Optional[Sequence[str]] = None,
                 data_mask_rule_status: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 iam_group_id: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecyle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_selecteds: Optional[Sequence['outputs.GetDataMaskRulesDataMaskRuleCollectionItemTargetSelectedResult']] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if data_mask_categories is not None:
            pulumi.set(__self__, "data_mask_categories", data_mask_categories)
        if data_mask_rule_status is not None:
            pulumi.set(__self__, "data_mask_rule_status", data_mask_rule_status)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if iam_group_id is not None:
            pulumi.set(__self__, "iam_group_id", iam_group_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecyle_details is not None:
            pulumi.set(__self__, "lifecyle_details", lifecyle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_selecteds is not None:
            pulumi.set(__self__, "target_selecteds", target_selecteds)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dataMaskCategories")
    def data_mask_categories(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "data_mask_categories")

    @property
    @pulumi.getter(name="dataMaskRuleStatus")
    def data_mask_rule_status(self) -> Optional[str]:
        return pulumi.get(self, "data_mask_rule_status")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="iamGroupId")
    def iam_group_id(self) -> Optional[str]:
        return pulumi.get(self, "iam_group_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecyleDetails")
    def lifecyle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecyle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetSelecteds")
    def target_selecteds(self) -> Optional[Sequence['outputs.GetDataMaskRulesDataMaskRuleCollectionItemTargetSelectedResult']]:
        return pulumi.get(self, "target_selecteds")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDataMaskRulesDataMaskRuleCollectionItemTargetSelectedResult(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDataMaskRulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDataSourceDataSourceDetailResult(dict):
    def __init__(__self__, *,
                 additional_entities_count: Optional[int] = None,
                 data_source_feed_provider: Optional[str] = None,
                 interval_in_minutes: Optional[int] = None,
                 logging_query_details: Optional[Sequence['outputs.GetDataSourceDataSourceDetailLoggingQueryDetailResult']] = None,
                 logging_query_type: Optional[str] = None,
                 operator: Optional[str] = None,
                 query: Optional[str] = None,
                 query_start_times: Optional[Sequence['outputs.GetDataSourceDataSourceDetailQueryStartTimeResult']] = None,
                 regions: Optional[Sequence[str]] = None,
                 threshold: Optional[int] = None):
        if additional_entities_count is not None:
            pulumi.set(__self__, "additional_entities_count", additional_entities_count)
        if data_source_feed_provider is not None:
            pulumi.set(__self__, "data_source_feed_provider", data_source_feed_provider)
        if interval_in_minutes is not None:
            pulumi.set(__self__, "interval_in_minutes", interval_in_minutes)
        if logging_query_details is not None:
            pulumi.set(__self__, "logging_query_details", logging_query_details)
        if logging_query_type is not None:
            pulumi.set(__self__, "logging_query_type", logging_query_type)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if query_start_times is not None:
            pulumi.set(__self__, "query_start_times", query_start_times)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="additionalEntitiesCount")
    def additional_entities_count(self) -> Optional[int]:
        return pulumi.get(self, "additional_entities_count")

    @property
    @pulumi.getter(name="dataSourceFeedProvider")
    def data_source_feed_provider(self) -> Optional[str]:
        return pulumi.get(self, "data_source_feed_provider")

    @property
    @pulumi.getter(name="intervalInMinutes")
    def interval_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "interval_in_minutes")

    @property
    @pulumi.getter(name="loggingQueryDetails")
    def logging_query_details(self) -> Optional[Sequence['outputs.GetDataSourceDataSourceDetailLoggingQueryDetailResult']]:
        return pulumi.get(self, "logging_query_details")

    @property
    @pulumi.getter(name="loggingQueryType")
    def logging_query_type(self) -> Optional[str]:
        return pulumi.get(self, "logging_query_type")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="queryStartTimes")
    def query_start_times(self) -> Optional[Sequence['outputs.GetDataSourceDataSourceDetailQueryStartTimeResult']]:
        return pulumi.get(self, "query_start_times")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[int]:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class GetDataSourceDataSourceDetailLoggingQueryDetailResult(dict):
    def __init__(__self__, *,
                 key_entities_count: Optional[int] = None,
                 logging_query_type: Optional[str] = None):
        if key_entities_count is not None:
            pulumi.set(__self__, "key_entities_count", key_entities_count)
        if logging_query_type is not None:
            pulumi.set(__self__, "logging_query_type", logging_query_type)

    @property
    @pulumi.getter(name="keyEntitiesCount")
    def key_entities_count(self) -> Optional[int]:
        return pulumi.get(self, "key_entities_count")

    @property
    @pulumi.getter(name="loggingQueryType")
    def logging_query_type(self) -> Optional[str]:
        return pulumi.get(self, "logging_query_type")


@pulumi.output_type
class GetDataSourceDataSourceDetailQueryStartTimeResult(dict):
    def __init__(__self__, *,
                 query_start_time: Optional[str] = None,
                 start_policy_type: Optional[str] = None):
        if query_start_time is not None:
            pulumi.set(__self__, "query_start_time", query_start_time)
        if start_policy_type is not None:
            pulumi.set(__self__, "start_policy_type", start_policy_type)

    @property
    @pulumi.getter(name="queryStartTime")
    def query_start_time(self) -> Optional[str]:
        return pulumi.get(self, "query_start_time")

    @property
    @pulumi.getter(name="startPolicyType")
    def start_policy_type(self) -> Optional[str]:
        return pulumi.get(self, "start_policy_type")


@pulumi.output_type
class GetDataSourceDataSourceDetectorMappingInfoResult(dict):
    def __init__(__self__, *,
                 detector_recipe_id: Optional[str] = None,
                 detector_rule_id: Optional[str] = None):
        if detector_recipe_id is not None:
            pulumi.set(__self__, "detector_recipe_id", detector_recipe_id)
        if detector_rule_id is not None:
            pulumi.set(__self__, "detector_rule_id", detector_rule_id)

    @property
    @pulumi.getter(name="detectorRecipeId")
    def detector_recipe_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_recipe_id")

    @property
    @pulumi.getter(name="detectorRuleId")
    def detector_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_rule_id")


@pulumi.output_type
class GetDataSourceEventItemResult(dict):
    def __init__(__self__, *,
                 comments: Optional[str] = None,
                 data_source_id: Optional[str] = None,
                 event_date: Optional[str] = None,
                 event_infos: Optional[Sequence['outputs.GetDataSourceEventItemEventInfoResult']] = None,
                 region: Optional[str] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None):
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if event_date is not None:
            pulumi.set(__self__, "event_date", event_date)
        if event_infos is not None:
            pulumi.set(__self__, "event_infos", event_infos)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter(name="eventDate")
    def event_date(self) -> Optional[str]:
        return pulumi.get(self, "event_date")

    @property
    @pulumi.getter(name="eventInfos")
    def event_infos(self) -> Optional[Sequence['outputs.GetDataSourceEventItemEventInfoResult']]:
        return pulumi.get(self, "event_infos")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetDataSourceEventItemEventInfoResult(dict):
    def __init__(__self__, *,
                 data_source_feed_provider: Optional[str] = None,
                 log_result: Optional[str] = None,
                 observed_value: Optional[str] = None,
                 operator: Optional[str] = None,
                 trigger_value: Optional[str] = None):
        if data_source_feed_provider is not None:
            pulumi.set(__self__, "data_source_feed_provider", data_source_feed_provider)
        if log_result is not None:
            pulumi.set(__self__, "log_result", log_result)
        if observed_value is not None:
            pulumi.set(__self__, "observed_value", observed_value)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if trigger_value is not None:
            pulumi.set(__self__, "trigger_value", trigger_value)

    @property
    @pulumi.getter(name="dataSourceFeedProvider")
    def data_source_feed_provider(self) -> Optional[str]:
        return pulumi.get(self, "data_source_feed_provider")

    @property
    @pulumi.getter(name="logResult")
    def log_result(self) -> Optional[str]:
        return pulumi.get(self, "log_result")

    @property
    @pulumi.getter(name="observedValue")
    def observed_value(self) -> Optional[str]:
        return pulumi.get(self, "observed_value")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="triggerValue")
    def trigger_value(self) -> Optional[str]:
        return pulumi.get(self, "trigger_value")


@pulumi.output_type
class GetDataSourceEventsDataSourceEventCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDataSourceEventsDataSourceEventCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDataSourceEventsDataSourceEventCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDataSourceEventsDataSourceEventCollectionItemResult(dict):
    def __init__(__self__, *,
                 comments: Optional[str] = None,
                 data_source_id: Optional[str] = None,
                 event_date: Optional[str] = None,
                 event_infos: Optional[Sequence['outputs.GetDataSourceEventsDataSourceEventCollectionItemEventInfoResult']] = None,
                 region: Optional[str] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None):
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if event_date is not None:
            pulumi.set(__self__, "event_date", event_date)
        if event_infos is not None:
            pulumi.set(__self__, "event_infos", event_infos)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter(name="eventDate")
    def event_date(self) -> Optional[str]:
        return pulumi.get(self, "event_date")

    @property
    @pulumi.getter(name="eventInfos")
    def event_infos(self) -> Optional[Sequence['outputs.GetDataSourceEventsDataSourceEventCollectionItemEventInfoResult']]:
        return pulumi.get(self, "event_infos")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetDataSourceEventsDataSourceEventCollectionItemEventInfoResult(dict):
    def __init__(__self__, *,
                 data_source_feed_provider: Optional[str] = None,
                 log_result: Optional[str] = None,
                 observed_value: Optional[str] = None,
                 operator: Optional[str] = None,
                 trigger_value: Optional[str] = None):
        if data_source_feed_provider is not None:
            pulumi.set(__self__, "data_source_feed_provider", data_source_feed_provider)
        if log_result is not None:
            pulumi.set(__self__, "log_result", log_result)
        if observed_value is not None:
            pulumi.set(__self__, "observed_value", observed_value)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if trigger_value is not None:
            pulumi.set(__self__, "trigger_value", trigger_value)

    @property
    @pulumi.getter(name="dataSourceFeedProvider")
    def data_source_feed_provider(self) -> Optional[str]:
        return pulumi.get(self, "data_source_feed_provider")

    @property
    @pulumi.getter(name="logResult")
    def log_result(self) -> Optional[str]:
        return pulumi.get(self, "log_result")

    @property
    @pulumi.getter(name="observedValue")
    def observed_value(self) -> Optional[str]:
        return pulumi.get(self, "observed_value")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="triggerValue")
    def trigger_value(self) -> Optional[str]:
        return pulumi.get(self, "trigger_value")


@pulumi.output_type
class GetDataSourceEventsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDataSourceRegionStatusDetailResult(dict):
    def __init__(__self__, *,
                 region: Optional[str] = None,
                 status: Optional[str] = None):
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDataSourcesDataSourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDataSourcesDataSourceCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDataSourcesDataSourceCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDataSourcesDataSourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 data_source_details: Optional[Sequence['outputs.GetDataSourcesDataSourceCollectionItemDataSourceDetailResult']] = None,
                 data_source_detector_mapping_infos: Optional[Sequence['outputs.GetDataSourcesDataSourceCollectionItemDataSourceDetectorMappingInfoResult']] = None,
                 data_source_feed_provider: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 region_status_details: Optional[Sequence['outputs.GetDataSourcesDataSourceCollectionItemRegionStatusDetailResult']] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if data_source_details is not None:
            pulumi.set(__self__, "data_source_details", data_source_details)
        if data_source_detector_mapping_infos is not None:
            pulumi.set(__self__, "data_source_detector_mapping_infos", data_source_detector_mapping_infos)
        if data_source_feed_provider is not None:
            pulumi.set(__self__, "data_source_feed_provider", data_source_feed_provider)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if region_status_details is not None:
            pulumi.set(__self__, "region_status_details", region_status_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dataSourceDetails")
    def data_source_details(self) -> Optional[Sequence['outputs.GetDataSourcesDataSourceCollectionItemDataSourceDetailResult']]:
        return pulumi.get(self, "data_source_details")

    @property
    @pulumi.getter(name="dataSourceDetectorMappingInfos")
    def data_source_detector_mapping_infos(self) -> Optional[Sequence['outputs.GetDataSourcesDataSourceCollectionItemDataSourceDetectorMappingInfoResult']]:
        return pulumi.get(self, "data_source_detector_mapping_infos")

    @property
    @pulumi.getter(name="dataSourceFeedProvider")
    def data_source_feed_provider(self) -> Optional[str]:
        return pulumi.get(self, "data_source_feed_provider")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="regionStatusDetails")
    def region_status_details(self) -> Optional[Sequence['outputs.GetDataSourcesDataSourceCollectionItemRegionStatusDetailResult']]:
        return pulumi.get(self, "region_status_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDataSourcesDataSourceCollectionItemDataSourceDetailResult(dict):
    def __init__(__self__, *,
                 additional_entities_count: Optional[int] = None,
                 data_source_feed_provider: Optional[str] = None,
                 interval_in_minutes: Optional[int] = None,
                 logging_query_details: Optional[Sequence['outputs.GetDataSourcesDataSourceCollectionItemDataSourceDetailLoggingQueryDetailResult']] = None,
                 logging_query_type: Optional[str] = None,
                 operator: Optional[str] = None,
                 query: Optional[str] = None,
                 query_start_times: Optional[Sequence['outputs.GetDataSourcesDataSourceCollectionItemDataSourceDetailQueryStartTimeResult']] = None,
                 regions: Optional[Sequence[str]] = None,
                 threshold: Optional[int] = None):
        if additional_entities_count is not None:
            pulumi.set(__self__, "additional_entities_count", additional_entities_count)
        if data_source_feed_provider is not None:
            pulumi.set(__self__, "data_source_feed_provider", data_source_feed_provider)
        if interval_in_minutes is not None:
            pulumi.set(__self__, "interval_in_minutes", interval_in_minutes)
        if logging_query_details is not None:
            pulumi.set(__self__, "logging_query_details", logging_query_details)
        if logging_query_type is not None:
            pulumi.set(__self__, "logging_query_type", logging_query_type)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if query_start_times is not None:
            pulumi.set(__self__, "query_start_times", query_start_times)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="additionalEntitiesCount")
    def additional_entities_count(self) -> Optional[int]:
        return pulumi.get(self, "additional_entities_count")

    @property
    @pulumi.getter(name="dataSourceFeedProvider")
    def data_source_feed_provider(self) -> Optional[str]:
        return pulumi.get(self, "data_source_feed_provider")

    @property
    @pulumi.getter(name="intervalInMinutes")
    def interval_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "interval_in_minutes")

    @property
    @pulumi.getter(name="loggingQueryDetails")
    def logging_query_details(self) -> Optional[Sequence['outputs.GetDataSourcesDataSourceCollectionItemDataSourceDetailLoggingQueryDetailResult']]:
        return pulumi.get(self, "logging_query_details")

    @property
    @pulumi.getter(name="loggingQueryType")
    def logging_query_type(self) -> Optional[str]:
        return pulumi.get(self, "logging_query_type")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="queryStartTimes")
    def query_start_times(self) -> Optional[Sequence['outputs.GetDataSourcesDataSourceCollectionItemDataSourceDetailQueryStartTimeResult']]:
        return pulumi.get(self, "query_start_times")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[int]:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class GetDataSourcesDataSourceCollectionItemDataSourceDetailLoggingQueryDetailResult(dict):
    def __init__(__self__, *,
                 key_entities_count: Optional[int] = None,
                 logging_query_type: Optional[str] = None):
        if key_entities_count is not None:
            pulumi.set(__self__, "key_entities_count", key_entities_count)
        if logging_query_type is not None:
            pulumi.set(__self__, "logging_query_type", logging_query_type)

    @property
    @pulumi.getter(name="keyEntitiesCount")
    def key_entities_count(self) -> Optional[int]:
        return pulumi.get(self, "key_entities_count")

    @property
    @pulumi.getter(name="loggingQueryType")
    def logging_query_type(self) -> Optional[str]:
        return pulumi.get(self, "logging_query_type")


@pulumi.output_type
class GetDataSourcesDataSourceCollectionItemDataSourceDetailQueryStartTimeResult(dict):
    def __init__(__self__, *,
                 query_start_time: Optional[str] = None,
                 start_policy_type: Optional[str] = None):
        if query_start_time is not None:
            pulumi.set(__self__, "query_start_time", query_start_time)
        if start_policy_type is not None:
            pulumi.set(__self__, "start_policy_type", start_policy_type)

    @property
    @pulumi.getter(name="queryStartTime")
    def query_start_time(self) -> Optional[str]:
        return pulumi.get(self, "query_start_time")

    @property
    @pulumi.getter(name="startPolicyType")
    def start_policy_type(self) -> Optional[str]:
        return pulumi.get(self, "start_policy_type")


@pulumi.output_type
class GetDataSourcesDataSourceCollectionItemDataSourceDetectorMappingInfoResult(dict):
    def __init__(__self__, *,
                 detector_recipe_id: Optional[str] = None,
                 detector_rule_id: Optional[str] = None):
        if detector_recipe_id is not None:
            pulumi.set(__self__, "detector_recipe_id", detector_recipe_id)
        if detector_rule_id is not None:
            pulumi.set(__self__, "detector_rule_id", detector_rule_id)

    @property
    @pulumi.getter(name="detectorRecipeId")
    def detector_recipe_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_recipe_id")

    @property
    @pulumi.getter(name="detectorRuleId")
    def detector_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_rule_id")


@pulumi.output_type
class GetDataSourcesDataSourceCollectionItemRegionStatusDetailResult(dict):
    def __init__(__self__, *,
                 region: Optional[str] = None,
                 status: Optional[str] = None):
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDataSourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDetectorRecipeDetectorRuleResult(dict):
    def __init__(__self__, *,
                 candidate_responder_rules: Optional[Sequence['outputs.GetDetectorRecipeDetectorRuleCandidateResponderRuleResult']] = None,
                 data_source_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetDetectorRecipeDetectorRuleDetailResult']] = None,
                 detector: Optional[str] = None,
                 detector_rule_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 entities_mappings: Optional[Sequence['outputs.GetDetectorRecipeDetectorRuleEntitiesMappingResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 managed_list_types: Optional[Sequence[str]] = None,
                 recommendation: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 service_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if candidate_responder_rules is not None:
            pulumi.set(__self__, "candidate_responder_rules", candidate_responder_rules)
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if detector_rule_id is not None:
            pulumi.set(__self__, "detector_rule_id", detector_rule_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entities_mappings is not None:
            pulumi.set(__self__, "entities_mappings", entities_mappings)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if managed_list_types is not None:
            pulumi.set(__self__, "managed_list_types", managed_list_types)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="candidateResponderRules")
    def candidate_responder_rules(self) -> Optional[Sequence['outputs.GetDetectorRecipeDetectorRuleCandidateResponderRuleResult']]:
        return pulumi.get(self, "candidate_responder_rules")

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetDetectorRecipeDetectorRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="detectorRuleId")
    def detector_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_rule_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitiesMappings")
    def entities_mappings(self) -> Optional[Sequence['outputs.GetDetectorRecipeDetectorRuleEntitiesMappingResult']]:
        return pulumi.get(self, "entities_mappings")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managedListTypes")
    def managed_list_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "managed_list_types")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDetectorRecipeDetectorRuleCandidateResponderRuleResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_preferred: Optional[bool] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_preferred is not None:
            pulumi.set(__self__, "is_preferred", is_preferred)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPreferred")
    def is_preferred(self) -> Optional[bool]:
        return pulumi.get(self, "is_preferred")


@pulumi.output_type
class GetDetectorRecipeDetectorRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.GetDetectorRecipeDetectorRuleDetailConfigurationResult']] = None,
                 data_source_id: Optional[str] = None,
                 description: Optional[str] = None,
                 entities_mappings: Optional[Sequence['outputs.GetDetectorRecipeDetectorRuleDetailEntitiesMappingResult']] = None,
                 is_configuration_allowed: Optional[bool] = None,
                 is_enabled: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 recommendation: Optional[str] = None,
                 risk_level: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entities_mappings is not None:
            pulumi.set(__self__, "entities_mappings", entities_mappings)
        if is_configuration_allowed is not None:
            pulumi.set(__self__, "is_configuration_allowed", is_configuration_allowed)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetDetectorRecipeDetectorRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="entitiesMappings")
    def entities_mappings(self) -> Optional[Sequence['outputs.GetDetectorRecipeDetectorRuleDetailEntitiesMappingResult']]:
        return pulumi.get(self, "entities_mappings")

    @property
    @pulumi.getter(name="isConfigurationAllowed")
    def is_configuration_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_configuration_allowed")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")


@pulumi.output_type
class GetDetectorRecipeDetectorRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 data_type: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None,
                 values: Optional[Sequence['outputs.GetDetectorRecipeDetectorRuleDetailConfigurationValueResult']] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetDetectorRecipeDetectorRuleDetailConfigurationValueResult']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDetectorRecipeDetectorRuleDetailConfigurationValueResult(dict):
    def __init__(__self__, *,
                 list_type: Optional[str] = None,
                 managed_list_type: Optional[str] = None,
                 value: Optional[str] = None):
        if list_type is not None:
            pulumi.set(__self__, "list_type", list_type)
        if managed_list_type is not None:
            pulumi.set(__self__, "managed_list_type", managed_list_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> Optional[str]:
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter(name="managedListType")
    def managed_list_type(self) -> Optional[str]:
        return pulumi.get(self, "managed_list_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDetectorRecipeDetectorRuleDetailEntitiesMappingResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 query_field: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if query_field is not None:
            pulumi.set(__self__, "query_field", query_field)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="queryField")
    def query_field(self) -> Optional[str]:
        return pulumi.get(self, "query_field")


@pulumi.output_type
class GetDetectorRecipeDetectorRuleEntitiesMappingResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 query_field: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if query_field is not None:
            pulumi.set(__self__, "query_field", query_field)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="queryField")
    def query_field(self) -> Optional[str]:
        return pulumi.get(self, "query_field")


@pulumi.output_type
class GetDetectorRecipeEffectiveDetectorRuleResult(dict):
    def __init__(__self__, *,
                 candidate_responder_rules: Optional[Sequence['outputs.GetDetectorRecipeEffectiveDetectorRuleCandidateResponderRuleResult']] = None,
                 data_source_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetDetectorRecipeEffectiveDetectorRuleDetailResult']] = None,
                 detector: Optional[str] = None,
                 detector_rule_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 entities_mappings: Optional[Sequence['outputs.GetDetectorRecipeEffectiveDetectorRuleEntitiesMappingResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 managed_list_types: Optional[Sequence[str]] = None,
                 recommendation: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 service_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if candidate_responder_rules is not None:
            pulumi.set(__self__, "candidate_responder_rules", candidate_responder_rules)
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if detector_rule_id is not None:
            pulumi.set(__self__, "detector_rule_id", detector_rule_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entities_mappings is not None:
            pulumi.set(__self__, "entities_mappings", entities_mappings)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if managed_list_types is not None:
            pulumi.set(__self__, "managed_list_types", managed_list_types)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="candidateResponderRules")
    def candidate_responder_rules(self) -> Optional[Sequence['outputs.GetDetectorRecipeEffectiveDetectorRuleCandidateResponderRuleResult']]:
        return pulumi.get(self, "candidate_responder_rules")

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetDetectorRecipeEffectiveDetectorRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="detectorRuleId")
    def detector_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_rule_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitiesMappings")
    def entities_mappings(self) -> Optional[Sequence['outputs.GetDetectorRecipeEffectiveDetectorRuleEntitiesMappingResult']]:
        return pulumi.get(self, "entities_mappings")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managedListTypes")
    def managed_list_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "managed_list_types")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDetectorRecipeEffectiveDetectorRuleCandidateResponderRuleResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_preferred: Optional[bool] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_preferred is not None:
            pulumi.set(__self__, "is_preferred", is_preferred)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPreferred")
    def is_preferred(self) -> Optional[bool]:
        return pulumi.get(self, "is_preferred")


@pulumi.output_type
class GetDetectorRecipeEffectiveDetectorRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.GetDetectorRecipeEffectiveDetectorRuleDetailConfigurationResult']] = None,
                 is_configuration_allowed: Optional[bool] = None,
                 is_enabled: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 risk_level: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_configuration_allowed is not None:
            pulumi.set(__self__, "is_configuration_allowed", is_configuration_allowed)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetDetectorRecipeEffectiveDetectorRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isConfigurationAllowed")
    def is_configuration_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_configuration_allowed")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")


@pulumi.output_type
class GetDetectorRecipeEffectiveDetectorRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 data_type: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None,
                 values: Optional[Sequence['outputs.GetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValueResult']] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValueResult']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValueResult(dict):
    def __init__(__self__, *,
                 list_type: Optional[str] = None,
                 managed_list_type: Optional[str] = None,
                 value: Optional[str] = None):
        if list_type is not None:
            pulumi.set(__self__, "list_type", list_type)
        if managed_list_type is not None:
            pulumi.set(__self__, "managed_list_type", managed_list_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> Optional[str]:
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter(name="managedListType")
    def managed_list_type(self) -> Optional[str]:
        return pulumi.get(self, "managed_list_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDetectorRecipeEffectiveDetectorRuleEntitiesMappingResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 query_field: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if query_field is not None:
            pulumi.set(__self__, "query_field", query_field)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="queryField")
    def query_field(self) -> Optional[str]:
        return pulumi.get(self, "query_field")


@pulumi.output_type
class GetDetectorRecipesDetectorRecipeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDetectorRecipesDetectorRecipeCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 detector: Optional[str] = None,
                 detector_rules: Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleResult']] = None,
                 display_name: Optional[str] = None,
                 effective_detector_rules: Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 owner: Optional[str] = None,
                 source_detector_recipe_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_ids: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if detector_rules is not None:
            pulumi.set(__self__, "detector_rules", detector_rules)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if effective_detector_rules is not None:
            pulumi.set(__self__, "effective_detector_rules", effective_detector_rules)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if source_detector_recipe_id is not None:
            pulumi.set(__self__, "source_detector_recipe_id", source_detector_recipe_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_ids is not None:
            pulumi.set(__self__, "target_ids", target_ids)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="detectorRules")
    def detector_rules(self) -> Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleResult']]:
        return pulumi.get(self, "detector_rules")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="effectiveDetectorRules")
    def effective_detector_rules(self) -> Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleResult']]:
        return pulumi.get(self, "effective_detector_rules")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="sourceDetectorRecipeId")
    def source_detector_recipe_id(self) -> Optional[str]:
        return pulumi.get(self, "source_detector_recipe_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetIds")
    def target_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_ids")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleResult(dict):
    def __init__(__self__, *,
                 candidate_responder_rules: Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleCandidateResponderRuleResult']] = None,
                 data_source_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailResult']] = None,
                 detector: Optional[str] = None,
                 detector_rule_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 entities_mappings: Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleEntitiesMappingResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 managed_list_types: Optional[Sequence[str]] = None,
                 recommendation: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 service_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if candidate_responder_rules is not None:
            pulumi.set(__self__, "candidate_responder_rules", candidate_responder_rules)
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if detector_rule_id is not None:
            pulumi.set(__self__, "detector_rule_id", detector_rule_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entities_mappings is not None:
            pulumi.set(__self__, "entities_mappings", entities_mappings)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if managed_list_types is not None:
            pulumi.set(__self__, "managed_list_types", managed_list_types)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="candidateResponderRules")
    def candidate_responder_rules(self) -> Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleCandidateResponderRuleResult']]:
        return pulumi.get(self, "candidate_responder_rules")

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="detectorRuleId")
    def detector_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_rule_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitiesMappings")
    def entities_mappings(self) -> Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleEntitiesMappingResult']]:
        return pulumi.get(self, "entities_mappings")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managedListTypes")
    def managed_list_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "managed_list_types")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleCandidateResponderRuleResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_preferred: Optional[bool] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_preferred is not None:
            pulumi.set(__self__, "is_preferred", is_preferred)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPreferred")
    def is_preferred(self) -> Optional[bool]:
        return pulumi.get(self, "is_preferred")


@pulumi.output_type
class GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailConfigurationResult']] = None,
                 data_source_id: Optional[str] = None,
                 description: Optional[str] = None,
                 entities_mappings: Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailEntitiesMappingResult']] = None,
                 is_configuration_allowed: Optional[bool] = None,
                 is_enabled: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 recommendation: Optional[str] = None,
                 risk_level: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entities_mappings is not None:
            pulumi.set(__self__, "entities_mappings", entities_mappings)
        if is_configuration_allowed is not None:
            pulumi.set(__self__, "is_configuration_allowed", is_configuration_allowed)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="entitiesMappings")
    def entities_mappings(self) -> Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailEntitiesMappingResult']]:
        return pulumi.get(self, "entities_mappings")

    @property
    @pulumi.getter(name="isConfigurationAllowed")
    def is_configuration_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_configuration_allowed")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")


@pulumi.output_type
class GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 data_type: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None,
                 values: Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailConfigurationValueResult']] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailConfigurationValueResult']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailConfigurationValueResult(dict):
    def __init__(__self__, *,
                 list_type: Optional[str] = None,
                 managed_list_type: Optional[str] = None,
                 value: Optional[str] = None):
        if list_type is not None:
            pulumi.set(__self__, "list_type", list_type)
        if managed_list_type is not None:
            pulumi.set(__self__, "managed_list_type", managed_list_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> Optional[str]:
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter(name="managedListType")
    def managed_list_type(self) -> Optional[str]:
        return pulumi.get(self, "managed_list_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleDetailEntitiesMappingResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 query_field: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if query_field is not None:
            pulumi.set(__self__, "query_field", query_field)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="queryField")
    def query_field(self) -> Optional[str]:
        return pulumi.get(self, "query_field")


@pulumi.output_type
class GetDetectorRecipesDetectorRecipeCollectionItemDetectorRuleEntitiesMappingResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 query_field: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if query_field is not None:
            pulumi.set(__self__, "query_field", query_field)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="queryField")
    def query_field(self) -> Optional[str]:
        return pulumi.get(self, "query_field")


@pulumi.output_type
class GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleResult(dict):
    def __init__(__self__, *,
                 candidate_responder_rules: Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleCandidateResponderRuleResult']] = None,
                 data_source_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailResult']] = None,
                 detector: Optional[str] = None,
                 detector_rule_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 entities_mappings: Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleEntitiesMappingResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 managed_list_types: Optional[Sequence[str]] = None,
                 recommendation: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 service_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if candidate_responder_rules is not None:
            pulumi.set(__self__, "candidate_responder_rules", candidate_responder_rules)
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if detector_rule_id is not None:
            pulumi.set(__self__, "detector_rule_id", detector_rule_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entities_mappings is not None:
            pulumi.set(__self__, "entities_mappings", entities_mappings)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if managed_list_types is not None:
            pulumi.set(__self__, "managed_list_types", managed_list_types)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="candidateResponderRules")
    def candidate_responder_rules(self) -> Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleCandidateResponderRuleResult']]:
        return pulumi.get(self, "candidate_responder_rules")

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="detectorRuleId")
    def detector_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_rule_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitiesMappings")
    def entities_mappings(self) -> Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleEntitiesMappingResult']]:
        return pulumi.get(self, "entities_mappings")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managedListTypes")
    def managed_list_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "managed_list_types")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleCandidateResponderRuleResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_preferred: Optional[bool] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_preferred is not None:
            pulumi.set(__self__, "is_preferred", is_preferred)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPreferred")
    def is_preferred(self) -> Optional[bool]:
        return pulumi.get(self, "is_preferred")


@pulumi.output_type
class GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailConfigurationResult']] = None,
                 is_configuration_allowed: Optional[bool] = None,
                 is_enabled: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 risk_level: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_configuration_allowed is not None:
            pulumi.set(__self__, "is_configuration_allowed", is_configuration_allowed)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isConfigurationAllowed")
    def is_configuration_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_configuration_allowed")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")


@pulumi.output_type
class GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 data_type: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None,
                 values: Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailConfigurationValueResult']] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailConfigurationValueResult']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleDetailConfigurationValueResult(dict):
    def __init__(__self__, *,
                 list_type: Optional[str] = None,
                 managed_list_type: Optional[str] = None,
                 value: Optional[str] = None):
        if list_type is not None:
            pulumi.set(__self__, "list_type", list_type)
        if managed_list_type is not None:
            pulumi.set(__self__, "managed_list_type", managed_list_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> Optional[str]:
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter(name="managedListType")
    def managed_list_type(self) -> Optional[str]:
        return pulumi.get(self, "managed_list_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDetectorRecipesDetectorRecipeCollectionItemEffectiveDetectorRuleEntitiesMappingResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 query_field: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if query_field is not None:
            pulumi.set(__self__, "query_field", query_field)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="queryField")
    def query_field(self) -> Optional[str]:
        return pulumi.get(self, "query_field")


@pulumi.output_type
class GetDetectorRecipesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetGuardTargetTargetDetailResult(dict):
    def __init__(__self__, *,
                 security_zone_display_name: Optional[str] = None,
                 security_zone_id: Optional[str] = None,
                 target_resource_type: Optional[str] = None,
                 target_security_zone_recipes: Optional[Sequence['outputs.GetGuardTargetTargetDetailTargetSecurityZoneRecipeResult']] = None):
        if security_zone_display_name is not None:
            pulumi.set(__self__, "security_zone_display_name", security_zone_display_name)
        if security_zone_id is not None:
            pulumi.set(__self__, "security_zone_id", security_zone_id)
        if target_resource_type is not None:
            pulumi.set(__self__, "target_resource_type", target_resource_type)
        if target_security_zone_recipes is not None:
            pulumi.set(__self__, "target_security_zone_recipes", target_security_zone_recipes)

    @property
    @pulumi.getter(name="securityZoneDisplayName")
    def security_zone_display_name(self) -> Optional[str]:
        return pulumi.get(self, "security_zone_display_name")

    @property
    @pulumi.getter(name="securityZoneId")
    def security_zone_id(self) -> Optional[str]:
        return pulumi.get(self, "security_zone_id")

    @property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_type")

    @property
    @pulumi.getter(name="targetSecurityZoneRecipes")
    def target_security_zone_recipes(self) -> Optional[Sequence['outputs.GetGuardTargetTargetDetailTargetSecurityZoneRecipeResult']]:
        return pulumi.get(self, "target_security_zone_recipes")


@pulumi.output_type
class GetGuardTargetTargetDetailTargetSecurityZoneRecipeResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 owner: Optional[str] = None,
                 security_policies: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if security_policies is not None:
            pulumi.set(__self__, "security_policies", security_policies)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="securityPolicies")
    def security_policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_policies")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetGuardTargetTargetDetectorRecipeResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 detector: Optional[str] = None,
                 detector_recipe_id: Optional[str] = None,
                 detector_rules: Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeDetectorRuleResult']] = None,
                 display_name: Optional[str] = None,
                 effective_detector_rules: Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleResult']] = None,
                 id: Optional[str] = None,
                 owner: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if detector_recipe_id is not None:
            pulumi.set(__self__, "detector_recipe_id", detector_recipe_id)
        if detector_rules is not None:
            pulumi.set(__self__, "detector_rules", detector_rules)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if effective_detector_rules is not None:
            pulumi.set(__self__, "effective_detector_rules", effective_detector_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="detectorRecipeId")
    def detector_recipe_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_recipe_id")

    @property
    @pulumi.getter(name="detectorRules")
    def detector_rules(self) -> Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeDetectorRuleResult']]:
        return pulumi.get(self, "detector_rules")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="effectiveDetectorRules")
    def effective_detector_rules(self) -> Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleResult']]:
        return pulumi.get(self, "effective_detector_rules")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetGuardTargetTargetDetectorRecipeDetectorRuleResult(dict):
    def __init__(__self__, *,
                 data_source_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeDetectorRuleDetailResult']] = None,
                 detector: Optional[str] = None,
                 detector_rule_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 entities_mappings: Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeDetectorRuleEntitiesMappingResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 managed_list_types: Optional[Sequence[str]] = None,
                 recommendation: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 service_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if detector_rule_id is not None:
            pulumi.set(__self__, "detector_rule_id", detector_rule_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entities_mappings is not None:
            pulumi.set(__self__, "entities_mappings", entities_mappings)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if managed_list_types is not None:
            pulumi.set(__self__, "managed_list_types", managed_list_types)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeDetectorRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="detectorRuleId")
    def detector_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_rule_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitiesMappings")
    def entities_mappings(self) -> Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeDetectorRuleEntitiesMappingResult']]:
        return pulumi.get(self, "entities_mappings")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managedListTypes")
    def managed_list_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "managed_list_types")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetGuardTargetTargetDetectorRecipeDetectorRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition_groups: Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeDetectorRuleDetailConditionGroupResult']] = None,
                 configurations: Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeDetectorRuleDetailConfigurationResult']] = None,
                 is_configuration_allowed: Optional[bool] = None,
                 is_enabled: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 risk_level: Optional[str] = None):
        if condition_groups is not None:
            pulumi.set(__self__, "condition_groups", condition_groups)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_configuration_allowed is not None:
            pulumi.set(__self__, "is_configuration_allowed", is_configuration_allowed)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)

    @property
    @pulumi.getter(name="conditionGroups")
    def condition_groups(self) -> Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeDetectorRuleDetailConditionGroupResult']]:
        return pulumi.get(self, "condition_groups")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeDetectorRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isConfigurationAllowed")
    def is_configuration_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_configuration_allowed")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")


@pulumi.output_type
class GetGuardTargetTargetDetectorRecipeDetectorRuleDetailConditionGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 condition: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")


@pulumi.output_type
class GetGuardTargetTargetDetectorRecipeDetectorRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 data_type: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None,
                 values: Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeDetectorRuleDetailConfigurationValueResult']] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeDetectorRuleDetailConfigurationValueResult']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetGuardTargetTargetDetectorRecipeDetectorRuleDetailConfigurationValueResult(dict):
    def __init__(__self__, *,
                 list_type: Optional[str] = None,
                 managed_list_type: Optional[str] = None,
                 value: Optional[str] = None):
        if list_type is not None:
            pulumi.set(__self__, "list_type", list_type)
        if managed_list_type is not None:
            pulumi.set(__self__, "managed_list_type", managed_list_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> Optional[str]:
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter(name="managedListType")
    def managed_list_type(self) -> Optional[str]:
        return pulumi.get(self, "managed_list_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGuardTargetTargetDetectorRecipeDetectorRuleEntitiesMappingResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 query_field: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if query_field is not None:
            pulumi.set(__self__, "query_field", query_field)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="queryField")
    def query_field(self) -> Optional[str]:
        return pulumi.get(self, "query_field")


@pulumi.output_type
class GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleResult(dict):
    def __init__(__self__, *,
                 data_source_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailResult']] = None,
                 detector: Optional[str] = None,
                 detector_rule_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 entities_mappings: Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleEntitiesMappingResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 managed_list_types: Optional[Sequence[str]] = None,
                 recommendation: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 service_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if detector_rule_id is not None:
            pulumi.set(__self__, "detector_rule_id", detector_rule_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entities_mappings is not None:
            pulumi.set(__self__, "entities_mappings", entities_mappings)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if managed_list_types is not None:
            pulumi.set(__self__, "managed_list_types", managed_list_types)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="detectorRuleId")
    def detector_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_rule_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitiesMappings")
    def entities_mappings(self) -> Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleEntitiesMappingResult']]:
        return pulumi.get(self, "entities_mappings")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managedListTypes")
    def managed_list_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "managed_list_types")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition_groups: Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroupResult']] = None,
                 configurations: Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationResult']] = None,
                 is_configuration_allowed: Optional[bool] = None,
                 is_enabled: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 risk_level: Optional[str] = None):
        if condition_groups is not None:
            pulumi.set(__self__, "condition_groups", condition_groups)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_configuration_allowed is not None:
            pulumi.set(__self__, "is_configuration_allowed", is_configuration_allowed)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)

    @property
    @pulumi.getter(name="conditionGroups")
    def condition_groups(self) -> Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroupResult']]:
        return pulumi.get(self, "condition_groups")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isConfigurationAllowed")
    def is_configuration_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_configuration_allowed")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")


@pulumi.output_type
class GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 condition: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")


@pulumi.output_type
class GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 data_type: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None,
                 values: Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValueResult']] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValueResult']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValueResult(dict):
    def __init__(__self__, *,
                 list_type: Optional[str] = None,
                 managed_list_type: Optional[str] = None,
                 value: Optional[str] = None):
        if list_type is not None:
            pulumi.set(__self__, "list_type", list_type)
        if managed_list_type is not None:
            pulumi.set(__self__, "managed_list_type", managed_list_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> Optional[str]:
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter(name="managedListType")
    def managed_list_type(self) -> Optional[str]:
        return pulumi.get(self, "managed_list_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGuardTargetTargetDetectorRecipeEffectiveDetectorRuleEntitiesMappingResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 query_field: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if query_field is not None:
            pulumi.set(__self__, "query_field", query_field)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="queryField")
    def query_field(self) -> Optional[str]:
        return pulumi.get(self, "query_field")


@pulumi.output_type
class GetGuardTargetTargetResponderRecipeResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 effective_responder_rules: Optional[Sequence['outputs.GetGuardTargetTargetResponderRecipeEffectiveResponderRuleResult']] = None,
                 id: Optional[str] = None,
                 owner: Optional[str] = None,
                 responder_recipe_id: Optional[str] = None,
                 responder_rules: Optional[Sequence['outputs.GetGuardTargetTargetResponderRecipeResponderRuleResult']] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if effective_responder_rules is not None:
            pulumi.set(__self__, "effective_responder_rules", effective_responder_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if responder_recipe_id is not None:
            pulumi.set(__self__, "responder_recipe_id", responder_recipe_id)
        if responder_rules is not None:
            pulumi.set(__self__, "responder_rules", responder_rules)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="effectiveResponderRules")
    def effective_responder_rules(self) -> Optional[Sequence['outputs.GetGuardTargetTargetResponderRecipeEffectiveResponderRuleResult']]:
        return pulumi.get(self, "effective_responder_rules")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="responderRecipeId")
    def responder_recipe_id(self) -> Optional[str]:
        return pulumi.get(self, "responder_recipe_id")

    @property
    @pulumi.getter(name="responderRules")
    def responder_rules(self) -> Optional[Sequence['outputs.GetGuardTargetTargetResponderRecipeResponderRuleResult']]:
        return pulumi.get(self, "responder_rules")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetGuardTargetTargetResponderRecipeEffectiveResponderRuleResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailResult']] = None,
                 display_name: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 policies: Optional[Sequence[str]] = None,
                 responder_rule_id: Optional[str] = None,
                 state: Optional[str] = None,
                 supported_modes: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if responder_rule_id is not None:
            pulumi.set(__self__, "responder_rule_id", responder_rule_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_modes is not None:
            pulumi.set(__self__, "supported_modes", supported_modes)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="responderRuleId")
    def responder_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "responder_rule_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedModes")
    def supported_modes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_modes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailConfigurationResult']] = None,
                 is_enabled: Optional[bool] = None,
                 mode: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetGuardTargetTargetResponderRecipeEffectiveResponderRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGuardTargetTargetResponderRecipeResponderRuleResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetGuardTargetTargetResponderRecipeResponderRuleDetailResult']] = None,
                 display_name: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 policies: Optional[Sequence[str]] = None,
                 responder_rule_id: Optional[str] = None,
                 state: Optional[str] = None,
                 supported_modes: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if responder_rule_id is not None:
            pulumi.set(__self__, "responder_rule_id", responder_rule_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_modes is not None:
            pulumi.set(__self__, "supported_modes", supported_modes)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetGuardTargetTargetResponderRecipeResponderRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="responderRuleId")
    def responder_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "responder_rule_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedModes")
    def supported_modes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_modes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGuardTargetTargetResponderRecipeResponderRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.GetGuardTargetTargetResponderRecipeResponderRuleDetailConfigurationResult']] = None,
                 is_enabled: Optional[bool] = None,
                 mode: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetGuardTargetTargetResponderRecipeResponderRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetGuardTargetTargetResponderRecipeResponderRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGuardTargetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetGuardTargetsTargetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 inherited_by_compartments: Optional[Sequence[str]] = None,
                 lifecyle_details: Optional[str] = None,
                 recipe_count: Optional[int] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_details: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetailResult']] = None,
                 target_detector_recipes: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeResult']] = None,
                 target_resource_id: Optional[str] = None,
                 target_resource_type: Optional[str] = None,
                 target_responder_recipes: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetResponderRecipeResult']] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inherited_by_compartments is not None:
            pulumi.set(__self__, "inherited_by_compartments", inherited_by_compartments)
        if lifecyle_details is not None:
            pulumi.set(__self__, "lifecyle_details", lifecyle_details)
        if recipe_count is not None:
            pulumi.set(__self__, "recipe_count", recipe_count)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_details is not None:
            pulumi.set(__self__, "target_details", target_details)
        if target_detector_recipes is not None:
            pulumi.set(__self__, "target_detector_recipes", target_detector_recipes)
        if target_resource_id is not None:
            pulumi.set(__self__, "target_resource_id", target_resource_id)
        if target_resource_type is not None:
            pulumi.set(__self__, "target_resource_type", target_resource_type)
        if target_responder_recipes is not None:
            pulumi.set(__self__, "target_responder_recipes", target_responder_recipes)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inheritedByCompartments")
    def inherited_by_compartments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "inherited_by_compartments")

    @property
    @pulumi.getter(name="lifecyleDetails")
    def lifecyle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecyle_details")

    @property
    @pulumi.getter(name="recipeCount")
    def recipe_count(self) -> Optional[int]:
        return pulumi.get(self, "recipe_count")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetDetails")
    def target_details(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetailResult']]:
        return pulumi.get(self, "target_details")

    @property
    @pulumi.getter(name="targetDetectorRecipes")
    def target_detector_recipes(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeResult']]:
        return pulumi.get(self, "target_detector_recipes")

    @property
    @pulumi.getter(name="targetResourceId")
    def target_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_id")

    @property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_type")

    @property
    @pulumi.getter(name="targetResponderRecipes")
    def target_responder_recipes(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetResponderRecipeResult']]:
        return pulumi.get(self, "target_responder_recipes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetDetailResult(dict):
    def __init__(__self__, *,
                 security_zone_display_name: Optional[str] = None,
                 security_zone_id: Optional[str] = None,
                 target_resource_type: Optional[str] = None,
                 target_security_zone_recipes: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetailTargetSecurityZoneRecipeResult']] = None):
        if security_zone_display_name is not None:
            pulumi.set(__self__, "security_zone_display_name", security_zone_display_name)
        if security_zone_id is not None:
            pulumi.set(__self__, "security_zone_id", security_zone_id)
        if target_resource_type is not None:
            pulumi.set(__self__, "target_resource_type", target_resource_type)
        if target_security_zone_recipes is not None:
            pulumi.set(__self__, "target_security_zone_recipes", target_security_zone_recipes)

    @property
    @pulumi.getter(name="securityZoneDisplayName")
    def security_zone_display_name(self) -> Optional[str]:
        return pulumi.get(self, "security_zone_display_name")

    @property
    @pulumi.getter(name="securityZoneId")
    def security_zone_id(self) -> Optional[str]:
        return pulumi.get(self, "security_zone_id")

    @property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> Optional[str]:
        return pulumi.get(self, "target_resource_type")

    @property
    @pulumi.getter(name="targetSecurityZoneRecipes")
    def target_security_zone_recipes(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetailTargetSecurityZoneRecipeResult']]:
        return pulumi.get(self, "target_security_zone_recipes")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetDetailTargetSecurityZoneRecipeResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 owner: Optional[str] = None,
                 security_policies: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if security_policies is not None:
            pulumi.set(__self__, "security_policies", security_policies)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="securityPolicies")
    def security_policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_policies")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetDetectorRecipeResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 detector: Optional[str] = None,
                 detector_recipe_id: Optional[str] = None,
                 detector_rules: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleResult']] = None,
                 display_name: Optional[str] = None,
                 effective_detector_rules: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleResult']] = None,
                 id: Optional[str] = None,
                 owner: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if detector_recipe_id is not None:
            pulumi.set(__self__, "detector_recipe_id", detector_recipe_id)
        if detector_rules is not None:
            pulumi.set(__self__, "detector_rules", detector_rules)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if effective_detector_rules is not None:
            pulumi.set(__self__, "effective_detector_rules", effective_detector_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="detectorRecipeId")
    def detector_recipe_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_recipe_id")

    @property
    @pulumi.getter(name="detectorRules")
    def detector_rules(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleResult']]:
        return pulumi.get(self, "detector_rules")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="effectiveDetectorRules")
    def effective_detector_rules(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleResult']]:
        return pulumi.get(self, "effective_detector_rules")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleResult(dict):
    def __init__(__self__, *,
                 data_source_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailResult']] = None,
                 detector: Optional[str] = None,
                 detector_rule_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 entities_mappings: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleEntitiesMappingResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 managed_list_types: Optional[Sequence[str]] = None,
                 recommendation: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 service_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if detector_rule_id is not None:
            pulumi.set(__self__, "detector_rule_id", detector_rule_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entities_mappings is not None:
            pulumi.set(__self__, "entities_mappings", entities_mappings)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if managed_list_types is not None:
            pulumi.set(__self__, "managed_list_types", managed_list_types)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="detectorRuleId")
    def detector_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_rule_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitiesMappings")
    def entities_mappings(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleEntitiesMappingResult']]:
        return pulumi.get(self, "entities_mappings")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managedListTypes")
    def managed_list_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "managed_list_types")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition_groups: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConditionGroupResult']] = None,
                 configurations: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConfigurationResult']] = None,
                 is_configuration_allowed: Optional[bool] = None,
                 is_enabled: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 risk_level: Optional[str] = None):
        if condition_groups is not None:
            pulumi.set(__self__, "condition_groups", condition_groups)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_configuration_allowed is not None:
            pulumi.set(__self__, "is_configuration_allowed", is_configuration_allowed)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)

    @property
    @pulumi.getter(name="conditionGroups")
    def condition_groups(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConditionGroupResult']]:
        return pulumi.get(self, "condition_groups")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isConfigurationAllowed")
    def is_configuration_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_configuration_allowed")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConditionGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 condition: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 data_type: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None,
                 values: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConfigurationValueResult']] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConfigurationValueResult']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleDetailConfigurationValueResult(dict):
    def __init__(__self__, *,
                 list_type: Optional[str] = None,
                 managed_list_type: Optional[str] = None,
                 value: Optional[str] = None):
        if list_type is not None:
            pulumi.set(__self__, "list_type", list_type)
        if managed_list_type is not None:
            pulumi.set(__self__, "managed_list_type", managed_list_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> Optional[str]:
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter(name="managedListType")
    def managed_list_type(self) -> Optional[str]:
        return pulumi.get(self, "managed_list_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetDetectorRecipeDetectorRuleEntitiesMappingResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 query_field: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if query_field is not None:
            pulumi.set(__self__, "query_field", query_field)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="queryField")
    def query_field(self) -> Optional[str]:
        return pulumi.get(self, "query_field")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleResult(dict):
    def __init__(__self__, *,
                 data_source_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailResult']] = None,
                 detector: Optional[str] = None,
                 detector_rule_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 entities_mappings: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleEntitiesMappingResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 managed_list_types: Optional[Sequence[str]] = None,
                 recommendation: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 service_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if data_source_id is not None:
            pulumi.set(__self__, "data_source_id", data_source_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if detector is not None:
            pulumi.set(__self__, "detector", detector)
        if detector_rule_id is not None:
            pulumi.set(__self__, "detector_rule_id", detector_rule_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entities_mappings is not None:
            pulumi.set(__self__, "entities_mappings", entities_mappings)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if managed_list_types is not None:
            pulumi.set(__self__, "managed_list_types", managed_list_types)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="dataSourceId")
    def data_source_id(self) -> Optional[str]:
        return pulumi.get(self, "data_source_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def detector(self) -> Optional[str]:
        return pulumi.get(self, "detector")

    @property
    @pulumi.getter(name="detectorRuleId")
    def detector_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "detector_rule_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entitiesMappings")
    def entities_mappings(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleEntitiesMappingResult']]:
        return pulumi.get(self, "entities_mappings")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="managedListTypes")
    def managed_list_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "managed_list_types")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition_groups: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroupResult']] = None,
                 configurations: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationResult']] = None,
                 is_configuration_allowed: Optional[bool] = None,
                 is_enabled: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 risk_level: Optional[str] = None):
        if condition_groups is not None:
            pulumi.set(__self__, "condition_groups", condition_groups)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_configuration_allowed is not None:
            pulumi.set(__self__, "is_configuration_allowed", is_configuration_allowed)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)

    @property
    @pulumi.getter(name="conditionGroups")
    def condition_groups(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroupResult']]:
        return pulumi.get(self, "condition_groups")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isConfigurationAllowed")
    def is_configuration_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_configuration_allowed")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[str]:
        return pulumi.get(self, "risk_level")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConditionGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 condition: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 data_type: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None,
                 values: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValueResult']] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValueResult']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleDetailConfigurationValueResult(dict):
    def __init__(__self__, *,
                 list_type: Optional[str] = None,
                 managed_list_type: Optional[str] = None,
                 value: Optional[str] = None):
        if list_type is not None:
            pulumi.set(__self__, "list_type", list_type)
        if managed_list_type is not None:
            pulumi.set(__self__, "managed_list_type", managed_list_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> Optional[str]:
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter(name="managedListType")
    def managed_list_type(self) -> Optional[str]:
        return pulumi.get(self, "managed_list_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetDetectorRecipeEffectiveDetectorRuleEntitiesMappingResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 query_field: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if query_field is not None:
            pulumi.set(__self__, "query_field", query_field)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="queryField")
    def query_field(self) -> Optional[str]:
        return pulumi.get(self, "query_field")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetResponderRecipeResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 effective_responder_rules: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleResult']] = None,
                 id: Optional[str] = None,
                 owner: Optional[str] = None,
                 responder_recipe_id: Optional[str] = None,
                 responder_rules: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleResult']] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if effective_responder_rules is not None:
            pulumi.set(__self__, "effective_responder_rules", effective_responder_rules)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if responder_recipe_id is not None:
            pulumi.set(__self__, "responder_recipe_id", responder_recipe_id)
        if responder_rules is not None:
            pulumi.set(__self__, "responder_rules", responder_rules)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="effectiveResponderRules")
    def effective_responder_rules(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleResult']]:
        return pulumi.get(self, "effective_responder_rules")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="responderRecipeId")
    def responder_recipe_id(self) -> Optional[str]:
        return pulumi.get(self, "responder_recipe_id")

    @property
    @pulumi.getter(name="responderRules")
    def responder_rules(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleResult']]:
        return pulumi.get(self, "responder_rules")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleDetailResult']] = None,
                 display_name: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 policies: Optional[Sequence[str]] = None,
                 responder_rule_id: Optional[str] = None,
                 state: Optional[str] = None,
                 supported_modes: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if responder_rule_id is not None:
            pulumi.set(__self__, "responder_rule_id", responder_rule_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_modes is not None:
            pulumi.set(__self__, "supported_modes", supported_modes)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="responderRuleId")
    def responder_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "responder_rule_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedModes")
    def supported_modes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_modes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleDetailConfigurationResult']] = None,
                 is_enabled: Optional[bool] = None,
                 mode: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetResponderRecipeEffectiveResponderRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleDetailResult']] = None,
                 display_name: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 policies: Optional[Sequence[str]] = None,
                 responder_rule_id: Optional[str] = None,
                 state: Optional[str] = None,
                 supported_modes: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if responder_rule_id is not None:
            pulumi.set(__self__, "responder_rule_id", responder_rule_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_modes is not None:
            pulumi.set(__self__, "supported_modes", supported_modes)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="responderRuleId")
    def responder_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "responder_rule_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedModes")
    def supported_modes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_modes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleDetailConfigurationResult']] = None,
                 is_enabled: Optional[bool] = None,
                 mode: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetGuardTargetsTargetCollectionItemTargetResponderRecipeResponderRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetManagedListsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedListsManagedListCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedListsManagedListCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedListsManagedListCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedListsManagedListCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 feed_provider: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_editable: Optional[bool] = None,
                 lifecyle_details: Optional[str] = None,
                 list_items: Optional[Sequence[str]] = None,
                 list_type: Optional[str] = None,
                 source_managed_list_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if feed_provider is not None:
            pulumi.set(__self__, "feed_provider", feed_provider)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_editable is not None:
            pulumi.set(__self__, "is_editable", is_editable)
        if lifecyle_details is not None:
            pulumi.set(__self__, "lifecyle_details", lifecyle_details)
        if list_items is not None:
            pulumi.set(__self__, "list_items", list_items)
        if list_type is not None:
            pulumi.set(__self__, "list_type", list_type)
        if source_managed_list_id is not None:
            pulumi.set(__self__, "source_managed_list_id", source_managed_list_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="feedProvider")
    def feed_provider(self) -> Optional[str]:
        return pulumi.get(self, "feed_provider")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEditable")
    def is_editable(self) -> Optional[bool]:
        return pulumi.get(self, "is_editable")

    @property
    @pulumi.getter(name="lifecyleDetails")
    def lifecyle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecyle_details")

    @property
    @pulumi.getter(name="listItems")
    def list_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "list_items")

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> Optional[str]:
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter(name="sourceManagedListId")
    def source_managed_list_id(self) -> Optional[str]:
        return pulumi.get(self, "source_managed_list_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetProblemEntitiesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProblemEntitiesProblemEntityCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetProblemEntitiesProblemEntityCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetProblemEntitiesProblemEntityCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProblemEntitiesProblemEntityCollectionItemResult(dict):
    def __init__(__self__, *,
                 entity_details: Optional[Sequence['outputs.GetProblemEntitiesProblemEntityCollectionItemEntityDetailResult']] = None,
                 problem_id: Optional[str] = None,
                 regions: Optional[Sequence[str]] = None,
                 result_url: Optional[str] = None,
                 time_first_detected: Optional[str] = None,
                 time_last_detected: Optional[str] = None):
        if entity_details is not None:
            pulumi.set(__self__, "entity_details", entity_details)
        if problem_id is not None:
            pulumi.set(__self__, "problem_id", problem_id)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if result_url is not None:
            pulumi.set(__self__, "result_url", result_url)
        if time_first_detected is not None:
            pulumi.set(__self__, "time_first_detected", time_first_detected)
        if time_last_detected is not None:
            pulumi.set(__self__, "time_last_detected", time_last_detected)

    @property
    @pulumi.getter(name="entityDetails")
    def entity_details(self) -> Optional[Sequence['outputs.GetProblemEntitiesProblemEntityCollectionItemEntityDetailResult']]:
        return pulumi.get(self, "entity_details")

    @property
    @pulumi.getter(name="problemId")
    def problem_id(self) -> Optional[str]:
        return pulumi.get(self, "problem_id")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="resultUrl")
    def result_url(self) -> Optional[str]:
        return pulumi.get(self, "result_url")

    @property
    @pulumi.getter(name="timeFirstDetected")
    def time_first_detected(self) -> Optional[str]:
        return pulumi.get(self, "time_first_detected")

    @property
    @pulumi.getter(name="timeLastDetected")
    def time_last_detected(self) -> Optional[str]:
        return pulumi.get(self, "time_last_detected")


@pulumi.output_type
class GetProblemEntitiesProblemEntityCollectionItemEntityDetailResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProblemEntityItemResult(dict):
    def __init__(__self__, *,
                 entity_details: Optional[Sequence['outputs.GetProblemEntityItemEntityDetailResult']] = None,
                 problem_id: Optional[str] = None,
                 regions: Optional[Sequence[str]] = None,
                 result_url: Optional[str] = None,
                 time_first_detected: Optional[str] = None,
                 time_last_detected: Optional[str] = None):
        if entity_details is not None:
            pulumi.set(__self__, "entity_details", entity_details)
        if problem_id is not None:
            pulumi.set(__self__, "problem_id", problem_id)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if result_url is not None:
            pulumi.set(__self__, "result_url", result_url)
        if time_first_detected is not None:
            pulumi.set(__self__, "time_first_detected", time_first_detected)
        if time_last_detected is not None:
            pulumi.set(__self__, "time_last_detected", time_last_detected)

    @property
    @pulumi.getter(name="entityDetails")
    def entity_details(self) -> Optional[Sequence['outputs.GetProblemEntityItemEntityDetailResult']]:
        return pulumi.get(self, "entity_details")

    @property
    @pulumi.getter(name="problemId")
    def problem_id(self) -> Optional[str]:
        return pulumi.get(self, "problem_id")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="resultUrl")
    def result_url(self) -> Optional[str]:
        return pulumi.get(self, "result_url")

    @property
    @pulumi.getter(name="timeFirstDetected")
    def time_first_detected(self) -> Optional[str]:
        return pulumi.get(self, "time_first_detected")

    @property
    @pulumi.getter(name="timeLastDetected")
    def time_last_detected(self) -> Optional[str]:
        return pulumi.get(self, "time_last_detected")


@pulumi.output_type
class GetProblemEntityItemEntityDetailResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResponderRecipeEffectiveResponderRuleResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetResponderRecipeEffectiveResponderRuleDetailResult']] = None,
                 display_name: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 policies: Optional[Sequence[str]] = None,
                 responder_rule_id: Optional[str] = None,
                 state: Optional[str] = None,
                 supported_modes: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if responder_rule_id is not None:
            pulumi.set(__self__, "responder_rule_id", responder_rule_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_modes is not None:
            pulumi.set(__self__, "supported_modes", supported_modes)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetResponderRecipeEffectiveResponderRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="responderRuleId")
    def responder_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "responder_rule_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedModes")
    def supported_modes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_modes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetResponderRecipeEffectiveResponderRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.GetResponderRecipeEffectiveResponderRuleDetailConfigurationResult']] = None,
                 is_enabled: Optional[bool] = None,
                 mode: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetResponderRecipeEffectiveResponderRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetResponderRecipeEffectiveResponderRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResponderRecipeResponderRuleResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetResponderRecipeResponderRuleDetailResult']] = None,
                 display_name: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 policies: Optional[Sequence[str]] = None,
                 responder_rule_id: Optional[str] = None,
                 state: Optional[str] = None,
                 supported_modes: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if responder_rule_id is not None:
            pulumi.set(__self__, "responder_rule_id", responder_rule_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_modes is not None:
            pulumi.set(__self__, "supported_modes", supported_modes)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetResponderRecipeResponderRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="responderRuleId")
    def responder_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "responder_rule_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedModes")
    def supported_modes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_modes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetResponderRecipeResponderRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.GetResponderRecipeResponderRuleDetailConfigurationResult']] = None,
                 is_enabled: Optional[bool] = None,
                 mode: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetResponderRecipeResponderRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetResponderRecipeResponderRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResponderRecipesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetResponderRecipesResponderRecipeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetResponderRecipesResponderRecipeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetResponderRecipesResponderRecipeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetResponderRecipesResponderRecipeCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 effective_responder_rules: Optional[Sequence['outputs.GetResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 owner: Optional[str] = None,
                 responder_rules: Optional[Sequence['outputs.GetResponderRecipesResponderRecipeCollectionItemResponderRuleResult']] = None,
                 source_responder_recipe_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if effective_responder_rules is not None:
            pulumi.set(__self__, "effective_responder_rules", effective_responder_rules)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if responder_rules is not None:
            pulumi.set(__self__, "responder_rules", responder_rules)
        if source_responder_recipe_id is not None:
            pulumi.set(__self__, "source_responder_recipe_id", source_responder_recipe_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="effectiveResponderRules")
    def effective_responder_rules(self) -> Optional[Sequence['outputs.GetResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleResult']]:
        return pulumi.get(self, "effective_responder_rules")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="responderRules")
    def responder_rules(self) -> Optional[Sequence['outputs.GetResponderRecipesResponderRecipeCollectionItemResponderRuleResult']]:
        return pulumi.get(self, "responder_rules")

    @property
    @pulumi.getter(name="sourceResponderRecipeId")
    def source_responder_recipe_id(self) -> Optional[str]:
        return pulumi.get(self, "source_responder_recipe_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleDetailResult']] = None,
                 display_name: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 policies: Optional[Sequence[str]] = None,
                 responder_rule_id: Optional[str] = None,
                 state: Optional[str] = None,
                 supported_modes: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if responder_rule_id is not None:
            pulumi.set(__self__, "responder_rule_id", responder_rule_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_modes is not None:
            pulumi.set(__self__, "supported_modes", supported_modes)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="responderRuleId")
    def responder_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "responder_rule_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedModes")
    def supported_modes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_modes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.GetResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleDetailConfigurationResult']] = None,
                 is_enabled: Optional[bool] = None,
                 mode: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetResponderRecipesResponderRecipeCollectionItemEffectiveResponderRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetResponderRecipesResponderRecipeCollectionItemResponderRuleResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 details: Optional[Sequence['outputs.GetResponderRecipesResponderRecipeCollectionItemResponderRuleDetailResult']] = None,
                 display_name: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 policies: Optional[Sequence[str]] = None,
                 responder_rule_id: Optional[str] = None,
                 state: Optional[str] = None,
                 supported_modes: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if responder_rule_id is not None:
            pulumi.set(__self__, "responder_rule_id", responder_rule_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_modes is not None:
            pulumi.set(__self__, "supported_modes", supported_modes)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetResponderRecipesResponderRecipeCollectionItemResponderRuleDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="responderRuleId")
    def responder_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "responder_rule_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedModes")
    def supported_modes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_modes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetResponderRecipesResponderRecipeCollectionItemResponderRuleDetailResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 configurations: Optional[Sequence['outputs.GetResponderRecipesResponderRecipeCollectionItemResponderRuleDetailConfigurationResult']] = None,
                 is_enabled: Optional[bool] = None,
                 mode: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.GetResponderRecipesResponderRecipeCollectionItemResponderRuleDetailConfigurationResult']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetResponderRecipesResponderRecipeCollectionItemResponderRuleDetailConfigurationResult(dict):
    def __init__(__self__, *,
                 config_key: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if config_key is not None:
            pulumi.set(__self__, "config_key", config_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="configKey")
    def config_key(self) -> Optional[str]:
        return pulumi.get(self, "config_key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityPoliciesSecurityPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSecurityPoliciesSecurityPolicyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSecurityPoliciesSecurityPolicyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityPoliciesSecurityPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 friendly_name: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 owner: Optional[str] = None,
                 services: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[str]:
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSecurityRecipesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityRecipesSecurityRecipeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSecurityRecipesSecurityRecipeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSecurityRecipesSecurityRecipeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityRecipesSecurityRecipeCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 owner: Optional[str] = None,
                 security_policies: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if security_policies is not None:
            pulumi.set(__self__, "security_policies", security_policies)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="securityPolicies")
    def security_policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_policies")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSecurityZonesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityZonesSecurityZoneCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSecurityZonesSecurityZoneCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSecurityZonesSecurityZoneCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityZonesSecurityZoneCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 inherited_by_compartments: Optional[Sequence[str]] = None,
                 lifecycle_details: Optional[str] = None,
                 security_zone_recipe_id: Optional[str] = None,
                 security_zone_target_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inherited_by_compartments is not None:
            pulumi.set(__self__, "inherited_by_compartments", inherited_by_compartments)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if security_zone_recipe_id is not None:
            pulumi.set(__self__, "security_zone_recipe_id", security_zone_recipe_id)
        if security_zone_target_id is not None:
            pulumi.set(__self__, "security_zone_target_id", security_zone_target_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inheritedByCompartments")
    def inherited_by_compartments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "inherited_by_compartments")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="securityZoneRecipeId")
    def security_zone_recipe_id(self) -> Optional[str]:
        return pulumi.get(self, "security_zone_recipe_id")

    @property
    @pulumi.getter(name="securityZoneTargetId")
    def security_zone_target_id(self) -> Optional[str]:
        return pulumi.get(self, "security_zone_target_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


