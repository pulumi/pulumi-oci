# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TargetArgs', 'Target']

@pulumi.input_type
class TargetArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 target_resource_id: pulumi.Input[str],
                 target_resource_type: pulumi.Input[str],
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 target_detector_recipes: Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetDetectorRecipeArgs']]]] = None,
                 target_responder_recipes: Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetResponderRecipeArgs']]]] = None):
        """
        The set of arguments for constructing a Target resource.
        :param pulumi.Input[str] compartment_id: (Updatable) compartment associated with condition
        :param pulumi.Input[str] display_name: (Updatable) DetectorTemplate identifier.
               
               Avoid entering confidential information.
        :param pulumi.Input[str] target_resource_id: Resource ID which the target uses to monitor
        :param pulumi.Input[str] target_resource_type: possible type of targets(COMPARTMENT/FACLOUD)
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: The target description.
               
               Avoid entering confidential information.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
               
               Avoid entering confidential information.
        :param pulumi.Input[str] state: (Updatable) The current state of the DetectorRule.
        :param pulumi.Input[Sequence[pulumi.Input['TargetTargetDetectorRecipeArgs']]] target_detector_recipes: (Updatable) List of detector recipes to associate with target
        :param pulumi.Input[Sequence[pulumi.Input['TargetTargetResponderRecipeArgs']]] target_responder_recipes: (Updatable) List of responder recipes to associate with target
        """
        TargetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            display_name=display_name,
            target_resource_id=target_resource_id,
            target_resource_type=target_resource_type,
            defined_tags=defined_tags,
            description=description,
            freeform_tags=freeform_tags,
            state=state,
            target_detector_recipes=target_detector_recipes,
            target_responder_recipes=target_responder_recipes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: pulumi.Input[str],
             display_name: pulumi.Input[str],
             target_resource_id: pulumi.Input[str],
             target_resource_type: pulumi.Input[str],
             defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             state: Optional[pulumi.Input[str]] = None,
             target_detector_recipes: Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetDetectorRecipeArgs']]]] = None,
             target_responder_recipes: Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetResponderRecipeArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'targetResourceId' in kwargs:
            target_resource_id = kwargs['targetResourceId']
        if 'targetResourceType' in kwargs:
            target_resource_type = kwargs['targetResourceType']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'targetDetectorRecipes' in kwargs:
            target_detector_recipes = kwargs['targetDetectorRecipes']
        if 'targetResponderRecipes' in kwargs:
            target_responder_recipes = kwargs['targetResponderRecipes']

        _setter("compartment_id", compartment_id)
        _setter("display_name", display_name)
        _setter("target_resource_id", target_resource_id)
        _setter("target_resource_type", target_resource_type)
        if defined_tags is not None:
            _setter("defined_tags", defined_tags)
        if description is not None:
            _setter("description", description)
        if freeform_tags is not None:
            _setter("freeform_tags", freeform_tags)
        if state is not None:
            _setter("state", state)
        if target_detector_recipes is not None:
            _setter("target_detector_recipes", target_detector_recipes)
        if target_responder_recipes is not None:
            _setter("target_responder_recipes", target_responder_recipes)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        (Updatable) compartment associated with condition
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        (Updatable) DetectorTemplate identifier.

        Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="targetResourceId")
    def target_resource_id(self) -> pulumi.Input[str]:
        """
        Resource ID which the target uses to monitor
        """
        return pulumi.get(self, "target_resource_id")

    @target_resource_id.setter
    def target_resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_id", value)

    @property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> pulumi.Input[str]:
        """
        possible type of targets(COMPARTMENT/FACLOUD)
        """
        return pulumi.get(self, "target_resource_type")

    @target_resource_type.setter
    def target_resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource_type", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The target description.

        Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`

        Avoid entering confidential information.
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The current state of the DetectorRule.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="targetDetectorRecipes")
    def target_detector_recipes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetDetectorRecipeArgs']]]]:
        """
        (Updatable) List of detector recipes to associate with target
        """
        return pulumi.get(self, "target_detector_recipes")

    @target_detector_recipes.setter
    def target_detector_recipes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetDetectorRecipeArgs']]]]):
        pulumi.set(self, "target_detector_recipes", value)

    @property
    @pulumi.getter(name="targetResponderRecipes")
    def target_responder_recipes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetResponderRecipeArgs']]]]:
        """
        (Updatable) List of responder recipes to associate with target
        """
        return pulumi.get(self, "target_responder_recipes")

    @target_responder_recipes.setter
    def target_responder_recipes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetResponderRecipeArgs']]]]):
        pulumi.set(self, "target_responder_recipes", value)


@pulumi.input_type
class _TargetState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 inherited_by_compartments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 lifecyle_details: Optional[pulumi.Input[str]] = None,
                 recipe_count: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 target_details: Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetDetailArgs']]]] = None,
                 target_detector_recipes: Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetDetectorRecipeArgs']]]] = None,
                 target_resource_id: Optional[pulumi.Input[str]] = None,
                 target_resource_type: Optional[pulumi.Input[str]] = None,
                 target_responder_recipes: Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetResponderRecipeArgs']]]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Target resources.
        :param pulumi.Input[str] compartment_id: (Updatable) compartment associated with condition
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: The target description.
               
               Avoid entering confidential information.
        :param pulumi.Input[str] display_name: (Updatable) DetectorTemplate identifier.
               
               Avoid entering confidential information.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
               
               Avoid entering confidential information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] inherited_by_compartments: List of inherited compartments
        :param pulumi.Input[str] lifecyle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param pulumi.Input[int] recipe_count: Total number of recipes attached to target
        :param pulumi.Input[str] state: (Updatable) The current state of the DetectorRule.
        :param pulumi.Input[Mapping[str, Any]] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input[Sequence[pulumi.Input['TargetTargetDetailArgs']]] target_details: Details specific to the target type.
        :param pulumi.Input[Sequence[pulumi.Input['TargetTargetDetectorRecipeArgs']]] target_detector_recipes: (Updatable) List of detector recipes to associate with target
        :param pulumi.Input[str] target_resource_id: Resource ID which the target uses to monitor
        :param pulumi.Input[str] target_resource_type: possible type of targets(COMPARTMENT/FACLOUD)
        :param pulumi.Input[Sequence[pulumi.Input['TargetTargetResponderRecipeArgs']]] target_responder_recipes: (Updatable) List of responder recipes to associate with target
        :param pulumi.Input[str] time_created: The date and time the target was created. Format defined by RFC3339.
        :param pulumi.Input[str] time_updated: The date and time the target was updated. Format defined by RFC3339.
        """
        _TargetState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            description=description,
            display_name=display_name,
            freeform_tags=freeform_tags,
            inherited_by_compartments=inherited_by_compartments,
            lifecyle_details=lifecyle_details,
            recipe_count=recipe_count,
            state=state,
            system_tags=system_tags,
            target_details=target_details,
            target_detector_recipes=target_detector_recipes,
            target_resource_id=target_resource_id,
            target_resource_type=target_resource_type,
            target_responder_recipes=target_responder_recipes,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: Optional[pulumi.Input[str]] = None,
             defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             display_name: Optional[pulumi.Input[str]] = None,
             freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             inherited_by_compartments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             lifecyle_details: Optional[pulumi.Input[str]] = None,
             recipe_count: Optional[pulumi.Input[int]] = None,
             state: Optional[pulumi.Input[str]] = None,
             system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             target_details: Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetDetailArgs']]]] = None,
             target_detector_recipes: Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetDetectorRecipeArgs']]]] = None,
             target_resource_id: Optional[pulumi.Input[str]] = None,
             target_resource_type: Optional[pulumi.Input[str]] = None,
             target_responder_recipes: Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetResponderRecipeArgs']]]] = None,
             time_created: Optional[pulumi.Input[str]] = None,
             time_updated: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'inheritedByCompartments' in kwargs:
            inherited_by_compartments = kwargs['inheritedByCompartments']
        if 'lifecyleDetails' in kwargs:
            lifecyle_details = kwargs['lifecyleDetails']
        if 'recipeCount' in kwargs:
            recipe_count = kwargs['recipeCount']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'targetDetails' in kwargs:
            target_details = kwargs['targetDetails']
        if 'targetDetectorRecipes' in kwargs:
            target_detector_recipes = kwargs['targetDetectorRecipes']
        if 'targetResourceId' in kwargs:
            target_resource_id = kwargs['targetResourceId']
        if 'targetResourceType' in kwargs:
            target_resource_type = kwargs['targetResourceType']
        if 'targetResponderRecipes' in kwargs:
            target_responder_recipes = kwargs['targetResponderRecipes']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']

        if compartment_id is not None:
            _setter("compartment_id", compartment_id)
        if defined_tags is not None:
            _setter("defined_tags", defined_tags)
        if description is not None:
            _setter("description", description)
        if display_name is not None:
            _setter("display_name", display_name)
        if freeform_tags is not None:
            _setter("freeform_tags", freeform_tags)
        if inherited_by_compartments is not None:
            _setter("inherited_by_compartments", inherited_by_compartments)
        if lifecyle_details is not None:
            _setter("lifecyle_details", lifecyle_details)
        if recipe_count is not None:
            _setter("recipe_count", recipe_count)
        if state is not None:
            _setter("state", state)
        if system_tags is not None:
            _setter("system_tags", system_tags)
        if target_details is not None:
            _setter("target_details", target_details)
        if target_detector_recipes is not None:
            _setter("target_detector_recipes", target_detector_recipes)
        if target_resource_id is not None:
            _setter("target_resource_id", target_resource_id)
        if target_resource_type is not None:
            _setter("target_resource_type", target_resource_type)
        if target_responder_recipes is not None:
            _setter("target_responder_recipes", target_responder_recipes)
        if time_created is not None:
            _setter("time_created", time_created)
        if time_updated is not None:
            _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) compartment associated with condition
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The target description.

        Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) DetectorTemplate identifier.

        Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`

        Avoid entering confidential information.
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="inheritedByCompartments")
    def inherited_by_compartments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of inherited compartments
        """
        return pulumi.get(self, "inherited_by_compartments")

    @inherited_by_compartments.setter
    def inherited_by_compartments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "inherited_by_compartments", value)

    @property
    @pulumi.getter(name="lifecyleDetails")
    def lifecyle_details(self) -> Optional[pulumi.Input[str]]:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecyle_details")

    @lifecyle_details.setter
    def lifecyle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecyle_details", value)

    @property
    @pulumi.getter(name="recipeCount")
    def recipe_count(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of recipes attached to target
        """
        return pulumi.get(self, "recipe_count")

    @recipe_count.setter
    def recipe_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recipe_count", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The current state of the DetectorRule.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "system_tags", value)

    @property
    @pulumi.getter(name="targetDetails")
    def target_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetDetailArgs']]]]:
        """
        Details specific to the target type.
        """
        return pulumi.get(self, "target_details")

    @target_details.setter
    def target_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetDetailArgs']]]]):
        pulumi.set(self, "target_details", value)

    @property
    @pulumi.getter(name="targetDetectorRecipes")
    def target_detector_recipes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetDetectorRecipeArgs']]]]:
        """
        (Updatable) List of detector recipes to associate with target
        """
        return pulumi.get(self, "target_detector_recipes")

    @target_detector_recipes.setter
    def target_detector_recipes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetDetectorRecipeArgs']]]]):
        pulumi.set(self, "target_detector_recipes", value)

    @property
    @pulumi.getter(name="targetResourceId")
    def target_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID which the target uses to monitor
        """
        return pulumi.get(self, "target_resource_id")

    @target_resource_id.setter
    def target_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_id", value)

    @property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        possible type of targets(COMPARTMENT/FACLOUD)
        """
        return pulumi.get(self, "target_resource_type")

    @target_resource_type.setter
    def target_resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_resource_type", value)

    @property
    @pulumi.getter(name="targetResponderRecipes")
    def target_responder_recipes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetResponderRecipeArgs']]]]:
        """
        (Updatable) List of responder recipes to associate with target
        """
        return pulumi.get(self, "target_responder_recipes")

    @target_responder_recipes.setter
    def target_responder_recipes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TargetTargetResponderRecipeArgs']]]]):
        pulumi.set(self, "target_responder_recipes", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time the target was created. Format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time the target was updated. Format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)


class Target(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 target_detector_recipes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetTargetDetectorRecipeArgs']]]]] = None,
                 target_resource_id: Optional[pulumi.Input[str]] = None,
                 target_resource_type: Optional[pulumi.Input[str]] = None,
                 target_responder_recipes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetTargetResponderRecipeArgs']]]]] = None,
                 __props__=None):
        """
        This resource provides the Target resource in Oracle Cloud Infrastructure Cloud Guard service.

        Creates a new Target

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_target = oci.cloud_guard.Target("testTarget",
            compartment_id=var["compartment_id"],
            display_name=var["target_display_name"],
            target_resource_id=oci_cloud_guard_target_resource["test_target_resource"]["id"],
            target_resource_type=var["target_target_resource_type"],
            defined_tags={
                "foo-namespace.bar-key": "value",
            },
            description=var["target_description"],
            freeform_tags={
                "bar-key": "value",
            },
            state=var["target_state"],
            target_detector_recipes=[oci.cloud_guard.TargetTargetDetectorRecipeArgs(
                detector_recipe_id=oci_cloud_guard_detector_recipe["test_detector_recipe"]["id"],
                detector_rules=[oci.cloud_guard.TargetTargetDetectorRecipeDetectorRuleArgs(
                    details=oci.cloud_guard.TargetTargetDetectorRecipeDetectorRuleDetailsArgs(
                        condition_groups=[oci.cloud_guard.TargetTargetDetectorRecipeDetectorRuleDetailsConditionGroupArgs(
                            compartment_id=var["compartment_id"],
                            condition=var["target_target_detector_recipes_detector_rules_details_condition_groups_condition"],
                        )],
                    ),
                    detector_rule_id=oci_events_rule["test_rule"]["id"],
                )],
            )],
            target_responder_recipes=[oci.cloud_guard.TargetTargetResponderRecipeArgs(
                responder_recipe_id=oci_cloud_guard_responder_recipe["test_responder_recipe"]["id"],
                responder_rules=[oci.cloud_guard.TargetTargetResponderRecipeResponderRuleArgs(
                    details=oci.cloud_guard.TargetTargetResponderRecipeResponderRuleDetailsArgs(
                        condition=var["target_target_responder_recipes_responder_rules_details_condition"],
                        configurations=[oci.cloud_guard.TargetTargetResponderRecipeResponderRuleDetailsConfigurationArgs(
                            config_key=var["target_target_responder_recipes_responder_rules_details_configurations_config_key"],
                            name=var["target_target_responder_recipes_responder_rules_details_configurations_name"],
                            value=var["target_target_responder_recipes_responder_rules_details_configurations_value"],
                        )],
                        mode=var["target_target_responder_recipes_responder_rules_details_mode"],
                    ),
                    responder_rule_id=oci_events_rule["test_rule"]["id"],
                )],
            )])
        ```

        ## Import

        Targets can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:CloudGuard/target:Target test_target "id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: (Updatable) compartment associated with condition
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: The target description.
               
               Avoid entering confidential information.
        :param pulumi.Input[str] display_name: (Updatable) DetectorTemplate identifier.
               
               Avoid entering confidential information.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
               
               Avoid entering confidential information.
        :param pulumi.Input[str] state: (Updatable) The current state of the DetectorRule.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetTargetDetectorRecipeArgs']]]] target_detector_recipes: (Updatable) List of detector recipes to associate with target
        :param pulumi.Input[str] target_resource_id: Resource ID which the target uses to monitor
        :param pulumi.Input[str] target_resource_type: possible type of targets(COMPARTMENT/FACLOUD)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetTargetResponderRecipeArgs']]]] target_responder_recipes: (Updatable) List of responder recipes to associate with target
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TargetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Target resource in Oracle Cloud Infrastructure Cloud Guard service.

        Creates a new Target

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_target = oci.cloud_guard.Target("testTarget",
            compartment_id=var["compartment_id"],
            display_name=var["target_display_name"],
            target_resource_id=oci_cloud_guard_target_resource["test_target_resource"]["id"],
            target_resource_type=var["target_target_resource_type"],
            defined_tags={
                "foo-namespace.bar-key": "value",
            },
            description=var["target_description"],
            freeform_tags={
                "bar-key": "value",
            },
            state=var["target_state"],
            target_detector_recipes=[oci.cloud_guard.TargetTargetDetectorRecipeArgs(
                detector_recipe_id=oci_cloud_guard_detector_recipe["test_detector_recipe"]["id"],
                detector_rules=[oci.cloud_guard.TargetTargetDetectorRecipeDetectorRuleArgs(
                    details=oci.cloud_guard.TargetTargetDetectorRecipeDetectorRuleDetailsArgs(
                        condition_groups=[oci.cloud_guard.TargetTargetDetectorRecipeDetectorRuleDetailsConditionGroupArgs(
                            compartment_id=var["compartment_id"],
                            condition=var["target_target_detector_recipes_detector_rules_details_condition_groups_condition"],
                        )],
                    ),
                    detector_rule_id=oci_events_rule["test_rule"]["id"],
                )],
            )],
            target_responder_recipes=[oci.cloud_guard.TargetTargetResponderRecipeArgs(
                responder_recipe_id=oci_cloud_guard_responder_recipe["test_responder_recipe"]["id"],
                responder_rules=[oci.cloud_guard.TargetTargetResponderRecipeResponderRuleArgs(
                    details=oci.cloud_guard.TargetTargetResponderRecipeResponderRuleDetailsArgs(
                        condition=var["target_target_responder_recipes_responder_rules_details_condition"],
                        configurations=[oci.cloud_guard.TargetTargetResponderRecipeResponderRuleDetailsConfigurationArgs(
                            config_key=var["target_target_responder_recipes_responder_rules_details_configurations_config_key"],
                            name=var["target_target_responder_recipes_responder_rules_details_configurations_name"],
                            value=var["target_target_responder_recipes_responder_rules_details_configurations_value"],
                        )],
                        mode=var["target_target_responder_recipes_responder_rules_details_mode"],
                    ),
                    responder_rule_id=oci_events_rule["test_rule"]["id"],
                )],
            )])
        ```

        ## Import

        Targets can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:CloudGuard/target:Target test_target "id"
        ```

        :param str resource_name: The name of the resource.
        :param TargetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TargetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            TargetArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 target_detector_recipes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetTargetDetectorRecipeArgs']]]]] = None,
                 target_resource_id: Optional[pulumi.Input[str]] = None,
                 target_resource_type: Optional[pulumi.Input[str]] = None,
                 target_responder_recipes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetTargetResponderRecipeArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TargetArgs.__new__(TargetArgs)

            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["description"] = description
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["state"] = state
            __props__.__dict__["target_detector_recipes"] = target_detector_recipes
            if target_resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_resource_id'")
            __props__.__dict__["target_resource_id"] = target_resource_id
            if target_resource_type is None and not opts.urn:
                raise TypeError("Missing required property 'target_resource_type'")
            __props__.__dict__["target_resource_type"] = target_resource_type
            __props__.__dict__["target_responder_recipes"] = target_responder_recipes
            __props__.__dict__["inherited_by_compartments"] = None
            __props__.__dict__["lifecyle_details"] = None
            __props__.__dict__["recipe_count"] = None
            __props__.__dict__["system_tags"] = None
            __props__.__dict__["target_details"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        super(Target, __self__).__init__(
            'oci:CloudGuard/target:Target',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            inherited_by_compartments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            lifecyle_details: Optional[pulumi.Input[str]] = None,
            recipe_count: Optional[pulumi.Input[int]] = None,
            state: Optional[pulumi.Input[str]] = None,
            system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            target_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetTargetDetailArgs']]]]] = None,
            target_detector_recipes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetTargetDetectorRecipeArgs']]]]] = None,
            target_resource_id: Optional[pulumi.Input[str]] = None,
            target_resource_type: Optional[pulumi.Input[str]] = None,
            target_responder_recipes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetTargetResponderRecipeArgs']]]]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None) -> 'Target':
        """
        Get an existing Target resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: (Updatable) compartment associated with condition
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: The target description.
               
               Avoid entering confidential information.
        :param pulumi.Input[str] display_name: (Updatable) DetectorTemplate identifier.
               
               Avoid entering confidential information.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
               
               Avoid entering confidential information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] inherited_by_compartments: List of inherited compartments
        :param pulumi.Input[str] lifecyle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param pulumi.Input[int] recipe_count: Total number of recipes attached to target
        :param pulumi.Input[str] state: (Updatable) The current state of the DetectorRule.
        :param pulumi.Input[Mapping[str, Any]] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetTargetDetailArgs']]]] target_details: Details specific to the target type.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetTargetDetectorRecipeArgs']]]] target_detector_recipes: (Updatable) List of detector recipes to associate with target
        :param pulumi.Input[str] target_resource_id: Resource ID which the target uses to monitor
        :param pulumi.Input[str] target_resource_type: possible type of targets(COMPARTMENT/FACLOUD)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetTargetResponderRecipeArgs']]]] target_responder_recipes: (Updatable) List of responder recipes to associate with target
        :param pulumi.Input[str] time_created: The date and time the target was created. Format defined by RFC3339.
        :param pulumi.Input[str] time_updated: The date and time the target was updated. Format defined by RFC3339.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TargetState.__new__(_TargetState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["inherited_by_compartments"] = inherited_by_compartments
        __props__.__dict__["lifecyle_details"] = lifecyle_details
        __props__.__dict__["recipe_count"] = recipe_count
        __props__.__dict__["state"] = state
        __props__.__dict__["system_tags"] = system_tags
        __props__.__dict__["target_details"] = target_details
        __props__.__dict__["target_detector_recipes"] = target_detector_recipes
        __props__.__dict__["target_resource_id"] = target_resource_id
        __props__.__dict__["target_resource_type"] = target_resource_type
        __props__.__dict__["target_responder_recipes"] = target_responder_recipes
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        return Target(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        """
        (Updatable) compartment associated with condition
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The target description.

        Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        (Updatable) DetectorTemplate identifier.

        Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`

        Avoid entering confidential information.
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="inheritedByCompartments")
    def inherited_by_compartments(self) -> pulumi.Output[Sequence[str]]:
        """
        List of inherited compartments
        """
        return pulumi.get(self, "inherited_by_compartments")

    @property
    @pulumi.getter(name="lifecyleDetails")
    def lifecyle_details(self) -> pulumi.Output[str]:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecyle_details")

    @property
    @pulumi.getter(name="recipeCount")
    def recipe_count(self) -> pulumi.Output[int]:
        """
        Total number of recipes attached to target
        """
        return pulumi.get(self, "recipe_count")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        (Updatable) The current state of the DetectorRule.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetDetails")
    def target_details(self) -> pulumi.Output[Sequence['outputs.TargetTargetDetail']]:
        """
        Details specific to the target type.
        """
        return pulumi.get(self, "target_details")

    @property
    @pulumi.getter(name="targetDetectorRecipes")
    def target_detector_recipes(self) -> pulumi.Output[Sequence['outputs.TargetTargetDetectorRecipe']]:
        """
        (Updatable) List of detector recipes to associate with target
        """
        return pulumi.get(self, "target_detector_recipes")

    @property
    @pulumi.getter(name="targetResourceId")
    def target_resource_id(self) -> pulumi.Output[str]:
        """
        Resource ID which the target uses to monitor
        """
        return pulumi.get(self, "target_resource_id")

    @property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> pulumi.Output[str]:
        """
        possible type of targets(COMPARTMENT/FACLOUD)
        """
        return pulumi.get(self, "target_resource_type")

    @property
    @pulumi.getter(name="targetResponderRecipes")
    def target_responder_recipes(self) -> pulumi.Output[Sequence['outputs.TargetTargetResponderRecipe']]:
        """
        (Updatable) List of responder recipes to associate with target
        """
        return pulumi.get(self, "target_responder_recipes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[str]:
        """
        The date and time the target was created. Format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[str]:
        """
        The date and time the target was updated. Format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")

