# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetReplicationScheduleResult',
    'AwaitableGetReplicationScheduleResult',
    'get_replication_schedule',
    'get_replication_schedule_output',
]

@pulumi.output_type
class GetReplicationScheduleResult:
    """
    A collection of values returned by getReplicationSchedule.
    """
    def __init__(__self__, compartment_id=None, defined_tags=None, display_name=None, execution_recurrences=None, freeform_tags=None, id=None, lifecycle_details=None, replication_schedule_id=None, state=None, system_tags=None, time_created=None, time_updated=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if execution_recurrences and not isinstance(execution_recurrences, str):
            raise TypeError("Expected argument 'execution_recurrences' to be a str")
        pulumi.set(__self__, "execution_recurrences", execution_recurrences)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_details and not isinstance(lifecycle_details, str):
            raise TypeError("Expected argument 'lifecycle_details' to be a str")
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if replication_schedule_id and not isinstance(replication_schedule_id, str):
            raise TypeError("Expected argument 'replication_schedule_id' to be a str")
        pulumi.set(__self__, "replication_schedule_id", replication_schedule_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if system_tags and not isinstance(system_tags, dict):
            raise TypeError("Expected argument 'system_tags' to be a dict")
        pulumi.set(__self__, "system_tags", system_tags)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the replication schedule exists.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A name of the replication schedule.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionRecurrences")
    def execution_recurrences(self) -> str:
        """
        Recurrence specification for the replication schedule execution.
        """
        return pulumi.get(self, "execution_recurrences")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. It exists only for cross-compatibility. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the replication schedule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        The detailed state of the replication schedule.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="replicationScheduleId")
    def replication_schedule_id(self) -> str:
        return pulumi.get(self, "replication_schedule_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Current state of the replication schedule.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time when the replication schedule was created in RFC3339 format.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time when the replication schedule was last updated in RFC3339 format.
        """
        return pulumi.get(self, "time_updated")


class AwaitableGetReplicationScheduleResult(GetReplicationScheduleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReplicationScheduleResult(
            compartment_id=self.compartment_id,
            defined_tags=self.defined_tags,
            display_name=self.display_name,
            execution_recurrences=self.execution_recurrences,
            freeform_tags=self.freeform_tags,
            id=self.id,
            lifecycle_details=self.lifecycle_details,
            replication_schedule_id=self.replication_schedule_id,
            state=self.state,
            system_tags=self.system_tags,
            time_created=self.time_created,
            time_updated=self.time_updated)


def get_replication_schedule(replication_schedule_id: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReplicationScheduleResult:
    """
    This data source provides details about a specific Replication Schedule resource in Oracle Cloud Infrastructure Cloud Migrations service.

    Gets a replication schedule by identifier.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_replication_schedule = oci.CloudMigrations.get_replication_schedule(replication_schedule_id=oci_cloud_migrations_replication_schedule["test_replication_schedule"]["id"])
    ```


    :param str replication_schedule_id: Unique replication schedule identifier in path
    """
    __args__ = dict()
    __args__['replicationScheduleId'] = replication_schedule_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:CloudMigrations/getReplicationSchedule:getReplicationSchedule', __args__, opts=opts, typ=GetReplicationScheduleResult).value

    return AwaitableGetReplicationScheduleResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        display_name=pulumi.get(__ret__, 'display_name'),
        execution_recurrences=pulumi.get(__ret__, 'execution_recurrences'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        id=pulumi.get(__ret__, 'id'),
        lifecycle_details=pulumi.get(__ret__, 'lifecycle_details'),
        replication_schedule_id=pulumi.get(__ret__, 'replication_schedule_id'),
        state=pulumi.get(__ret__, 'state'),
        system_tags=pulumi.get(__ret__, 'system_tags'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_updated=pulumi.get(__ret__, 'time_updated'))


@_utilities.lift_output_func(get_replication_schedule)
def get_replication_schedule_output(replication_schedule_id: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetReplicationScheduleResult]:
    """
    This data source provides details about a specific Replication Schedule resource in Oracle Cloud Infrastructure Cloud Migrations service.

    Gets a replication schedule by identifier.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_replication_schedule = oci.CloudMigrations.get_replication_schedule(replication_schedule_id=oci_cloud_migrations_replication_schedule["test_replication_schedule"]["id"])
    ```


    :param str replication_schedule_id: Unique replication schedule identifier in path
    """
    ...
