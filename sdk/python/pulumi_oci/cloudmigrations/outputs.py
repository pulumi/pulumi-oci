# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'MigrationPlanMigrationPlanStat',
    'MigrationPlanMigrationPlanStatTotalEstimatedCost',
    'MigrationPlanMigrationPlanStatTotalEstimatedCostCompute',
    'MigrationPlanMigrationPlanStatTotalEstimatedCostOsImage',
    'MigrationPlanMigrationPlanStatTotalEstimatedCostStorage',
    'MigrationPlanMigrationPlanStatTotalEstimatedCostStorageVolume',
    'MigrationPlanStrategy',
    'MigrationPlanTargetEnvironment',
    'TargetAssetCompatibilityMessage',
    'TargetAssetEstimatedCost',
    'TargetAssetEstimatedCostCompute',
    'TargetAssetEstimatedCostOsImage',
    'TargetAssetEstimatedCostStorage',
    'TargetAssetEstimatedCostStorageVolume',
    'TargetAssetMigrationAsset',
    'TargetAssetRecommendedSpec',
    'TargetAssetRecommendedSpecAgentConfig',
    'TargetAssetRecommendedSpecAgentConfigPluginsConfig',
    'TargetAssetRecommendedSpecCreateVnicDetail',
    'TargetAssetRecommendedSpecInstanceOption',
    'TargetAssetRecommendedSpecPreemptibleInstanceConfig',
    'TargetAssetRecommendedSpecPreemptibleInstanceConfigPreemptionAction',
    'TargetAssetRecommendedSpecShapeConfig',
    'TargetAssetRecommendedSpecSourceDetail',
    'TargetAssetTestSpec',
    'TargetAssetTestSpecAgentConfig',
    'TargetAssetTestSpecAgentConfigPluginsConfig',
    'TargetAssetTestSpecCreateVnicDetail',
    'TargetAssetTestSpecInstanceOption',
    'TargetAssetTestSpecPreemptibleInstanceConfig',
    'TargetAssetTestSpecPreemptibleInstanceConfigPreemptionAction',
    'TargetAssetTestSpecShapeConfig',
    'TargetAssetTestSpecSourceDetail',
    'TargetAssetUserSpec',
    'TargetAssetUserSpecAgentConfig',
    'TargetAssetUserSpecAgentConfigPluginsConfig',
    'TargetAssetUserSpecCreateVnicDetails',
    'TargetAssetUserSpecInstanceOptions',
    'TargetAssetUserSpecPreemptibleInstanceConfig',
    'TargetAssetUserSpecPreemptibleInstanceConfigPreemptionAction',
    'TargetAssetUserSpecShapeConfig',
    'TargetAssetUserSpecSourceDetails',
    'GetMigrationAssetsFilterResult',
    'GetMigrationAssetsMigrationAssetCollectionResult',
    'GetMigrationAssetsMigrationAssetCollectionItemResult',
    'GetMigrationPlanAvailableShapeItemResult',
    'GetMigrationPlanAvailableShapesAvailableShapesCollectionResult',
    'GetMigrationPlanAvailableShapesAvailableShapesCollectionItemResult',
    'GetMigrationPlanAvailableShapesFilterResult',
    'GetMigrationPlanMigrationPlanStatResult',
    'GetMigrationPlanMigrationPlanStatTotalEstimatedCostResult',
    'GetMigrationPlanMigrationPlanStatTotalEstimatedCostComputeResult',
    'GetMigrationPlanMigrationPlanStatTotalEstimatedCostOsImageResult',
    'GetMigrationPlanMigrationPlanStatTotalEstimatedCostStorageResult',
    'GetMigrationPlanMigrationPlanStatTotalEstimatedCostStorageVolumeResult',
    'GetMigrationPlanStrategyResult',
    'GetMigrationPlanTargetEnvironmentResult',
    'GetMigrationPlansFilterResult',
    'GetMigrationPlansMigrationPlanCollectionResult',
    'GetMigrationPlansMigrationPlanCollectionItemResult',
    'GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatResult',
    'GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostResult',
    'GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostComputeResult',
    'GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostOsImageResult',
    'GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostStorageResult',
    'GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostStorageVolumeResult',
    'GetMigrationPlansMigrationPlanCollectionItemStrategyResult',
    'GetMigrationPlansMigrationPlanCollectionItemTargetEnvironmentResult',
    'GetMigrationsFilterResult',
    'GetMigrationsMigrationCollectionResult',
    'GetMigrationsMigrationCollectionItemResult',
    'GetReplicationSchedulesFilterResult',
    'GetReplicationSchedulesReplicationScheduleCollectionResult',
    'GetReplicationSchedulesReplicationScheduleCollectionItemResult',
    'GetTargetAssetCompatibilityMessageResult',
    'GetTargetAssetEstimatedCostResult',
    'GetTargetAssetEstimatedCostComputeResult',
    'GetTargetAssetEstimatedCostOsImageResult',
    'GetTargetAssetEstimatedCostStorageResult',
    'GetTargetAssetEstimatedCostStorageVolumeResult',
    'GetTargetAssetMigrationAssetResult',
    'GetTargetAssetRecommendedSpecResult',
    'GetTargetAssetRecommendedSpecAgentConfigResult',
    'GetTargetAssetRecommendedSpecAgentConfigPluginsConfigResult',
    'GetTargetAssetRecommendedSpecCreateVnicDetailResult',
    'GetTargetAssetRecommendedSpecInstanceOptionResult',
    'GetTargetAssetRecommendedSpecPreemptibleInstanceConfigResult',
    'GetTargetAssetRecommendedSpecPreemptibleInstanceConfigPreemptionActionResult',
    'GetTargetAssetRecommendedSpecShapeConfigResult',
    'GetTargetAssetRecommendedSpecSourceDetailResult',
    'GetTargetAssetTestSpecResult',
    'GetTargetAssetTestSpecAgentConfigResult',
    'GetTargetAssetTestSpecAgentConfigPluginsConfigResult',
    'GetTargetAssetTestSpecCreateVnicDetailResult',
    'GetTargetAssetTestSpecInstanceOptionResult',
    'GetTargetAssetTestSpecPreemptibleInstanceConfigResult',
    'GetTargetAssetTestSpecPreemptibleInstanceConfigPreemptionActionResult',
    'GetTargetAssetTestSpecShapeConfigResult',
    'GetTargetAssetTestSpecSourceDetailResult',
    'GetTargetAssetUserSpecResult',
    'GetTargetAssetUserSpecAgentConfigResult',
    'GetTargetAssetUserSpecAgentConfigPluginsConfigResult',
    'GetTargetAssetUserSpecCreateVnicDetailResult',
    'GetTargetAssetUserSpecInstanceOptionResult',
    'GetTargetAssetUserSpecPreemptibleInstanceConfigResult',
    'GetTargetAssetUserSpecPreemptibleInstanceConfigPreemptionActionResult',
    'GetTargetAssetUserSpecShapeConfigResult',
    'GetTargetAssetUserSpecSourceDetailResult',
    'GetTargetAssetsFilterResult',
    'GetTargetAssetsTargetAssetCollectionResult',
    'GetTargetAssetsTargetAssetCollectionItemResult',
    'GetTargetAssetsTargetAssetCollectionItemCompatibilityMessageResult',
    'GetTargetAssetsTargetAssetCollectionItemEstimatedCostResult',
    'GetTargetAssetsTargetAssetCollectionItemEstimatedCostComputeResult',
    'GetTargetAssetsTargetAssetCollectionItemEstimatedCostOsImageResult',
    'GetTargetAssetsTargetAssetCollectionItemEstimatedCostStorageResult',
    'GetTargetAssetsTargetAssetCollectionItemEstimatedCostStorageVolumeResult',
    'GetTargetAssetsTargetAssetCollectionItemMigrationAssetResult',
    'GetTargetAssetsTargetAssetCollectionItemRecommendedSpecResult',
    'GetTargetAssetsTargetAssetCollectionItemRecommendedSpecAgentConfigResult',
    'GetTargetAssetsTargetAssetCollectionItemRecommendedSpecAgentConfigPluginsConfigResult',
    'GetTargetAssetsTargetAssetCollectionItemRecommendedSpecCreateVnicDetailResult',
    'GetTargetAssetsTargetAssetCollectionItemRecommendedSpecInstanceOptionResult',
    'GetTargetAssetsTargetAssetCollectionItemRecommendedSpecPreemptibleInstanceConfigResult',
    'GetTargetAssetsTargetAssetCollectionItemRecommendedSpecPreemptibleInstanceConfigPreemptionActionResult',
    'GetTargetAssetsTargetAssetCollectionItemRecommendedSpecShapeConfigResult',
    'GetTargetAssetsTargetAssetCollectionItemRecommendedSpecSourceDetailResult',
    'GetTargetAssetsTargetAssetCollectionItemTestSpecResult',
    'GetTargetAssetsTargetAssetCollectionItemTestSpecAgentConfigResult',
    'GetTargetAssetsTargetAssetCollectionItemTestSpecAgentConfigPluginsConfigResult',
    'GetTargetAssetsTargetAssetCollectionItemTestSpecCreateVnicDetailResult',
    'GetTargetAssetsTargetAssetCollectionItemTestSpecInstanceOptionResult',
    'GetTargetAssetsTargetAssetCollectionItemTestSpecPreemptibleInstanceConfigResult',
    'GetTargetAssetsTargetAssetCollectionItemTestSpecPreemptibleInstanceConfigPreemptionActionResult',
    'GetTargetAssetsTargetAssetCollectionItemTestSpecShapeConfigResult',
    'GetTargetAssetsTargetAssetCollectionItemTestSpecSourceDetailResult',
    'GetTargetAssetsTargetAssetCollectionItemUserSpecResult',
    'GetTargetAssetsTargetAssetCollectionItemUserSpecAgentConfigResult',
    'GetTargetAssetsTargetAssetCollectionItemUserSpecAgentConfigPluginsConfigResult',
    'GetTargetAssetsTargetAssetCollectionItemUserSpecCreateVnicDetailResult',
    'GetTargetAssetsTargetAssetCollectionItemUserSpecInstanceOptionResult',
    'GetTargetAssetsTargetAssetCollectionItemUserSpecPreemptibleInstanceConfigResult',
    'GetTargetAssetsTargetAssetCollectionItemUserSpecPreemptibleInstanceConfigPreemptionActionResult',
    'GetTargetAssetsTargetAssetCollectionItemUserSpecShapeConfigResult',
    'GetTargetAssetsTargetAssetCollectionItemUserSpecSourceDetailResult',
]

@pulumi.output_type
class MigrationPlanMigrationPlanStat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeUpdated":
            suggest = "time_updated"
        elif key == "totalEstimatedCosts":
            suggest = "total_estimated_costs"
        elif key == "vmCount":
            suggest = "vm_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationPlanMigrationPlanStat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationPlanMigrationPlanStat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationPlanMigrationPlanStat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_updated: Optional[str] = None,
                 total_estimated_costs: Optional[Sequence['outputs.MigrationPlanMigrationPlanStatTotalEstimatedCost']] = None,
                 vm_count: Optional[int] = None):
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if total_estimated_costs is not None:
            pulumi.set(__self__, "total_estimated_costs", total_estimated_costs)
        if vm_count is not None:
            pulumi.set(__self__, "vm_count", vm_count)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="totalEstimatedCosts")
    def total_estimated_costs(self) -> Optional[Sequence['outputs.MigrationPlanMigrationPlanStatTotalEstimatedCost']]:
        return pulumi.get(self, "total_estimated_costs")

    @property
    @pulumi.getter(name="vmCount")
    def vm_count(self) -> Optional[int]:
        return pulumi.get(self, "vm_count")


@pulumi.output_type
class MigrationPlanMigrationPlanStatTotalEstimatedCost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currencyCode":
            suggest = "currency_code"
        elif key == "osImages":
            suggest = "os_images"
        elif key == "subscriptionId":
            suggest = "subscription_id"
        elif key == "totalEstimationPerMonth":
            suggest = "total_estimation_per_month"
        elif key == "totalEstimationPerMonthBySubscription":
            suggest = "total_estimation_per_month_by_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationPlanMigrationPlanStatTotalEstimatedCost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationPlanMigrationPlanStatTotalEstimatedCost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationPlanMigrationPlanStatTotalEstimatedCost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Optional[Sequence['outputs.MigrationPlanMigrationPlanStatTotalEstimatedCostCompute']] = None,
                 currency_code: Optional[str] = None,
                 os_images: Optional[Sequence['outputs.MigrationPlanMigrationPlanStatTotalEstimatedCostOsImage']] = None,
                 storages: Optional[Sequence['outputs.MigrationPlanMigrationPlanStatTotalEstimatedCostStorage']] = None,
                 subscription_id: Optional[str] = None,
                 total_estimation_per_month: Optional[float] = None,
                 total_estimation_per_month_by_subscription: Optional[float] = None):
        if computes is not None:
            pulumi.set(__self__, "computes", computes)
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if os_images is not None:
            pulumi.set(__self__, "os_images", os_images)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if total_estimation_per_month is not None:
            pulumi.set(__self__, "total_estimation_per_month", total_estimation_per_month)
        if total_estimation_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_estimation_per_month_by_subscription", total_estimation_per_month_by_subscription)

    @property
    @pulumi.getter
    def computes(self) -> Optional[Sequence['outputs.MigrationPlanMigrationPlanStatTotalEstimatedCostCompute']]:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="osImages")
    def os_images(self) -> Optional[Sequence['outputs.MigrationPlanMigrationPlanStatTotalEstimatedCostOsImage']]:
        return pulumi.get(self, "os_images")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.MigrationPlanMigrationPlanStatTotalEstimatedCostStorage']]:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="totalEstimationPerMonth")
    def total_estimation_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_estimation_per_month")

    @property
    @pulumi.getter(name="totalEstimationPerMonthBySubscription")
    def total_estimation_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_estimation_per_month_by_subscription")


@pulumi.output_type
class MigrationPlanMigrationPlanStatTotalEstimatedCostCompute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gpuCount":
            suggest = "gpu_count"
        elif key == "gpuPerHour":
            suggest = "gpu_per_hour"
        elif key == "gpuPerHourBySubscription":
            suggest = "gpu_per_hour_by_subscription"
        elif key == "memoryAmountGb":
            suggest = "memory_amount_gb"
        elif key == "memoryGbPerHour":
            suggest = "memory_gb_per_hour"
        elif key == "memoryGbPerHourBySubscription":
            suggest = "memory_gb_per_hour_by_subscription"
        elif key == "ocpuCount":
            suggest = "ocpu_count"
        elif key == "ocpuPerHour":
            suggest = "ocpu_per_hour"
        elif key == "ocpuPerHourBySubscription":
            suggest = "ocpu_per_hour_by_subscription"
        elif key == "totalPerHour":
            suggest = "total_per_hour"
        elif key == "totalPerHourBySubscription":
            suggest = "total_per_hour_by_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationPlanMigrationPlanStatTotalEstimatedCostCompute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationPlanMigrationPlanStatTotalEstimatedCostCompute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationPlanMigrationPlanStatTotalEstimatedCostCompute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gpu_count: Optional[float] = None,
                 gpu_per_hour: Optional[float] = None,
                 gpu_per_hour_by_subscription: Optional[float] = None,
                 memory_amount_gb: Optional[float] = None,
                 memory_gb_per_hour: Optional[float] = None,
                 memory_gb_per_hour_by_subscription: Optional[float] = None,
                 ocpu_count: Optional[float] = None,
                 ocpu_per_hour: Optional[float] = None,
                 ocpu_per_hour_by_subscription: Optional[float] = None,
                 total_per_hour: Optional[float] = None,
                 total_per_hour_by_subscription: Optional[float] = None):
        if gpu_count is not None:
            pulumi.set(__self__, "gpu_count", gpu_count)
        if gpu_per_hour is not None:
            pulumi.set(__self__, "gpu_per_hour", gpu_per_hour)
        if gpu_per_hour_by_subscription is not None:
            pulumi.set(__self__, "gpu_per_hour_by_subscription", gpu_per_hour_by_subscription)
        if memory_amount_gb is not None:
            pulumi.set(__self__, "memory_amount_gb", memory_amount_gb)
        if memory_gb_per_hour is not None:
            pulumi.set(__self__, "memory_gb_per_hour", memory_gb_per_hour)
        if memory_gb_per_hour_by_subscription is not None:
            pulumi.set(__self__, "memory_gb_per_hour_by_subscription", memory_gb_per_hour_by_subscription)
        if ocpu_count is not None:
            pulumi.set(__self__, "ocpu_count", ocpu_count)
        if ocpu_per_hour is not None:
            pulumi.set(__self__, "ocpu_per_hour", ocpu_per_hour)
        if ocpu_per_hour_by_subscription is not None:
            pulumi.set(__self__, "ocpu_per_hour_by_subscription", ocpu_per_hour_by_subscription)
        if total_per_hour is not None:
            pulumi.set(__self__, "total_per_hour", total_per_hour)
        if total_per_hour_by_subscription is not None:
            pulumi.set(__self__, "total_per_hour_by_subscription", total_per_hour_by_subscription)

    @property
    @pulumi.getter(name="gpuCount")
    def gpu_count(self) -> Optional[float]:
        return pulumi.get(self, "gpu_count")

    @property
    @pulumi.getter(name="gpuPerHour")
    def gpu_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "gpu_per_hour")

    @property
    @pulumi.getter(name="gpuPerHourBySubscription")
    def gpu_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "gpu_per_hour_by_subscription")

    @property
    @pulumi.getter(name="memoryAmountGb")
    def memory_amount_gb(self) -> Optional[float]:
        return pulumi.get(self, "memory_amount_gb")

    @property
    @pulumi.getter(name="memoryGbPerHour")
    def memory_gb_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "memory_gb_per_hour")

    @property
    @pulumi.getter(name="memoryGbPerHourBySubscription")
    def memory_gb_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "memory_gb_per_hour_by_subscription")

    @property
    @pulumi.getter(name="ocpuCount")
    def ocpu_count(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_count")

    @property
    @pulumi.getter(name="ocpuPerHour")
    def ocpu_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_per_hour")

    @property
    @pulumi.getter(name="ocpuPerHourBySubscription")
    def ocpu_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_per_hour_by_subscription")

    @property
    @pulumi.getter(name="totalPerHour")
    def total_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour")

    @property
    @pulumi.getter(name="totalPerHourBySubscription")
    def total_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour_by_subscription")


@pulumi.output_type
class MigrationPlanMigrationPlanStatTotalEstimatedCostOsImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "totalPerHour":
            suggest = "total_per_hour"
        elif key == "totalPerHourBySubscription":
            suggest = "total_per_hour_by_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationPlanMigrationPlanStatTotalEstimatedCostOsImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationPlanMigrationPlanStatTotalEstimatedCostOsImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationPlanMigrationPlanStatTotalEstimatedCostOsImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 total_per_hour: Optional[float] = None,
                 total_per_hour_by_subscription: Optional[float] = None):
        if total_per_hour is not None:
            pulumi.set(__self__, "total_per_hour", total_per_hour)
        if total_per_hour_by_subscription is not None:
            pulumi.set(__self__, "total_per_hour_by_subscription", total_per_hour_by_subscription)

    @property
    @pulumi.getter(name="totalPerHour")
    def total_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour")

    @property
    @pulumi.getter(name="totalPerHourBySubscription")
    def total_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour_by_subscription")


@pulumi.output_type
class MigrationPlanMigrationPlanStatTotalEstimatedCostStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "totalGbPerMonth":
            suggest = "total_gb_per_month"
        elif key == "totalGbPerMonthBySubscription":
            suggest = "total_gb_per_month_by_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationPlanMigrationPlanStatTotalEstimatedCostStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationPlanMigrationPlanStatTotalEstimatedCostStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationPlanMigrationPlanStatTotalEstimatedCostStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 total_gb_per_month: Optional[float] = None,
                 total_gb_per_month_by_subscription: Optional[float] = None,
                 volumes: Optional[Sequence['outputs.MigrationPlanMigrationPlanStatTotalEstimatedCostStorageVolume']] = None):
        if total_gb_per_month is not None:
            pulumi.set(__self__, "total_gb_per_month", total_gb_per_month)
        if total_gb_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_gb_per_month_by_subscription", total_gb_per_month_by_subscription)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter(name="totalGbPerMonth")
    def total_gb_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month")

    @property
    @pulumi.getter(name="totalGbPerMonthBySubscription")
    def total_gb_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month_by_subscription")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.MigrationPlanMigrationPlanStatTotalEstimatedCostStorageVolume']]:
        return pulumi.get(self, "volumes")


@pulumi.output_type
class MigrationPlanMigrationPlanStatTotalEstimatedCostStorageVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityGb":
            suggest = "capacity_gb"
        elif key == "totalGbPerMonth":
            suggest = "total_gb_per_month"
        elif key == "totalGbPerMonthBySubscription":
            suggest = "total_gb_per_month_by_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationPlanMigrationPlanStatTotalEstimatedCostStorageVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationPlanMigrationPlanStatTotalEstimatedCostStorageVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationPlanMigrationPlanStatTotalEstimatedCostStorageVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity_gb: Optional[float] = None,
                 description: Optional[str] = None,
                 total_gb_per_month: Optional[float] = None,
                 total_gb_per_month_by_subscription: Optional[float] = None):
        if capacity_gb is not None:
            pulumi.set(__self__, "capacity_gb", capacity_gb)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if total_gb_per_month is not None:
            pulumi.set(__self__, "total_gb_per_month", total_gb_per_month)
        if total_gb_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_gb_per_month_by_subscription", total_gb_per_month_by_subscription)

    @property
    @pulumi.getter(name="capacityGb")
    def capacity_gb(self) -> Optional[float]:
        return pulumi.get(self, "capacity_gb")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="totalGbPerMonth")
    def total_gb_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month")

    @property
    @pulumi.getter(name="totalGbPerMonthBySubscription")
    def total_gb_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month_by_subscription")


@pulumi.output_type
class MigrationPlanStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "strategyType":
            suggest = "strategy_type"
        elif key == "adjustmentMultiplier":
            suggest = "adjustment_multiplier"
        elif key == "metricTimeWindow":
            suggest = "metric_time_window"
        elif key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationPlanStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationPlanStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationPlanStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 strategy_type: str,
                 adjustment_multiplier: Optional[float] = None,
                 metric_time_window: Optional[str] = None,
                 metric_type: Optional[str] = None,
                 percentile: Optional[str] = None):
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "strategy_type", strategy_type)
        if adjustment_multiplier is not None:
            pulumi.set(__self__, "adjustment_multiplier", adjustment_multiplier)
        if metric_time_window is not None:
            pulumi.set(__self__, "metric_time_window", metric_time_window)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if percentile is not None:
            pulumi.set(__self__, "percentile", percentile)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> str:
        return pulumi.get(self, "strategy_type")

    @property
    @pulumi.getter(name="adjustmentMultiplier")
    def adjustment_multiplier(self) -> Optional[float]:
        return pulumi.get(self, "adjustment_multiplier")

    @property
    @pulumi.getter(name="metricTimeWindow")
    def metric_time_window(self) -> Optional[str]:
        return pulumi.get(self, "metric_time_window")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def percentile(self) -> Optional[str]:
        return pulumi.get(self, "percentile")


@pulumi.output_type
class MigrationPlanTargetEnvironment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetEnvironmentType":
            suggest = "target_environment_type"
        elif key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "dedicatedVmHost":
            suggest = "dedicated_vm_host"
        elif key == "faultDomain":
            suggest = "fault_domain"
        elif key == "msLicense":
            suggest = "ms_license"
        elif key == "preferredShapeType":
            suggest = "preferred_shape_type"
        elif key == "targetCompartmentId":
            suggest = "target_compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationPlanTargetEnvironment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationPlanTargetEnvironment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationPlanTargetEnvironment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet: str,
                 target_environment_type: str,
                 vcn: str,
                 availability_domain: Optional[str] = None,
                 dedicated_vm_host: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 ms_license: Optional[str] = None,
                 preferred_shape_type: Optional[str] = None,
                 target_compartment_id: Optional[str] = None):
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "target_environment_type", target_environment_type)
        pulumi.set(__self__, "vcn", vcn)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if dedicated_vm_host is not None:
            pulumi.set(__self__, "dedicated_vm_host", dedicated_vm_host)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if ms_license is not None:
            pulumi.set(__self__, "ms_license", ms_license)
        if preferred_shape_type is not None:
            pulumi.set(__self__, "preferred_shape_type", preferred_shape_type)
        if target_compartment_id is not None:
            pulumi.set(__self__, "target_compartment_id", target_compartment_id)

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="targetEnvironmentType")
    def target_environment_type(self) -> str:
        return pulumi.get(self, "target_environment_type")

    @property
    @pulumi.getter
    def vcn(self) -> str:
        return pulumi.get(self, "vcn")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="dedicatedVmHost")
    def dedicated_vm_host(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="msLicense")
    def ms_license(self) -> Optional[str]:
        return pulumi.get(self, "ms_license")

    @property
    @pulumi.getter(name="preferredShapeType")
    def preferred_shape_type(self) -> Optional[str]:
        return pulumi.get(self, "preferred_shape_type")

    @property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "target_compartment_id")


@pulumi.output_type
class TargetAssetCompatibilityMessage(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 name: Optional[str] = None,
                 severity: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")


@pulumi.output_type
class TargetAssetEstimatedCost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currencyCode":
            suggest = "currency_code"
        elif key == "osImages":
            suggest = "os_images"
        elif key == "subscriptionId":
            suggest = "subscription_id"
        elif key == "totalEstimationPerMonth":
            suggest = "total_estimation_per_month"
        elif key == "totalEstimationPerMonthBySubscription":
            suggest = "total_estimation_per_month_by_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetEstimatedCost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetEstimatedCost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetEstimatedCost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 computes: Optional[Sequence['outputs.TargetAssetEstimatedCostCompute']] = None,
                 currency_code: Optional[str] = None,
                 os_images: Optional[Sequence['outputs.TargetAssetEstimatedCostOsImage']] = None,
                 storages: Optional[Sequence['outputs.TargetAssetEstimatedCostStorage']] = None,
                 subscription_id: Optional[str] = None,
                 total_estimation_per_month: Optional[float] = None,
                 total_estimation_per_month_by_subscription: Optional[float] = None):
        if computes is not None:
            pulumi.set(__self__, "computes", computes)
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if os_images is not None:
            pulumi.set(__self__, "os_images", os_images)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if total_estimation_per_month is not None:
            pulumi.set(__self__, "total_estimation_per_month", total_estimation_per_month)
        if total_estimation_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_estimation_per_month_by_subscription", total_estimation_per_month_by_subscription)

    @property
    @pulumi.getter
    def computes(self) -> Optional[Sequence['outputs.TargetAssetEstimatedCostCompute']]:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="osImages")
    def os_images(self) -> Optional[Sequence['outputs.TargetAssetEstimatedCostOsImage']]:
        return pulumi.get(self, "os_images")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.TargetAssetEstimatedCostStorage']]:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="totalEstimationPerMonth")
    def total_estimation_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_estimation_per_month")

    @property
    @pulumi.getter(name="totalEstimationPerMonthBySubscription")
    def total_estimation_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_estimation_per_month_by_subscription")


@pulumi.output_type
class TargetAssetEstimatedCostCompute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gpuCount":
            suggest = "gpu_count"
        elif key == "gpuPerHour":
            suggest = "gpu_per_hour"
        elif key == "gpuPerHourBySubscription":
            suggest = "gpu_per_hour_by_subscription"
        elif key == "memoryAmountGb":
            suggest = "memory_amount_gb"
        elif key == "memoryGbPerHour":
            suggest = "memory_gb_per_hour"
        elif key == "memoryGbPerHourBySubscription":
            suggest = "memory_gb_per_hour_by_subscription"
        elif key == "ocpuCount":
            suggest = "ocpu_count"
        elif key == "ocpuPerHour":
            suggest = "ocpu_per_hour"
        elif key == "ocpuPerHourBySubscription":
            suggest = "ocpu_per_hour_by_subscription"
        elif key == "totalPerHour":
            suggest = "total_per_hour"
        elif key == "totalPerHourBySubscription":
            suggest = "total_per_hour_by_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetEstimatedCostCompute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetEstimatedCostCompute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetEstimatedCostCompute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gpu_count: Optional[float] = None,
                 gpu_per_hour: Optional[float] = None,
                 gpu_per_hour_by_subscription: Optional[float] = None,
                 memory_amount_gb: Optional[float] = None,
                 memory_gb_per_hour: Optional[float] = None,
                 memory_gb_per_hour_by_subscription: Optional[float] = None,
                 ocpu_count: Optional[float] = None,
                 ocpu_per_hour: Optional[float] = None,
                 ocpu_per_hour_by_subscription: Optional[float] = None,
                 total_per_hour: Optional[float] = None,
                 total_per_hour_by_subscription: Optional[float] = None):
        if gpu_count is not None:
            pulumi.set(__self__, "gpu_count", gpu_count)
        if gpu_per_hour is not None:
            pulumi.set(__self__, "gpu_per_hour", gpu_per_hour)
        if gpu_per_hour_by_subscription is not None:
            pulumi.set(__self__, "gpu_per_hour_by_subscription", gpu_per_hour_by_subscription)
        if memory_amount_gb is not None:
            pulumi.set(__self__, "memory_amount_gb", memory_amount_gb)
        if memory_gb_per_hour is not None:
            pulumi.set(__self__, "memory_gb_per_hour", memory_gb_per_hour)
        if memory_gb_per_hour_by_subscription is not None:
            pulumi.set(__self__, "memory_gb_per_hour_by_subscription", memory_gb_per_hour_by_subscription)
        if ocpu_count is not None:
            pulumi.set(__self__, "ocpu_count", ocpu_count)
        if ocpu_per_hour is not None:
            pulumi.set(__self__, "ocpu_per_hour", ocpu_per_hour)
        if ocpu_per_hour_by_subscription is not None:
            pulumi.set(__self__, "ocpu_per_hour_by_subscription", ocpu_per_hour_by_subscription)
        if total_per_hour is not None:
            pulumi.set(__self__, "total_per_hour", total_per_hour)
        if total_per_hour_by_subscription is not None:
            pulumi.set(__self__, "total_per_hour_by_subscription", total_per_hour_by_subscription)

    @property
    @pulumi.getter(name="gpuCount")
    def gpu_count(self) -> Optional[float]:
        return pulumi.get(self, "gpu_count")

    @property
    @pulumi.getter(name="gpuPerHour")
    def gpu_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "gpu_per_hour")

    @property
    @pulumi.getter(name="gpuPerHourBySubscription")
    def gpu_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "gpu_per_hour_by_subscription")

    @property
    @pulumi.getter(name="memoryAmountGb")
    def memory_amount_gb(self) -> Optional[float]:
        return pulumi.get(self, "memory_amount_gb")

    @property
    @pulumi.getter(name="memoryGbPerHour")
    def memory_gb_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "memory_gb_per_hour")

    @property
    @pulumi.getter(name="memoryGbPerHourBySubscription")
    def memory_gb_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "memory_gb_per_hour_by_subscription")

    @property
    @pulumi.getter(name="ocpuCount")
    def ocpu_count(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_count")

    @property
    @pulumi.getter(name="ocpuPerHour")
    def ocpu_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_per_hour")

    @property
    @pulumi.getter(name="ocpuPerHourBySubscription")
    def ocpu_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_per_hour_by_subscription")

    @property
    @pulumi.getter(name="totalPerHour")
    def total_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour")

    @property
    @pulumi.getter(name="totalPerHourBySubscription")
    def total_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour_by_subscription")


@pulumi.output_type
class TargetAssetEstimatedCostOsImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "totalPerHour":
            suggest = "total_per_hour"
        elif key == "totalPerHourBySubscription":
            suggest = "total_per_hour_by_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetEstimatedCostOsImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetEstimatedCostOsImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetEstimatedCostOsImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 total_per_hour: Optional[float] = None,
                 total_per_hour_by_subscription: Optional[float] = None):
        if total_per_hour is not None:
            pulumi.set(__self__, "total_per_hour", total_per_hour)
        if total_per_hour_by_subscription is not None:
            pulumi.set(__self__, "total_per_hour_by_subscription", total_per_hour_by_subscription)

    @property
    @pulumi.getter(name="totalPerHour")
    def total_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour")

    @property
    @pulumi.getter(name="totalPerHourBySubscription")
    def total_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour_by_subscription")


@pulumi.output_type
class TargetAssetEstimatedCostStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "totalGbPerMonth":
            suggest = "total_gb_per_month"
        elif key == "totalGbPerMonthBySubscription":
            suggest = "total_gb_per_month_by_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetEstimatedCostStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetEstimatedCostStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetEstimatedCostStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 total_gb_per_month: Optional[float] = None,
                 total_gb_per_month_by_subscription: Optional[float] = None,
                 volumes: Optional[Sequence['outputs.TargetAssetEstimatedCostStorageVolume']] = None):
        if total_gb_per_month is not None:
            pulumi.set(__self__, "total_gb_per_month", total_gb_per_month)
        if total_gb_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_gb_per_month_by_subscription", total_gb_per_month_by_subscription)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter(name="totalGbPerMonth")
    def total_gb_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month")

    @property
    @pulumi.getter(name="totalGbPerMonthBySubscription")
    def total_gb_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month_by_subscription")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.TargetAssetEstimatedCostStorageVolume']]:
        return pulumi.get(self, "volumes")


@pulumi.output_type
class TargetAssetEstimatedCostStorageVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityGb":
            suggest = "capacity_gb"
        elif key == "totalGbPerMonth":
            suggest = "total_gb_per_month"
        elif key == "totalGbPerMonthBySubscription":
            suggest = "total_gb_per_month_by_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetEstimatedCostStorageVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetEstimatedCostStorageVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetEstimatedCostStorageVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity_gb: Optional[float] = None,
                 description: Optional[str] = None,
                 total_gb_per_month: Optional[float] = None,
                 total_gb_per_month_by_subscription: Optional[float] = None):
        if capacity_gb is not None:
            pulumi.set(__self__, "capacity_gb", capacity_gb)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if total_gb_per_month is not None:
            pulumi.set(__self__, "total_gb_per_month", total_gb_per_month)
        if total_gb_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_gb_per_month_by_subscription", total_gb_per_month_by_subscription)

    @property
    @pulumi.getter(name="capacityGb")
    def capacity_gb(self) -> Optional[float]:
        return pulumi.get(self, "capacity_gb")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="totalGbPerMonth")
    def total_gb_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month")

    @property
    @pulumi.getter(name="totalGbPerMonthBySubscription")
    def total_gb_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month_by_subscription")


@pulumi.output_type
class TargetAssetMigrationAsset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "dependedOnBies":
            suggest = "depended_on_bies"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "migrationId":
            suggest = "migration_id"
        elif key == "parentSnapshot":
            suggest = "parent_snapshot"
        elif key == "replicationCompartmentId":
            suggest = "replication_compartment_id"
        elif key == "replicationScheduleId":
            suggest = "replication_schedule_id"
        elif key == "snapShotBucketName":
            suggest = "snap_shot_bucket_name"
        elif key == "sourceAssetData":
            suggest = "source_asset_data"
        elif key == "sourceAssetId":
            suggest = "source_asset_id"
        elif key == "tenancyId":
            suggest = "tenancy_id"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetMigrationAsset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetMigrationAsset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetMigrationAsset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 depended_on_bies: Optional[Sequence[str]] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 migration_id: Optional[str] = None,
                 notifications: Optional[Sequence[str]] = None,
                 parent_snapshot: Optional[str] = None,
                 replication_compartment_id: Optional[str] = None,
                 replication_schedule_id: Optional[str] = None,
                 snap_shot_bucket_name: Optional[str] = None,
                 snapshots: Optional[Mapping[str, Any]] = None,
                 source_asset_data: Optional[Mapping[str, Any]] = None,
                 source_asset_id: Optional[str] = None,
                 state: Optional[str] = None,
                 tenancy_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if depended_on_bies is not None:
            pulumi.set(__self__, "depended_on_bies", depended_on_bies)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if migration_id is not None:
            pulumi.set(__self__, "migration_id", migration_id)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if parent_snapshot is not None:
            pulumi.set(__self__, "parent_snapshot", parent_snapshot)
        if replication_compartment_id is not None:
            pulumi.set(__self__, "replication_compartment_id", replication_compartment_id)
        if replication_schedule_id is not None:
            pulumi.set(__self__, "replication_schedule_id", replication_schedule_id)
        if snap_shot_bucket_name is not None:
            pulumi.set(__self__, "snap_shot_bucket_name", snap_shot_bucket_name)
        if snapshots is not None:
            pulumi.set(__self__, "snapshots", snapshots)
        if source_asset_data is not None:
            pulumi.set(__self__, "source_asset_data", source_asset_data)
        if source_asset_id is not None:
            pulumi.set(__self__, "source_asset_id", source_asset_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tenancy_id is not None:
            pulumi.set(__self__, "tenancy_id", tenancy_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dependedOnBies")
    def depended_on_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depended_on_bies")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="migrationId")
    def migration_id(self) -> Optional[str]:
        return pulumi.get(self, "migration_id")

    @property
    @pulumi.getter
    def notifications(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter(name="parentSnapshot")
    def parent_snapshot(self) -> Optional[str]:
        return pulumi.get(self, "parent_snapshot")

    @property
    @pulumi.getter(name="replicationCompartmentId")
    def replication_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_compartment_id")

    @property
    @pulumi.getter(name="replicationScheduleId")
    def replication_schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_schedule_id")

    @property
    @pulumi.getter(name="snapShotBucketName")
    def snap_shot_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "snap_shot_bucket_name")

    @property
    @pulumi.getter
    def snapshots(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "snapshots")

    @property
    @pulumi.getter(name="sourceAssetData")
    def source_asset_data(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "source_asset_data")

    @property
    @pulumi.getter(name="sourceAssetId")
    def source_asset_id(self) -> Optional[str]:
        return pulumi.get(self, "source_asset_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TargetAssetRecommendedSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentConfigs":
            suggest = "agent_configs"
        elif key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "capacityReservationId":
            suggest = "capacity_reservation_id"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "createVnicDetails":
            suggest = "create_vnic_details"
        elif key == "dedicatedVmHostId":
            suggest = "dedicated_vm_host_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "faultDomain":
            suggest = "fault_domain"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "hostnameLabel":
            suggest = "hostname_label"
        elif key == "instanceOptions":
            suggest = "instance_options"
        elif key == "ipxeScript":
            suggest = "ipxe_script"
        elif key == "isPvEncryptionInTransitEnabled":
            suggest = "is_pv_encryption_in_transit_enabled"
        elif key == "preemptibleInstanceConfigs":
            suggest = "preemptible_instance_configs"
        elif key == "shapeConfigs":
            suggest = "shape_configs"
        elif key == "sourceDetails":
            suggest = "source_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetRecommendedSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetRecommendedSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetRecommendedSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_configs: Optional[Sequence['outputs.TargetAssetRecommendedSpecAgentConfig']] = None,
                 availability_domain: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional[Sequence['outputs.TargetAssetRecommendedSpecCreateVnicDetail']] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 instance_options: Optional[Sequence['outputs.TargetAssetRecommendedSpecInstanceOption']] = None,
                 ipxe_script: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 preemptible_instance_configs: Optional[Sequence['outputs.TargetAssetRecommendedSpecPreemptibleInstanceConfig']] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.TargetAssetRecommendedSpecShapeConfig']] = None,
                 source_details: Optional[Sequence['outputs.TargetAssetRecommendedSpecSourceDetail']] = None):
        if agent_configs is not None:
            pulumi.set(__self__, "agent_configs", agent_configs)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if preemptible_instance_configs is not None:
            pulumi.set(__self__, "preemptible_instance_configs", preemptible_instance_configs)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)

    @property
    @pulumi.getter(name="agentConfigs")
    def agent_configs(self) -> Optional[Sequence['outputs.TargetAssetRecommendedSpecAgentConfig']]:
        return pulumi.get(self, "agent_configs")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.TargetAssetRecommendedSpecCreateVnicDetail']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional[Sequence['outputs.TargetAssetRecommendedSpecInstanceOption']]:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="preemptibleInstanceConfigs")
    def preemptible_instance_configs(self) -> Optional[Sequence['outputs.TargetAssetRecommendedSpecPreemptibleInstanceConfig']]:
        return pulumi.get(self, "preemptible_instance_configs")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.TargetAssetRecommendedSpecShapeConfig']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.TargetAssetRecommendedSpecSourceDetail']]:
        return pulumi.get(self, "source_details")


@pulumi.output_type
class TargetAssetRecommendedSpecAgentConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areAllPluginsDisabled":
            suggest = "are_all_plugins_disabled"
        elif key == "isManagementDisabled":
            suggest = "is_management_disabled"
        elif key == "isMonitoringDisabled":
            suggest = "is_monitoring_disabled"
        elif key == "pluginsConfigs":
            suggest = "plugins_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetRecommendedSpecAgentConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetRecommendedSpecAgentConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetRecommendedSpecAgentConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.TargetAssetRecommendedSpecAgentConfigPluginsConfig']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.TargetAssetRecommendedSpecAgentConfigPluginsConfig']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class TargetAssetRecommendedSpecAgentConfigPluginsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "desiredState":
            suggest = "desired_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetRecommendedSpecAgentConfigPluginsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetRecommendedSpecAgentConfigPluginsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetRecommendedSpecAgentConfigPluginsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class TargetAssetRecommendedSpecCreateVnicDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignPrivateDnsRecord":
            suggest = "assign_private_dns_record"
        elif key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "hostnameLabel":
            suggest = "hostname_label"
        elif key == "nsgIds":
            suggest = "nsg_ids"
        elif key == "privateIp":
            suggest = "private_ip"
        elif key == "skipSourceDestCheck":
            suggest = "skip_source_dest_check"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetRecommendedSpecCreateVnicDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetRecommendedSpecCreateVnicDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetRecommendedSpecCreateVnicDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class TargetAssetRecommendedSpecInstanceOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areLegacyImdsEndpointsDisabled":
            suggest = "are_legacy_imds_endpoints_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetRecommendedSpecInstanceOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetRecommendedSpecInstanceOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetRecommendedSpecInstanceOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class TargetAssetRecommendedSpecPreemptibleInstanceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preemptionActions":
            suggest = "preemption_actions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetRecommendedSpecPreemptibleInstanceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetRecommendedSpecPreemptibleInstanceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetRecommendedSpecPreemptibleInstanceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preemption_actions: Optional[Sequence['outputs.TargetAssetRecommendedSpecPreemptibleInstanceConfigPreemptionAction']] = None):
        if preemption_actions is not None:
            pulumi.set(__self__, "preemption_actions", preemption_actions)

    @property
    @pulumi.getter(name="preemptionActions")
    def preemption_actions(self) -> Optional[Sequence['outputs.TargetAssetRecommendedSpecPreemptibleInstanceConfigPreemptionAction']]:
        return pulumi.get(self, "preemption_actions")


@pulumi.output_type
class TargetAssetRecommendedSpecPreemptibleInstanceConfigPreemptionAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preserveBootVolume":
            suggest = "preserve_boot_volume"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetRecommendedSpecPreemptibleInstanceConfigPreemptionAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetRecommendedSpecPreemptibleInstanceConfigPreemptionAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetRecommendedSpecPreemptibleInstanceConfigPreemptionAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preserve_boot_volume: Optional[bool] = None,
                 type: Optional[str] = None):
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TargetAssetRecommendedSpecShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baselineOcpuUtilization":
            suggest = "baseline_ocpu_utilization"
        elif key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetRecommendedSpecShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetRecommendedSpecShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetRecommendedSpecShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class TargetAssetRecommendedSpecSourceDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootVolumeId":
            suggest = "boot_volume_id"
        elif key == "bootVolumeSizeInGbs":
            suggest = "boot_volume_size_in_gbs"
        elif key == "bootVolumeVpusPerGb":
            suggest = "boot_volume_vpus_per_gb"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetRecommendedSpecSourceDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetRecommendedSpecSourceDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetRecommendedSpecSourceDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_volume_id: Optional[str] = None,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 image_id: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class TargetAssetTestSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentConfigs":
            suggest = "agent_configs"
        elif key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "capacityReservationId":
            suggest = "capacity_reservation_id"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "createVnicDetails":
            suggest = "create_vnic_details"
        elif key == "dedicatedVmHostId":
            suggest = "dedicated_vm_host_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "faultDomain":
            suggest = "fault_domain"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "hostnameLabel":
            suggest = "hostname_label"
        elif key == "instanceOptions":
            suggest = "instance_options"
        elif key == "ipxeScript":
            suggest = "ipxe_script"
        elif key == "isPvEncryptionInTransitEnabled":
            suggest = "is_pv_encryption_in_transit_enabled"
        elif key == "preemptibleInstanceConfigs":
            suggest = "preemptible_instance_configs"
        elif key == "shapeConfigs":
            suggest = "shape_configs"
        elif key == "sourceDetails":
            suggest = "source_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetTestSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetTestSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetTestSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_configs: Optional[Sequence['outputs.TargetAssetTestSpecAgentConfig']] = None,
                 availability_domain: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional[Sequence['outputs.TargetAssetTestSpecCreateVnicDetail']] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 instance_options: Optional[Sequence['outputs.TargetAssetTestSpecInstanceOption']] = None,
                 ipxe_script: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 preemptible_instance_configs: Optional[Sequence['outputs.TargetAssetTestSpecPreemptibleInstanceConfig']] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.TargetAssetTestSpecShapeConfig']] = None,
                 source_details: Optional[Sequence['outputs.TargetAssetTestSpecSourceDetail']] = None):
        if agent_configs is not None:
            pulumi.set(__self__, "agent_configs", agent_configs)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if preemptible_instance_configs is not None:
            pulumi.set(__self__, "preemptible_instance_configs", preemptible_instance_configs)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)

    @property
    @pulumi.getter(name="agentConfigs")
    def agent_configs(self) -> Optional[Sequence['outputs.TargetAssetTestSpecAgentConfig']]:
        return pulumi.get(self, "agent_configs")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.TargetAssetTestSpecCreateVnicDetail']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional[Sequence['outputs.TargetAssetTestSpecInstanceOption']]:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="preemptibleInstanceConfigs")
    def preemptible_instance_configs(self) -> Optional[Sequence['outputs.TargetAssetTestSpecPreemptibleInstanceConfig']]:
        return pulumi.get(self, "preemptible_instance_configs")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.TargetAssetTestSpecShapeConfig']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.TargetAssetTestSpecSourceDetail']]:
        return pulumi.get(self, "source_details")


@pulumi.output_type
class TargetAssetTestSpecAgentConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areAllPluginsDisabled":
            suggest = "are_all_plugins_disabled"
        elif key == "isManagementDisabled":
            suggest = "is_management_disabled"
        elif key == "isMonitoringDisabled":
            suggest = "is_monitoring_disabled"
        elif key == "pluginsConfigs":
            suggest = "plugins_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetTestSpecAgentConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetTestSpecAgentConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetTestSpecAgentConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.TargetAssetTestSpecAgentConfigPluginsConfig']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.TargetAssetTestSpecAgentConfigPluginsConfig']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class TargetAssetTestSpecAgentConfigPluginsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "desiredState":
            suggest = "desired_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetTestSpecAgentConfigPluginsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetTestSpecAgentConfigPluginsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetTestSpecAgentConfigPluginsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class TargetAssetTestSpecCreateVnicDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignPrivateDnsRecord":
            suggest = "assign_private_dns_record"
        elif key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "hostnameLabel":
            suggest = "hostname_label"
        elif key == "nsgIds":
            suggest = "nsg_ids"
        elif key == "privateIp":
            suggest = "private_ip"
        elif key == "skipSourceDestCheck":
            suggest = "skip_source_dest_check"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetTestSpecCreateVnicDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetTestSpecCreateVnicDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetTestSpecCreateVnicDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class TargetAssetTestSpecInstanceOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areLegacyImdsEndpointsDisabled":
            suggest = "are_legacy_imds_endpoints_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetTestSpecInstanceOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetTestSpecInstanceOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetTestSpecInstanceOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class TargetAssetTestSpecPreemptibleInstanceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preemptionActions":
            suggest = "preemption_actions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetTestSpecPreemptibleInstanceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetTestSpecPreemptibleInstanceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetTestSpecPreemptibleInstanceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preemption_actions: Optional[Sequence['outputs.TargetAssetTestSpecPreemptibleInstanceConfigPreemptionAction']] = None):
        if preemption_actions is not None:
            pulumi.set(__self__, "preemption_actions", preemption_actions)

    @property
    @pulumi.getter(name="preemptionActions")
    def preemption_actions(self) -> Optional[Sequence['outputs.TargetAssetTestSpecPreemptibleInstanceConfigPreemptionAction']]:
        return pulumi.get(self, "preemption_actions")


@pulumi.output_type
class TargetAssetTestSpecPreemptibleInstanceConfigPreemptionAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preserveBootVolume":
            suggest = "preserve_boot_volume"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetTestSpecPreemptibleInstanceConfigPreemptionAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetTestSpecPreemptibleInstanceConfigPreemptionAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetTestSpecPreemptibleInstanceConfigPreemptionAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preserve_boot_volume: Optional[bool] = None,
                 type: Optional[str] = None):
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TargetAssetTestSpecShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baselineOcpuUtilization":
            suggest = "baseline_ocpu_utilization"
        elif key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetTestSpecShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetTestSpecShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetTestSpecShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class TargetAssetTestSpecSourceDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootVolumeId":
            suggest = "boot_volume_id"
        elif key == "bootVolumeSizeInGbs":
            suggest = "boot_volume_size_in_gbs"
        elif key == "bootVolumeVpusPerGb":
            suggest = "boot_volume_vpus_per_gb"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetTestSpecSourceDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetTestSpecSourceDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetTestSpecSourceDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_volume_id: Optional[str] = None,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 image_id: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class TargetAssetUserSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentConfig":
            suggest = "agent_config"
        elif key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "capacityReservationId":
            suggest = "capacity_reservation_id"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "createVnicDetails":
            suggest = "create_vnic_details"
        elif key == "dedicatedVmHostId":
            suggest = "dedicated_vm_host_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "faultDomain":
            suggest = "fault_domain"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "hostnameLabel":
            suggest = "hostname_label"
        elif key == "instanceOptions":
            suggest = "instance_options"
        elif key == "ipxeScript":
            suggest = "ipxe_script"
        elif key == "isPvEncryptionInTransitEnabled":
            suggest = "is_pv_encryption_in_transit_enabled"
        elif key == "preemptibleInstanceConfig":
            suggest = "preemptible_instance_config"
        elif key == "shapeConfig":
            suggest = "shape_config"
        elif key == "sourceDetails":
            suggest = "source_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetUserSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetUserSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetUserSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_config: Optional['outputs.TargetAssetUserSpecAgentConfig'] = None,
                 availability_domain: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional['outputs.TargetAssetUserSpecCreateVnicDetails'] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 instance_options: Optional['outputs.TargetAssetUserSpecInstanceOptions'] = None,
                 ipxe_script: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 preemptible_instance_config: Optional['outputs.TargetAssetUserSpecPreemptibleInstanceConfig'] = None,
                 shape: Optional[str] = None,
                 shape_config: Optional['outputs.TargetAssetUserSpecShapeConfig'] = None,
                 source_details: Optional['outputs.TargetAssetUserSpecSourceDetails'] = None):
        if agent_config is not None:
            pulumi.set(__self__, "agent_config", agent_config)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if preemptible_instance_config is not None:
            pulumi.set(__self__, "preemptible_instance_config", preemptible_instance_config)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_config is not None:
            pulumi.set(__self__, "shape_config", shape_config)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)

    @property
    @pulumi.getter(name="agentConfig")
    def agent_config(self) -> Optional['outputs.TargetAssetUserSpecAgentConfig']:
        return pulumi.get(self, "agent_config")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional['outputs.TargetAssetUserSpecCreateVnicDetails']:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional['outputs.TargetAssetUserSpecInstanceOptions']:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="preemptibleInstanceConfig")
    def preemptible_instance_config(self) -> Optional['outputs.TargetAssetUserSpecPreemptibleInstanceConfig']:
        return pulumi.get(self, "preemptible_instance_config")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfig")
    def shape_config(self) -> Optional['outputs.TargetAssetUserSpecShapeConfig']:
        return pulumi.get(self, "shape_config")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional['outputs.TargetAssetUserSpecSourceDetails']:
        return pulumi.get(self, "source_details")


@pulumi.output_type
class TargetAssetUserSpecAgentConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areAllPluginsDisabled":
            suggest = "are_all_plugins_disabled"
        elif key == "isManagementDisabled":
            suggest = "is_management_disabled"
        elif key == "isMonitoringDisabled":
            suggest = "is_monitoring_disabled"
        elif key == "pluginsConfigs":
            suggest = "plugins_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetUserSpecAgentConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetUserSpecAgentConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetUserSpecAgentConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.TargetAssetUserSpecAgentConfigPluginsConfig']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.TargetAssetUserSpecAgentConfigPluginsConfig']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class TargetAssetUserSpecAgentConfigPluginsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "desiredState":
            suggest = "desired_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetUserSpecAgentConfigPluginsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetUserSpecAgentConfigPluginsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetUserSpecAgentConfigPluginsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 desired_state: str,
                 name: str):
        pulumi.set(__self__, "desired_state", desired_state)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> str:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class TargetAssetUserSpecCreateVnicDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignPrivateDnsRecord":
            suggest = "assign_private_dns_record"
        elif key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "hostnameLabel":
            suggest = "hostname_label"
        elif key == "nsgIds":
            suggest = "nsg_ids"
        elif key == "privateIp":
            suggest = "private_ip"
        elif key == "skipSourceDestCheck":
            suggest = "skip_source_dest_check"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetUserSpecCreateVnicDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetUserSpecCreateVnicDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetUserSpecCreateVnicDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class TargetAssetUserSpecInstanceOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areLegacyImdsEndpointsDisabled":
            suggest = "are_legacy_imds_endpoints_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetUserSpecInstanceOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetUserSpecInstanceOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetUserSpecInstanceOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class TargetAssetUserSpecPreemptibleInstanceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preemptionAction":
            suggest = "preemption_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetUserSpecPreemptibleInstanceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetUserSpecPreemptibleInstanceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetUserSpecPreemptibleInstanceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preemption_action: 'outputs.TargetAssetUserSpecPreemptibleInstanceConfigPreemptionAction'):
        pulumi.set(__self__, "preemption_action", preemption_action)

    @property
    @pulumi.getter(name="preemptionAction")
    def preemption_action(self) -> 'outputs.TargetAssetUserSpecPreemptibleInstanceConfigPreemptionAction':
        return pulumi.get(self, "preemption_action")


@pulumi.output_type
class TargetAssetUserSpecPreemptibleInstanceConfigPreemptionAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preserveBootVolume":
            suggest = "preserve_boot_volume"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetUserSpecPreemptibleInstanceConfigPreemptionAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetUserSpecPreemptibleInstanceConfigPreemptionAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetUserSpecPreemptibleInstanceConfigPreemptionAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 preserve_boot_volume: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")


@pulumi.output_type
class TargetAssetUserSpecShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baselineOcpuUtilization":
            suggest = "baseline_ocpu_utilization"
        elif key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetUserSpecShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetUserSpecShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetUserSpecShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class TargetAssetUserSpecSourceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "bootVolumeId":
            suggest = "boot_volume_id"
        elif key == "bootVolumeSizeInGbs":
            suggest = "boot_volume_size_in_gbs"
        elif key == "bootVolumeVpusPerGb":
            suggest = "boot_volume_vpus_per_gb"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetAssetUserSpecSourceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetAssetUserSpecSourceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetAssetUserSpecSourceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 boot_volume_id: Optional[str] = None,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 image_id: Optional[str] = None,
                 kms_key_id: Optional[str] = None):
        pulumi.set(__self__, "source_type", source_type)
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class GetMigrationAssetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMigrationAssetsMigrationAssetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMigrationAssetsMigrationAssetCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMigrationAssetsMigrationAssetCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMigrationAssetsMigrationAssetCollectionItemResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 depended_on_bies: Optional[Sequence[str]] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 inventory_asset_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 migration_asset_depends_ons: Optional[Sequence[str]] = None,
                 migration_id: Optional[str] = None,
                 notifications: Optional[Sequence[str]] = None,
                 parent_snapshot: Optional[str] = None,
                 replication_compartment_id: Optional[str] = None,
                 replication_schedule_id: Optional[str] = None,
                 snap_shot_bucket_name: Optional[str] = None,
                 snapshots: Optional[Mapping[str, Any]] = None,
                 source_asset_id: Optional[str] = None,
                 state: Optional[str] = None,
                 tenancy_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if depended_on_bies is not None:
            pulumi.set(__self__, "depended_on_bies", depended_on_bies)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inventory_asset_id is not None:
            pulumi.set(__self__, "inventory_asset_id", inventory_asset_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if migration_asset_depends_ons is not None:
            pulumi.set(__self__, "migration_asset_depends_ons", migration_asset_depends_ons)
        if migration_id is not None:
            pulumi.set(__self__, "migration_id", migration_id)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if parent_snapshot is not None:
            pulumi.set(__self__, "parent_snapshot", parent_snapshot)
        if replication_compartment_id is not None:
            pulumi.set(__self__, "replication_compartment_id", replication_compartment_id)
        if replication_schedule_id is not None:
            pulumi.set(__self__, "replication_schedule_id", replication_schedule_id)
        if snap_shot_bucket_name is not None:
            pulumi.set(__self__, "snap_shot_bucket_name", snap_shot_bucket_name)
        if snapshots is not None:
            pulumi.set(__self__, "snapshots", snapshots)
        if source_asset_id is not None:
            pulumi.set(__self__, "source_asset_id", source_asset_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tenancy_id is not None:
            pulumi.set(__self__, "tenancy_id", tenancy_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dependedOnBies")
    def depended_on_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depended_on_bies")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inventoryAssetId")
    def inventory_asset_id(self) -> Optional[str]:
        return pulumi.get(self, "inventory_asset_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="migrationAssetDependsOns")
    def migration_asset_depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "migration_asset_depends_ons")

    @property
    @pulumi.getter(name="migrationId")
    def migration_id(self) -> Optional[str]:
        return pulumi.get(self, "migration_id")

    @property
    @pulumi.getter
    def notifications(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter(name="parentSnapshot")
    def parent_snapshot(self) -> Optional[str]:
        return pulumi.get(self, "parent_snapshot")

    @property
    @pulumi.getter(name="replicationCompartmentId")
    def replication_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_compartment_id")

    @property
    @pulumi.getter(name="replicationScheduleId")
    def replication_schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_schedule_id")

    @property
    @pulumi.getter(name="snapShotBucketName")
    def snap_shot_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "snap_shot_bucket_name")

    @property
    @pulumi.getter
    def snapshots(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "snapshots")

    @property
    @pulumi.getter(name="sourceAssetId")
    def source_asset_id(self) -> Optional[str]:
        return pulumi.get(self, "source_asset_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationPlanAvailableShapeItemResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 gpu_description: Optional[str] = None,
                 gpus: Optional[int] = None,
                 local_disk_description: Optional[str] = None,
                 local_disks: Optional[int] = None,
                 local_disks_total_size_in_gbs: Optional[float] = None,
                 max_vnic_attachments: Optional[int] = None,
                 memory_in_gbs: Optional[float] = None,
                 min_total_baseline_ocpus_required: Optional[float] = None,
                 networking_bandwidth_in_gbps: Optional[float] = None,
                 ocpus: Optional[float] = None,
                 pagination_token: Optional[str] = None,
                 processor_description: Optional[str] = None,
                 shape: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if gpu_description is not None:
            pulumi.set(__self__, "gpu_description", gpu_description)
        if gpus is not None:
            pulumi.set(__self__, "gpus", gpus)
        if local_disk_description is not None:
            pulumi.set(__self__, "local_disk_description", local_disk_description)
        if local_disks is not None:
            pulumi.set(__self__, "local_disks", local_disks)
        if local_disks_total_size_in_gbs is not None:
            pulumi.set(__self__, "local_disks_total_size_in_gbs", local_disks_total_size_in_gbs)
        if max_vnic_attachments is not None:
            pulumi.set(__self__, "max_vnic_attachments", max_vnic_attachments)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if min_total_baseline_ocpus_required is not None:
            pulumi.set(__self__, "min_total_baseline_ocpus_required", min_total_baseline_ocpus_required)
        if networking_bandwidth_in_gbps is not None:
            pulumi.set(__self__, "networking_bandwidth_in_gbps", networking_bandwidth_in_gbps)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if pagination_token is not None:
            pulumi.set(__self__, "pagination_token", pagination_token)
        if processor_description is not None:
            pulumi.set(__self__, "processor_description", processor_description)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="gpuDescription")
    def gpu_description(self) -> Optional[str]:
        return pulumi.get(self, "gpu_description")

    @property
    @pulumi.getter
    def gpus(self) -> Optional[int]:
        return pulumi.get(self, "gpus")

    @property
    @pulumi.getter(name="localDiskDescription")
    def local_disk_description(self) -> Optional[str]:
        return pulumi.get(self, "local_disk_description")

    @property
    @pulumi.getter(name="localDisks")
    def local_disks(self) -> Optional[int]:
        return pulumi.get(self, "local_disks")

    @property
    @pulumi.getter(name="localDisksTotalSizeInGbs")
    def local_disks_total_size_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "local_disks_total_size_in_gbs")

    @property
    @pulumi.getter(name="maxVnicAttachments")
    def max_vnic_attachments(self) -> Optional[int]:
        return pulumi.get(self, "max_vnic_attachments")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter(name="minTotalBaselineOcpusRequired")
    def min_total_baseline_ocpus_required(self) -> Optional[float]:
        return pulumi.get(self, "min_total_baseline_ocpus_required")

    @property
    @pulumi.getter(name="networkingBandwidthInGbps")
    def networking_bandwidth_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "networking_bandwidth_in_gbps")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter(name="paginationToken")
    def pagination_token(self) -> Optional[str]:
        return pulumi.get(self, "pagination_token")

    @property
    @pulumi.getter(name="processorDescription")
    def processor_description(self) -> Optional[str]:
        return pulumi.get(self, "processor_description")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class GetMigrationPlanAvailableShapesAvailableShapesCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMigrationPlanAvailableShapesAvailableShapesCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMigrationPlanAvailableShapesAvailableShapesCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMigrationPlanAvailableShapesAvailableShapesCollectionItemResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 gpu_description: Optional[str] = None,
                 gpus: Optional[int] = None,
                 local_disk_description: Optional[str] = None,
                 local_disks: Optional[int] = None,
                 local_disks_total_size_in_gbs: Optional[float] = None,
                 max_vnic_attachments: Optional[int] = None,
                 memory_in_gbs: Optional[float] = None,
                 min_total_baseline_ocpus_required: Optional[float] = None,
                 networking_bandwidth_in_gbps: Optional[float] = None,
                 ocpus: Optional[float] = None,
                 pagination_token: Optional[str] = None,
                 processor_description: Optional[str] = None,
                 shape: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if gpu_description is not None:
            pulumi.set(__self__, "gpu_description", gpu_description)
        if gpus is not None:
            pulumi.set(__self__, "gpus", gpus)
        if local_disk_description is not None:
            pulumi.set(__self__, "local_disk_description", local_disk_description)
        if local_disks is not None:
            pulumi.set(__self__, "local_disks", local_disks)
        if local_disks_total_size_in_gbs is not None:
            pulumi.set(__self__, "local_disks_total_size_in_gbs", local_disks_total_size_in_gbs)
        if max_vnic_attachments is not None:
            pulumi.set(__self__, "max_vnic_attachments", max_vnic_attachments)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if min_total_baseline_ocpus_required is not None:
            pulumi.set(__self__, "min_total_baseline_ocpus_required", min_total_baseline_ocpus_required)
        if networking_bandwidth_in_gbps is not None:
            pulumi.set(__self__, "networking_bandwidth_in_gbps", networking_bandwidth_in_gbps)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if pagination_token is not None:
            pulumi.set(__self__, "pagination_token", pagination_token)
        if processor_description is not None:
            pulumi.set(__self__, "processor_description", processor_description)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="gpuDescription")
    def gpu_description(self) -> Optional[str]:
        return pulumi.get(self, "gpu_description")

    @property
    @pulumi.getter
    def gpus(self) -> Optional[int]:
        return pulumi.get(self, "gpus")

    @property
    @pulumi.getter(name="localDiskDescription")
    def local_disk_description(self) -> Optional[str]:
        return pulumi.get(self, "local_disk_description")

    @property
    @pulumi.getter(name="localDisks")
    def local_disks(self) -> Optional[int]:
        return pulumi.get(self, "local_disks")

    @property
    @pulumi.getter(name="localDisksTotalSizeInGbs")
    def local_disks_total_size_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "local_disks_total_size_in_gbs")

    @property
    @pulumi.getter(name="maxVnicAttachments")
    def max_vnic_attachments(self) -> Optional[int]:
        return pulumi.get(self, "max_vnic_attachments")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter(name="minTotalBaselineOcpusRequired")
    def min_total_baseline_ocpus_required(self) -> Optional[float]:
        return pulumi.get(self, "min_total_baseline_ocpus_required")

    @property
    @pulumi.getter(name="networkingBandwidthInGbps")
    def networking_bandwidth_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "networking_bandwidth_in_gbps")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter(name="paginationToken")
    def pagination_token(self) -> Optional[str]:
        return pulumi.get(self, "pagination_token")

    @property
    @pulumi.getter(name="processorDescription")
    def processor_description(self) -> Optional[str]:
        return pulumi.get(self, "processor_description")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class GetMigrationPlanAvailableShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMigrationPlanMigrationPlanStatResult(dict):
    def __init__(__self__, *,
                 time_updated: Optional[str] = None,
                 total_estimated_costs: Optional[Sequence['outputs.GetMigrationPlanMigrationPlanStatTotalEstimatedCostResult']] = None,
                 vm_count: Optional[int] = None):
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if total_estimated_costs is not None:
            pulumi.set(__self__, "total_estimated_costs", total_estimated_costs)
        if vm_count is not None:
            pulumi.set(__self__, "vm_count", vm_count)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="totalEstimatedCosts")
    def total_estimated_costs(self) -> Optional[Sequence['outputs.GetMigrationPlanMigrationPlanStatTotalEstimatedCostResult']]:
        return pulumi.get(self, "total_estimated_costs")

    @property
    @pulumi.getter(name="vmCount")
    def vm_count(self) -> Optional[int]:
        return pulumi.get(self, "vm_count")


@pulumi.output_type
class GetMigrationPlanMigrationPlanStatTotalEstimatedCostResult(dict):
    def __init__(__self__, *,
                 computes: Optional[Sequence['outputs.GetMigrationPlanMigrationPlanStatTotalEstimatedCostComputeResult']] = None,
                 currency_code: Optional[str] = None,
                 os_images: Optional[Sequence['outputs.GetMigrationPlanMigrationPlanStatTotalEstimatedCostOsImageResult']] = None,
                 storages: Optional[Sequence['outputs.GetMigrationPlanMigrationPlanStatTotalEstimatedCostStorageResult']] = None,
                 subscription_id: Optional[str] = None,
                 total_estimation_per_month: Optional[float] = None,
                 total_estimation_per_month_by_subscription: Optional[float] = None):
        if computes is not None:
            pulumi.set(__self__, "computes", computes)
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if os_images is not None:
            pulumi.set(__self__, "os_images", os_images)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if total_estimation_per_month is not None:
            pulumi.set(__self__, "total_estimation_per_month", total_estimation_per_month)
        if total_estimation_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_estimation_per_month_by_subscription", total_estimation_per_month_by_subscription)

    @property
    @pulumi.getter
    def computes(self) -> Optional[Sequence['outputs.GetMigrationPlanMigrationPlanStatTotalEstimatedCostComputeResult']]:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="osImages")
    def os_images(self) -> Optional[Sequence['outputs.GetMigrationPlanMigrationPlanStatTotalEstimatedCostOsImageResult']]:
        return pulumi.get(self, "os_images")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.GetMigrationPlanMigrationPlanStatTotalEstimatedCostStorageResult']]:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="totalEstimationPerMonth")
    def total_estimation_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_estimation_per_month")

    @property
    @pulumi.getter(name="totalEstimationPerMonthBySubscription")
    def total_estimation_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_estimation_per_month_by_subscription")


@pulumi.output_type
class GetMigrationPlanMigrationPlanStatTotalEstimatedCostComputeResult(dict):
    def __init__(__self__, *,
                 gpu_count: Optional[float] = None,
                 gpu_per_hour: Optional[float] = None,
                 gpu_per_hour_by_subscription: Optional[float] = None,
                 memory_amount_gb: Optional[float] = None,
                 memory_gb_per_hour: Optional[float] = None,
                 memory_gb_per_hour_by_subscription: Optional[float] = None,
                 ocpu_count: Optional[float] = None,
                 ocpu_per_hour: Optional[float] = None,
                 ocpu_per_hour_by_subscription: Optional[float] = None,
                 total_per_hour: Optional[float] = None,
                 total_per_hour_by_subscription: Optional[float] = None):
        if gpu_count is not None:
            pulumi.set(__self__, "gpu_count", gpu_count)
        if gpu_per_hour is not None:
            pulumi.set(__self__, "gpu_per_hour", gpu_per_hour)
        if gpu_per_hour_by_subscription is not None:
            pulumi.set(__self__, "gpu_per_hour_by_subscription", gpu_per_hour_by_subscription)
        if memory_amount_gb is not None:
            pulumi.set(__self__, "memory_amount_gb", memory_amount_gb)
        if memory_gb_per_hour is not None:
            pulumi.set(__self__, "memory_gb_per_hour", memory_gb_per_hour)
        if memory_gb_per_hour_by_subscription is not None:
            pulumi.set(__self__, "memory_gb_per_hour_by_subscription", memory_gb_per_hour_by_subscription)
        if ocpu_count is not None:
            pulumi.set(__self__, "ocpu_count", ocpu_count)
        if ocpu_per_hour is not None:
            pulumi.set(__self__, "ocpu_per_hour", ocpu_per_hour)
        if ocpu_per_hour_by_subscription is not None:
            pulumi.set(__self__, "ocpu_per_hour_by_subscription", ocpu_per_hour_by_subscription)
        if total_per_hour is not None:
            pulumi.set(__self__, "total_per_hour", total_per_hour)
        if total_per_hour_by_subscription is not None:
            pulumi.set(__self__, "total_per_hour_by_subscription", total_per_hour_by_subscription)

    @property
    @pulumi.getter(name="gpuCount")
    def gpu_count(self) -> Optional[float]:
        return pulumi.get(self, "gpu_count")

    @property
    @pulumi.getter(name="gpuPerHour")
    def gpu_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "gpu_per_hour")

    @property
    @pulumi.getter(name="gpuPerHourBySubscription")
    def gpu_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "gpu_per_hour_by_subscription")

    @property
    @pulumi.getter(name="memoryAmountGb")
    def memory_amount_gb(self) -> Optional[float]:
        return pulumi.get(self, "memory_amount_gb")

    @property
    @pulumi.getter(name="memoryGbPerHour")
    def memory_gb_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "memory_gb_per_hour")

    @property
    @pulumi.getter(name="memoryGbPerHourBySubscription")
    def memory_gb_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "memory_gb_per_hour_by_subscription")

    @property
    @pulumi.getter(name="ocpuCount")
    def ocpu_count(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_count")

    @property
    @pulumi.getter(name="ocpuPerHour")
    def ocpu_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_per_hour")

    @property
    @pulumi.getter(name="ocpuPerHourBySubscription")
    def ocpu_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_per_hour_by_subscription")

    @property
    @pulumi.getter(name="totalPerHour")
    def total_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour")

    @property
    @pulumi.getter(name="totalPerHourBySubscription")
    def total_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour_by_subscription")


@pulumi.output_type
class GetMigrationPlanMigrationPlanStatTotalEstimatedCostOsImageResult(dict):
    def __init__(__self__, *,
                 total_per_hour: Optional[float] = None,
                 total_per_hour_by_subscription: Optional[float] = None):
        if total_per_hour is not None:
            pulumi.set(__self__, "total_per_hour", total_per_hour)
        if total_per_hour_by_subscription is not None:
            pulumi.set(__self__, "total_per_hour_by_subscription", total_per_hour_by_subscription)

    @property
    @pulumi.getter(name="totalPerHour")
    def total_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour")

    @property
    @pulumi.getter(name="totalPerHourBySubscription")
    def total_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour_by_subscription")


@pulumi.output_type
class GetMigrationPlanMigrationPlanStatTotalEstimatedCostStorageResult(dict):
    def __init__(__self__, *,
                 total_gb_per_month: Optional[float] = None,
                 total_gb_per_month_by_subscription: Optional[float] = None,
                 volumes: Optional[Sequence['outputs.GetMigrationPlanMigrationPlanStatTotalEstimatedCostStorageVolumeResult']] = None):
        if total_gb_per_month is not None:
            pulumi.set(__self__, "total_gb_per_month", total_gb_per_month)
        if total_gb_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_gb_per_month_by_subscription", total_gb_per_month_by_subscription)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter(name="totalGbPerMonth")
    def total_gb_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month")

    @property
    @pulumi.getter(name="totalGbPerMonthBySubscription")
    def total_gb_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month_by_subscription")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.GetMigrationPlanMigrationPlanStatTotalEstimatedCostStorageVolumeResult']]:
        return pulumi.get(self, "volumes")


@pulumi.output_type
class GetMigrationPlanMigrationPlanStatTotalEstimatedCostStorageVolumeResult(dict):
    def __init__(__self__, *,
                 capacity_gb: Optional[float] = None,
                 description: Optional[str] = None,
                 total_gb_per_month: Optional[float] = None,
                 total_gb_per_month_by_subscription: Optional[float] = None):
        if capacity_gb is not None:
            pulumi.set(__self__, "capacity_gb", capacity_gb)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if total_gb_per_month is not None:
            pulumi.set(__self__, "total_gb_per_month", total_gb_per_month)
        if total_gb_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_gb_per_month_by_subscription", total_gb_per_month_by_subscription)

    @property
    @pulumi.getter(name="capacityGb")
    def capacity_gb(self) -> Optional[float]:
        return pulumi.get(self, "capacity_gb")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="totalGbPerMonth")
    def total_gb_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month")

    @property
    @pulumi.getter(name="totalGbPerMonthBySubscription")
    def total_gb_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month_by_subscription")


@pulumi.output_type
class GetMigrationPlanStrategyResult(dict):
    def __init__(__self__, *,
                 adjustment_multiplier: Optional[float] = None,
                 metric_time_window: Optional[str] = None,
                 metric_type: Optional[str] = None,
                 percentile: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 strategy_type: Optional[str] = None):
        if adjustment_multiplier is not None:
            pulumi.set(__self__, "adjustment_multiplier", adjustment_multiplier)
        if metric_time_window is not None:
            pulumi.set(__self__, "metric_time_window", metric_time_window)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if percentile is not None:
            pulumi.set(__self__, "percentile", percentile)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if strategy_type is not None:
            pulumi.set(__self__, "strategy_type", strategy_type)

    @property
    @pulumi.getter(name="adjustmentMultiplier")
    def adjustment_multiplier(self) -> Optional[float]:
        return pulumi.get(self, "adjustment_multiplier")

    @property
    @pulumi.getter(name="metricTimeWindow")
    def metric_time_window(self) -> Optional[str]:
        return pulumi.get(self, "metric_time_window")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def percentile(self) -> Optional[str]:
        return pulumi.get(self, "percentile")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> Optional[str]:
        return pulumi.get(self, "strategy_type")


@pulumi.output_type
class GetMigrationPlanTargetEnvironmentResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 dedicated_vm_host: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 ms_license: Optional[str] = None,
                 preferred_shape_type: Optional[str] = None,
                 subnet: Optional[str] = None,
                 target_compartment_id: Optional[str] = None,
                 target_environment_type: Optional[str] = None,
                 vcn: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if dedicated_vm_host is not None:
            pulumi.set(__self__, "dedicated_vm_host", dedicated_vm_host)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if ms_license is not None:
            pulumi.set(__self__, "ms_license", ms_license)
        if preferred_shape_type is not None:
            pulumi.set(__self__, "preferred_shape_type", preferred_shape_type)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if target_compartment_id is not None:
            pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        if target_environment_type is not None:
            pulumi.set(__self__, "target_environment_type", target_environment_type)
        if vcn is not None:
            pulumi.set(__self__, "vcn", vcn)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="dedicatedVmHost")
    def dedicated_vm_host(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="msLicense")
    def ms_license(self) -> Optional[str]:
        return pulumi.get(self, "ms_license")

    @property
    @pulumi.getter(name="preferredShapeType")
    def preferred_shape_type(self) -> Optional[str]:
        return pulumi.get(self, "preferred_shape_type")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "target_compartment_id")

    @property
    @pulumi.getter(name="targetEnvironmentType")
    def target_environment_type(self) -> Optional[str]:
        return pulumi.get(self, "target_environment_type")

    @property
    @pulumi.getter
    def vcn(self) -> Optional[str]:
        return pulumi.get(self, "vcn")


@pulumi.output_type
class GetMigrationPlansFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMigrationPlansMigrationPlanCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMigrationPlansMigrationPlanCollectionItemResult(dict):
    def __init__(__self__, *,
                 calculated_limits: Optional[Mapping[str, Any]] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 migration_id: Optional[str] = None,
                 migration_plan_stats: Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatResult']] = None,
                 reference_to_rms_stack: Optional[str] = None,
                 source_migration_plan_id: Optional[str] = None,
                 state: Optional[str] = None,
                 strategies: Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemStrategyResult']] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_environments: Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemTargetEnvironmentResult']] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if calculated_limits is not None:
            pulumi.set(__self__, "calculated_limits", calculated_limits)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if migration_id is not None:
            pulumi.set(__self__, "migration_id", migration_id)
        if migration_plan_stats is not None:
            pulumi.set(__self__, "migration_plan_stats", migration_plan_stats)
        if reference_to_rms_stack is not None:
            pulumi.set(__self__, "reference_to_rms_stack", reference_to_rms_stack)
        if source_migration_plan_id is not None:
            pulumi.set(__self__, "source_migration_plan_id", source_migration_plan_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if strategies is not None:
            pulumi.set(__self__, "strategies", strategies)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_environments is not None:
            pulumi.set(__self__, "target_environments", target_environments)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="calculatedLimits")
    def calculated_limits(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "calculated_limits")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="migrationId")
    def migration_id(self) -> Optional[str]:
        return pulumi.get(self, "migration_id")

    @property
    @pulumi.getter(name="migrationPlanStats")
    def migration_plan_stats(self) -> Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatResult']]:
        return pulumi.get(self, "migration_plan_stats")

    @property
    @pulumi.getter(name="referenceToRmsStack")
    def reference_to_rms_stack(self) -> Optional[str]:
        return pulumi.get(self, "reference_to_rms_stack")

    @property
    @pulumi.getter(name="sourceMigrationPlanId")
    def source_migration_plan_id(self) -> Optional[str]:
        return pulumi.get(self, "source_migration_plan_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def strategies(self) -> Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemStrategyResult']]:
        return pulumi.get(self, "strategies")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetEnvironments")
    def target_environments(self) -> Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemTargetEnvironmentResult']]:
        return pulumi.get(self, "target_environments")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatResult(dict):
    def __init__(__self__, *,
                 time_updated: Optional[str] = None,
                 total_estimated_costs: Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostResult']] = None,
                 vm_count: Optional[int] = None):
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if total_estimated_costs is not None:
            pulumi.set(__self__, "total_estimated_costs", total_estimated_costs)
        if vm_count is not None:
            pulumi.set(__self__, "vm_count", vm_count)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="totalEstimatedCosts")
    def total_estimated_costs(self) -> Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostResult']]:
        return pulumi.get(self, "total_estimated_costs")

    @property
    @pulumi.getter(name="vmCount")
    def vm_count(self) -> Optional[int]:
        return pulumi.get(self, "vm_count")


@pulumi.output_type
class GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostResult(dict):
    def __init__(__self__, *,
                 computes: Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostComputeResult']] = None,
                 currency_code: Optional[str] = None,
                 os_images: Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostOsImageResult']] = None,
                 storages: Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostStorageResult']] = None,
                 subscription_id: Optional[str] = None,
                 total_estimation_per_month: Optional[float] = None,
                 total_estimation_per_month_by_subscription: Optional[float] = None):
        if computes is not None:
            pulumi.set(__self__, "computes", computes)
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if os_images is not None:
            pulumi.set(__self__, "os_images", os_images)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if total_estimation_per_month is not None:
            pulumi.set(__self__, "total_estimation_per_month", total_estimation_per_month)
        if total_estimation_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_estimation_per_month_by_subscription", total_estimation_per_month_by_subscription)

    @property
    @pulumi.getter
    def computes(self) -> Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostComputeResult']]:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="osImages")
    def os_images(self) -> Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostOsImageResult']]:
        return pulumi.get(self, "os_images")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostStorageResult']]:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="totalEstimationPerMonth")
    def total_estimation_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_estimation_per_month")

    @property
    @pulumi.getter(name="totalEstimationPerMonthBySubscription")
    def total_estimation_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_estimation_per_month_by_subscription")


@pulumi.output_type
class GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostComputeResult(dict):
    def __init__(__self__, *,
                 gpu_count: Optional[float] = None,
                 gpu_per_hour: Optional[float] = None,
                 gpu_per_hour_by_subscription: Optional[float] = None,
                 memory_amount_gb: Optional[float] = None,
                 memory_gb_per_hour: Optional[float] = None,
                 memory_gb_per_hour_by_subscription: Optional[float] = None,
                 ocpu_count: Optional[float] = None,
                 ocpu_per_hour: Optional[float] = None,
                 ocpu_per_hour_by_subscription: Optional[float] = None,
                 total_per_hour: Optional[float] = None,
                 total_per_hour_by_subscription: Optional[float] = None):
        if gpu_count is not None:
            pulumi.set(__self__, "gpu_count", gpu_count)
        if gpu_per_hour is not None:
            pulumi.set(__self__, "gpu_per_hour", gpu_per_hour)
        if gpu_per_hour_by_subscription is not None:
            pulumi.set(__self__, "gpu_per_hour_by_subscription", gpu_per_hour_by_subscription)
        if memory_amount_gb is not None:
            pulumi.set(__self__, "memory_amount_gb", memory_amount_gb)
        if memory_gb_per_hour is not None:
            pulumi.set(__self__, "memory_gb_per_hour", memory_gb_per_hour)
        if memory_gb_per_hour_by_subscription is not None:
            pulumi.set(__self__, "memory_gb_per_hour_by_subscription", memory_gb_per_hour_by_subscription)
        if ocpu_count is not None:
            pulumi.set(__self__, "ocpu_count", ocpu_count)
        if ocpu_per_hour is not None:
            pulumi.set(__self__, "ocpu_per_hour", ocpu_per_hour)
        if ocpu_per_hour_by_subscription is not None:
            pulumi.set(__self__, "ocpu_per_hour_by_subscription", ocpu_per_hour_by_subscription)
        if total_per_hour is not None:
            pulumi.set(__self__, "total_per_hour", total_per_hour)
        if total_per_hour_by_subscription is not None:
            pulumi.set(__self__, "total_per_hour_by_subscription", total_per_hour_by_subscription)

    @property
    @pulumi.getter(name="gpuCount")
    def gpu_count(self) -> Optional[float]:
        return pulumi.get(self, "gpu_count")

    @property
    @pulumi.getter(name="gpuPerHour")
    def gpu_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "gpu_per_hour")

    @property
    @pulumi.getter(name="gpuPerHourBySubscription")
    def gpu_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "gpu_per_hour_by_subscription")

    @property
    @pulumi.getter(name="memoryAmountGb")
    def memory_amount_gb(self) -> Optional[float]:
        return pulumi.get(self, "memory_amount_gb")

    @property
    @pulumi.getter(name="memoryGbPerHour")
    def memory_gb_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "memory_gb_per_hour")

    @property
    @pulumi.getter(name="memoryGbPerHourBySubscription")
    def memory_gb_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "memory_gb_per_hour_by_subscription")

    @property
    @pulumi.getter(name="ocpuCount")
    def ocpu_count(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_count")

    @property
    @pulumi.getter(name="ocpuPerHour")
    def ocpu_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_per_hour")

    @property
    @pulumi.getter(name="ocpuPerHourBySubscription")
    def ocpu_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_per_hour_by_subscription")

    @property
    @pulumi.getter(name="totalPerHour")
    def total_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour")

    @property
    @pulumi.getter(name="totalPerHourBySubscription")
    def total_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour_by_subscription")


@pulumi.output_type
class GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostOsImageResult(dict):
    def __init__(__self__, *,
                 total_per_hour: Optional[float] = None,
                 total_per_hour_by_subscription: Optional[float] = None):
        if total_per_hour is not None:
            pulumi.set(__self__, "total_per_hour", total_per_hour)
        if total_per_hour_by_subscription is not None:
            pulumi.set(__self__, "total_per_hour_by_subscription", total_per_hour_by_subscription)

    @property
    @pulumi.getter(name="totalPerHour")
    def total_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour")

    @property
    @pulumi.getter(name="totalPerHourBySubscription")
    def total_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour_by_subscription")


@pulumi.output_type
class GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostStorageResult(dict):
    def __init__(__self__, *,
                 total_gb_per_month: Optional[float] = None,
                 total_gb_per_month_by_subscription: Optional[float] = None,
                 volumes: Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostStorageVolumeResult']] = None):
        if total_gb_per_month is not None:
            pulumi.set(__self__, "total_gb_per_month", total_gb_per_month)
        if total_gb_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_gb_per_month_by_subscription", total_gb_per_month_by_subscription)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter(name="totalGbPerMonth")
    def total_gb_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month")

    @property
    @pulumi.getter(name="totalGbPerMonthBySubscription")
    def total_gb_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month_by_subscription")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostStorageVolumeResult']]:
        return pulumi.get(self, "volumes")


@pulumi.output_type
class GetMigrationPlansMigrationPlanCollectionItemMigrationPlanStatTotalEstimatedCostStorageVolumeResult(dict):
    def __init__(__self__, *,
                 capacity_gb: Optional[float] = None,
                 description: Optional[str] = None,
                 total_gb_per_month: Optional[float] = None,
                 total_gb_per_month_by_subscription: Optional[float] = None):
        if capacity_gb is not None:
            pulumi.set(__self__, "capacity_gb", capacity_gb)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if total_gb_per_month is not None:
            pulumi.set(__self__, "total_gb_per_month", total_gb_per_month)
        if total_gb_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_gb_per_month_by_subscription", total_gb_per_month_by_subscription)

    @property
    @pulumi.getter(name="capacityGb")
    def capacity_gb(self) -> Optional[float]:
        return pulumi.get(self, "capacity_gb")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="totalGbPerMonth")
    def total_gb_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month")

    @property
    @pulumi.getter(name="totalGbPerMonthBySubscription")
    def total_gb_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month_by_subscription")


@pulumi.output_type
class GetMigrationPlansMigrationPlanCollectionItemStrategyResult(dict):
    def __init__(__self__, *,
                 adjustment_multiplier: Optional[float] = None,
                 metric_time_window: Optional[str] = None,
                 metric_type: Optional[str] = None,
                 percentile: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 strategy_type: Optional[str] = None):
        if adjustment_multiplier is not None:
            pulumi.set(__self__, "adjustment_multiplier", adjustment_multiplier)
        if metric_time_window is not None:
            pulumi.set(__self__, "metric_time_window", metric_time_window)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if percentile is not None:
            pulumi.set(__self__, "percentile", percentile)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if strategy_type is not None:
            pulumi.set(__self__, "strategy_type", strategy_type)

    @property
    @pulumi.getter(name="adjustmentMultiplier")
    def adjustment_multiplier(self) -> Optional[float]:
        return pulumi.get(self, "adjustment_multiplier")

    @property
    @pulumi.getter(name="metricTimeWindow")
    def metric_time_window(self) -> Optional[str]:
        return pulumi.get(self, "metric_time_window")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def percentile(self) -> Optional[str]:
        return pulumi.get(self, "percentile")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> Optional[str]:
        return pulumi.get(self, "strategy_type")


@pulumi.output_type
class GetMigrationPlansMigrationPlanCollectionItemTargetEnvironmentResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 dedicated_vm_host: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 ms_license: Optional[str] = None,
                 preferred_shape_type: Optional[str] = None,
                 subnet: Optional[str] = None,
                 target_compartment_id: Optional[str] = None,
                 target_environment_type: Optional[str] = None,
                 vcn: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if dedicated_vm_host is not None:
            pulumi.set(__self__, "dedicated_vm_host", dedicated_vm_host)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if ms_license is not None:
            pulumi.set(__self__, "ms_license", ms_license)
        if preferred_shape_type is not None:
            pulumi.set(__self__, "preferred_shape_type", preferred_shape_type)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if target_compartment_id is not None:
            pulumi.set(__self__, "target_compartment_id", target_compartment_id)
        if target_environment_type is not None:
            pulumi.set(__self__, "target_environment_type", target_environment_type)
        if vcn is not None:
            pulumi.set(__self__, "vcn", vcn)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="dedicatedVmHost")
    def dedicated_vm_host(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="msLicense")
    def ms_license(self) -> Optional[str]:
        return pulumi.get(self, "ms_license")

    @property
    @pulumi.getter(name="preferredShapeType")
    def preferred_shape_type(self) -> Optional[str]:
        return pulumi.get(self, "preferred_shape_type")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="targetCompartmentId")
    def target_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "target_compartment_id")

    @property
    @pulumi.getter(name="targetEnvironmentType")
    def target_environment_type(self) -> Optional[str]:
        return pulumi.get(self, "target_environment_type")

    @property
    @pulumi.getter
    def vcn(self) -> Optional[str]:
        return pulumi.get(self, "vcn")


@pulumi.output_type
class GetMigrationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMigrationsMigrationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_completed: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 replication_schedule_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_completed is not None:
            pulumi.set(__self__, "is_completed", is_completed)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if replication_schedule_id is not None:
            pulumi.set(__self__, "replication_schedule_id", replication_schedule_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCompleted")
    def is_completed(self) -> Optional[bool]:
        return pulumi.get(self, "is_completed")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="replicationScheduleId")
    def replication_schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_schedule_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetReplicationSchedulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetReplicationSchedulesReplicationScheduleCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetReplicationSchedulesReplicationScheduleCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetReplicationSchedulesReplicationScheduleCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetReplicationSchedulesReplicationScheduleCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 execution_recurrences: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if execution_recurrences is not None:
            pulumi.set(__self__, "execution_recurrences", execution_recurrences)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionRecurrences")
    def execution_recurrences(self) -> Optional[str]:
        return pulumi.get(self, "execution_recurrences")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetTargetAssetCompatibilityMessageResult(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 name: Optional[str] = None,
                 severity: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetTargetAssetEstimatedCostResult(dict):
    def __init__(__self__, *,
                 computes: Optional[Sequence['outputs.GetTargetAssetEstimatedCostComputeResult']] = None,
                 currency_code: Optional[str] = None,
                 os_images: Optional[Sequence['outputs.GetTargetAssetEstimatedCostOsImageResult']] = None,
                 storages: Optional[Sequence['outputs.GetTargetAssetEstimatedCostStorageResult']] = None,
                 subscription_id: Optional[str] = None,
                 total_estimation_per_month: Optional[float] = None,
                 total_estimation_per_month_by_subscription: Optional[float] = None):
        if computes is not None:
            pulumi.set(__self__, "computes", computes)
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if os_images is not None:
            pulumi.set(__self__, "os_images", os_images)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if total_estimation_per_month is not None:
            pulumi.set(__self__, "total_estimation_per_month", total_estimation_per_month)
        if total_estimation_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_estimation_per_month_by_subscription", total_estimation_per_month_by_subscription)

    @property
    @pulumi.getter
    def computes(self) -> Optional[Sequence['outputs.GetTargetAssetEstimatedCostComputeResult']]:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="osImages")
    def os_images(self) -> Optional[Sequence['outputs.GetTargetAssetEstimatedCostOsImageResult']]:
        return pulumi.get(self, "os_images")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.GetTargetAssetEstimatedCostStorageResult']]:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="totalEstimationPerMonth")
    def total_estimation_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_estimation_per_month")

    @property
    @pulumi.getter(name="totalEstimationPerMonthBySubscription")
    def total_estimation_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_estimation_per_month_by_subscription")


@pulumi.output_type
class GetTargetAssetEstimatedCostComputeResult(dict):
    def __init__(__self__, *,
                 gpu_count: Optional[float] = None,
                 gpu_per_hour: Optional[float] = None,
                 gpu_per_hour_by_subscription: Optional[float] = None,
                 memory_amount_gb: Optional[float] = None,
                 memory_gb_per_hour: Optional[float] = None,
                 memory_gb_per_hour_by_subscription: Optional[float] = None,
                 ocpu_count: Optional[float] = None,
                 ocpu_per_hour: Optional[float] = None,
                 ocpu_per_hour_by_subscription: Optional[float] = None,
                 total_per_hour: Optional[float] = None,
                 total_per_hour_by_subscription: Optional[float] = None):
        if gpu_count is not None:
            pulumi.set(__self__, "gpu_count", gpu_count)
        if gpu_per_hour is not None:
            pulumi.set(__self__, "gpu_per_hour", gpu_per_hour)
        if gpu_per_hour_by_subscription is not None:
            pulumi.set(__self__, "gpu_per_hour_by_subscription", gpu_per_hour_by_subscription)
        if memory_amount_gb is not None:
            pulumi.set(__self__, "memory_amount_gb", memory_amount_gb)
        if memory_gb_per_hour is not None:
            pulumi.set(__self__, "memory_gb_per_hour", memory_gb_per_hour)
        if memory_gb_per_hour_by_subscription is not None:
            pulumi.set(__self__, "memory_gb_per_hour_by_subscription", memory_gb_per_hour_by_subscription)
        if ocpu_count is not None:
            pulumi.set(__self__, "ocpu_count", ocpu_count)
        if ocpu_per_hour is not None:
            pulumi.set(__self__, "ocpu_per_hour", ocpu_per_hour)
        if ocpu_per_hour_by_subscription is not None:
            pulumi.set(__self__, "ocpu_per_hour_by_subscription", ocpu_per_hour_by_subscription)
        if total_per_hour is not None:
            pulumi.set(__self__, "total_per_hour", total_per_hour)
        if total_per_hour_by_subscription is not None:
            pulumi.set(__self__, "total_per_hour_by_subscription", total_per_hour_by_subscription)

    @property
    @pulumi.getter(name="gpuCount")
    def gpu_count(self) -> Optional[float]:
        return pulumi.get(self, "gpu_count")

    @property
    @pulumi.getter(name="gpuPerHour")
    def gpu_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "gpu_per_hour")

    @property
    @pulumi.getter(name="gpuPerHourBySubscription")
    def gpu_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "gpu_per_hour_by_subscription")

    @property
    @pulumi.getter(name="memoryAmountGb")
    def memory_amount_gb(self) -> Optional[float]:
        return pulumi.get(self, "memory_amount_gb")

    @property
    @pulumi.getter(name="memoryGbPerHour")
    def memory_gb_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "memory_gb_per_hour")

    @property
    @pulumi.getter(name="memoryGbPerHourBySubscription")
    def memory_gb_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "memory_gb_per_hour_by_subscription")

    @property
    @pulumi.getter(name="ocpuCount")
    def ocpu_count(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_count")

    @property
    @pulumi.getter(name="ocpuPerHour")
    def ocpu_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_per_hour")

    @property
    @pulumi.getter(name="ocpuPerHourBySubscription")
    def ocpu_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_per_hour_by_subscription")

    @property
    @pulumi.getter(name="totalPerHour")
    def total_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour")

    @property
    @pulumi.getter(name="totalPerHourBySubscription")
    def total_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour_by_subscription")


@pulumi.output_type
class GetTargetAssetEstimatedCostOsImageResult(dict):
    def __init__(__self__, *,
                 total_per_hour: Optional[float] = None,
                 total_per_hour_by_subscription: Optional[float] = None):
        if total_per_hour is not None:
            pulumi.set(__self__, "total_per_hour", total_per_hour)
        if total_per_hour_by_subscription is not None:
            pulumi.set(__self__, "total_per_hour_by_subscription", total_per_hour_by_subscription)

    @property
    @pulumi.getter(name="totalPerHour")
    def total_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour")

    @property
    @pulumi.getter(name="totalPerHourBySubscription")
    def total_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour_by_subscription")


@pulumi.output_type
class GetTargetAssetEstimatedCostStorageResult(dict):
    def __init__(__self__, *,
                 total_gb_per_month: Optional[float] = None,
                 total_gb_per_month_by_subscription: Optional[float] = None,
                 volumes: Optional[Sequence['outputs.GetTargetAssetEstimatedCostStorageVolumeResult']] = None):
        if total_gb_per_month is not None:
            pulumi.set(__self__, "total_gb_per_month", total_gb_per_month)
        if total_gb_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_gb_per_month_by_subscription", total_gb_per_month_by_subscription)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter(name="totalGbPerMonth")
    def total_gb_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month")

    @property
    @pulumi.getter(name="totalGbPerMonthBySubscription")
    def total_gb_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month_by_subscription")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.GetTargetAssetEstimatedCostStorageVolumeResult']]:
        return pulumi.get(self, "volumes")


@pulumi.output_type
class GetTargetAssetEstimatedCostStorageVolumeResult(dict):
    def __init__(__self__, *,
                 capacity_gb: Optional[float] = None,
                 description: Optional[str] = None,
                 total_gb_per_month: Optional[float] = None,
                 total_gb_per_month_by_subscription: Optional[float] = None):
        if capacity_gb is not None:
            pulumi.set(__self__, "capacity_gb", capacity_gb)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if total_gb_per_month is not None:
            pulumi.set(__self__, "total_gb_per_month", total_gb_per_month)
        if total_gb_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_gb_per_month_by_subscription", total_gb_per_month_by_subscription)

    @property
    @pulumi.getter(name="capacityGb")
    def capacity_gb(self) -> Optional[float]:
        return pulumi.get(self, "capacity_gb")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="totalGbPerMonth")
    def total_gb_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month")

    @property
    @pulumi.getter(name="totalGbPerMonthBySubscription")
    def total_gb_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month_by_subscription")


@pulumi.output_type
class GetTargetAssetMigrationAssetResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 depended_on_bies: Optional[Sequence[str]] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 migration_id: Optional[str] = None,
                 notifications: Optional[Sequence[str]] = None,
                 parent_snapshot: Optional[str] = None,
                 replication_compartment_id: Optional[str] = None,
                 replication_schedule_id: Optional[str] = None,
                 snap_shot_bucket_name: Optional[str] = None,
                 snapshots: Optional[Mapping[str, Any]] = None,
                 source_asset_data: Optional[Mapping[str, Any]] = None,
                 source_asset_id: Optional[str] = None,
                 state: Optional[str] = None,
                 tenancy_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if depended_on_bies is not None:
            pulumi.set(__self__, "depended_on_bies", depended_on_bies)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if migration_id is not None:
            pulumi.set(__self__, "migration_id", migration_id)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if parent_snapshot is not None:
            pulumi.set(__self__, "parent_snapshot", parent_snapshot)
        if replication_compartment_id is not None:
            pulumi.set(__self__, "replication_compartment_id", replication_compartment_id)
        if replication_schedule_id is not None:
            pulumi.set(__self__, "replication_schedule_id", replication_schedule_id)
        if snap_shot_bucket_name is not None:
            pulumi.set(__self__, "snap_shot_bucket_name", snap_shot_bucket_name)
        if snapshots is not None:
            pulumi.set(__self__, "snapshots", snapshots)
        if source_asset_data is not None:
            pulumi.set(__self__, "source_asset_data", source_asset_data)
        if source_asset_id is not None:
            pulumi.set(__self__, "source_asset_id", source_asset_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tenancy_id is not None:
            pulumi.set(__self__, "tenancy_id", tenancy_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dependedOnBies")
    def depended_on_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depended_on_bies")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="migrationId")
    def migration_id(self) -> Optional[str]:
        return pulumi.get(self, "migration_id")

    @property
    @pulumi.getter
    def notifications(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter(name="parentSnapshot")
    def parent_snapshot(self) -> Optional[str]:
        return pulumi.get(self, "parent_snapshot")

    @property
    @pulumi.getter(name="replicationCompartmentId")
    def replication_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_compartment_id")

    @property
    @pulumi.getter(name="replicationScheduleId")
    def replication_schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_schedule_id")

    @property
    @pulumi.getter(name="snapShotBucketName")
    def snap_shot_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "snap_shot_bucket_name")

    @property
    @pulumi.getter
    def snapshots(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "snapshots")

    @property
    @pulumi.getter(name="sourceAssetData")
    def source_asset_data(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "source_asset_data")

    @property
    @pulumi.getter(name="sourceAssetId")
    def source_asset_id(self) -> Optional[str]:
        return pulumi.get(self, "source_asset_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTargetAssetRecommendedSpecResult(dict):
    def __init__(__self__, *,
                 agent_configs: Optional[Sequence['outputs.GetTargetAssetRecommendedSpecAgentConfigResult']] = None,
                 availability_domain: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional[Sequence['outputs.GetTargetAssetRecommendedSpecCreateVnicDetailResult']] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 instance_options: Optional[Sequence['outputs.GetTargetAssetRecommendedSpecInstanceOptionResult']] = None,
                 ipxe_script: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 preemptible_instance_configs: Optional[Sequence['outputs.GetTargetAssetRecommendedSpecPreemptibleInstanceConfigResult']] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetTargetAssetRecommendedSpecShapeConfigResult']] = None,
                 source_details: Optional[Sequence['outputs.GetTargetAssetRecommendedSpecSourceDetailResult']] = None):
        if agent_configs is not None:
            pulumi.set(__self__, "agent_configs", agent_configs)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if preemptible_instance_configs is not None:
            pulumi.set(__self__, "preemptible_instance_configs", preemptible_instance_configs)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)

    @property
    @pulumi.getter(name="agentConfigs")
    def agent_configs(self) -> Optional[Sequence['outputs.GetTargetAssetRecommendedSpecAgentConfigResult']]:
        return pulumi.get(self, "agent_configs")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetTargetAssetRecommendedSpecCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional[Sequence['outputs.GetTargetAssetRecommendedSpecInstanceOptionResult']]:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="preemptibleInstanceConfigs")
    def preemptible_instance_configs(self) -> Optional[Sequence['outputs.GetTargetAssetRecommendedSpecPreemptibleInstanceConfigResult']]:
        return pulumi.get(self, "preemptible_instance_configs")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetTargetAssetRecommendedSpecShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetTargetAssetRecommendedSpecSourceDetailResult']]:
        return pulumi.get(self, "source_details")


@pulumi.output_type
class GetTargetAssetRecommendedSpecAgentConfigResult(dict):
    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.GetTargetAssetRecommendedSpecAgentConfigPluginsConfigResult']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.GetTargetAssetRecommendedSpecAgentConfigPluginsConfigResult']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class GetTargetAssetRecommendedSpecAgentConfigPluginsConfigResult(dict):
    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTargetAssetRecommendedSpecCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetTargetAssetRecommendedSpecInstanceOptionResult(dict):
    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class GetTargetAssetRecommendedSpecPreemptibleInstanceConfigResult(dict):
    def __init__(__self__, *,
                 preemption_actions: Optional[Sequence['outputs.GetTargetAssetRecommendedSpecPreemptibleInstanceConfigPreemptionActionResult']] = None):
        if preemption_actions is not None:
            pulumi.set(__self__, "preemption_actions", preemption_actions)

    @property
    @pulumi.getter(name="preemptionActions")
    def preemption_actions(self) -> Optional[Sequence['outputs.GetTargetAssetRecommendedSpecPreemptibleInstanceConfigPreemptionActionResult']]:
        return pulumi.get(self, "preemption_actions")


@pulumi.output_type
class GetTargetAssetRecommendedSpecPreemptibleInstanceConfigPreemptionActionResult(dict):
    def __init__(__self__, *,
                 preserve_boot_volume: Optional[bool] = None,
                 type: Optional[str] = None):
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTargetAssetRecommendedSpecShapeConfigResult(dict):
    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetTargetAssetRecommendedSpecSourceDetailResult(dict):
    def __init__(__self__, *,
                 boot_volume_id: Optional[str] = None,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 image_id: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetTargetAssetTestSpecResult(dict):
    def __init__(__self__, *,
                 agent_configs: Optional[Sequence['outputs.GetTargetAssetTestSpecAgentConfigResult']] = None,
                 availability_domain: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional[Sequence['outputs.GetTargetAssetTestSpecCreateVnicDetailResult']] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 instance_options: Optional[Sequence['outputs.GetTargetAssetTestSpecInstanceOptionResult']] = None,
                 ipxe_script: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 preemptible_instance_configs: Optional[Sequence['outputs.GetTargetAssetTestSpecPreemptibleInstanceConfigResult']] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetTargetAssetTestSpecShapeConfigResult']] = None,
                 source_details: Optional[Sequence['outputs.GetTargetAssetTestSpecSourceDetailResult']] = None):
        if agent_configs is not None:
            pulumi.set(__self__, "agent_configs", agent_configs)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if preemptible_instance_configs is not None:
            pulumi.set(__self__, "preemptible_instance_configs", preemptible_instance_configs)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)

    @property
    @pulumi.getter(name="agentConfigs")
    def agent_configs(self) -> Optional[Sequence['outputs.GetTargetAssetTestSpecAgentConfigResult']]:
        return pulumi.get(self, "agent_configs")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetTargetAssetTestSpecCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional[Sequence['outputs.GetTargetAssetTestSpecInstanceOptionResult']]:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="preemptibleInstanceConfigs")
    def preemptible_instance_configs(self) -> Optional[Sequence['outputs.GetTargetAssetTestSpecPreemptibleInstanceConfigResult']]:
        return pulumi.get(self, "preemptible_instance_configs")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetTargetAssetTestSpecShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetTargetAssetTestSpecSourceDetailResult']]:
        return pulumi.get(self, "source_details")


@pulumi.output_type
class GetTargetAssetTestSpecAgentConfigResult(dict):
    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.GetTargetAssetTestSpecAgentConfigPluginsConfigResult']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.GetTargetAssetTestSpecAgentConfigPluginsConfigResult']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class GetTargetAssetTestSpecAgentConfigPluginsConfigResult(dict):
    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTargetAssetTestSpecCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetTargetAssetTestSpecInstanceOptionResult(dict):
    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class GetTargetAssetTestSpecPreemptibleInstanceConfigResult(dict):
    def __init__(__self__, *,
                 preemption_actions: Optional[Sequence['outputs.GetTargetAssetTestSpecPreemptibleInstanceConfigPreemptionActionResult']] = None):
        if preemption_actions is not None:
            pulumi.set(__self__, "preemption_actions", preemption_actions)

    @property
    @pulumi.getter(name="preemptionActions")
    def preemption_actions(self) -> Optional[Sequence['outputs.GetTargetAssetTestSpecPreemptibleInstanceConfigPreemptionActionResult']]:
        return pulumi.get(self, "preemption_actions")


@pulumi.output_type
class GetTargetAssetTestSpecPreemptibleInstanceConfigPreemptionActionResult(dict):
    def __init__(__self__, *,
                 preserve_boot_volume: Optional[bool] = None,
                 type: Optional[str] = None):
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTargetAssetTestSpecShapeConfigResult(dict):
    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetTargetAssetTestSpecSourceDetailResult(dict):
    def __init__(__self__, *,
                 boot_volume_id: Optional[str] = None,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 image_id: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetTargetAssetUserSpecResult(dict):
    def __init__(__self__, *,
                 agent_configs: Optional[Sequence['outputs.GetTargetAssetUserSpecAgentConfigResult']] = None,
                 availability_domain: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional[Sequence['outputs.GetTargetAssetUserSpecCreateVnicDetailResult']] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 instance_options: Optional[Sequence['outputs.GetTargetAssetUserSpecInstanceOptionResult']] = None,
                 ipxe_script: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 preemptible_instance_configs: Optional[Sequence['outputs.GetTargetAssetUserSpecPreemptibleInstanceConfigResult']] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetTargetAssetUserSpecShapeConfigResult']] = None,
                 source_details: Optional[Sequence['outputs.GetTargetAssetUserSpecSourceDetailResult']] = None):
        if agent_configs is not None:
            pulumi.set(__self__, "agent_configs", agent_configs)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if preemptible_instance_configs is not None:
            pulumi.set(__self__, "preemptible_instance_configs", preemptible_instance_configs)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)

    @property
    @pulumi.getter(name="agentConfigs")
    def agent_configs(self) -> Optional[Sequence['outputs.GetTargetAssetUserSpecAgentConfigResult']]:
        return pulumi.get(self, "agent_configs")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetTargetAssetUserSpecCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional[Sequence['outputs.GetTargetAssetUserSpecInstanceOptionResult']]:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="preemptibleInstanceConfigs")
    def preemptible_instance_configs(self) -> Optional[Sequence['outputs.GetTargetAssetUserSpecPreemptibleInstanceConfigResult']]:
        return pulumi.get(self, "preemptible_instance_configs")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetTargetAssetUserSpecShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetTargetAssetUserSpecSourceDetailResult']]:
        return pulumi.get(self, "source_details")


@pulumi.output_type
class GetTargetAssetUserSpecAgentConfigResult(dict):
    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.GetTargetAssetUserSpecAgentConfigPluginsConfigResult']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.GetTargetAssetUserSpecAgentConfigPluginsConfigResult']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class GetTargetAssetUserSpecAgentConfigPluginsConfigResult(dict):
    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTargetAssetUserSpecCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetTargetAssetUserSpecInstanceOptionResult(dict):
    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class GetTargetAssetUserSpecPreemptibleInstanceConfigResult(dict):
    def __init__(__self__, *,
                 preemption_actions: Optional[Sequence['outputs.GetTargetAssetUserSpecPreemptibleInstanceConfigPreemptionActionResult']] = None):
        if preemption_actions is not None:
            pulumi.set(__self__, "preemption_actions", preemption_actions)

    @property
    @pulumi.getter(name="preemptionActions")
    def preemption_actions(self) -> Optional[Sequence['outputs.GetTargetAssetUserSpecPreemptibleInstanceConfigPreemptionActionResult']]:
        return pulumi.get(self, "preemption_actions")


@pulumi.output_type
class GetTargetAssetUserSpecPreemptibleInstanceConfigPreemptionActionResult(dict):
    def __init__(__self__, *,
                 preserve_boot_volume: Optional[bool] = None,
                 type: Optional[str] = None):
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTargetAssetUserSpecShapeConfigResult(dict):
    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetTargetAssetUserSpecSourceDetailResult(dict):
    def __init__(__self__, *,
                 boot_volume_id: Optional[str] = None,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 image_id: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetTargetAssetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemResult(dict):
    def __init__(__self__, *,
                 block_volumes_performance: Optional[int] = None,
                 compartment_id: Optional[str] = None,
                 compatibility_messages: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemCompatibilityMessageResult']] = None,
                 created_resource_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 estimated_costs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemEstimatedCostResult']] = None,
                 id: Optional[str] = None,
                 is_excluded_from_execution: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 migration_assets: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemMigrationAssetResult']] = None,
                 migration_plan_id: Optional[str] = None,
                 ms_license: Optional[str] = None,
                 preferred_shape_type: Optional[str] = None,
                 recommended_specs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecResult']] = None,
                 state: Optional[str] = None,
                 test_specs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecResult']] = None,
                 time_assessed: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None,
                 user_specs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecResult']] = None):
        if block_volumes_performance is not None:
            pulumi.set(__self__, "block_volumes_performance", block_volumes_performance)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compatibility_messages is not None:
            pulumi.set(__self__, "compatibility_messages", compatibility_messages)
        if created_resource_id is not None:
            pulumi.set(__self__, "created_resource_id", created_resource_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if estimated_costs is not None:
            pulumi.set(__self__, "estimated_costs", estimated_costs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_excluded_from_execution is not None:
            pulumi.set(__self__, "is_excluded_from_execution", is_excluded_from_execution)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if migration_assets is not None:
            pulumi.set(__self__, "migration_assets", migration_assets)
        if migration_plan_id is not None:
            pulumi.set(__self__, "migration_plan_id", migration_plan_id)
        if ms_license is not None:
            pulumi.set(__self__, "ms_license", ms_license)
        if preferred_shape_type is not None:
            pulumi.set(__self__, "preferred_shape_type", preferred_shape_type)
        if recommended_specs is not None:
            pulumi.set(__self__, "recommended_specs", recommended_specs)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if test_specs is not None:
            pulumi.set(__self__, "test_specs", test_specs)
        if time_assessed is not None:
            pulumi.set(__self__, "time_assessed", time_assessed)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_specs is not None:
            pulumi.set(__self__, "user_specs", user_specs)

    @property
    @pulumi.getter(name="blockVolumesPerformance")
    def block_volumes_performance(self) -> Optional[int]:
        return pulumi.get(self, "block_volumes_performance")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compatibilityMessages")
    def compatibility_messages(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemCompatibilityMessageResult']]:
        return pulumi.get(self, "compatibility_messages")

    @property
    @pulumi.getter(name="createdResourceId")
    def created_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "created_resource_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="estimatedCosts")
    def estimated_costs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemEstimatedCostResult']]:
        return pulumi.get(self, "estimated_costs")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isExcludedFromExecution")
    def is_excluded_from_execution(self) -> Optional[bool]:
        return pulumi.get(self, "is_excluded_from_execution")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="migrationAssets")
    def migration_assets(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemMigrationAssetResult']]:
        return pulumi.get(self, "migration_assets")

    @property
    @pulumi.getter(name="migrationPlanId")
    def migration_plan_id(self) -> Optional[str]:
        return pulumi.get(self, "migration_plan_id")

    @property
    @pulumi.getter(name="msLicense")
    def ms_license(self) -> Optional[str]:
        return pulumi.get(self, "ms_license")

    @property
    @pulumi.getter(name="preferredShapeType")
    def preferred_shape_type(self) -> Optional[str]:
        return pulumi.get(self, "preferred_shape_type")

    @property
    @pulumi.getter(name="recommendedSpecs")
    def recommended_specs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecResult']]:
        return pulumi.get(self, "recommended_specs")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="testSpecs")
    def test_specs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecResult']]:
        return pulumi.get(self, "test_specs")

    @property
    @pulumi.getter(name="timeAssessed")
    def time_assessed(self) -> Optional[str]:
        return pulumi.get(self, "time_assessed")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userSpecs")
    def user_specs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecResult']]:
        return pulumi.get(self, "user_specs")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemCompatibilityMessageResult(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 name: Optional[str] = None,
                 severity: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemEstimatedCostResult(dict):
    def __init__(__self__, *,
                 computes: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemEstimatedCostComputeResult']] = None,
                 currency_code: Optional[str] = None,
                 os_images: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemEstimatedCostOsImageResult']] = None,
                 storages: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemEstimatedCostStorageResult']] = None,
                 subscription_id: Optional[str] = None,
                 total_estimation_per_month: Optional[float] = None,
                 total_estimation_per_month_by_subscription: Optional[float] = None):
        if computes is not None:
            pulumi.set(__self__, "computes", computes)
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if os_images is not None:
            pulumi.set(__self__, "os_images", os_images)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if total_estimation_per_month is not None:
            pulumi.set(__self__, "total_estimation_per_month", total_estimation_per_month)
        if total_estimation_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_estimation_per_month_by_subscription", total_estimation_per_month_by_subscription)

    @property
    @pulumi.getter
    def computes(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemEstimatedCostComputeResult']]:
        return pulumi.get(self, "computes")

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[str]:
        return pulumi.get(self, "currency_code")

    @property
    @pulumi.getter(name="osImages")
    def os_images(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemEstimatedCostOsImageResult']]:
        return pulumi.get(self, "os_images")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemEstimatedCostStorageResult']]:
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="totalEstimationPerMonth")
    def total_estimation_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_estimation_per_month")

    @property
    @pulumi.getter(name="totalEstimationPerMonthBySubscription")
    def total_estimation_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_estimation_per_month_by_subscription")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemEstimatedCostComputeResult(dict):
    def __init__(__self__, *,
                 gpu_count: Optional[float] = None,
                 gpu_per_hour: Optional[float] = None,
                 gpu_per_hour_by_subscription: Optional[float] = None,
                 memory_amount_gb: Optional[float] = None,
                 memory_gb_per_hour: Optional[float] = None,
                 memory_gb_per_hour_by_subscription: Optional[float] = None,
                 ocpu_count: Optional[float] = None,
                 ocpu_per_hour: Optional[float] = None,
                 ocpu_per_hour_by_subscription: Optional[float] = None,
                 total_per_hour: Optional[float] = None,
                 total_per_hour_by_subscription: Optional[float] = None):
        if gpu_count is not None:
            pulumi.set(__self__, "gpu_count", gpu_count)
        if gpu_per_hour is not None:
            pulumi.set(__self__, "gpu_per_hour", gpu_per_hour)
        if gpu_per_hour_by_subscription is not None:
            pulumi.set(__self__, "gpu_per_hour_by_subscription", gpu_per_hour_by_subscription)
        if memory_amount_gb is not None:
            pulumi.set(__self__, "memory_amount_gb", memory_amount_gb)
        if memory_gb_per_hour is not None:
            pulumi.set(__self__, "memory_gb_per_hour", memory_gb_per_hour)
        if memory_gb_per_hour_by_subscription is not None:
            pulumi.set(__self__, "memory_gb_per_hour_by_subscription", memory_gb_per_hour_by_subscription)
        if ocpu_count is not None:
            pulumi.set(__self__, "ocpu_count", ocpu_count)
        if ocpu_per_hour is not None:
            pulumi.set(__self__, "ocpu_per_hour", ocpu_per_hour)
        if ocpu_per_hour_by_subscription is not None:
            pulumi.set(__self__, "ocpu_per_hour_by_subscription", ocpu_per_hour_by_subscription)
        if total_per_hour is not None:
            pulumi.set(__self__, "total_per_hour", total_per_hour)
        if total_per_hour_by_subscription is not None:
            pulumi.set(__self__, "total_per_hour_by_subscription", total_per_hour_by_subscription)

    @property
    @pulumi.getter(name="gpuCount")
    def gpu_count(self) -> Optional[float]:
        return pulumi.get(self, "gpu_count")

    @property
    @pulumi.getter(name="gpuPerHour")
    def gpu_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "gpu_per_hour")

    @property
    @pulumi.getter(name="gpuPerHourBySubscription")
    def gpu_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "gpu_per_hour_by_subscription")

    @property
    @pulumi.getter(name="memoryAmountGb")
    def memory_amount_gb(self) -> Optional[float]:
        return pulumi.get(self, "memory_amount_gb")

    @property
    @pulumi.getter(name="memoryGbPerHour")
    def memory_gb_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "memory_gb_per_hour")

    @property
    @pulumi.getter(name="memoryGbPerHourBySubscription")
    def memory_gb_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "memory_gb_per_hour_by_subscription")

    @property
    @pulumi.getter(name="ocpuCount")
    def ocpu_count(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_count")

    @property
    @pulumi.getter(name="ocpuPerHour")
    def ocpu_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_per_hour")

    @property
    @pulumi.getter(name="ocpuPerHourBySubscription")
    def ocpu_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "ocpu_per_hour_by_subscription")

    @property
    @pulumi.getter(name="totalPerHour")
    def total_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour")

    @property
    @pulumi.getter(name="totalPerHourBySubscription")
    def total_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour_by_subscription")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemEstimatedCostOsImageResult(dict):
    def __init__(__self__, *,
                 total_per_hour: Optional[float] = None,
                 total_per_hour_by_subscription: Optional[float] = None):
        if total_per_hour is not None:
            pulumi.set(__self__, "total_per_hour", total_per_hour)
        if total_per_hour_by_subscription is not None:
            pulumi.set(__self__, "total_per_hour_by_subscription", total_per_hour_by_subscription)

    @property
    @pulumi.getter(name="totalPerHour")
    def total_per_hour(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour")

    @property
    @pulumi.getter(name="totalPerHourBySubscription")
    def total_per_hour_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_per_hour_by_subscription")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemEstimatedCostStorageResult(dict):
    def __init__(__self__, *,
                 total_gb_per_month: Optional[float] = None,
                 total_gb_per_month_by_subscription: Optional[float] = None,
                 volumes: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemEstimatedCostStorageVolumeResult']] = None):
        if total_gb_per_month is not None:
            pulumi.set(__self__, "total_gb_per_month", total_gb_per_month)
        if total_gb_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_gb_per_month_by_subscription", total_gb_per_month_by_subscription)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter(name="totalGbPerMonth")
    def total_gb_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month")

    @property
    @pulumi.getter(name="totalGbPerMonthBySubscription")
    def total_gb_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month_by_subscription")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemEstimatedCostStorageVolumeResult']]:
        return pulumi.get(self, "volumes")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemEstimatedCostStorageVolumeResult(dict):
    def __init__(__self__, *,
                 capacity_gb: Optional[float] = None,
                 description: Optional[str] = None,
                 total_gb_per_month: Optional[float] = None,
                 total_gb_per_month_by_subscription: Optional[float] = None):
        if capacity_gb is not None:
            pulumi.set(__self__, "capacity_gb", capacity_gb)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if total_gb_per_month is not None:
            pulumi.set(__self__, "total_gb_per_month", total_gb_per_month)
        if total_gb_per_month_by_subscription is not None:
            pulumi.set(__self__, "total_gb_per_month_by_subscription", total_gb_per_month_by_subscription)

    @property
    @pulumi.getter(name="capacityGb")
    def capacity_gb(self) -> Optional[float]:
        return pulumi.get(self, "capacity_gb")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="totalGbPerMonth")
    def total_gb_per_month(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month")

    @property
    @pulumi.getter(name="totalGbPerMonthBySubscription")
    def total_gb_per_month_by_subscription(self) -> Optional[float]:
        return pulumi.get(self, "total_gb_per_month_by_subscription")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemMigrationAssetResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 depended_on_bies: Optional[Sequence[str]] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 migration_id: Optional[str] = None,
                 notifications: Optional[Sequence[str]] = None,
                 parent_snapshot: Optional[str] = None,
                 replication_compartment_id: Optional[str] = None,
                 replication_schedule_id: Optional[str] = None,
                 snap_shot_bucket_name: Optional[str] = None,
                 snapshots: Optional[Mapping[str, Any]] = None,
                 source_asset_data: Optional[Mapping[str, Any]] = None,
                 source_asset_id: Optional[str] = None,
                 state: Optional[str] = None,
                 tenancy_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if depended_on_bies is not None:
            pulumi.set(__self__, "depended_on_bies", depended_on_bies)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if migration_id is not None:
            pulumi.set(__self__, "migration_id", migration_id)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if parent_snapshot is not None:
            pulumi.set(__self__, "parent_snapshot", parent_snapshot)
        if replication_compartment_id is not None:
            pulumi.set(__self__, "replication_compartment_id", replication_compartment_id)
        if replication_schedule_id is not None:
            pulumi.set(__self__, "replication_schedule_id", replication_schedule_id)
        if snap_shot_bucket_name is not None:
            pulumi.set(__self__, "snap_shot_bucket_name", snap_shot_bucket_name)
        if snapshots is not None:
            pulumi.set(__self__, "snapshots", snapshots)
        if source_asset_data is not None:
            pulumi.set(__self__, "source_asset_data", source_asset_data)
        if source_asset_id is not None:
            pulumi.set(__self__, "source_asset_id", source_asset_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tenancy_id is not None:
            pulumi.set(__self__, "tenancy_id", tenancy_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dependedOnBies")
    def depended_on_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depended_on_bies")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="migrationId")
    def migration_id(self) -> Optional[str]:
        return pulumi.get(self, "migration_id")

    @property
    @pulumi.getter
    def notifications(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter(name="parentSnapshot")
    def parent_snapshot(self) -> Optional[str]:
        return pulumi.get(self, "parent_snapshot")

    @property
    @pulumi.getter(name="replicationCompartmentId")
    def replication_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_compartment_id")

    @property
    @pulumi.getter(name="replicationScheduleId")
    def replication_schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_schedule_id")

    @property
    @pulumi.getter(name="snapShotBucketName")
    def snap_shot_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "snap_shot_bucket_name")

    @property
    @pulumi.getter
    def snapshots(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "snapshots")

    @property
    @pulumi.getter(name="sourceAssetData")
    def source_asset_data(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "source_asset_data")

    @property
    @pulumi.getter(name="sourceAssetId")
    def source_asset_id(self) -> Optional[str]:
        return pulumi.get(self, "source_asset_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> Optional[str]:
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemRecommendedSpecResult(dict):
    def __init__(__self__, *,
                 agent_configs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecAgentConfigResult']] = None,
                 availability_domain: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecCreateVnicDetailResult']] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 instance_options: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecInstanceOptionResult']] = None,
                 ipxe_script: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 preemptible_instance_configs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecPreemptibleInstanceConfigResult']] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecShapeConfigResult']] = None,
                 source_details: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecSourceDetailResult']] = None):
        if agent_configs is not None:
            pulumi.set(__self__, "agent_configs", agent_configs)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if preemptible_instance_configs is not None:
            pulumi.set(__self__, "preemptible_instance_configs", preemptible_instance_configs)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)

    @property
    @pulumi.getter(name="agentConfigs")
    def agent_configs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecAgentConfigResult']]:
        return pulumi.get(self, "agent_configs")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecInstanceOptionResult']]:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="preemptibleInstanceConfigs")
    def preemptible_instance_configs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecPreemptibleInstanceConfigResult']]:
        return pulumi.get(self, "preemptible_instance_configs")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecSourceDetailResult']]:
        return pulumi.get(self, "source_details")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemRecommendedSpecAgentConfigResult(dict):
    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecAgentConfigPluginsConfigResult']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecAgentConfigPluginsConfigResult']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemRecommendedSpecAgentConfigPluginsConfigResult(dict):
    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemRecommendedSpecCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemRecommendedSpecInstanceOptionResult(dict):
    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemRecommendedSpecPreemptibleInstanceConfigResult(dict):
    def __init__(__self__, *,
                 preemption_actions: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecPreemptibleInstanceConfigPreemptionActionResult']] = None):
        if preemption_actions is not None:
            pulumi.set(__self__, "preemption_actions", preemption_actions)

    @property
    @pulumi.getter(name="preemptionActions")
    def preemption_actions(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemRecommendedSpecPreemptibleInstanceConfigPreemptionActionResult']]:
        return pulumi.get(self, "preemption_actions")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemRecommendedSpecPreemptibleInstanceConfigPreemptionActionResult(dict):
    def __init__(__self__, *,
                 preserve_boot_volume: Optional[bool] = None,
                 type: Optional[str] = None):
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemRecommendedSpecShapeConfigResult(dict):
    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemRecommendedSpecSourceDetailResult(dict):
    def __init__(__self__, *,
                 boot_volume_id: Optional[str] = None,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 image_id: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemTestSpecResult(dict):
    def __init__(__self__, *,
                 agent_configs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecAgentConfigResult']] = None,
                 availability_domain: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecCreateVnicDetailResult']] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 instance_options: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecInstanceOptionResult']] = None,
                 ipxe_script: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 preemptible_instance_configs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecPreemptibleInstanceConfigResult']] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecShapeConfigResult']] = None,
                 source_details: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecSourceDetailResult']] = None):
        if agent_configs is not None:
            pulumi.set(__self__, "agent_configs", agent_configs)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if preemptible_instance_configs is not None:
            pulumi.set(__self__, "preemptible_instance_configs", preemptible_instance_configs)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)

    @property
    @pulumi.getter(name="agentConfigs")
    def agent_configs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecAgentConfigResult']]:
        return pulumi.get(self, "agent_configs")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecInstanceOptionResult']]:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="preemptibleInstanceConfigs")
    def preemptible_instance_configs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecPreemptibleInstanceConfigResult']]:
        return pulumi.get(self, "preemptible_instance_configs")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecSourceDetailResult']]:
        return pulumi.get(self, "source_details")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemTestSpecAgentConfigResult(dict):
    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecAgentConfigPluginsConfigResult']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecAgentConfigPluginsConfigResult']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemTestSpecAgentConfigPluginsConfigResult(dict):
    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemTestSpecCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemTestSpecInstanceOptionResult(dict):
    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemTestSpecPreemptibleInstanceConfigResult(dict):
    def __init__(__self__, *,
                 preemption_actions: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecPreemptibleInstanceConfigPreemptionActionResult']] = None):
        if preemption_actions is not None:
            pulumi.set(__self__, "preemption_actions", preemption_actions)

    @property
    @pulumi.getter(name="preemptionActions")
    def preemption_actions(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemTestSpecPreemptibleInstanceConfigPreemptionActionResult']]:
        return pulumi.get(self, "preemption_actions")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemTestSpecPreemptibleInstanceConfigPreemptionActionResult(dict):
    def __init__(__self__, *,
                 preserve_boot_volume: Optional[bool] = None,
                 type: Optional[str] = None):
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemTestSpecShapeConfigResult(dict):
    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemTestSpecSourceDetailResult(dict):
    def __init__(__self__, *,
                 boot_volume_id: Optional[str] = None,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 image_id: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemUserSpecResult(dict):
    def __init__(__self__, *,
                 agent_configs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecAgentConfigResult']] = None,
                 availability_domain: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecCreateVnicDetailResult']] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 instance_options: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecInstanceOptionResult']] = None,
                 ipxe_script: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 preemptible_instance_configs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecPreemptibleInstanceConfigResult']] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecShapeConfigResult']] = None,
                 source_details: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecSourceDetailResult']] = None):
        if agent_configs is not None:
            pulumi.set(__self__, "agent_configs", agent_configs)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if preemptible_instance_configs is not None:
            pulumi.set(__self__, "preemptible_instance_configs", preemptible_instance_configs)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)

    @property
    @pulumi.getter(name="agentConfigs")
    def agent_configs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecAgentConfigResult']]:
        return pulumi.get(self, "agent_configs")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecInstanceOptionResult']]:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="preemptibleInstanceConfigs")
    def preemptible_instance_configs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecPreemptibleInstanceConfigResult']]:
        return pulumi.get(self, "preemptible_instance_configs")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecSourceDetailResult']]:
        return pulumi.get(self, "source_details")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemUserSpecAgentConfigResult(dict):
    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecAgentConfigPluginsConfigResult']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecAgentConfigPluginsConfigResult']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemUserSpecAgentConfigPluginsConfigResult(dict):
    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemUserSpecCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemUserSpecInstanceOptionResult(dict):
    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemUserSpecPreemptibleInstanceConfigResult(dict):
    def __init__(__self__, *,
                 preemption_actions: Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecPreemptibleInstanceConfigPreemptionActionResult']] = None):
        if preemption_actions is not None:
            pulumi.set(__self__, "preemption_actions", preemption_actions)

    @property
    @pulumi.getter(name="preemptionActions")
    def preemption_actions(self) -> Optional[Sequence['outputs.GetTargetAssetsTargetAssetCollectionItemUserSpecPreemptibleInstanceConfigPreemptionActionResult']]:
        return pulumi.get(self, "preemption_actions")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemUserSpecPreemptibleInstanceConfigPreemptionActionResult(dict):
    def __init__(__self__, *,
                 preserve_boot_volume: Optional[bool] = None,
                 type: Optional[str] = None):
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemUserSpecShapeConfigResult(dict):
    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetTargetAssetsTargetAssetCollectionItemUserSpecSourceDetailResult(dict):
    def __init__(__self__, *,
                 boot_volume_id: Optional[str] = None,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 image_id: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


