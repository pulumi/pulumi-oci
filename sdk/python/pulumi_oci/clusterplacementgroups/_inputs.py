# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ClusterPlacementGroupCapabilitiesArgs',
    'ClusterPlacementGroupCapabilitiesArgsDict',
    'ClusterPlacementGroupCapabilitiesItemArgs',
    'ClusterPlacementGroupCapabilitiesItemArgsDict',
    'ClusterPlacementGroupPlacementInstructionArgs',
    'ClusterPlacementGroupPlacementInstructionArgsDict',
    'GetClusterPlacementGroupsFilterArgs',
    'GetClusterPlacementGroupsFilterArgsDict',
]

MYPY = False

if not MYPY:
    class ClusterPlacementGroupCapabilitiesArgsDict(TypedDict):
        items: pulumi.Input[Sequence[pulumi.Input['ClusterPlacementGroupCapabilitiesItemArgsDict']]]
        """
        The supported resources.
        """
elif False:
    ClusterPlacementGroupCapabilitiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterPlacementGroupCapabilitiesArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['ClusterPlacementGroupCapabilitiesItemArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterPlacementGroupCapabilitiesItemArgs']]] items: The supported resources.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['ClusterPlacementGroupCapabilitiesItemArgs']]]:
        """
        The supported resources.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['ClusterPlacementGroupCapabilitiesItemArgs']]]):
        pulumi.set(self, "items", value)


if not MYPY:
    class ClusterPlacementGroupCapabilitiesItemArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The type of resource.
        """
        service: pulumi.Input[_builtins.str]
        """
        The service that the resource is part of.
        """
elif False:
    ClusterPlacementGroupCapabilitiesItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterPlacementGroupCapabilitiesItemArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 service: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: The type of resource.
        :param pulumi.Input[_builtins.str] service: The service that the resource is part of.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The type of resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Input[_builtins.str]:
        """
        The service that the resource is part of.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service", value)


if not MYPY:
    class ClusterPlacementGroupPlacementInstructionArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        The type of placement instruction.
        """
        value: pulumi.Input[_builtins.str]
        """
        The value of the token designated for placement of the cluster placement group upon creation.
        """
elif False:
    ClusterPlacementGroupPlacementInstructionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterPlacementGroupPlacementInstructionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] type: The type of placement instruction.
        :param pulumi.Input[_builtins.str] value: The value of the token designated for placement of the cluster placement group upon creation.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of placement instruction.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        The value of the token designated for placement of the cluster placement group upon creation.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetClusterPlacementGroupsFilterArgsDict(TypedDict):
        name: _builtins.str
        """
        A filter to return only the resources that match the entire display name specified.
        """
        values: Sequence[_builtins.str]
        regex: NotRequired[_builtins.bool]
elif False:
    GetClusterPlacementGroupsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetClusterPlacementGroupsFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: A filter to return only the resources that match the entire display name specified.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        A filter to return only the resources that match the entire display name specified.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "regex", value)


