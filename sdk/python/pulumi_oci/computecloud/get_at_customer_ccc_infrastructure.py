# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAtCustomerCccInfrastructureResult',
    'AwaitableGetAtCustomerCccInfrastructureResult',
    'get_at_customer_ccc_infrastructure',
    'get_at_customer_ccc_infrastructure_output',
]

@pulumi.output_type
class GetAtCustomerCccInfrastructureResult:
    """
    A collection of values returned by getAtCustomerCccInfrastructure.
    """
    def __init__(__self__, ccc_infrastructure_id=None, ccc_upgrade_schedule_id=None, compartment_id=None, connection_details=None, connection_state=None, defined_tags=None, description=None, display_name=None, freeform_tags=None, id=None, infrastructure_inventories=None, infrastructure_network_configurations=None, lifecycle_details=None, provisioning_fingerprint=None, provisioning_pin=None, short_name=None, state=None, subnet_id=None, system_tags=None, time_created=None, time_updated=None, upgrade_informations=None):
        if ccc_infrastructure_id and not isinstance(ccc_infrastructure_id, str):
            raise TypeError("Expected argument 'ccc_infrastructure_id' to be a str")
        pulumi.set(__self__, "ccc_infrastructure_id", ccc_infrastructure_id)
        if ccc_upgrade_schedule_id and not isinstance(ccc_upgrade_schedule_id, str):
            raise TypeError("Expected argument 'ccc_upgrade_schedule_id' to be a str")
        pulumi.set(__self__, "ccc_upgrade_schedule_id", ccc_upgrade_schedule_id)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_details and not isinstance(connection_details, str):
            raise TypeError("Expected argument 'connection_details' to be a str")
        pulumi.set(__self__, "connection_details", connection_details)
        if connection_state and not isinstance(connection_state, str):
            raise TypeError("Expected argument 'connection_state' to be a str")
        pulumi.set(__self__, "connection_state", connection_state)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if infrastructure_inventories and not isinstance(infrastructure_inventories, list):
            raise TypeError("Expected argument 'infrastructure_inventories' to be a list")
        pulumi.set(__self__, "infrastructure_inventories", infrastructure_inventories)
        if infrastructure_network_configurations and not isinstance(infrastructure_network_configurations, list):
            raise TypeError("Expected argument 'infrastructure_network_configurations' to be a list")
        pulumi.set(__self__, "infrastructure_network_configurations", infrastructure_network_configurations)
        if lifecycle_details and not isinstance(lifecycle_details, str):
            raise TypeError("Expected argument 'lifecycle_details' to be a str")
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if provisioning_fingerprint and not isinstance(provisioning_fingerprint, str):
            raise TypeError("Expected argument 'provisioning_fingerprint' to be a str")
        pulumi.set(__self__, "provisioning_fingerprint", provisioning_fingerprint)
        if provisioning_pin and not isinstance(provisioning_pin, str):
            raise TypeError("Expected argument 'provisioning_pin' to be a str")
        pulumi.set(__self__, "provisioning_pin", provisioning_pin)
        if short_name and not isinstance(short_name, str):
            raise TypeError("Expected argument 'short_name' to be a str")
        pulumi.set(__self__, "short_name", short_name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags and not isinstance(system_tags, dict):
            raise TypeError("Expected argument 'system_tags' to be a dict")
        pulumi.set(__self__, "system_tags", system_tags)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)
        if upgrade_informations and not isinstance(upgrade_informations, list):
            raise TypeError("Expected argument 'upgrade_informations' to be a list")
        pulumi.set(__self__, "upgrade_informations", upgrade_informations)

    @property
    @pulumi.getter(name="cccInfrastructureId")
    def ccc_infrastructure_id(self) -> str:
        return pulumi.get(self, "ccc_infrastructure_id")

    @property
    @pulumi.getter(name="cccUpgradeScheduleId")
    def ccc_upgrade_schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "ccc_upgrade_schedule_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Optional[str]:
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter(name="connectionState")
    def connection_state(self) -> Optional[str]:
        return pulumi.get(self, "connection_state")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="infrastructureInventories")
    def infrastructure_inventories(self) -> Optional[Sequence['outputs.GetAtCustomerCccInfrastructureInfrastructureInventoryResult']]:
        return pulumi.get(self, "infrastructure_inventories")

    @property
    @pulumi.getter(name="infrastructureNetworkConfigurations")
    def infrastructure_network_configurations(self) -> Optional[Sequence['outputs.GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationResult']]:
        return pulumi.get(self, "infrastructure_network_configurations")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="provisioningFingerprint")
    def provisioning_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_fingerprint")

    @property
    @pulumi.getter(name="provisioningPin")
    def provisioning_pin(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_pin")

    @property
    @pulumi.getter(name="shortName")
    def short_name(self) -> Optional[str]:
        return pulumi.get(self, "short_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="upgradeInformations")
    def upgrade_informations(self) -> Optional[Sequence['outputs.GetAtCustomerCccInfrastructureUpgradeInformationResult']]:
        return pulumi.get(self, "upgrade_informations")


class AwaitableGetAtCustomerCccInfrastructureResult(GetAtCustomerCccInfrastructureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAtCustomerCccInfrastructureResult(
            ccc_infrastructure_id=self.ccc_infrastructure_id,
            ccc_upgrade_schedule_id=self.ccc_upgrade_schedule_id,
            compartment_id=self.compartment_id,
            connection_details=self.connection_details,
            connection_state=self.connection_state,
            defined_tags=self.defined_tags,
            description=self.description,
            display_name=self.display_name,
            freeform_tags=self.freeform_tags,
            id=self.id,
            infrastructure_inventories=self.infrastructure_inventories,
            infrastructure_network_configurations=self.infrastructure_network_configurations,
            lifecycle_details=self.lifecycle_details,
            provisioning_fingerprint=self.provisioning_fingerprint,
            provisioning_pin=self.provisioning_pin,
            short_name=self.short_name,
            state=self.state,
            subnet_id=self.subnet_id,
            system_tags=self.system_tags,
            time_created=self.time_created,
            time_updated=self.time_updated,
            upgrade_informations=self.upgrade_informations)


def get_at_customer_ccc_infrastructure(ccc_infrastructure_id: Optional[str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAtCustomerCccInfrastructureResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cccInfrastructureId'] = ccc_infrastructure_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:ComputeCloud/getAtCustomerCccInfrastructure:getAtCustomerCccInfrastructure', __args__, opts=opts, typ=GetAtCustomerCccInfrastructureResult).value

    return AwaitableGetAtCustomerCccInfrastructureResult(
        ccc_infrastructure_id=pulumi.get(__ret__, 'ccc_infrastructure_id'),
        ccc_upgrade_schedule_id=pulumi.get(__ret__, 'ccc_upgrade_schedule_id'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        connection_details=pulumi.get(__ret__, 'connection_details'),
        connection_state=pulumi.get(__ret__, 'connection_state'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        id=pulumi.get(__ret__, 'id'),
        infrastructure_inventories=pulumi.get(__ret__, 'infrastructure_inventories'),
        infrastructure_network_configurations=pulumi.get(__ret__, 'infrastructure_network_configurations'),
        lifecycle_details=pulumi.get(__ret__, 'lifecycle_details'),
        provisioning_fingerprint=pulumi.get(__ret__, 'provisioning_fingerprint'),
        provisioning_pin=pulumi.get(__ret__, 'provisioning_pin'),
        short_name=pulumi.get(__ret__, 'short_name'),
        state=pulumi.get(__ret__, 'state'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        system_tags=pulumi.get(__ret__, 'system_tags'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_updated=pulumi.get(__ret__, 'time_updated'),
        upgrade_informations=pulumi.get(__ret__, 'upgrade_informations'))


@_utilities.lift_output_func(get_at_customer_ccc_infrastructure)
def get_at_customer_ccc_infrastructure_output(ccc_infrastructure_id: Optional[pulumi.Input[str]] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAtCustomerCccInfrastructureResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
