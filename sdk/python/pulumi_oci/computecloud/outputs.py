# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AtCustomerCccInfrastructureInfrastructureInventory',
    'AtCustomerCccInfrastructureInfrastructureNetworkConfiguration',
    'AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic',
    'AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformation',
    'AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic',
    'AtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode',
    'AtCustomerCccInfrastructureUpgradeInformation',
    'AtCustomerCccUpgradeScheduleEvent',
    'GetAtCustomerCccInfrastructureInfrastructureInventoryResult',
    'GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationResult',
    'GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicResult',
    'GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformationResult',
    'GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStaticResult',
    'GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNodeResult',
    'GetAtCustomerCccInfrastructureUpgradeInformationResult',
    'GetAtCustomerCccInfrastructuresCccInfrastructureCollectionResult',
    'GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemResult',
    'GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventoryResult',
    'GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationResult',
    'GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingDynamicResult',
    'GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformationResult',
    'GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingStaticResult',
    'GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationManagementNodeResult',
    'GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemUpgradeInformationResult',
    'GetAtCustomerCccInfrastructuresFilterResult',
    'GetAtCustomerCccUpgradeScheduleEventResult',
    'GetAtCustomerCccUpgradeSchedulesCccUpgradeScheduleCollectionResult',
    'GetAtCustomerCccUpgradeSchedulesCccUpgradeScheduleCollectionItemResult',
    'GetAtCustomerCccUpgradeSchedulesCccUpgradeScheduleCollectionItemEventResult',
    'GetAtCustomerCccUpgradeSchedulesFilterResult',
]

@pulumi.output_type
class AtCustomerCccInfrastructureInfrastructureInventory(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityStorageTrayCount":
            suggest = "capacity_storage_tray_count"
        elif key == "computeNodeCount":
            suggest = "compute_node_count"
        elif key == "managementNodeCount":
            suggest = "management_node_count"
        elif key == "performanceStorageTrayCount":
            suggest = "performance_storage_tray_count"
        elif key == "serialNumber":
            suggest = "serial_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AtCustomerCccInfrastructureInfrastructureInventory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AtCustomerCccInfrastructureInfrastructureInventory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AtCustomerCccInfrastructureInfrastructureInventory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity_storage_tray_count: Optional[int] = None,
                 compute_node_count: Optional[int] = None,
                 management_node_count: Optional[int] = None,
                 performance_storage_tray_count: Optional[int] = None,
                 serial_number: Optional[str] = None):
        if capacity_storage_tray_count is not None:
            pulumi.set(__self__, "capacity_storage_tray_count", capacity_storage_tray_count)
        if compute_node_count is not None:
            pulumi.set(__self__, "compute_node_count", compute_node_count)
        if management_node_count is not None:
            pulumi.set(__self__, "management_node_count", management_node_count)
        if performance_storage_tray_count is not None:
            pulumi.set(__self__, "performance_storage_tray_count", performance_storage_tray_count)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)

    @property
    @pulumi.getter(name="capacityStorageTrayCount")
    def capacity_storage_tray_count(self) -> Optional[int]:
        return pulumi.get(self, "capacity_storage_tray_count")

    @property
    @pulumi.getter(name="computeNodeCount")
    def compute_node_count(self) -> Optional[int]:
        return pulumi.get(self, "compute_node_count")

    @property
    @pulumi.getter(name="managementNodeCount")
    def management_node_count(self) -> Optional[int]:
        return pulumi.get(self, "management_node_count")

    @property
    @pulumi.getter(name="performanceStorageTrayCount")
    def performance_storage_tray_count(self) -> Optional[int]:
        return pulumi.get(self, "performance_storage_tray_count")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")


@pulumi.output_type
class AtCustomerCccInfrastructureInfrastructureNetworkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsIps":
            suggest = "dns_ips"
        elif key == "infrastructureRoutingDynamics":
            suggest = "infrastructure_routing_dynamics"
        elif key == "infrastructureRoutingStatics":
            suggest = "infrastructure_routing_statics"
        elif key == "managementNodes":
            suggest = "management_nodes"
        elif key == "mgmtVipHostname":
            suggest = "mgmt_vip_hostname"
        elif key == "mgmtVipIp":
            suggest = "mgmt_vip_ip"
        elif key == "spineIps":
            suggest = "spine_ips"
        elif key == "spineVip":
            suggest = "spine_vip"
        elif key == "uplinkDomain":
            suggest = "uplink_domain"
        elif key == "uplinkGatewayIp":
            suggest = "uplink_gateway_ip"
        elif key == "uplinkNetmask":
            suggest = "uplink_netmask"
        elif key == "uplinkPortCount":
            suggest = "uplink_port_count"
        elif key == "uplinkPortForwardErrorCorrection":
            suggest = "uplink_port_forward_error_correction"
        elif key == "uplinkPortSpeedInGbps":
            suggest = "uplink_port_speed_in_gbps"
        elif key == "uplinkVlanMtu":
            suggest = "uplink_vlan_mtu"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AtCustomerCccInfrastructureInfrastructureNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AtCustomerCccInfrastructureInfrastructureNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AtCustomerCccInfrastructureInfrastructureNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_ips: Optional[Sequence[str]] = None,
                 infrastructure_routing_dynamics: Optional[Sequence['outputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic']] = None,
                 infrastructure_routing_statics: Optional[Sequence['outputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic']] = None,
                 management_nodes: Optional[Sequence['outputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode']] = None,
                 mgmt_vip_hostname: Optional[str] = None,
                 mgmt_vip_ip: Optional[str] = None,
                 spine_ips: Optional[Sequence[str]] = None,
                 spine_vip: Optional[str] = None,
                 uplink_domain: Optional[str] = None,
                 uplink_gateway_ip: Optional[str] = None,
                 uplink_netmask: Optional[str] = None,
                 uplink_port_count: Optional[int] = None,
                 uplink_port_forward_error_correction: Optional[str] = None,
                 uplink_port_speed_in_gbps: Optional[int] = None,
                 uplink_vlan_mtu: Optional[int] = None):
        if dns_ips is not None:
            pulumi.set(__self__, "dns_ips", dns_ips)
        if infrastructure_routing_dynamics is not None:
            pulumi.set(__self__, "infrastructure_routing_dynamics", infrastructure_routing_dynamics)
        if infrastructure_routing_statics is not None:
            pulumi.set(__self__, "infrastructure_routing_statics", infrastructure_routing_statics)
        if management_nodes is not None:
            pulumi.set(__self__, "management_nodes", management_nodes)
        if mgmt_vip_hostname is not None:
            pulumi.set(__self__, "mgmt_vip_hostname", mgmt_vip_hostname)
        if mgmt_vip_ip is not None:
            pulumi.set(__self__, "mgmt_vip_ip", mgmt_vip_ip)
        if spine_ips is not None:
            pulumi.set(__self__, "spine_ips", spine_ips)
        if spine_vip is not None:
            pulumi.set(__self__, "spine_vip", spine_vip)
        if uplink_domain is not None:
            pulumi.set(__self__, "uplink_domain", uplink_domain)
        if uplink_gateway_ip is not None:
            pulumi.set(__self__, "uplink_gateway_ip", uplink_gateway_ip)
        if uplink_netmask is not None:
            pulumi.set(__self__, "uplink_netmask", uplink_netmask)
        if uplink_port_count is not None:
            pulumi.set(__self__, "uplink_port_count", uplink_port_count)
        if uplink_port_forward_error_correction is not None:
            pulumi.set(__self__, "uplink_port_forward_error_correction", uplink_port_forward_error_correction)
        if uplink_port_speed_in_gbps is not None:
            pulumi.set(__self__, "uplink_port_speed_in_gbps", uplink_port_speed_in_gbps)
        if uplink_vlan_mtu is not None:
            pulumi.set(__self__, "uplink_vlan_mtu", uplink_vlan_mtu)

    @property
    @pulumi.getter(name="dnsIps")
    def dns_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dns_ips")

    @property
    @pulumi.getter(name="infrastructureRoutingDynamics")
    def infrastructure_routing_dynamics(self) -> Optional[Sequence['outputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic']]:
        return pulumi.get(self, "infrastructure_routing_dynamics")

    @property
    @pulumi.getter(name="infrastructureRoutingStatics")
    def infrastructure_routing_statics(self) -> Optional[Sequence['outputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic']]:
        return pulumi.get(self, "infrastructure_routing_statics")

    @property
    @pulumi.getter(name="managementNodes")
    def management_nodes(self) -> Optional[Sequence['outputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode']]:
        return pulumi.get(self, "management_nodes")

    @property
    @pulumi.getter(name="mgmtVipHostname")
    def mgmt_vip_hostname(self) -> Optional[str]:
        return pulumi.get(self, "mgmt_vip_hostname")

    @property
    @pulumi.getter(name="mgmtVipIp")
    def mgmt_vip_ip(self) -> Optional[str]:
        return pulumi.get(self, "mgmt_vip_ip")

    @property
    @pulumi.getter(name="spineIps")
    def spine_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "spine_ips")

    @property
    @pulumi.getter(name="spineVip")
    def spine_vip(self) -> Optional[str]:
        return pulumi.get(self, "spine_vip")

    @property
    @pulumi.getter(name="uplinkDomain")
    def uplink_domain(self) -> Optional[str]:
        return pulumi.get(self, "uplink_domain")

    @property
    @pulumi.getter(name="uplinkGatewayIp")
    def uplink_gateway_ip(self) -> Optional[str]:
        return pulumi.get(self, "uplink_gateway_ip")

    @property
    @pulumi.getter(name="uplinkNetmask")
    def uplink_netmask(self) -> Optional[str]:
        return pulumi.get(self, "uplink_netmask")

    @property
    @pulumi.getter(name="uplinkPortCount")
    def uplink_port_count(self) -> Optional[int]:
        return pulumi.get(self, "uplink_port_count")

    @property
    @pulumi.getter(name="uplinkPortForwardErrorCorrection")
    def uplink_port_forward_error_correction(self) -> Optional[str]:
        return pulumi.get(self, "uplink_port_forward_error_correction")

    @property
    @pulumi.getter(name="uplinkPortSpeedInGbps")
    def uplink_port_speed_in_gbps(self) -> Optional[int]:
        return pulumi.get(self, "uplink_port_speed_in_gbps")

    @property
    @pulumi.getter(name="uplinkVlanMtu")
    def uplink_vlan_mtu(self) -> Optional[int]:
        return pulumi.get(self, "uplink_vlan_mtu")


@pulumi.output_type
class AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bgpTopology":
            suggest = "bgp_topology"
        elif key == "oracleAsn":
            suggest = "oracle_asn"
        elif key == "peerInformations":
            suggest = "peer_informations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bgp_topology: Optional[str] = None,
                 oracle_asn: Optional[int] = None,
                 peer_informations: Optional[Sequence['outputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformation']] = None):
        if bgp_topology is not None:
            pulumi.set(__self__, "bgp_topology", bgp_topology)
        if oracle_asn is not None:
            pulumi.set(__self__, "oracle_asn", oracle_asn)
        if peer_informations is not None:
            pulumi.set(__self__, "peer_informations", peer_informations)

    @property
    @pulumi.getter(name="bgpTopology")
    def bgp_topology(self) -> Optional[str]:
        return pulumi.get(self, "bgp_topology")

    @property
    @pulumi.getter(name="oracleAsn")
    def oracle_asn(self) -> Optional[int]:
        return pulumi.get(self, "oracle_asn")

    @property
    @pulumi.getter(name="peerInformations")
    def peer_informations(self) -> Optional[Sequence['outputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformation']]:
        return pulumi.get(self, "peer_informations")


@pulumi.output_type
class AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformation(dict):
    def __init__(__self__, *,
                 asn: Optional[int] = None,
                 ip: Optional[str] = None):
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def asn(self) -> Optional[int]:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uplinkHsrpGroup":
            suggest = "uplink_hsrp_group"
        elif key == "uplinkVlan":
            suggest = "uplink_vlan"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStatic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uplink_hsrp_group: Optional[int] = None,
                 uplink_vlan: Optional[int] = None):
        if uplink_hsrp_group is not None:
            pulumi.set(__self__, "uplink_hsrp_group", uplink_hsrp_group)
        if uplink_vlan is not None:
            pulumi.set(__self__, "uplink_vlan", uplink_vlan)

    @property
    @pulumi.getter(name="uplinkHsrpGroup")
    def uplink_hsrp_group(self) -> Optional[int]:
        return pulumi.get(self, "uplink_hsrp_group")

    @property
    @pulumi.getter(name="uplinkVlan")
    def uplink_vlan(self) -> Optional[int]:
        return pulumi.get(self, "uplink_vlan")


@pulumi.output_type
class AtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNode(dict):
    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 ip: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class AtCustomerCccInfrastructureUpgradeInformation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentVersion":
            suggest = "current_version"
        elif key == "isActive":
            suggest = "is_active"
        elif key == "scheduledUpgradeDuration":
            suggest = "scheduled_upgrade_duration"
        elif key == "timeOfScheduledUpgrade":
            suggest = "time_of_scheduled_upgrade"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AtCustomerCccInfrastructureUpgradeInformation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AtCustomerCccInfrastructureUpgradeInformation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AtCustomerCccInfrastructureUpgradeInformation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_version: Optional[str] = None,
                 is_active: Optional[bool] = None,
                 scheduled_upgrade_duration: Optional[str] = None,
                 time_of_scheduled_upgrade: Optional[str] = None):
        if current_version is not None:
            pulumi.set(__self__, "current_version", current_version)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if scheduled_upgrade_duration is not None:
            pulumi.set(__self__, "scheduled_upgrade_duration", scheduled_upgrade_duration)
        if time_of_scheduled_upgrade is not None:
            pulumi.set(__self__, "time_of_scheduled_upgrade", time_of_scheduled_upgrade)

    @property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> Optional[str]:
        return pulumi.get(self, "current_version")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[bool]:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="scheduledUpgradeDuration")
    def scheduled_upgrade_duration(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_upgrade_duration")

    @property
    @pulumi.getter(name="timeOfScheduledUpgrade")
    def time_of_scheduled_upgrade(self) -> Optional[str]:
        return pulumi.get(self, "time_of_scheduled_upgrade")


@pulumi.output_type
class AtCustomerCccUpgradeScheduleEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scheduleEventDuration":
            suggest = "schedule_event_duration"
        elif key == "timeStart":
            suggest = "time_start"
        elif key == "scheduleEventRecurrences":
            suggest = "schedule_event_recurrences"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AtCustomerCccUpgradeScheduleEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AtCustomerCccUpgradeScheduleEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AtCustomerCccUpgradeScheduleEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: str,
                 schedule_event_duration: str,
                 time_start: str,
                 name: Optional[str] = None,
                 schedule_event_recurrences: Optional[str] = None):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "schedule_event_duration", schedule_event_duration)
        pulumi.set(__self__, "time_start", time_start)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schedule_event_recurrences is not None:
            pulumi.set(__self__, "schedule_event_recurrences", schedule_event_recurrences)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="scheduleEventDuration")
    def schedule_event_duration(self) -> str:
        return pulumi.get(self, "schedule_event_duration")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> str:
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scheduleEventRecurrences")
    def schedule_event_recurrences(self) -> Optional[str]:
        return pulumi.get(self, "schedule_event_recurrences")


@pulumi.output_type
class GetAtCustomerCccInfrastructureInfrastructureInventoryResult(dict):
    def __init__(__self__, *,
                 capacity_storage_tray_count: Optional[int] = None,
                 compute_node_count: Optional[int] = None,
                 management_node_count: Optional[int] = None,
                 performance_storage_tray_count: Optional[int] = None,
                 serial_number: Optional[str] = None):
        if capacity_storage_tray_count is not None:
            pulumi.set(__self__, "capacity_storage_tray_count", capacity_storage_tray_count)
        if compute_node_count is not None:
            pulumi.set(__self__, "compute_node_count", compute_node_count)
        if management_node_count is not None:
            pulumi.set(__self__, "management_node_count", management_node_count)
        if performance_storage_tray_count is not None:
            pulumi.set(__self__, "performance_storage_tray_count", performance_storage_tray_count)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)

    @property
    @pulumi.getter(name="capacityStorageTrayCount")
    def capacity_storage_tray_count(self) -> Optional[int]:
        return pulumi.get(self, "capacity_storage_tray_count")

    @property
    @pulumi.getter(name="computeNodeCount")
    def compute_node_count(self) -> Optional[int]:
        return pulumi.get(self, "compute_node_count")

    @property
    @pulumi.getter(name="managementNodeCount")
    def management_node_count(self) -> Optional[int]:
        return pulumi.get(self, "management_node_count")

    @property
    @pulumi.getter(name="performanceStorageTrayCount")
    def performance_storage_tray_count(self) -> Optional[int]:
        return pulumi.get(self, "performance_storage_tray_count")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")


@pulumi.output_type
class GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 dns_ips: Optional[Sequence[str]] = None,
                 infrastructure_routing_dynamics: Optional[Sequence['outputs.GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicResult']] = None,
                 infrastructure_routing_statics: Optional[Sequence['outputs.GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStaticResult']] = None,
                 management_nodes: Optional[Sequence['outputs.GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNodeResult']] = None,
                 mgmt_vip_hostname: Optional[str] = None,
                 mgmt_vip_ip: Optional[str] = None,
                 spine_ips: Optional[Sequence[str]] = None,
                 spine_vip: Optional[str] = None,
                 uplink_domain: Optional[str] = None,
                 uplink_gateway_ip: Optional[str] = None,
                 uplink_netmask: Optional[str] = None,
                 uplink_port_count: Optional[int] = None,
                 uplink_port_forward_error_correction: Optional[str] = None,
                 uplink_port_speed_in_gbps: Optional[int] = None,
                 uplink_vlan_mtu: Optional[int] = None):
        if dns_ips is not None:
            pulumi.set(__self__, "dns_ips", dns_ips)
        if infrastructure_routing_dynamics is not None:
            pulumi.set(__self__, "infrastructure_routing_dynamics", infrastructure_routing_dynamics)
        if infrastructure_routing_statics is not None:
            pulumi.set(__self__, "infrastructure_routing_statics", infrastructure_routing_statics)
        if management_nodes is not None:
            pulumi.set(__self__, "management_nodes", management_nodes)
        if mgmt_vip_hostname is not None:
            pulumi.set(__self__, "mgmt_vip_hostname", mgmt_vip_hostname)
        if mgmt_vip_ip is not None:
            pulumi.set(__self__, "mgmt_vip_ip", mgmt_vip_ip)
        if spine_ips is not None:
            pulumi.set(__self__, "spine_ips", spine_ips)
        if spine_vip is not None:
            pulumi.set(__self__, "spine_vip", spine_vip)
        if uplink_domain is not None:
            pulumi.set(__self__, "uplink_domain", uplink_domain)
        if uplink_gateway_ip is not None:
            pulumi.set(__self__, "uplink_gateway_ip", uplink_gateway_ip)
        if uplink_netmask is not None:
            pulumi.set(__self__, "uplink_netmask", uplink_netmask)
        if uplink_port_count is not None:
            pulumi.set(__self__, "uplink_port_count", uplink_port_count)
        if uplink_port_forward_error_correction is not None:
            pulumi.set(__self__, "uplink_port_forward_error_correction", uplink_port_forward_error_correction)
        if uplink_port_speed_in_gbps is not None:
            pulumi.set(__self__, "uplink_port_speed_in_gbps", uplink_port_speed_in_gbps)
        if uplink_vlan_mtu is not None:
            pulumi.set(__self__, "uplink_vlan_mtu", uplink_vlan_mtu)

    @property
    @pulumi.getter(name="dnsIps")
    def dns_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dns_ips")

    @property
    @pulumi.getter(name="infrastructureRoutingDynamics")
    def infrastructure_routing_dynamics(self) -> Optional[Sequence['outputs.GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicResult']]:
        return pulumi.get(self, "infrastructure_routing_dynamics")

    @property
    @pulumi.getter(name="infrastructureRoutingStatics")
    def infrastructure_routing_statics(self) -> Optional[Sequence['outputs.GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStaticResult']]:
        return pulumi.get(self, "infrastructure_routing_statics")

    @property
    @pulumi.getter(name="managementNodes")
    def management_nodes(self) -> Optional[Sequence['outputs.GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNodeResult']]:
        return pulumi.get(self, "management_nodes")

    @property
    @pulumi.getter(name="mgmtVipHostname")
    def mgmt_vip_hostname(self) -> Optional[str]:
        return pulumi.get(self, "mgmt_vip_hostname")

    @property
    @pulumi.getter(name="mgmtVipIp")
    def mgmt_vip_ip(self) -> Optional[str]:
        return pulumi.get(self, "mgmt_vip_ip")

    @property
    @pulumi.getter(name="spineIps")
    def spine_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "spine_ips")

    @property
    @pulumi.getter(name="spineVip")
    def spine_vip(self) -> Optional[str]:
        return pulumi.get(self, "spine_vip")

    @property
    @pulumi.getter(name="uplinkDomain")
    def uplink_domain(self) -> Optional[str]:
        return pulumi.get(self, "uplink_domain")

    @property
    @pulumi.getter(name="uplinkGatewayIp")
    def uplink_gateway_ip(self) -> Optional[str]:
        return pulumi.get(self, "uplink_gateway_ip")

    @property
    @pulumi.getter(name="uplinkNetmask")
    def uplink_netmask(self) -> Optional[str]:
        return pulumi.get(self, "uplink_netmask")

    @property
    @pulumi.getter(name="uplinkPortCount")
    def uplink_port_count(self) -> Optional[int]:
        return pulumi.get(self, "uplink_port_count")

    @property
    @pulumi.getter(name="uplinkPortForwardErrorCorrection")
    def uplink_port_forward_error_correction(self) -> Optional[str]:
        return pulumi.get(self, "uplink_port_forward_error_correction")

    @property
    @pulumi.getter(name="uplinkPortSpeedInGbps")
    def uplink_port_speed_in_gbps(self) -> Optional[int]:
        return pulumi.get(self, "uplink_port_speed_in_gbps")

    @property
    @pulumi.getter(name="uplinkVlanMtu")
    def uplink_vlan_mtu(self) -> Optional[int]:
        return pulumi.get(self, "uplink_vlan_mtu")


@pulumi.output_type
class GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicResult(dict):
    def __init__(__self__, *,
                 bgp_topology: Optional[str] = None,
                 oracle_asn: Optional[int] = None,
                 peer_informations: Optional[Sequence['outputs.GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformationResult']] = None):
        if bgp_topology is not None:
            pulumi.set(__self__, "bgp_topology", bgp_topology)
        if oracle_asn is not None:
            pulumi.set(__self__, "oracle_asn", oracle_asn)
        if peer_informations is not None:
            pulumi.set(__self__, "peer_informations", peer_informations)

    @property
    @pulumi.getter(name="bgpTopology")
    def bgp_topology(self) -> Optional[str]:
        return pulumi.get(self, "bgp_topology")

    @property
    @pulumi.getter(name="oracleAsn")
    def oracle_asn(self) -> Optional[int]:
        return pulumi.get(self, "oracle_asn")

    @property
    @pulumi.getter(name="peerInformations")
    def peer_informations(self) -> Optional[Sequence['outputs.GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformationResult']]:
        return pulumi.get(self, "peer_informations")


@pulumi.output_type
class GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformationResult(dict):
    def __init__(__self__, *,
                 asn: Optional[int] = None,
                 ip: Optional[str] = None):
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def asn(self) -> Optional[int]:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStaticResult(dict):
    def __init__(__self__, *,
                 uplink_hsrp_group: Optional[int] = None,
                 uplink_vlan: Optional[int] = None):
        if uplink_hsrp_group is not None:
            pulumi.set(__self__, "uplink_hsrp_group", uplink_hsrp_group)
        if uplink_vlan is not None:
            pulumi.set(__self__, "uplink_vlan", uplink_vlan)

    @property
    @pulumi.getter(name="uplinkHsrpGroup")
    def uplink_hsrp_group(self) -> Optional[int]:
        return pulumi.get(self, "uplink_hsrp_group")

    @property
    @pulumi.getter(name="uplinkVlan")
    def uplink_vlan(self) -> Optional[int]:
        return pulumi.get(self, "uplink_vlan")


@pulumi.output_type
class GetAtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNodeResult(dict):
    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 ip: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetAtCustomerCccInfrastructureUpgradeInformationResult(dict):
    def __init__(__self__, *,
                 current_version: Optional[str] = None,
                 is_active: Optional[bool] = None,
                 scheduled_upgrade_duration: Optional[str] = None,
                 time_of_scheduled_upgrade: Optional[str] = None):
        if current_version is not None:
            pulumi.set(__self__, "current_version", current_version)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if scheduled_upgrade_duration is not None:
            pulumi.set(__self__, "scheduled_upgrade_duration", scheduled_upgrade_duration)
        if time_of_scheduled_upgrade is not None:
            pulumi.set(__self__, "time_of_scheduled_upgrade", time_of_scheduled_upgrade)

    @property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> Optional[str]:
        return pulumi.get(self, "current_version")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[bool]:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="scheduledUpgradeDuration")
    def scheduled_upgrade_duration(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_upgrade_duration")

    @property
    @pulumi.getter(name="timeOfScheduledUpgrade")
    def time_of_scheduled_upgrade(self) -> Optional[str]:
        return pulumi.get(self, "time_of_scheduled_upgrade")


@pulumi.output_type
class GetAtCustomerCccInfrastructuresCccInfrastructureCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemResult(dict):
    def __init__(__self__, *,
                 ccc_upgrade_schedule_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 connection_details: Optional[str] = None,
                 connection_state: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 infrastructure_inventories: Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventoryResult']] = None,
                 infrastructure_network_configurations: Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 provisioning_fingerprint: Optional[str] = None,
                 provisioning_pin: Optional[str] = None,
                 short_name: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 upgrade_informations: Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemUpgradeInformationResult']] = None):
        if ccc_upgrade_schedule_id is not None:
            pulumi.set(__self__, "ccc_upgrade_schedule_id", ccc_upgrade_schedule_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_details is not None:
            pulumi.set(__self__, "connection_details", connection_details)
        if connection_state is not None:
            pulumi.set(__self__, "connection_state", connection_state)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infrastructure_inventories is not None:
            pulumi.set(__self__, "infrastructure_inventories", infrastructure_inventories)
        if infrastructure_network_configurations is not None:
            pulumi.set(__self__, "infrastructure_network_configurations", infrastructure_network_configurations)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if provisioning_fingerprint is not None:
            pulumi.set(__self__, "provisioning_fingerprint", provisioning_fingerprint)
        if provisioning_pin is not None:
            pulumi.set(__self__, "provisioning_pin", provisioning_pin)
        if short_name is not None:
            pulumi.set(__self__, "short_name", short_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if upgrade_informations is not None:
            pulumi.set(__self__, "upgrade_informations", upgrade_informations)

    @property
    @pulumi.getter(name="cccUpgradeScheduleId")
    def ccc_upgrade_schedule_id(self) -> Optional[str]:
        return pulumi.get(self, "ccc_upgrade_schedule_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionDetails")
    def connection_details(self) -> Optional[str]:
        return pulumi.get(self, "connection_details")

    @property
    @pulumi.getter(name="connectionState")
    def connection_state(self) -> Optional[str]:
        return pulumi.get(self, "connection_state")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="infrastructureInventories")
    def infrastructure_inventories(self) -> Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventoryResult']]:
        return pulumi.get(self, "infrastructure_inventories")

    @property
    @pulumi.getter(name="infrastructureNetworkConfigurations")
    def infrastructure_network_configurations(self) -> Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationResult']]:
        return pulumi.get(self, "infrastructure_network_configurations")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="provisioningFingerprint")
    def provisioning_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_fingerprint")

    @property
    @pulumi.getter(name="provisioningPin")
    def provisioning_pin(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_pin")

    @property
    @pulumi.getter(name="shortName")
    def short_name(self) -> Optional[str]:
        return pulumi.get(self, "short_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="upgradeInformations")
    def upgrade_informations(self) -> Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemUpgradeInformationResult']]:
        return pulumi.get(self, "upgrade_informations")


@pulumi.output_type
class GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureInventoryResult(dict):
    def __init__(__self__, *,
                 capacity_storage_tray_count: Optional[int] = None,
                 compute_node_count: Optional[int] = None,
                 management_node_count: Optional[int] = None,
                 performance_storage_tray_count: Optional[int] = None,
                 serial_number: Optional[str] = None):
        if capacity_storage_tray_count is not None:
            pulumi.set(__self__, "capacity_storage_tray_count", capacity_storage_tray_count)
        if compute_node_count is not None:
            pulumi.set(__self__, "compute_node_count", compute_node_count)
        if management_node_count is not None:
            pulumi.set(__self__, "management_node_count", management_node_count)
        if performance_storage_tray_count is not None:
            pulumi.set(__self__, "performance_storage_tray_count", performance_storage_tray_count)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)

    @property
    @pulumi.getter(name="capacityStorageTrayCount")
    def capacity_storage_tray_count(self) -> Optional[int]:
        return pulumi.get(self, "capacity_storage_tray_count")

    @property
    @pulumi.getter(name="computeNodeCount")
    def compute_node_count(self) -> Optional[int]:
        return pulumi.get(self, "compute_node_count")

    @property
    @pulumi.getter(name="managementNodeCount")
    def management_node_count(self) -> Optional[int]:
        return pulumi.get(self, "management_node_count")

    @property
    @pulumi.getter(name="performanceStorageTrayCount")
    def performance_storage_tray_count(self) -> Optional[int]:
        return pulumi.get(self, "performance_storage_tray_count")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")


@pulumi.output_type
class GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 dns_ips: Optional[Sequence[str]] = None,
                 infrastructure_routing_dynamics: Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingDynamicResult']] = None,
                 infrastructure_routing_statics: Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingStaticResult']] = None,
                 management_nodes: Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationManagementNodeResult']] = None,
                 mgmt_vip_hostname: Optional[str] = None,
                 mgmt_vip_ip: Optional[str] = None,
                 spine_ips: Optional[Sequence[str]] = None,
                 spine_vip: Optional[str] = None,
                 uplink_domain: Optional[str] = None,
                 uplink_gateway_ip: Optional[str] = None,
                 uplink_netmask: Optional[str] = None,
                 uplink_port_count: Optional[int] = None,
                 uplink_port_forward_error_correction: Optional[str] = None,
                 uplink_port_speed_in_gbps: Optional[int] = None,
                 uplink_vlan_mtu: Optional[int] = None):
        if dns_ips is not None:
            pulumi.set(__self__, "dns_ips", dns_ips)
        if infrastructure_routing_dynamics is not None:
            pulumi.set(__self__, "infrastructure_routing_dynamics", infrastructure_routing_dynamics)
        if infrastructure_routing_statics is not None:
            pulumi.set(__self__, "infrastructure_routing_statics", infrastructure_routing_statics)
        if management_nodes is not None:
            pulumi.set(__self__, "management_nodes", management_nodes)
        if mgmt_vip_hostname is not None:
            pulumi.set(__self__, "mgmt_vip_hostname", mgmt_vip_hostname)
        if mgmt_vip_ip is not None:
            pulumi.set(__self__, "mgmt_vip_ip", mgmt_vip_ip)
        if spine_ips is not None:
            pulumi.set(__self__, "spine_ips", spine_ips)
        if spine_vip is not None:
            pulumi.set(__self__, "spine_vip", spine_vip)
        if uplink_domain is not None:
            pulumi.set(__self__, "uplink_domain", uplink_domain)
        if uplink_gateway_ip is not None:
            pulumi.set(__self__, "uplink_gateway_ip", uplink_gateway_ip)
        if uplink_netmask is not None:
            pulumi.set(__self__, "uplink_netmask", uplink_netmask)
        if uplink_port_count is not None:
            pulumi.set(__self__, "uplink_port_count", uplink_port_count)
        if uplink_port_forward_error_correction is not None:
            pulumi.set(__self__, "uplink_port_forward_error_correction", uplink_port_forward_error_correction)
        if uplink_port_speed_in_gbps is not None:
            pulumi.set(__self__, "uplink_port_speed_in_gbps", uplink_port_speed_in_gbps)
        if uplink_vlan_mtu is not None:
            pulumi.set(__self__, "uplink_vlan_mtu", uplink_vlan_mtu)

    @property
    @pulumi.getter(name="dnsIps")
    def dns_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dns_ips")

    @property
    @pulumi.getter(name="infrastructureRoutingDynamics")
    def infrastructure_routing_dynamics(self) -> Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingDynamicResult']]:
        return pulumi.get(self, "infrastructure_routing_dynamics")

    @property
    @pulumi.getter(name="infrastructureRoutingStatics")
    def infrastructure_routing_statics(self) -> Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingStaticResult']]:
        return pulumi.get(self, "infrastructure_routing_statics")

    @property
    @pulumi.getter(name="managementNodes")
    def management_nodes(self) -> Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationManagementNodeResult']]:
        return pulumi.get(self, "management_nodes")

    @property
    @pulumi.getter(name="mgmtVipHostname")
    def mgmt_vip_hostname(self) -> Optional[str]:
        return pulumi.get(self, "mgmt_vip_hostname")

    @property
    @pulumi.getter(name="mgmtVipIp")
    def mgmt_vip_ip(self) -> Optional[str]:
        return pulumi.get(self, "mgmt_vip_ip")

    @property
    @pulumi.getter(name="spineIps")
    def spine_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "spine_ips")

    @property
    @pulumi.getter(name="spineVip")
    def spine_vip(self) -> Optional[str]:
        return pulumi.get(self, "spine_vip")

    @property
    @pulumi.getter(name="uplinkDomain")
    def uplink_domain(self) -> Optional[str]:
        return pulumi.get(self, "uplink_domain")

    @property
    @pulumi.getter(name="uplinkGatewayIp")
    def uplink_gateway_ip(self) -> Optional[str]:
        return pulumi.get(self, "uplink_gateway_ip")

    @property
    @pulumi.getter(name="uplinkNetmask")
    def uplink_netmask(self) -> Optional[str]:
        return pulumi.get(self, "uplink_netmask")

    @property
    @pulumi.getter(name="uplinkPortCount")
    def uplink_port_count(self) -> Optional[int]:
        return pulumi.get(self, "uplink_port_count")

    @property
    @pulumi.getter(name="uplinkPortForwardErrorCorrection")
    def uplink_port_forward_error_correction(self) -> Optional[str]:
        return pulumi.get(self, "uplink_port_forward_error_correction")

    @property
    @pulumi.getter(name="uplinkPortSpeedInGbps")
    def uplink_port_speed_in_gbps(self) -> Optional[int]:
        return pulumi.get(self, "uplink_port_speed_in_gbps")

    @property
    @pulumi.getter(name="uplinkVlanMtu")
    def uplink_vlan_mtu(self) -> Optional[int]:
        return pulumi.get(self, "uplink_vlan_mtu")


@pulumi.output_type
class GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingDynamicResult(dict):
    def __init__(__self__, *,
                 bgp_topology: Optional[str] = None,
                 oracle_asn: Optional[int] = None,
                 peer_informations: Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformationResult']] = None):
        if bgp_topology is not None:
            pulumi.set(__self__, "bgp_topology", bgp_topology)
        if oracle_asn is not None:
            pulumi.set(__self__, "oracle_asn", oracle_asn)
        if peer_informations is not None:
            pulumi.set(__self__, "peer_informations", peer_informations)

    @property
    @pulumi.getter(name="bgpTopology")
    def bgp_topology(self) -> Optional[str]:
        return pulumi.get(self, "bgp_topology")

    @property
    @pulumi.getter(name="oracleAsn")
    def oracle_asn(self) -> Optional[int]:
        return pulumi.get(self, "oracle_asn")

    @property
    @pulumi.getter(name="peerInformations")
    def peer_informations(self) -> Optional[Sequence['outputs.GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformationResult']]:
        return pulumi.get(self, "peer_informations")


@pulumi.output_type
class GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingDynamicPeerInformationResult(dict):
    def __init__(__self__, *,
                 asn: Optional[int] = None,
                 ip: Optional[str] = None):
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def asn(self) -> Optional[int]:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationInfrastructureRoutingStaticResult(dict):
    def __init__(__self__, *,
                 uplink_hsrp_group: Optional[int] = None,
                 uplink_vlan: Optional[int] = None):
        if uplink_hsrp_group is not None:
            pulumi.set(__self__, "uplink_hsrp_group", uplink_hsrp_group)
        if uplink_vlan is not None:
            pulumi.set(__self__, "uplink_vlan", uplink_vlan)

    @property
    @pulumi.getter(name="uplinkHsrpGroup")
    def uplink_hsrp_group(self) -> Optional[int]:
        return pulumi.get(self, "uplink_hsrp_group")

    @property
    @pulumi.getter(name="uplinkVlan")
    def uplink_vlan(self) -> Optional[int]:
        return pulumi.get(self, "uplink_vlan")


@pulumi.output_type
class GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemInfrastructureNetworkConfigurationManagementNodeResult(dict):
    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 ip: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetAtCustomerCccInfrastructuresCccInfrastructureCollectionItemUpgradeInformationResult(dict):
    def __init__(__self__, *,
                 current_version: Optional[str] = None,
                 is_active: Optional[bool] = None,
                 scheduled_upgrade_duration: Optional[str] = None,
                 time_of_scheduled_upgrade: Optional[str] = None):
        if current_version is not None:
            pulumi.set(__self__, "current_version", current_version)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if scheduled_upgrade_duration is not None:
            pulumi.set(__self__, "scheduled_upgrade_duration", scheduled_upgrade_duration)
        if time_of_scheduled_upgrade is not None:
            pulumi.set(__self__, "time_of_scheduled_upgrade", time_of_scheduled_upgrade)

    @property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> Optional[str]:
        return pulumi.get(self, "current_version")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[bool]:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="scheduledUpgradeDuration")
    def scheduled_upgrade_duration(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_upgrade_duration")

    @property
    @pulumi.getter(name="timeOfScheduledUpgrade")
    def time_of_scheduled_upgrade(self) -> Optional[str]:
        return pulumi.get(self, "time_of_scheduled_upgrade")


@pulumi.output_type
class GetAtCustomerCccInfrastructuresFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAtCustomerCccUpgradeScheduleEventResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 schedule_event_duration: Optional[str] = None,
                 schedule_event_recurrences: Optional[str] = None,
                 time_start: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schedule_event_duration is not None:
            pulumi.set(__self__, "schedule_event_duration", schedule_event_duration)
        if schedule_event_recurrences is not None:
            pulumi.set(__self__, "schedule_event_recurrences", schedule_event_recurrences)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scheduleEventDuration")
    def schedule_event_duration(self) -> Optional[str]:
        return pulumi.get(self, "schedule_event_duration")

    @property
    @pulumi.getter(name="scheduleEventRecurrences")
    def schedule_event_recurrences(self) -> Optional[str]:
        return pulumi.get(self, "schedule_event_recurrences")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetAtCustomerCccUpgradeSchedulesCccUpgradeScheduleCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAtCustomerCccUpgradeSchedulesCccUpgradeScheduleCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAtCustomerCccUpgradeSchedulesCccUpgradeScheduleCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAtCustomerCccUpgradeSchedulesCccUpgradeScheduleCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 events: Optional[Sequence['outputs.GetAtCustomerCccUpgradeSchedulesCccUpgradeScheduleCollectionItemEventResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 infrastructure_ids: Optional[Sequence[str]] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infrastructure_ids is not None:
            pulumi.set(__self__, "infrastructure_ids", infrastructure_ids)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence['outputs.GetAtCustomerCccUpgradeSchedulesCccUpgradeScheduleCollectionItemEventResult']]:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="infrastructureIds")
    def infrastructure_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "infrastructure_ids")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAtCustomerCccUpgradeSchedulesCccUpgradeScheduleCollectionItemEventResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 schedule_event_duration: Optional[str] = None,
                 schedule_event_recurrences: Optional[str] = None,
                 time_start: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schedule_event_duration is not None:
            pulumi.set(__self__, "schedule_event_duration", schedule_event_duration)
        if schedule_event_recurrences is not None:
            pulumi.set(__self__, "schedule_event_recurrences", schedule_event_recurrences)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scheduleEventDuration")
    def schedule_event_duration(self) -> Optional[str]:
        return pulumi.get(self, "schedule_event_duration")

    @property
    @pulumi.getter(name="scheduleEventRecurrences")
    def schedule_event_recurrences(self) -> Optional[str]:
        return pulumi.get(self, "schedule_event_recurrences")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetAtCustomerCccUpgradeSchedulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


