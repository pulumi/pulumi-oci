# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetInstanceAgentPluginsFilterResult',
    'GetInstanceAgentPluginsInstanceAgentPluginResult',
    'GetInstanceAvailablePluginAvailablePluginResult',
    'GetInstanceAvailablePluginFilterResult',
]

@pulumi.output_type
class GetInstanceAgentPluginsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInstanceAgentPluginsInstanceAgentPluginResult(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 name: Optional[str] = None,
                 status: Optional[str] = None,
                 time_last_updated_utc: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_last_updated_utc is not None:
            pulumi.set(__self__, "time_last_updated_utc", time_last_updated_utc)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeLastUpdatedUtc")
    def time_last_updated_utc(self) -> Optional[str]:
        return pulumi.get(self, "time_last_updated_utc")


@pulumi.output_type
class GetInstanceAvailablePluginAvailablePluginResult(dict):
    def __init__(__self__, *,
                 is_enabled_by_default: Optional[bool] = None,
                 is_supported: Optional[bool] = None,
                 name: Optional[str] = None,
                 summary: Optional[str] = None):
        if is_enabled_by_default is not None:
            pulumi.set(__self__, "is_enabled_by_default", is_enabled_by_default)
        if is_supported is not None:
            pulumi.set(__self__, "is_supported", is_supported)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)

    @property
    @pulumi.getter(name="isEnabledByDefault")
    def is_enabled_by_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled_by_default")

    @property
    @pulumi.getter(name="isSupported")
    def is_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_supported")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")


@pulumi.output_type
class GetInstanceAvailablePluginFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


