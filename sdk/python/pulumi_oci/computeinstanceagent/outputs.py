# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetInstanceAgentPluginsFilterResult',
    'GetInstanceAgentPluginsInstanceAgentPluginResult',
    'GetInstanceAvailablePluginAvailablePluginResult',
    'GetInstanceAvailablePluginFilterResult',
]

@pulumi.output_type
class GetInstanceAgentPluginsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: The plugin name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The plugin name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInstanceAgentPluginsInstanceAgentPluginResult(dict):
    def __init__(__self__, *,
                 message: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str,
                 time_last_updated_utc: _builtins.str):
        """
        :param _builtins.str message: The optional message from the agent plugin
        :param _builtins.str name: The plugin name
        :param _builtins.str status: The plugin status
        :param _builtins.str time_last_updated_utc: The last update time of the plugin in UTC
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_last_updated_utc", time_last_updated_utc)

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The optional message from the agent plugin
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The plugin name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The plugin status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="timeLastUpdatedUtc")
    def time_last_updated_utc(self) -> _builtins.str:
        """
        The last update time of the plugin in UTC
        """
        return pulumi.get(self, "time_last_updated_utc")


@pulumi.output_type
class GetInstanceAvailablePluginAvailablePluginResult(dict):
    def __init__(__self__, *,
                 is_enabled_by_default: _builtins.bool,
                 is_supported: _builtins.bool,
                 name: _builtins.str,
                 summary: _builtins.str):
        """
        :param _builtins.bool is_enabled_by_default: Is the plugin enabled or disabled by default
        :param _builtins.bool is_supported: Is the plugin supported or not
        :param _builtins.str name: The plugin name
        :param _builtins.str summary: A brief description of the plugin functionality
        """
        pulumi.set(__self__, "is_enabled_by_default", is_enabled_by_default)
        pulumi.set(__self__, "is_supported", is_supported)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "summary", summary)

    @_builtins.property
    @pulumi.getter(name="isEnabledByDefault")
    def is_enabled_by_default(self) -> _builtins.bool:
        """
        Is the plugin enabled or disabled by default
        """
        return pulumi.get(self, "is_enabled_by_default")

    @_builtins.property
    @pulumi.getter(name="isSupported")
    def is_supported(self) -> _builtins.bool:
        """
        Is the plugin supported or not
        """
        return pulumi.get(self, "is_supported")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The plugin name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        A brief description of the plugin functionality
        """
        return pulumi.get(self, "summary")


@pulumi.output_type
class GetInstanceAvailablePluginFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: The plugin name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The plugin name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


