# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetMigrateToNativeVcnStatusResult',
    'AwaitableGetMigrateToNativeVcnStatusResult',
    'get_migrate_to_native_vcn_status',
    'get_migrate_to_native_vcn_status_output',
]

@pulumi.output_type
class GetMigrateToNativeVcnStatusResult:
    """
    A collection of values returned by getMigrateToNativeVcnStatus.
    """
    def __init__(__self__, cluster_id=None, id=None, state=None, time_decommission_scheduled=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if time_decommission_scheduled and not isinstance(time_decommission_scheduled, str):
            raise TypeError("Expected argument 'time_decommission_scheduled' to be a str")
        pulumi.set(__self__, "time_decommission_scheduled", time_decommission_scheduled)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeDecommissionScheduled")
    def time_decommission_scheduled(self) -> str:
        return pulumi.get(self, "time_decommission_scheduled")


class AwaitableGetMigrateToNativeVcnStatusResult(GetMigrateToNativeVcnStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMigrateToNativeVcnStatusResult(
            cluster_id=self.cluster_id,
            id=self.id,
            state=self.state,
            time_decommission_scheduled=self.time_decommission_scheduled)


def get_migrate_to_native_vcn_status(cluster_id: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMigrateToNativeVcnStatusResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:ContainerEngine/getMigrateToNativeVcnStatus:getMigrateToNativeVcnStatus', __args__, opts=opts, typ=GetMigrateToNativeVcnStatusResult).value

    return AwaitableGetMigrateToNativeVcnStatusResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        state=pulumi.get(__ret__, 'state'),
        time_decommission_scheduled=pulumi.get(__ret__, 'time_decommission_scheduled'))
def get_migrate_to_native_vcn_status_output(cluster_id: Optional[pulumi.Input[str]] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMigrateToNativeVcnStatusResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:ContainerEngine/getMigrateToNativeVcnStatus:getMigrateToNativeVcnStatus', __args__, opts=opts, typ=GetMigrateToNativeVcnStatusResult)
    return __ret__.apply(lambda __response__: GetMigrateToNativeVcnStatusResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        id=pulumi.get(__response__, 'id'),
        state=pulumi.get(__response__, 'state'),
        time_decommission_scheduled=pulumi.get(__response__, 'time_decommission_scheduled')))
