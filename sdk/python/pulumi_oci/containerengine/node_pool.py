# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NodePoolArgs', 'NodePool']

@pulumi.input_type
class NodePoolArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 compartment_id: pulumi.Input[str],
                 node_shape: pulumi.Input[str],
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 initial_node_labels: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolInitialNodeLabelArgs']]]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config_details: Optional[pulumi.Input['NodePoolNodeConfigDetailsArgs']] = None,
                 node_eviction_node_pool_settings: Optional[pulumi.Input['NodePoolNodeEvictionNodePoolSettingsArgs']] = None,
                 node_image_id: Optional[pulumi.Input[str]] = None,
                 node_image_name: Optional[pulumi.Input[str]] = None,
                 node_metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 node_pool_cycling_details: Optional[pulumi.Input['NodePoolNodePoolCyclingDetailsArgs']] = None,
                 node_shape_config: Optional[pulumi.Input['NodePoolNodeShapeConfigArgs']] = None,
                 node_source_details: Optional[pulumi.Input['NodePoolNodeSourceDetailsArgs']] = None,
                 quantity_per_subnet: Optional[pulumi.Input[int]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a NodePool resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "node_shape", node_shape)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if initial_node_labels is not None:
            pulumi.set(__self__, "initial_node_labels", initial_node_labels)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_config_details is not None:
            pulumi.set(__self__, "node_config_details", node_config_details)
        if node_eviction_node_pool_settings is not None:
            pulumi.set(__self__, "node_eviction_node_pool_settings", node_eviction_node_pool_settings)
        if node_image_id is not None:
            warnings.warn("""The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""", DeprecationWarning)
            pulumi.log.warn("""node_image_id is deprecated: The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""")
        if node_image_id is not None:
            pulumi.set(__self__, "node_image_id", node_image_id)
        if node_image_name is not None:
            warnings.warn("""The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""", DeprecationWarning)
            pulumi.log.warn("""node_image_name is deprecated: The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""")
        if node_image_name is not None:
            pulumi.set(__self__, "node_image_name", node_image_name)
        if node_metadata is not None:
            pulumi.set(__self__, "node_metadata", node_metadata)
        if node_pool_cycling_details is not None:
            pulumi.set(__self__, "node_pool_cycling_details", node_pool_cycling_details)
        if node_shape_config is not None:
            pulumi.set(__self__, "node_shape_config", node_shape_config)
        if node_source_details is not None:
            pulumi.set(__self__, "node_source_details", node_source_details)
        if quantity_per_subnet is not None:
            pulumi.set(__self__, "quantity_per_subnet", quantity_per_subnet)
        if ssh_public_key is not None:
            pulumi.set(__self__, "ssh_public_key", ssh_public_key)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="nodeShape")
    def node_shape(self) -> pulumi.Input[str]:
        return pulumi.get(self, "node_shape")

    @node_shape.setter
    def node_shape(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_shape", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="initialNodeLabels")
    def initial_node_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolInitialNodeLabelArgs']]]]:
        return pulumi.get(self, "initial_node_labels")

    @initial_node_labels.setter
    def initial_node_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolInitialNodeLabelArgs']]]]):
        pulumi.set(self, "initial_node_labels", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeConfigDetails")
    def node_config_details(self) -> Optional[pulumi.Input['NodePoolNodeConfigDetailsArgs']]:
        return pulumi.get(self, "node_config_details")

    @node_config_details.setter
    def node_config_details(self, value: Optional[pulumi.Input['NodePoolNodeConfigDetailsArgs']]):
        pulumi.set(self, "node_config_details", value)

    @property
    @pulumi.getter(name="nodeEvictionNodePoolSettings")
    def node_eviction_node_pool_settings(self) -> Optional[pulumi.Input['NodePoolNodeEvictionNodePoolSettingsArgs']]:
        return pulumi.get(self, "node_eviction_node_pool_settings")

    @node_eviction_node_pool_settings.setter
    def node_eviction_node_pool_settings(self, value: Optional[pulumi.Input['NodePoolNodeEvictionNodePoolSettingsArgs']]):
        pulumi.set(self, "node_eviction_node_pool_settings", value)

    @property
    @pulumi.getter(name="nodeImageId")
    def node_image_id(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""", DeprecationWarning)
        pulumi.log.warn("""node_image_id is deprecated: The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""")

        return pulumi.get(self, "node_image_id")

    @node_image_id.setter
    def node_image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_image_id", value)

    @property
    @pulumi.getter(name="nodeImageName")
    def node_image_name(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""", DeprecationWarning)
        pulumi.log.warn("""node_image_name is deprecated: The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""")

        return pulumi.get(self, "node_image_name")

    @node_image_name.setter
    def node_image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_image_name", value)

    @property
    @pulumi.getter(name="nodeMetadata")
    def node_metadata(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "node_metadata")

    @node_metadata.setter
    def node_metadata(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "node_metadata", value)

    @property
    @pulumi.getter(name="nodePoolCyclingDetails")
    def node_pool_cycling_details(self) -> Optional[pulumi.Input['NodePoolNodePoolCyclingDetailsArgs']]:
        return pulumi.get(self, "node_pool_cycling_details")

    @node_pool_cycling_details.setter
    def node_pool_cycling_details(self, value: Optional[pulumi.Input['NodePoolNodePoolCyclingDetailsArgs']]):
        pulumi.set(self, "node_pool_cycling_details", value)

    @property
    @pulumi.getter(name="nodeShapeConfig")
    def node_shape_config(self) -> Optional[pulumi.Input['NodePoolNodeShapeConfigArgs']]:
        return pulumi.get(self, "node_shape_config")

    @node_shape_config.setter
    def node_shape_config(self, value: Optional[pulumi.Input['NodePoolNodeShapeConfigArgs']]):
        pulumi.set(self, "node_shape_config", value)

    @property
    @pulumi.getter(name="nodeSourceDetails")
    def node_source_details(self) -> Optional[pulumi.Input['NodePoolNodeSourceDetailsArgs']]:
        return pulumi.get(self, "node_source_details")

    @node_source_details.setter
    def node_source_details(self, value: Optional[pulumi.Input['NodePoolNodeSourceDetailsArgs']]):
        pulumi.set(self, "node_source_details", value)

    @property
    @pulumi.getter(name="quantityPerSubnet")
    def quantity_per_subnet(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quantity_per_subnet")

    @quantity_per_subnet.setter
    def quantity_per_subnet(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity_per_subnet", value)

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_public_key")

    @ssh_public_key.setter
    def ssh_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)


@pulumi.input_type
class _NodePoolState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 initial_node_labels: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolInitialNodeLabelArgs']]]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config_details: Optional[pulumi.Input['NodePoolNodeConfigDetailsArgs']] = None,
                 node_eviction_node_pool_settings: Optional[pulumi.Input['NodePoolNodeEvictionNodePoolSettingsArgs']] = None,
                 node_image_id: Optional[pulumi.Input[str]] = None,
                 node_image_name: Optional[pulumi.Input[str]] = None,
                 node_metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 node_pool_cycling_details: Optional[pulumi.Input['NodePoolNodePoolCyclingDetailsArgs']] = None,
                 node_shape: Optional[pulumi.Input[str]] = None,
                 node_shape_config: Optional[pulumi.Input['NodePoolNodeShapeConfigArgs']] = None,
                 node_source_details: Optional[pulumi.Input['NodePoolNodeSourceDetailsArgs']] = None,
                 node_sources: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeSourceArgs']]]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeArgs']]]] = None,
                 quantity_per_subnet: Optional[pulumi.Input[int]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering NodePool resources.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if initial_node_labels is not None:
            pulumi.set(__self__, "initial_node_labels", initial_node_labels)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_config_details is not None:
            pulumi.set(__self__, "node_config_details", node_config_details)
        if node_eviction_node_pool_settings is not None:
            pulumi.set(__self__, "node_eviction_node_pool_settings", node_eviction_node_pool_settings)
        if node_image_id is not None:
            warnings.warn("""The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""", DeprecationWarning)
            pulumi.log.warn("""node_image_id is deprecated: The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""")
        if node_image_id is not None:
            pulumi.set(__self__, "node_image_id", node_image_id)
        if node_image_name is not None:
            warnings.warn("""The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""", DeprecationWarning)
            pulumi.log.warn("""node_image_name is deprecated: The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""")
        if node_image_name is not None:
            pulumi.set(__self__, "node_image_name", node_image_name)
        if node_metadata is not None:
            pulumi.set(__self__, "node_metadata", node_metadata)
        if node_pool_cycling_details is not None:
            pulumi.set(__self__, "node_pool_cycling_details", node_pool_cycling_details)
        if node_shape is not None:
            pulumi.set(__self__, "node_shape", node_shape)
        if node_shape_config is not None:
            pulumi.set(__self__, "node_shape_config", node_shape_config)
        if node_source_details is not None:
            pulumi.set(__self__, "node_source_details", node_source_details)
        if node_sources is not None:
            pulumi.set(__self__, "node_sources", node_sources)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if quantity_per_subnet is not None:
            pulumi.set(__self__, "quantity_per_subnet", quantity_per_subnet)
        if ssh_public_key is not None:
            pulumi.set(__self__, "ssh_public_key", ssh_public_key)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="initialNodeLabels")
    def initial_node_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolInitialNodeLabelArgs']]]]:
        return pulumi.get(self, "initial_node_labels")

    @initial_node_labels.setter
    def initial_node_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolInitialNodeLabelArgs']]]]):
        pulumi.set(self, "initial_node_labels", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeConfigDetails")
    def node_config_details(self) -> Optional[pulumi.Input['NodePoolNodeConfigDetailsArgs']]:
        return pulumi.get(self, "node_config_details")

    @node_config_details.setter
    def node_config_details(self, value: Optional[pulumi.Input['NodePoolNodeConfigDetailsArgs']]):
        pulumi.set(self, "node_config_details", value)

    @property
    @pulumi.getter(name="nodeEvictionNodePoolSettings")
    def node_eviction_node_pool_settings(self) -> Optional[pulumi.Input['NodePoolNodeEvictionNodePoolSettingsArgs']]:
        return pulumi.get(self, "node_eviction_node_pool_settings")

    @node_eviction_node_pool_settings.setter
    def node_eviction_node_pool_settings(self, value: Optional[pulumi.Input['NodePoolNodeEvictionNodePoolSettingsArgs']]):
        pulumi.set(self, "node_eviction_node_pool_settings", value)

    @property
    @pulumi.getter(name="nodeImageId")
    def node_image_id(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""", DeprecationWarning)
        pulumi.log.warn("""node_image_id is deprecated: The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""")

        return pulumi.get(self, "node_image_id")

    @node_image_id.setter
    def node_image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_image_id", value)

    @property
    @pulumi.getter(name="nodeImageName")
    def node_image_name(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""", DeprecationWarning)
        pulumi.log.warn("""node_image_name is deprecated: The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""")

        return pulumi.get(self, "node_image_name")

    @node_image_name.setter
    def node_image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_image_name", value)

    @property
    @pulumi.getter(name="nodeMetadata")
    def node_metadata(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "node_metadata")

    @node_metadata.setter
    def node_metadata(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "node_metadata", value)

    @property
    @pulumi.getter(name="nodePoolCyclingDetails")
    def node_pool_cycling_details(self) -> Optional[pulumi.Input['NodePoolNodePoolCyclingDetailsArgs']]:
        return pulumi.get(self, "node_pool_cycling_details")

    @node_pool_cycling_details.setter
    def node_pool_cycling_details(self, value: Optional[pulumi.Input['NodePoolNodePoolCyclingDetailsArgs']]):
        pulumi.set(self, "node_pool_cycling_details", value)

    @property
    @pulumi.getter(name="nodeShape")
    def node_shape(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_shape")

    @node_shape.setter
    def node_shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_shape", value)

    @property
    @pulumi.getter(name="nodeShapeConfig")
    def node_shape_config(self) -> Optional[pulumi.Input['NodePoolNodeShapeConfigArgs']]:
        return pulumi.get(self, "node_shape_config")

    @node_shape_config.setter
    def node_shape_config(self, value: Optional[pulumi.Input['NodePoolNodeShapeConfigArgs']]):
        pulumi.set(self, "node_shape_config", value)

    @property
    @pulumi.getter(name="nodeSourceDetails")
    def node_source_details(self) -> Optional[pulumi.Input['NodePoolNodeSourceDetailsArgs']]:
        return pulumi.get(self, "node_source_details")

    @node_source_details.setter
    def node_source_details(self, value: Optional[pulumi.Input['NodePoolNodeSourceDetailsArgs']]):
        pulumi.set(self, "node_source_details", value)

    @property
    @pulumi.getter(name="nodeSources")
    def node_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeSourceArgs']]]]:
        return pulumi.get(self, "node_sources")

    @node_sources.setter
    def node_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeSourceArgs']]]]):
        pulumi.set(self, "node_sources", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeArgs']]]]:
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter(name="quantityPerSubnet")
    def quantity_per_subnet(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quantity_per_subnet")

    @quantity_per_subnet.setter
    def quantity_per_subnet(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity_per_subnet", value)

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_public_key")

    @ssh_public_key.setter
    def ssh_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)


class NodePool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 initial_node_labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolInitialNodeLabelArgs']]]]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config_details: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeConfigDetailsArgs']]] = None,
                 node_eviction_node_pool_settings: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeEvictionNodePoolSettingsArgs']]] = None,
                 node_image_id: Optional[pulumi.Input[str]] = None,
                 node_image_name: Optional[pulumi.Input[str]] = None,
                 node_metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 node_pool_cycling_details: Optional[pulumi.Input[pulumi.InputType['NodePoolNodePoolCyclingDetailsArgs']]] = None,
                 node_shape: Optional[pulumi.Input[str]] = None,
                 node_shape_config: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeShapeConfigArgs']]] = None,
                 node_source_details: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeSourceDetailsArgs']]] = None,
                 quantity_per_subnet: Optional[pulumi.Input[int]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a NodePool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NodePoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NodePool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NodePoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NodePoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 initial_node_labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolInitialNodeLabelArgs']]]]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config_details: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeConfigDetailsArgs']]] = None,
                 node_eviction_node_pool_settings: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeEvictionNodePoolSettingsArgs']]] = None,
                 node_image_id: Optional[pulumi.Input[str]] = None,
                 node_image_name: Optional[pulumi.Input[str]] = None,
                 node_metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 node_pool_cycling_details: Optional[pulumi.Input[pulumi.InputType['NodePoolNodePoolCyclingDetailsArgs']]] = None,
                 node_shape: Optional[pulumi.Input[str]] = None,
                 node_shape_config: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeShapeConfigArgs']]] = None,
                 node_source_details: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeSourceDetailsArgs']]] = None,
                 quantity_per_subnet: Optional[pulumi.Input[int]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NodePoolArgs.__new__(NodePoolArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["initial_node_labels"] = initial_node_labels
            __props__.__dict__["kubernetes_version"] = kubernetes_version
            __props__.__dict__["name"] = name
            __props__.__dict__["node_config_details"] = node_config_details
            __props__.__dict__["node_eviction_node_pool_settings"] = node_eviction_node_pool_settings
            __props__.__dict__["node_image_id"] = node_image_id
            __props__.__dict__["node_image_name"] = node_image_name
            __props__.__dict__["node_metadata"] = node_metadata
            __props__.__dict__["node_pool_cycling_details"] = node_pool_cycling_details
            if node_shape is None and not opts.urn:
                raise TypeError("Missing required property 'node_shape'")
            __props__.__dict__["node_shape"] = node_shape
            __props__.__dict__["node_shape_config"] = node_shape_config
            __props__.__dict__["node_source_details"] = node_source_details
            __props__.__dict__["quantity_per_subnet"] = quantity_per_subnet
            __props__.__dict__["ssh_public_key"] = ssh_public_key
            __props__.__dict__["subnet_ids"] = subnet_ids
            __props__.__dict__["lifecycle_details"] = None
            __props__.__dict__["node_sources"] = None
            __props__.__dict__["nodes"] = None
            __props__.__dict__["state"] = None
        super(NodePool, __self__).__init__(
            'oci:ContainerEngine/nodePool:NodePool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            initial_node_labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolInitialNodeLabelArgs']]]]] = None,
            kubernetes_version: Optional[pulumi.Input[str]] = None,
            lifecycle_details: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_config_details: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeConfigDetailsArgs']]] = None,
            node_eviction_node_pool_settings: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeEvictionNodePoolSettingsArgs']]] = None,
            node_image_id: Optional[pulumi.Input[str]] = None,
            node_image_name: Optional[pulumi.Input[str]] = None,
            node_metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            node_pool_cycling_details: Optional[pulumi.Input[pulumi.InputType['NodePoolNodePoolCyclingDetailsArgs']]] = None,
            node_shape: Optional[pulumi.Input[str]] = None,
            node_shape_config: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeShapeConfigArgs']]] = None,
            node_source_details: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeSourceDetailsArgs']]] = None,
            node_sources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolNodeSourceArgs']]]]] = None,
            nodes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolNodeArgs']]]]] = None,
            quantity_per_subnet: Optional[pulumi.Input[int]] = None,
            ssh_public_key: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'NodePool':
        """
        Get an existing NodePool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NodePoolState.__new__(_NodePoolState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["initial_node_labels"] = initial_node_labels
        __props__.__dict__["kubernetes_version"] = kubernetes_version
        __props__.__dict__["lifecycle_details"] = lifecycle_details
        __props__.__dict__["name"] = name
        __props__.__dict__["node_config_details"] = node_config_details
        __props__.__dict__["node_eviction_node_pool_settings"] = node_eviction_node_pool_settings
        __props__.__dict__["node_image_id"] = node_image_id
        __props__.__dict__["node_image_name"] = node_image_name
        __props__.__dict__["node_metadata"] = node_metadata
        __props__.__dict__["node_pool_cycling_details"] = node_pool_cycling_details
        __props__.__dict__["node_shape"] = node_shape
        __props__.__dict__["node_shape_config"] = node_shape_config
        __props__.__dict__["node_source_details"] = node_source_details
        __props__.__dict__["node_sources"] = node_sources
        __props__.__dict__["nodes"] = nodes
        __props__.__dict__["quantity_per_subnet"] = quantity_per_subnet
        __props__.__dict__["ssh_public_key"] = ssh_public_key
        __props__.__dict__["state"] = state
        __props__.__dict__["subnet_ids"] = subnet_ids
        return NodePool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="initialNodeLabels")
    def initial_node_labels(self) -> pulumi.Output[Optional[Sequence['outputs.NodePoolInitialNodeLabel']]]:
        return pulumi.get(self, "initial_node_labels")

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "kubernetes_version")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeConfigDetails")
    def node_config_details(self) -> pulumi.Output[Optional['outputs.NodePoolNodeConfigDetails']]:
        return pulumi.get(self, "node_config_details")

    @property
    @pulumi.getter(name="nodeEvictionNodePoolSettings")
    def node_eviction_node_pool_settings(self) -> pulumi.Output[Optional['outputs.NodePoolNodeEvictionNodePoolSettings']]:
        return pulumi.get(self, "node_eviction_node_pool_settings")

    @property
    @pulumi.getter(name="nodeImageId")
    def node_image_id(self) -> pulumi.Output[Optional[str]]:
        warnings.warn("""The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""", DeprecationWarning)
        pulumi.log.warn("""node_image_id is deprecated: The 'node_image_id' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""")

        return pulumi.get(self, "node_image_id")

    @property
    @pulumi.getter(name="nodeImageName")
    def node_image_name(self) -> pulumi.Output[Optional[str]]:
        warnings.warn("""The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""", DeprecationWarning)
        pulumi.log.warn("""node_image_name is deprecated: The 'node_image_name' field has been deprecated. Please use 'node_source_details' instead. If both fields are specified, then 'node_source_details' will be used.""")

        return pulumi.get(self, "node_image_name")

    @property
    @pulumi.getter(name="nodeMetadata")
    def node_metadata(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "node_metadata")

    @property
    @pulumi.getter(name="nodePoolCyclingDetails")
    def node_pool_cycling_details(self) -> pulumi.Output[Optional['outputs.NodePoolNodePoolCyclingDetails']]:
        return pulumi.get(self, "node_pool_cycling_details")

    @property
    @pulumi.getter(name="nodeShape")
    def node_shape(self) -> pulumi.Output[str]:
        return pulumi.get(self, "node_shape")

    @property
    @pulumi.getter(name="nodeShapeConfig")
    def node_shape_config(self) -> pulumi.Output[Optional['outputs.NodePoolNodeShapeConfig']]:
        return pulumi.get(self, "node_shape_config")

    @property
    @pulumi.getter(name="nodeSourceDetails")
    def node_source_details(self) -> pulumi.Output[Optional['outputs.NodePoolNodeSourceDetails']]:
        return pulumi.get(self, "node_source_details")

    @property
    @pulumi.getter(name="nodeSources")
    def node_sources(self) -> pulumi.Output[Optional[Sequence['outputs.NodePoolNodeSource']]]:
        return pulumi.get(self, "node_sources")

    @property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Optional[Sequence['outputs.NodePoolNode']]]:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="quantityPerSubnet")
    def quantity_per_subnet(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "quantity_per_subnet")

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ssh_public_key")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "subnet_ids")

