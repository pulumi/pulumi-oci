# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetContainerInstanceContainerResult',
    'GetContainerInstanceContainerHealthCheckResult',
    'GetContainerInstanceContainerHealthCheckHeaderResult',
    'GetContainerInstanceContainerResourceConfigResult',
    'GetContainerInstanceContainerSecurityContextResult',
    'GetContainerInstanceContainerVolumeMountResult',
    'GetContainerInstanceDnsConfigResult',
    'GetContainerInstanceImagePullSecretResult',
    'GetContainerInstanceShapeConfigResult',
    'GetContainerInstanceShapeItemResult',
    'GetContainerInstanceShapeItemMemoryOptionResult',
    'GetContainerInstanceShapeItemNetworkingBandwidthOptionResult',
    'GetContainerInstanceShapeItemOcpuOptionResult',
    'GetContainerInstanceShapesContainerInstanceShapeCollectionResult',
    'GetContainerInstanceShapesContainerInstanceShapeCollectionItemResult',
    'GetContainerInstanceShapesContainerInstanceShapeCollectionItemMemoryOptionResult',
    'GetContainerInstanceShapesContainerInstanceShapeCollectionItemNetworkingBandwidthOptionResult',
    'GetContainerInstanceShapesContainerInstanceShapeCollectionItemOcpuOptionResult',
    'GetContainerInstanceShapesFilterResult',
    'GetContainerInstanceVnicResult',
    'GetContainerInstanceVolumeResult',
    'GetContainerInstanceVolumeConfigResult',
    'GetContainerInstancesContainerInstanceCollectionResult',
    'GetContainerInstancesContainerInstanceCollectionItemResult',
    'GetContainerInstancesContainerInstanceCollectionItemContainerResult',
    'GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckResult',
    'GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeaderResult',
    'GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfigResult',
    'GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContextResult',
    'GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMountResult',
    'GetContainerInstancesContainerInstanceCollectionItemDnsConfigResult',
    'GetContainerInstancesContainerInstanceCollectionItemImagePullSecretResult',
    'GetContainerInstancesContainerInstanceCollectionItemShapeConfigResult',
    'GetContainerInstancesContainerInstanceCollectionItemVnicResult',
    'GetContainerInstancesContainerInstanceCollectionItemVolumeResult',
    'GetContainerInstancesContainerInstanceCollectionItemVolumeConfigResult',
    'GetContainerInstancesFilterResult',
]

@pulumi.output_type
class GetContainerInstanceContainerResult(dict):
    def __init__(__self__, *,
                 arguments: Optional[Sequence[str]] = None,
                 availability_domain: Optional[str] = None,
                 commands: Optional[Sequence[str]] = None,
                 compartment_id: Optional[str] = None,
                 container_id: Optional[str] = None,
                 container_instance_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 exit_code: Optional[int] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 health_checks: Optional[Sequence['outputs.GetContainerInstanceContainerHealthCheckResult']] = None,
                 image_url: Optional[str] = None,
                 is_resource_principal_disabled: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 resource_configs: Optional[Sequence['outputs.GetContainerInstanceContainerResourceConfigResult']] = None,
                 security_contexts: Optional[Sequence['outputs.GetContainerInstanceContainerSecurityContextResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_terminated: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 volume_mounts: Optional[Sequence['outputs.GetContainerInstanceContainerVolumeMountResult']] = None,
                 working_directory: Optional[str] = None):
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if container_instance_id is not None:
            pulumi.set(__self__, "container_instance_id", container_instance_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if exit_code is not None:
            pulumi.set(__self__, "exit_code", exit_code)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if is_resource_principal_disabled is not None:
            pulumi.set(__self__, "is_resource_principal_disabled", is_resource_principal_disabled)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if resource_configs is not None:
            pulumi.set(__self__, "resource_configs", resource_configs)
        if security_contexts is not None:
            pulumi.set(__self__, "security_contexts", security_contexts)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_terminated is not None:
            pulumi.set(__self__, "time_terminated", time_terminated)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> Optional[str]:
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="containerInstanceId")
    def container_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "container_instance_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> Optional[int]:
        return pulumi.get(self, "exit_code")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[Sequence['outputs.GetContainerInstanceContainerHealthCheckResult']]:
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="isResourcePrincipalDisabled")
    def is_resource_principal_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_resource_principal_disabled")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="resourceConfigs")
    def resource_configs(self) -> Optional[Sequence['outputs.GetContainerInstanceContainerResourceConfigResult']]:
        return pulumi.get(self, "resource_configs")

    @property
    @pulumi.getter(name="securityContexts")
    def security_contexts(self) -> Optional[Sequence['outputs.GetContainerInstanceContainerSecurityContextResult']]:
        return pulumi.get(self, "security_contexts")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeTerminated")
    def time_terminated(self) -> Optional[str]:
        return pulumi.get(self, "time_terminated")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.GetContainerInstanceContainerVolumeMountResult']]:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetContainerInstanceContainerHealthCheckResult(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[str]] = None,
                 failure_action: Optional[str] = None,
                 failure_threshold: Optional[int] = None,
                 headers: Optional[Sequence['outputs.GetContainerInstanceContainerHealthCheckHeaderResult']] = None,
                 health_check_type: Optional[str] = None,
                 initial_delay_in_seconds: Optional[int] = None,
                 interval_in_seconds: Optional[int] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 port: Optional[int] = None,
                 status: Optional[str] = None,
                 status_details: Optional[str] = None,
                 success_threshold: Optional[int] = None,
                 timeout_in_seconds: Optional[int] = None):
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if failure_action is not None:
            pulumi.set(__self__, "failure_action", failure_action)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)
        if initial_delay_in_seconds is not None:
            pulumi.set(__self__, "initial_delay_in_seconds", initial_delay_in_seconds)
        if interval_in_seconds is not None:
            pulumi.set(__self__, "interval_in_seconds", interval_in_seconds)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter(name="failureAction")
    def failure_action(self) -> Optional[str]:
        return pulumi.get(self, "failure_action")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.GetContainerInstanceContainerHealthCheckHeaderResult']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[str]:
        return pulumi.get(self, "health_check_type")

    @property
    @pulumi.getter(name="initialDelayInSeconds")
    def initial_delay_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_in_seconds")

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "interval_in_seconds")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[str]:
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_seconds")


@pulumi.output_type
class GetContainerInstanceContainerHealthCheckHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetContainerInstanceContainerResourceConfigResult(dict):
    def __init__(__self__, *,
                 memory_limit_in_gbs: Optional[float] = None,
                 vcpus_limit: Optional[float] = None):
        if memory_limit_in_gbs is not None:
            pulumi.set(__self__, "memory_limit_in_gbs", memory_limit_in_gbs)
        if vcpus_limit is not None:
            pulumi.set(__self__, "vcpus_limit", vcpus_limit)

    @property
    @pulumi.getter(name="memoryLimitInGbs")
    def memory_limit_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_limit_in_gbs")

    @property
    @pulumi.getter(name="vcpusLimit")
    def vcpus_limit(self) -> Optional[float]:
        return pulumi.get(self, "vcpus_limit")


@pulumi.output_type
class GetContainerInstanceContainerSecurityContextResult(dict):
    def __init__(__self__, *,
                 is_non_root_user_check_enabled: Optional[bool] = None,
                 is_root_file_system_readonly: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_user: Optional[int] = None,
                 security_context_type: Optional[str] = None):
        if is_non_root_user_check_enabled is not None:
            pulumi.set(__self__, "is_non_root_user_check_enabled", is_non_root_user_check_enabled)
        if is_root_file_system_readonly is not None:
            pulumi.set(__self__, "is_root_file_system_readonly", is_root_file_system_readonly)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if security_context_type is not None:
            pulumi.set(__self__, "security_context_type", security_context_type)

    @property
    @pulumi.getter(name="isNonRootUserCheckEnabled")
    def is_non_root_user_check_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_non_root_user_check_enabled")

    @property
    @pulumi.getter(name="isRootFileSystemReadonly")
    def is_root_file_system_readonly(self) -> Optional[bool]:
        return pulumi.get(self, "is_root_file_system_readonly")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="securityContextType")
    def security_context_type(self) -> Optional[str]:
        return pulumi.get(self, "security_context_type")


@pulumi.output_type
class GetContainerInstanceContainerVolumeMountResult(dict):
    def __init__(__self__, *,
                 is_read_only: Optional[bool] = None,
                 mount_path: Optional[str] = None,
                 partition: Optional[int] = None,
                 sub_path: Optional[str] = None,
                 volume_name: Optional[str] = None):
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_read_only")

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[str]:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")


@pulumi.output_type
class GetContainerInstanceDnsConfigResult(dict):
    def __init__(__self__, *,
                 nameservers: Optional[Sequence[str]] = None,
                 options: Optional[Sequence[str]] = None,
                 searches: Optional[Sequence[str]] = None):
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if searches is not None:
            pulumi.set(__self__, "searches", searches)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def searches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "searches")


@pulumi.output_type
class GetContainerInstanceImagePullSecretResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 registry_endpoint: Optional[str] = None,
                 secret_id: Optional[str] = None,
                 secret_type: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if registry_endpoint is not None:
            pulumi.set(__self__, "registry_endpoint", registry_endpoint)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="registryEndpoint")
    def registry_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "registry_endpoint")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[str]:
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetContainerInstanceShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 networking_bandwidth_in_gbps: Optional[float] = None,
                 ocpus: Optional[float] = None,
                 processor_description: Optional[str] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if networking_bandwidth_in_gbps is not None:
            pulumi.set(__self__, "networking_bandwidth_in_gbps", networking_bandwidth_in_gbps)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if processor_description is not None:
            pulumi.set(__self__, "processor_description", processor_description)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter(name="networkingBandwidthInGbps")
    def networking_bandwidth_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "networking_bandwidth_in_gbps")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter(name="processorDescription")
    def processor_description(self) -> Optional[str]:
        return pulumi.get(self, "processor_description")


@pulumi.output_type
class GetContainerInstanceShapeItemResult(dict):
    def __init__(__self__, *,
                 memory_options: Optional[Sequence['outputs.GetContainerInstanceShapeItemMemoryOptionResult']] = None,
                 name: Optional[str] = None,
                 networking_bandwidth_options: Optional[Sequence['outputs.GetContainerInstanceShapeItemNetworkingBandwidthOptionResult']] = None,
                 ocpu_options: Optional[Sequence['outputs.GetContainerInstanceShapeItemOcpuOptionResult']] = None,
                 processor_description: Optional[str] = None):
        if memory_options is not None:
            pulumi.set(__self__, "memory_options", memory_options)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networking_bandwidth_options is not None:
            pulumi.set(__self__, "networking_bandwidth_options", networking_bandwidth_options)
        if ocpu_options is not None:
            pulumi.set(__self__, "ocpu_options", ocpu_options)
        if processor_description is not None:
            pulumi.set(__self__, "processor_description", processor_description)

    @property
    @pulumi.getter(name="memoryOptions")
    def memory_options(self) -> Optional[Sequence['outputs.GetContainerInstanceShapeItemMemoryOptionResult']]:
        return pulumi.get(self, "memory_options")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkingBandwidthOptions")
    def networking_bandwidth_options(self) -> Optional[Sequence['outputs.GetContainerInstanceShapeItemNetworkingBandwidthOptionResult']]:
        return pulumi.get(self, "networking_bandwidth_options")

    @property
    @pulumi.getter(name="ocpuOptions")
    def ocpu_options(self) -> Optional[Sequence['outputs.GetContainerInstanceShapeItemOcpuOptionResult']]:
        return pulumi.get(self, "ocpu_options")

    @property
    @pulumi.getter(name="processorDescription")
    def processor_description(self) -> Optional[str]:
        return pulumi.get(self, "processor_description")


@pulumi.output_type
class GetContainerInstanceShapeItemMemoryOptionResult(dict):
    def __init__(__self__, *,
                 default_per_ocpu_in_gbs: Optional[float] = None,
                 max_in_gbs: Optional[float] = None,
                 max_per_ocpu_in_gbs: Optional[float] = None,
                 min_in_gbs: Optional[float] = None,
                 min_per_ocpu_in_gbs: Optional[float] = None):
        if default_per_ocpu_in_gbs is not None:
            pulumi.set(__self__, "default_per_ocpu_in_gbs", default_per_ocpu_in_gbs)
        if max_in_gbs is not None:
            pulumi.set(__self__, "max_in_gbs", max_in_gbs)
        if max_per_ocpu_in_gbs is not None:
            pulumi.set(__self__, "max_per_ocpu_in_gbs", max_per_ocpu_in_gbs)
        if min_in_gbs is not None:
            pulumi.set(__self__, "min_in_gbs", min_in_gbs)
        if min_per_ocpu_in_gbs is not None:
            pulumi.set(__self__, "min_per_ocpu_in_gbs", min_per_ocpu_in_gbs)

    @property
    @pulumi.getter(name="defaultPerOcpuInGbs")
    def default_per_ocpu_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "default_per_ocpu_in_gbs")

    @property
    @pulumi.getter(name="maxInGbs")
    def max_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "max_in_gbs")

    @property
    @pulumi.getter(name="maxPerOcpuInGbs")
    def max_per_ocpu_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "max_per_ocpu_in_gbs")

    @property
    @pulumi.getter(name="minInGbs")
    def min_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "min_in_gbs")

    @property
    @pulumi.getter(name="minPerOcpuInGbs")
    def min_per_ocpu_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "min_per_ocpu_in_gbs")


@pulumi.output_type
class GetContainerInstanceShapeItemNetworkingBandwidthOptionResult(dict):
    def __init__(__self__, *,
                 default_per_ocpu_in_gbps: Optional[float] = None,
                 max_in_gbps: Optional[float] = None,
                 min_in_gbps: Optional[float] = None):
        if default_per_ocpu_in_gbps is not None:
            pulumi.set(__self__, "default_per_ocpu_in_gbps", default_per_ocpu_in_gbps)
        if max_in_gbps is not None:
            pulumi.set(__self__, "max_in_gbps", max_in_gbps)
        if min_in_gbps is not None:
            pulumi.set(__self__, "min_in_gbps", min_in_gbps)

    @property
    @pulumi.getter(name="defaultPerOcpuInGbps")
    def default_per_ocpu_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "default_per_ocpu_in_gbps")

    @property
    @pulumi.getter(name="maxInGbps")
    def max_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "max_in_gbps")

    @property
    @pulumi.getter(name="minInGbps")
    def min_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "min_in_gbps")


@pulumi.output_type
class GetContainerInstanceShapeItemOcpuOptionResult(dict):
    def __init__(__self__, *,
                 max: Optional[float] = None,
                 min: Optional[float] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[float]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[float]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetContainerInstanceShapesContainerInstanceShapeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetContainerInstanceShapesContainerInstanceShapeCollectionItemResult(dict):
    def __init__(__self__, *,
                 memory_options: Optional[Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemMemoryOptionResult']] = None,
                 name: Optional[str] = None,
                 networking_bandwidth_options: Optional[Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemNetworkingBandwidthOptionResult']] = None,
                 ocpu_options: Optional[Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemOcpuOptionResult']] = None,
                 processor_description: Optional[str] = None):
        if memory_options is not None:
            pulumi.set(__self__, "memory_options", memory_options)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networking_bandwidth_options is not None:
            pulumi.set(__self__, "networking_bandwidth_options", networking_bandwidth_options)
        if ocpu_options is not None:
            pulumi.set(__self__, "ocpu_options", ocpu_options)
        if processor_description is not None:
            pulumi.set(__self__, "processor_description", processor_description)

    @property
    @pulumi.getter(name="memoryOptions")
    def memory_options(self) -> Optional[Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemMemoryOptionResult']]:
        return pulumi.get(self, "memory_options")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkingBandwidthOptions")
    def networking_bandwidth_options(self) -> Optional[Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemNetworkingBandwidthOptionResult']]:
        return pulumi.get(self, "networking_bandwidth_options")

    @property
    @pulumi.getter(name="ocpuOptions")
    def ocpu_options(self) -> Optional[Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemOcpuOptionResult']]:
        return pulumi.get(self, "ocpu_options")

    @property
    @pulumi.getter(name="processorDescription")
    def processor_description(self) -> Optional[str]:
        return pulumi.get(self, "processor_description")


@pulumi.output_type
class GetContainerInstanceShapesContainerInstanceShapeCollectionItemMemoryOptionResult(dict):
    def __init__(__self__, *,
                 default_per_ocpu_in_gbs: Optional[float] = None,
                 max_in_gbs: Optional[float] = None,
                 max_per_ocpu_in_gbs: Optional[float] = None,
                 min_in_gbs: Optional[float] = None,
                 min_per_ocpu_in_gbs: Optional[float] = None):
        if default_per_ocpu_in_gbs is not None:
            pulumi.set(__self__, "default_per_ocpu_in_gbs", default_per_ocpu_in_gbs)
        if max_in_gbs is not None:
            pulumi.set(__self__, "max_in_gbs", max_in_gbs)
        if max_per_ocpu_in_gbs is not None:
            pulumi.set(__self__, "max_per_ocpu_in_gbs", max_per_ocpu_in_gbs)
        if min_in_gbs is not None:
            pulumi.set(__self__, "min_in_gbs", min_in_gbs)
        if min_per_ocpu_in_gbs is not None:
            pulumi.set(__self__, "min_per_ocpu_in_gbs", min_per_ocpu_in_gbs)

    @property
    @pulumi.getter(name="defaultPerOcpuInGbs")
    def default_per_ocpu_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "default_per_ocpu_in_gbs")

    @property
    @pulumi.getter(name="maxInGbs")
    def max_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "max_in_gbs")

    @property
    @pulumi.getter(name="maxPerOcpuInGbs")
    def max_per_ocpu_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "max_per_ocpu_in_gbs")

    @property
    @pulumi.getter(name="minInGbs")
    def min_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "min_in_gbs")

    @property
    @pulumi.getter(name="minPerOcpuInGbs")
    def min_per_ocpu_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "min_per_ocpu_in_gbs")


@pulumi.output_type
class GetContainerInstanceShapesContainerInstanceShapeCollectionItemNetworkingBandwidthOptionResult(dict):
    def __init__(__self__, *,
                 default_per_ocpu_in_gbps: Optional[float] = None,
                 max_in_gbps: Optional[float] = None,
                 min_in_gbps: Optional[float] = None):
        if default_per_ocpu_in_gbps is not None:
            pulumi.set(__self__, "default_per_ocpu_in_gbps", default_per_ocpu_in_gbps)
        if max_in_gbps is not None:
            pulumi.set(__self__, "max_in_gbps", max_in_gbps)
        if min_in_gbps is not None:
            pulumi.set(__self__, "min_in_gbps", min_in_gbps)

    @property
    @pulumi.getter(name="defaultPerOcpuInGbps")
    def default_per_ocpu_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "default_per_ocpu_in_gbps")

    @property
    @pulumi.getter(name="maxInGbps")
    def max_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "max_in_gbps")

    @property
    @pulumi.getter(name="minInGbps")
    def min_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "min_in_gbps")


@pulumi.output_type
class GetContainerInstanceShapesContainerInstanceShapeCollectionItemOcpuOptionResult(dict):
    def __init__(__self__, *,
                 max: Optional[float] = None,
                 min: Optional[float] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[float]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[float]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetContainerInstanceShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetContainerInstanceVnicResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 is_public_ip_assigned: Optional[bool] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vnic_id: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if is_public_ip_assigned is not None:
            pulumi.set(__self__, "is_public_ip_assigned", is_public_ip_assigned)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vnic_id is not None:
            pulumi.set(__self__, "vnic_id", vnic_id)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="isPublicIpAssigned")
    def is_public_ip_assigned(self) -> Optional[bool]:
        return pulumi.get(self, "is_public_ip_assigned")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vnicId")
    def vnic_id(self) -> Optional[str]:
        return pulumi.get(self, "vnic_id")


@pulumi.output_type
class GetContainerInstanceVolumeResult(dict):
    def __init__(__self__, *,
                 backing_store: Optional[str] = None,
                 configs: Optional[Sequence['outputs.GetContainerInstanceVolumeConfigResult']] = None,
                 name: Optional[str] = None,
                 volume_type: Optional[str] = None):
        if backing_store is not None:
            pulumi.set(__self__, "backing_store", backing_store)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="backingStore")
    def backing_store(self) -> Optional[str]:
        return pulumi.get(self, "backing_store")

    @property
    @pulumi.getter
    def configs(self) -> Optional[Sequence['outputs.GetContainerInstanceVolumeConfigResult']]:
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetContainerInstanceVolumeConfigResult(dict):
    def __init__(__self__, *,
                 data: Optional[str] = None,
                 file_name: Optional[str] = None,
                 path: Optional[str] = None):
        if data is not None:
            pulumi.set(__self__, "data", data)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 container_count: Optional[int] = None,
                 container_restart_policy: Optional[str] = None,
                 containers: Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 dns_configs: Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemDnsConfigResult']] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 graceful_shutdown_timeout_in_seconds: Optional[str] = None,
                 id: Optional[str] = None,
                 image_pull_secrets: Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemImagePullSecretResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemShapeConfigResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 vnics: Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemVnicResult']] = None,
                 volume_count: Optional[int] = None,
                 volumes: Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemVolumeResult']] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if container_count is not None:
            pulumi.set(__self__, "container_count", container_count)
        if container_restart_policy is not None:
            pulumi.set(__self__, "container_restart_policy", container_restart_policy)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dns_configs is not None:
            pulumi.set(__self__, "dns_configs", dns_configs)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if graceful_shutdown_timeout_in_seconds is not None:
            pulumi.set(__self__, "graceful_shutdown_timeout_in_seconds", graceful_shutdown_timeout_in_seconds)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if vnics is not None:
            pulumi.set(__self__, "vnics", vnics)
        if volume_count is not None:
            pulumi.set(__self__, "volume_count", volume_count)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="containerCount")
    def container_count(self) -> Optional[int]:
        return pulumi.get(self, "container_count")

    @property
    @pulumi.getter(name="containerRestartPolicy")
    def container_restart_policy(self) -> Optional[str]:
        return pulumi.get(self, "container_restart_policy")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerResult']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsConfigs")
    def dns_configs(self) -> Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemDnsConfigResult']]:
        return pulumi.get(self, "dns_configs")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="gracefulShutdownTimeoutInSeconds")
    def graceful_shutdown_timeout_in_seconds(self) -> Optional[str]:
        return pulumi.get(self, "graceful_shutdown_timeout_in_seconds")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemImagePullSecretResult']]:
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def vnics(self) -> Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemVnicResult']]:
        return pulumi.get(self, "vnics")

    @property
    @pulumi.getter(name="volumeCount")
    def volume_count(self) -> Optional[int]:
        return pulumi.get(self, "volume_count")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemVolumeResult']]:
        return pulumi.get(self, "volumes")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemContainerResult(dict):
    def __init__(__self__, *,
                 arguments: Optional[Sequence[str]] = None,
                 availability_domain: Optional[str] = None,
                 commands: Optional[Sequence[str]] = None,
                 compartment_id: Optional[str] = None,
                 container_id: Optional[str] = None,
                 container_instance_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 exit_code: Optional[int] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 health_checks: Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckResult']] = None,
                 image_url: Optional[str] = None,
                 is_resource_principal_disabled: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 resource_configs: Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfigResult']] = None,
                 security_contexts: Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContextResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_terminated: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 volume_mounts: Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMountResult']] = None,
                 working_directory: Optional[str] = None):
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if container_instance_id is not None:
            pulumi.set(__self__, "container_instance_id", container_instance_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if exit_code is not None:
            pulumi.set(__self__, "exit_code", exit_code)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if is_resource_principal_disabled is not None:
            pulumi.set(__self__, "is_resource_principal_disabled", is_resource_principal_disabled)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if resource_configs is not None:
            pulumi.set(__self__, "resource_configs", resource_configs)
        if security_contexts is not None:
            pulumi.set(__self__, "security_contexts", security_contexts)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_terminated is not None:
            pulumi.set(__self__, "time_terminated", time_terminated)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> Optional[str]:
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="containerInstanceId")
    def container_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "container_instance_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> Optional[int]:
        return pulumi.get(self, "exit_code")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckResult']]:
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="isResourcePrincipalDisabled")
    def is_resource_principal_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_resource_principal_disabled")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="resourceConfigs")
    def resource_configs(self) -> Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfigResult']]:
        return pulumi.get(self, "resource_configs")

    @property
    @pulumi.getter(name="securityContexts")
    def security_contexts(self) -> Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContextResult']]:
        return pulumi.get(self, "security_contexts")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeTerminated")
    def time_terminated(self) -> Optional[str]:
        return pulumi.get(self, "time_terminated")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMountResult']]:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckResult(dict):
    def __init__(__self__, *,
                 commands: Optional[Sequence[str]] = None,
                 failure_action: Optional[str] = None,
                 failure_threshold: Optional[int] = None,
                 headers: Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeaderResult']] = None,
                 health_check_type: Optional[str] = None,
                 initial_delay_in_seconds: Optional[int] = None,
                 interval_in_seconds: Optional[int] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 port: Optional[int] = None,
                 status: Optional[str] = None,
                 status_details: Optional[str] = None,
                 success_threshold: Optional[int] = None,
                 timeout_in_seconds: Optional[int] = None):
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if failure_action is not None:
            pulumi.set(__self__, "failure_action", failure_action)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)
        if initial_delay_in_seconds is not None:
            pulumi.set(__self__, "initial_delay_in_seconds", initial_delay_in_seconds)
        if interval_in_seconds is not None:
            pulumi.set(__self__, "interval_in_seconds", interval_in_seconds)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter(name="failureAction")
    def failure_action(self) -> Optional[str]:
        return pulumi.get(self, "failure_action")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeaderResult']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[str]:
        return pulumi.get(self, "health_check_type")

    @property
    @pulumi.getter(name="initialDelayInSeconds")
    def initial_delay_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_in_seconds")

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "interval_in_seconds")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[str]:
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_seconds")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfigResult(dict):
    def __init__(__self__, *,
                 memory_limit_in_gbs: Optional[float] = None,
                 vcpus_limit: Optional[float] = None):
        if memory_limit_in_gbs is not None:
            pulumi.set(__self__, "memory_limit_in_gbs", memory_limit_in_gbs)
        if vcpus_limit is not None:
            pulumi.set(__self__, "vcpus_limit", vcpus_limit)

    @property
    @pulumi.getter(name="memoryLimitInGbs")
    def memory_limit_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_limit_in_gbs")

    @property
    @pulumi.getter(name="vcpusLimit")
    def vcpus_limit(self) -> Optional[float]:
        return pulumi.get(self, "vcpus_limit")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContextResult(dict):
    def __init__(__self__, *,
                 is_non_root_user_check_enabled: Optional[bool] = None,
                 is_root_file_system_readonly: Optional[bool] = None,
                 run_as_group: Optional[int] = None,
                 run_as_user: Optional[int] = None,
                 security_context_type: Optional[str] = None):
        if is_non_root_user_check_enabled is not None:
            pulumi.set(__self__, "is_non_root_user_check_enabled", is_non_root_user_check_enabled)
        if is_root_file_system_readonly is not None:
            pulumi.set(__self__, "is_root_file_system_readonly", is_root_file_system_readonly)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if security_context_type is not None:
            pulumi.set(__self__, "security_context_type", security_context_type)

    @property
    @pulumi.getter(name="isNonRootUserCheckEnabled")
    def is_non_root_user_check_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_non_root_user_check_enabled")

    @property
    @pulumi.getter(name="isRootFileSystemReadonly")
    def is_root_file_system_readonly(self) -> Optional[bool]:
        return pulumi.get(self, "is_root_file_system_readonly")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[int]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[int]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="securityContextType")
    def security_context_type(self) -> Optional[str]:
        return pulumi.get(self, "security_context_type")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMountResult(dict):
    def __init__(__self__, *,
                 is_read_only: Optional[bool] = None,
                 mount_path: Optional[str] = None,
                 partition: Optional[int] = None,
                 sub_path: Optional[str] = None,
                 volume_name: Optional[str] = None):
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_read_only")

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[str]:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def partition(self) -> Optional[int]:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[str]:
        return pulumi.get(self, "volume_name")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemDnsConfigResult(dict):
    def __init__(__self__, *,
                 nameservers: Optional[Sequence[str]] = None,
                 options: Optional[Sequence[str]] = None,
                 searches: Optional[Sequence[str]] = None):
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if searches is not None:
            pulumi.set(__self__, "searches", searches)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def searches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "searches")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemImagePullSecretResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 registry_endpoint: Optional[str] = None,
                 secret_id: Optional[str] = None,
                 secret_type: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if registry_endpoint is not None:
            pulumi.set(__self__, "registry_endpoint", registry_endpoint)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="registryEndpoint")
    def registry_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "registry_endpoint")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[str]:
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 networking_bandwidth_in_gbps: Optional[float] = None,
                 ocpus: Optional[float] = None,
                 processor_description: Optional[str] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if networking_bandwidth_in_gbps is not None:
            pulumi.set(__self__, "networking_bandwidth_in_gbps", networking_bandwidth_in_gbps)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if processor_description is not None:
            pulumi.set(__self__, "processor_description", processor_description)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter(name="networkingBandwidthInGbps")
    def networking_bandwidth_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "networking_bandwidth_in_gbps")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter(name="processorDescription")
    def processor_description(self) -> Optional[str]:
        return pulumi.get(self, "processor_description")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemVnicResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 is_public_ip_assigned: Optional[bool] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vnic_id: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if is_public_ip_assigned is not None:
            pulumi.set(__self__, "is_public_ip_assigned", is_public_ip_assigned)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vnic_id is not None:
            pulumi.set(__self__, "vnic_id", vnic_id)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="isPublicIpAssigned")
    def is_public_ip_assigned(self) -> Optional[bool]:
        return pulumi.get(self, "is_public_ip_assigned")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vnicId")
    def vnic_id(self) -> Optional[str]:
        return pulumi.get(self, "vnic_id")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemVolumeResult(dict):
    def __init__(__self__, *,
                 backing_store: Optional[str] = None,
                 configs: Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemVolumeConfigResult']] = None,
                 name: Optional[str] = None,
                 volume_type: Optional[str] = None):
        if backing_store is not None:
            pulumi.set(__self__, "backing_store", backing_store)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="backingStore")
    def backing_store(self) -> Optional[str]:
        return pulumi.get(self, "backing_store")

    @property
    @pulumi.getter
    def configs(self) -> Optional[Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemVolumeConfigResult']]:
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemVolumeConfigResult(dict):
    def __init__(__self__, *,
                 data: Optional[str] = None,
                 file_name: Optional[str] = None,
                 path: Optional[str] = None):
        if data is not None:
            pulumi.set(__self__, "data", data)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetContainerInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


