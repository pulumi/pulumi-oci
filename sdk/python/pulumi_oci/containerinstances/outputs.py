# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetContainerInstanceContainerResult',
    'GetContainerInstanceContainerHealthCheckResult',
    'GetContainerInstanceContainerHealthCheckHeaderResult',
    'GetContainerInstanceContainerResourceConfigResult',
    'GetContainerInstanceContainerSecurityContextResult',
    'GetContainerInstanceContainerVolumeMountResult',
    'GetContainerInstanceDnsConfigResult',
    'GetContainerInstanceImagePullSecretResult',
    'GetContainerInstanceShapeConfigResult',
    'GetContainerInstanceShapeItemResult',
    'GetContainerInstanceShapeItemMemoryOptionResult',
    'GetContainerInstanceShapeItemNetworkingBandwidthOptionResult',
    'GetContainerInstanceShapeItemOcpuOptionResult',
    'GetContainerInstanceShapesContainerInstanceShapeCollectionResult',
    'GetContainerInstanceShapesContainerInstanceShapeCollectionItemResult',
    'GetContainerInstanceShapesContainerInstanceShapeCollectionItemMemoryOptionResult',
    'GetContainerInstanceShapesContainerInstanceShapeCollectionItemNetworkingBandwidthOptionResult',
    'GetContainerInstanceShapesContainerInstanceShapeCollectionItemOcpuOptionResult',
    'GetContainerInstanceShapesFilterResult',
    'GetContainerInstanceVnicResult',
    'GetContainerInstanceVolumeResult',
    'GetContainerInstanceVolumeConfigResult',
    'GetContainerInstancesContainerInstanceCollectionResult',
    'GetContainerInstancesContainerInstanceCollectionItemResult',
    'GetContainerInstancesContainerInstanceCollectionItemContainerResult',
    'GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckResult',
    'GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeaderResult',
    'GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfigResult',
    'GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContextResult',
    'GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMountResult',
    'GetContainerInstancesContainerInstanceCollectionItemDnsConfigResult',
    'GetContainerInstancesContainerInstanceCollectionItemImagePullSecretResult',
    'GetContainerInstancesContainerInstanceCollectionItemShapeConfigResult',
    'GetContainerInstancesContainerInstanceCollectionItemVnicResult',
    'GetContainerInstancesContainerInstanceCollectionItemVolumeResult',
    'GetContainerInstancesContainerInstanceCollectionItemVolumeConfigResult',
    'GetContainerInstancesFilterResult',
]

@pulumi.output_type
class GetContainerInstanceContainerResult(dict):
    def __init__(__self__, *,
                 arguments: Sequence[str],
                 availability_domain: str,
                 commands: Sequence[str],
                 compartment_id: str,
                 container_id: str,
                 container_instance_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 environment_variables: Mapping[str, Any],
                 exit_code: int,
                 fault_domain: str,
                 freeform_tags: Mapping[str, Any],
                 health_checks: Sequence['outputs.GetContainerInstanceContainerHealthCheckResult'],
                 image_url: str,
                 is_resource_principal_disabled: bool,
                 lifecycle_details: str,
                 resource_configs: Sequence['outputs.GetContainerInstanceContainerResourceConfigResult'],
                 security_contexts: Sequence['outputs.GetContainerInstanceContainerSecurityContextResult'],
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_terminated: str,
                 time_updated: str,
                 volume_mounts: Sequence['outputs.GetContainerInstanceContainerVolumeMountResult'],
                 working_directory: str):
        """
        :param str availability_domain: The availability domain to place the container instance.
        :param str compartment_id: The OCID of the compartment.
        :param str container_id: The OCID of the container.
        :param str container_instance_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container instance.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        :param str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        :param str fault_domain: The fault domain to place the container instance.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str lifecycle_details: A message that describes the current state of the container in more detail. Can be used to provide actionable information.
        :param str state: The current state of the container instance.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
        :param str time_created: The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        :param str time_updated: The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        """
        GetContainerInstanceContainerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arguments=arguments,
            availability_domain=availability_domain,
            commands=commands,
            compartment_id=compartment_id,
            container_id=container_id,
            container_instance_id=container_instance_id,
            defined_tags=defined_tags,
            display_name=display_name,
            environment_variables=environment_variables,
            exit_code=exit_code,
            fault_domain=fault_domain,
            freeform_tags=freeform_tags,
            health_checks=health_checks,
            image_url=image_url,
            is_resource_principal_disabled=is_resource_principal_disabled,
            lifecycle_details=lifecycle_details,
            resource_configs=resource_configs,
            security_contexts=security_contexts,
            state=state,
            system_tags=system_tags,
            time_created=time_created,
            time_terminated=time_terminated,
            time_updated=time_updated,
            volume_mounts=volume_mounts,
            working_directory=working_directory,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arguments: Sequence[str],
             availability_domain: str,
             commands: Sequence[str],
             compartment_id: str,
             container_id: str,
             container_instance_id: str,
             defined_tags: Mapping[str, Any],
             display_name: str,
             environment_variables: Mapping[str, Any],
             exit_code: int,
             fault_domain: str,
             freeform_tags: Mapping[str, Any],
             health_checks: Sequence['outputs.GetContainerInstanceContainerHealthCheckResult'],
             image_url: str,
             is_resource_principal_disabled: bool,
             lifecycle_details: str,
             resource_configs: Sequence['outputs.GetContainerInstanceContainerResourceConfigResult'],
             security_contexts: Sequence['outputs.GetContainerInstanceContainerSecurityContextResult'],
             state: str,
             system_tags: Mapping[str, Any],
             time_created: str,
             time_terminated: str,
             time_updated: str,
             volume_mounts: Sequence['outputs.GetContainerInstanceContainerVolumeMountResult'],
             working_directory: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("arguments", arguments)
        _setter("availability_domain", availability_domain)
        _setter("commands", commands)
        _setter("compartment_id", compartment_id)
        _setter("container_id", container_id)
        _setter("container_instance_id", container_instance_id)
        _setter("defined_tags", defined_tags)
        _setter("display_name", display_name)
        _setter("environment_variables", environment_variables)
        _setter("exit_code", exit_code)
        _setter("fault_domain", fault_domain)
        _setter("freeform_tags", freeform_tags)
        _setter("health_checks", health_checks)
        _setter("image_url", image_url)
        _setter("is_resource_principal_disabled", is_resource_principal_disabled)
        _setter("lifecycle_details", lifecycle_details)
        _setter("resource_configs", resource_configs)
        _setter("security_contexts", security_contexts)
        _setter("state", state)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_terminated", time_terminated)
        _setter("time_updated", time_updated)
        _setter("volume_mounts", volume_mounts)
        _setter("working_directory", working_directory)

    @property
    @pulumi.getter
    def arguments(self) -> Sequence[str]:
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        """
        The availability domain to place the container instance.
        """
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter
    def commands(self) -> Sequence[str]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> str:
        """
        The OCID of the container.
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="containerInstanceId")
    def container_instance_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container instance.
        """
        return pulumi.get(self, "container_instance_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> int:
        return pulumi.get(self, "exit_code")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> str:
        """
        The fault domain to place the container instance.
        """
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Sequence['outputs.GetContainerInstanceContainerHealthCheckResult']:
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> str:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="isResourcePrincipalDisabled")
    def is_resource_principal_disabled(self) -> bool:
        return pulumi.get(self, "is_resource_principal_disabled")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message that describes the current state of the container in more detail. Can be used to provide actionable information.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="resourceConfigs")
    def resource_configs(self) -> Sequence['outputs.GetContainerInstanceContainerResourceConfigResult']:
        return pulumi.get(self, "resource_configs")

    @property
    @pulumi.getter(name="securityContexts")
    def security_contexts(self) -> Sequence['outputs.GetContainerInstanceContainerSecurityContextResult']:
        return pulumi.get(self, "security_contexts")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the container instance.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeTerminated")
    def time_terminated(self) -> str:
        return pulumi.get(self, "time_terminated")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Sequence['outputs.GetContainerInstanceContainerVolumeMountResult']:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> str:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetContainerInstanceContainerHealthCheckResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[str],
                 failure_action: str,
                 failure_threshold: int,
                 headers: Sequence['outputs.GetContainerInstanceContainerHealthCheckHeaderResult'],
                 health_check_type: str,
                 initial_delay_in_seconds: int,
                 interval_in_seconds: int,
                 name: str,
                 path: str,
                 port: int,
                 status: str,
                 status_details: str,
                 success_threshold: int,
                 timeout_in_seconds: int):
        """
        :param str name: The name of the volume. This must be unique within a single container instance.
        :param str path: (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
        """
        GetContainerInstanceContainerHealthCheckResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            commands=commands,
            failure_action=failure_action,
            failure_threshold=failure_threshold,
            headers=headers,
            health_check_type=health_check_type,
            initial_delay_in_seconds=initial_delay_in_seconds,
            interval_in_seconds=interval_in_seconds,
            name=name,
            path=path,
            port=port,
            status=status,
            status_details=status_details,
            success_threshold=success_threshold,
            timeout_in_seconds=timeout_in_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             commands: Sequence[str],
             failure_action: str,
             failure_threshold: int,
             headers: Sequence['outputs.GetContainerInstanceContainerHealthCheckHeaderResult'],
             health_check_type: str,
             initial_delay_in_seconds: int,
             interval_in_seconds: int,
             name: str,
             path: str,
             port: int,
             status: str,
             status_details: str,
             success_threshold: int,
             timeout_in_seconds: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("commands", commands)
        _setter("failure_action", failure_action)
        _setter("failure_threshold", failure_threshold)
        _setter("headers", headers)
        _setter("health_check_type", health_check_type)
        _setter("initial_delay_in_seconds", initial_delay_in_seconds)
        _setter("interval_in_seconds", interval_in_seconds)
        _setter("name", name)
        _setter("path", path)
        _setter("port", port)
        _setter("status", status)
        _setter("status_details", status_details)
        _setter("success_threshold", success_threshold)
        _setter("timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[str]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter(name="failureAction")
    def failure_action(self) -> str:
        return pulumi.get(self, "failure_action")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> int:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetContainerInstanceContainerHealthCheckHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> str:
        return pulumi.get(self, "health_check_type")

    @property
    @pulumi.getter(name="initialDelayInSeconds")
    def initial_delay_in_seconds(self) -> int:
        return pulumi.get(self, "initial_delay_in_seconds")

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> int:
        return pulumi.get(self, "interval_in_seconds")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the volume. This must be unique within a single container instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> str:
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> int:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> int:
        return pulumi.get(self, "timeout_in_seconds")


@pulumi.output_type
class GetContainerInstanceContainerHealthCheckHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of the volume. This must be unique within a single container instance.
        """
        GetContainerInstanceContainerHealthCheckHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the volume. This must be unique within a single container instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetContainerInstanceContainerResourceConfigResult(dict):
    def __init__(__self__, *,
                 memory_limit_in_gbs: float,
                 vcpus_limit: float):
        GetContainerInstanceContainerResourceConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_limit_in_gbs=memory_limit_in_gbs,
            vcpus_limit=vcpus_limit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_limit_in_gbs: float,
             vcpus_limit: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("memory_limit_in_gbs", memory_limit_in_gbs)
        _setter("vcpus_limit", vcpus_limit)

    @property
    @pulumi.getter(name="memoryLimitInGbs")
    def memory_limit_in_gbs(self) -> float:
        return pulumi.get(self, "memory_limit_in_gbs")

    @property
    @pulumi.getter(name="vcpusLimit")
    def vcpus_limit(self) -> float:
        return pulumi.get(self, "vcpus_limit")


@pulumi.output_type
class GetContainerInstanceContainerSecurityContextResult(dict):
    def __init__(__self__, *,
                 is_non_root_user_check_enabled: bool,
                 is_root_file_system_readonly: bool,
                 run_as_group: int,
                 run_as_user: int,
                 security_context_type: str):
        GetContainerInstanceContainerSecurityContextResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_non_root_user_check_enabled=is_non_root_user_check_enabled,
            is_root_file_system_readonly=is_root_file_system_readonly,
            run_as_group=run_as_group,
            run_as_user=run_as_user,
            security_context_type=security_context_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_non_root_user_check_enabled: bool,
             is_root_file_system_readonly: bool,
             run_as_group: int,
             run_as_user: int,
             security_context_type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("is_non_root_user_check_enabled", is_non_root_user_check_enabled)
        _setter("is_root_file_system_readonly", is_root_file_system_readonly)
        _setter("run_as_group", run_as_group)
        _setter("run_as_user", run_as_user)
        _setter("security_context_type", security_context_type)

    @property
    @pulumi.getter(name="isNonRootUserCheckEnabled")
    def is_non_root_user_check_enabled(self) -> bool:
        return pulumi.get(self, "is_non_root_user_check_enabled")

    @property
    @pulumi.getter(name="isRootFileSystemReadonly")
    def is_root_file_system_readonly(self) -> bool:
        return pulumi.get(self, "is_root_file_system_readonly")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> int:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> int:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="securityContextType")
    def security_context_type(self) -> str:
        return pulumi.get(self, "security_context_type")


@pulumi.output_type
class GetContainerInstanceContainerVolumeMountResult(dict):
    def __init__(__self__, *,
                 is_read_only: bool,
                 mount_path: str,
                 partition: int,
                 sub_path: str,
                 volume_name: str):
        GetContainerInstanceContainerVolumeMountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_read_only=is_read_only,
            mount_path=mount_path,
            partition=partition,
            sub_path=sub_path,
            volume_name=volume_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_read_only: bool,
             mount_path: str,
             partition: int,
             sub_path: str,
             volume_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("is_read_only", is_read_only)
        _setter("mount_path", mount_path)
        _setter("partition", partition)
        _setter("sub_path", sub_path)
        _setter("volume_name", volume_name)

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> bool:
        return pulumi.get(self, "is_read_only")

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def partition(self) -> int:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> str:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> str:
        return pulumi.get(self, "volume_name")


@pulumi.output_type
class GetContainerInstanceDnsConfigResult(dict):
    def __init__(__self__, *,
                 nameservers: Sequence[str],
                 options: Sequence[str],
                 searches: Sequence[str]):
        """
        :param Sequence[str] nameservers: IP address of the name server..
        :param Sequence[str] options: Options allows certain internal resolver variables to be modified.
        :param Sequence[str] searches: Search list for hostname lookup.
        """
        GetContainerInstanceDnsConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            nameservers=nameservers,
            options=options,
            searches=searches,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             nameservers: Sequence[str],
             options: Sequence[str],
             searches: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("nameservers", nameservers)
        _setter("options", options)
        _setter("searches", searches)

    @property
    @pulumi.getter
    def nameservers(self) -> Sequence[str]:
        """
        IP address of the name server..
        """
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter
    def options(self) -> Sequence[str]:
        """
        Options allows certain internal resolver variables to be modified.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def searches(self) -> Sequence[str]:
        """
        Search list for hostname lookup.
        """
        return pulumi.get(self, "searches")


@pulumi.output_type
class GetContainerInstanceImagePullSecretResult(dict):
    def __init__(__self__, *,
                 password: str,
                 registry_endpoint: str,
                 secret_id: str,
                 secret_type: str,
                 username: str):
        """
        :param str registry_endpoint: The registry endpoint of the container image.
        :param str secret_id: The OCID of the secret for registry credentials.
        :param str secret_type: The type of ImagePullSecret.
        """
        GetContainerInstanceImagePullSecretResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            registry_endpoint=registry_endpoint,
            secret_id=secret_id,
            secret_type=secret_type,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: str,
             registry_endpoint: str,
             secret_id: str,
             secret_type: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("password", password)
        _setter("registry_endpoint", registry_endpoint)
        _setter("secret_id", secret_id)
        _setter("secret_type", secret_type)
        _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="registryEndpoint")
    def registry_endpoint(self) -> str:
        """
        The registry endpoint of the container image.
        """
        return pulumi.get(self, "registry_endpoint")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> str:
        """
        The OCID of the secret for registry credentials.
        """
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> str:
        """
        The type of ImagePullSecret.
        """
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetContainerInstanceShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 networking_bandwidth_in_gbps: float,
                 ocpus: float,
                 processor_description: str):
        """
        :param float memory_in_gbs: The total amount of memory available to the container instance, in gigabytes.
        :param float networking_bandwidth_in_gbps: The networking bandwidth available to the container instance, in gigabits per second.
        :param float ocpus: The total number of OCPUs available to the container instance.
        :param str processor_description: A short description of the container instance's processor (CPU).
        """
        GetContainerInstanceShapeConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            networking_bandwidth_in_gbps=networking_bandwidth_in_gbps,
            ocpus=ocpus,
            processor_description=processor_description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: float,
             networking_bandwidth_in_gbps: float,
             ocpus: float,
             processor_description: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("memory_in_gbs", memory_in_gbs)
        _setter("networking_bandwidth_in_gbps", networking_bandwidth_in_gbps)
        _setter("ocpus", ocpus)
        _setter("processor_description", processor_description)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        The total amount of memory available to the container instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter(name="networkingBandwidthInGbps")
    def networking_bandwidth_in_gbps(self) -> float:
        """
        The networking bandwidth available to the container instance, in gigabits per second.
        """
        return pulumi.get(self, "networking_bandwidth_in_gbps")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        The total number of OCPUs available to the container instance.
        """
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter(name="processorDescription")
    def processor_description(self) -> str:
        """
        A short description of the container instance's processor (CPU).
        """
        return pulumi.get(self, "processor_description")


@pulumi.output_type
class GetContainerInstanceShapeItemResult(dict):
    def __init__(__self__, *,
                 memory_options: Sequence['outputs.GetContainerInstanceShapeItemMemoryOptionResult'],
                 name: str,
                 networking_bandwidth_options: Sequence['outputs.GetContainerInstanceShapeItemNetworkingBandwidthOptionResult'],
                 ocpu_options: Sequence['outputs.GetContainerInstanceShapeItemOcpuOptionResult'],
                 processor_description: str):
        """
        :param Sequence['GetContainerInstanceShapeItemMemoryOptionArgs'] memory_options: For a flexible shape, the amount of memory available for instances that use this shape.
        :param str name: The name identifying the shape.
        :param Sequence['GetContainerInstanceShapeItemNetworkingBandwidthOptionArgs'] networking_bandwidth_options: For a flexible shape, the amount of networking bandwidth available for instances that use this shape.
        :param Sequence['GetContainerInstanceShapeItemOcpuOptionArgs'] ocpu_options: For a flexible shape, the number of OCPUs available for instances that use this shape.
        :param str processor_description: A short description of the Instance's processor (CPU).
        """
        GetContainerInstanceShapeItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_options=memory_options,
            name=name,
            networking_bandwidth_options=networking_bandwidth_options,
            ocpu_options=ocpu_options,
            processor_description=processor_description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_options: Sequence['outputs.GetContainerInstanceShapeItemMemoryOptionResult'],
             name: str,
             networking_bandwidth_options: Sequence['outputs.GetContainerInstanceShapeItemNetworkingBandwidthOptionResult'],
             ocpu_options: Sequence['outputs.GetContainerInstanceShapeItemOcpuOptionResult'],
             processor_description: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("memory_options", memory_options)
        _setter("name", name)
        _setter("networking_bandwidth_options", networking_bandwidth_options)
        _setter("ocpu_options", ocpu_options)
        _setter("processor_description", processor_description)

    @property
    @pulumi.getter(name="memoryOptions")
    def memory_options(self) -> Sequence['outputs.GetContainerInstanceShapeItemMemoryOptionResult']:
        """
        For a flexible shape, the amount of memory available for instances that use this shape.
        """
        return pulumi.get(self, "memory_options")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name identifying the shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkingBandwidthOptions")
    def networking_bandwidth_options(self) -> Sequence['outputs.GetContainerInstanceShapeItemNetworkingBandwidthOptionResult']:
        """
        For a flexible shape, the amount of networking bandwidth available for instances that use this shape.
        """
        return pulumi.get(self, "networking_bandwidth_options")

    @property
    @pulumi.getter(name="ocpuOptions")
    def ocpu_options(self) -> Sequence['outputs.GetContainerInstanceShapeItemOcpuOptionResult']:
        """
        For a flexible shape, the number of OCPUs available for instances that use this shape.
        """
        return pulumi.get(self, "ocpu_options")

    @property
    @pulumi.getter(name="processorDescription")
    def processor_description(self) -> str:
        """
        A short description of the Instance's processor (CPU).
        """
        return pulumi.get(self, "processor_description")


@pulumi.output_type
class GetContainerInstanceShapeItemMemoryOptionResult(dict):
    def __init__(__self__, *,
                 default_per_ocpu_in_gbs: float,
                 max_in_gbs: float,
                 max_per_ocpu_in_gbs: float,
                 min_in_gbs: float,
                 min_per_ocpu_in_gbs: float):
        """
        :param float default_per_ocpu_in_gbs: The default amount of memory per OCPU available for this shape, in gigabytes.
        :param float max_in_gbs: The maximum amount of memory, in gigabytes.
        :param float max_per_ocpu_in_gbs: The maximum amount of memory per OCPU available for this shape, in gigabytes.
        :param float min_in_gbs: The minimum amount of memory, in gigabytes.
        :param float min_per_ocpu_in_gbs: The minimum amount of memory per OCPU available for this shape, in gigabytes.
        """
        GetContainerInstanceShapeItemMemoryOptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_per_ocpu_in_gbs=default_per_ocpu_in_gbs,
            max_in_gbs=max_in_gbs,
            max_per_ocpu_in_gbs=max_per_ocpu_in_gbs,
            min_in_gbs=min_in_gbs,
            min_per_ocpu_in_gbs=min_per_ocpu_in_gbs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_per_ocpu_in_gbs: float,
             max_in_gbs: float,
             max_per_ocpu_in_gbs: float,
             min_in_gbs: float,
             min_per_ocpu_in_gbs: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default_per_ocpu_in_gbs", default_per_ocpu_in_gbs)
        _setter("max_in_gbs", max_in_gbs)
        _setter("max_per_ocpu_in_gbs", max_per_ocpu_in_gbs)
        _setter("min_in_gbs", min_in_gbs)
        _setter("min_per_ocpu_in_gbs", min_per_ocpu_in_gbs)

    @property
    @pulumi.getter(name="defaultPerOcpuInGbs")
    def default_per_ocpu_in_gbs(self) -> float:
        """
        The default amount of memory per OCPU available for this shape, in gigabytes.
        """
        return pulumi.get(self, "default_per_ocpu_in_gbs")

    @property
    @pulumi.getter(name="maxInGbs")
    def max_in_gbs(self) -> float:
        """
        The maximum amount of memory, in gigabytes.
        """
        return pulumi.get(self, "max_in_gbs")

    @property
    @pulumi.getter(name="maxPerOcpuInGbs")
    def max_per_ocpu_in_gbs(self) -> float:
        """
        The maximum amount of memory per OCPU available for this shape, in gigabytes.
        """
        return pulumi.get(self, "max_per_ocpu_in_gbs")

    @property
    @pulumi.getter(name="minInGbs")
    def min_in_gbs(self) -> float:
        """
        The minimum amount of memory, in gigabytes.
        """
        return pulumi.get(self, "min_in_gbs")

    @property
    @pulumi.getter(name="minPerOcpuInGbs")
    def min_per_ocpu_in_gbs(self) -> float:
        """
        The minimum amount of memory per OCPU available for this shape, in gigabytes.
        """
        return pulumi.get(self, "min_per_ocpu_in_gbs")


@pulumi.output_type
class GetContainerInstanceShapeItemNetworkingBandwidthOptionResult(dict):
    def __init__(__self__, *,
                 default_per_ocpu_in_gbps: float,
                 max_in_gbps: float,
                 min_in_gbps: float):
        """
        :param float default_per_ocpu_in_gbps: The default amount of networking bandwidth per OCPU, in gigabits per second.
        :param float max_in_gbps: The maximum amount of networking bandwidth, in gigabits per second.
        :param float min_in_gbps: The minimum amount of networking bandwidth, in gigabits per second.
        """
        GetContainerInstanceShapeItemNetworkingBandwidthOptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_per_ocpu_in_gbps=default_per_ocpu_in_gbps,
            max_in_gbps=max_in_gbps,
            min_in_gbps=min_in_gbps,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_per_ocpu_in_gbps: float,
             max_in_gbps: float,
             min_in_gbps: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default_per_ocpu_in_gbps", default_per_ocpu_in_gbps)
        _setter("max_in_gbps", max_in_gbps)
        _setter("min_in_gbps", min_in_gbps)

    @property
    @pulumi.getter(name="defaultPerOcpuInGbps")
    def default_per_ocpu_in_gbps(self) -> float:
        """
        The default amount of networking bandwidth per OCPU, in gigabits per second.
        """
        return pulumi.get(self, "default_per_ocpu_in_gbps")

    @property
    @pulumi.getter(name="maxInGbps")
    def max_in_gbps(self) -> float:
        """
        The maximum amount of networking bandwidth, in gigabits per second.
        """
        return pulumi.get(self, "max_in_gbps")

    @property
    @pulumi.getter(name="minInGbps")
    def min_in_gbps(self) -> float:
        """
        The minimum amount of networking bandwidth, in gigabits per second.
        """
        return pulumi.get(self, "min_in_gbps")


@pulumi.output_type
class GetContainerInstanceShapeItemOcpuOptionResult(dict):
    def __init__(__self__, *,
                 max: float,
                 min: float):
        """
        :param float max: The maximum number of OCPUs.
        :param float min: The minimum number of OCPUs.
        """
        GetContainerInstanceShapeItemOcpuOptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: float,
             min: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max", max)
        _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> float:
        """
        The maximum number of OCPUs.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> float:
        """
        The minimum number of OCPUs.
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class GetContainerInstanceShapesContainerInstanceShapeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemResult']):
        """
        :param Sequence['GetContainerInstanceShapesContainerInstanceShapeCollectionItemArgs'] items: A list of shapes.
        """
        GetContainerInstanceShapesContainerInstanceShapeCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemResult']:
        """
        A list of shapes.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetContainerInstanceShapesContainerInstanceShapeCollectionItemResult(dict):
    def __init__(__self__, *,
                 memory_options: Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemMemoryOptionResult'],
                 name: str,
                 networking_bandwidth_options: Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemNetworkingBandwidthOptionResult'],
                 ocpu_options: Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemOcpuOptionResult'],
                 processor_description: str):
        """
        :param Sequence['GetContainerInstanceShapesContainerInstanceShapeCollectionItemMemoryOptionArgs'] memory_options: For a flexible shape, the amount of memory available for container instances that use this shape.
        :param str name: The name identifying the shape.
        :param Sequence['GetContainerInstanceShapesContainerInstanceShapeCollectionItemNetworkingBandwidthOptionArgs'] networking_bandwidth_options: For a flexible shape, the amount of networking bandwidth available for container instances that use this shape.
        :param Sequence['GetContainerInstanceShapesContainerInstanceShapeCollectionItemOcpuOptionArgs'] ocpu_options: For a flexible shape, the number of OCPUs available for container instances that use this shape.
        :param str processor_description: A short description of the container instance's processor (CPU).
        """
        GetContainerInstanceShapesContainerInstanceShapeCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_options=memory_options,
            name=name,
            networking_bandwidth_options=networking_bandwidth_options,
            ocpu_options=ocpu_options,
            processor_description=processor_description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_options: Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemMemoryOptionResult'],
             name: str,
             networking_bandwidth_options: Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemNetworkingBandwidthOptionResult'],
             ocpu_options: Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemOcpuOptionResult'],
             processor_description: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("memory_options", memory_options)
        _setter("name", name)
        _setter("networking_bandwidth_options", networking_bandwidth_options)
        _setter("ocpu_options", ocpu_options)
        _setter("processor_description", processor_description)

    @property
    @pulumi.getter(name="memoryOptions")
    def memory_options(self) -> Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemMemoryOptionResult']:
        """
        For a flexible shape, the amount of memory available for container instances that use this shape.
        """
        return pulumi.get(self, "memory_options")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name identifying the shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkingBandwidthOptions")
    def networking_bandwidth_options(self) -> Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemNetworkingBandwidthOptionResult']:
        """
        For a flexible shape, the amount of networking bandwidth available for container instances that use this shape.
        """
        return pulumi.get(self, "networking_bandwidth_options")

    @property
    @pulumi.getter(name="ocpuOptions")
    def ocpu_options(self) -> Sequence['outputs.GetContainerInstanceShapesContainerInstanceShapeCollectionItemOcpuOptionResult']:
        """
        For a flexible shape, the number of OCPUs available for container instances that use this shape.
        """
        return pulumi.get(self, "ocpu_options")

    @property
    @pulumi.getter(name="processorDescription")
    def processor_description(self) -> str:
        """
        A short description of the container instance's processor (CPU).
        """
        return pulumi.get(self, "processor_description")


@pulumi.output_type
class GetContainerInstanceShapesContainerInstanceShapeCollectionItemMemoryOptionResult(dict):
    def __init__(__self__, *,
                 default_per_ocpu_in_gbs: float,
                 max_in_gbs: float,
                 max_per_ocpu_in_gbs: float,
                 min_in_gbs: float,
                 min_per_ocpu_in_gbs: float):
        """
        :param float default_per_ocpu_in_gbs: The default amount of memory per OCPU available for this shape (GB).
        :param float max_in_gbs: The maximum amount of memory (GB).
        :param float max_per_ocpu_in_gbs: The maximum amount of memory per OCPU available for this shape (GB).
        :param float min_in_gbs: The minimum amount of memory (GB).
        :param float min_per_ocpu_in_gbs: The minimum amount of memory per OCPU available for this shape (GB).
        """
        GetContainerInstanceShapesContainerInstanceShapeCollectionItemMemoryOptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_per_ocpu_in_gbs=default_per_ocpu_in_gbs,
            max_in_gbs=max_in_gbs,
            max_per_ocpu_in_gbs=max_per_ocpu_in_gbs,
            min_in_gbs=min_in_gbs,
            min_per_ocpu_in_gbs=min_per_ocpu_in_gbs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_per_ocpu_in_gbs: float,
             max_in_gbs: float,
             max_per_ocpu_in_gbs: float,
             min_in_gbs: float,
             min_per_ocpu_in_gbs: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default_per_ocpu_in_gbs", default_per_ocpu_in_gbs)
        _setter("max_in_gbs", max_in_gbs)
        _setter("max_per_ocpu_in_gbs", max_per_ocpu_in_gbs)
        _setter("min_in_gbs", min_in_gbs)
        _setter("min_per_ocpu_in_gbs", min_per_ocpu_in_gbs)

    @property
    @pulumi.getter(name="defaultPerOcpuInGbs")
    def default_per_ocpu_in_gbs(self) -> float:
        """
        The default amount of memory per OCPU available for this shape (GB).
        """
        return pulumi.get(self, "default_per_ocpu_in_gbs")

    @property
    @pulumi.getter(name="maxInGbs")
    def max_in_gbs(self) -> float:
        """
        The maximum amount of memory (GB).
        """
        return pulumi.get(self, "max_in_gbs")

    @property
    @pulumi.getter(name="maxPerOcpuInGbs")
    def max_per_ocpu_in_gbs(self) -> float:
        """
        The maximum amount of memory per OCPU available for this shape (GB).
        """
        return pulumi.get(self, "max_per_ocpu_in_gbs")

    @property
    @pulumi.getter(name="minInGbs")
    def min_in_gbs(self) -> float:
        """
        The minimum amount of memory (GB).
        """
        return pulumi.get(self, "min_in_gbs")

    @property
    @pulumi.getter(name="minPerOcpuInGbs")
    def min_per_ocpu_in_gbs(self) -> float:
        """
        The minimum amount of memory per OCPU available for this shape (GB).
        """
        return pulumi.get(self, "min_per_ocpu_in_gbs")


@pulumi.output_type
class GetContainerInstanceShapesContainerInstanceShapeCollectionItemNetworkingBandwidthOptionResult(dict):
    def __init__(__self__, *,
                 default_per_ocpu_in_gbps: float,
                 max_in_gbps: float,
                 min_in_gbps: float):
        """
        :param float default_per_ocpu_in_gbps: The default amount of networking bandwidth per OCPU, in gigabits per second.
        :param float max_in_gbps: The maximum amount of networking bandwidth, in gigabits per second.
        :param float min_in_gbps: The minimum amount of networking bandwidth, in gigabits per second.
        """
        GetContainerInstanceShapesContainerInstanceShapeCollectionItemNetworkingBandwidthOptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_per_ocpu_in_gbps=default_per_ocpu_in_gbps,
            max_in_gbps=max_in_gbps,
            min_in_gbps=min_in_gbps,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_per_ocpu_in_gbps: float,
             max_in_gbps: float,
             min_in_gbps: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default_per_ocpu_in_gbps", default_per_ocpu_in_gbps)
        _setter("max_in_gbps", max_in_gbps)
        _setter("min_in_gbps", min_in_gbps)

    @property
    @pulumi.getter(name="defaultPerOcpuInGbps")
    def default_per_ocpu_in_gbps(self) -> float:
        """
        The default amount of networking bandwidth per OCPU, in gigabits per second.
        """
        return pulumi.get(self, "default_per_ocpu_in_gbps")

    @property
    @pulumi.getter(name="maxInGbps")
    def max_in_gbps(self) -> float:
        """
        The maximum amount of networking bandwidth, in gigabits per second.
        """
        return pulumi.get(self, "max_in_gbps")

    @property
    @pulumi.getter(name="minInGbps")
    def min_in_gbps(self) -> float:
        """
        The minimum amount of networking bandwidth, in gigabits per second.
        """
        return pulumi.get(self, "min_in_gbps")


@pulumi.output_type
class GetContainerInstanceShapesContainerInstanceShapeCollectionItemOcpuOptionResult(dict):
    def __init__(__self__, *,
                 max: float,
                 min: float):
        """
        :param float max: The maximum number of OCPUs.
        :param float min: The minimum number of OCPUs.
        """
        GetContainerInstanceShapesContainerInstanceShapeCollectionItemOcpuOptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: float,
             min: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max", max)
        _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> float:
        """
        The maximum number of OCPUs.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> float:
        """
        The minimum number of OCPUs.
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class GetContainerInstanceShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name identifying the shape.
        """
        GetContainerInstanceShapesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name identifying the shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetContainerInstanceVnicResult(dict):
    def __init__(__self__, *,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 hostname_label: str,
                 is_public_ip_assigned: bool,
                 nsg_ids: Sequence[str],
                 private_ip: str,
                 skip_source_dest_check: bool,
                 subnet_id: str,
                 vnic_id: str):
        """
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        :param str display_name: A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str vnic_id: The identifier of the virtual network interface card (VNIC) over which the containers accessing this network can communicate with the larger virtual cloud network.
        """
        GetContainerInstanceVnicResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defined_tags=defined_tags,
            display_name=display_name,
            freeform_tags=freeform_tags,
            hostname_label=hostname_label,
            is_public_ip_assigned=is_public_ip_assigned,
            nsg_ids=nsg_ids,
            private_ip=private_ip,
            skip_source_dest_check=skip_source_dest_check,
            subnet_id=subnet_id,
            vnic_id=vnic_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defined_tags: Mapping[str, Any],
             display_name: str,
             freeform_tags: Mapping[str, Any],
             hostname_label: str,
             is_public_ip_assigned: bool,
             nsg_ids: Sequence[str],
             private_ip: str,
             skip_source_dest_check: bool,
             subnet_id: str,
             vnic_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("defined_tags", defined_tags)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("hostname_label", hostname_label)
        _setter("is_public_ip_assigned", is_public_ip_assigned)
        _setter("nsg_ids", nsg_ids)
        _setter("private_ip", private_ip)
        _setter("skip_source_dest_check", skip_source_dest_check)
        _setter("subnet_id", subnet_id)
        _setter("vnic_id", vnic_id)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> str:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="isPublicIpAssigned")
    def is_public_ip_assigned(self) -> bool:
        return pulumi.get(self, "is_public_ip_assigned")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Sequence[str]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> bool:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vnicId")
    def vnic_id(self) -> str:
        """
        The identifier of the virtual network interface card (VNIC) over which the containers accessing this network can communicate with the larger virtual cloud network.
        """
        return pulumi.get(self, "vnic_id")


@pulumi.output_type
class GetContainerInstanceVolumeResult(dict):
    def __init__(__self__, *,
                 backing_store: str,
                 configs: Sequence['outputs.GetContainerInstanceVolumeConfigResult'],
                 name: str,
                 volume_type: str):
        """
        :param str backing_store: The volume type of the empty directory, can be either File Storage or Memory.
        :param Sequence['GetContainerInstanceVolumeConfigArgs'] configs: Contains string key value pairs which can be mounted as individual files inside the container. The value needs to be base64 encoded. It is decoded to plain text before the mount.
        :param str name: The name of the volume. This must be unique within a single container instance.
        :param str volume_type: The type of volume.
        """
        GetContainerInstanceVolumeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backing_store=backing_store,
            configs=configs,
            name=name,
            volume_type=volume_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backing_store: str,
             configs: Sequence['outputs.GetContainerInstanceVolumeConfigResult'],
             name: str,
             volume_type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("backing_store", backing_store)
        _setter("configs", configs)
        _setter("name", name)
        _setter("volume_type", volume_type)

    @property
    @pulumi.getter(name="backingStore")
    def backing_store(self) -> str:
        """
        The volume type of the empty directory, can be either File Storage or Memory.
        """
        return pulumi.get(self, "backing_store")

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetContainerInstanceVolumeConfigResult']:
        """
        Contains string key value pairs which can be mounted as individual files inside the container. The value needs to be base64 encoded. It is decoded to plain text before the mount.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the volume. This must be unique within a single container instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        """
        The type of volume.
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetContainerInstanceVolumeConfigResult(dict):
    def __init__(__self__, *,
                 data: str,
                 file_name: str,
                 path: str):
        """
        :param str data: The base64 encoded contents of the file. The contents are decoded to plain text before mounted as a file to a container inside container instance.
        :param str file_name: The name of the file. The fileName should be unique across the volume.
        :param str path: (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
        """
        GetContainerInstanceVolumeConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data=data,
            file_name=file_name,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data: str,
             file_name: str,
             path: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data", data)
        _setter("file_name", file_name)
        _setter("path", path)

    @property
    @pulumi.getter
    def data(self) -> str:
        """
        The base64 encoded contents of the file. The contents are decoded to plain text before mounted as a file to a container inside container instance.
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        """
        The name of the file. The fileName should be unique across the volume.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemResult']):
        GetContainerInstancesContainerInstanceCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemResult(dict):
    def __init__(__self__, *,
                 availability_domain: str,
                 compartment_id: str,
                 container_count: int,
                 container_restart_policy: str,
                 containers: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerResult'],
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 dns_configs: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemDnsConfigResult'],
                 fault_domain: str,
                 freeform_tags: Mapping[str, Any],
                 graceful_shutdown_timeout_in_seconds: str,
                 id: str,
                 image_pull_secrets: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemImagePullSecretResult'],
                 lifecycle_details: str,
                 shape: str,
                 shape_configs: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemShapeConfigResult'],
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str,
                 vnics: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemVnicResult'],
                 volume_count: int,
                 volumes: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemVolumeResult']):
        """
        :param str availability_domain: The name of the availability domain.  Example: `Uocm:PHX-AD-1`
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param int container_count: The number of containers on the container instance.
        :param str container_restart_policy: The container restart policy is applied for all containers in container instance.
        :param Sequence['GetContainerInstancesContainerInstanceCollectionItemContainerArgs'] containers: The containers on the container instance.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Sequence['GetContainerInstancesContainerInstanceCollectionItemDnsConfigArgs'] dns_configs: DNS settings for containers.
        :param str fault_domain: The fault domain to place the container instance.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str graceful_shutdown_timeout_in_seconds: The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
        :param str id: An OCID that cannot be changed.
        :param Sequence['GetContainerInstancesContainerInstanceCollectionItemImagePullSecretArgs'] image_pull_secrets: The image pulls secrets so you can access private registry to pull container images.
        :param str lifecycle_details: A message that describes the current state of the container in more detail. Can be used to provide actionable information.
        :param str shape: The shape of the container instance. The shape determines the number of OCPUs, amount of memory, and other resources that are allocated to a container instance.
        :param Sequence['GetContainerInstancesContainerInstanceCollectionItemShapeConfigArgs'] shape_configs: The shape configuration for a container instance. The shape configuration determines the resources thats are available to the container instance and its containers.
        :param str state: A filter to only return resources that match the given lifecycle state.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
        :param str time_created: The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        :param str time_updated: The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        :param Sequence['GetContainerInstancesContainerInstanceCollectionItemVnicArgs'] vnics: The virtual networks available to the containers in the container instance.
        :param int volume_count: The number of volumes that are attached to the container instance.
        :param Sequence['GetContainerInstancesContainerInstanceCollectionItemVolumeArgs'] volumes: A volume is a directory with data that is accessible across multiple containers in a container instance.
        """
        GetContainerInstancesContainerInstanceCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_domain=availability_domain,
            compartment_id=compartment_id,
            container_count=container_count,
            container_restart_policy=container_restart_policy,
            containers=containers,
            defined_tags=defined_tags,
            display_name=display_name,
            dns_configs=dns_configs,
            fault_domain=fault_domain,
            freeform_tags=freeform_tags,
            graceful_shutdown_timeout_in_seconds=graceful_shutdown_timeout_in_seconds,
            id=id,
            image_pull_secrets=image_pull_secrets,
            lifecycle_details=lifecycle_details,
            shape=shape,
            shape_configs=shape_configs,
            state=state,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
            vnics=vnics,
            volume_count=volume_count,
            volumes=volumes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_domain: str,
             compartment_id: str,
             container_count: int,
             container_restart_policy: str,
             containers: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerResult'],
             defined_tags: Mapping[str, Any],
             display_name: str,
             dns_configs: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemDnsConfigResult'],
             fault_domain: str,
             freeform_tags: Mapping[str, Any],
             graceful_shutdown_timeout_in_seconds: str,
             id: str,
             image_pull_secrets: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemImagePullSecretResult'],
             lifecycle_details: str,
             shape: str,
             shape_configs: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemShapeConfigResult'],
             state: str,
             system_tags: Mapping[str, Any],
             time_created: str,
             time_updated: str,
             vnics: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemVnicResult'],
             volume_count: int,
             volumes: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemVolumeResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("availability_domain", availability_domain)
        _setter("compartment_id", compartment_id)
        _setter("container_count", container_count)
        _setter("container_restart_policy", container_restart_policy)
        _setter("containers", containers)
        _setter("defined_tags", defined_tags)
        _setter("display_name", display_name)
        _setter("dns_configs", dns_configs)
        _setter("fault_domain", fault_domain)
        _setter("freeform_tags", freeform_tags)
        _setter("graceful_shutdown_timeout_in_seconds", graceful_shutdown_timeout_in_seconds)
        _setter("id", id)
        _setter("image_pull_secrets", image_pull_secrets)
        _setter("lifecycle_details", lifecycle_details)
        _setter("shape", shape)
        _setter("shape_configs", shape_configs)
        _setter("state", state)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)
        _setter("vnics", vnics)
        _setter("volume_count", volume_count)
        _setter("volumes", volumes)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        """
        The name of the availability domain.  Example: `Uocm:PHX-AD-1`
        """
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="containerCount")
    def container_count(self) -> int:
        """
        The number of containers on the container instance.
        """
        return pulumi.get(self, "container_count")

    @property
    @pulumi.getter(name="containerRestartPolicy")
    def container_restart_policy(self) -> str:
        """
        The container restart policy is applied for all containers in container instance.
        """
        return pulumi.get(self, "container_restart_policy")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerResult']:
        """
        The containers on the container instance.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsConfigs")
    def dns_configs(self) -> Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemDnsConfigResult']:
        """
        DNS settings for containers.
        """
        return pulumi.get(self, "dns_configs")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> str:
        """
        The fault domain to place the container instance.
        """
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="gracefulShutdownTimeoutInSeconds")
    def graceful_shutdown_timeout_in_seconds(self) -> str:
        """
        The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
        """
        return pulumi.get(self, "graceful_shutdown_timeout_in_seconds")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        An OCID that cannot be changed.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemImagePullSecretResult']:
        """
        The image pulls secrets so you can access private registry to pull container images.
        """
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message that describes the current state of the container in more detail. Can be used to provide actionable information.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        The shape of the container instance. The shape determines the number of OCPUs, amount of memory, and other resources that are allocated to a container instance.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemShapeConfigResult']:
        """
        The shape configuration for a container instance. The shape configuration determines the resources thats are available to the container instance and its containers.
        """
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def vnics(self) -> Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemVnicResult']:
        """
        The virtual networks available to the containers in the container instance.
        """
        return pulumi.get(self, "vnics")

    @property
    @pulumi.getter(name="volumeCount")
    def volume_count(self) -> int:
        """
        The number of volumes that are attached to the container instance.
        """
        return pulumi.get(self, "volume_count")

    @property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemVolumeResult']:
        """
        A volume is a directory with data that is accessible across multiple containers in a container instance.
        """
        return pulumi.get(self, "volumes")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemContainerResult(dict):
    def __init__(__self__, *,
                 arguments: Sequence[str],
                 availability_domain: str,
                 commands: Sequence[str],
                 compartment_id: str,
                 container_id: str,
                 container_instance_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 environment_variables: Mapping[str, Any],
                 exit_code: int,
                 fault_domain: str,
                 freeform_tags: Mapping[str, Any],
                 health_checks: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckResult'],
                 image_url: str,
                 is_resource_principal_disabled: bool,
                 lifecycle_details: str,
                 resource_configs: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfigResult'],
                 security_contexts: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContextResult'],
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_terminated: str,
                 time_updated: str,
                 volume_mounts: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMountResult'],
                 working_directory: str):
        """
        :param str availability_domain: The name of the availability domain.  Example: `Uocm:PHX-AD-1`
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param str container_id: The OCID of the container.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param str fault_domain: The fault domain to place the container instance.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str lifecycle_details: A message that describes the current state of the container in more detail. Can be used to provide actionable information.
        :param str state: A filter to only return resources that match the given lifecycle state.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
        :param str time_created: The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        :param str time_updated: The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        """
        GetContainerInstancesContainerInstanceCollectionItemContainerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arguments=arguments,
            availability_domain=availability_domain,
            commands=commands,
            compartment_id=compartment_id,
            container_id=container_id,
            container_instance_id=container_instance_id,
            defined_tags=defined_tags,
            display_name=display_name,
            environment_variables=environment_variables,
            exit_code=exit_code,
            fault_domain=fault_domain,
            freeform_tags=freeform_tags,
            health_checks=health_checks,
            image_url=image_url,
            is_resource_principal_disabled=is_resource_principal_disabled,
            lifecycle_details=lifecycle_details,
            resource_configs=resource_configs,
            security_contexts=security_contexts,
            state=state,
            system_tags=system_tags,
            time_created=time_created,
            time_terminated=time_terminated,
            time_updated=time_updated,
            volume_mounts=volume_mounts,
            working_directory=working_directory,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arguments: Sequence[str],
             availability_domain: str,
             commands: Sequence[str],
             compartment_id: str,
             container_id: str,
             container_instance_id: str,
             defined_tags: Mapping[str, Any],
             display_name: str,
             environment_variables: Mapping[str, Any],
             exit_code: int,
             fault_domain: str,
             freeform_tags: Mapping[str, Any],
             health_checks: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckResult'],
             image_url: str,
             is_resource_principal_disabled: bool,
             lifecycle_details: str,
             resource_configs: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfigResult'],
             security_contexts: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContextResult'],
             state: str,
             system_tags: Mapping[str, Any],
             time_created: str,
             time_terminated: str,
             time_updated: str,
             volume_mounts: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMountResult'],
             working_directory: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("arguments", arguments)
        _setter("availability_domain", availability_domain)
        _setter("commands", commands)
        _setter("compartment_id", compartment_id)
        _setter("container_id", container_id)
        _setter("container_instance_id", container_instance_id)
        _setter("defined_tags", defined_tags)
        _setter("display_name", display_name)
        _setter("environment_variables", environment_variables)
        _setter("exit_code", exit_code)
        _setter("fault_domain", fault_domain)
        _setter("freeform_tags", freeform_tags)
        _setter("health_checks", health_checks)
        _setter("image_url", image_url)
        _setter("is_resource_principal_disabled", is_resource_principal_disabled)
        _setter("lifecycle_details", lifecycle_details)
        _setter("resource_configs", resource_configs)
        _setter("security_contexts", security_contexts)
        _setter("state", state)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_terminated", time_terminated)
        _setter("time_updated", time_updated)
        _setter("volume_mounts", volume_mounts)
        _setter("working_directory", working_directory)

    @property
    @pulumi.getter
    def arguments(self) -> Sequence[str]:
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        """
        The name of the availability domain.  Example: `Uocm:PHX-AD-1`
        """
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter
    def commands(self) -> Sequence[str]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> str:
        """
        The OCID of the container.
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="containerInstanceId")
    def container_instance_id(self) -> str:
        return pulumi.get(self, "container_instance_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> int:
        return pulumi.get(self, "exit_code")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> str:
        """
        The fault domain to place the container instance.
        """
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckResult']:
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> str:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="isResourcePrincipalDisabled")
    def is_resource_principal_disabled(self) -> bool:
        return pulumi.get(self, "is_resource_principal_disabled")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message that describes the current state of the container in more detail. Can be used to provide actionable information.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="resourceConfigs")
    def resource_configs(self) -> Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfigResult']:
        return pulumi.get(self, "resource_configs")

    @property
    @pulumi.getter(name="securityContexts")
    def security_contexts(self) -> Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContextResult']:
        return pulumi.get(self, "security_contexts")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to only return resources that match the given lifecycle state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeTerminated")
    def time_terminated(self) -> str:
        return pulumi.get(self, "time_terminated")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMountResult']:
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> str:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckResult(dict):
    def __init__(__self__, *,
                 commands: Sequence[str],
                 failure_action: str,
                 failure_threshold: int,
                 headers: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeaderResult'],
                 health_check_type: str,
                 initial_delay_in_seconds: int,
                 interval_in_seconds: int,
                 name: str,
                 path: str,
                 port: int,
                 status: str,
                 status_details: str,
                 success_threshold: int,
                 timeout_in_seconds: int):
        """
        :param str name: The name of the volume. This must be unique within a single container instance.
        :param str path: (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
        """
        GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            commands=commands,
            failure_action=failure_action,
            failure_threshold=failure_threshold,
            headers=headers,
            health_check_type=health_check_type,
            initial_delay_in_seconds=initial_delay_in_seconds,
            interval_in_seconds=interval_in_seconds,
            name=name,
            path=path,
            port=port,
            status=status,
            status_details=status_details,
            success_threshold=success_threshold,
            timeout_in_seconds=timeout_in_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             commands: Sequence[str],
             failure_action: str,
             failure_threshold: int,
             headers: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeaderResult'],
             health_check_type: str,
             initial_delay_in_seconds: int,
             interval_in_seconds: int,
             name: str,
             path: str,
             port: int,
             status: str,
             status_details: str,
             success_threshold: int,
             timeout_in_seconds: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("commands", commands)
        _setter("failure_action", failure_action)
        _setter("failure_threshold", failure_threshold)
        _setter("headers", headers)
        _setter("health_check_type", health_check_type)
        _setter("initial_delay_in_seconds", initial_delay_in_seconds)
        _setter("interval_in_seconds", interval_in_seconds)
        _setter("name", name)
        _setter("path", path)
        _setter("port", port)
        _setter("status", status)
        _setter("status_details", status_details)
        _setter("success_threshold", success_threshold)
        _setter("timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter
    def commands(self) -> Sequence[str]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter(name="failureAction")
    def failure_action(self) -> str:
        return pulumi.get(self, "failure_action")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> int:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> str:
        return pulumi.get(self, "health_check_type")

    @property
    @pulumi.getter(name="initialDelayInSeconds")
    def initial_delay_in_seconds(self) -> int:
        return pulumi.get(self, "initial_delay_in_seconds")

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> int:
        return pulumi.get(self, "interval_in_seconds")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the volume. This must be unique within a single container instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> str:
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> int:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> int:
        return pulumi.get(self, "timeout_in_seconds")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of the volume. This must be unique within a single container instance.
        """
        GetContainerInstancesContainerInstanceCollectionItemContainerHealthCheckHeaderResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the volume. This must be unique within a single container instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfigResult(dict):
    def __init__(__self__, *,
                 memory_limit_in_gbs: float,
                 vcpus_limit: float):
        GetContainerInstancesContainerInstanceCollectionItemContainerResourceConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_limit_in_gbs=memory_limit_in_gbs,
            vcpus_limit=vcpus_limit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_limit_in_gbs: float,
             vcpus_limit: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("memory_limit_in_gbs", memory_limit_in_gbs)
        _setter("vcpus_limit", vcpus_limit)

    @property
    @pulumi.getter(name="memoryLimitInGbs")
    def memory_limit_in_gbs(self) -> float:
        return pulumi.get(self, "memory_limit_in_gbs")

    @property
    @pulumi.getter(name="vcpusLimit")
    def vcpus_limit(self) -> float:
        return pulumi.get(self, "vcpus_limit")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContextResult(dict):
    def __init__(__self__, *,
                 is_non_root_user_check_enabled: bool,
                 is_root_file_system_readonly: bool,
                 run_as_group: int,
                 run_as_user: int,
                 security_context_type: str):
        GetContainerInstancesContainerInstanceCollectionItemContainerSecurityContextResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_non_root_user_check_enabled=is_non_root_user_check_enabled,
            is_root_file_system_readonly=is_root_file_system_readonly,
            run_as_group=run_as_group,
            run_as_user=run_as_user,
            security_context_type=security_context_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_non_root_user_check_enabled: bool,
             is_root_file_system_readonly: bool,
             run_as_group: int,
             run_as_user: int,
             security_context_type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("is_non_root_user_check_enabled", is_non_root_user_check_enabled)
        _setter("is_root_file_system_readonly", is_root_file_system_readonly)
        _setter("run_as_group", run_as_group)
        _setter("run_as_user", run_as_user)
        _setter("security_context_type", security_context_type)

    @property
    @pulumi.getter(name="isNonRootUserCheckEnabled")
    def is_non_root_user_check_enabled(self) -> bool:
        return pulumi.get(self, "is_non_root_user_check_enabled")

    @property
    @pulumi.getter(name="isRootFileSystemReadonly")
    def is_root_file_system_readonly(self) -> bool:
        return pulumi.get(self, "is_root_file_system_readonly")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> int:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> int:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="securityContextType")
    def security_context_type(self) -> str:
        return pulumi.get(self, "security_context_type")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMountResult(dict):
    def __init__(__self__, *,
                 is_read_only: bool,
                 mount_path: str,
                 partition: int,
                 sub_path: str,
                 volume_name: str):
        GetContainerInstancesContainerInstanceCollectionItemContainerVolumeMountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            is_read_only=is_read_only,
            mount_path=mount_path,
            partition=partition,
            sub_path=sub_path,
            volume_name=volume_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             is_read_only: bool,
             mount_path: str,
             partition: int,
             sub_path: str,
             volume_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("is_read_only", is_read_only)
        _setter("mount_path", mount_path)
        _setter("partition", partition)
        _setter("sub_path", sub_path)
        _setter("volume_name", volume_name)

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> bool:
        return pulumi.get(self, "is_read_only")

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def partition(self) -> int:
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> str:
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> str:
        return pulumi.get(self, "volume_name")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemDnsConfigResult(dict):
    def __init__(__self__, *,
                 nameservers: Sequence[str],
                 options: Sequence[str],
                 searches: Sequence[str]):
        """
        :param Sequence[str] nameservers: IP address of the name server..
        :param Sequence[str] options: Options allows certain internal resolver variables to be modified.
        :param Sequence[str] searches: Search list for hostname lookup.
        """
        GetContainerInstancesContainerInstanceCollectionItemDnsConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            nameservers=nameservers,
            options=options,
            searches=searches,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             nameservers: Sequence[str],
             options: Sequence[str],
             searches: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("nameservers", nameservers)
        _setter("options", options)
        _setter("searches", searches)

    @property
    @pulumi.getter
    def nameservers(self) -> Sequence[str]:
        """
        IP address of the name server..
        """
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter
    def options(self) -> Sequence[str]:
        """
        Options allows certain internal resolver variables to be modified.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def searches(self) -> Sequence[str]:
        """
        Search list for hostname lookup.
        """
        return pulumi.get(self, "searches")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemImagePullSecretResult(dict):
    def __init__(__self__, *,
                 password: str,
                 registry_endpoint: str,
                 secret_id: str,
                 secret_type: str,
                 username: str):
        """
        :param str registry_endpoint: The registry endpoint of the container image.
        :param str secret_id: The OCID of the secret for registry credentials.
        :param str secret_type: The type of ImagePullSecret.
        """
        GetContainerInstancesContainerInstanceCollectionItemImagePullSecretResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            registry_endpoint=registry_endpoint,
            secret_id=secret_id,
            secret_type=secret_type,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: str,
             registry_endpoint: str,
             secret_id: str,
             secret_type: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("password", password)
        _setter("registry_endpoint", registry_endpoint)
        _setter("secret_id", secret_id)
        _setter("secret_type", secret_type)
        _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="registryEndpoint")
    def registry_endpoint(self) -> str:
        """
        The registry endpoint of the container image.
        """
        return pulumi.get(self, "registry_endpoint")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> str:
        """
        The OCID of the secret for registry credentials.
        """
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> str:
        """
        The type of ImagePullSecret.
        """
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 networking_bandwidth_in_gbps: float,
                 ocpus: float,
                 processor_description: str):
        """
        :param float memory_in_gbs: The total amount of memory available to the container instance, in gigabytes.
        :param float networking_bandwidth_in_gbps: The networking bandwidth available to the container instance, in gigabits per second.
        :param float ocpus: The total number of OCPUs available to the container instance.
        :param str processor_description: A short description of the container instance's processor (CPU).
        """
        GetContainerInstancesContainerInstanceCollectionItemShapeConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            networking_bandwidth_in_gbps=networking_bandwidth_in_gbps,
            ocpus=ocpus,
            processor_description=processor_description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: float,
             networking_bandwidth_in_gbps: float,
             ocpus: float,
             processor_description: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("memory_in_gbs", memory_in_gbs)
        _setter("networking_bandwidth_in_gbps", networking_bandwidth_in_gbps)
        _setter("ocpus", ocpus)
        _setter("processor_description", processor_description)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        The total amount of memory available to the container instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter(name="networkingBandwidthInGbps")
    def networking_bandwidth_in_gbps(self) -> float:
        """
        The networking bandwidth available to the container instance, in gigabits per second.
        """
        return pulumi.get(self, "networking_bandwidth_in_gbps")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        The total number of OCPUs available to the container instance.
        """
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter(name="processorDescription")
    def processor_description(self) -> str:
        """
        A short description of the container instance's processor (CPU).
        """
        return pulumi.get(self, "processor_description")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemVnicResult(dict):
    def __init__(__self__, *,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 hostname_label: str,
                 is_public_ip_assigned: bool,
                 nsg_ids: Sequence[str],
                 private_ip: str,
                 skip_source_dest_check: bool,
                 subnet_id: str,
                 vnic_id: str):
        """
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        :param str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str vnic_id: The identifier of the virtual network interface card (VNIC) over which the containers accessing this network can communicate with the larger virtual cloud network.
        """
        GetContainerInstancesContainerInstanceCollectionItemVnicResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defined_tags=defined_tags,
            display_name=display_name,
            freeform_tags=freeform_tags,
            hostname_label=hostname_label,
            is_public_ip_assigned=is_public_ip_assigned,
            nsg_ids=nsg_ids,
            private_ip=private_ip,
            skip_source_dest_check=skip_source_dest_check,
            subnet_id=subnet_id,
            vnic_id=vnic_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defined_tags: Mapping[str, Any],
             display_name: str,
             freeform_tags: Mapping[str, Any],
             hostname_label: str,
             is_public_ip_assigned: bool,
             nsg_ids: Sequence[str],
             private_ip: str,
             skip_source_dest_check: bool,
             subnet_id: str,
             vnic_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("defined_tags", defined_tags)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("hostname_label", hostname_label)
        _setter("is_public_ip_assigned", is_public_ip_assigned)
        _setter("nsg_ids", nsg_ids)
        _setter("private_ip", private_ip)
        _setter("skip_source_dest_check", skip_source_dest_check)
        _setter("subnet_id", subnet_id)
        _setter("vnic_id", vnic_id)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> str:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="isPublicIpAssigned")
    def is_public_ip_assigned(self) -> bool:
        return pulumi.get(self, "is_public_ip_assigned")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Sequence[str]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> bool:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vnicId")
    def vnic_id(self) -> str:
        """
        The identifier of the virtual network interface card (VNIC) over which the containers accessing this network can communicate with the larger virtual cloud network.
        """
        return pulumi.get(self, "vnic_id")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemVolumeResult(dict):
    def __init__(__self__, *,
                 backing_store: str,
                 configs: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemVolumeConfigResult'],
                 name: str,
                 volume_type: str):
        """
        :param str backing_store: The volume type of the empty directory, can be either File Storage or Memory.
        :param Sequence['GetContainerInstancesContainerInstanceCollectionItemVolumeConfigArgs'] configs: Contains string key value pairs which can be mounted as individual files inside the container. The value needs to be base64 encoded. It is decoded to plain text before the mount.
        :param str name: The name of the volume. This must be unique within a single container instance.
        :param str volume_type: The type of volume.
        """
        GetContainerInstancesContainerInstanceCollectionItemVolumeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backing_store=backing_store,
            configs=configs,
            name=name,
            volume_type=volume_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backing_store: str,
             configs: Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemVolumeConfigResult'],
             name: str,
             volume_type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("backing_store", backing_store)
        _setter("configs", configs)
        _setter("name", name)
        _setter("volume_type", volume_type)

    @property
    @pulumi.getter(name="backingStore")
    def backing_store(self) -> str:
        """
        The volume type of the empty directory, can be either File Storage or Memory.
        """
        return pulumi.get(self, "backing_store")

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetContainerInstancesContainerInstanceCollectionItemVolumeConfigResult']:
        """
        Contains string key value pairs which can be mounted as individual files inside the container. The value needs to be base64 encoded. It is decoded to plain text before the mount.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the volume. This must be unique within a single container instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        """
        The type of volume.
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetContainerInstancesContainerInstanceCollectionItemVolumeConfigResult(dict):
    def __init__(__self__, *,
                 data: str,
                 file_name: str,
                 path: str):
        """
        :param str data: The base64 encoded contents of the file. The contents are decoded to plain text before mounted as a file to a container inside container instance.
        :param str file_name: The name of the file. The fileName should be unique across the volume.
        :param str path: (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
        """
        GetContainerInstancesContainerInstanceCollectionItemVolumeConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data=data,
            file_name=file_name,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data: str,
             file_name: str,
             path: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data", data)
        _setter("file_name", file_name)
        _setter("path", path)

    @property
    @pulumi.getter
    def data(self) -> str:
        """
        The base64 encoded contents of the file. The contents are decoded to plain text before mounted as a file to a container inside container instance.
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        """
        The name of the file. The fileName should be unique across the volume.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        (Optional) Relative path for this file inside the volume mount directory. By default, the file is presented at the root of the volume mount path.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GetContainerInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the volume. This must be unique within a single container instance.
        """
        GetContainerInstancesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the volume. This must be unique within a single container instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


