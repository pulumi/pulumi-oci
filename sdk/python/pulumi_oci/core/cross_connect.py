# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CrossConnectArgs', 'CrossConnect']

@pulumi.input_type
class CrossConnectArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 location_name: pulumi.Input[str],
                 port_speed_shape_name: pulumi.Input[str],
                 cross_connect_group_id: Optional[pulumi.Input[str]] = None,
                 customer_reference_name: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 far_cross_connect_or_cross_connect_group_id: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 macsec_properties: Optional[pulumi.Input['CrossConnectMacsecPropertiesArgs']] = None,
                 near_cross_connect_or_cross_connect_group_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CrossConnect resource.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "location_name", location_name)
        pulumi.set(__self__, "port_speed_shape_name", port_speed_shape_name)
        if cross_connect_group_id is not None:
            pulumi.set(__self__, "cross_connect_group_id", cross_connect_group_id)
        if customer_reference_name is not None:
            pulumi.set(__self__, "customer_reference_name", customer_reference_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if far_cross_connect_or_cross_connect_group_id is not None:
            pulumi.set(__self__, "far_cross_connect_or_cross_connect_group_id", far_cross_connect_or_cross_connect_group_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if macsec_properties is not None:
            pulumi.set(__self__, "macsec_properties", macsec_properties)
        if near_cross_connect_or_cross_connect_group_id is not None:
            pulumi.set(__self__, "near_cross_connect_or_cross_connect_group_id", near_cross_connect_or_cross_connect_group_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location_name")

    @location_name.setter
    def location_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "location_name", value)

    @property
    @pulumi.getter(name="portSpeedShapeName")
    def port_speed_shape_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "port_speed_shape_name")

    @port_speed_shape_name.setter
    def port_speed_shape_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "port_speed_shape_name", value)

    @property
    @pulumi.getter(name="crossConnectGroupId")
    def cross_connect_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cross_connect_group_id")

    @cross_connect_group_id.setter
    def cross_connect_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cross_connect_group_id", value)

    @property
    @pulumi.getter(name="customerReferenceName")
    def customer_reference_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customer_reference_name")

    @customer_reference_name.setter
    def customer_reference_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_reference_name", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="farCrossConnectOrCrossConnectGroupId")
    def far_cross_connect_or_cross_connect_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "far_cross_connect_or_cross_connect_group_id")

    @far_cross_connect_or_cross_connect_group_id.setter
    def far_cross_connect_or_cross_connect_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "far_cross_connect_or_cross_connect_group_id", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter(name="macsecProperties")
    def macsec_properties(self) -> Optional[pulumi.Input['CrossConnectMacsecPropertiesArgs']]:
        return pulumi.get(self, "macsec_properties")

    @macsec_properties.setter
    def macsec_properties(self, value: Optional[pulumi.Input['CrossConnectMacsecPropertiesArgs']]):
        pulumi.set(self, "macsec_properties", value)

    @property
    @pulumi.getter(name="nearCrossConnectOrCrossConnectGroupId")
    def near_cross_connect_or_cross_connect_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "near_cross_connect_or_cross_connect_group_id")

    @near_cross_connect_or_cross_connect_group_id.setter
    def near_cross_connect_or_cross_connect_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "near_cross_connect_or_cross_connect_group_id", value)


@pulumi.input_type
class _CrossConnectState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 cross_connect_group_id: Optional[pulumi.Input[str]] = None,
                 customer_reference_name: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 far_cross_connect_or_cross_connect_group_id: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 location_name: Optional[pulumi.Input[str]] = None,
                 macsec_properties: Optional[pulumi.Input['CrossConnectMacsecPropertiesArgs']] = None,
                 near_cross_connect_or_cross_connect_group_id: Optional[pulumi.Input[str]] = None,
                 oci_logical_device_name: Optional[pulumi.Input[str]] = None,
                 oci_physical_device_name: Optional[pulumi.Input[str]] = None,
                 port_name: Optional[pulumi.Input[str]] = None,
                 port_speed_shape_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CrossConnect resources.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if cross_connect_group_id is not None:
            pulumi.set(__self__, "cross_connect_group_id", cross_connect_group_id)
        if customer_reference_name is not None:
            pulumi.set(__self__, "customer_reference_name", customer_reference_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if far_cross_connect_or_cross_connect_group_id is not None:
            pulumi.set(__self__, "far_cross_connect_or_cross_connect_group_id", far_cross_connect_or_cross_connect_group_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if location_name is not None:
            pulumi.set(__self__, "location_name", location_name)
        if macsec_properties is not None:
            pulumi.set(__self__, "macsec_properties", macsec_properties)
        if near_cross_connect_or_cross_connect_group_id is not None:
            pulumi.set(__self__, "near_cross_connect_or_cross_connect_group_id", near_cross_connect_or_cross_connect_group_id)
        if oci_logical_device_name is not None:
            pulumi.set(__self__, "oci_logical_device_name", oci_logical_device_name)
        if oci_physical_device_name is not None:
            pulumi.set(__self__, "oci_physical_device_name", oci_physical_device_name)
        if port_name is not None:
            pulumi.set(__self__, "port_name", port_name)
        if port_speed_shape_name is not None:
            pulumi.set(__self__, "port_speed_shape_name", port_speed_shape_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="crossConnectGroupId")
    def cross_connect_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cross_connect_group_id")

    @cross_connect_group_id.setter
    def cross_connect_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cross_connect_group_id", value)

    @property
    @pulumi.getter(name="customerReferenceName")
    def customer_reference_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customer_reference_name")

    @customer_reference_name.setter
    def customer_reference_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_reference_name", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="farCrossConnectOrCrossConnectGroupId")
    def far_cross_connect_or_cross_connect_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "far_cross_connect_or_cross_connect_group_id")

    @far_cross_connect_or_cross_connect_group_id.setter
    def far_cross_connect_or_cross_connect_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "far_cross_connect_or_cross_connect_group_id", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location_name")

    @location_name.setter
    def location_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location_name", value)

    @property
    @pulumi.getter(name="macsecProperties")
    def macsec_properties(self) -> Optional[pulumi.Input['CrossConnectMacsecPropertiesArgs']]:
        return pulumi.get(self, "macsec_properties")

    @macsec_properties.setter
    def macsec_properties(self, value: Optional[pulumi.Input['CrossConnectMacsecPropertiesArgs']]):
        pulumi.set(self, "macsec_properties", value)

    @property
    @pulumi.getter(name="nearCrossConnectOrCrossConnectGroupId")
    def near_cross_connect_or_cross_connect_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "near_cross_connect_or_cross_connect_group_id")

    @near_cross_connect_or_cross_connect_group_id.setter
    def near_cross_connect_or_cross_connect_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "near_cross_connect_or_cross_connect_group_id", value)

    @property
    @pulumi.getter(name="ociLogicalDeviceName")
    def oci_logical_device_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oci_logical_device_name")

    @oci_logical_device_name.setter
    def oci_logical_device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oci_logical_device_name", value)

    @property
    @pulumi.getter(name="ociPhysicalDeviceName")
    def oci_physical_device_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oci_physical_device_name")

    @oci_physical_device_name.setter
    def oci_physical_device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oci_physical_device_name", value)

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_name")

    @port_name.setter
    def port_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_name", value)

    @property
    @pulumi.getter(name="portSpeedShapeName")
    def port_speed_shape_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_speed_shape_name")

    @port_speed_shape_name.setter
    def port_speed_shape_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_speed_shape_name", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)


class CrossConnect(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 cross_connect_group_id: Optional[pulumi.Input[str]] = None,
                 customer_reference_name: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 far_cross_connect_or_cross_connect_group_id: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 location_name: Optional[pulumi.Input[str]] = None,
                 macsec_properties: Optional[pulumi.Input[pulumi.InputType['CrossConnectMacsecPropertiesArgs']]] = None,
                 near_cross_connect_or_cross_connect_group_id: Optional[pulumi.Input[str]] = None,
                 port_speed_shape_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a CrossConnect resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CrossConnectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CrossConnect resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CrossConnectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CrossConnectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 cross_connect_group_id: Optional[pulumi.Input[str]] = None,
                 customer_reference_name: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 far_cross_connect_or_cross_connect_group_id: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_active: Optional[pulumi.Input[bool]] = None,
                 location_name: Optional[pulumi.Input[str]] = None,
                 macsec_properties: Optional[pulumi.Input[pulumi.InputType['CrossConnectMacsecPropertiesArgs']]] = None,
                 near_cross_connect_or_cross_connect_group_id: Optional[pulumi.Input[str]] = None,
                 port_speed_shape_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CrossConnectArgs.__new__(CrossConnectArgs)

            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["cross_connect_group_id"] = cross_connect_group_id
            __props__.__dict__["customer_reference_name"] = customer_reference_name
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["far_cross_connect_or_cross_connect_group_id"] = far_cross_connect_or_cross_connect_group_id
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["is_active"] = is_active
            if location_name is None and not opts.urn:
                raise TypeError("Missing required property 'location_name'")
            __props__.__dict__["location_name"] = location_name
            __props__.__dict__["macsec_properties"] = macsec_properties
            __props__.__dict__["near_cross_connect_or_cross_connect_group_id"] = near_cross_connect_or_cross_connect_group_id
            if port_speed_shape_name is None and not opts.urn:
                raise TypeError("Missing required property 'port_speed_shape_name'")
            __props__.__dict__["port_speed_shape_name"] = port_speed_shape_name
            __props__.__dict__["oci_logical_device_name"] = None
            __props__.__dict__["oci_physical_device_name"] = None
            __props__.__dict__["port_name"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
        super(CrossConnect, __self__).__init__(
            'oci:Core/crossConnect:CrossConnect',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            cross_connect_group_id: Optional[pulumi.Input[str]] = None,
            customer_reference_name: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            far_cross_connect_or_cross_connect_group_id: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            is_active: Optional[pulumi.Input[bool]] = None,
            location_name: Optional[pulumi.Input[str]] = None,
            macsec_properties: Optional[pulumi.Input[pulumi.InputType['CrossConnectMacsecPropertiesArgs']]] = None,
            near_cross_connect_or_cross_connect_group_id: Optional[pulumi.Input[str]] = None,
            oci_logical_device_name: Optional[pulumi.Input[str]] = None,
            oci_physical_device_name: Optional[pulumi.Input[str]] = None,
            port_name: Optional[pulumi.Input[str]] = None,
            port_speed_shape_name: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None) -> 'CrossConnect':
        """
        Get an existing CrossConnect resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CrossConnectState.__new__(_CrossConnectState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["cross_connect_group_id"] = cross_connect_group_id
        __props__.__dict__["customer_reference_name"] = customer_reference_name
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["far_cross_connect_or_cross_connect_group_id"] = far_cross_connect_or_cross_connect_group_id
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["is_active"] = is_active
        __props__.__dict__["location_name"] = location_name
        __props__.__dict__["macsec_properties"] = macsec_properties
        __props__.__dict__["near_cross_connect_or_cross_connect_group_id"] = near_cross_connect_or_cross_connect_group_id
        __props__.__dict__["oci_logical_device_name"] = oci_logical_device_name
        __props__.__dict__["oci_physical_device_name"] = oci_physical_device_name
        __props__.__dict__["port_name"] = port_name
        __props__.__dict__["port_speed_shape_name"] = port_speed_shape_name
        __props__.__dict__["state"] = state
        __props__.__dict__["time_created"] = time_created
        return CrossConnect(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="crossConnectGroupId")
    def cross_connect_group_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cross_connect_group_id")

    @property
    @pulumi.getter(name="customerReferenceName")
    def customer_reference_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "customer_reference_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="farCrossConnectOrCrossConnectGroupId")
    def far_cross_connect_or_cross_connect_group_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "far_cross_connect_or_cross_connect_group_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "location_name")

    @property
    @pulumi.getter(name="macsecProperties")
    def macsec_properties(self) -> pulumi.Output[Optional['outputs.CrossConnectMacsecProperties']]:
        return pulumi.get(self, "macsec_properties")

    @property
    @pulumi.getter(name="nearCrossConnectOrCrossConnectGroupId")
    def near_cross_connect_or_cross_connect_group_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "near_cross_connect_or_cross_connect_group_id")

    @property
    @pulumi.getter(name="ociLogicalDeviceName")
    def oci_logical_device_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oci_logical_device_name")

    @property
    @pulumi.getter(name="ociPhysicalDeviceName")
    def oci_physical_device_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oci_physical_device_name")

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "port_name")

    @property
    @pulumi.getter(name="portSpeedShapeName")
    def port_speed_shape_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "port_speed_shape_name")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

