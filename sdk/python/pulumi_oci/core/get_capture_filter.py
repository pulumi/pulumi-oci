# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetCaptureFilterResult',
    'AwaitableGetCaptureFilterResult',
    'get_capture_filter',
    'get_capture_filter_output',
]

@pulumi.output_type
class GetCaptureFilterResult:
    """
    A collection of values returned by getCaptureFilter.
    """
    def __init__(__self__, capture_filter_id=None, compartment_id=None, defined_tags=None, display_name=None, filter_type=None, flow_log_capture_filter_rules=None, freeform_tags=None, id=None, state=None, time_created=None, vtap_capture_filter_rules=None):
        if capture_filter_id and not isinstance(capture_filter_id, str):
            raise TypeError("Expected argument 'capture_filter_id' to be a str")
        pulumi.set(__self__, "capture_filter_id", capture_filter_id)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filter_type and not isinstance(filter_type, str):
            raise TypeError("Expected argument 'filter_type' to be a str")
        pulumi.set(__self__, "filter_type", filter_type)
        if flow_log_capture_filter_rules and not isinstance(flow_log_capture_filter_rules, list):
            raise TypeError("Expected argument 'flow_log_capture_filter_rules' to be a list")
        pulumi.set(__self__, "flow_log_capture_filter_rules", flow_log_capture_filter_rules)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if vtap_capture_filter_rules and not isinstance(vtap_capture_filter_rules, list):
            raise TypeError("Expected argument 'vtap_capture_filter_rules' to be a list")
        pulumi.set(__self__, "vtap_capture_filter_rules", vtap_capture_filter_rules)

    @property
    @pulumi.getter(name="captureFilterId")
    def capture_filter_id(self) -> str:
        return pulumi.get(self, "capture_filter_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="flowLogCaptureFilterRules")
    def flow_log_capture_filter_rules(self) -> Optional[Sequence['outputs.GetCaptureFilterFlowLogCaptureFilterRuleResult']]:
        return pulumi.get(self, "flow_log_capture_filter_rules")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vtapCaptureFilterRules")
    def vtap_capture_filter_rules(self) -> Optional[Sequence['outputs.GetCaptureFilterVtapCaptureFilterRuleResult']]:
        return pulumi.get(self, "vtap_capture_filter_rules")


class AwaitableGetCaptureFilterResult(GetCaptureFilterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCaptureFilterResult(
            capture_filter_id=self.capture_filter_id,
            compartment_id=self.compartment_id,
            defined_tags=self.defined_tags,
            display_name=self.display_name,
            filter_type=self.filter_type,
            flow_log_capture_filter_rules=self.flow_log_capture_filter_rules,
            freeform_tags=self.freeform_tags,
            id=self.id,
            state=self.state,
            time_created=self.time_created,
            vtap_capture_filter_rules=self.vtap_capture_filter_rules)


def get_capture_filter(capture_filter_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCaptureFilterResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['captureFilterId'] = capture_filter_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Core/getCaptureFilter:getCaptureFilter', __args__, opts=opts, typ=GetCaptureFilterResult).value

    return AwaitableGetCaptureFilterResult(
        capture_filter_id=pulumi.get(__ret__, 'capture_filter_id'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        display_name=pulumi.get(__ret__, 'display_name'),
        filter_type=pulumi.get(__ret__, 'filter_type'),
        flow_log_capture_filter_rules=pulumi.get(__ret__, 'flow_log_capture_filter_rules'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        id=pulumi.get(__ret__, 'id'),
        state=pulumi.get(__ret__, 'state'),
        time_created=pulumi.get(__ret__, 'time_created'),
        vtap_capture_filter_rules=pulumi.get(__ret__, 'vtap_capture_filter_rules'))


@_utilities.lift_output_func(get_capture_filter)
def get_capture_filter_output(capture_filter_id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCaptureFilterResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
