# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetCnvDnsResolverAssociationResult',
    'AwaitableGetCnvDnsResolverAssociationResult',
    'get_cnv_dns_resolver_association',
    'get_cnv_dns_resolver_association_output',
]

@pulumi.output_type
class GetCnvDnsResolverAssociationResult:
    """
    A collection of values returned by getCnvDnsResolverAssociation.
    """
    def __init__(__self__, dns_resolver_id=None, id=None, state=None, vcn_id=None):
        if dns_resolver_id and not isinstance(dns_resolver_id, str):
            raise TypeError("Expected argument 'dns_resolver_id' to be a str")
        pulumi.set(__self__, "dns_resolver_id", dns_resolver_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if vcn_id and not isinstance(vcn_id, str):
            raise TypeError("Expected argument 'vcn_id' to be a str")
        pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="dnsResolverId")
    def dns_resolver_id(self) -> Optional[str]:
        return pulumi.get(self, "dns_resolver_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> str:
        return pulumi.get(self, "vcn_id")


class AwaitableGetCnvDnsResolverAssociationResult(GetCnvDnsResolverAssociationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCnvDnsResolverAssociationResult(
            dns_resolver_id=self.dns_resolver_id,
            id=self.id,
            state=self.state,
            vcn_id=self.vcn_id)


def get_cnv_dns_resolver_association(vcn_id: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCnvDnsResolverAssociationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['vcnId'] = vcn_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Core/getCnvDnsResolverAssociation:getCnvDnsResolverAssociation', __args__, opts=opts, typ=GetCnvDnsResolverAssociationResult).value

    return AwaitableGetCnvDnsResolverAssociationResult(
        dns_resolver_id=pulumi.get(__ret__, 'dns_resolver_id'),
        id=pulumi.get(__ret__, 'id'),
        state=pulumi.get(__ret__, 'state'),
        vcn_id=pulumi.get(__ret__, 'vcn_id'))


@_utilities.lift_output_func(get_cnv_dns_resolver_association)
def get_cnv_dns_resolver_association_output(vcn_id: Optional[pulumi.Input[str]] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCnvDnsResolverAssociationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
