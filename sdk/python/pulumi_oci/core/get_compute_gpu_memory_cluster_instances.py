# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetComputeGpuMemoryClusterInstancesResult',
    'AwaitableGetComputeGpuMemoryClusterInstancesResult',
    'get_compute_gpu_memory_cluster_instances',
    'get_compute_gpu_memory_cluster_instances_output',
]

@pulumi.output_type
class GetComputeGpuMemoryClusterInstancesResult:
    """
    A collection of values returned by getComputeGpuMemoryClusterInstances.
    """
    def __init__(__self__, compute_gpu_memory_cluster_id=None, compute_gpu_memory_cluster_instance_collections=None, filters=None, id=None):
        if compute_gpu_memory_cluster_id and not isinstance(compute_gpu_memory_cluster_id, str):
            raise TypeError("Expected argument 'compute_gpu_memory_cluster_id' to be a str")
        pulumi.set(__self__, "compute_gpu_memory_cluster_id", compute_gpu_memory_cluster_id)
        if compute_gpu_memory_cluster_instance_collections and not isinstance(compute_gpu_memory_cluster_instance_collections, list):
            raise TypeError("Expected argument 'compute_gpu_memory_cluster_instance_collections' to be a list")
        pulumi.set(__self__, "compute_gpu_memory_cluster_instance_collections", compute_gpu_memory_cluster_instance_collections)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="computeGpuMemoryClusterId")
    def compute_gpu_memory_cluster_id(self) -> str:
        return pulumi.get(self, "compute_gpu_memory_cluster_id")

    @property
    @pulumi.getter(name="computeGpuMemoryClusterInstanceCollections")
    def compute_gpu_memory_cluster_instance_collections(self) -> Sequence['outputs.GetComputeGpuMemoryClusterInstancesComputeGpuMemoryClusterInstanceCollectionResult']:
        """
        The list of compute_gpu_memory_cluster_instance_collection.
        """
        return pulumi.get(self, "compute_gpu_memory_cluster_instance_collections")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetComputeGpuMemoryClusterInstancesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetComputeGpuMemoryClusterInstancesResult(GetComputeGpuMemoryClusterInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComputeGpuMemoryClusterInstancesResult(
            compute_gpu_memory_cluster_id=self.compute_gpu_memory_cluster_id,
            compute_gpu_memory_cluster_instance_collections=self.compute_gpu_memory_cluster_instance_collections,
            filters=self.filters,
            id=self.id)


def get_compute_gpu_memory_cluster_instances(compute_gpu_memory_cluster_id: Optional[str] = None,
                                             filters: Optional[Sequence[Union['GetComputeGpuMemoryClusterInstancesFilterArgs', 'GetComputeGpuMemoryClusterInstancesFilterArgsDict']]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComputeGpuMemoryClusterInstancesResult:
    """
    This data source provides the list of Compute Gpu Memory Cluster Instances in Oracle Cloud Infrastructure Core service.

    List all of the GPU memory cluster instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_compute_gpu_memory_cluster_instances = oci.Core.get_compute_gpu_memory_cluster_instances(compute_gpu_memory_cluster_id=test_compute_gpu_memory_cluster["id"])
    ```


    :param str compute_gpu_memory_cluster_id: The OCID of the compute GPU memory cluster.
    """
    __args__ = dict()
    __args__['computeGpuMemoryClusterId'] = compute_gpu_memory_cluster_id
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Core/getComputeGpuMemoryClusterInstances:getComputeGpuMemoryClusterInstances', __args__, opts=opts, typ=GetComputeGpuMemoryClusterInstancesResult).value

    return AwaitableGetComputeGpuMemoryClusterInstancesResult(
        compute_gpu_memory_cluster_id=pulumi.get(__ret__, 'compute_gpu_memory_cluster_id'),
        compute_gpu_memory_cluster_instance_collections=pulumi.get(__ret__, 'compute_gpu_memory_cluster_instance_collections'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'))
def get_compute_gpu_memory_cluster_instances_output(compute_gpu_memory_cluster_id: Optional[pulumi.Input[str]] = None,
                                                    filters: Optional[pulumi.Input[Optional[Sequence[Union['GetComputeGpuMemoryClusterInstancesFilterArgs', 'GetComputeGpuMemoryClusterInstancesFilterArgsDict']]]]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetComputeGpuMemoryClusterInstancesResult]:
    """
    This data source provides the list of Compute Gpu Memory Cluster Instances in Oracle Cloud Infrastructure Core service.

    List all of the GPU memory cluster instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_compute_gpu_memory_cluster_instances = oci.Core.get_compute_gpu_memory_cluster_instances(compute_gpu_memory_cluster_id=test_compute_gpu_memory_cluster["id"])
    ```


    :param str compute_gpu_memory_cluster_id: The OCID of the compute GPU memory cluster.
    """
    __args__ = dict()
    __args__['computeGpuMemoryClusterId'] = compute_gpu_memory_cluster_id
    __args__['filters'] = filters
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:Core/getComputeGpuMemoryClusterInstances:getComputeGpuMemoryClusterInstances', __args__, opts=opts, typ=GetComputeGpuMemoryClusterInstancesResult)
    return __ret__.apply(lambda __response__: GetComputeGpuMemoryClusterInstancesResult(
        compute_gpu_memory_cluster_id=pulumi.get(__response__, 'compute_gpu_memory_cluster_id'),
        compute_gpu_memory_cluster_instance_collections=pulumi.get(__response__, 'compute_gpu_memory_cluster_instance_collections'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id')))
