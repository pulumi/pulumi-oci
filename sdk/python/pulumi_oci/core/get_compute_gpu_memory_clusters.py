# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetComputeGpuMemoryClustersResult',
    'AwaitableGetComputeGpuMemoryClustersResult',
    'get_compute_gpu_memory_clusters',
    'get_compute_gpu_memory_clusters_output',
]

@pulumi.output_type
class GetComputeGpuMemoryClustersResult:
    """
    A collection of values returned by getComputeGpuMemoryClusters.
    """
    def __init__(__self__, availability_domain=None, compartment_id=None, compute_cluster_id=None, compute_gpu_memory_cluster_collections=None, compute_gpu_memory_cluster_id=None, display_name=None, filters=None, id=None):
        if availability_domain and not isinstance(availability_domain, str):
            raise TypeError("Expected argument 'availability_domain' to be a str")
        pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if compute_cluster_id and not isinstance(compute_cluster_id, str):
            raise TypeError("Expected argument 'compute_cluster_id' to be a str")
        pulumi.set(__self__, "compute_cluster_id", compute_cluster_id)
        if compute_gpu_memory_cluster_collections and not isinstance(compute_gpu_memory_cluster_collections, list):
            raise TypeError("Expected argument 'compute_gpu_memory_cluster_collections' to be a list")
        pulumi.set(__self__, "compute_gpu_memory_cluster_collections", compute_gpu_memory_cluster_collections)
        if compute_gpu_memory_cluster_id and not isinstance(compute_gpu_memory_cluster_id, str):
            raise TypeError("Expected argument 'compute_gpu_memory_cluster_id' to be a str")
        pulumi.set(__self__, "compute_gpu_memory_cluster_id", compute_gpu_memory_cluster_id)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        """
        The availability domain of the GPU memory cluster.
        """
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the compute GPU memory cluster.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeClusterId")
    def compute_cluster_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute cluster.
        """
        return pulumi.get(self, "compute_cluster_id")

    @property
    @pulumi.getter(name="computeGpuMemoryClusterCollections")
    def compute_gpu_memory_cluster_collections(self) -> Sequence['outputs.GetComputeGpuMemoryClustersComputeGpuMemoryClusterCollectionResult']:
        """
        The list of compute_gpu_memory_cluster_collection.
        """
        return pulumi.get(self, "compute_gpu_memory_cluster_collections")

    @property
    @pulumi.getter(name="computeGpuMemoryClusterId")
    def compute_gpu_memory_cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "compute_gpu_memory_cluster_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetComputeGpuMemoryClustersFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetComputeGpuMemoryClustersResult(GetComputeGpuMemoryClustersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComputeGpuMemoryClustersResult(
            availability_domain=self.availability_domain,
            compartment_id=self.compartment_id,
            compute_cluster_id=self.compute_cluster_id,
            compute_gpu_memory_cluster_collections=self.compute_gpu_memory_cluster_collections,
            compute_gpu_memory_cluster_id=self.compute_gpu_memory_cluster_id,
            display_name=self.display_name,
            filters=self.filters,
            id=self.id)


def get_compute_gpu_memory_clusters(availability_domain: Optional[str] = None,
                                    compartment_id: Optional[str] = None,
                                    compute_cluster_id: Optional[str] = None,
                                    compute_gpu_memory_cluster_id: Optional[str] = None,
                                    display_name: Optional[str] = None,
                                    filters: Optional[Sequence[Union['GetComputeGpuMemoryClustersFilterArgs', 'GetComputeGpuMemoryClustersFilterArgsDict']]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComputeGpuMemoryClustersResult:
    """
    This data source provides the list of Compute Gpu Memory Clusters in Oracle Cloud Infrastructure Core service.

    List all of the compute GPU memory clusters.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_compute_gpu_memory_clusters = oci.Core.get_compute_gpu_memory_clusters(compartment_id=compartment_id,
        availability_domain=compute_gpu_memory_cluster_availability_domain,
        compute_cluster_id=test_compute_cluster["id"],
        compute_gpu_memory_cluster_id=test_compute_gpu_memory_cluster["id"],
        display_name=compute_gpu_memory_cluster_display_name)
    ```


    :param str availability_domain: The name of the availability domain.  Example: `Uocm:PHX-AD-1`
    :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
    :param str compute_cluster_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute cluster. A [compute cluster](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/compute-clusters.htm) is a remote direct memory access (RDMA) network group.
    :param str compute_gpu_memory_cluster_id: A filter to return only the listings that matches the given GPU memory cluster id.
    :param str display_name: A filter to return only resources that match the given display name exactly.
    """
    __args__ = dict()
    __args__['availabilityDomain'] = availability_domain
    __args__['compartmentId'] = compartment_id
    __args__['computeClusterId'] = compute_cluster_id
    __args__['computeGpuMemoryClusterId'] = compute_gpu_memory_cluster_id
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Core/getComputeGpuMemoryClusters:getComputeGpuMemoryClusters', __args__, opts=opts, typ=GetComputeGpuMemoryClustersResult).value

    return AwaitableGetComputeGpuMemoryClustersResult(
        availability_domain=pulumi.get(__ret__, 'availability_domain'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        compute_cluster_id=pulumi.get(__ret__, 'compute_cluster_id'),
        compute_gpu_memory_cluster_collections=pulumi.get(__ret__, 'compute_gpu_memory_cluster_collections'),
        compute_gpu_memory_cluster_id=pulumi.get(__ret__, 'compute_gpu_memory_cluster_id'),
        display_name=pulumi.get(__ret__, 'display_name'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'))
def get_compute_gpu_memory_clusters_output(availability_domain: Optional[pulumi.Input[Optional[str]]] = None,
                                           compartment_id: Optional[pulumi.Input[str]] = None,
                                           compute_cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                                           compute_gpu_memory_cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                                           display_name: Optional[pulumi.Input[Optional[str]]] = None,
                                           filters: Optional[pulumi.Input[Optional[Sequence[Union['GetComputeGpuMemoryClustersFilterArgs', 'GetComputeGpuMemoryClustersFilterArgsDict']]]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetComputeGpuMemoryClustersResult]:
    """
    This data source provides the list of Compute Gpu Memory Clusters in Oracle Cloud Infrastructure Core service.

    List all of the compute GPU memory clusters.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_compute_gpu_memory_clusters = oci.Core.get_compute_gpu_memory_clusters(compartment_id=compartment_id,
        availability_domain=compute_gpu_memory_cluster_availability_domain,
        compute_cluster_id=test_compute_cluster["id"],
        compute_gpu_memory_cluster_id=test_compute_gpu_memory_cluster["id"],
        display_name=compute_gpu_memory_cluster_display_name)
    ```


    :param str availability_domain: The name of the availability domain.  Example: `Uocm:PHX-AD-1`
    :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
    :param str compute_cluster_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute cluster. A [compute cluster](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/compute-clusters.htm) is a remote direct memory access (RDMA) network group.
    :param str compute_gpu_memory_cluster_id: A filter to return only the listings that matches the given GPU memory cluster id.
    :param str display_name: A filter to return only resources that match the given display name exactly.
    """
    __args__ = dict()
    __args__['availabilityDomain'] = availability_domain
    __args__['compartmentId'] = compartment_id
    __args__['computeClusterId'] = compute_cluster_id
    __args__['computeGpuMemoryClusterId'] = compute_gpu_memory_cluster_id
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:Core/getComputeGpuMemoryClusters:getComputeGpuMemoryClusters', __args__, opts=opts, typ=GetComputeGpuMemoryClustersResult)
    return __ret__.apply(lambda __response__: GetComputeGpuMemoryClustersResult(
        availability_domain=pulumi.get(__response__, 'availability_domain'),
        compartment_id=pulumi.get(__response__, 'compartment_id'),
        compute_cluster_id=pulumi.get(__response__, 'compute_cluster_id'),
        compute_gpu_memory_cluster_collections=pulumi.get(__response__, 'compute_gpu_memory_cluster_collections'),
        compute_gpu_memory_cluster_id=pulumi.get(__response__, 'compute_gpu_memory_cluster_id'),
        display_name=pulumi.get(__response__, 'display_name'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id')))
