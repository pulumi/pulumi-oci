# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPeerRegionForRemotePeeringsResult',
    'AwaitableGetPeerRegionForRemotePeeringsResult',
    'get_peer_region_for_remote_peerings',
    'get_peer_region_for_remote_peerings_output',
]

@pulumi.output_type
class GetPeerRegionForRemotePeeringsResult:
    """
    A collection of values returned by getPeerRegionForRemotePeerings.
    """
    def __init__(__self__, filters=None, id=None, peer_region_for_remote_peerings=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if peer_region_for_remote_peerings and not isinstance(peer_region_for_remote_peerings, list):
            raise TypeError("Expected argument 'peer_region_for_remote_peerings' to be a list")
        pulumi.set(__self__, "peer_region_for_remote_peerings", peer_region_for_remote_peerings)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetPeerRegionForRemotePeeringsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="peerRegionForRemotePeerings")
    def peer_region_for_remote_peerings(self) -> Sequence['outputs.GetPeerRegionForRemotePeeringsPeerRegionForRemotePeeringResult']:
        """
        The list of peer_region_for_remote_peerings.
        """
        return pulumi.get(self, "peer_region_for_remote_peerings")


class AwaitableGetPeerRegionForRemotePeeringsResult(GetPeerRegionForRemotePeeringsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPeerRegionForRemotePeeringsResult(
            filters=self.filters,
            id=self.id,
            peer_region_for_remote_peerings=self.peer_region_for_remote_peerings)


def get_peer_region_for_remote_peerings(filters: Optional[Sequence[pulumi.InputType['GetPeerRegionForRemotePeeringsFilterArgs']]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPeerRegionForRemotePeeringsResult:
    """
    This data source provides the list of Peer Region For Remote Peerings in Oracle Cloud Infrastructure Core service.

    Lists the regions that support remote VCN peering (which is peering across regions).
    For more information, see [VCN Peering](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/VCNpeering.htm).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_peer_region_for_remote_peerings = oci.Core.get_peer_region_for_remote_peerings()
    ```
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Core/getPeerRegionForRemotePeerings:getPeerRegionForRemotePeerings', __args__, opts=opts, typ=GetPeerRegionForRemotePeeringsResult).value

    return AwaitableGetPeerRegionForRemotePeeringsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        peer_region_for_remote_peerings=pulumi.get(__ret__, 'peer_region_for_remote_peerings'))


@_utilities.lift_output_func(get_peer_region_for_remote_peerings)
def get_peer_region_for_remote_peerings_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetPeerRegionForRemotePeeringsFilterArgs']]]]] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPeerRegionForRemotePeeringsResult]:
    """
    This data source provides the list of Peer Region For Remote Peerings in Oracle Cloud Infrastructure Core service.

    Lists the regions that support remote VCN peering (which is peering across regions).
    For more information, see [VCN Peering](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/VCNpeering.htm).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_peer_region_for_remote_peerings = oci.Core.get_peer_region_for_remote_peerings()
    ```
    """
    ...
