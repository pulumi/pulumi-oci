# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetVolumeGroupReplicasResult',
    'AwaitableGetVolumeGroupReplicasResult',
    'get_volume_group_replicas',
    'get_volume_group_replicas_output',
]

@pulumi.output_type
class GetVolumeGroupReplicasResult:
    """
    A collection of values returned by getVolumeGroupReplicas.
    """
    def __init__(__self__, availability_domain=None, compartment_id=None, display_name=None, filters=None, id=None, state=None, volume_group_replicas=None):
        if availability_domain and not isinstance(availability_domain, str):
            raise TypeError("Expected argument 'availability_domain' to be a str")
        pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if volume_group_replicas and not isinstance(volume_group_replicas, list):
            raise TypeError("Expected argument 'volume_group_replicas' to be a list")
        pulumi.set(__self__, "volume_group_replicas", volume_group_replicas)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        """
        The availability domain of the volume group replica.
        """
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment that contains the volume group replica.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetVolumeGroupReplicasFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of a volume group.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="volumeGroupReplicas")
    def volume_group_replicas(self) -> Sequence['outputs.GetVolumeGroupReplicasVolumeGroupReplicaResult']:
        """
        The list of volume_group_replicas.
        """
        return pulumi.get(self, "volume_group_replicas")


class AwaitableGetVolumeGroupReplicasResult(GetVolumeGroupReplicasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVolumeGroupReplicasResult(
            availability_domain=self.availability_domain,
            compartment_id=self.compartment_id,
            display_name=self.display_name,
            filters=self.filters,
            id=self.id,
            state=self.state,
            volume_group_replicas=self.volume_group_replicas)


def get_volume_group_replicas(availability_domain: Optional[str] = None,
                              compartment_id: Optional[str] = None,
                              display_name: Optional[str] = None,
                              filters: Optional[Sequence[pulumi.InputType['GetVolumeGroupReplicasFilterArgs']]] = None,
                              state: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVolumeGroupReplicasResult:
    """
    This data source provides the list of Volume Group Replicas in Oracle Cloud Infrastructure Core service.

    Lists the volume group replicas in the specified compartment. You can filter the results by volume group.
    For more information, see [Volume Group Replication](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroupreplication.htm).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_volume_group_replicas = oci.Core.get_volume_group_replicas(availability_domain=var["volume_group_replica_availability_domain"],
        compartment_id=var["compartment_id"],
        display_name=var["volume_group_replica_display_name"],
        state=var["volume_group_replica_state"])
    ```


    :param str availability_domain: The name of the availability domain.  Example: `Uocm:PHX-AD-1`
    :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
    :param str display_name: A filter to return only resources that match the given display name exactly.
    :param str state: A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
    """
    __args__ = dict()
    __args__['availabilityDomain'] = availability_domain
    __args__['compartmentId'] = compartment_id
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Core/getVolumeGroupReplicas:getVolumeGroupReplicas', __args__, opts=opts, typ=GetVolumeGroupReplicasResult).value

    return AwaitableGetVolumeGroupReplicasResult(
        availability_domain=pulumi.get(__ret__, 'availability_domain'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        display_name=pulumi.get(__ret__, 'display_name'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        state=pulumi.get(__ret__, 'state'),
        volume_group_replicas=pulumi.get(__ret__, 'volume_group_replicas'))


@_utilities.lift_output_func(get_volume_group_replicas)
def get_volume_group_replicas_output(availability_domain: Optional[pulumi.Input[str]] = None,
                                     compartment_id: Optional[pulumi.Input[str]] = None,
                                     display_name: Optional[pulumi.Input[Optional[str]]] = None,
                                     filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetVolumeGroupReplicasFilterArgs']]]]] = None,
                                     state: Optional[pulumi.Input[Optional[str]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVolumeGroupReplicasResult]:
    """
    This data source provides the list of Volume Group Replicas in Oracle Cloud Infrastructure Core service.

    Lists the volume group replicas in the specified compartment. You can filter the results by volume group.
    For more information, see [Volume Group Replication](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroupreplication.htm).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_volume_group_replicas = oci.Core.get_volume_group_replicas(availability_domain=var["volume_group_replica_availability_domain"],
        compartment_id=var["compartment_id"],
        display_name=var["volume_group_replica_display_name"],
        state=var["volume_group_replica_state"])
    ```


    :param str availability_domain: The name of the availability domain.  Example: `Uocm:PHX-AD-1`
    :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
    :param str display_name: A filter to return only resources that match the given display name exactly.
    :param str state: A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
    """
    ...
