# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['IpsecArgs', 'Ipsec']

@pulumi.input_type
class IpsecArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 cpe_id: pulumi.Input[str],
                 drg_id: pulumi.Input[str],
                 static_routes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 cpe_local_identifier: Optional[pulumi.Input[str]] = None,
                 cpe_local_identifier_type: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a Ipsec resource.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "cpe_id", cpe_id)
        pulumi.set(__self__, "drg_id", drg_id)
        pulumi.set(__self__, "static_routes", static_routes)
        if cpe_local_identifier is not None:
            pulumi.set(__self__, "cpe_local_identifier", cpe_local_identifier)
        if cpe_local_identifier_type is not None:
            pulumi.set(__self__, "cpe_local_identifier_type", cpe_local_identifier_type)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="cpeId")
    def cpe_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cpe_id")

    @cpe_id.setter
    def cpe_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cpe_id", value)

    @property
    @pulumi.getter(name="drgId")
    def drg_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "drg_id")

    @drg_id.setter
    def drg_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "drg_id", value)

    @property
    @pulumi.getter(name="staticRoutes")
    def static_routes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "static_routes")

    @static_routes.setter
    def static_routes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "static_routes", value)

    @property
    @pulumi.getter(name="cpeLocalIdentifier")
    def cpe_local_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpe_local_identifier")

    @cpe_local_identifier.setter
    def cpe_local_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpe_local_identifier", value)

    @property
    @pulumi.getter(name="cpeLocalIdentifierType")
    def cpe_local_identifier_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpe_local_identifier_type")

    @cpe_local_identifier_type.setter
    def cpe_local_identifier_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpe_local_identifier_type", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)


@pulumi.input_type
class _IpsecState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 cpe_id: Optional[pulumi.Input[str]] = None,
                 cpe_local_identifier: Optional[pulumi.Input[str]] = None,
                 cpe_local_identifier_type: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 drg_id: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 static_routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 transport_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ipsec resources.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if cpe_id is not None:
            pulumi.set(__self__, "cpe_id", cpe_id)
        if cpe_local_identifier is not None:
            pulumi.set(__self__, "cpe_local_identifier", cpe_local_identifier)
        if cpe_local_identifier_type is not None:
            pulumi.set(__self__, "cpe_local_identifier_type", cpe_local_identifier_type)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if drg_id is not None:
            pulumi.set(__self__, "drg_id", drg_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if static_routes is not None:
            pulumi.set(__self__, "static_routes", static_routes)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if transport_type is not None:
            pulumi.set(__self__, "transport_type", transport_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="cpeId")
    def cpe_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpe_id")

    @cpe_id.setter
    def cpe_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpe_id", value)

    @property
    @pulumi.getter(name="cpeLocalIdentifier")
    def cpe_local_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpe_local_identifier")

    @cpe_local_identifier.setter
    def cpe_local_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpe_local_identifier", value)

    @property
    @pulumi.getter(name="cpeLocalIdentifierType")
    def cpe_local_identifier_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpe_local_identifier_type")

    @cpe_local_identifier_type.setter
    def cpe_local_identifier_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpe_local_identifier_type", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="drgId")
    def drg_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drg_id")

    @drg_id.setter
    def drg_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drg_id", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="staticRoutes")
    def static_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "static_routes")

    @static_routes.setter
    def static_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "static_routes", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="transportType")
    def transport_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transport_type")

    @transport_type.setter
    def transport_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport_type", value)


class Ipsec(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 cpe_id: Optional[pulumi.Input[str]] = None,
                 cpe_local_identifier: Optional[pulumi.Input[str]] = None,
                 cpe_local_identifier_type: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 drg_id: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 static_routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a Ipsec resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IpsecArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Ipsec resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IpsecArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IpsecArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 cpe_id: Optional[pulumi.Input[str]] = None,
                 cpe_local_identifier: Optional[pulumi.Input[str]] = None,
                 cpe_local_identifier_type: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 drg_id: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 static_routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IpsecArgs.__new__(IpsecArgs)

            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            if cpe_id is None and not opts.urn:
                raise TypeError("Missing required property 'cpe_id'")
            __props__.__dict__["cpe_id"] = cpe_id
            __props__.__dict__["cpe_local_identifier"] = cpe_local_identifier
            __props__.__dict__["cpe_local_identifier_type"] = cpe_local_identifier_type
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["display_name"] = display_name
            if drg_id is None and not opts.urn:
                raise TypeError("Missing required property 'drg_id'")
            __props__.__dict__["drg_id"] = drg_id
            __props__.__dict__["freeform_tags"] = freeform_tags
            if static_routes is None and not opts.urn:
                raise TypeError("Missing required property 'static_routes'")
            __props__.__dict__["static_routes"] = static_routes
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["transport_type"] = None
        super(Ipsec, __self__).__init__(
            'oci:Core/ipsec:Ipsec',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            cpe_id: Optional[pulumi.Input[str]] = None,
            cpe_local_identifier: Optional[pulumi.Input[str]] = None,
            cpe_local_identifier_type: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            drg_id: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            state: Optional[pulumi.Input[str]] = None,
            static_routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            transport_type: Optional[pulumi.Input[str]] = None) -> 'Ipsec':
        """
        Get an existing Ipsec resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IpsecState.__new__(_IpsecState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["cpe_id"] = cpe_id
        __props__.__dict__["cpe_local_identifier"] = cpe_local_identifier
        __props__.__dict__["cpe_local_identifier_type"] = cpe_local_identifier_type
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["drg_id"] = drg_id
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["state"] = state
        __props__.__dict__["static_routes"] = static_routes
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["transport_type"] = transport_type
        return Ipsec(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="cpeId")
    def cpe_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cpe_id")

    @property
    @pulumi.getter(name="cpeLocalIdentifier")
    def cpe_local_identifier(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cpe_local_identifier")

    @property
    @pulumi.getter(name="cpeLocalIdentifierType")
    def cpe_local_identifier_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cpe_local_identifier_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="drgId")
    def drg_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "drg_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="staticRoutes")
    def static_routes(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "static_routes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="transportType")
    def transport_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "transport_type")

