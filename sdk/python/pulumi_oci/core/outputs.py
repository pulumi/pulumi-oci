# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BootVolumeAutotunePolicy',
    'BootVolumeBackupSourceDetails',
    'BootVolumeBootVolumeReplica',
    'BootVolumeSourceDetails',
    'CaptureFilterFlowLogCaptureFilterRule',
    'CaptureFilterFlowLogCaptureFilterRuleIcmpOptions',
    'CaptureFilterFlowLogCaptureFilterRuleTcpOptions',
    'CaptureFilterFlowLogCaptureFilterRuleTcpOptionsDestinationPortRange',
    'CaptureFilterFlowLogCaptureFilterRuleTcpOptionsSourcePortRange',
    'CaptureFilterFlowLogCaptureFilterRuleUdpOptions',
    'CaptureFilterFlowLogCaptureFilterRuleUdpOptionsDestinationPortRange',
    'CaptureFilterFlowLogCaptureFilterRuleUdpOptionsSourcePortRange',
    'CaptureFilterVtapCaptureFilterRule',
    'CaptureFilterVtapCaptureFilterRuleIcmpOptions',
    'CaptureFilterVtapCaptureFilterRuleTcpOptions',
    'CaptureFilterVtapCaptureFilterRuleTcpOptionsDestinationPortRange',
    'CaptureFilterVtapCaptureFilterRuleTcpOptionsSourcePortRange',
    'CaptureFilterVtapCaptureFilterRuleUdpOptions',
    'CaptureFilterVtapCaptureFilterRuleUdpOptionsDestinationPortRange',
    'CaptureFilterVtapCaptureFilterRuleUdpOptionsSourcePortRange',
    'ClusterNetworkClusterConfiguration',
    'ClusterNetworkInstancePool',
    'ClusterNetworkInstancePoolLoadBalancer',
    'ClusterNetworkInstancePoolPlacementConfiguration',
    'ClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnet',
    'ClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail',
    'ClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnet',
    'ClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail',
    'ClusterNetworkPlacementConfiguration',
    'ClusterNetworkPlacementConfigurationPrimaryVnicSubnets',
    'ClusterNetworkPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail',
    'ClusterNetworkPlacementConfigurationSecondaryVnicSubnet',
    'ClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail',
    'ComputeCapacityReportShapeAvailability',
    'ComputeCapacityReportShapeAvailabilityInstanceShapeConfig',
    'ComputeCapacityReservationInstanceReservationConfig',
    'ComputeCapacityReservationInstanceReservationConfigClusterConfig',
    'ComputeCapacityReservationInstanceReservationConfigInstanceShapeConfig',
    'CrossConnectGroupMacsecProperties',
    'CrossConnectGroupMacsecPropertiesPrimaryKey',
    'CrossConnectMacsecProperties',
    'CrossConnectMacsecPropertiesPrimaryKey',
    'DefaultDhcpOptionsOption',
    'DefaultRouteTableRouteRule',
    'DefaultSecurityListEgressSecurityRule',
    'DefaultSecurityListEgressSecurityRuleIcmpOptions',
    'DefaultSecurityListEgressSecurityRuleTcpOptions',
    'DefaultSecurityListEgressSecurityRuleTcpOptionsSourcePortRange',
    'DefaultSecurityListEgressSecurityRuleUdpOptions',
    'DefaultSecurityListEgressSecurityRuleUdpOptionsSourcePortRange',
    'DefaultSecurityListIngressSecurityRule',
    'DefaultSecurityListIngressSecurityRuleIcmpOptions',
    'DefaultSecurityListIngressSecurityRuleTcpOptions',
    'DefaultSecurityListIngressSecurityRuleTcpOptionsSourcePortRange',
    'DefaultSecurityListIngressSecurityRuleUdpOptions',
    'DefaultSecurityListIngressSecurityRuleUdpOptionsSourcePortRange',
    'DhcpOptionsOption',
    'DrgAttachmentManagementNetworkDetails',
    'DrgAttachmentNetworkDetails',
    'DrgAttachmentsListDrgAllAttachment',
    'DrgDefaultDrgRouteTable',
    'DrgRouteDistributionStatementMatchCriteria',
    'ImageAgentFeature',
    'ImageImageSourceDetails',
    'ImageLaunchOption',
    'InstanceAgentConfig',
    'InstanceAgentConfigPluginsConfig',
    'InstanceAvailabilityConfig',
    'InstanceConfigurationInstanceDetails',
    'InstanceConfigurationInstanceDetailsBlockVolume',
    'InstanceConfigurationInstanceDetailsBlockVolumeAttachDetails',
    'InstanceConfigurationInstanceDetailsBlockVolumeCreateDetails',
    'InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsAutotunePolicy',
    'InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsBlockVolumeReplicas',
    'InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsSourceDetails',
    'InstanceConfigurationInstanceDetailsLaunchDetails',
    'InstanceConfigurationInstanceDetailsLaunchDetailsAgentConfig',
    'InstanceConfigurationInstanceDetailsLaunchDetailsAgentConfigPluginsConfig',
    'InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfig',
    'InstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetails',
    'InstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail',
    'InstanceConfigurationInstanceDetailsLaunchDetailsInstanceOptions',
    'InstanceConfigurationInstanceDetailsLaunchDetailsLaunchOptions',
    'InstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig',
    'InstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfig',
    'InstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfigPreemptionAction',
    'InstanceConfigurationInstanceDetailsLaunchDetailsShapeConfig',
    'InstanceConfigurationInstanceDetailsLaunchDetailsSourceDetails',
    'InstanceConfigurationInstanceDetailsLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails',
    'InstanceConfigurationInstanceDetailsOption',
    'InstanceConfigurationInstanceDetailsOptionBlockVolume',
    'InstanceConfigurationInstanceDetailsOptionBlockVolumeAttachDetails',
    'InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetails',
    'InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsAutotunePolicy',
    'InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsBlockVolumeReplicas',
    'InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsSourceDetails',
    'InstanceConfigurationInstanceDetailsOptionLaunchDetails',
    'InstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfig',
    'InstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfigPluginsConfig',
    'InstanceConfigurationInstanceDetailsOptionLaunchDetailsAvailabilityConfig',
    'InstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetails',
    'InstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail',
    'InstanceConfigurationInstanceDetailsOptionLaunchDetailsInstanceOptions',
    'InstanceConfigurationInstanceDetailsOptionLaunchDetailsLaunchOptions',
    'InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfig',
    'InstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfig',
    'InstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfigPreemptionAction',
    'InstanceConfigurationInstanceDetailsOptionLaunchDetailsShapeConfig',
    'InstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetails',
    'InstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails',
    'InstanceConfigurationInstanceDetailsOptionSecondaryVnic',
    'InstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetails',
    'InstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail',
    'InstanceConfigurationInstanceDetailsSecondaryVnic',
    'InstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetails',
    'InstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail',
    'InstanceCreateVnicDetails',
    'InstanceCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail',
    'InstanceInstanceOptions',
    'InstanceLaunchOptions',
    'InstancePlatformConfig',
    'InstancePoolInstanceLoadBalancerBackend',
    'InstancePoolLoadBalancer',
    'InstancePoolPlacementConfiguration',
    'InstancePoolPlacementConfigurationPrimaryVnicSubnets',
    'InstancePoolPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail',
    'InstancePoolPlacementConfigurationSecondaryVnicSubnet',
    'InstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail',
    'InstancePreemptibleInstanceConfig',
    'InstancePreemptibleInstanceConfigPreemptionAction',
    'InstanceShapeConfig',
    'InstanceSourceDetails',
    'InstanceSourceDetailsInstanceSourceImageFilterDetails',
    'IpsecConnectionTunnelManagementBgpSessionInfo',
    'IpsecConnectionTunnelManagementDpdConfig',
    'IpsecConnectionTunnelManagementEncryptionDomainConfig',
    'IpsecConnectionTunnelManagementPhaseOneDetail',
    'IpsecConnectionTunnelManagementPhaseTwoDetail',
    'NetworkSecurityGroupSecurityRuleIcmpOptions',
    'NetworkSecurityGroupSecurityRuleTcpOptions',
    'NetworkSecurityGroupSecurityRuleTcpOptionsDestinationPortRange',
    'NetworkSecurityGroupSecurityRuleTcpOptionsSourcePortRange',
    'NetworkSecurityGroupSecurityRuleUdpOptions',
    'NetworkSecurityGroupSecurityRuleUdpOptionsDestinationPortRange',
    'NetworkSecurityGroupSecurityRuleUdpOptionsSourcePortRange',
    'RouteTableRouteRule',
    'SecurityListEgressSecurityRule',
    'SecurityListEgressSecurityRuleIcmpOptions',
    'SecurityListEgressSecurityRuleTcpOptions',
    'SecurityListEgressSecurityRuleTcpOptionsSourcePortRange',
    'SecurityListEgressSecurityRuleUdpOptions',
    'SecurityListEgressSecurityRuleUdpOptionsSourcePortRange',
    'SecurityListIngressSecurityRule',
    'SecurityListIngressSecurityRuleIcmpOptions',
    'SecurityListIngressSecurityRuleTcpOptions',
    'SecurityListIngressSecurityRuleTcpOptionsSourcePortRange',
    'SecurityListIngressSecurityRuleUdpOptions',
    'SecurityListIngressSecurityRuleUdpOptionsSourcePortRange',
    'ServiceGatewayService',
    'VcnByoipv6cidrDetail',
    'VirtualCircuitCrossConnectMapping',
    'VirtualCircuitPublicPrefix',
    'VirtualNetworkByoipv6cidrDetail',
    'VnicAttachmentCreateVnicDetails',
    'VnicAttachmentCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail',
    'VolumeAttachmentMultipathDevice',
    'VolumeAutotunePolicy',
    'VolumeBackupPolicySchedule',
    'VolumeBackupSourceDetails',
    'VolumeBlockVolumeReplica',
    'VolumeGroupBackupSourceDetails',
    'VolumeGroupSourceDetails',
    'VolumeGroupVolumeGroupReplica',
    'VolumeSourceDetails',
    'GetAppCatalogListingResourceVersionsAppCatalogListingResourceVersionResult',
    'GetAppCatalogListingResourceVersionsFilterResult',
    'GetAppCatalogListingsAppCatalogListingResult',
    'GetAppCatalogListingsFilterResult',
    'GetAppCatalogSubscriptionsAppCatalogSubscriptionResult',
    'GetAppCatalogSubscriptionsFilterResult',
    'GetBlockVolumeReplicasBlockVolumeReplicaResult',
    'GetBlockVolumeReplicasFilterResult',
    'GetBootVolumeAttachmentsBootVolumeAttachmentResult',
    'GetBootVolumeAttachmentsFilterResult',
    'GetBootVolumeAutotunePolicyResult',
    'GetBootVolumeBackupSourceDetailResult',
    'GetBootVolumeBackupsBootVolumeBackupResult',
    'GetBootVolumeBackupsBootVolumeBackupSourceDetailResult',
    'GetBootVolumeBackupsFilterResult',
    'GetBootVolumeBootVolumeReplicaResult',
    'GetBootVolumeReplicasBootVolumeReplicaResult',
    'GetBootVolumeReplicasFilterResult',
    'GetBootVolumeSourceDetailResult',
    'GetBootVolumesBootVolumeResult',
    'GetBootVolumesBootVolumeAutotunePolicyResult',
    'GetBootVolumesBootVolumeBootVolumeReplicaResult',
    'GetBootVolumesBootVolumeSourceDetailResult',
    'GetBootVolumesFilterResult',
    'GetByoipAllocatedRangesByoipAllocatedRangeCollectionResult',
    'GetByoipAllocatedRangesByoipAllocatedRangeCollectionItemResult',
    'GetByoipAllocatedRangesFilterResult',
    'GetByoipRangeByoipRangeVcnIpv6allocationResult',
    'GetByoipRangesByoipRangeCollectionResult',
    'GetByoipRangesByoipRangeCollectionItemResult',
    'GetByoipRangesByoipRangeCollectionItemByoipRangeVcnIpv6allocationResult',
    'GetByoipRangesFilterResult',
    'GetCaptureFilterFlowLogCaptureFilterRuleResult',
    'GetCaptureFilterFlowLogCaptureFilterRuleIcmpOptionResult',
    'GetCaptureFilterFlowLogCaptureFilterRuleTcpOptionResult',
    'GetCaptureFilterFlowLogCaptureFilterRuleTcpOptionDestinationPortRangeResult',
    'GetCaptureFilterFlowLogCaptureFilterRuleTcpOptionSourcePortRangeResult',
    'GetCaptureFilterFlowLogCaptureFilterRuleUdpOptionResult',
    'GetCaptureFilterFlowLogCaptureFilterRuleUdpOptionDestinationPortRangeResult',
    'GetCaptureFilterFlowLogCaptureFilterRuleUdpOptionSourcePortRangeResult',
    'GetCaptureFilterVtapCaptureFilterRuleResult',
    'GetCaptureFilterVtapCaptureFilterRuleIcmpOptionResult',
    'GetCaptureFilterVtapCaptureFilterRuleTcpOptionResult',
    'GetCaptureFilterVtapCaptureFilterRuleTcpOptionDestinationPortRangeResult',
    'GetCaptureFilterVtapCaptureFilterRuleTcpOptionSourcePortRangeResult',
    'GetCaptureFilterVtapCaptureFilterRuleUdpOptionResult',
    'GetCaptureFilterVtapCaptureFilterRuleUdpOptionDestinationPortRangeResult',
    'GetCaptureFilterVtapCaptureFilterRuleUdpOptionSourcePortRangeResult',
    'GetCaptureFiltersCaptureFilterResult',
    'GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleResult',
    'GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleIcmpOptionResult',
    'GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionResult',
    'GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionDestinationPortRangeResult',
    'GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionSourcePortRangeResult',
    'GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionResult',
    'GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionDestinationPortRangeResult',
    'GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionSourcePortRangeResult',
    'GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleResult',
    'GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleIcmpOptionResult',
    'GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionResult',
    'GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionDestinationPortRangeResult',
    'GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionSourcePortRangeResult',
    'GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionResult',
    'GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionDestinationPortRangeResult',
    'GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionSourcePortRangeResult',
    'GetCaptureFiltersFilterResult',
    'GetClusterNetworkClusterConfigurationResult',
    'GetClusterNetworkInstancePoolResult',
    'GetClusterNetworkInstancePoolLoadBalancerResult',
    'GetClusterNetworkInstancePoolPlacementConfigurationResult',
    'GetClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetResult',
    'GetClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult',
    'GetClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetResult',
    'GetClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult',
    'GetClusterNetworkInstancesFilterResult',
    'GetClusterNetworkInstancesInstanceResult',
    'GetClusterNetworkInstancesInstanceLoadBalancerBackendResult',
    'GetClusterNetworkPlacementConfigurationResult',
    'GetClusterNetworkPlacementConfigurationPrimaryVnicSubnetResult',
    'GetClusterNetworkPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult',
    'GetClusterNetworkPlacementConfigurationSecondaryVnicSubnetResult',
    'GetClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult',
    'GetClusterNetworksClusterNetworkResult',
    'GetClusterNetworksClusterNetworkClusterConfigurationResult',
    'GetClusterNetworksClusterNetworkInstancePoolResult',
    'GetClusterNetworksClusterNetworkInstancePoolLoadBalancerResult',
    'GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationResult',
    'GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetResult',
    'GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult',
    'GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetResult',
    'GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult',
    'GetClusterNetworksClusterNetworkPlacementConfigurationResult',
    'GetClusterNetworksClusterNetworkPlacementConfigurationPrimaryVnicSubnetResult',
    'GetClusterNetworksClusterNetworkPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult',
    'GetClusterNetworksClusterNetworkPlacementConfigurationSecondaryVnicSubnetResult',
    'GetClusterNetworksClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult',
    'GetClusterNetworksFilterResult',
    'GetComputeCapacityReservationInstanceReservationConfigResult',
    'GetComputeCapacityReservationInstanceReservationConfigClusterConfigResult',
    'GetComputeCapacityReservationInstanceReservationConfigInstanceShapeConfigResult',
    'GetComputeCapacityReservationInstanceShapesComputeCapacityReservationInstanceShapeResult',
    'GetComputeCapacityReservationInstanceShapesFilterResult',
    'GetComputeCapacityReservationInstancesCapacityReservationInstanceResult',
    'GetComputeCapacityReservationInstancesCapacityReservationInstanceShapeConfigResult',
    'GetComputeCapacityReservationInstancesFilterResult',
    'GetComputeCapacityReservationsComputeCapacityReservationResult',
    'GetComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigResult',
    'GetComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigClusterConfigResult',
    'GetComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigInstanceShapeConfigResult',
    'GetComputeCapacityReservationsFilterResult',
    'GetComputeClustersComputeClusterCollectionResult',
    'GetComputeClustersComputeClusterCollectionItemResult',
    'GetComputeClustersFilterResult',
    'GetComputeGlobalImageCapabilitySchemasComputeGlobalImageCapabilitySchemaResult',
    'GetComputeGlobalImageCapabilitySchemasFilterResult',
    'GetComputeGlobalImageCapabilitySchemasVersionsComputeGlobalImageCapabilitySchemaVersionResult',
    'GetComputeGlobalImageCapabilitySchemasVersionsFilterResult',
    'GetComputeImageCapabilitySchemasComputeImageCapabilitySchemaResult',
    'GetComputeImageCapabilitySchemasFilterResult',
    'GetConsoleHistoriesConsoleHistoryResult',
    'GetConsoleHistoriesFilterResult',
    'GetCpeDeviceShapeCpeDeviceInfoResult',
    'GetCpeDeviceShapeParameterResult',
    'GetCpeDeviceShapesCpeDeviceShapeResult',
    'GetCpeDeviceShapesCpeDeviceShapeCpeDeviceInfoResult',
    'GetCpeDeviceShapesFilterResult',
    'GetCpesCpeResult',
    'GetCpesFilterResult',
    'GetCrossConnectGroupMacsecPropertyResult',
    'GetCrossConnectGroupMacsecPropertyPrimaryKeyResult',
    'GetCrossConnectGroupsCrossConnectGroupResult',
    'GetCrossConnectGroupsCrossConnectGroupMacsecPropertyResult',
    'GetCrossConnectGroupsCrossConnectGroupMacsecPropertyPrimaryKeyResult',
    'GetCrossConnectGroupsFilterResult',
    'GetCrossConnectLocationsCrossConnectLocationResult',
    'GetCrossConnectLocationsFilterResult',
    'GetCrossConnectMacsecPropertyResult',
    'GetCrossConnectMacsecPropertyPrimaryKeyResult',
    'GetCrossConnectPortSpeedShapeCrossConnectPortSpeedShapeResult',
    'GetCrossConnectPortSpeedShapeFilterResult',
    'GetCrossConnectsCrossConnectResult',
    'GetCrossConnectsCrossConnectMacsecPropertyResult',
    'GetCrossConnectsCrossConnectMacsecPropertyPrimaryKeyResult',
    'GetCrossConnectsFilterResult',
    'GetDedicatedVmHostInstanceShapesDedicatedVmHostInstanceShapeResult',
    'GetDedicatedVmHostInstanceShapesFilterResult',
    'GetDedicatedVmHostInstancesDedicatedVmHostInstanceResult',
    'GetDedicatedVmHostInstancesFilterResult',
    'GetDedicatedVmHostShapesDedicatedVmHostShapeResult',
    'GetDedicatedVmHostShapesFilterResult',
    'GetDedicatedVmHostsDedicatedVmHostResult',
    'GetDedicatedVmHostsFilterResult',
    'GetDhcpOptionsFilterResult',
    'GetDhcpOptionsOptionResult',
    'GetDhcpOptionsOptionOptionResult',
    'GetDrgAttachmentsDrgAttachmentResult',
    'GetDrgAttachmentsDrgAttachmentNetworkDetailResult',
    'GetDrgAttachmentsFilterResult',
    'GetDrgRouteDistributionStatementsDrgRouteDistributionStatementResult',
    'GetDrgRouteDistributionStatementsDrgRouteDistributionStatementMatchCriteriaResult',
    'GetDrgRouteDistributionStatementsFilterResult',
    'GetDrgRouteDistributionsDrgRouteDistributionResult',
    'GetDrgRouteDistributionsFilterResult',
    'GetDrgRouteTableRouteRulesDrgRouteRuleResult',
    'GetDrgRouteTableRouteRulesFilterResult',
    'GetDrgRouteTablesDrgRouteTableResult',
    'GetDrgRouteTablesFilterResult',
    'GetDrgsDrgResult',
    'GetDrgsDrgDefaultDrgRouteTableResult',
    'GetDrgsFilterResult',
    'GetFastConnectProviderServicesFastConnectProviderServiceResult',
    'GetFastConnectProviderServicesFilterResult',
    'GetImageAgentFeatureResult',
    'GetImageImageSourceDetailResult',
    'GetImageLaunchOptionResult',
    'GetImageShapeMemoryConstraintResult',
    'GetImageShapeOcpuConstraintResult',
    'GetImageShapesFilterResult',
    'GetImageShapesImageShapeCompatibilityResult',
    'GetImageShapesImageShapeCompatibilityMemoryConstraintResult',
    'GetImageShapesImageShapeCompatibilityOcpuConstraintResult',
    'GetImagesFilterResult',
    'GetImagesImageResult',
    'GetImagesImageAgentFeatureResult',
    'GetImagesImageImageSourceDetailResult',
    'GetImagesImageLaunchOptionResult',
    'GetInstanceAgentConfigResult',
    'GetInstanceAgentConfigPluginsConfigResult',
    'GetInstanceAvailabilityConfigResult',
    'GetInstanceConfigurationInstanceDetailResult',
    'GetInstanceConfigurationInstanceDetailBlockVolumeResult',
    'GetInstanceConfigurationInstanceDetailBlockVolumeAttachDetailResult',
    'GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailResult',
    'GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailAutotunePolicyResult',
    'GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailBlockVolumeReplicaResult',
    'GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailSourceDetailResult',
    'GetInstanceConfigurationInstanceDetailLaunchDetailResult',
    'GetInstanceConfigurationInstanceDetailLaunchDetailAgentConfigResult',
    'GetInstanceConfigurationInstanceDetailLaunchDetailAgentConfigPluginsConfigResult',
    'GetInstanceConfigurationInstanceDetailLaunchDetailAvailabilityConfigResult',
    'GetInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailResult',
    'GetInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult',
    'GetInstanceConfigurationInstanceDetailLaunchDetailInstanceOptionResult',
    'GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOptionResult',
    'GetInstanceConfigurationInstanceDetailLaunchDetailPlatformConfigResult',
    'GetInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigResult',
    'GetInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigPreemptionActionResult',
    'GetInstanceConfigurationInstanceDetailLaunchDetailShapeConfigResult',
    'GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetailResult',
    'GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult',
    'GetInstanceConfigurationInstanceDetailOptionResult',
    'GetInstanceConfigurationInstanceDetailOptionBlockVolumeResult',
    'GetInstanceConfigurationInstanceDetailOptionBlockVolumeAttachDetailResult',
    'GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailResult',
    'GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailAutotunePolicyResult',
    'GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailBlockVolumeReplicaResult',
    'GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailSourceDetailResult',
    'GetInstanceConfigurationInstanceDetailOptionLaunchDetailResult',
    'GetInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigResult',
    'GetInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigPluginsConfigResult',
    'GetInstanceConfigurationInstanceDetailOptionLaunchDetailAvailabilityConfigResult',
    'GetInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailResult',
    'GetInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult',
    'GetInstanceConfigurationInstanceDetailOptionLaunchDetailInstanceOptionResult',
    'GetInstanceConfigurationInstanceDetailOptionLaunchDetailLaunchOptionResult',
    'GetInstanceConfigurationInstanceDetailOptionLaunchDetailPlatformConfigResult',
    'GetInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigResult',
    'GetInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigPreemptionActionResult',
    'GetInstanceConfigurationInstanceDetailOptionLaunchDetailShapeConfigResult',
    'GetInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailResult',
    'GetInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult',
    'GetInstanceConfigurationInstanceDetailOptionSecondaryVnicResult',
    'GetInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailResult',
    'GetInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult',
    'GetInstanceConfigurationInstanceDetailSecondaryVnicResult',
    'GetInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailResult',
    'GetInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult',
    'GetInstanceConfigurationsFilterResult',
    'GetInstanceConfigurationsInstanceConfigurationResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeAttachDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailAutotunePolicyResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailBlockVolumeReplicaResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailSourceDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAgentConfigResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAgentConfigPluginsConfigResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAvailabilityConfigResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailInstanceOptionResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailLaunchOptionResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPlatformConfigResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigPreemptionActionResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailShapeConfigResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailSourceDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeAttachDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailAutotunePolicyResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailBlockVolumeReplicaResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailSourceDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigPluginsConfigResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAvailabilityConfigResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailInstanceOptionResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailLaunchOptionResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPlatformConfigResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigPreemptionActionResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailShapeConfigResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailResult',
    'GetInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult',
    'GetInstanceConsoleConnectionsFilterResult',
    'GetInstanceConsoleConnectionsInstanceConsoleConnectionResult',
    'GetInstanceCreateVnicDetailResult',
    'GetInstanceCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult',
    'GetInstanceDevicesDeviceResult',
    'GetInstanceDevicesFilterResult',
    'GetInstanceInstanceOptionResult',
    'GetInstanceLaunchOptionResult',
    'GetInstanceMeasuredBootReportMeasurementResult',
    'GetInstanceMeasuredBootReportMeasurementActualResult',
    'GetInstanceMeasuredBootReportMeasurementPolicyResult',
    'GetInstancePlatformConfigResult',
    'GetInstancePoolInstancesFilterResult',
    'GetInstancePoolInstancesInstanceResult',
    'GetInstancePoolInstancesInstanceLoadBalancerBackendResult',
    'GetInstancePoolLoadBalancerResult',
    'GetInstancePoolPlacementConfigurationResult',
    'GetInstancePoolPlacementConfigurationPrimaryVnicSubnetResult',
    'GetInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult',
    'GetInstancePoolPlacementConfigurationSecondaryVnicSubnetResult',
    'GetInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult',
    'GetInstancePoolsFilterResult',
    'GetInstancePoolsInstancePoolResult',
    'GetInstancePoolsInstancePoolLoadBalancerResult',
    'GetInstancePoolsInstancePoolPlacementConfigurationResult',
    'GetInstancePoolsInstancePoolPlacementConfigurationPrimaryVnicSubnetResult',
    'GetInstancePoolsInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult',
    'GetInstancePoolsInstancePoolPlacementConfigurationSecondaryVnicSubnetResult',
    'GetInstancePoolsInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult',
    'GetInstancePreemptibleInstanceConfigResult',
    'GetInstancePreemptibleInstanceConfigPreemptionActionResult',
    'GetInstanceShapeConfigResult',
    'GetInstanceSourceDetailResult',
    'GetInstanceSourceDetailInstanceSourceImageFilterDetailResult',
    'GetInstancesFilterResult',
    'GetInstancesInstanceResult',
    'GetInstancesInstanceAgentConfigResult',
    'GetInstancesInstanceAgentConfigPluginsConfigResult',
    'GetInstancesInstanceAvailabilityConfigResult',
    'GetInstancesInstanceCreateVnicDetailResult',
    'GetInstancesInstanceCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult',
    'GetInstancesInstanceInstanceOptionResult',
    'GetInstancesInstanceLaunchOptionResult',
    'GetInstancesInstancePlatformConfigResult',
    'GetInstancesInstancePreemptibleInstanceConfigResult',
    'GetInstancesInstancePreemptibleInstanceConfigPreemptionActionResult',
    'GetInstancesInstanceShapeConfigResult',
    'GetInstancesInstanceSourceDetailResult',
    'GetInstancesInstanceSourceDetailInstanceSourceImageFilterDetailResult',
    'GetInternetGatewaysFilterResult',
    'GetInternetGatewaysGatewayResult',
    'GetIpsecAlgorithmAllowedPhaseOneParameterResult',
    'GetIpsecAlgorithmAllowedPhaseTwoParameterResult',
    'GetIpsecAlgorithmDefaultPhaseOneParameterResult',
    'GetIpsecAlgorithmDefaultPhaseTwoParameterResult',
    'GetIpsecConfigFilterResult',
    'GetIpsecConfigTunnelResult',
    'GetIpsecConnectionTunnelBgpSessionInfoResult',
    'GetIpsecConnectionTunnelEncryptionDomainConfigResult',
    'GetIpsecConnectionTunnelRoutesFilterResult',
    'GetIpsecConnectionTunnelRoutesTunnelRouteResult',
    'GetIpsecConnectionTunnelsFilterResult',
    'GetIpsecConnectionTunnelsIpSecConnectionTunnelResult',
    'GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfoResult',
    'GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfigResult',
    'GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetailResult',
    'GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetailResult',
    'GetIpsecConnectionsConnectionResult',
    'GetIpsecConnectionsFilterResult',
    'GetIpsecStatusFilterResult',
    'GetIpsecStatusTunnelResult',
    'GetIpv6sFilterResult',
    'GetIpv6sIpv6Result',
    'GetListingResourceVersionsAppCatalogListingResourceVersionResult',
    'GetListingResourceVersionsFilterResult',
    'GetLocalPeeringGatewaysFilterResult',
    'GetLocalPeeringGatewaysLocalPeeringGatewayResult',
    'GetNatGatewaysFilterResult',
    'GetNatGatewaysNatGatewayResult',
    'GetNetworkSecurityGroupSecurityRulesFilterResult',
    'GetNetworkSecurityGroupSecurityRulesSecurityRuleResult',
    'GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOptionResult',
    'GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionResult',
    'GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionDestinationPortRangeResult',
    'GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionSourcePortRangeResult',
    'GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionResult',
    'GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionDestinationPortRangeResult',
    'GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionSourcePortRangeResult',
    'GetNetworkSecurityGroupVnicsFilterResult',
    'GetNetworkSecurityGroupVnicsNetworkSecurityGroupVnicResult',
    'GetNetworkSecurityGroupsFilterResult',
    'GetNetworkSecurityGroupsNetworkSecurityGroupResult',
    'GetPeerRegionForRemotePeeringsFilterResult',
    'GetPeerRegionForRemotePeeringsPeerRegionForRemotePeeringResult',
    'GetPrivateIpsFilterResult',
    'GetPrivateIpsPrivateIpResult',
    'GetPublicIpPoolsFilterResult',
    'GetPublicIpPoolsPublicIpPoolCollectionResult',
    'GetPublicIpPoolsPublicIpPoolCollectionItemResult',
    'GetPublicIpsFilterResult',
    'GetPublicIpsPublicIpResult',
    'GetRemotePeeringConnectionsFilterResult',
    'GetRemotePeeringConnectionsRemotePeeringConnectionResult',
    'GetRouteTablesFilterResult',
    'GetRouteTablesRouteTableResult',
    'GetRouteTablesRouteTableRouteRuleResult',
    'GetSecurityListsFilterResult',
    'GetSecurityListsSecurityListResult',
    'GetSecurityListsSecurityListEgressSecurityRuleResult',
    'GetSecurityListsSecurityListEgressSecurityRuleIcmpOptionResult',
    'GetSecurityListsSecurityListEgressSecurityRuleTcpOptionResult',
    'GetSecurityListsSecurityListEgressSecurityRuleTcpOptionSourcePortRangeResult',
    'GetSecurityListsSecurityListEgressSecurityRuleUdpOptionResult',
    'GetSecurityListsSecurityListEgressSecurityRuleUdpOptionSourcePortRangeResult',
    'GetSecurityListsSecurityListIngressSecurityRuleResult',
    'GetSecurityListsSecurityListIngressSecurityRuleIcmpOptionResult',
    'GetSecurityListsSecurityListIngressSecurityRuleTcpOptionResult',
    'GetSecurityListsSecurityListIngressSecurityRuleTcpOptionSourcePortRangeResult',
    'GetSecurityListsSecurityListIngressSecurityRuleUdpOptionResult',
    'GetSecurityListsSecurityListIngressSecurityRuleUdpOptionSourcePortRangeResult',
    'GetServiceGatewaysFilterResult',
    'GetServiceGatewaysServiceGatewayResult',
    'GetServiceGatewaysServiceGatewayServiceResult',
    'GetServicesFilterResult',
    'GetServicesServiceResult',
    'GetShapeFilterResult',
    'GetShapeShapeResult',
    'GetShapeShapeMaxVnicAttachmentOptionResult',
    'GetShapeShapeMemoryOptionResult',
    'GetShapeShapeNetworkingBandwidthOptionResult',
    'GetShapeShapeOcpuOptionResult',
    'GetShapeShapePlatformConfigOptionResult',
    'GetShapeShapePlatformConfigOptionAccessControlServiceOptionResult',
    'GetShapeShapePlatformConfigOptionInputOutputMemoryManagementUnitOptionResult',
    'GetShapeShapePlatformConfigOptionMeasuredBootOptionResult',
    'GetShapeShapePlatformConfigOptionMemoryEncryptionOptionResult',
    'GetShapeShapePlatformConfigOptionNumaNodesPerSocketPlatformOptionResult',
    'GetShapeShapePlatformConfigOptionPercentageOfCoresEnabledOptionResult',
    'GetShapeShapePlatformConfigOptionSecureBootOptionResult',
    'GetShapeShapePlatformConfigOptionSymmetricMultiThreadingOptionResult',
    'GetShapeShapePlatformConfigOptionTrustedPlatformModuleOptionResult',
    'GetShapeShapePlatformConfigOptionVirtualInstructionsOptionResult',
    'GetShapeShapeRecommendedAlternativeResult',
    'GetShapesFilterResult',
    'GetShapesShapeResult',
    'GetShapesShapeMaxVnicAttachmentOptionResult',
    'GetShapesShapeMemoryOptionResult',
    'GetShapesShapeNetworkingBandwidthOptionResult',
    'GetShapesShapeOcpuOptionResult',
    'GetShapesShapePlatformConfigOptionResult',
    'GetShapesShapePlatformConfigOptionAccessControlServiceOptionResult',
    'GetShapesShapePlatformConfigOptionInputOutputMemoryManagementUnitOptionResult',
    'GetShapesShapePlatformConfigOptionMeasuredBootOptionResult',
    'GetShapesShapePlatformConfigOptionMemoryEncryptionOptionResult',
    'GetShapesShapePlatformConfigOptionNumaNodesPerSocketPlatformOptionResult',
    'GetShapesShapePlatformConfigOptionPercentageOfCoresEnabledOptionResult',
    'GetShapesShapePlatformConfigOptionSecureBootOptionResult',
    'GetShapesShapePlatformConfigOptionSymmetricMultiThreadingOptionResult',
    'GetShapesShapePlatformConfigOptionTrustedPlatformModuleOptionResult',
    'GetShapesShapePlatformConfigOptionVirtualInstructionsOptionResult',
    'GetShapesShapeRecommendedAlternativeResult',
    'GetSubnetsFilterResult',
    'GetSubnetsSubnetResult',
    'GetTunnelSecurityAssociationsFilterResult',
    'GetTunnelSecurityAssociationsTunnelSecurityAssociationResult',
    'GetVcnByoipv6cidrDetailResult',
    'GetVcnsFilterResult',
    'GetVcnsVirtualNetworkResult',
    'GetVcnsVirtualNetworkByoipv6cidrDetailResult',
    'GetVirtualCircuitAssociatedTunnelsFilterResult',
    'GetVirtualCircuitAssociatedTunnelsVirtualCircuitAssociatedTunnelDetailResult',
    'GetVirtualCircuitBandwidthShapesFilterResult',
    'GetVirtualCircuitBandwidthShapesVirtualCircuitBandwidthShapeResult',
    'GetVirtualCircuitCrossConnectMappingResult',
    'GetVirtualCircuitPublicPrefixResult',
    'GetVirtualCircuitPublicPrefixesFilterResult',
    'GetVirtualCircuitPublicPrefixesVirtualCircuitPublicPrefixResult',
    'GetVirtualCircuitsFilterResult',
    'GetVirtualCircuitsVirtualCircuitResult',
    'GetVirtualCircuitsVirtualCircuitCrossConnectMappingResult',
    'GetVirtualCircuitsVirtualCircuitPublicPrefixResult',
    'GetVirtualNetworksFilterResult',
    'GetVirtualNetworksVirtualNetworkResult',
    'GetVirtualNetworksVirtualNetworkByoipv6cidrDetailResult',
    'GetVlansFilterResult',
    'GetVlansVlanResult',
    'GetVnicAttachmentsFilterResult',
    'GetVnicAttachmentsVnicAttachmentResult',
    'GetVnicAttachmentsVnicAttachmentCreateVnicDetailResult',
    'GetVnicAttachmentsVnicAttachmentCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult',
    'GetVolumeAttachmentsFilterResult',
    'GetVolumeAttachmentsVolumeAttachmentResult',
    'GetVolumeAttachmentsVolumeAttachmentMultipathDeviceResult',
    'GetVolumeAutotunePolicyResult',
    'GetVolumeBackupPoliciesFilterResult',
    'GetVolumeBackupPoliciesVolumeBackupPolicyResult',
    'GetVolumeBackupPoliciesVolumeBackupPolicyScheduleResult',
    'GetVolumeBackupPolicyAssignmentsFilterResult',
    'GetVolumeBackupPolicyAssignmentsVolumeBackupPolicyAssignmentResult',
    'GetVolumeBackupsFilterResult',
    'GetVolumeBackupsVolumeBackupResult',
    'GetVolumeBackupsVolumeBackupSourceDetailResult',
    'GetVolumeBlockVolumeReplicaResult',
    'GetVolumeGroupBackupsFilterResult',
    'GetVolumeGroupBackupsVolumeGroupBackupResult',
    'GetVolumeGroupBackupsVolumeGroupBackupSourceDetailResult',
    'GetVolumeGroupReplicaMemberReplicaResult',
    'GetVolumeGroupReplicasFilterResult',
    'GetVolumeGroupReplicasVolumeGroupReplicaResult',
    'GetVolumeGroupReplicasVolumeGroupReplicaMemberReplicaResult',
    'GetVolumeGroupsFilterResult',
    'GetVolumeGroupsVolumeGroupResult',
    'GetVolumeGroupsVolumeGroupSourceDetailResult',
    'GetVolumeGroupsVolumeGroupVolumeGroupReplicaResult',
    'GetVolumeSourceDetailResult',
    'GetVolumesFilterResult',
    'GetVolumesVolumeResult',
    'GetVolumesVolumeAutotunePolicyResult',
    'GetVolumesVolumeBlockVolumeReplicaResult',
    'GetVolumesVolumeSourceDetailResult',
    'GetVtapsFilterResult',
    'GetVtapsVtapResult',
]

@pulumi.output_type
class BootVolumeAutotunePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autotuneType":
            suggest = "autotune_type"
        elif key == "maxVpusPerGb":
            suggest = "max_vpus_per_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BootVolumeAutotunePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BootVolumeAutotunePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BootVolumeAutotunePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autotune_type: str,
                 max_vpus_per_gb: Optional[str] = None):
        pulumi.set(__self__, "autotune_type", autotune_type)
        if max_vpus_per_gb is not None:
            pulumi.set(__self__, "max_vpus_per_gb", max_vpus_per_gb)

    @property
    @pulumi.getter(name="autotuneType")
    def autotune_type(self) -> str:
        return pulumi.get(self, "autotune_type")

    @property
    @pulumi.getter(name="maxVpusPerGb")
    def max_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "max_vpus_per_gb")


@pulumi.output_type
class BootVolumeBackupSourceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootVolumeBackupId":
            suggest = "boot_volume_backup_id"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BootVolumeBackupSourceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BootVolumeBackupSourceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BootVolumeBackupSourceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_volume_backup_id: str,
                 region: str,
                 kms_key_id: Optional[str] = None):
        pulumi.set(__self__, "boot_volume_backup_id", boot_volume_backup_id)
        pulumi.set(__self__, "region", region)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="bootVolumeBackupId")
    def boot_volume_backup_id(self) -> str:
        return pulumi.get(self, "boot_volume_backup_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class BootVolumeBootVolumeReplica(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "bootVolumeReplicaId":
            suggest = "boot_volume_replica_id"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BootVolumeBootVolumeReplica. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BootVolumeBootVolumeReplica.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BootVolumeBootVolumeReplica.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_domain: str,
                 boot_volume_replica_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        pulumi.set(__self__, "availability_domain", availability_domain)
        if boot_volume_replica_id is not None:
            pulumi.set(__self__, "boot_volume_replica_id", boot_volume_replica_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="bootVolumeReplicaId")
    def boot_volume_replica_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_replica_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class BootVolumeSourceDetails(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class CaptureFilterFlowLogCaptureFilterRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationCidr":
            suggest = "destination_cidr"
        elif key == "flowLogType":
            suggest = "flow_log_type"
        elif key == "icmpOptions":
            suggest = "icmp_options"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "ruleAction":
            suggest = "rule_action"
        elif key == "samplingRate":
            suggest = "sampling_rate"
        elif key == "sourceCidr":
            suggest = "source_cidr"
        elif key == "tcpOptions":
            suggest = "tcp_options"
        elif key == "udpOptions":
            suggest = "udp_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CaptureFilterFlowLogCaptureFilterRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CaptureFilterFlowLogCaptureFilterRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CaptureFilterFlowLogCaptureFilterRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_cidr: Optional[str] = None,
                 flow_log_type: Optional[str] = None,
                 icmp_options: Optional['outputs.CaptureFilterFlowLogCaptureFilterRuleIcmpOptions'] = None,
                 is_enabled: Optional[bool] = None,
                 priority: Optional[int] = None,
                 protocol: Optional[str] = None,
                 rule_action: Optional[str] = None,
                 sampling_rate: Optional[int] = None,
                 source_cidr: Optional[str] = None,
                 tcp_options: Optional['outputs.CaptureFilterFlowLogCaptureFilterRuleTcpOptions'] = None,
                 udp_options: Optional['outputs.CaptureFilterFlowLogCaptureFilterRuleUdpOptions'] = None):
        if destination_cidr is not None:
            pulumi.set(__self__, "destination_cidr", destination_cidr)
        if flow_log_type is not None:
            pulumi.set(__self__, "flow_log_type", flow_log_type)
        if icmp_options is not None:
            pulumi.set(__self__, "icmp_options", icmp_options)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_action is not None:
            pulumi.set(__self__, "rule_action", rule_action)
        if sampling_rate is not None:
            pulumi.set(__self__, "sampling_rate", sampling_rate)
        if source_cidr is not None:
            pulumi.set(__self__, "source_cidr", source_cidr)
        if tcp_options is not None:
            pulumi.set(__self__, "tcp_options", tcp_options)
        if udp_options is not None:
            pulumi.set(__self__, "udp_options", udp_options)

    @property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> Optional[str]:
        return pulumi.get(self, "destination_cidr")

    @property
    @pulumi.getter(name="flowLogType")
    def flow_log_type(self) -> Optional[str]:
        return pulumi.get(self, "flow_log_type")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> Optional['outputs.CaptureFilterFlowLogCaptureFilterRuleIcmpOptions']:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="ruleAction")
    def rule_action(self) -> Optional[str]:
        return pulumi.get(self, "rule_action")

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> Optional[int]:
        return pulumi.get(self, "sampling_rate")

    @property
    @pulumi.getter(name="sourceCidr")
    def source_cidr(self) -> Optional[str]:
        return pulumi.get(self, "source_cidr")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Optional['outputs.CaptureFilterFlowLogCaptureFilterRuleTcpOptions']:
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter(name="udpOptions")
    def udp_options(self) -> Optional['outputs.CaptureFilterFlowLogCaptureFilterRuleUdpOptions']:
        return pulumi.get(self, "udp_options")


@pulumi.output_type
class CaptureFilterFlowLogCaptureFilterRuleIcmpOptions(dict):
    def __init__(__self__, *,
                 type: int,
                 code: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def type(self) -> int:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")


@pulumi.output_type
class CaptureFilterFlowLogCaptureFilterRuleTcpOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPortRange":
            suggest = "destination_port_range"
        elif key == "sourcePortRange":
            suggest = "source_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CaptureFilterFlowLogCaptureFilterRuleTcpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CaptureFilterFlowLogCaptureFilterRuleTcpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CaptureFilterFlowLogCaptureFilterRuleTcpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_port_range: Optional['outputs.CaptureFilterFlowLogCaptureFilterRuleTcpOptionsDestinationPortRange'] = None,
                 source_port_range: Optional['outputs.CaptureFilterFlowLogCaptureFilterRuleTcpOptionsSourcePortRange'] = None):
        if destination_port_range is not None:
            pulumi.set(__self__, "destination_port_range", destination_port_range)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> Optional['outputs.CaptureFilterFlowLogCaptureFilterRuleTcpOptionsDestinationPortRange']:
        return pulumi.get(self, "destination_port_range")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional['outputs.CaptureFilterFlowLogCaptureFilterRuleTcpOptionsSourcePortRange']:
        return pulumi.get(self, "source_port_range")


@pulumi.output_type
class CaptureFilterFlowLogCaptureFilterRuleTcpOptionsDestinationPortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class CaptureFilterFlowLogCaptureFilterRuleTcpOptionsSourcePortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class CaptureFilterFlowLogCaptureFilterRuleUdpOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPortRange":
            suggest = "destination_port_range"
        elif key == "sourcePortRange":
            suggest = "source_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CaptureFilterFlowLogCaptureFilterRuleUdpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CaptureFilterFlowLogCaptureFilterRuleUdpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CaptureFilterFlowLogCaptureFilterRuleUdpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_port_range: Optional['outputs.CaptureFilterFlowLogCaptureFilterRuleUdpOptionsDestinationPortRange'] = None,
                 source_port_range: Optional['outputs.CaptureFilterFlowLogCaptureFilterRuleUdpOptionsSourcePortRange'] = None):
        if destination_port_range is not None:
            pulumi.set(__self__, "destination_port_range", destination_port_range)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> Optional['outputs.CaptureFilterFlowLogCaptureFilterRuleUdpOptionsDestinationPortRange']:
        return pulumi.get(self, "destination_port_range")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional['outputs.CaptureFilterFlowLogCaptureFilterRuleUdpOptionsSourcePortRange']:
        return pulumi.get(self, "source_port_range")


@pulumi.output_type
class CaptureFilterFlowLogCaptureFilterRuleUdpOptionsDestinationPortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class CaptureFilterFlowLogCaptureFilterRuleUdpOptionsSourcePortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class CaptureFilterVtapCaptureFilterRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trafficDirection":
            suggest = "traffic_direction"
        elif key == "destinationCidr":
            suggest = "destination_cidr"
        elif key == "icmpOptions":
            suggest = "icmp_options"
        elif key == "ruleAction":
            suggest = "rule_action"
        elif key == "sourceCidr":
            suggest = "source_cidr"
        elif key == "tcpOptions":
            suggest = "tcp_options"
        elif key == "udpOptions":
            suggest = "udp_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CaptureFilterVtapCaptureFilterRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CaptureFilterVtapCaptureFilterRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CaptureFilterVtapCaptureFilterRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 traffic_direction: str,
                 destination_cidr: Optional[str] = None,
                 icmp_options: Optional['outputs.CaptureFilterVtapCaptureFilterRuleIcmpOptions'] = None,
                 protocol: Optional[str] = None,
                 rule_action: Optional[str] = None,
                 source_cidr: Optional[str] = None,
                 tcp_options: Optional['outputs.CaptureFilterVtapCaptureFilterRuleTcpOptions'] = None,
                 udp_options: Optional['outputs.CaptureFilterVtapCaptureFilterRuleUdpOptions'] = None):
        pulumi.set(__self__, "traffic_direction", traffic_direction)
        if destination_cidr is not None:
            pulumi.set(__self__, "destination_cidr", destination_cidr)
        if icmp_options is not None:
            pulumi.set(__self__, "icmp_options", icmp_options)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_action is not None:
            pulumi.set(__self__, "rule_action", rule_action)
        if source_cidr is not None:
            pulumi.set(__self__, "source_cidr", source_cidr)
        if tcp_options is not None:
            pulumi.set(__self__, "tcp_options", tcp_options)
        if udp_options is not None:
            pulumi.set(__self__, "udp_options", udp_options)

    @property
    @pulumi.getter(name="trafficDirection")
    def traffic_direction(self) -> str:
        return pulumi.get(self, "traffic_direction")

    @property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> Optional[str]:
        return pulumi.get(self, "destination_cidr")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> Optional['outputs.CaptureFilterVtapCaptureFilterRuleIcmpOptions']:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="ruleAction")
    def rule_action(self) -> Optional[str]:
        return pulumi.get(self, "rule_action")

    @property
    @pulumi.getter(name="sourceCidr")
    def source_cidr(self) -> Optional[str]:
        return pulumi.get(self, "source_cidr")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Optional['outputs.CaptureFilterVtapCaptureFilterRuleTcpOptions']:
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter(name="udpOptions")
    def udp_options(self) -> Optional['outputs.CaptureFilterVtapCaptureFilterRuleUdpOptions']:
        return pulumi.get(self, "udp_options")


@pulumi.output_type
class CaptureFilterVtapCaptureFilterRuleIcmpOptions(dict):
    def __init__(__self__, *,
                 type: int,
                 code: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def type(self) -> int:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")


@pulumi.output_type
class CaptureFilterVtapCaptureFilterRuleTcpOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPortRange":
            suggest = "destination_port_range"
        elif key == "sourcePortRange":
            suggest = "source_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CaptureFilterVtapCaptureFilterRuleTcpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CaptureFilterVtapCaptureFilterRuleTcpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CaptureFilterVtapCaptureFilterRuleTcpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_port_range: Optional['outputs.CaptureFilterVtapCaptureFilterRuleTcpOptionsDestinationPortRange'] = None,
                 source_port_range: Optional['outputs.CaptureFilterVtapCaptureFilterRuleTcpOptionsSourcePortRange'] = None):
        if destination_port_range is not None:
            pulumi.set(__self__, "destination_port_range", destination_port_range)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> Optional['outputs.CaptureFilterVtapCaptureFilterRuleTcpOptionsDestinationPortRange']:
        return pulumi.get(self, "destination_port_range")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional['outputs.CaptureFilterVtapCaptureFilterRuleTcpOptionsSourcePortRange']:
        return pulumi.get(self, "source_port_range")


@pulumi.output_type
class CaptureFilterVtapCaptureFilterRuleTcpOptionsDestinationPortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class CaptureFilterVtapCaptureFilterRuleTcpOptionsSourcePortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class CaptureFilterVtapCaptureFilterRuleUdpOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPortRange":
            suggest = "destination_port_range"
        elif key == "sourcePortRange":
            suggest = "source_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CaptureFilterVtapCaptureFilterRuleUdpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CaptureFilterVtapCaptureFilterRuleUdpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CaptureFilterVtapCaptureFilterRuleUdpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_port_range: Optional['outputs.CaptureFilterVtapCaptureFilterRuleUdpOptionsDestinationPortRange'] = None,
                 source_port_range: Optional['outputs.CaptureFilterVtapCaptureFilterRuleUdpOptionsSourcePortRange'] = None):
        if destination_port_range is not None:
            pulumi.set(__self__, "destination_port_range", destination_port_range)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> Optional['outputs.CaptureFilterVtapCaptureFilterRuleUdpOptionsDestinationPortRange']:
        return pulumi.get(self, "destination_port_range")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional['outputs.CaptureFilterVtapCaptureFilterRuleUdpOptionsSourcePortRange']:
        return pulumi.get(self, "source_port_range")


@pulumi.output_type
class CaptureFilterVtapCaptureFilterRuleUdpOptionsDestinationPortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class CaptureFilterVtapCaptureFilterRuleUdpOptionsSourcePortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class ClusterNetworkClusterConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hpcIslandId":
            suggest = "hpc_island_id"
        elif key == "networkBlockIds":
            suggest = "network_block_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNetworkClusterConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNetworkClusterConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNetworkClusterConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hpc_island_id: str,
                 network_block_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "hpc_island_id", hpc_island_id)
        if network_block_ids is not None:
            pulumi.set(__self__, "network_block_ids", network_block_ids)

    @property
    @pulumi.getter(name="hpcIslandId")
    def hpc_island_id(self) -> str:
        return pulumi.get(self, "hpc_island_id")

    @property
    @pulumi.getter(name="networkBlockIds")
    def network_block_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_block_ids")


@pulumi.output_type
class ClusterNetworkInstancePool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceConfigurationId":
            suggest = "instance_configuration_id"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "instanceDisplayNameFormatter":
            suggest = "instance_display_name_formatter"
        elif key == "instanceHostnameFormatter":
            suggest = "instance_hostname_formatter"
        elif key == "loadBalancers":
            suggest = "load_balancers"
        elif key == "placementConfigurations":
            suggest = "placement_configurations"
        elif key == "timeCreated":
            suggest = "time_created"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNetworkInstancePool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNetworkInstancePool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNetworkInstancePool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_configuration_id: str,
                 size: int,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 instance_display_name_formatter: Optional[str] = None,
                 instance_hostname_formatter: Optional[str] = None,
                 load_balancers: Optional[Sequence['outputs.ClusterNetworkInstancePoolLoadBalancer']] = None,
                 placement_configurations: Optional[Sequence['outputs.ClusterNetworkInstancePoolPlacementConfiguration']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        pulumi.set(__self__, "size", size)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_display_name_formatter is not None:
            pulumi.set(__self__, "instance_display_name_formatter", instance_display_name_formatter)
        if instance_hostname_formatter is not None:
            pulumi.set(__self__, "instance_hostname_formatter", instance_hostname_formatter)
        if load_balancers is not None:
            pulumi.set(__self__, "load_balancers", load_balancers)
        if placement_configurations is not None:
            pulumi.set(__self__, "placement_configurations", placement_configurations)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> str:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceDisplayNameFormatter")
    def instance_display_name_formatter(self) -> Optional[str]:
        return pulumi.get(self, "instance_display_name_formatter")

    @property
    @pulumi.getter(name="instanceHostnameFormatter")
    def instance_hostname_formatter(self) -> Optional[str]:
        return pulumi.get(self, "instance_hostname_formatter")

    @property
    @pulumi.getter(name="loadBalancers")
    def load_balancers(self) -> Optional[Sequence['outputs.ClusterNetworkInstancePoolLoadBalancer']]:
        return pulumi.get(self, "load_balancers")

    @property
    @pulumi.getter(name="placementConfigurations")
    def placement_configurations(self) -> Optional[Sequence['outputs.ClusterNetworkInstancePoolPlacementConfiguration']]:
        return pulumi.get(self, "placement_configurations")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class ClusterNetworkInstancePoolLoadBalancer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendSetName":
            suggest = "backend_set_name"
        elif key == "instancePoolId":
            suggest = "instance_pool_id"
        elif key == "loadBalancerId":
            suggest = "load_balancer_id"
        elif key == "vnicSelection":
            suggest = "vnic_selection"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNetworkInstancePoolLoadBalancer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNetworkInstancePoolLoadBalancer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNetworkInstancePoolLoadBalancer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_set_name: Optional[str] = None,
                 id: Optional[str] = None,
                 instance_pool_id: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 port: Optional[int] = None,
                 state: Optional[str] = None,
                 vnic_selection: Optional[str] = None):
        if backend_set_name is not None:
            pulumi.set(__self__, "backend_set_name", backend_set_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_pool_id is not None:
            pulumi.set(__self__, "instance_pool_id", instance_pool_id)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vnic_selection is not None:
            pulumi.set(__self__, "vnic_selection", vnic_selection)

    @property
    @pulumi.getter(name="backendSetName")
    def backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "backend_set_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vnicSelection")
    def vnic_selection(self) -> Optional[str]:
        return pulumi.get(self, "vnic_selection")


@pulumi.output_type
class ClusterNetworkInstancePoolPlacementConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "faultDomains":
            suggest = "fault_domains"
        elif key == "primarySubnetId":
            suggest = "primary_subnet_id"
        elif key == "primaryVnicSubnets":
            suggest = "primary_vnic_subnets"
        elif key == "secondaryVnicSubnets":
            suggest = "secondary_vnic_subnets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNetworkInstancePoolPlacementConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNetworkInstancePoolPlacementConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNetworkInstancePoolPlacementConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 fault_domains: Optional[Sequence[str]] = None,
                 primary_subnet_id: Optional[str] = None,
                 primary_vnic_subnets: Optional[Sequence['outputs.ClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnet']] = None,
                 secondary_vnic_subnets: Optional[Sequence['outputs.ClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnet']] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if fault_domains is not None:
            pulumi.set(__self__, "fault_domains", fault_domains)
        if primary_subnet_id is not None:
            pulumi.set(__self__, "primary_subnet_id", primary_subnet_id)
        if primary_vnic_subnets is not None:
            pulumi.set(__self__, "primary_vnic_subnets", primary_vnic_subnets)
        if secondary_vnic_subnets is not None:
            pulumi.set(__self__, "secondary_vnic_subnets", secondary_vnic_subnets)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="faultDomains")
    def fault_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "fault_domains")

    @property
    @pulumi.getter(name="primarySubnetId")
    def primary_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "primary_subnet_id")

    @property
    @pulumi.getter(name="primaryVnicSubnets")
    def primary_vnic_subnets(self) -> Optional[Sequence['outputs.ClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnet']]:
        return pulumi.get(self, "primary_vnic_subnets")

    @property
    @pulumi.getter(name="secondaryVnicSubnets")
    def secondary_vnic_subnets(self) -> Optional[Sequence['outputs.ClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnet']]:
        return pulumi.get(self, "secondary_vnic_subnets")


@pulumi.output_type
class ClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6addressIpv6subnetCidrPairDetails":
            suggest = "ipv6address_ipv6subnet_cidr_pair_details"
        elif key == "isAssignIpv6ip":
            suggest = "is_assign_ipv6ip"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.ClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail']] = None,
                 is_assign_ipv6ip: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.ClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class ClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6subnetCidr":
            suggest = "ipv6subnet_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class ClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "ipv6addressIpv6subnetCidrPairDetails":
            suggest = "ipv6address_ipv6subnet_cidr_pair_details"
        elif key == "isAssignIpv6ip":
            suggest = "is_assign_ipv6ip"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.ClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail']] = None,
                 is_assign_ipv6ip: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.ClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class ClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6subnetCidr":
            suggest = "ipv6subnet_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class ClusterNetworkPlacementConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "placementConstraint":
            suggest = "placement_constraint"
        elif key == "primarySubnetId":
            suggest = "primary_subnet_id"
        elif key == "primaryVnicSubnets":
            suggest = "primary_vnic_subnets"
        elif key == "secondaryVnicSubnets":
            suggest = "secondary_vnic_subnets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNetworkPlacementConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNetworkPlacementConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNetworkPlacementConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_domain: str,
                 placement_constraint: Optional[str] = None,
                 primary_subnet_id: Optional[str] = None,
                 primary_vnic_subnets: Optional['outputs.ClusterNetworkPlacementConfigurationPrimaryVnicSubnets'] = None,
                 secondary_vnic_subnets: Optional[Sequence['outputs.ClusterNetworkPlacementConfigurationSecondaryVnicSubnet']] = None):
        pulumi.set(__self__, "availability_domain", availability_domain)
        if placement_constraint is not None:
            pulumi.set(__self__, "placement_constraint", placement_constraint)
        if primary_subnet_id is not None:
            pulumi.set(__self__, "primary_subnet_id", primary_subnet_id)
        if primary_vnic_subnets is not None:
            pulumi.set(__self__, "primary_vnic_subnets", primary_vnic_subnets)
        if secondary_vnic_subnets is not None:
            pulumi.set(__self__, "secondary_vnic_subnets", secondary_vnic_subnets)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="placementConstraint")
    def placement_constraint(self) -> Optional[str]:
        return pulumi.get(self, "placement_constraint")

    @property
    @pulumi.getter(name="primarySubnetId")
    def primary_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "primary_subnet_id")

    @property
    @pulumi.getter(name="primaryVnicSubnets")
    def primary_vnic_subnets(self) -> Optional['outputs.ClusterNetworkPlacementConfigurationPrimaryVnicSubnets']:
        return pulumi.get(self, "primary_vnic_subnets")

    @property
    @pulumi.getter(name="secondaryVnicSubnets")
    def secondary_vnic_subnets(self) -> Optional[Sequence['outputs.ClusterNetworkPlacementConfigurationSecondaryVnicSubnet']]:
        return pulumi.get(self, "secondary_vnic_subnets")


@pulumi.output_type
class ClusterNetworkPlacementConfigurationPrimaryVnicSubnets(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "ipv6addressIpv6subnetCidrPairDetails":
            suggest = "ipv6address_ipv6subnet_cidr_pair_details"
        elif key == "isAssignIpv6ip":
            suggest = "is_assign_ipv6ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNetworkPlacementConfigurationPrimaryVnicSubnets. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNetworkPlacementConfigurationPrimaryVnicSubnets.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNetworkPlacementConfigurationPrimaryVnicSubnets.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.ClusterNetworkPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail']] = None,
                 is_assign_ipv6ip: Optional[bool] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.ClusterNetworkPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")


@pulumi.output_type
class ClusterNetworkPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6subnetCidr":
            suggest = "ipv6subnet_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNetworkPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNetworkPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNetworkPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class ClusterNetworkPlacementConfigurationSecondaryVnicSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "ipv6addressIpv6subnetCidrPairDetails":
            suggest = "ipv6address_ipv6subnet_cidr_pair_details"
        elif key == "isAssignIpv6ip":
            suggest = "is_assign_ipv6ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNetworkPlacementConfigurationSecondaryVnicSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNetworkPlacementConfigurationSecondaryVnicSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNetworkPlacementConfigurationSecondaryVnicSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 display_name: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.ClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail']] = None,
                 is_assign_ipv6ip: Optional[bool] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.ClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")


@pulumi.output_type
class ClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6subnetCidr":
            suggest = "ipv6subnet_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class ComputeCapacityReportShapeAvailability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceShape":
            suggest = "instance_shape"
        elif key == "availabilityStatus":
            suggest = "availability_status"
        elif key == "availableCount":
            suggest = "available_count"
        elif key == "faultDomain":
            suggest = "fault_domain"
        elif key == "instanceShapeConfig":
            suggest = "instance_shape_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeCapacityReportShapeAvailability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeCapacityReportShapeAvailability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeCapacityReportShapeAvailability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_shape: str,
                 availability_status: Optional[str] = None,
                 available_count: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 instance_shape_config: Optional['outputs.ComputeCapacityReportShapeAvailabilityInstanceShapeConfig'] = None):
        pulumi.set(__self__, "instance_shape", instance_shape)
        if availability_status is not None:
            pulumi.set(__self__, "availability_status", availability_status)
        if available_count is not None:
            pulumi.set(__self__, "available_count", available_count)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if instance_shape_config is not None:
            pulumi.set(__self__, "instance_shape_config", instance_shape_config)

    @property
    @pulumi.getter(name="instanceShape")
    def instance_shape(self) -> str:
        return pulumi.get(self, "instance_shape")

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[str]:
        return pulumi.get(self, "availability_status")

    @property
    @pulumi.getter(name="availableCount")
    def available_count(self) -> Optional[str]:
        return pulumi.get(self, "available_count")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="instanceShapeConfig")
    def instance_shape_config(self) -> Optional['outputs.ComputeCapacityReportShapeAvailabilityInstanceShapeConfig']:
        return pulumi.get(self, "instance_shape_config")


@pulumi.output_type
class ComputeCapacityReportShapeAvailabilityInstanceShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeCapacityReportShapeAvailabilityInstanceShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeCapacityReportShapeAvailabilityInstanceShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeCapacityReportShapeAvailabilityInstanceShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class ComputeCapacityReservationInstanceReservationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceShape":
            suggest = "instance_shape"
        elif key == "reservedCount":
            suggest = "reserved_count"
        elif key == "clusterConfig":
            suggest = "cluster_config"
        elif key == "faultDomain":
            suggest = "fault_domain"
        elif key == "instanceShapeConfig":
            suggest = "instance_shape_config"
        elif key == "usedCount":
            suggest = "used_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeCapacityReservationInstanceReservationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeCapacityReservationInstanceReservationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeCapacityReservationInstanceReservationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_shape: str,
                 reserved_count: str,
                 cluster_config: Optional['outputs.ComputeCapacityReservationInstanceReservationConfigClusterConfig'] = None,
                 fault_domain: Optional[str] = None,
                 instance_shape_config: Optional['outputs.ComputeCapacityReservationInstanceReservationConfigInstanceShapeConfig'] = None,
                 used_count: Optional[str] = None):
        pulumi.set(__self__, "instance_shape", instance_shape)
        pulumi.set(__self__, "reserved_count", reserved_count)
        if cluster_config is not None:
            pulumi.set(__self__, "cluster_config", cluster_config)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if instance_shape_config is not None:
            pulumi.set(__self__, "instance_shape_config", instance_shape_config)
        if used_count is not None:
            pulumi.set(__self__, "used_count", used_count)

    @property
    @pulumi.getter(name="instanceShape")
    def instance_shape(self) -> str:
        return pulumi.get(self, "instance_shape")

    @property
    @pulumi.getter(name="reservedCount")
    def reserved_count(self) -> str:
        return pulumi.get(self, "reserved_count")

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> Optional['outputs.ComputeCapacityReservationInstanceReservationConfigClusterConfig']:
        return pulumi.get(self, "cluster_config")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="instanceShapeConfig")
    def instance_shape_config(self) -> Optional['outputs.ComputeCapacityReservationInstanceReservationConfigInstanceShapeConfig']:
        return pulumi.get(self, "instance_shape_config")

    @property
    @pulumi.getter(name="usedCount")
    def used_count(self) -> Optional[str]:
        return pulumi.get(self, "used_count")


@pulumi.output_type
class ComputeCapacityReservationInstanceReservationConfigClusterConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hpcIslandId":
            suggest = "hpc_island_id"
        elif key == "networkBlockIds":
            suggest = "network_block_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeCapacityReservationInstanceReservationConfigClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeCapacityReservationInstanceReservationConfigClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeCapacityReservationInstanceReservationConfigClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hpc_island_id: str,
                 network_block_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "hpc_island_id", hpc_island_id)
        if network_block_ids is not None:
            pulumi.set(__self__, "network_block_ids", network_block_ids)

    @property
    @pulumi.getter(name="hpcIslandId")
    def hpc_island_id(self) -> str:
        return pulumi.get(self, "hpc_island_id")

    @property
    @pulumi.getter(name="networkBlockIds")
    def network_block_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_block_ids")


@pulumi.output_type
class ComputeCapacityReservationInstanceReservationConfigInstanceShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeCapacityReservationInstanceReservationConfigInstanceShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeCapacityReservationInstanceReservationConfigInstanceShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeCapacityReservationInstanceReservationConfigInstanceShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class CrossConnectGroupMacsecProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionCipher":
            suggest = "encryption_cipher"
        elif key == "isUnprotectedTrafficAllowed":
            suggest = "is_unprotected_traffic_allowed"
        elif key == "primaryKey":
            suggest = "primary_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CrossConnectGroupMacsecProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CrossConnectGroupMacsecProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CrossConnectGroupMacsecProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 state: str,
                 encryption_cipher: Optional[str] = None,
                 is_unprotected_traffic_allowed: Optional[bool] = None,
                 primary_key: Optional['outputs.CrossConnectGroupMacsecPropertiesPrimaryKey'] = None):
        pulumi.set(__self__, "state", state)
        if encryption_cipher is not None:
            pulumi.set(__self__, "encryption_cipher", encryption_cipher)
        if is_unprotected_traffic_allowed is not None:
            pulumi.set(__self__, "is_unprotected_traffic_allowed", is_unprotected_traffic_allowed)
        if primary_key is not None:
            pulumi.set(__self__, "primary_key", primary_key)

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="encryptionCipher")
    def encryption_cipher(self) -> Optional[str]:
        return pulumi.get(self, "encryption_cipher")

    @property
    @pulumi.getter(name="isUnprotectedTrafficAllowed")
    def is_unprotected_traffic_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_unprotected_traffic_allowed")

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> Optional['outputs.CrossConnectGroupMacsecPropertiesPrimaryKey']:
        return pulumi.get(self, "primary_key")


@pulumi.output_type
class CrossConnectGroupMacsecPropertiesPrimaryKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectivityAssociationKeySecretId":
            suggest = "connectivity_association_key_secret_id"
        elif key == "connectivityAssociationNameSecretId":
            suggest = "connectivity_association_name_secret_id"
        elif key == "connectivityAssociationKeySecretVersion":
            suggest = "connectivity_association_key_secret_version"
        elif key == "connectivityAssociationNameSecretVersion":
            suggest = "connectivity_association_name_secret_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CrossConnectGroupMacsecPropertiesPrimaryKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CrossConnectGroupMacsecPropertiesPrimaryKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CrossConnectGroupMacsecPropertiesPrimaryKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connectivity_association_key_secret_id: str,
                 connectivity_association_name_secret_id: str,
                 connectivity_association_key_secret_version: Optional[str] = None,
                 connectivity_association_name_secret_version: Optional[str] = None):
        pulumi.set(__self__, "connectivity_association_key_secret_id", connectivity_association_key_secret_id)
        pulumi.set(__self__, "connectivity_association_name_secret_id", connectivity_association_name_secret_id)
        if connectivity_association_key_secret_version is not None:
            pulumi.set(__self__, "connectivity_association_key_secret_version", connectivity_association_key_secret_version)
        if connectivity_association_name_secret_version is not None:
            pulumi.set(__self__, "connectivity_association_name_secret_version", connectivity_association_name_secret_version)

    @property
    @pulumi.getter(name="connectivityAssociationKeySecretId")
    def connectivity_association_key_secret_id(self) -> str:
        return pulumi.get(self, "connectivity_association_key_secret_id")

    @property
    @pulumi.getter(name="connectivityAssociationNameSecretId")
    def connectivity_association_name_secret_id(self) -> str:
        return pulumi.get(self, "connectivity_association_name_secret_id")

    @property
    @pulumi.getter(name="connectivityAssociationKeySecretVersion")
    def connectivity_association_key_secret_version(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_key_secret_version")

    @property
    @pulumi.getter(name="connectivityAssociationNameSecretVersion")
    def connectivity_association_name_secret_version(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_name_secret_version")


@pulumi.output_type
class CrossConnectMacsecProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionCipher":
            suggest = "encryption_cipher"
        elif key == "isUnprotectedTrafficAllowed":
            suggest = "is_unprotected_traffic_allowed"
        elif key == "primaryKey":
            suggest = "primary_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CrossConnectMacsecProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CrossConnectMacsecProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CrossConnectMacsecProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 state: str,
                 encryption_cipher: Optional[str] = None,
                 is_unprotected_traffic_allowed: Optional[bool] = None,
                 primary_key: Optional['outputs.CrossConnectMacsecPropertiesPrimaryKey'] = None):
        pulumi.set(__self__, "state", state)
        if encryption_cipher is not None:
            pulumi.set(__self__, "encryption_cipher", encryption_cipher)
        if is_unprotected_traffic_allowed is not None:
            pulumi.set(__self__, "is_unprotected_traffic_allowed", is_unprotected_traffic_allowed)
        if primary_key is not None:
            pulumi.set(__self__, "primary_key", primary_key)

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="encryptionCipher")
    def encryption_cipher(self) -> Optional[str]:
        return pulumi.get(self, "encryption_cipher")

    @property
    @pulumi.getter(name="isUnprotectedTrafficAllowed")
    def is_unprotected_traffic_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_unprotected_traffic_allowed")

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> Optional['outputs.CrossConnectMacsecPropertiesPrimaryKey']:
        return pulumi.get(self, "primary_key")


@pulumi.output_type
class CrossConnectMacsecPropertiesPrimaryKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectivityAssociationKeySecretId":
            suggest = "connectivity_association_key_secret_id"
        elif key == "connectivityAssociationNameSecretId":
            suggest = "connectivity_association_name_secret_id"
        elif key == "connectivityAssociationKeySecretVersion":
            suggest = "connectivity_association_key_secret_version"
        elif key == "connectivityAssociationNameSecretVersion":
            suggest = "connectivity_association_name_secret_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CrossConnectMacsecPropertiesPrimaryKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CrossConnectMacsecPropertiesPrimaryKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CrossConnectMacsecPropertiesPrimaryKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connectivity_association_key_secret_id: str,
                 connectivity_association_name_secret_id: str,
                 connectivity_association_key_secret_version: Optional[str] = None,
                 connectivity_association_name_secret_version: Optional[str] = None):
        pulumi.set(__self__, "connectivity_association_key_secret_id", connectivity_association_key_secret_id)
        pulumi.set(__self__, "connectivity_association_name_secret_id", connectivity_association_name_secret_id)
        if connectivity_association_key_secret_version is not None:
            pulumi.set(__self__, "connectivity_association_key_secret_version", connectivity_association_key_secret_version)
        if connectivity_association_name_secret_version is not None:
            pulumi.set(__self__, "connectivity_association_name_secret_version", connectivity_association_name_secret_version)

    @property
    @pulumi.getter(name="connectivityAssociationKeySecretId")
    def connectivity_association_key_secret_id(self) -> str:
        return pulumi.get(self, "connectivity_association_key_secret_id")

    @property
    @pulumi.getter(name="connectivityAssociationNameSecretId")
    def connectivity_association_name_secret_id(self) -> str:
        return pulumi.get(self, "connectivity_association_name_secret_id")

    @property
    @pulumi.getter(name="connectivityAssociationKeySecretVersion")
    def connectivity_association_key_secret_version(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_key_secret_version")

    @property
    @pulumi.getter(name="connectivityAssociationNameSecretVersion")
    def connectivity_association_name_secret_version(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_name_secret_version")


@pulumi.output_type
class DefaultDhcpOptionsOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customDnsServers":
            suggest = "custom_dns_servers"
        elif key == "searchDomainNames":
            suggest = "search_domain_names"
        elif key == "serverType":
            suggest = "server_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultDhcpOptionsOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultDhcpOptionsOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultDhcpOptionsOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 custom_dns_servers: Optional[Sequence[str]] = None,
                 search_domain_names: Optional[Sequence[str]] = None,
                 server_type: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if custom_dns_servers is not None:
            pulumi.set(__self__, "custom_dns_servers", custom_dns_servers)
        if search_domain_names is not None:
            pulumi.set(__self__, "search_domain_names", search_domain_names)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="customDnsServers")
    def custom_dns_servers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_dns_servers")

    @property
    @pulumi.getter(name="searchDomainNames")
    def search_domain_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "search_domain_names")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[str]:
        return pulumi.get(self, "server_type")


@pulumi.output_type
class DefaultRouteTableRouteRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkEntityId":
            suggest = "network_entity_id"
        elif key == "cidrBlock":
            suggest = "cidr_block"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "routeType":
            suggest = "route_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultRouteTableRouteRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultRouteTableRouteRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultRouteTableRouteRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_entity_id: str,
                 cidr_block: Optional[str] = None,
                 description: Optional[str] = None,
                 destination: Optional[str] = None,
                 destination_type: Optional[str] = None,
                 route_type: Optional[str] = None):
        pulumi.set(__self__, "network_entity_id", network_entity_id)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if route_type is not None:
            pulumi.set(__self__, "route_type", route_type)

    @property
    @pulumi.getter(name="networkEntityId")
    def network_entity_id(self) -> str:
        return pulumi.get(self, "network_entity_id")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        warnings.warn("""The 'cidr_block' field has been deprecated. Please use 'destination' instead.""", DeprecationWarning)
        pulumi.log.warn("""cidr_block is deprecated: The 'cidr_block' field has been deprecated. Please use 'destination' instead.""")

        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> Optional[str]:
        return pulumi.get(self, "route_type")


@pulumi.output_type
class DefaultSecurityListEgressSecurityRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "icmpOptions":
            suggest = "icmp_options"
        elif key == "tcpOptions":
            suggest = "tcp_options"
        elif key == "udpOptions":
            suggest = "udp_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultSecurityListEgressSecurityRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultSecurityListEgressSecurityRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultSecurityListEgressSecurityRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 protocol: str,
                 description: Optional[str] = None,
                 destination_type: Optional[str] = None,
                 icmp_options: Optional['outputs.DefaultSecurityListEgressSecurityRuleIcmpOptions'] = None,
                 stateless: Optional[bool] = None,
                 tcp_options: Optional['outputs.DefaultSecurityListEgressSecurityRuleTcpOptions'] = None,
                 udp_options: Optional['outputs.DefaultSecurityListEgressSecurityRuleUdpOptions'] = None):
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "protocol", protocol)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if icmp_options is not None:
            pulumi.set(__self__, "icmp_options", icmp_options)
        if stateless is not None:
            pulumi.set(__self__, "stateless", stateless)
        if tcp_options is not None:
            pulumi.set(__self__, "tcp_options", tcp_options)
        if udp_options is not None:
            pulumi.set(__self__, "udp_options", udp_options)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> Optional['outputs.DefaultSecurityListEgressSecurityRuleIcmpOptions']:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter
    def stateless(self) -> Optional[bool]:
        return pulumi.get(self, "stateless")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Optional['outputs.DefaultSecurityListEgressSecurityRuleTcpOptions']:
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter(name="udpOptions")
    def udp_options(self) -> Optional['outputs.DefaultSecurityListEgressSecurityRuleUdpOptions']:
        return pulumi.get(self, "udp_options")


@pulumi.output_type
class DefaultSecurityListEgressSecurityRuleIcmpOptions(dict):
    def __init__(__self__, *,
                 type: int,
                 code: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def type(self) -> int:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")


@pulumi.output_type
class DefaultSecurityListEgressSecurityRuleTcpOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourcePortRange":
            suggest = "source_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultSecurityListEgressSecurityRuleTcpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultSecurityListEgressSecurityRuleTcpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultSecurityListEgressSecurityRuleTcpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None,
                 source_port_range: Optional['outputs.DefaultSecurityListEgressSecurityRuleTcpOptionsSourcePortRange'] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional['outputs.DefaultSecurityListEgressSecurityRuleTcpOptionsSourcePortRange']:
        return pulumi.get(self, "source_port_range")


@pulumi.output_type
class DefaultSecurityListEgressSecurityRuleTcpOptionsSourcePortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class DefaultSecurityListEgressSecurityRuleUdpOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourcePortRange":
            suggest = "source_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultSecurityListEgressSecurityRuleUdpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultSecurityListEgressSecurityRuleUdpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultSecurityListEgressSecurityRuleUdpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None,
                 source_port_range: Optional['outputs.DefaultSecurityListEgressSecurityRuleUdpOptionsSourcePortRange'] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional['outputs.DefaultSecurityListEgressSecurityRuleUdpOptionsSourcePortRange']:
        return pulumi.get(self, "source_port_range")


@pulumi.output_type
class DefaultSecurityListEgressSecurityRuleUdpOptionsSourcePortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class DefaultSecurityListIngressSecurityRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "icmpOptions":
            suggest = "icmp_options"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "tcpOptions":
            suggest = "tcp_options"
        elif key == "udpOptions":
            suggest = "udp_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultSecurityListIngressSecurityRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultSecurityListIngressSecurityRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultSecurityListIngressSecurityRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 source: str,
                 description: Optional[str] = None,
                 icmp_options: Optional['outputs.DefaultSecurityListIngressSecurityRuleIcmpOptions'] = None,
                 source_type: Optional[str] = None,
                 stateless: Optional[bool] = None,
                 tcp_options: Optional['outputs.DefaultSecurityListIngressSecurityRuleTcpOptions'] = None,
                 udp_options: Optional['outputs.DefaultSecurityListIngressSecurityRuleUdpOptions'] = None):
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "source", source)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icmp_options is not None:
            pulumi.set(__self__, "icmp_options", icmp_options)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stateless is not None:
            pulumi.set(__self__, "stateless", stateless)
        if tcp_options is not None:
            pulumi.set(__self__, "tcp_options", tcp_options)
        if udp_options is not None:
            pulumi.set(__self__, "udp_options", udp_options)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> Optional['outputs.DefaultSecurityListIngressSecurityRuleIcmpOptions']:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def stateless(self) -> Optional[bool]:
        return pulumi.get(self, "stateless")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Optional['outputs.DefaultSecurityListIngressSecurityRuleTcpOptions']:
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter(name="udpOptions")
    def udp_options(self) -> Optional['outputs.DefaultSecurityListIngressSecurityRuleUdpOptions']:
        return pulumi.get(self, "udp_options")


@pulumi.output_type
class DefaultSecurityListIngressSecurityRuleIcmpOptions(dict):
    def __init__(__self__, *,
                 type: int,
                 code: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def type(self) -> int:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")


@pulumi.output_type
class DefaultSecurityListIngressSecurityRuleTcpOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourcePortRange":
            suggest = "source_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultSecurityListIngressSecurityRuleTcpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultSecurityListIngressSecurityRuleTcpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultSecurityListIngressSecurityRuleTcpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None,
                 source_port_range: Optional['outputs.DefaultSecurityListIngressSecurityRuleTcpOptionsSourcePortRange'] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional['outputs.DefaultSecurityListIngressSecurityRuleTcpOptionsSourcePortRange']:
        return pulumi.get(self, "source_port_range")


@pulumi.output_type
class DefaultSecurityListIngressSecurityRuleTcpOptionsSourcePortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class DefaultSecurityListIngressSecurityRuleUdpOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourcePortRange":
            suggest = "source_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultSecurityListIngressSecurityRuleUdpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultSecurityListIngressSecurityRuleUdpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultSecurityListIngressSecurityRuleUdpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None,
                 source_port_range: Optional['outputs.DefaultSecurityListIngressSecurityRuleUdpOptionsSourcePortRange'] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional['outputs.DefaultSecurityListIngressSecurityRuleUdpOptionsSourcePortRange']:
        return pulumi.get(self, "source_port_range")


@pulumi.output_type
class DefaultSecurityListIngressSecurityRuleUdpOptionsSourcePortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class DhcpOptionsOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customDnsServers":
            suggest = "custom_dns_servers"
        elif key == "searchDomainNames":
            suggest = "search_domain_names"
        elif key == "serverType":
            suggest = "server_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DhcpOptionsOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DhcpOptionsOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DhcpOptionsOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 custom_dns_servers: Optional[Sequence[str]] = None,
                 search_domain_names: Optional[Sequence[str]] = None,
                 server_type: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if custom_dns_servers is not None:
            pulumi.set(__self__, "custom_dns_servers", custom_dns_servers)
        if search_domain_names is not None:
            pulumi.set(__self__, "search_domain_names", search_domain_names)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="customDnsServers")
    def custom_dns_servers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_dns_servers")

    @property
    @pulumi.getter(name="searchDomainNames")
    def search_domain_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "search_domain_names")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[str]:
        return pulumi.get(self, "server_type")


@pulumi.output_type
class DrgAttachmentManagementNetworkDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipsecConnectionId":
            suggest = "ipsec_connection_id"
        elif key == "routeTableId":
            suggest = "route_table_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrgAttachmentManagementNetworkDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrgAttachmentManagementNetworkDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrgAttachmentManagementNetworkDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 type: str,
                 ipsec_connection_id: Optional[str] = None,
                 route_table_id: Optional[str] = None):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if ipsec_connection_id is not None:
            pulumi.set(__self__, "ipsec_connection_id", ipsec_connection_id)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="ipsecConnectionId")
    def ipsec_connection_id(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_connection_id")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "route_table_id")


@pulumi.output_type
class DrgAttachmentNetworkDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipsecConnectionId":
            suggest = "ipsec_connection_id"
        elif key == "routeTableId":
            suggest = "route_table_id"
        elif key == "transportAttachmentId":
            suggest = "transport_attachment_id"
        elif key == "transportOnlyMode":
            suggest = "transport_only_mode"
        elif key == "vcnRouteType":
            suggest = "vcn_route_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrgAttachmentNetworkDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrgAttachmentNetworkDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrgAttachmentNetworkDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 id: Optional[str] = None,
                 ids: Optional[Sequence[str]] = None,
                 ipsec_connection_id: Optional[str] = None,
                 route_table_id: Optional[str] = None,
                 transport_attachment_id: Optional[str] = None,
                 transport_only_mode: Optional[bool] = None,
                 vcn_route_type: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if ipsec_connection_id is not None:
            pulumi.set(__self__, "ipsec_connection_id", ipsec_connection_id)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if transport_attachment_id is not None:
            pulumi.set(__self__, "transport_attachment_id", transport_attachment_id)
        if transport_only_mode is not None:
            pulumi.set(__self__, "transport_only_mode", transport_only_mode)
        if vcn_route_type is not None:
            pulumi.set(__self__, "vcn_route_type", vcn_route_type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="ipsecConnectionId")
    def ipsec_connection_id(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_connection_id")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter(name="transportAttachmentId")
    def transport_attachment_id(self) -> Optional[str]:
        return pulumi.get(self, "transport_attachment_id")

    @property
    @pulumi.getter(name="transportOnlyMode")
    def transport_only_mode(self) -> Optional[bool]:
        return pulumi.get(self, "transport_only_mode")

    @property
    @pulumi.getter(name="vcnRouteType")
    def vcn_route_type(self) -> Optional[str]:
        return pulumi.get(self, "vcn_route_type")


@pulumi.output_type
class DrgAttachmentsListDrgAllAttachment(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class DrgDefaultDrgRouteTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipsecTunnel":
            suggest = "ipsec_tunnel"
        elif key == "remotePeeringConnection":
            suggest = "remote_peering_connection"
        elif key == "virtualCircuit":
            suggest = "virtual_circuit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrgDefaultDrgRouteTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrgDefaultDrgRouteTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrgDefaultDrgRouteTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipsec_tunnel: Optional[str] = None,
                 remote_peering_connection: Optional[str] = None,
                 vcn: Optional[str] = None,
                 virtual_circuit: Optional[str] = None):
        if ipsec_tunnel is not None:
            pulumi.set(__self__, "ipsec_tunnel", ipsec_tunnel)
        if remote_peering_connection is not None:
            pulumi.set(__self__, "remote_peering_connection", remote_peering_connection)
        if vcn is not None:
            pulumi.set(__self__, "vcn", vcn)
        if virtual_circuit is not None:
            pulumi.set(__self__, "virtual_circuit", virtual_circuit)

    @property
    @pulumi.getter(name="ipsecTunnel")
    def ipsec_tunnel(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_tunnel")

    @property
    @pulumi.getter(name="remotePeeringConnection")
    def remote_peering_connection(self) -> Optional[str]:
        return pulumi.get(self, "remote_peering_connection")

    @property
    @pulumi.getter
    def vcn(self) -> Optional[str]:
        return pulumi.get(self, "vcn")

    @property
    @pulumi.getter(name="virtualCircuit")
    def virtual_circuit(self) -> Optional[str]:
        return pulumi.get(self, "virtual_circuit")


@pulumi.output_type
class DrgRouteDistributionStatementMatchCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attachmentType":
            suggest = "attachment_type"
        elif key == "drgAttachmentId":
            suggest = "drg_attachment_id"
        elif key == "matchType":
            suggest = "match_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrgRouteDistributionStatementMatchCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrgRouteDistributionStatementMatchCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrgRouteDistributionStatementMatchCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attachment_type: Optional[str] = None,
                 drg_attachment_id: Optional[str] = None,
                 match_type: Optional[str] = None):
        if attachment_type is not None:
            pulumi.set(__self__, "attachment_type", attachment_type)
        if drg_attachment_id is not None:
            pulumi.set(__self__, "drg_attachment_id", drg_attachment_id)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="attachmentType")
    def attachment_type(self) -> Optional[str]:
        return pulumi.get(self, "attachment_type")

    @property
    @pulumi.getter(name="drgAttachmentId")
    def drg_attachment_id(self) -> Optional[str]:
        return pulumi.get(self, "drg_attachment_id")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")


@pulumi.output_type
class ImageAgentFeature(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isManagementSupported":
            suggest = "is_management_supported"
        elif key == "isMonitoringSupported":
            suggest = "is_monitoring_supported"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageAgentFeature. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageAgentFeature.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageAgentFeature.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_management_supported: Optional[bool] = None,
                 is_monitoring_supported: Optional[bool] = None):
        if is_management_supported is not None:
            pulumi.set(__self__, "is_management_supported", is_management_supported)
        if is_monitoring_supported is not None:
            pulumi.set(__self__, "is_monitoring_supported", is_monitoring_supported)

    @property
    @pulumi.getter(name="isManagementSupported")
    def is_management_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_supported")

    @property
    @pulumi.getter(name="isMonitoringSupported")
    def is_monitoring_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_supported")


@pulumi.output_type
class ImageImageSourceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "bucketName":
            suggest = "bucket_name"
        elif key == "namespaceName":
            suggest = "namespace_name"
        elif key == "objectName":
            suggest = "object_name"
        elif key == "operatingSystem":
            suggest = "operating_system"
        elif key == "operatingSystemVersion":
            suggest = "operating_system_version"
        elif key == "sourceImageType":
            suggest = "source_image_type"
        elif key == "sourceUri":
            suggest = "source_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageImageSourceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageImageSourceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageImageSourceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 bucket_name: Optional[str] = None,
                 namespace_name: Optional[str] = None,
                 object_name: Optional[str] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None,
                 source_image_type: Optional[str] = None,
                 source_uri: Optional[str] = None):
        pulumi.set(__self__, "source_type", source_type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if object_name is not None:
            pulumi.set(__self__, "object_name", object_name)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)
        if source_image_type is not None:
            pulumi.set(__self__, "source_image_type", source_image_type)
        if source_uri is not None:
            pulumi.set(__self__, "source_uri", source_uri)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[str]:
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> Optional[str]:
        return pulumi.get(self, "object_name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")

    @property
    @pulumi.getter(name="sourceImageType")
    def source_image_type(self) -> Optional[str]:
        return pulumi.get(self, "source_image_type")

    @property
    @pulumi.getter(name="sourceUri")
    def source_uri(self) -> Optional[str]:
        return pulumi.get(self, "source_uri")


@pulumi.output_type
class ImageLaunchOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootVolumeType":
            suggest = "boot_volume_type"
        elif key == "isConsistentVolumeNamingEnabled":
            suggest = "is_consistent_volume_naming_enabled"
        elif key == "isPvEncryptionInTransitEnabled":
            suggest = "is_pv_encryption_in_transit_enabled"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "remoteDataVolumeType":
            suggest = "remote_data_volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageLaunchOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageLaunchOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageLaunchOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_volume_type: Optional[str] = None,
                 firmware: Optional[str] = None,
                 is_consistent_volume_naming_enabled: Optional[bool] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 network_type: Optional[str] = None,
                 remote_data_volume_type: Optional[str] = None):
        if boot_volume_type is not None:
            pulumi.set(__self__, "boot_volume_type", boot_volume_type)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if is_consistent_volume_naming_enabled is not None:
            pulumi.set(__self__, "is_consistent_volume_naming_enabled", is_consistent_volume_naming_enabled)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if remote_data_volume_type is not None:
            pulumi.set(__self__, "remote_data_volume_type", remote_data_volume_type)

    @property
    @pulumi.getter(name="bootVolumeType")
    def boot_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_type")

    @property
    @pulumi.getter
    def firmware(self) -> Optional[str]:
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="isConsistentVolumeNamingEnabled")
    def is_consistent_volume_naming_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_consistent_volume_naming_enabled")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="remoteDataVolumeType")
    def remote_data_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "remote_data_volume_type")


@pulumi.output_type
class InstanceAgentConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areAllPluginsDisabled":
            suggest = "are_all_plugins_disabled"
        elif key == "isManagementDisabled":
            suggest = "is_management_disabled"
        elif key == "isMonitoringDisabled":
            suggest = "is_monitoring_disabled"
        elif key == "pluginsConfigs":
            suggest = "plugins_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceAgentConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceAgentConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceAgentConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.InstanceAgentConfigPluginsConfig']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.InstanceAgentConfigPluginsConfig']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class InstanceAgentConfigPluginsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "desiredState":
            suggest = "desired_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceAgentConfigPluginsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceAgentConfigPluginsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceAgentConfigPluginsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 desired_state: str,
                 name: str):
        pulumi.set(__self__, "desired_state", desired_state)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> str:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class InstanceAvailabilityConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isLiveMigrationPreferred":
            suggest = "is_live_migration_preferred"
        elif key == "recoveryAction":
            suggest = "recovery_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceAvailabilityConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceAvailabilityConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceAvailabilityConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_live_migration_preferred: Optional[bool] = None,
                 recovery_action: Optional[str] = None):
        if is_live_migration_preferred is not None:
            pulumi.set(__self__, "is_live_migration_preferred", is_live_migration_preferred)
        if recovery_action is not None:
            pulumi.set(__self__, "recovery_action", recovery_action)

    @property
    @pulumi.getter(name="isLiveMigrationPreferred")
    def is_live_migration_preferred(self) -> Optional[bool]:
        return pulumi.get(self, "is_live_migration_preferred")

    @property
    @pulumi.getter(name="recoveryAction")
    def recovery_action(self) -> Optional[str]:
        return pulumi.get(self, "recovery_action")


@pulumi.output_type
class InstanceConfigurationInstanceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "blockVolumes":
            suggest = "block_volumes"
        elif key == "launchDetails":
            suggest = "launch_details"
        elif key == "secondaryVnics":
            suggest = "secondary_vnics"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: str,
                 block_volumes: Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsBlockVolume']] = None,
                 launch_details: Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetails'] = None,
                 options: Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsOption']] = None,
                 secondary_vnics: Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsSecondaryVnic']] = None):
        pulumi.set(__self__, "instance_type", instance_type)
        if block_volumes is not None:
            pulumi.set(__self__, "block_volumes", block_volumes)
        if launch_details is not None:
            pulumi.set(__self__, "launch_details", launch_details)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if secondary_vnics is not None:
            pulumi.set(__self__, "secondary_vnics", secondary_vnics)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="blockVolumes")
    def block_volumes(self) -> Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsBlockVolume']]:
        return pulumi.get(self, "block_volumes")

    @property
    @pulumi.getter(name="launchDetails")
    def launch_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetails']:
        return pulumi.get(self, "launch_details")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsOption']]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="secondaryVnics")
    def secondary_vnics(self) -> Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsSecondaryVnic']]:
        return pulumi.get(self, "secondary_vnics")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsBlockVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attachDetails":
            suggest = "attach_details"
        elif key == "createDetails":
            suggest = "create_details"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsBlockVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsBlockVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsBlockVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attach_details: Optional['outputs.InstanceConfigurationInstanceDetailsBlockVolumeAttachDetails'] = None,
                 create_details: Optional['outputs.InstanceConfigurationInstanceDetailsBlockVolumeCreateDetails'] = None,
                 volume_id: Optional[str] = None):
        if attach_details is not None:
            pulumi.set(__self__, "attach_details", attach_details)
        if create_details is not None:
            pulumi.set(__self__, "create_details", create_details)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="attachDetails")
    def attach_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsBlockVolumeAttachDetails']:
        return pulumi.get(self, "attach_details")

    @property
    @pulumi.getter(name="createDetails")
    def create_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsBlockVolumeCreateDetails']:
        return pulumi.get(self, "create_details")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsBlockVolumeAttachDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "isPvEncryptionInTransitEnabled":
            suggest = "is_pv_encryption_in_transit_enabled"
        elif key == "isReadOnly":
            suggest = "is_read_only"
        elif key == "isShareable":
            suggest = "is_shareable"
        elif key == "useChap":
            suggest = "use_chap"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsBlockVolumeAttachDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsBlockVolumeAttachDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsBlockVolumeAttachDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 device: Optional[str] = None,
                 display_name: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 is_read_only: Optional[bool] = None,
                 is_shareable: Optional[bool] = None,
                 use_chap: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if is_shareable is not None:
            pulumi.set(__self__, "is_shareable", is_shareable)
        if use_chap is not None:
            pulumi.set(__self__, "use_chap", use_chap)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_read_only")

    @property
    @pulumi.getter(name="isShareable")
    def is_shareable(self) -> Optional[bool]:
        return pulumi.get(self, "is_shareable")

    @property
    @pulumi.getter(name="useChap")
    def use_chap(self) -> Optional[bool]:
        return pulumi.get(self, "use_chap")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsBlockVolumeCreateDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autotunePolicies":
            suggest = "autotune_policies"
        elif key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "backupPolicyId":
            suggest = "backup_policy_id"
        elif key == "blockVolumeReplicas":
            suggest = "block_volume_replicas"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "isAutoTuneEnabled":
            suggest = "is_auto_tune_enabled"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "sizeInGbs":
            suggest = "size_in_gbs"
        elif key == "sourceDetails":
            suggest = "source_details"
        elif key == "vpusPerGb":
            suggest = "vpus_per_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsBlockVolumeCreateDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsBlockVolumeCreateDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsBlockVolumeCreateDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autotune_policies: Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsAutotunePolicy']] = None,
                 availability_domain: Optional[str] = None,
                 backup_policy_id: Optional[str] = None,
                 block_volume_replicas: Optional['outputs.InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsBlockVolumeReplicas'] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 is_auto_tune_enabled: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 size_in_gbs: Optional[str] = None,
                 source_details: Optional['outputs.InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsSourceDetails'] = None,
                 vpus_per_gb: Optional[str] = None):
        if autotune_policies is not None:
            pulumi.set(__self__, "autotune_policies", autotune_policies)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if backup_policy_id is not None:
            pulumi.set(__self__, "backup_policy_id", backup_policy_id)
        if block_volume_replicas is not None:
            pulumi.set(__self__, "block_volume_replicas", block_volume_replicas)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_auto_tune_enabled is not None:
            pulumi.set(__self__, "is_auto_tune_enabled", is_auto_tune_enabled)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size_in_gbs is not None:
            pulumi.set(__self__, "size_in_gbs", size_in_gbs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)
        if vpus_per_gb is not None:
            pulumi.set(__self__, "vpus_per_gb", vpus_per_gb)

    @property
    @pulumi.getter(name="autotunePolicies")
    def autotune_policies(self) -> Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsAutotunePolicy']]:
        return pulumi.get(self, "autotune_policies")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "backup_policy_id")

    @property
    @pulumi.getter(name="blockVolumeReplicas")
    def block_volume_replicas(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsBlockVolumeReplicas']:
        return pulumi.get(self, "block_volume_replicas")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isAutoTuneEnabled")
    def is_auto_tune_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_tune_enabled")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sizeInGbs")
    def size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_gbs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsSourceDetails']:
        return pulumi.get(self, "source_details")

    @property
    @pulumi.getter(name="vpusPerGb")
    def vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "vpus_per_gb")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsAutotunePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autotuneType":
            suggest = "autotune_type"
        elif key == "maxVpusPerGb":
            suggest = "max_vpus_per_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsAutotunePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsAutotunePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsAutotunePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autotune_type: str,
                 max_vpus_per_gb: Optional[str] = None):
        pulumi.set(__self__, "autotune_type", autotune_type)
        if max_vpus_per_gb is not None:
            pulumi.set(__self__, "max_vpus_per_gb", max_vpus_per_gb)

    @property
    @pulumi.getter(name="autotuneType")
    def autotune_type(self) -> str:
        return pulumi.get(self, "autotune_type")

    @property
    @pulumi.getter(name="maxVpusPerGb")
    def max_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "max_vpus_per_gb")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsBlockVolumeReplicas(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsBlockVolumeReplicas. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsBlockVolumeReplicas.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsBlockVolumeReplicas.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_domain: str,
                 display_name: Optional[str] = None):
        pulumi.set(__self__, "availability_domain", availability_domain)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsBlockVolumeCreateDetailsSourceDetails(dict):
    def __init__(__self__, *,
                 type: str,
                 id: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsLaunchDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentConfig":
            suggest = "agent_config"
        elif key == "availabilityConfig":
            suggest = "availability_config"
        elif key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "capacityReservationId":
            suggest = "capacity_reservation_id"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "createVnicDetails":
            suggest = "create_vnic_details"
        elif key == "dedicatedVmHostId":
            suggest = "dedicated_vm_host_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "extendedMetadata":
            suggest = "extended_metadata"
        elif key == "faultDomain":
            suggest = "fault_domain"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "instanceOptions":
            suggest = "instance_options"
        elif key == "ipxeScript":
            suggest = "ipxe_script"
        elif key == "isPvEncryptionInTransitEnabled":
            suggest = "is_pv_encryption_in_transit_enabled"
        elif key == "launchMode":
            suggest = "launch_mode"
        elif key == "launchOptions":
            suggest = "launch_options"
        elif key == "platformConfig":
            suggest = "platform_config"
        elif key == "preemptibleInstanceConfig":
            suggest = "preemptible_instance_config"
        elif key == "preferredMaintenanceAction":
            suggest = "preferred_maintenance_action"
        elif key == "shapeConfig":
            suggest = "shape_config"
        elif key == "sourceDetails":
            suggest = "source_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsLaunchDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_config: Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsAgentConfig'] = None,
                 availability_config: Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfig'] = None,
                 availability_domain: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetails'] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 extended_metadata: Optional[Mapping[str, Any]] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 instance_options: Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsInstanceOptions'] = None,
                 ipxe_script: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 launch_mode: Optional[str] = None,
                 launch_options: Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsLaunchOptions'] = None,
                 metadata: Optional[Mapping[str, Any]] = None,
                 platform_config: Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig'] = None,
                 preemptible_instance_config: Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfig'] = None,
                 preferred_maintenance_action: Optional[str] = None,
                 shape: Optional[str] = None,
                 shape_config: Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsShapeConfig'] = None,
                 source_details: Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsSourceDetails'] = None):
        if agent_config is not None:
            pulumi.set(__self__, "agent_config", agent_config)
        if availability_config is not None:
            pulumi.set(__self__, "availability_config", availability_config)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if extended_metadata is not None:
            pulumi.set(__self__, "extended_metadata", extended_metadata)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if launch_mode is not None:
            pulumi.set(__self__, "launch_mode", launch_mode)
        if launch_options is not None:
            pulumi.set(__self__, "launch_options", launch_options)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if platform_config is not None:
            pulumi.set(__self__, "platform_config", platform_config)
        if preemptible_instance_config is not None:
            pulumi.set(__self__, "preemptible_instance_config", preemptible_instance_config)
        if preferred_maintenance_action is not None:
            pulumi.set(__self__, "preferred_maintenance_action", preferred_maintenance_action)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_config is not None:
            pulumi.set(__self__, "shape_config", shape_config)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)

    @property
    @pulumi.getter(name="agentConfig")
    def agent_config(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsAgentConfig']:
        return pulumi.get(self, "agent_config")

    @property
    @pulumi.getter(name="availabilityConfig")
    def availability_config(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfig']:
        return pulumi.get(self, "availability_config")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetails']:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="extendedMetadata")
    def extended_metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "extended_metadata")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsInstanceOptions']:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="launchMode")
    def launch_mode(self) -> Optional[str]:
        return pulumi.get(self, "launch_mode")

    @property
    @pulumi.getter(name="launchOptions")
    def launch_options(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsLaunchOptions']:
        return pulumi.get(self, "launch_options")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="platformConfig")
    def platform_config(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig']:
        return pulumi.get(self, "platform_config")

    @property
    @pulumi.getter(name="preemptibleInstanceConfig")
    def preemptible_instance_config(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfig']:
        return pulumi.get(self, "preemptible_instance_config")

    @property
    @pulumi.getter(name="preferredMaintenanceAction")
    def preferred_maintenance_action(self) -> Optional[str]:
        return pulumi.get(self, "preferred_maintenance_action")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfig")
    def shape_config(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsShapeConfig']:
        return pulumi.get(self, "shape_config")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsSourceDetails']:
        return pulumi.get(self, "source_details")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsLaunchDetailsAgentConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areAllPluginsDisabled":
            suggest = "are_all_plugins_disabled"
        elif key == "isManagementDisabled":
            suggest = "is_management_disabled"
        elif key == "isMonitoringDisabled":
            suggest = "is_monitoring_disabled"
        elif key == "pluginsConfigs":
            suggest = "plugins_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsLaunchDetailsAgentConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsAgentConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsAgentConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsAgentConfigPluginsConfig']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsAgentConfigPluginsConfig']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsLaunchDetailsAgentConfigPluginsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "desiredState":
            suggest = "desired_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsLaunchDetailsAgentConfigPluginsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsAgentConfigPluginsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsAgentConfigPluginsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isLiveMigrationPreferred":
            suggest = "is_live_migration_preferred"
        elif key == "recoveryAction":
            suggest = "recovery_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsAvailabilityConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_live_migration_preferred: Optional[bool] = None,
                 recovery_action: Optional[str] = None):
        if is_live_migration_preferred is not None:
            pulumi.set(__self__, "is_live_migration_preferred", is_live_migration_preferred)
        if recovery_action is not None:
            pulumi.set(__self__, "recovery_action", recovery_action)

    @property
    @pulumi.getter(name="isLiveMigrationPreferred")
    def is_live_migration_preferred(self) -> Optional[bool]:
        return pulumi.get(self, "is_live_migration_preferred")

    @property
    @pulumi.getter(name="recoveryAction")
    def recovery_action(self) -> Optional[str]:
        return pulumi.get(self, "recovery_action")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignIpv6ip":
            suggest = "assign_ipv6ip"
        elif key == "assignPrivateDnsRecord":
            suggest = "assign_private_dns_record"
        elif key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "hostnameLabel":
            suggest = "hostname_label"
        elif key == "ipv6addressIpv6subnetCidrPairDetails":
            suggest = "ipv6address_ipv6subnet_cidr_pair_details"
        elif key == "nsgIds":
            suggest = "nsg_ids"
        elif key == "privateIp":
            suggest = "private_ip"
        elif key == "skipSourceDestCheck":
            suggest = "skip_source_dest_check"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6subnetCidr":
            suggest = "ipv6subnet_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsLaunchDetailsInstanceOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areLegacyImdsEndpointsDisabled":
            suggest = "are_legacy_imds_endpoints_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsLaunchDetailsInstanceOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsInstanceOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsInstanceOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsLaunchDetailsLaunchOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootVolumeType":
            suggest = "boot_volume_type"
        elif key == "isConsistentVolumeNamingEnabled":
            suggest = "is_consistent_volume_naming_enabled"
        elif key == "isPvEncryptionInTransitEnabled":
            suggest = "is_pv_encryption_in_transit_enabled"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "remoteDataVolumeType":
            suggest = "remote_data_volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsLaunchDetailsLaunchOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsLaunchOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsLaunchOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_volume_type: Optional[str] = None,
                 firmware: Optional[str] = None,
                 is_consistent_volume_naming_enabled: Optional[bool] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 network_type: Optional[str] = None,
                 remote_data_volume_type: Optional[str] = None):
        if boot_volume_type is not None:
            pulumi.set(__self__, "boot_volume_type", boot_volume_type)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if is_consistent_volume_naming_enabled is not None:
            pulumi.set(__self__, "is_consistent_volume_naming_enabled", is_consistent_volume_naming_enabled)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if remote_data_volume_type is not None:
            pulumi.set(__self__, "remote_data_volume_type", remote_data_volume_type)

    @property
    @pulumi.getter(name="bootVolumeType")
    def boot_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_type")

    @property
    @pulumi.getter
    def firmware(self) -> Optional[str]:
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="isConsistentVolumeNamingEnabled")
    def is_consistent_volume_naming_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_consistent_volume_naming_enabled")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="remoteDataVolumeType")
    def remote_data_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "remote_data_volume_type")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areVirtualInstructionsEnabled":
            suggest = "are_virtual_instructions_enabled"
        elif key == "configMap":
            suggest = "config_map"
        elif key == "isAccessControlServiceEnabled":
            suggest = "is_access_control_service_enabled"
        elif key == "isInputOutputMemoryManagementUnitEnabled":
            suggest = "is_input_output_memory_management_unit_enabled"
        elif key == "isMeasuredBootEnabled":
            suggest = "is_measured_boot_enabled"
        elif key == "isMemoryEncryptionEnabled":
            suggest = "is_memory_encryption_enabled"
        elif key == "isSecureBootEnabled":
            suggest = "is_secure_boot_enabled"
        elif key == "isSymmetricMultiThreadingEnabled":
            suggest = "is_symmetric_multi_threading_enabled"
        elif key == "isTrustedPlatformModuleEnabled":
            suggest = "is_trusted_platform_module_enabled"
        elif key == "numaNodesPerSocket":
            suggest = "numa_nodes_per_socket"
        elif key == "percentageOfCoresEnabled":
            suggest = "percentage_of_cores_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsPlatformConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 are_virtual_instructions_enabled: Optional[bool] = None,
                 config_map: Optional[Mapping[str, Any]] = None,
                 is_access_control_service_enabled: Optional[bool] = None,
                 is_input_output_memory_management_unit_enabled: Optional[bool] = None,
                 is_measured_boot_enabled: Optional[bool] = None,
                 is_memory_encryption_enabled: Optional[bool] = None,
                 is_secure_boot_enabled: Optional[bool] = None,
                 is_symmetric_multi_threading_enabled: Optional[bool] = None,
                 is_trusted_platform_module_enabled: Optional[bool] = None,
                 numa_nodes_per_socket: Optional[str] = None,
                 percentage_of_cores_enabled: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if are_virtual_instructions_enabled is not None:
            pulumi.set(__self__, "are_virtual_instructions_enabled", are_virtual_instructions_enabled)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if is_access_control_service_enabled is not None:
            pulumi.set(__self__, "is_access_control_service_enabled", is_access_control_service_enabled)
        if is_input_output_memory_management_unit_enabled is not None:
            pulumi.set(__self__, "is_input_output_memory_management_unit_enabled", is_input_output_memory_management_unit_enabled)
        if is_measured_boot_enabled is not None:
            pulumi.set(__self__, "is_measured_boot_enabled", is_measured_boot_enabled)
        if is_memory_encryption_enabled is not None:
            pulumi.set(__self__, "is_memory_encryption_enabled", is_memory_encryption_enabled)
        if is_secure_boot_enabled is not None:
            pulumi.set(__self__, "is_secure_boot_enabled", is_secure_boot_enabled)
        if is_symmetric_multi_threading_enabled is not None:
            pulumi.set(__self__, "is_symmetric_multi_threading_enabled", is_symmetric_multi_threading_enabled)
        if is_trusted_platform_module_enabled is not None:
            pulumi.set(__self__, "is_trusted_platform_module_enabled", is_trusted_platform_module_enabled)
        if numa_nodes_per_socket is not None:
            pulumi.set(__self__, "numa_nodes_per_socket", numa_nodes_per_socket)
        if percentage_of_cores_enabled is not None:
            pulumi.set(__self__, "percentage_of_cores_enabled", percentage_of_cores_enabled)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="areVirtualInstructionsEnabled")
    def are_virtual_instructions_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_virtual_instructions_enabled")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="isAccessControlServiceEnabled")
    def is_access_control_service_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_access_control_service_enabled")

    @property
    @pulumi.getter(name="isInputOutputMemoryManagementUnitEnabled")
    def is_input_output_memory_management_unit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_input_output_memory_management_unit_enabled")

    @property
    @pulumi.getter(name="isMeasuredBootEnabled")
    def is_measured_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_measured_boot_enabled")

    @property
    @pulumi.getter(name="isMemoryEncryptionEnabled")
    def is_memory_encryption_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_memory_encryption_enabled")

    @property
    @pulumi.getter(name="isSecureBootEnabled")
    def is_secure_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure_boot_enabled")

    @property
    @pulumi.getter(name="isSymmetricMultiThreadingEnabled")
    def is_symmetric_multi_threading_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_symmetric_multi_threading_enabled")

    @property
    @pulumi.getter(name="isTrustedPlatformModuleEnabled")
    def is_trusted_platform_module_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_trusted_platform_module_enabled")

    @property
    @pulumi.getter(name="numaNodesPerSocket")
    def numa_nodes_per_socket(self) -> Optional[str]:
        return pulumi.get(self, "numa_nodes_per_socket")

    @property
    @pulumi.getter(name="percentageOfCoresEnabled")
    def percentage_of_cores_enabled(self) -> Optional[int]:
        return pulumi.get(self, "percentage_of_cores_enabled")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preemptionAction":
            suggest = "preemption_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preemption_action: Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfigPreemptionAction'] = None):
        if preemption_action is not None:
            pulumi.set(__self__, "preemption_action", preemption_action)

    @property
    @pulumi.getter(name="preemptionAction")
    def preemption_action(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfigPreemptionAction']:
        return pulumi.get(self, "preemption_action")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfigPreemptionAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preserveBootVolume":
            suggest = "preserve_boot_volume"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfigPreemptionAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfigPreemptionAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsPreemptibleInstanceConfigPreemptionAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 preserve_boot_volume: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsLaunchDetailsShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baselineOcpuUtilization":
            suggest = "baseline_ocpu_utilization"
        elif key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsLaunchDetailsShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 memory_in_gbs: Optional[float] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[float] = None,
                 vcpus: Optional[int] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[int]:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsLaunchDetailsSourceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "bootVolumeId":
            suggest = "boot_volume_id"
        elif key == "bootVolumeSizeInGbs":
            suggest = "boot_volume_size_in_gbs"
        elif key == "bootVolumeVpusPerGb":
            suggest = "boot_volume_vpus_per_gb"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "instanceSourceImageFilterDetails":
            suggest = "instance_source_image_filter_details"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsLaunchDetailsSourceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsSourceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsSourceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 boot_volume_id: Optional[str] = None,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 image_id: Optional[str] = None,
                 instance_source_image_filter_details: Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails'] = None,
                 kms_key_id: Optional[str] = None):
        pulumi.set(__self__, "source_type", source_type)
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_source_image_filter_details is not None:
            pulumi.set(__self__, "instance_source_image_filter_details", instance_source_image_filter_details)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceSourceImageFilterDetails")
    def instance_source_image_filter_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails']:
        return pulumi.get(self, "instance_source_image_filter_details")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "definedTagsFilter":
            suggest = "defined_tags_filter"
        elif key == "operatingSystem":
            suggest = "operating_system"
        elif key == "operatingSystemVersion":
            suggest = "operating_system_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags_filter: Optional[Mapping[str, Any]] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags_filter is not None:
            pulumi.set(__self__, "defined_tags_filter", defined_tags_filter)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTagsFilter")
    def defined_tags_filter(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags_filter")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockVolumes":
            suggest = "block_volumes"
        elif key == "launchDetails":
            suggest = "launch_details"
        elif key == "secondaryVnics":
            suggest = "secondary_vnics"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_volumes: Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsOptionBlockVolume']] = None,
                 launch_details: Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetails'] = None,
                 secondary_vnics: Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsOptionSecondaryVnic']] = None):
        if block_volumes is not None:
            pulumi.set(__self__, "block_volumes", block_volumes)
        if launch_details is not None:
            pulumi.set(__self__, "launch_details", launch_details)
        if secondary_vnics is not None:
            pulumi.set(__self__, "secondary_vnics", secondary_vnics)

    @property
    @pulumi.getter(name="blockVolumes")
    def block_volumes(self) -> Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsOptionBlockVolume']]:
        return pulumi.get(self, "block_volumes")

    @property
    @pulumi.getter(name="launchDetails")
    def launch_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetails']:
        return pulumi.get(self, "launch_details")

    @property
    @pulumi.getter(name="secondaryVnics")
    def secondary_vnics(self) -> Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsOptionSecondaryVnic']]:
        return pulumi.get(self, "secondary_vnics")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionBlockVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attachDetails":
            suggest = "attach_details"
        elif key == "createDetails":
            suggest = "create_details"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionBlockVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionBlockVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionBlockVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attach_details: Optional['outputs.InstanceConfigurationInstanceDetailsOptionBlockVolumeAttachDetails'] = None,
                 create_details: Optional['outputs.InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetails'] = None,
                 volume_id: Optional[str] = None):
        if attach_details is not None:
            pulumi.set(__self__, "attach_details", attach_details)
        if create_details is not None:
            pulumi.set(__self__, "create_details", create_details)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="attachDetails")
    def attach_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionBlockVolumeAttachDetails']:
        return pulumi.get(self, "attach_details")

    @property
    @pulumi.getter(name="createDetails")
    def create_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetails']:
        return pulumi.get(self, "create_details")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionBlockVolumeAttachDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "isPvEncryptionInTransitEnabled":
            suggest = "is_pv_encryption_in_transit_enabled"
        elif key == "isReadOnly":
            suggest = "is_read_only"
        elif key == "isShareable":
            suggest = "is_shareable"
        elif key == "useChap":
            suggest = "use_chap"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionBlockVolumeAttachDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionBlockVolumeAttachDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionBlockVolumeAttachDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 device: Optional[str] = None,
                 display_name: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 is_read_only: Optional[bool] = None,
                 is_shareable: Optional[bool] = None,
                 use_chap: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if is_shareable is not None:
            pulumi.set(__self__, "is_shareable", is_shareable)
        if use_chap is not None:
            pulumi.set(__self__, "use_chap", use_chap)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_read_only")

    @property
    @pulumi.getter(name="isShareable")
    def is_shareable(self) -> Optional[bool]:
        return pulumi.get(self, "is_shareable")

    @property
    @pulumi.getter(name="useChap")
    def use_chap(self) -> Optional[bool]:
        return pulumi.get(self, "use_chap")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autotunePolicies":
            suggest = "autotune_policies"
        elif key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "backupPolicyId":
            suggest = "backup_policy_id"
        elif key == "blockVolumeReplicas":
            suggest = "block_volume_replicas"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "isAutoTuneEnabled":
            suggest = "is_auto_tune_enabled"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "sizeInGbs":
            suggest = "size_in_gbs"
        elif key == "sourceDetails":
            suggest = "source_details"
        elif key == "vpusPerGb":
            suggest = "vpus_per_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autotune_policies: Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsAutotunePolicy']] = None,
                 availability_domain: Optional[str] = None,
                 backup_policy_id: Optional[str] = None,
                 block_volume_replicas: Optional['outputs.InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsBlockVolumeReplicas'] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 is_auto_tune_enabled: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 size_in_gbs: Optional[str] = None,
                 source_details: Optional['outputs.InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsSourceDetails'] = None,
                 vpus_per_gb: Optional[str] = None):
        if autotune_policies is not None:
            pulumi.set(__self__, "autotune_policies", autotune_policies)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if backup_policy_id is not None:
            pulumi.set(__self__, "backup_policy_id", backup_policy_id)
        if block_volume_replicas is not None:
            pulumi.set(__self__, "block_volume_replicas", block_volume_replicas)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_auto_tune_enabled is not None:
            pulumi.set(__self__, "is_auto_tune_enabled", is_auto_tune_enabled)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size_in_gbs is not None:
            pulumi.set(__self__, "size_in_gbs", size_in_gbs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)
        if vpus_per_gb is not None:
            pulumi.set(__self__, "vpus_per_gb", vpus_per_gb)

    @property
    @pulumi.getter(name="autotunePolicies")
    def autotune_policies(self) -> Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsAutotunePolicy']]:
        return pulumi.get(self, "autotune_policies")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "backup_policy_id")

    @property
    @pulumi.getter(name="blockVolumeReplicas")
    def block_volume_replicas(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsBlockVolumeReplicas']:
        return pulumi.get(self, "block_volume_replicas")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isAutoTuneEnabled")
    def is_auto_tune_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_tune_enabled")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sizeInGbs")
    def size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_gbs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsSourceDetails']:
        return pulumi.get(self, "source_details")

    @property
    @pulumi.getter(name="vpusPerGb")
    def vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "vpus_per_gb")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsAutotunePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autotuneType":
            suggest = "autotune_type"
        elif key == "maxVpusPerGb":
            suggest = "max_vpus_per_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsAutotunePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsAutotunePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsAutotunePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autotune_type: str,
                 max_vpus_per_gb: Optional[str] = None):
        pulumi.set(__self__, "autotune_type", autotune_type)
        if max_vpus_per_gb is not None:
            pulumi.set(__self__, "max_vpus_per_gb", max_vpus_per_gb)

    @property
    @pulumi.getter(name="autotuneType")
    def autotune_type(self) -> str:
        return pulumi.get(self, "autotune_type")

    @property
    @pulumi.getter(name="maxVpusPerGb")
    def max_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "max_vpus_per_gb")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsBlockVolumeReplicas(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsBlockVolumeReplicas. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsBlockVolumeReplicas.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsBlockVolumeReplicas.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_domain: str,
                 display_name: Optional[str] = None):
        pulumi.set(__self__, "availability_domain", availability_domain)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionBlockVolumeCreateDetailsSourceDetails(dict):
    def __init__(__self__, *,
                 type: str,
                 id: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionLaunchDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentConfig":
            suggest = "agent_config"
        elif key == "availabilityConfig":
            suggest = "availability_config"
        elif key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "capacityReservationId":
            suggest = "capacity_reservation_id"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "createVnicDetails":
            suggest = "create_vnic_details"
        elif key == "dedicatedVmHostId":
            suggest = "dedicated_vm_host_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "extendedMetadata":
            suggest = "extended_metadata"
        elif key == "faultDomain":
            suggest = "fault_domain"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "instanceOptions":
            suggest = "instance_options"
        elif key == "ipxeScript":
            suggest = "ipxe_script"
        elif key == "isPvEncryptionInTransitEnabled":
            suggest = "is_pv_encryption_in_transit_enabled"
        elif key == "launchMode":
            suggest = "launch_mode"
        elif key == "launchOptions":
            suggest = "launch_options"
        elif key == "platformConfig":
            suggest = "platform_config"
        elif key == "preemptibleInstanceConfig":
            suggest = "preemptible_instance_config"
        elif key == "preferredMaintenanceAction":
            suggest = "preferred_maintenance_action"
        elif key == "shapeConfig":
            suggest = "shape_config"
        elif key == "sourceDetails":
            suggest = "source_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionLaunchDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_config: Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfig'] = None,
                 availability_config: Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsAvailabilityConfig'] = None,
                 availability_domain: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetails'] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 extended_metadata: Optional[Mapping[str, Any]] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 instance_options: Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsInstanceOptions'] = None,
                 ipxe_script: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 launch_mode: Optional[str] = None,
                 launch_options: Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsLaunchOptions'] = None,
                 metadata: Optional[Mapping[str, Any]] = None,
                 platform_config: Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfig'] = None,
                 preemptible_instance_config: Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfig'] = None,
                 preferred_maintenance_action: Optional[str] = None,
                 shape: Optional[str] = None,
                 shape_config: Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsShapeConfig'] = None,
                 source_details: Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetails'] = None):
        if agent_config is not None:
            pulumi.set(__self__, "agent_config", agent_config)
        if availability_config is not None:
            pulumi.set(__self__, "availability_config", availability_config)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if extended_metadata is not None:
            pulumi.set(__self__, "extended_metadata", extended_metadata)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if launch_mode is not None:
            pulumi.set(__self__, "launch_mode", launch_mode)
        if launch_options is not None:
            pulumi.set(__self__, "launch_options", launch_options)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if platform_config is not None:
            pulumi.set(__self__, "platform_config", platform_config)
        if preemptible_instance_config is not None:
            pulumi.set(__self__, "preemptible_instance_config", preemptible_instance_config)
        if preferred_maintenance_action is not None:
            pulumi.set(__self__, "preferred_maintenance_action", preferred_maintenance_action)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_config is not None:
            pulumi.set(__self__, "shape_config", shape_config)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)

    @property
    @pulumi.getter(name="agentConfig")
    def agent_config(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfig']:
        return pulumi.get(self, "agent_config")

    @property
    @pulumi.getter(name="availabilityConfig")
    def availability_config(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsAvailabilityConfig']:
        return pulumi.get(self, "availability_config")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetails']:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="extendedMetadata")
    def extended_metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "extended_metadata")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsInstanceOptions']:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="launchMode")
    def launch_mode(self) -> Optional[str]:
        return pulumi.get(self, "launch_mode")

    @property
    @pulumi.getter(name="launchOptions")
    def launch_options(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsLaunchOptions']:
        return pulumi.get(self, "launch_options")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="platformConfig")
    def platform_config(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfig']:
        return pulumi.get(self, "platform_config")

    @property
    @pulumi.getter(name="preemptibleInstanceConfig")
    def preemptible_instance_config(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfig']:
        return pulumi.get(self, "preemptible_instance_config")

    @property
    @pulumi.getter(name="preferredMaintenanceAction")
    def preferred_maintenance_action(self) -> Optional[str]:
        return pulumi.get(self, "preferred_maintenance_action")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfig")
    def shape_config(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsShapeConfig']:
        return pulumi.get(self, "shape_config")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetails']:
        return pulumi.get(self, "source_details")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areAllPluginsDisabled":
            suggest = "are_all_plugins_disabled"
        elif key == "isManagementDisabled":
            suggest = "is_management_disabled"
        elif key == "isMonitoringDisabled":
            suggest = "is_monitoring_disabled"
        elif key == "pluginsConfigs":
            suggest = "plugins_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfigPluginsConfig']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfigPluginsConfig']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfigPluginsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "desiredState":
            suggest = "desired_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfigPluginsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfigPluginsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsAgentConfigPluginsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionLaunchDetailsAvailabilityConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isLiveMigrationPreferred":
            suggest = "is_live_migration_preferred"
        elif key == "recoveryAction":
            suggest = "recovery_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionLaunchDetailsAvailabilityConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsAvailabilityConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsAvailabilityConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_live_migration_preferred: Optional[bool] = None,
                 recovery_action: Optional[str] = None):
        if is_live_migration_preferred is not None:
            pulumi.set(__self__, "is_live_migration_preferred", is_live_migration_preferred)
        if recovery_action is not None:
            pulumi.set(__self__, "recovery_action", recovery_action)

    @property
    @pulumi.getter(name="isLiveMigrationPreferred")
    def is_live_migration_preferred(self) -> Optional[bool]:
        return pulumi.get(self, "is_live_migration_preferred")

    @property
    @pulumi.getter(name="recoveryAction")
    def recovery_action(self) -> Optional[str]:
        return pulumi.get(self, "recovery_action")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignIpv6ip":
            suggest = "assign_ipv6ip"
        elif key == "assignPrivateDnsRecord":
            suggest = "assign_private_dns_record"
        elif key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "hostnameLabel":
            suggest = "hostname_label"
        elif key == "ipv6addressIpv6subnetCidrPairDetails":
            suggest = "ipv6address_ipv6subnet_cidr_pair_details"
        elif key == "nsgIds":
            suggest = "nsg_ids"
        elif key == "privateIp":
            suggest = "private_ip"
        elif key == "skipSourceDestCheck":
            suggest = "skip_source_dest_check"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6subnetCidr":
            suggest = "ipv6subnet_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionLaunchDetailsInstanceOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areLegacyImdsEndpointsDisabled":
            suggest = "are_legacy_imds_endpoints_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionLaunchDetailsInstanceOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsInstanceOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsInstanceOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionLaunchDetailsLaunchOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootVolumeType":
            suggest = "boot_volume_type"
        elif key == "isConsistentVolumeNamingEnabled":
            suggest = "is_consistent_volume_naming_enabled"
        elif key == "isPvEncryptionInTransitEnabled":
            suggest = "is_pv_encryption_in_transit_enabled"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "remoteDataVolumeType":
            suggest = "remote_data_volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionLaunchDetailsLaunchOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsLaunchOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsLaunchOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_volume_type: Optional[str] = None,
                 firmware: Optional[str] = None,
                 is_consistent_volume_naming_enabled: Optional[bool] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 network_type: Optional[str] = None,
                 remote_data_volume_type: Optional[str] = None):
        if boot_volume_type is not None:
            pulumi.set(__self__, "boot_volume_type", boot_volume_type)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if is_consistent_volume_naming_enabled is not None:
            pulumi.set(__self__, "is_consistent_volume_naming_enabled", is_consistent_volume_naming_enabled)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if remote_data_volume_type is not None:
            pulumi.set(__self__, "remote_data_volume_type", remote_data_volume_type)

    @property
    @pulumi.getter(name="bootVolumeType")
    def boot_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_type")

    @property
    @pulumi.getter
    def firmware(self) -> Optional[str]:
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="isConsistentVolumeNamingEnabled")
    def is_consistent_volume_naming_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_consistent_volume_naming_enabled")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="remoteDataVolumeType")
    def remote_data_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "remote_data_volume_type")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areVirtualInstructionsEnabled":
            suggest = "are_virtual_instructions_enabled"
        elif key == "isAccessControlServiceEnabled":
            suggest = "is_access_control_service_enabled"
        elif key == "isInputOutputMemoryManagementUnitEnabled":
            suggest = "is_input_output_memory_management_unit_enabled"
        elif key == "isMeasuredBootEnabled":
            suggest = "is_measured_boot_enabled"
        elif key == "isMemoryEncryptionEnabled":
            suggest = "is_memory_encryption_enabled"
        elif key == "isSecureBootEnabled":
            suggest = "is_secure_boot_enabled"
        elif key == "isSymmetricMultiThreadingEnabled":
            suggest = "is_symmetric_multi_threading_enabled"
        elif key == "isTrustedPlatformModuleEnabled":
            suggest = "is_trusted_platform_module_enabled"
        elif key == "numaNodesPerSocket":
            suggest = "numa_nodes_per_socket"
        elif key == "percentageOfCoresEnabled":
            suggest = "percentage_of_cores_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsPlatformConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 are_virtual_instructions_enabled: Optional[bool] = None,
                 is_access_control_service_enabled: Optional[bool] = None,
                 is_input_output_memory_management_unit_enabled: Optional[bool] = None,
                 is_measured_boot_enabled: Optional[bool] = None,
                 is_memory_encryption_enabled: Optional[bool] = None,
                 is_secure_boot_enabled: Optional[bool] = None,
                 is_symmetric_multi_threading_enabled: Optional[bool] = None,
                 is_trusted_platform_module_enabled: Optional[bool] = None,
                 numa_nodes_per_socket: Optional[str] = None,
                 percentage_of_cores_enabled: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if are_virtual_instructions_enabled is not None:
            pulumi.set(__self__, "are_virtual_instructions_enabled", are_virtual_instructions_enabled)
        if is_access_control_service_enabled is not None:
            pulumi.set(__self__, "is_access_control_service_enabled", is_access_control_service_enabled)
        if is_input_output_memory_management_unit_enabled is not None:
            pulumi.set(__self__, "is_input_output_memory_management_unit_enabled", is_input_output_memory_management_unit_enabled)
        if is_measured_boot_enabled is not None:
            pulumi.set(__self__, "is_measured_boot_enabled", is_measured_boot_enabled)
        if is_memory_encryption_enabled is not None:
            pulumi.set(__self__, "is_memory_encryption_enabled", is_memory_encryption_enabled)
        if is_secure_boot_enabled is not None:
            pulumi.set(__self__, "is_secure_boot_enabled", is_secure_boot_enabled)
        if is_symmetric_multi_threading_enabled is not None:
            pulumi.set(__self__, "is_symmetric_multi_threading_enabled", is_symmetric_multi_threading_enabled)
        if is_trusted_platform_module_enabled is not None:
            pulumi.set(__self__, "is_trusted_platform_module_enabled", is_trusted_platform_module_enabled)
        if numa_nodes_per_socket is not None:
            pulumi.set(__self__, "numa_nodes_per_socket", numa_nodes_per_socket)
        if percentage_of_cores_enabled is not None:
            pulumi.set(__self__, "percentage_of_cores_enabled", percentage_of_cores_enabled)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="areVirtualInstructionsEnabled")
    def are_virtual_instructions_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_virtual_instructions_enabled")

    @property
    @pulumi.getter(name="isAccessControlServiceEnabled")
    def is_access_control_service_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_access_control_service_enabled")

    @property
    @pulumi.getter(name="isInputOutputMemoryManagementUnitEnabled")
    def is_input_output_memory_management_unit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_input_output_memory_management_unit_enabled")

    @property
    @pulumi.getter(name="isMeasuredBootEnabled")
    def is_measured_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_measured_boot_enabled")

    @property
    @pulumi.getter(name="isMemoryEncryptionEnabled")
    def is_memory_encryption_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_memory_encryption_enabled")

    @property
    @pulumi.getter(name="isSecureBootEnabled")
    def is_secure_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure_boot_enabled")

    @property
    @pulumi.getter(name="isSymmetricMultiThreadingEnabled")
    def is_symmetric_multi_threading_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_symmetric_multi_threading_enabled")

    @property
    @pulumi.getter(name="isTrustedPlatformModuleEnabled")
    def is_trusted_platform_module_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_trusted_platform_module_enabled")

    @property
    @pulumi.getter(name="numaNodesPerSocket")
    def numa_nodes_per_socket(self) -> Optional[str]:
        return pulumi.get(self, "numa_nodes_per_socket")

    @property
    @pulumi.getter(name="percentageOfCoresEnabled")
    def percentage_of_cores_enabled(self) -> Optional[int]:
        return pulumi.get(self, "percentage_of_cores_enabled")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preemptionAction":
            suggest = "preemption_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preemption_action: Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfigPreemptionAction'] = None):
        if preemption_action is not None:
            pulumi.set(__self__, "preemption_action", preemption_action)

    @property
    @pulumi.getter(name="preemptionAction")
    def preemption_action(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfigPreemptionAction']:
        return pulumi.get(self, "preemption_action")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfigPreemptionAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preserveBootVolume":
            suggest = "preserve_boot_volume"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfigPreemptionAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfigPreemptionAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsPreemptibleInstanceConfigPreemptionAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 preserve_boot_volume: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionLaunchDetailsShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baselineOcpuUtilization":
            suggest = "baseline_ocpu_utilization"
        elif key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionLaunchDetailsShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 memory_in_gbs: Optional[float] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[float] = None,
                 vcpus: Optional[int] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[int]:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "bootVolumeId":
            suggest = "boot_volume_id"
        elif key == "bootVolumeSizeInGbs":
            suggest = "boot_volume_size_in_gbs"
        elif key == "bootVolumeVpusPerGb":
            suggest = "boot_volume_vpus_per_gb"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "instanceSourceImageFilterDetails":
            suggest = "instance_source_image_filter_details"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 boot_volume_id: Optional[str] = None,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 image_id: Optional[str] = None,
                 instance_source_image_filter_details: Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails'] = None,
                 kms_key_id: Optional[str] = None):
        pulumi.set(__self__, "source_type", source_type)
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_source_image_filter_details is not None:
            pulumi.set(__self__, "instance_source_image_filter_details", instance_source_image_filter_details)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceSourceImageFilterDetails")
    def instance_source_image_filter_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails']:
        return pulumi.get(self, "instance_source_image_filter_details")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "definedTagsFilter":
            suggest = "defined_tags_filter"
        elif key == "operatingSystem":
            suggest = "operating_system"
        elif key == "operatingSystemVersion":
            suggest = "operating_system_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionLaunchDetailsSourceDetailsInstanceSourceImageFilterDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags_filter: Optional[Mapping[str, Any]] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags_filter is not None:
            pulumi.set(__self__, "defined_tags_filter", defined_tags_filter)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTagsFilter")
    def defined_tags_filter(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags_filter")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionSecondaryVnic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createVnicDetails":
            suggest = "create_vnic_details"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "nicIndex":
            suggest = "nic_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionSecondaryVnic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionSecondaryVnic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionSecondaryVnic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_vnic_details: Optional['outputs.InstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetails'] = None,
                 display_name: Optional[str] = None,
                 nic_index: Optional[int] = None):
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if nic_index is not None:
            pulumi.set(__self__, "nic_index", nic_index)

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetails']:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="nicIndex")
    def nic_index(self) -> Optional[int]:
        return pulumi.get(self, "nic_index")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignIpv6ip":
            suggest = "assign_ipv6ip"
        elif key == "assignPrivateDnsRecord":
            suggest = "assign_private_dns_record"
        elif key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "hostnameLabel":
            suggest = "hostname_label"
        elif key == "ipv6addressIpv6subnetCidrPairDetails":
            suggest = "ipv6address_ipv6subnet_cidr_pair_details"
        elif key == "nsgIds":
            suggest = "nsg_ids"
        elif key == "privateIp":
            suggest = "private_ip"
        elif key == "skipSourceDestCheck":
            suggest = "skip_source_dest_check"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6subnetCidr":
            suggest = "ipv6subnet_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsOptionSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsSecondaryVnic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createVnicDetails":
            suggest = "create_vnic_details"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "nicIndex":
            suggest = "nic_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsSecondaryVnic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsSecondaryVnic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsSecondaryVnic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_vnic_details: Optional['outputs.InstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetails'] = None,
                 display_name: Optional[str] = None,
                 nic_index: Optional[int] = None):
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if nic_index is not None:
            pulumi.set(__self__, "nic_index", nic_index)

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional['outputs.InstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetails']:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="nicIndex")
    def nic_index(self) -> Optional[int]:
        return pulumi.get(self, "nic_index")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignIpv6ip":
            suggest = "assign_ipv6ip"
        elif key == "assignPrivateDnsRecord":
            suggest = "assign_private_dns_record"
        elif key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "hostnameLabel":
            suggest = "hostname_label"
        elif key == "ipv6addressIpv6subnetCidrPairDetails":
            suggest = "ipv6address_ipv6subnet_cidr_pair_details"
        elif key == "nsgIds":
            suggest = "nsg_ids"
        elif key == "privateIp":
            suggest = "private_ip"
        elif key == "skipSourceDestCheck":
            suggest = "skip_source_dest_check"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.InstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class InstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6subnetCidr":
            suggest = "ipv6subnet_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigurationInstanceDetailsSecondaryVnicCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class InstanceCreateVnicDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignIpv6ip":
            suggest = "assign_ipv6ip"
        elif key == "assignPrivateDnsRecord":
            suggest = "assign_private_dns_record"
        elif key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "hostnameLabel":
            suggest = "hostname_label"
        elif key == "ipv6addressIpv6subnetCidrPairDetails":
            suggest = "ipv6address_ipv6subnet_cidr_pair_details"
        elif key == "nsgIds":
            suggest = "nsg_ids"
        elif key == "privateIp":
            suggest = "private_ip"
        elif key == "skipSourceDestCheck":
            suggest = "skip_source_dest_check"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceCreateVnicDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceCreateVnicDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceCreateVnicDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.InstanceCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[str]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.InstanceCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class InstanceCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6subnetCidr":
            suggest = "ipv6subnet_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class InstanceInstanceOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areLegacyImdsEndpointsDisabled":
            suggest = "are_legacy_imds_endpoints_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceInstanceOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceInstanceOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceInstanceOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class InstanceLaunchOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootVolumeType":
            suggest = "boot_volume_type"
        elif key == "isConsistentVolumeNamingEnabled":
            suggest = "is_consistent_volume_naming_enabled"
        elif key == "isPvEncryptionInTransitEnabled":
            suggest = "is_pv_encryption_in_transit_enabled"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "remoteDataVolumeType":
            suggest = "remote_data_volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceLaunchOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceLaunchOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceLaunchOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_volume_type: Optional[str] = None,
                 firmware: Optional[str] = None,
                 is_consistent_volume_naming_enabled: Optional[bool] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 network_type: Optional[str] = None,
                 remote_data_volume_type: Optional[str] = None):
        if boot_volume_type is not None:
            pulumi.set(__self__, "boot_volume_type", boot_volume_type)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if is_consistent_volume_naming_enabled is not None:
            pulumi.set(__self__, "is_consistent_volume_naming_enabled", is_consistent_volume_naming_enabled)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if remote_data_volume_type is not None:
            pulumi.set(__self__, "remote_data_volume_type", remote_data_volume_type)

    @property
    @pulumi.getter(name="bootVolumeType")
    def boot_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_type")

    @property
    @pulumi.getter
    def firmware(self) -> Optional[str]:
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="isConsistentVolumeNamingEnabled")
    def is_consistent_volume_naming_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_consistent_volume_naming_enabled")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="remoteDataVolumeType")
    def remote_data_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "remote_data_volume_type")


@pulumi.output_type
class InstancePlatformConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areVirtualInstructionsEnabled":
            suggest = "are_virtual_instructions_enabled"
        elif key == "configMap":
            suggest = "config_map"
        elif key == "isAccessControlServiceEnabled":
            suggest = "is_access_control_service_enabled"
        elif key == "isInputOutputMemoryManagementUnitEnabled":
            suggest = "is_input_output_memory_management_unit_enabled"
        elif key == "isMeasuredBootEnabled":
            suggest = "is_measured_boot_enabled"
        elif key == "isMemoryEncryptionEnabled":
            suggest = "is_memory_encryption_enabled"
        elif key == "isSecureBootEnabled":
            suggest = "is_secure_boot_enabled"
        elif key == "isSymmetricMultiThreadingEnabled":
            suggest = "is_symmetric_multi_threading_enabled"
        elif key == "isTrustedPlatformModuleEnabled":
            suggest = "is_trusted_platform_module_enabled"
        elif key == "numaNodesPerSocket":
            suggest = "numa_nodes_per_socket"
        elif key == "percentageOfCoresEnabled":
            suggest = "percentage_of_cores_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePlatformConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePlatformConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePlatformConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 are_virtual_instructions_enabled: Optional[bool] = None,
                 config_map: Optional[Mapping[str, Any]] = None,
                 is_access_control_service_enabled: Optional[bool] = None,
                 is_input_output_memory_management_unit_enabled: Optional[bool] = None,
                 is_measured_boot_enabled: Optional[bool] = None,
                 is_memory_encryption_enabled: Optional[bool] = None,
                 is_secure_boot_enabled: Optional[bool] = None,
                 is_symmetric_multi_threading_enabled: Optional[bool] = None,
                 is_trusted_platform_module_enabled: Optional[bool] = None,
                 numa_nodes_per_socket: Optional[str] = None,
                 percentage_of_cores_enabled: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if are_virtual_instructions_enabled is not None:
            pulumi.set(__self__, "are_virtual_instructions_enabled", are_virtual_instructions_enabled)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if is_access_control_service_enabled is not None:
            pulumi.set(__self__, "is_access_control_service_enabled", is_access_control_service_enabled)
        if is_input_output_memory_management_unit_enabled is not None:
            pulumi.set(__self__, "is_input_output_memory_management_unit_enabled", is_input_output_memory_management_unit_enabled)
        if is_measured_boot_enabled is not None:
            pulumi.set(__self__, "is_measured_boot_enabled", is_measured_boot_enabled)
        if is_memory_encryption_enabled is not None:
            pulumi.set(__self__, "is_memory_encryption_enabled", is_memory_encryption_enabled)
        if is_secure_boot_enabled is not None:
            pulumi.set(__self__, "is_secure_boot_enabled", is_secure_boot_enabled)
        if is_symmetric_multi_threading_enabled is not None:
            pulumi.set(__self__, "is_symmetric_multi_threading_enabled", is_symmetric_multi_threading_enabled)
        if is_trusted_platform_module_enabled is not None:
            pulumi.set(__self__, "is_trusted_platform_module_enabled", is_trusted_platform_module_enabled)
        if numa_nodes_per_socket is not None:
            pulumi.set(__self__, "numa_nodes_per_socket", numa_nodes_per_socket)
        if percentage_of_cores_enabled is not None:
            pulumi.set(__self__, "percentage_of_cores_enabled", percentage_of_cores_enabled)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="areVirtualInstructionsEnabled")
    def are_virtual_instructions_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_virtual_instructions_enabled")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="isAccessControlServiceEnabled")
    def is_access_control_service_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_access_control_service_enabled")

    @property
    @pulumi.getter(name="isInputOutputMemoryManagementUnitEnabled")
    def is_input_output_memory_management_unit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_input_output_memory_management_unit_enabled")

    @property
    @pulumi.getter(name="isMeasuredBootEnabled")
    def is_measured_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_measured_boot_enabled")

    @property
    @pulumi.getter(name="isMemoryEncryptionEnabled")
    def is_memory_encryption_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_memory_encryption_enabled")

    @property
    @pulumi.getter(name="isSecureBootEnabled")
    def is_secure_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure_boot_enabled")

    @property
    @pulumi.getter(name="isSymmetricMultiThreadingEnabled")
    def is_symmetric_multi_threading_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_symmetric_multi_threading_enabled")

    @property
    @pulumi.getter(name="isTrustedPlatformModuleEnabled")
    def is_trusted_platform_module_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_trusted_platform_module_enabled")

    @property
    @pulumi.getter(name="numaNodesPerSocket")
    def numa_nodes_per_socket(self) -> Optional[str]:
        return pulumi.get(self, "numa_nodes_per_socket")

    @property
    @pulumi.getter(name="percentageOfCoresEnabled")
    def percentage_of_cores_enabled(self) -> Optional[int]:
        return pulumi.get(self, "percentage_of_cores_enabled")


@pulumi.output_type
class InstancePoolInstanceLoadBalancerBackend(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendHealthStatus":
            suggest = "backend_health_status"
        elif key == "backendName":
            suggest = "backend_name"
        elif key == "backendSetName":
            suggest = "backend_set_name"
        elif key == "loadBalancerId":
            suggest = "load_balancer_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolInstanceLoadBalancerBackend. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolInstanceLoadBalancerBackend.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolInstanceLoadBalancerBackend.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_health_status: Optional[str] = None,
                 backend_name: Optional[str] = None,
                 backend_set_name: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 state: Optional[str] = None):
        if backend_health_status is not None:
            pulumi.set(__self__, "backend_health_status", backend_health_status)
        if backend_name is not None:
            pulumi.set(__self__, "backend_name", backend_name)
        if backend_set_name is not None:
            pulumi.set(__self__, "backend_set_name", backend_set_name)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendHealthStatus")
    def backend_health_status(self) -> Optional[str]:
        return pulumi.get(self, "backend_health_status")

    @property
    @pulumi.getter(name="backendName")
    def backend_name(self) -> Optional[str]:
        return pulumi.get(self, "backend_name")

    @property
    @pulumi.getter(name="backendSetName")
    def backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "backend_set_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class InstancePoolLoadBalancer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendSetName":
            suggest = "backend_set_name"
        elif key == "loadBalancerId":
            suggest = "load_balancer_id"
        elif key == "vnicSelection":
            suggest = "vnic_selection"
        elif key == "instancePoolId":
            suggest = "instance_pool_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolLoadBalancer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolLoadBalancer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolLoadBalancer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_set_name: str,
                 load_balancer_id: str,
                 port: int,
                 vnic_selection: str,
                 id: Optional[str] = None,
                 instance_pool_id: Optional[str] = None,
                 state: Optional[str] = None):
        pulumi.set(__self__, "backend_set_name", backend_set_name)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "vnic_selection", vnic_selection)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_pool_id is not None:
            pulumi.set(__self__, "instance_pool_id", instance_pool_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendSetName")
    def backend_set_name(self) -> str:
        return pulumi.get(self, "backend_set_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="vnicSelection")
    def vnic_selection(self) -> str:
        return pulumi.get(self, "vnic_selection")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class InstancePoolPlacementConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "faultDomains":
            suggest = "fault_domains"
        elif key == "primarySubnetId":
            suggest = "primary_subnet_id"
        elif key == "primaryVnicSubnets":
            suggest = "primary_vnic_subnets"
        elif key == "secondaryVnicSubnets":
            suggest = "secondary_vnic_subnets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolPlacementConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolPlacementConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolPlacementConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_domain: str,
                 fault_domains: Optional[Sequence[str]] = None,
                 primary_subnet_id: Optional[str] = None,
                 primary_vnic_subnets: Optional['outputs.InstancePoolPlacementConfigurationPrimaryVnicSubnets'] = None,
                 secondary_vnic_subnets: Optional[Sequence['outputs.InstancePoolPlacementConfigurationSecondaryVnicSubnet']] = None):
        pulumi.set(__self__, "availability_domain", availability_domain)
        if fault_domains is not None:
            pulumi.set(__self__, "fault_domains", fault_domains)
        if primary_subnet_id is not None:
            pulumi.set(__self__, "primary_subnet_id", primary_subnet_id)
        if primary_vnic_subnets is not None:
            pulumi.set(__self__, "primary_vnic_subnets", primary_vnic_subnets)
        if secondary_vnic_subnets is not None:
            pulumi.set(__self__, "secondary_vnic_subnets", secondary_vnic_subnets)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="faultDomains")
    def fault_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "fault_domains")

    @property
    @pulumi.getter(name="primarySubnetId")
    def primary_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "primary_subnet_id")

    @property
    @pulumi.getter(name="primaryVnicSubnets")
    def primary_vnic_subnets(self) -> Optional['outputs.InstancePoolPlacementConfigurationPrimaryVnicSubnets']:
        return pulumi.get(self, "primary_vnic_subnets")

    @property
    @pulumi.getter(name="secondaryVnicSubnets")
    def secondary_vnic_subnets(self) -> Optional[Sequence['outputs.InstancePoolPlacementConfigurationSecondaryVnicSubnet']]:
        return pulumi.get(self, "secondary_vnic_subnets")


@pulumi.output_type
class InstancePoolPlacementConfigurationPrimaryVnicSubnets(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "ipv6addressIpv6subnetCidrPairDetails":
            suggest = "ipv6address_ipv6subnet_cidr_pair_details"
        elif key == "isAssignIpv6ip":
            suggest = "is_assign_ipv6ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolPlacementConfigurationPrimaryVnicSubnets. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolPlacementConfigurationPrimaryVnicSubnets.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolPlacementConfigurationPrimaryVnicSubnets.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.InstancePoolPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail']] = None,
                 is_assign_ipv6ip: Optional[bool] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.InstancePoolPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")


@pulumi.output_type
class InstancePoolPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6subnetCidr":
            suggest = "ipv6subnet_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolPlacementConfigurationPrimaryVnicSubnetsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class InstancePoolPlacementConfigurationSecondaryVnicSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "ipv6addressIpv6subnetCidrPairDetails":
            suggest = "ipv6address_ipv6subnet_cidr_pair_details"
        elif key == "isAssignIpv6ip":
            suggest = "is_assign_ipv6ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolPlacementConfigurationSecondaryVnicSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolPlacementConfigurationSecondaryVnicSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolPlacementConfigurationSecondaryVnicSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 display_name: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.InstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail']] = None,
                 is_assign_ipv6ip: Optional[bool] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.InstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")


@pulumi.output_type
class InstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6subnetCidr":
            suggest = "ipv6subnet_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class InstancePreemptibleInstanceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preemptionAction":
            suggest = "preemption_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePreemptibleInstanceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePreemptibleInstanceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePreemptibleInstanceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preemption_action: 'outputs.InstancePreemptibleInstanceConfigPreemptionAction'):
        pulumi.set(__self__, "preemption_action", preemption_action)

    @property
    @pulumi.getter(name="preemptionAction")
    def preemption_action(self) -> 'outputs.InstancePreemptibleInstanceConfigPreemptionAction':
        return pulumi.get(self, "preemption_action")


@pulumi.output_type
class InstancePreemptibleInstanceConfigPreemptionAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preserveBootVolume":
            suggest = "preserve_boot_volume"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePreemptibleInstanceConfigPreemptionAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePreemptibleInstanceConfigPreemptionAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePreemptibleInstanceConfigPreemptionAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 preserve_boot_volume: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")


@pulumi.output_type
class InstanceShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baselineOcpuUtilization":
            suggest = "baseline_ocpu_utilization"
        elif key == "gpuDescription":
            suggest = "gpu_description"
        elif key == "localDiskDescription":
            suggest = "local_disk_description"
        elif key == "localDisks":
            suggest = "local_disks"
        elif key == "localDisksTotalSizeInGbs":
            suggest = "local_disks_total_size_in_gbs"
        elif key == "maxVnicAttachments":
            suggest = "max_vnic_attachments"
        elif key == "memoryInGbs":
            suggest = "memory_in_gbs"
        elif key == "networkingBandwidthInGbps":
            suggest = "networking_bandwidth_in_gbps"
        elif key == "processorDescription":
            suggest = "processor_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 gpu_description: Optional[str] = None,
                 gpus: Optional[int] = None,
                 local_disk_description: Optional[str] = None,
                 local_disks: Optional[int] = None,
                 local_disks_total_size_in_gbs: Optional[float] = None,
                 max_vnic_attachments: Optional[int] = None,
                 memory_in_gbs: Optional[float] = None,
                 networking_bandwidth_in_gbps: Optional[float] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[float] = None,
                 processor_description: Optional[str] = None,
                 vcpus: Optional[int] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if gpu_description is not None:
            pulumi.set(__self__, "gpu_description", gpu_description)
        if gpus is not None:
            pulumi.set(__self__, "gpus", gpus)
        if local_disk_description is not None:
            pulumi.set(__self__, "local_disk_description", local_disk_description)
        if local_disks is not None:
            pulumi.set(__self__, "local_disks", local_disks)
        if local_disks_total_size_in_gbs is not None:
            pulumi.set(__self__, "local_disks_total_size_in_gbs", local_disks_total_size_in_gbs)
        if max_vnic_attachments is not None:
            pulumi.set(__self__, "max_vnic_attachments", max_vnic_attachments)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if networking_bandwidth_in_gbps is not None:
            pulumi.set(__self__, "networking_bandwidth_in_gbps", networking_bandwidth_in_gbps)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if processor_description is not None:
            pulumi.set(__self__, "processor_description", processor_description)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="gpuDescription")
    def gpu_description(self) -> Optional[str]:
        return pulumi.get(self, "gpu_description")

    @property
    @pulumi.getter
    def gpus(self) -> Optional[int]:
        return pulumi.get(self, "gpus")

    @property
    @pulumi.getter(name="localDiskDescription")
    def local_disk_description(self) -> Optional[str]:
        return pulumi.get(self, "local_disk_description")

    @property
    @pulumi.getter(name="localDisks")
    def local_disks(self) -> Optional[int]:
        return pulumi.get(self, "local_disks")

    @property
    @pulumi.getter(name="localDisksTotalSizeInGbs")
    def local_disks_total_size_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "local_disks_total_size_in_gbs")

    @property
    @pulumi.getter(name="maxVnicAttachments")
    def max_vnic_attachments(self) -> Optional[int]:
        return pulumi.get(self, "max_vnic_attachments")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter(name="networkingBandwidthInGbps")
    def networking_bandwidth_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "networking_bandwidth_in_gbps")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter(name="processorDescription")
    def processor_description(self) -> Optional[str]:
        return pulumi.get(self, "processor_description")

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[int]:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class InstanceSourceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"
        elif key == "bootVolumeSizeInGbs":
            suggest = "boot_volume_size_in_gbs"
        elif key == "bootVolumeVpusPerGb":
            suggest = "boot_volume_vpus_per_gb"
        elif key == "instanceSourceImageFilterDetails":
            suggest = "instance_source_image_filter_details"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "sourceId":
            suggest = "source_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceSourceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceSourceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceSourceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_type: str,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 instance_source_image_filter_details: Optional['outputs.InstanceSourceDetailsInstanceSourceImageFilterDetails'] = None,
                 kms_key_id: Optional[str] = None,
                 source_id: Optional[str] = None):
        pulumi.set(__self__, "source_type", source_type)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if instance_source_image_filter_details is not None:
            pulumi.set(__self__, "instance_source_image_filter_details", instance_source_image_filter_details)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="instanceSourceImageFilterDetails")
    def instance_source_image_filter_details(self) -> Optional['outputs.InstanceSourceDetailsInstanceSourceImageFilterDetails']:
        return pulumi.get(self, "instance_source_image_filter_details")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[str]:
        return pulumi.get(self, "source_id")


@pulumi.output_type
class InstanceSourceDetailsInstanceSourceImageFilterDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "definedTagsFilter":
            suggest = "defined_tags_filter"
        elif key == "operatingSystem":
            suggest = "operating_system"
        elif key == "operatingSystemVersion":
            suggest = "operating_system_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceSourceDetailsInstanceSourceImageFilterDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceSourceDetailsInstanceSourceImageFilterDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceSourceDetailsInstanceSourceImageFilterDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags_filter: Optional[Mapping[str, Any]] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None):
        pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags_filter is not None:
            pulumi.set(__self__, "defined_tags_filter", defined_tags_filter)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTagsFilter")
    def defined_tags_filter(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags_filter")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")


@pulumi.output_type
class IpsecConnectionTunnelManagementBgpSessionInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bgpIpv6state":
            suggest = "bgp_ipv6state"
        elif key == "bgpState":
            suggest = "bgp_state"
        elif key == "customerBgpAsn":
            suggest = "customer_bgp_asn"
        elif key == "customerInterfaceIp":
            suggest = "customer_interface_ip"
        elif key == "oracleBgpAsn":
            suggest = "oracle_bgp_asn"
        elif key == "oracleInterfaceIp":
            suggest = "oracle_interface_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpsecConnectionTunnelManagementBgpSessionInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpsecConnectionTunnelManagementBgpSessionInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpsecConnectionTunnelManagementBgpSessionInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bgp_ipv6state: Optional[str] = None,
                 bgp_state: Optional[str] = None,
                 customer_bgp_asn: Optional[str] = None,
                 customer_interface_ip: Optional[str] = None,
                 oracle_bgp_asn: Optional[str] = None,
                 oracle_interface_ip: Optional[str] = None):
        if bgp_ipv6state is not None:
            pulumi.set(__self__, "bgp_ipv6state", bgp_ipv6state)
        if bgp_state is not None:
            pulumi.set(__self__, "bgp_state", bgp_state)
        if customer_bgp_asn is not None:
            pulumi.set(__self__, "customer_bgp_asn", customer_bgp_asn)
        if customer_interface_ip is not None:
            pulumi.set(__self__, "customer_interface_ip", customer_interface_ip)
        if oracle_bgp_asn is not None:
            pulumi.set(__self__, "oracle_bgp_asn", oracle_bgp_asn)
        if oracle_interface_ip is not None:
            pulumi.set(__self__, "oracle_interface_ip", oracle_interface_ip)

    @property
    @pulumi.getter(name="bgpIpv6state")
    def bgp_ipv6state(self) -> Optional[str]:
        return pulumi.get(self, "bgp_ipv6state")

    @property
    @pulumi.getter(name="bgpState")
    def bgp_state(self) -> Optional[str]:
        return pulumi.get(self, "bgp_state")

    @property
    @pulumi.getter(name="customerBgpAsn")
    def customer_bgp_asn(self) -> Optional[str]:
        return pulumi.get(self, "customer_bgp_asn")

    @property
    @pulumi.getter(name="customerInterfaceIp")
    def customer_interface_ip(self) -> Optional[str]:
        return pulumi.get(self, "customer_interface_ip")

    @property
    @pulumi.getter(name="oracleBgpAsn")
    def oracle_bgp_asn(self) -> Optional[str]:
        return pulumi.get(self, "oracle_bgp_asn")

    @property
    @pulumi.getter(name="oracleInterfaceIp")
    def oracle_interface_ip(self) -> Optional[str]:
        return pulumi.get(self, "oracle_interface_ip")


@pulumi.output_type
class IpsecConnectionTunnelManagementDpdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dpdMode":
            suggest = "dpd_mode"
        elif key == "dpdTimeoutInSec":
            suggest = "dpd_timeout_in_sec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpsecConnectionTunnelManagementDpdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpsecConnectionTunnelManagementDpdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpsecConnectionTunnelManagementDpdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dpd_mode: Optional[str] = None,
                 dpd_timeout_in_sec: Optional[int] = None):
        if dpd_mode is not None:
            pulumi.set(__self__, "dpd_mode", dpd_mode)
        if dpd_timeout_in_sec is not None:
            pulumi.set(__self__, "dpd_timeout_in_sec", dpd_timeout_in_sec)

    @property
    @pulumi.getter(name="dpdMode")
    def dpd_mode(self) -> Optional[str]:
        return pulumi.get(self, "dpd_mode")

    @property
    @pulumi.getter(name="dpdTimeoutInSec")
    def dpd_timeout_in_sec(self) -> Optional[int]:
        return pulumi.get(self, "dpd_timeout_in_sec")


@pulumi.output_type
class IpsecConnectionTunnelManagementEncryptionDomainConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpeTrafficSelectors":
            suggest = "cpe_traffic_selectors"
        elif key == "oracleTrafficSelectors":
            suggest = "oracle_traffic_selectors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpsecConnectionTunnelManagementEncryptionDomainConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpsecConnectionTunnelManagementEncryptionDomainConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpsecConnectionTunnelManagementEncryptionDomainConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpe_traffic_selectors: Optional[Sequence[str]] = None,
                 oracle_traffic_selectors: Optional[Sequence[str]] = None):
        if cpe_traffic_selectors is not None:
            pulumi.set(__self__, "cpe_traffic_selectors", cpe_traffic_selectors)
        if oracle_traffic_selectors is not None:
            pulumi.set(__self__, "oracle_traffic_selectors", oracle_traffic_selectors)

    @property
    @pulumi.getter(name="cpeTrafficSelectors")
    def cpe_traffic_selectors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cpe_traffic_selectors")

    @property
    @pulumi.getter(name="oracleTrafficSelectors")
    def oracle_traffic_selectors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "oracle_traffic_selectors")


@pulumi.output_type
class IpsecConnectionTunnelManagementPhaseOneDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customAuthenticationAlgorithm":
            suggest = "custom_authentication_algorithm"
        elif key == "customDhGroup":
            suggest = "custom_dh_group"
        elif key == "customEncryptionAlgorithm":
            suggest = "custom_encryption_algorithm"
        elif key == "isCustomPhaseOneConfig":
            suggest = "is_custom_phase_one_config"
        elif key == "isIkeEstablished":
            suggest = "is_ike_established"
        elif key == "negotiatedAuthenticationAlgorithm":
            suggest = "negotiated_authentication_algorithm"
        elif key == "negotiatedDhGroup":
            suggest = "negotiated_dh_group"
        elif key == "negotiatedEncryptionAlgorithm":
            suggest = "negotiated_encryption_algorithm"
        elif key == "remainingLifetime":
            suggest = "remaining_lifetime"
        elif key == "remainingLifetimeLastRetrieved":
            suggest = "remaining_lifetime_last_retrieved"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpsecConnectionTunnelManagementPhaseOneDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpsecConnectionTunnelManagementPhaseOneDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpsecConnectionTunnelManagementPhaseOneDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_authentication_algorithm: Optional[str] = None,
                 custom_dh_group: Optional[str] = None,
                 custom_encryption_algorithm: Optional[str] = None,
                 is_custom_phase_one_config: Optional[bool] = None,
                 is_ike_established: Optional[bool] = None,
                 lifetime: Optional[int] = None,
                 negotiated_authentication_algorithm: Optional[str] = None,
                 negotiated_dh_group: Optional[str] = None,
                 negotiated_encryption_algorithm: Optional[str] = None,
                 remaining_lifetime: Optional[str] = None,
                 remaining_lifetime_last_retrieved: Optional[str] = None):
        if custom_authentication_algorithm is not None:
            pulumi.set(__self__, "custom_authentication_algorithm", custom_authentication_algorithm)
        if custom_dh_group is not None:
            pulumi.set(__self__, "custom_dh_group", custom_dh_group)
        if custom_encryption_algorithm is not None:
            pulumi.set(__self__, "custom_encryption_algorithm", custom_encryption_algorithm)
        if is_custom_phase_one_config is not None:
            pulumi.set(__self__, "is_custom_phase_one_config", is_custom_phase_one_config)
        if is_ike_established is not None:
            pulumi.set(__self__, "is_ike_established", is_ike_established)
        if lifetime is not None:
            pulumi.set(__self__, "lifetime", lifetime)
        if negotiated_authentication_algorithm is not None:
            pulumi.set(__self__, "negotiated_authentication_algorithm", negotiated_authentication_algorithm)
        if negotiated_dh_group is not None:
            pulumi.set(__self__, "negotiated_dh_group", negotiated_dh_group)
        if negotiated_encryption_algorithm is not None:
            pulumi.set(__self__, "negotiated_encryption_algorithm", negotiated_encryption_algorithm)
        if remaining_lifetime is not None:
            pulumi.set(__self__, "remaining_lifetime", remaining_lifetime)
        if remaining_lifetime_last_retrieved is not None:
            pulumi.set(__self__, "remaining_lifetime_last_retrieved", remaining_lifetime_last_retrieved)

    @property
    @pulumi.getter(name="customAuthenticationAlgorithm")
    def custom_authentication_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "custom_authentication_algorithm")

    @property
    @pulumi.getter(name="customDhGroup")
    def custom_dh_group(self) -> Optional[str]:
        return pulumi.get(self, "custom_dh_group")

    @property
    @pulumi.getter(name="customEncryptionAlgorithm")
    def custom_encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "custom_encryption_algorithm")

    @property
    @pulumi.getter(name="isCustomPhaseOneConfig")
    def is_custom_phase_one_config(self) -> Optional[bool]:
        return pulumi.get(self, "is_custom_phase_one_config")

    @property
    @pulumi.getter(name="isIkeEstablished")
    def is_ike_established(self) -> Optional[bool]:
        return pulumi.get(self, "is_ike_established")

    @property
    @pulumi.getter
    def lifetime(self) -> Optional[int]:
        return pulumi.get(self, "lifetime")

    @property
    @pulumi.getter(name="negotiatedAuthenticationAlgorithm")
    def negotiated_authentication_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "negotiated_authentication_algorithm")

    @property
    @pulumi.getter(name="negotiatedDhGroup")
    def negotiated_dh_group(self) -> Optional[str]:
        return pulumi.get(self, "negotiated_dh_group")

    @property
    @pulumi.getter(name="negotiatedEncryptionAlgorithm")
    def negotiated_encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "negotiated_encryption_algorithm")

    @property
    @pulumi.getter(name="remainingLifetime")
    def remaining_lifetime(self) -> Optional[str]:
        return pulumi.get(self, "remaining_lifetime")

    @property
    @pulumi.getter(name="remainingLifetimeLastRetrieved")
    def remaining_lifetime_last_retrieved(self) -> Optional[str]:
        return pulumi.get(self, "remaining_lifetime_last_retrieved")


@pulumi.output_type
class IpsecConnectionTunnelManagementPhaseTwoDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customAuthenticationAlgorithm":
            suggest = "custom_authentication_algorithm"
        elif key == "customEncryptionAlgorithm":
            suggest = "custom_encryption_algorithm"
        elif key == "dhGroup":
            suggest = "dh_group"
        elif key == "isCustomPhaseTwoConfig":
            suggest = "is_custom_phase_two_config"
        elif key == "isEspEstablished":
            suggest = "is_esp_established"
        elif key == "isPfsEnabled":
            suggest = "is_pfs_enabled"
        elif key == "negotiatedAuthenticationAlgorithm":
            suggest = "negotiated_authentication_algorithm"
        elif key == "negotiatedDhGroup":
            suggest = "negotiated_dh_group"
        elif key == "negotiatedEncryptionAlgorithm":
            suggest = "negotiated_encryption_algorithm"
        elif key == "remainingLifetime":
            suggest = "remaining_lifetime"
        elif key == "remainingLifetimeLastRetrieved":
            suggest = "remaining_lifetime_last_retrieved"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpsecConnectionTunnelManagementPhaseTwoDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpsecConnectionTunnelManagementPhaseTwoDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpsecConnectionTunnelManagementPhaseTwoDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_authentication_algorithm: Optional[str] = None,
                 custom_encryption_algorithm: Optional[str] = None,
                 dh_group: Optional[str] = None,
                 is_custom_phase_two_config: Optional[bool] = None,
                 is_esp_established: Optional[bool] = None,
                 is_pfs_enabled: Optional[bool] = None,
                 lifetime: Optional[int] = None,
                 negotiated_authentication_algorithm: Optional[str] = None,
                 negotiated_dh_group: Optional[str] = None,
                 negotiated_encryption_algorithm: Optional[str] = None,
                 remaining_lifetime: Optional[str] = None,
                 remaining_lifetime_last_retrieved: Optional[str] = None):
        if custom_authentication_algorithm is not None:
            pulumi.set(__self__, "custom_authentication_algorithm", custom_authentication_algorithm)
        if custom_encryption_algorithm is not None:
            pulumi.set(__self__, "custom_encryption_algorithm", custom_encryption_algorithm)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if is_custom_phase_two_config is not None:
            pulumi.set(__self__, "is_custom_phase_two_config", is_custom_phase_two_config)
        if is_esp_established is not None:
            pulumi.set(__self__, "is_esp_established", is_esp_established)
        if is_pfs_enabled is not None:
            pulumi.set(__self__, "is_pfs_enabled", is_pfs_enabled)
        if lifetime is not None:
            pulumi.set(__self__, "lifetime", lifetime)
        if negotiated_authentication_algorithm is not None:
            pulumi.set(__self__, "negotiated_authentication_algorithm", negotiated_authentication_algorithm)
        if negotiated_dh_group is not None:
            pulumi.set(__self__, "negotiated_dh_group", negotiated_dh_group)
        if negotiated_encryption_algorithm is not None:
            pulumi.set(__self__, "negotiated_encryption_algorithm", negotiated_encryption_algorithm)
        if remaining_lifetime is not None:
            pulumi.set(__self__, "remaining_lifetime", remaining_lifetime)
        if remaining_lifetime_last_retrieved is not None:
            pulumi.set(__self__, "remaining_lifetime_last_retrieved", remaining_lifetime_last_retrieved)

    @property
    @pulumi.getter(name="customAuthenticationAlgorithm")
    def custom_authentication_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "custom_authentication_algorithm")

    @property
    @pulumi.getter(name="customEncryptionAlgorithm")
    def custom_encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "custom_encryption_algorithm")

    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[str]:
        return pulumi.get(self, "dh_group")

    @property
    @pulumi.getter(name="isCustomPhaseTwoConfig")
    def is_custom_phase_two_config(self) -> Optional[bool]:
        return pulumi.get(self, "is_custom_phase_two_config")

    @property
    @pulumi.getter(name="isEspEstablished")
    def is_esp_established(self) -> Optional[bool]:
        return pulumi.get(self, "is_esp_established")

    @property
    @pulumi.getter(name="isPfsEnabled")
    def is_pfs_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pfs_enabled")

    @property
    @pulumi.getter
    def lifetime(self) -> Optional[int]:
        return pulumi.get(self, "lifetime")

    @property
    @pulumi.getter(name="negotiatedAuthenticationAlgorithm")
    def negotiated_authentication_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "negotiated_authentication_algorithm")

    @property
    @pulumi.getter(name="negotiatedDhGroup")
    def negotiated_dh_group(self) -> Optional[str]:
        return pulumi.get(self, "negotiated_dh_group")

    @property
    @pulumi.getter(name="negotiatedEncryptionAlgorithm")
    def negotiated_encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "negotiated_encryption_algorithm")

    @property
    @pulumi.getter(name="remainingLifetime")
    def remaining_lifetime(self) -> Optional[str]:
        return pulumi.get(self, "remaining_lifetime")

    @property
    @pulumi.getter(name="remainingLifetimeLastRetrieved")
    def remaining_lifetime_last_retrieved(self) -> Optional[str]:
        return pulumi.get(self, "remaining_lifetime_last_retrieved")


@pulumi.output_type
class NetworkSecurityGroupSecurityRuleIcmpOptions(dict):
    def __init__(__self__, *,
                 type: int,
                 code: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def type(self) -> int:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")


@pulumi.output_type
class NetworkSecurityGroupSecurityRuleTcpOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPortRange":
            suggest = "destination_port_range"
        elif key == "sourcePortRange":
            suggest = "source_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityGroupSecurityRuleTcpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityGroupSecurityRuleTcpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityGroupSecurityRuleTcpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_port_range: Optional['outputs.NetworkSecurityGroupSecurityRuleTcpOptionsDestinationPortRange'] = None,
                 source_port_range: Optional['outputs.NetworkSecurityGroupSecurityRuleTcpOptionsSourcePortRange'] = None):
        if destination_port_range is not None:
            pulumi.set(__self__, "destination_port_range", destination_port_range)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> Optional['outputs.NetworkSecurityGroupSecurityRuleTcpOptionsDestinationPortRange']:
        return pulumi.get(self, "destination_port_range")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional['outputs.NetworkSecurityGroupSecurityRuleTcpOptionsSourcePortRange']:
        return pulumi.get(self, "source_port_range")


@pulumi.output_type
class NetworkSecurityGroupSecurityRuleTcpOptionsDestinationPortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class NetworkSecurityGroupSecurityRuleTcpOptionsSourcePortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class NetworkSecurityGroupSecurityRuleUdpOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPortRange":
            suggest = "destination_port_range"
        elif key == "sourcePortRange":
            suggest = "source_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkSecurityGroupSecurityRuleUdpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkSecurityGroupSecurityRuleUdpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkSecurityGroupSecurityRuleUdpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_port_range: Optional['outputs.NetworkSecurityGroupSecurityRuleUdpOptionsDestinationPortRange'] = None,
                 source_port_range: Optional['outputs.NetworkSecurityGroupSecurityRuleUdpOptionsSourcePortRange'] = None):
        if destination_port_range is not None:
            pulumi.set(__self__, "destination_port_range", destination_port_range)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> Optional['outputs.NetworkSecurityGroupSecurityRuleUdpOptionsDestinationPortRange']:
        return pulumi.get(self, "destination_port_range")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional['outputs.NetworkSecurityGroupSecurityRuleUdpOptionsSourcePortRange']:
        return pulumi.get(self, "source_port_range")


@pulumi.output_type
class NetworkSecurityGroupSecurityRuleUdpOptionsDestinationPortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class NetworkSecurityGroupSecurityRuleUdpOptionsSourcePortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class RouteTableRouteRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkEntityId":
            suggest = "network_entity_id"
        elif key == "cidrBlock":
            suggest = "cidr_block"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "routeType":
            suggest = "route_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteTableRouteRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteTableRouteRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteTableRouteRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_entity_id: str,
                 cidr_block: Optional[str] = None,
                 description: Optional[str] = None,
                 destination: Optional[str] = None,
                 destination_type: Optional[str] = None,
                 route_type: Optional[str] = None):
        pulumi.set(__self__, "network_entity_id", network_entity_id)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if route_type is not None:
            pulumi.set(__self__, "route_type", route_type)

    @property
    @pulumi.getter(name="networkEntityId")
    def network_entity_id(self) -> str:
        return pulumi.get(self, "network_entity_id")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        warnings.warn("""The 'cidr_block' field has been deprecated. Please use 'destination' instead.""", DeprecationWarning)
        pulumi.log.warn("""cidr_block is deprecated: The 'cidr_block' field has been deprecated. Please use 'destination' instead.""")

        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> Optional[str]:
        return pulumi.get(self, "route_type")


@pulumi.output_type
class SecurityListEgressSecurityRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "icmpOptions":
            suggest = "icmp_options"
        elif key == "tcpOptions":
            suggest = "tcp_options"
        elif key == "udpOptions":
            suggest = "udp_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityListEgressSecurityRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityListEgressSecurityRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityListEgressSecurityRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 protocol: str,
                 description: Optional[str] = None,
                 destination_type: Optional[str] = None,
                 icmp_options: Optional['outputs.SecurityListEgressSecurityRuleIcmpOptions'] = None,
                 stateless: Optional[bool] = None,
                 tcp_options: Optional['outputs.SecurityListEgressSecurityRuleTcpOptions'] = None,
                 udp_options: Optional['outputs.SecurityListEgressSecurityRuleUdpOptions'] = None):
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "protocol", protocol)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if icmp_options is not None:
            pulumi.set(__self__, "icmp_options", icmp_options)
        if stateless is not None:
            pulumi.set(__self__, "stateless", stateless)
        if tcp_options is not None:
            pulumi.set(__self__, "tcp_options", tcp_options)
        if udp_options is not None:
            pulumi.set(__self__, "udp_options", udp_options)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> Optional['outputs.SecurityListEgressSecurityRuleIcmpOptions']:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter
    def stateless(self) -> Optional[bool]:
        return pulumi.get(self, "stateless")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Optional['outputs.SecurityListEgressSecurityRuleTcpOptions']:
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter(name="udpOptions")
    def udp_options(self) -> Optional['outputs.SecurityListEgressSecurityRuleUdpOptions']:
        return pulumi.get(self, "udp_options")


@pulumi.output_type
class SecurityListEgressSecurityRuleIcmpOptions(dict):
    def __init__(__self__, *,
                 type: int,
                 code: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def type(self) -> int:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")


@pulumi.output_type
class SecurityListEgressSecurityRuleTcpOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourcePortRange":
            suggest = "source_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityListEgressSecurityRuleTcpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityListEgressSecurityRuleTcpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityListEgressSecurityRuleTcpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None,
                 source_port_range: Optional['outputs.SecurityListEgressSecurityRuleTcpOptionsSourcePortRange'] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional['outputs.SecurityListEgressSecurityRuleTcpOptionsSourcePortRange']:
        return pulumi.get(self, "source_port_range")


@pulumi.output_type
class SecurityListEgressSecurityRuleTcpOptionsSourcePortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class SecurityListEgressSecurityRuleUdpOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourcePortRange":
            suggest = "source_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityListEgressSecurityRuleUdpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityListEgressSecurityRuleUdpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityListEgressSecurityRuleUdpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None,
                 source_port_range: Optional['outputs.SecurityListEgressSecurityRuleUdpOptionsSourcePortRange'] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional['outputs.SecurityListEgressSecurityRuleUdpOptionsSourcePortRange']:
        return pulumi.get(self, "source_port_range")


@pulumi.output_type
class SecurityListEgressSecurityRuleUdpOptionsSourcePortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class SecurityListIngressSecurityRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "icmpOptions":
            suggest = "icmp_options"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "tcpOptions":
            suggest = "tcp_options"
        elif key == "udpOptions":
            suggest = "udp_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityListIngressSecurityRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityListIngressSecurityRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityListIngressSecurityRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 source: str,
                 description: Optional[str] = None,
                 icmp_options: Optional['outputs.SecurityListIngressSecurityRuleIcmpOptions'] = None,
                 source_type: Optional[str] = None,
                 stateless: Optional[bool] = None,
                 tcp_options: Optional['outputs.SecurityListIngressSecurityRuleTcpOptions'] = None,
                 udp_options: Optional['outputs.SecurityListIngressSecurityRuleUdpOptions'] = None):
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "source", source)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icmp_options is not None:
            pulumi.set(__self__, "icmp_options", icmp_options)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stateless is not None:
            pulumi.set(__self__, "stateless", stateless)
        if tcp_options is not None:
            pulumi.set(__self__, "tcp_options", tcp_options)
        if udp_options is not None:
            pulumi.set(__self__, "udp_options", udp_options)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> Optional['outputs.SecurityListIngressSecurityRuleIcmpOptions']:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def stateless(self) -> Optional[bool]:
        return pulumi.get(self, "stateless")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Optional['outputs.SecurityListIngressSecurityRuleTcpOptions']:
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter(name="udpOptions")
    def udp_options(self) -> Optional['outputs.SecurityListIngressSecurityRuleUdpOptions']:
        return pulumi.get(self, "udp_options")


@pulumi.output_type
class SecurityListIngressSecurityRuleIcmpOptions(dict):
    def __init__(__self__, *,
                 type: int,
                 code: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def type(self) -> int:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")


@pulumi.output_type
class SecurityListIngressSecurityRuleTcpOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourcePortRange":
            suggest = "source_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityListIngressSecurityRuleTcpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityListIngressSecurityRuleTcpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityListIngressSecurityRuleTcpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None,
                 source_port_range: Optional['outputs.SecurityListIngressSecurityRuleTcpOptionsSourcePortRange'] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional['outputs.SecurityListIngressSecurityRuleTcpOptionsSourcePortRange']:
        return pulumi.get(self, "source_port_range")


@pulumi.output_type
class SecurityListIngressSecurityRuleTcpOptionsSourcePortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class SecurityListIngressSecurityRuleUdpOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourcePortRange":
            suggest = "source_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityListIngressSecurityRuleUdpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityListIngressSecurityRuleUdpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityListIngressSecurityRuleUdpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None,
                 source_port_range: Optional['outputs.SecurityListIngressSecurityRuleUdpOptionsSourcePortRange'] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if source_port_range is not None:
            pulumi.set(__self__, "source_port_range", source_port_range)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional['outputs.SecurityListIngressSecurityRuleUdpOptionsSourcePortRange']:
        return pulumi.get(self, "source_port_range")


@pulumi.output_type
class SecurityListIngressSecurityRuleUdpOptionsSourcePortRange(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class ServiceGatewayService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceId":
            suggest = "service_id"
        elif key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceGatewayService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceGatewayService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceGatewayService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_id: str,
                 service_name: Optional[str] = None):
        pulumi.set(__self__, "service_id", service_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class VcnByoipv6cidrDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "byoipv6rangeId":
            suggest = "byoipv6range_id"
        elif key == "ipv6cidrBlock":
            suggest = "ipv6cidr_block"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VcnByoipv6cidrDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VcnByoipv6cidrDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VcnByoipv6cidrDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 byoipv6range_id: str,
                 ipv6cidr_block: str):
        pulumi.set(__self__, "byoipv6range_id", byoipv6range_id)
        pulumi.set(__self__, "ipv6cidr_block", ipv6cidr_block)

    @property
    @pulumi.getter(name="byoipv6rangeId")
    def byoipv6range_id(self) -> str:
        return pulumi.get(self, "byoipv6range_id")

    @property
    @pulumi.getter(name="ipv6cidrBlock")
    def ipv6cidr_block(self) -> str:
        return pulumi.get(self, "ipv6cidr_block")


@pulumi.output_type
class VirtualCircuitCrossConnectMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bgpMd5authKey":
            suggest = "bgp_md5auth_key"
        elif key == "crossConnectOrCrossConnectGroupId":
            suggest = "cross_connect_or_cross_connect_group_id"
        elif key == "customerBgpPeeringIp":
            suggest = "customer_bgp_peering_ip"
        elif key == "customerBgpPeeringIpv6":
            suggest = "customer_bgp_peering_ipv6"
        elif key == "oracleBgpPeeringIp":
            suggest = "oracle_bgp_peering_ip"
        elif key == "oracleBgpPeeringIpv6":
            suggest = "oracle_bgp_peering_ipv6"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualCircuitCrossConnectMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualCircuitCrossConnectMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualCircuitCrossConnectMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bgp_md5auth_key: Optional[str] = None,
                 cross_connect_or_cross_connect_group_id: Optional[str] = None,
                 customer_bgp_peering_ip: Optional[str] = None,
                 customer_bgp_peering_ipv6: Optional[str] = None,
                 oracle_bgp_peering_ip: Optional[str] = None,
                 oracle_bgp_peering_ipv6: Optional[str] = None,
                 vlan: Optional[int] = None):
        if bgp_md5auth_key is not None:
            pulumi.set(__self__, "bgp_md5auth_key", bgp_md5auth_key)
        if cross_connect_or_cross_connect_group_id is not None:
            pulumi.set(__self__, "cross_connect_or_cross_connect_group_id", cross_connect_or_cross_connect_group_id)
        if customer_bgp_peering_ip is not None:
            pulumi.set(__self__, "customer_bgp_peering_ip", customer_bgp_peering_ip)
        if customer_bgp_peering_ipv6 is not None:
            pulumi.set(__self__, "customer_bgp_peering_ipv6", customer_bgp_peering_ipv6)
        if oracle_bgp_peering_ip is not None:
            pulumi.set(__self__, "oracle_bgp_peering_ip", oracle_bgp_peering_ip)
        if oracle_bgp_peering_ipv6 is not None:
            pulumi.set(__self__, "oracle_bgp_peering_ipv6", oracle_bgp_peering_ipv6)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="bgpMd5authKey")
    def bgp_md5auth_key(self) -> Optional[str]:
        return pulumi.get(self, "bgp_md5auth_key")

    @property
    @pulumi.getter(name="crossConnectOrCrossConnectGroupId")
    def cross_connect_or_cross_connect_group_id(self) -> Optional[str]:
        return pulumi.get(self, "cross_connect_or_cross_connect_group_id")

    @property
    @pulumi.getter(name="customerBgpPeeringIp")
    def customer_bgp_peering_ip(self) -> Optional[str]:
        return pulumi.get(self, "customer_bgp_peering_ip")

    @property
    @pulumi.getter(name="customerBgpPeeringIpv6")
    def customer_bgp_peering_ipv6(self) -> Optional[str]:
        return pulumi.get(self, "customer_bgp_peering_ipv6")

    @property
    @pulumi.getter(name="oracleBgpPeeringIp")
    def oracle_bgp_peering_ip(self) -> Optional[str]:
        return pulumi.get(self, "oracle_bgp_peering_ip")

    @property
    @pulumi.getter(name="oracleBgpPeeringIpv6")
    def oracle_bgp_peering_ipv6(self) -> Optional[str]:
        return pulumi.get(self, "oracle_bgp_peering_ipv6")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class VirtualCircuitPublicPrefix(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrBlock":
            suggest = "cidr_block"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualCircuitPublicPrefix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualCircuitPublicPrefix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualCircuitPublicPrefix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_block: str):
        pulumi.set(__self__, "cidr_block", cidr_block)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        return pulumi.get(self, "cidr_block")


@pulumi.output_type
class VirtualNetworkByoipv6cidrDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "byoipv6rangeId":
            suggest = "byoipv6range_id"
        elif key == "ipv6cidrBlock":
            suggest = "ipv6cidr_block"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualNetworkByoipv6cidrDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualNetworkByoipv6cidrDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualNetworkByoipv6cidrDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 byoipv6range_id: str,
                 ipv6cidr_block: str):
        pulumi.set(__self__, "byoipv6range_id", byoipv6range_id)
        pulumi.set(__self__, "ipv6cidr_block", ipv6cidr_block)

    @property
    @pulumi.getter(name="byoipv6rangeId")
    def byoipv6range_id(self) -> str:
        return pulumi.get(self, "byoipv6range_id")

    @property
    @pulumi.getter(name="ipv6cidrBlock")
    def ipv6cidr_block(self) -> str:
        return pulumi.get(self, "ipv6cidr_block")


@pulumi.output_type
class VnicAttachmentCreateVnicDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignIpv6ip":
            suggest = "assign_ipv6ip"
        elif key == "assignPrivateDnsRecord":
            suggest = "assign_private_dns_record"
        elif key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "hostnameLabel":
            suggest = "hostname_label"
        elif key == "ipv6addressIpv6subnetCidrPairDetails":
            suggest = "ipv6address_ipv6subnet_cidr_pair_details"
        elif key == "nsgIds":
            suggest = "nsg_ids"
        elif key == "privateIp":
            suggest = "private_ip"
        elif key == "skipSourceDestCheck":
            suggest = "skip_source_dest_check"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VnicAttachmentCreateVnicDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VnicAttachmentCreateVnicDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VnicAttachmentCreateVnicDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.VnicAttachmentCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[str]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.VnicAttachmentCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class VnicAttachmentCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6Address":
            suggest = "ipv6_address"
        elif key == "ipv6SubnetCidr":
            suggest = "ipv6_subnet_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VnicAttachmentCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VnicAttachmentCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VnicAttachmentCreateVnicDetailsIpv6addressIpv6subnetCidrPairDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6_address: Optional[str] = None,
                 ipv6_subnet_cidr: Optional[str] = None):
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_subnet_cidr is not None:
            pulumi.set(__self__, "ipv6_subnet_cidr", ipv6_subnet_cidr)

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="ipv6SubnetCidr")
    def ipv6_subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6_subnet_cidr")


@pulumi.output_type
class VolumeAttachmentMultipathDevice(dict):
    def __init__(__self__, *,
                 ipv4: Optional[str] = None,
                 iqn: Optional[str] = None,
                 port: Optional[int] = None):
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if iqn is not None:
            pulumi.set(__self__, "iqn", iqn)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[str]:
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def iqn(self) -> Optional[str]:
        return pulumi.get(self, "iqn")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class VolumeAutotunePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autotuneType":
            suggest = "autotune_type"
        elif key == "maxVpusPerGb":
            suggest = "max_vpus_per_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeAutotunePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeAutotunePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeAutotunePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autotune_type: str,
                 max_vpus_per_gb: Optional[str] = None):
        pulumi.set(__self__, "autotune_type", autotune_type)
        if max_vpus_per_gb is not None:
            pulumi.set(__self__, "max_vpus_per_gb", max_vpus_per_gb)

    @property
    @pulumi.getter(name="autotuneType")
    def autotune_type(self) -> str:
        return pulumi.get(self, "autotune_type")

    @property
    @pulumi.getter(name="maxVpusPerGb")
    def max_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "max_vpus_per_gb")


@pulumi.output_type
class VolumeBackupPolicySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupType":
            suggest = "backup_type"
        elif key == "retentionSeconds":
            suggest = "retention_seconds"
        elif key == "dayOfMonth":
            suggest = "day_of_month"
        elif key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "hourOfDay":
            suggest = "hour_of_day"
        elif key == "offsetSeconds":
            suggest = "offset_seconds"
        elif key == "offsetType":
            suggest = "offset_type"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeBackupPolicySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeBackupPolicySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeBackupPolicySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_type: str,
                 period: str,
                 retention_seconds: int,
                 day_of_month: Optional[int] = None,
                 day_of_week: Optional[str] = None,
                 hour_of_day: Optional[int] = None,
                 month: Optional[str] = None,
                 offset_seconds: Optional[int] = None,
                 offset_type: Optional[str] = None,
                 time_zone: Optional[str] = None):
        pulumi.set(__self__, "backup_type", backup_type)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "retention_seconds", retention_seconds)
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if hour_of_day is not None:
            pulumi.set(__self__, "hour_of_day", hour_of_day)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if offset_seconds is not None:
            pulumi.set(__self__, "offset_seconds", offset_seconds)
        if offset_type is not None:
            pulumi.set(__self__, "offset_type", offset_type)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> str:
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter
    def period(self) -> str:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="retentionSeconds")
    def retention_seconds(self) -> int:
        return pulumi.get(self, "retention_seconds")

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> Optional[int]:
        return pulumi.get(self, "hour_of_day")

    @property
    @pulumi.getter
    def month(self) -> Optional[str]:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="offsetSeconds")
    def offset_seconds(self) -> Optional[int]:
        return pulumi.get(self, "offset_seconds")

    @property
    @pulumi.getter(name="offsetType")
    def offset_type(self) -> Optional[str]:
        return pulumi.get(self, "offset_type")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class VolumeBackupSourceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeBackupId":
            suggest = "volume_backup_id"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeBackupSourceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeBackupSourceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeBackupSourceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 volume_backup_id: str,
                 kms_key_id: Optional[str] = None):
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "volume_backup_id", volume_backup_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="volumeBackupId")
    def volume_backup_id(self) -> str:
        return pulumi.get(self, "volume_backup_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class VolumeBlockVolumeReplica(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "blockVolumeReplicaId":
            suggest = "block_volume_replica_id"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeBlockVolumeReplica. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeBlockVolumeReplica.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeBlockVolumeReplica.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_domain: str,
                 block_volume_replica_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        pulumi.set(__self__, "availability_domain", availability_domain)
        if block_volume_replica_id is not None:
            pulumi.set(__self__, "block_volume_replica_id", block_volume_replica_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="blockVolumeReplicaId")
    def block_volume_replica_id(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_replica_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class VolumeGroupBackupSourceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeGroupBackupId":
            suggest = "volume_group_backup_id"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeGroupBackupSourceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeGroupBackupSourceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeGroupBackupSourceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 volume_group_backup_id: str,
                 kms_key_id: Optional[str] = None):
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "volume_group_backup_id", volume_group_backup_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="volumeGroupBackupId")
    def volume_group_backup_id(self) -> str:
        return pulumi.get(self, "volume_group_backup_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class VolumeGroupSourceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeGroupBackupId":
            suggest = "volume_group_backup_id"
        elif key == "volumeGroupId":
            suggest = "volume_group_id"
        elif key == "volumeGroupReplicaId":
            suggest = "volume_group_replica_id"
        elif key == "volumeIds":
            suggest = "volume_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeGroupSourceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeGroupSourceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeGroupSourceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 volume_group_backup_id: Optional[str] = None,
                 volume_group_id: Optional[str] = None,
                 volume_group_replica_id: Optional[str] = None,
                 volume_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if volume_group_backup_id is not None:
            pulumi.set(__self__, "volume_group_backup_id", volume_group_backup_id)
        if volume_group_id is not None:
            pulumi.set(__self__, "volume_group_id", volume_group_id)
        if volume_group_replica_id is not None:
            pulumi.set(__self__, "volume_group_replica_id", volume_group_replica_id)
        if volume_ids is not None:
            pulumi.set(__self__, "volume_ids", volume_ids)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="volumeGroupBackupId")
    def volume_group_backup_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_group_backup_id")

    @property
    @pulumi.getter(name="volumeGroupId")
    def volume_group_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_group_id")

    @property
    @pulumi.getter(name="volumeGroupReplicaId")
    def volume_group_replica_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_group_replica_id")

    @property
    @pulumi.getter(name="volumeIds")
    def volume_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "volume_ids")


@pulumi.output_type
class VolumeGroupVolumeGroupReplica(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "volumeGroupReplicaId":
            suggest = "volume_group_replica_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeGroupVolumeGroupReplica. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeGroupVolumeGroupReplica.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeGroupVolumeGroupReplica.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_domain: str,
                 display_name: Optional[str] = None,
                 volume_group_replica_id: Optional[str] = None):
        pulumi.set(__self__, "availability_domain", availability_domain)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if volume_group_replica_id is not None:
            pulumi.set(__self__, "volume_group_replica_id", volume_group_replica_id)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> str:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="volumeGroupReplicaId")
    def volume_group_replica_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_group_replica_id")


@pulumi.output_type
class VolumeSourceDetails(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAppCatalogListingResourceVersionsAppCatalogListingResourceVersionResult(dict):
    def __init__(__self__, *,
                 accessible_ports: Optional[Sequence[int]] = None,
                 allowed_actions: Optional[Sequence[str]] = None,
                 available_regions: Optional[Sequence[str]] = None,
                 compatible_shapes: Optional[Sequence[str]] = None,
                 listing_id: Optional[str] = None,
                 listing_resource_id: Optional[str] = None,
                 listing_resource_version: Optional[str] = None,
                 time_published: Optional[str] = None):
        if accessible_ports is not None:
            pulumi.set(__self__, "accessible_ports", accessible_ports)
        if allowed_actions is not None:
            pulumi.set(__self__, "allowed_actions", allowed_actions)
        if available_regions is not None:
            pulumi.set(__self__, "available_regions", available_regions)
        if compatible_shapes is not None:
            pulumi.set(__self__, "compatible_shapes", compatible_shapes)
        if listing_id is not None:
            pulumi.set(__self__, "listing_id", listing_id)
        if listing_resource_id is not None:
            pulumi.set(__self__, "listing_resource_id", listing_resource_id)
        if listing_resource_version is not None:
            pulumi.set(__self__, "listing_resource_version", listing_resource_version)
        if time_published is not None:
            pulumi.set(__self__, "time_published", time_published)

    @property
    @pulumi.getter(name="accessiblePorts")
    def accessible_ports(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "accessible_ports")

    @property
    @pulumi.getter(name="allowedActions")
    def allowed_actions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_actions")

    @property
    @pulumi.getter(name="availableRegions")
    def available_regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "available_regions")

    @property
    @pulumi.getter(name="compatibleShapes")
    def compatible_shapes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "compatible_shapes")

    @property
    @pulumi.getter(name="listingId")
    def listing_id(self) -> Optional[str]:
        return pulumi.get(self, "listing_id")

    @property
    @pulumi.getter(name="listingResourceId")
    def listing_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "listing_resource_id")

    @property
    @pulumi.getter(name="listingResourceVersion")
    def listing_resource_version(self) -> Optional[str]:
        return pulumi.get(self, "listing_resource_version")

    @property
    @pulumi.getter(name="timePublished")
    def time_published(self) -> Optional[str]:
        return pulumi.get(self, "time_published")


@pulumi.output_type
class GetAppCatalogListingResourceVersionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAppCatalogListingsAppCatalogListingResult(dict):
    def __init__(__self__, *,
                 contact_url: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 listing_id: Optional[str] = None,
                 publisher_logo_url: Optional[str] = None,
                 publisher_name: Optional[str] = None,
                 summary: Optional[str] = None,
                 time_published: Optional[str] = None):
        if contact_url is not None:
            pulumi.set(__self__, "contact_url", contact_url)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if listing_id is not None:
            pulumi.set(__self__, "listing_id", listing_id)
        if publisher_logo_url is not None:
            pulumi.set(__self__, "publisher_logo_url", publisher_logo_url)
        if publisher_name is not None:
            pulumi.set(__self__, "publisher_name", publisher_name)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if time_published is not None:
            pulumi.set(__self__, "time_published", time_published)

    @property
    @pulumi.getter(name="contactUrl")
    def contact_url(self) -> Optional[str]:
        return pulumi.get(self, "contact_url")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="listingId")
    def listing_id(self) -> Optional[str]:
        return pulumi.get(self, "listing_id")

    @property
    @pulumi.getter(name="publisherLogoUrl")
    def publisher_logo_url(self) -> Optional[str]:
        return pulumi.get(self, "publisher_logo_url")

    @property
    @pulumi.getter(name="publisherName")
    def publisher_name(self) -> Optional[str]:
        return pulumi.get(self, "publisher_name")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="timePublished")
    def time_published(self) -> Optional[str]:
        return pulumi.get(self, "time_published")


@pulumi.output_type
class GetAppCatalogListingsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAppCatalogSubscriptionsAppCatalogSubscriptionResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 listing_id: str,
                 listing_resource_version: str,
                 oracle_terms_of_use_link: str,
                 signature: str,
                 time_retrieved: str,
                 display_name: Optional[str] = None,
                 eula_link: Optional[str] = None,
                 listing_resource_id: Optional[str] = None,
                 publisher_name: Optional[str] = None,
                 summary: Optional[str] = None,
                 time_created: Optional[str] = None):
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "listing_id", listing_id)
        pulumi.set(__self__, "listing_resource_version", listing_resource_version)
        pulumi.set(__self__, "oracle_terms_of_use_link", oracle_terms_of_use_link)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "time_retrieved", time_retrieved)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if eula_link is not None:
            pulumi.set(__self__, "eula_link", eula_link)
        if listing_resource_id is not None:
            pulumi.set(__self__, "listing_resource_id", listing_resource_id)
        if publisher_name is not None:
            pulumi.set(__self__, "publisher_name", publisher_name)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="listingId")
    def listing_id(self) -> str:
        return pulumi.get(self, "listing_id")

    @property
    @pulumi.getter(name="listingResourceVersion")
    def listing_resource_version(self) -> str:
        return pulumi.get(self, "listing_resource_version")

    @property
    @pulumi.getter(name="oracleTermsOfUseLink")
    def oracle_terms_of_use_link(self) -> str:
        return pulumi.get(self, "oracle_terms_of_use_link")

    @property
    @pulumi.getter
    def signature(self) -> str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="timeRetrieved")
    def time_retrieved(self) -> str:
        return pulumi.get(self, "time_retrieved")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="eulaLink")
    def eula_link(self) -> Optional[str]:
        return pulumi.get(self, "eula_link")

    @property
    @pulumi.getter(name="listingResourceId")
    def listing_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "listing_resource_id")

    @property
    @pulumi.getter(name="publisherName")
    def publisher_name(self) -> Optional[str]:
        return pulumi.get(self, "publisher_name")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetAppCatalogSubscriptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBlockVolumeReplicasBlockVolumeReplicaResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 block_volume_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 size_in_gbs: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_synced: Optional[str] = None,
                 volume_group_replica_id: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if block_volume_id is not None:
            pulumi.set(__self__, "block_volume_id", block_volume_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if size_in_gbs is not None:
            pulumi.set(__self__, "size_in_gbs", size_in_gbs)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_synced is not None:
            pulumi.set(__self__, "time_last_synced", time_last_synced)
        if volume_group_replica_id is not None:
            pulumi.set(__self__, "volume_group_replica_id", volume_group_replica_id)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="blockVolumeId")
    def block_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sizeInGbs")
    def size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_gbs")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastSynced")
    def time_last_synced(self) -> Optional[str]:
        return pulumi.get(self, "time_last_synced")

    @property
    @pulumi.getter(name="volumeGroupReplicaId")
    def volume_group_replica_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_group_replica_id")


@pulumi.output_type
class GetBlockVolumeReplicasFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBootVolumeAttachmentsBootVolumeAttachmentResult(dict):
    def __init__(__self__, *,
                 boot_volume_id: str,
                 instance_id: str,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 encryption_in_transit_type: Optional[str] = None,
                 id: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        pulumi.set(__self__, "instance_id", instance_id)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if encryption_in_transit_type is not None:
            pulumi.set(__self__, "encryption_in_transit_type", encryption_in_transit_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> str:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encryptionInTransitType")
    def encryption_in_transit_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_in_transit_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetBootVolumeAttachmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBootVolumeAutotunePolicyResult(dict):
    def __init__(__self__, *,
                 autotune_type: Optional[str] = None,
                 max_vpus_per_gb: Optional[str] = None):
        if autotune_type is not None:
            pulumi.set(__self__, "autotune_type", autotune_type)
        if max_vpus_per_gb is not None:
            pulumi.set(__self__, "max_vpus_per_gb", max_vpus_per_gb)

    @property
    @pulumi.getter(name="autotuneType")
    def autotune_type(self) -> Optional[str]:
        return pulumi.get(self, "autotune_type")

    @property
    @pulumi.getter(name="maxVpusPerGb")
    def max_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "max_vpus_per_gb")


@pulumi.output_type
class GetBootVolumeBackupSourceDetailResult(dict):
    def __init__(__self__, *,
                 boot_volume_backup_id: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 region: Optional[str] = None):
        if boot_volume_backup_id is not None:
            pulumi.set(__self__, "boot_volume_backup_id", boot_volume_backup_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="bootVolumeBackupId")
    def boot_volume_backup_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_backup_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetBootVolumeBackupsBootVolumeBackupResult(dict):
    def __init__(__self__, *,
                 boot_volume_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 expiration_time: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 image_id: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 size_in_gbs: Optional[str] = None,
                 source_boot_volume_backup_id: Optional[str] = None,
                 source_details: Optional[Sequence['outputs.GetBootVolumeBackupsBootVolumeBackupSourceDetailResult']] = None,
                 source_type: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_request_received: Optional[str] = None,
                 type: Optional[str] = None,
                 unique_size_in_gbs: Optional[str] = None):
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size_in_gbs is not None:
            pulumi.set(__self__, "size_in_gbs", size_in_gbs)
        if source_boot_volume_backup_id is not None:
            pulumi.set(__self__, "source_boot_volume_backup_id", source_boot_volume_backup_id)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_request_received is not None:
            pulumi.set(__self__, "time_request_received", time_request_received)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unique_size_in_gbs is not None:
            pulumi.set(__self__, "unique_size_in_gbs", unique_size_in_gbs)

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sizeInGbs")
    def size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_gbs")

    @property
    @pulumi.getter(name="sourceBootVolumeBackupId")
    def source_boot_volume_backup_id(self) -> Optional[str]:
        return pulumi.get(self, "source_boot_volume_backup_id")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetBootVolumeBackupsBootVolumeBackupSourceDetailResult']]:
        return pulumi.get(self, "source_details")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeRequestReceived")
    def time_request_received(self) -> Optional[str]:
        return pulumi.get(self, "time_request_received")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="uniqueSizeInGbs")
    def unique_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "unique_size_in_gbs")


@pulumi.output_type
class GetBootVolumeBackupsBootVolumeBackupSourceDetailResult(dict):
    def __init__(__self__, *,
                 boot_volume_backup_id: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 region: Optional[str] = None):
        if boot_volume_backup_id is not None:
            pulumi.set(__self__, "boot_volume_backup_id", boot_volume_backup_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="bootVolumeBackupId")
    def boot_volume_backup_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_backup_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetBootVolumeBackupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBootVolumeBootVolumeReplicaResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 boot_volume_replica_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if boot_volume_replica_id is not None:
            pulumi.set(__self__, "boot_volume_replica_id", boot_volume_replica_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="bootVolumeReplicaId")
    def boot_volume_replica_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_replica_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetBootVolumeReplicasBootVolumeReplicaResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 boot_volume_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 image_id: Optional[str] = None,
                 size_in_gbs: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_synced: Optional[str] = None,
                 volume_group_replica_id: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if size_in_gbs is not None:
            pulumi.set(__self__, "size_in_gbs", size_in_gbs)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_synced is not None:
            pulumi.set(__self__, "time_last_synced", time_last_synced)
        if volume_group_replica_id is not None:
            pulumi.set(__self__, "volume_group_replica_id", volume_group_replica_id)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="sizeInGbs")
    def size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_gbs")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastSynced")
    def time_last_synced(self) -> Optional[str]:
        return pulumi.get(self, "time_last_synced")

    @property
    @pulumi.getter(name="volumeGroupReplicaId")
    def volume_group_replica_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_group_replica_id")


@pulumi.output_type
class GetBootVolumeReplicasFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBootVolumeSourceDetailResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 type: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBootVolumesBootVolumeResult(dict):
    def __init__(__self__, *,
                 auto_tuned_vpus_per_gb: Optional[str] = None,
                 autotune_policies: Optional[Sequence['outputs.GetBootVolumesBootVolumeAutotunePolicyResult']] = None,
                 availability_domain: Optional[str] = None,
                 backup_policy_id: Optional[str] = None,
                 boot_volume_replicas: Optional[Sequence['outputs.GetBootVolumesBootVolumeBootVolumeReplicaResult']] = None,
                 boot_volume_replicas_deletion: Optional[bool] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 image_id: Optional[str] = None,
                 is_auto_tune_enabled: Optional[bool] = None,
                 is_hydrated: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 size_in_gbs: Optional[str] = None,
                 size_in_mbs: Optional[str] = None,
                 source_details: Optional[Sequence['outputs.GetBootVolumesBootVolumeSourceDetailResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 volume_group_id: Optional[str] = None,
                 vpus_per_gb: Optional[str] = None):
        if auto_tuned_vpus_per_gb is not None:
            pulumi.set(__self__, "auto_tuned_vpus_per_gb", auto_tuned_vpus_per_gb)
        if autotune_policies is not None:
            pulumi.set(__self__, "autotune_policies", autotune_policies)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if backup_policy_id is not None:
            pulumi.set(__self__, "backup_policy_id", backup_policy_id)
        if boot_volume_replicas is not None:
            pulumi.set(__self__, "boot_volume_replicas", boot_volume_replicas)
        if boot_volume_replicas_deletion is not None:
            pulumi.set(__self__, "boot_volume_replicas_deletion", boot_volume_replicas_deletion)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if is_auto_tune_enabled is not None:
            pulumi.set(__self__, "is_auto_tune_enabled", is_auto_tune_enabled)
        if is_hydrated is not None:
            pulumi.set(__self__, "is_hydrated", is_hydrated)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size_in_gbs is not None:
            pulumi.set(__self__, "size_in_gbs", size_in_gbs)
        if size_in_mbs is not None:
            pulumi.set(__self__, "size_in_mbs", size_in_mbs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if volume_group_id is not None:
            pulumi.set(__self__, "volume_group_id", volume_group_id)
        if vpus_per_gb is not None:
            pulumi.set(__self__, "vpus_per_gb", vpus_per_gb)

    @property
    @pulumi.getter(name="autoTunedVpusPerGb")
    def auto_tuned_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "auto_tuned_vpus_per_gb")

    @property
    @pulumi.getter(name="autotunePolicies")
    def autotune_policies(self) -> Optional[Sequence['outputs.GetBootVolumesBootVolumeAutotunePolicyResult']]:
        return pulumi.get(self, "autotune_policies")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> Optional[str]:
        warnings.warn("""The 'backup_policy_id' field has been deprecated. Please use the 'oci_core_volume_backup_policy_assignment' resource instead.""", DeprecationWarning)
        pulumi.log.warn("""backup_policy_id is deprecated: The 'backup_policy_id' field has been deprecated. Please use the 'oci_core_volume_backup_policy_assignment' resource instead.""")

        return pulumi.get(self, "backup_policy_id")

    @property
    @pulumi.getter(name="bootVolumeReplicas")
    def boot_volume_replicas(self) -> Optional[Sequence['outputs.GetBootVolumesBootVolumeBootVolumeReplicaResult']]:
        return pulumi.get(self, "boot_volume_replicas")

    @property
    @pulumi.getter(name="bootVolumeReplicasDeletion")
    def boot_volume_replicas_deletion(self) -> Optional[bool]:
        return pulumi.get(self, "boot_volume_replicas_deletion")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="isAutoTuneEnabled")
    def is_auto_tune_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_tune_enabled")

    @property
    @pulumi.getter(name="isHydrated")
    def is_hydrated(self) -> Optional[bool]:
        return pulumi.get(self, "is_hydrated")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sizeInGbs")
    def size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_gbs")

    @property
    @pulumi.getter(name="sizeInMbs")
    def size_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_mbs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetBootVolumesBootVolumeSourceDetailResult']]:
        return pulumi.get(self, "source_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="volumeGroupId")
    def volume_group_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_group_id")

    @property
    @pulumi.getter(name="vpusPerGb")
    def vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "vpus_per_gb")


@pulumi.output_type
class GetBootVolumesBootVolumeAutotunePolicyResult(dict):
    def __init__(__self__, *,
                 autotune_type: Optional[str] = None,
                 max_vpus_per_gb: Optional[str] = None):
        if autotune_type is not None:
            pulumi.set(__self__, "autotune_type", autotune_type)
        if max_vpus_per_gb is not None:
            pulumi.set(__self__, "max_vpus_per_gb", max_vpus_per_gb)

    @property
    @pulumi.getter(name="autotuneType")
    def autotune_type(self) -> Optional[str]:
        return pulumi.get(self, "autotune_type")

    @property
    @pulumi.getter(name="maxVpusPerGb")
    def max_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "max_vpus_per_gb")


@pulumi.output_type
class GetBootVolumesBootVolumeBootVolumeReplicaResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 boot_volume_replica_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if boot_volume_replica_id is not None:
            pulumi.set(__self__, "boot_volume_replica_id", boot_volume_replica_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="bootVolumeReplicaId")
    def boot_volume_replica_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_replica_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetBootVolumesBootVolumeSourceDetailResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 type: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBootVolumesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetByoipAllocatedRangesByoipAllocatedRangeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetByoipAllocatedRangesByoipAllocatedRangeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetByoipAllocatedRangesByoipAllocatedRangeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetByoipAllocatedRangesByoipAllocatedRangeCollectionItemResult(dict):
    def __init__(__self__, *,
                 cidr_block: Optional[str] = None,
                 public_ip_pool_id: Optional[str] = None):
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if public_ip_pool_id is not None:
            pulumi.set(__self__, "public_ip_pool_id", public_ip_pool_id)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="publicIpPoolId")
    def public_ip_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "public_ip_pool_id")


@pulumi.output_type
class GetByoipAllocatedRangesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetByoipRangeByoipRangeVcnIpv6allocationResult(dict):
    def __init__(__self__, *,
                 byoip_range_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 ipv6cidr_block: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if byoip_range_id is not None:
            pulumi.set(__self__, "byoip_range_id", byoip_range_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if ipv6cidr_block is not None:
            pulumi.set(__self__, "ipv6cidr_block", ipv6cidr_block)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="byoipRangeId")
    def byoip_range_id(self) -> Optional[str]:
        return pulumi.get(self, "byoip_range_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="ipv6cidrBlock")
    def ipv6cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "ipv6cidr_block")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetByoipRangesByoipRangeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetByoipRangesByoipRangeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetByoipRangesByoipRangeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetByoipRangesByoipRangeCollectionItemResult(dict):
    def __init__(__self__, *,
                 byoip_range_vcn_ipv6allocations: Optional[Sequence['outputs.GetByoipRangesByoipRangeCollectionItemByoipRangeVcnIpv6allocationResult']] = None,
                 cidr_block: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 ipv6cidr_block: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 time_advertised: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_validated: Optional[str] = None,
                 time_withdrawn: Optional[str] = None,
                 validation_token: Optional[str] = None):
        if byoip_range_vcn_ipv6allocations is not None:
            pulumi.set(__self__, "byoip_range_vcn_ipv6allocations", byoip_range_vcn_ipv6allocations)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv6cidr_block is not None:
            pulumi.set(__self__, "ipv6cidr_block", ipv6cidr_block)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_advertised is not None:
            pulumi.set(__self__, "time_advertised", time_advertised)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_validated is not None:
            pulumi.set(__self__, "time_validated", time_validated)
        if time_withdrawn is not None:
            pulumi.set(__self__, "time_withdrawn", time_withdrawn)
        if validation_token is not None:
            pulumi.set(__self__, "validation_token", validation_token)

    @property
    @pulumi.getter(name="byoipRangeVcnIpv6allocations")
    def byoip_range_vcn_ipv6allocations(self) -> Optional[Sequence['outputs.GetByoipRangesByoipRangeCollectionItemByoipRangeVcnIpv6allocationResult']]:
        return pulumi.get(self, "byoip_range_vcn_ipv6allocations")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv6cidrBlock")
    def ipv6cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "ipv6cidr_block")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeAdvertised")
    def time_advertised(self) -> Optional[str]:
        return pulumi.get(self, "time_advertised")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeValidated")
    def time_validated(self) -> Optional[str]:
        return pulumi.get(self, "time_validated")

    @property
    @pulumi.getter(name="timeWithdrawn")
    def time_withdrawn(self) -> Optional[str]:
        return pulumi.get(self, "time_withdrawn")

    @property
    @pulumi.getter(name="validationToken")
    def validation_token(self) -> Optional[str]:
        return pulumi.get(self, "validation_token")


@pulumi.output_type
class GetByoipRangesByoipRangeCollectionItemByoipRangeVcnIpv6allocationResult(dict):
    def __init__(__self__, *,
                 byoip_range_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 ipv6cidr_block: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if byoip_range_id is not None:
            pulumi.set(__self__, "byoip_range_id", byoip_range_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if ipv6cidr_block is not None:
            pulumi.set(__self__, "ipv6cidr_block", ipv6cidr_block)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="byoipRangeId")
    def byoip_range_id(self) -> Optional[str]:
        return pulumi.get(self, "byoip_range_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="ipv6cidrBlock")
    def ipv6cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "ipv6cidr_block")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetByoipRangesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCaptureFilterFlowLogCaptureFilterRuleResult(dict):
    def __init__(__self__, *,
                 destination_cidr: Optional[str] = None,
                 flow_log_type: Optional[str] = None,
                 icmp_options: Optional[Sequence['outputs.GetCaptureFilterFlowLogCaptureFilterRuleIcmpOptionResult']] = None,
                 is_enabled: Optional[bool] = None,
                 priority: Optional[int] = None,
                 protocol: Optional[str] = None,
                 rule_action: Optional[str] = None,
                 sampling_rate: Optional[int] = None,
                 source_cidr: Optional[str] = None,
                 tcp_options: Optional[Sequence['outputs.GetCaptureFilterFlowLogCaptureFilterRuleTcpOptionResult']] = None,
                 udp_options: Optional[Sequence['outputs.GetCaptureFilterFlowLogCaptureFilterRuleUdpOptionResult']] = None):
        if destination_cidr is not None:
            pulumi.set(__self__, "destination_cidr", destination_cidr)
        if flow_log_type is not None:
            pulumi.set(__self__, "flow_log_type", flow_log_type)
        if icmp_options is not None:
            pulumi.set(__self__, "icmp_options", icmp_options)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_action is not None:
            pulumi.set(__self__, "rule_action", rule_action)
        if sampling_rate is not None:
            pulumi.set(__self__, "sampling_rate", sampling_rate)
        if source_cidr is not None:
            pulumi.set(__self__, "source_cidr", source_cidr)
        if tcp_options is not None:
            pulumi.set(__self__, "tcp_options", tcp_options)
        if udp_options is not None:
            pulumi.set(__self__, "udp_options", udp_options)

    @property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> Optional[str]:
        return pulumi.get(self, "destination_cidr")

    @property
    @pulumi.getter(name="flowLogType")
    def flow_log_type(self) -> Optional[str]:
        return pulumi.get(self, "flow_log_type")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> Optional[Sequence['outputs.GetCaptureFilterFlowLogCaptureFilterRuleIcmpOptionResult']]:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="ruleAction")
    def rule_action(self) -> Optional[str]:
        return pulumi.get(self, "rule_action")

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> Optional[int]:
        return pulumi.get(self, "sampling_rate")

    @property
    @pulumi.getter(name="sourceCidr")
    def source_cidr(self) -> Optional[str]:
        return pulumi.get(self, "source_cidr")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Optional[Sequence['outputs.GetCaptureFilterFlowLogCaptureFilterRuleTcpOptionResult']]:
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter(name="udpOptions")
    def udp_options(self) -> Optional[Sequence['outputs.GetCaptureFilterFlowLogCaptureFilterRuleUdpOptionResult']]:
        return pulumi.get(self, "udp_options")


@pulumi.output_type
class GetCaptureFilterFlowLogCaptureFilterRuleIcmpOptionResult(dict):
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 type: Optional[int] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[int]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCaptureFilterFlowLogCaptureFilterRuleTcpOptionResult(dict):
    def __init__(__self__, *,
                 destination_port_ranges: Optional[Sequence['outputs.GetCaptureFilterFlowLogCaptureFilterRuleTcpOptionDestinationPortRangeResult']] = None,
                 source_port_ranges: Optional[Sequence['outputs.GetCaptureFilterFlowLogCaptureFilterRuleTcpOptionSourcePortRangeResult']] = None):
        if destination_port_ranges is not None:
            pulumi.set(__self__, "destination_port_ranges", destination_port_ranges)
        if source_port_ranges is not None:
            pulumi.set(__self__, "source_port_ranges", source_port_ranges)

    @property
    @pulumi.getter(name="destinationPortRanges")
    def destination_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFilterFlowLogCaptureFilterRuleTcpOptionDestinationPortRangeResult']]:
        return pulumi.get(self, "destination_port_ranges")

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFilterFlowLogCaptureFilterRuleTcpOptionSourcePortRangeResult']]:
        return pulumi.get(self, "source_port_ranges")


@pulumi.output_type
class GetCaptureFilterFlowLogCaptureFilterRuleTcpOptionDestinationPortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFilterFlowLogCaptureFilterRuleTcpOptionSourcePortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFilterFlowLogCaptureFilterRuleUdpOptionResult(dict):
    def __init__(__self__, *,
                 destination_port_ranges: Optional[Sequence['outputs.GetCaptureFilterFlowLogCaptureFilterRuleUdpOptionDestinationPortRangeResult']] = None,
                 source_port_ranges: Optional[Sequence['outputs.GetCaptureFilterFlowLogCaptureFilterRuleUdpOptionSourcePortRangeResult']] = None):
        if destination_port_ranges is not None:
            pulumi.set(__self__, "destination_port_ranges", destination_port_ranges)
        if source_port_ranges is not None:
            pulumi.set(__self__, "source_port_ranges", source_port_ranges)

    @property
    @pulumi.getter(name="destinationPortRanges")
    def destination_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFilterFlowLogCaptureFilterRuleUdpOptionDestinationPortRangeResult']]:
        return pulumi.get(self, "destination_port_ranges")

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFilterFlowLogCaptureFilterRuleUdpOptionSourcePortRangeResult']]:
        return pulumi.get(self, "source_port_ranges")


@pulumi.output_type
class GetCaptureFilterFlowLogCaptureFilterRuleUdpOptionDestinationPortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFilterFlowLogCaptureFilterRuleUdpOptionSourcePortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFilterVtapCaptureFilterRuleResult(dict):
    def __init__(__self__, *,
                 destination_cidr: Optional[str] = None,
                 icmp_options: Optional[Sequence['outputs.GetCaptureFilterVtapCaptureFilterRuleIcmpOptionResult']] = None,
                 protocol: Optional[str] = None,
                 rule_action: Optional[str] = None,
                 source_cidr: Optional[str] = None,
                 tcp_options: Optional[Sequence['outputs.GetCaptureFilterVtapCaptureFilterRuleTcpOptionResult']] = None,
                 traffic_direction: Optional[str] = None,
                 udp_options: Optional[Sequence['outputs.GetCaptureFilterVtapCaptureFilterRuleUdpOptionResult']] = None):
        if destination_cidr is not None:
            pulumi.set(__self__, "destination_cidr", destination_cidr)
        if icmp_options is not None:
            pulumi.set(__self__, "icmp_options", icmp_options)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_action is not None:
            pulumi.set(__self__, "rule_action", rule_action)
        if source_cidr is not None:
            pulumi.set(__self__, "source_cidr", source_cidr)
        if tcp_options is not None:
            pulumi.set(__self__, "tcp_options", tcp_options)
        if traffic_direction is not None:
            pulumi.set(__self__, "traffic_direction", traffic_direction)
        if udp_options is not None:
            pulumi.set(__self__, "udp_options", udp_options)

    @property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> Optional[str]:
        return pulumi.get(self, "destination_cidr")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> Optional[Sequence['outputs.GetCaptureFilterVtapCaptureFilterRuleIcmpOptionResult']]:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="ruleAction")
    def rule_action(self) -> Optional[str]:
        return pulumi.get(self, "rule_action")

    @property
    @pulumi.getter(name="sourceCidr")
    def source_cidr(self) -> Optional[str]:
        return pulumi.get(self, "source_cidr")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Optional[Sequence['outputs.GetCaptureFilterVtapCaptureFilterRuleTcpOptionResult']]:
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter(name="trafficDirection")
    def traffic_direction(self) -> Optional[str]:
        return pulumi.get(self, "traffic_direction")

    @property
    @pulumi.getter(name="udpOptions")
    def udp_options(self) -> Optional[Sequence['outputs.GetCaptureFilterVtapCaptureFilterRuleUdpOptionResult']]:
        return pulumi.get(self, "udp_options")


@pulumi.output_type
class GetCaptureFilterVtapCaptureFilterRuleIcmpOptionResult(dict):
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 type: Optional[int] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[int]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCaptureFilterVtapCaptureFilterRuleTcpOptionResult(dict):
    def __init__(__self__, *,
                 destination_port_ranges: Optional[Sequence['outputs.GetCaptureFilterVtapCaptureFilterRuleTcpOptionDestinationPortRangeResult']] = None,
                 source_port_ranges: Optional[Sequence['outputs.GetCaptureFilterVtapCaptureFilterRuleTcpOptionSourcePortRangeResult']] = None):
        if destination_port_ranges is not None:
            pulumi.set(__self__, "destination_port_ranges", destination_port_ranges)
        if source_port_ranges is not None:
            pulumi.set(__self__, "source_port_ranges", source_port_ranges)

    @property
    @pulumi.getter(name="destinationPortRanges")
    def destination_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFilterVtapCaptureFilterRuleTcpOptionDestinationPortRangeResult']]:
        return pulumi.get(self, "destination_port_ranges")

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFilterVtapCaptureFilterRuleTcpOptionSourcePortRangeResult']]:
        return pulumi.get(self, "source_port_ranges")


@pulumi.output_type
class GetCaptureFilterVtapCaptureFilterRuleTcpOptionDestinationPortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFilterVtapCaptureFilterRuleTcpOptionSourcePortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFilterVtapCaptureFilterRuleUdpOptionResult(dict):
    def __init__(__self__, *,
                 destination_port_ranges: Optional[Sequence['outputs.GetCaptureFilterVtapCaptureFilterRuleUdpOptionDestinationPortRangeResult']] = None,
                 source_port_ranges: Optional[Sequence['outputs.GetCaptureFilterVtapCaptureFilterRuleUdpOptionSourcePortRangeResult']] = None):
        if destination_port_ranges is not None:
            pulumi.set(__self__, "destination_port_ranges", destination_port_ranges)
        if source_port_ranges is not None:
            pulumi.set(__self__, "source_port_ranges", source_port_ranges)

    @property
    @pulumi.getter(name="destinationPortRanges")
    def destination_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFilterVtapCaptureFilterRuleUdpOptionDestinationPortRangeResult']]:
        return pulumi.get(self, "destination_port_ranges")

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFilterVtapCaptureFilterRuleUdpOptionSourcePortRangeResult']]:
        return pulumi.get(self, "source_port_ranges")


@pulumi.output_type
class GetCaptureFilterVtapCaptureFilterRuleUdpOptionDestinationPortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFilterVtapCaptureFilterRuleUdpOptionSourcePortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 filter_type: Optional[str] = None,
                 flow_log_capture_filter_rules: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vtap_capture_filter_rules: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleResult']] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if flow_log_capture_filter_rules is not None:
            pulumi.set(__self__, "flow_log_capture_filter_rules", flow_log_capture_filter_rules)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vtap_capture_filter_rules is not None:
            pulumi.set(__self__, "vtap_capture_filter_rules", vtap_capture_filter_rules)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="flowLogCaptureFilterRules")
    def flow_log_capture_filter_rules(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleResult']]:
        return pulumi.get(self, "flow_log_capture_filter_rules")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vtapCaptureFilterRules")
    def vtap_capture_filter_rules(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleResult']]:
        return pulumi.get(self, "vtap_capture_filter_rules")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleResult(dict):
    def __init__(__self__, *,
                 destination_cidr: Optional[str] = None,
                 flow_log_type: Optional[str] = None,
                 icmp_options: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleIcmpOptionResult']] = None,
                 is_enabled: Optional[bool] = None,
                 priority: Optional[int] = None,
                 protocol: Optional[str] = None,
                 rule_action: Optional[str] = None,
                 sampling_rate: Optional[int] = None,
                 source_cidr: Optional[str] = None,
                 tcp_options: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionResult']] = None,
                 udp_options: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionResult']] = None):
        if destination_cidr is not None:
            pulumi.set(__self__, "destination_cidr", destination_cidr)
        if flow_log_type is not None:
            pulumi.set(__self__, "flow_log_type", flow_log_type)
        if icmp_options is not None:
            pulumi.set(__self__, "icmp_options", icmp_options)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_action is not None:
            pulumi.set(__self__, "rule_action", rule_action)
        if sampling_rate is not None:
            pulumi.set(__self__, "sampling_rate", sampling_rate)
        if source_cidr is not None:
            pulumi.set(__self__, "source_cidr", source_cidr)
        if tcp_options is not None:
            pulumi.set(__self__, "tcp_options", tcp_options)
        if udp_options is not None:
            pulumi.set(__self__, "udp_options", udp_options)

    @property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> Optional[str]:
        return pulumi.get(self, "destination_cidr")

    @property
    @pulumi.getter(name="flowLogType")
    def flow_log_type(self) -> Optional[str]:
        return pulumi.get(self, "flow_log_type")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleIcmpOptionResult']]:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="ruleAction")
    def rule_action(self) -> Optional[str]:
        return pulumi.get(self, "rule_action")

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> Optional[int]:
        return pulumi.get(self, "sampling_rate")

    @property
    @pulumi.getter(name="sourceCidr")
    def source_cidr(self) -> Optional[str]:
        return pulumi.get(self, "source_cidr")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionResult']]:
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter(name="udpOptions")
    def udp_options(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionResult']]:
        return pulumi.get(self, "udp_options")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleIcmpOptionResult(dict):
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 type: Optional[int] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[int]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionResult(dict):
    def __init__(__self__, *,
                 destination_port_ranges: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionDestinationPortRangeResult']] = None,
                 source_port_ranges: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionSourcePortRangeResult']] = None):
        if destination_port_ranges is not None:
            pulumi.set(__self__, "destination_port_ranges", destination_port_ranges)
        if source_port_ranges is not None:
            pulumi.set(__self__, "source_port_ranges", source_port_ranges)

    @property
    @pulumi.getter(name="destinationPortRanges")
    def destination_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionDestinationPortRangeResult']]:
        return pulumi.get(self, "destination_port_ranges")

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionSourcePortRangeResult']]:
        return pulumi.get(self, "source_port_ranges")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionDestinationPortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleTcpOptionSourcePortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionResult(dict):
    def __init__(__self__, *,
                 destination_port_ranges: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionDestinationPortRangeResult']] = None,
                 source_port_ranges: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionSourcePortRangeResult']] = None):
        if destination_port_ranges is not None:
            pulumi.set(__self__, "destination_port_ranges", destination_port_ranges)
        if source_port_ranges is not None:
            pulumi.set(__self__, "source_port_ranges", source_port_ranges)

    @property
    @pulumi.getter(name="destinationPortRanges")
    def destination_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionDestinationPortRangeResult']]:
        return pulumi.get(self, "destination_port_ranges")

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionSourcePortRangeResult']]:
        return pulumi.get(self, "source_port_ranges")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionDestinationPortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterFlowLogCaptureFilterRuleUdpOptionSourcePortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleResult(dict):
    def __init__(__self__, *,
                 destination_cidr: Optional[str] = None,
                 icmp_options: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleIcmpOptionResult']] = None,
                 protocol: Optional[str] = None,
                 rule_action: Optional[str] = None,
                 source_cidr: Optional[str] = None,
                 tcp_options: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionResult']] = None,
                 traffic_direction: Optional[str] = None,
                 udp_options: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionResult']] = None):
        if destination_cidr is not None:
            pulumi.set(__self__, "destination_cidr", destination_cidr)
        if icmp_options is not None:
            pulumi.set(__self__, "icmp_options", icmp_options)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_action is not None:
            pulumi.set(__self__, "rule_action", rule_action)
        if source_cidr is not None:
            pulumi.set(__self__, "source_cidr", source_cidr)
        if tcp_options is not None:
            pulumi.set(__self__, "tcp_options", tcp_options)
        if traffic_direction is not None:
            pulumi.set(__self__, "traffic_direction", traffic_direction)
        if udp_options is not None:
            pulumi.set(__self__, "udp_options", udp_options)

    @property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> Optional[str]:
        return pulumi.get(self, "destination_cidr")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleIcmpOptionResult']]:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="ruleAction")
    def rule_action(self) -> Optional[str]:
        return pulumi.get(self, "rule_action")

    @property
    @pulumi.getter(name="sourceCidr")
    def source_cidr(self) -> Optional[str]:
        return pulumi.get(self, "source_cidr")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionResult']]:
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter(name="trafficDirection")
    def traffic_direction(self) -> Optional[str]:
        return pulumi.get(self, "traffic_direction")

    @property
    @pulumi.getter(name="udpOptions")
    def udp_options(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionResult']]:
        return pulumi.get(self, "udp_options")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleIcmpOptionResult(dict):
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 type: Optional[int] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[int]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionResult(dict):
    def __init__(__self__, *,
                 destination_port_ranges: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionDestinationPortRangeResult']] = None,
                 source_port_ranges: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionSourcePortRangeResult']] = None):
        if destination_port_ranges is not None:
            pulumi.set(__self__, "destination_port_ranges", destination_port_ranges)
        if source_port_ranges is not None:
            pulumi.set(__self__, "source_port_ranges", source_port_ranges)

    @property
    @pulumi.getter(name="destinationPortRanges")
    def destination_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionDestinationPortRangeResult']]:
        return pulumi.get(self, "destination_port_ranges")

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionSourcePortRangeResult']]:
        return pulumi.get(self, "source_port_ranges")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionDestinationPortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionSourcePortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionResult(dict):
    def __init__(__self__, *,
                 destination_port_ranges: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionDestinationPortRangeResult']] = None,
                 source_port_ranges: Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionSourcePortRangeResult']] = None):
        if destination_port_ranges is not None:
            pulumi.set(__self__, "destination_port_ranges", destination_port_ranges)
        if source_port_ranges is not None:
            pulumi.set(__self__, "source_port_ranges", source_port_ranges)

    @property
    @pulumi.getter(name="destinationPortRanges")
    def destination_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionDestinationPortRangeResult']]:
        return pulumi.get(self, "destination_port_ranges")

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> Optional[Sequence['outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionSourcePortRangeResult']]:
        return pulumi.get(self, "source_port_ranges")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionDestinationPortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionSourcePortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetCaptureFiltersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetClusterNetworkClusterConfigurationResult(dict):
    def __init__(__self__, *,
                 hpc_island_id: Optional[str] = None,
                 network_block_ids: Optional[Sequence[str]] = None):
        if hpc_island_id is not None:
            pulumi.set(__self__, "hpc_island_id", hpc_island_id)
        if network_block_ids is not None:
            pulumi.set(__self__, "network_block_ids", network_block_ids)

    @property
    @pulumi.getter(name="hpcIslandId")
    def hpc_island_id(self) -> Optional[str]:
        return pulumi.get(self, "hpc_island_id")

    @property
    @pulumi.getter(name="networkBlockIds")
    def network_block_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_block_ids")


@pulumi.output_type
class GetClusterNetworkInstancePoolResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 instance_configuration_id: Optional[str] = None,
                 instance_display_name_formatter: Optional[str] = None,
                 instance_hostname_formatter: Optional[str] = None,
                 load_balancers: Optional[Sequence['outputs.GetClusterNetworkInstancePoolLoadBalancerResult']] = None,
                 placement_configurations: Optional[Sequence['outputs.GetClusterNetworkInstancePoolPlacementConfigurationResult']] = None,
                 size: Optional[int] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_display_name_formatter is not None:
            pulumi.set(__self__, "instance_display_name_formatter", instance_display_name_formatter)
        if instance_hostname_formatter is not None:
            pulumi.set(__self__, "instance_hostname_formatter", instance_hostname_formatter)
        if load_balancers is not None:
            pulumi.set(__self__, "load_balancers", load_balancers)
        if placement_configurations is not None:
            pulumi.set(__self__, "placement_configurations", placement_configurations)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter(name="instanceDisplayNameFormatter")
    def instance_display_name_formatter(self) -> Optional[str]:
        return pulumi.get(self, "instance_display_name_formatter")

    @property
    @pulumi.getter(name="instanceHostnameFormatter")
    def instance_hostname_formatter(self) -> Optional[str]:
        return pulumi.get(self, "instance_hostname_formatter")

    @property
    @pulumi.getter(name="loadBalancers")
    def load_balancers(self) -> Optional[Sequence['outputs.GetClusterNetworkInstancePoolLoadBalancerResult']]:
        return pulumi.get(self, "load_balancers")

    @property
    @pulumi.getter(name="placementConfigurations")
    def placement_configurations(self) -> Optional[Sequence['outputs.GetClusterNetworkInstancePoolPlacementConfigurationResult']]:
        return pulumi.get(self, "placement_configurations")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetClusterNetworkInstancePoolLoadBalancerResult(dict):
    def __init__(__self__, *,
                 backend_set_name: Optional[str] = None,
                 id: Optional[str] = None,
                 instance_pool_id: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 port: Optional[int] = None,
                 state: Optional[str] = None,
                 vnic_selection: Optional[str] = None):
        if backend_set_name is not None:
            pulumi.set(__self__, "backend_set_name", backend_set_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_pool_id is not None:
            pulumi.set(__self__, "instance_pool_id", instance_pool_id)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vnic_selection is not None:
            pulumi.set(__self__, "vnic_selection", vnic_selection)

    @property
    @pulumi.getter(name="backendSetName")
    def backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "backend_set_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vnicSelection")
    def vnic_selection(self) -> Optional[str]:
        return pulumi.get(self, "vnic_selection")


@pulumi.output_type
class GetClusterNetworkInstancePoolPlacementConfigurationResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 fault_domains: Optional[Sequence[str]] = None,
                 primary_subnet_id: Optional[str] = None,
                 primary_vnic_subnets: Optional[Sequence['outputs.GetClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetResult']] = None,
                 secondary_vnic_subnets: Optional[Sequence['outputs.GetClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetResult']] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if fault_domains is not None:
            pulumi.set(__self__, "fault_domains", fault_domains)
        if primary_subnet_id is not None:
            pulumi.set(__self__, "primary_subnet_id", primary_subnet_id)
        if primary_vnic_subnets is not None:
            pulumi.set(__self__, "primary_vnic_subnets", primary_vnic_subnets)
        if secondary_vnic_subnets is not None:
            pulumi.set(__self__, "secondary_vnic_subnets", secondary_vnic_subnets)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="faultDomains")
    def fault_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "fault_domains")

    @property
    @pulumi.getter(name="primarySubnetId")
    def primary_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "primary_subnet_id")

    @property
    @pulumi.getter(name="primaryVnicSubnets")
    def primary_vnic_subnets(self) -> Optional[Sequence['outputs.GetClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetResult']]:
        return pulumi.get(self, "primary_vnic_subnets")

    @property
    @pulumi.getter(name="secondaryVnicSubnets")
    def secondary_vnic_subnets(self) -> Optional[Sequence['outputs.GetClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetResult']]:
        return pulumi.get(self, "secondary_vnic_subnets")


@pulumi.output_type
class GetClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetResult(dict):
    def __init__(__self__, *,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 is_assign_ipv6ip: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 is_assign_ipv6ip: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetClusterNetworkInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetClusterNetworkInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 id: Optional[str] = None,
                 instance_configuration_id: Optional[str] = None,
                 load_balancer_backends: Optional[Sequence['outputs.GetClusterNetworkInstancesInstanceLoadBalancerBackendResult']] = None,
                 region: Optional[str] = None,
                 shape: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if load_balancer_backends is not None:
            pulumi.set(__self__, "load_balancer_backends", load_balancer_backends)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter(name="loadBalancerBackends")
    def load_balancer_backends(self) -> Optional[Sequence['outputs.GetClusterNetworkInstancesInstanceLoadBalancerBackendResult']]:
        return pulumi.get(self, "load_balancer_backends")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetClusterNetworkInstancesInstanceLoadBalancerBackendResult(dict):
    def __init__(__self__, *,
                 backend_health_status: Optional[str] = None,
                 backend_name: Optional[str] = None,
                 backend_set_name: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 state: Optional[str] = None):
        if backend_health_status is not None:
            pulumi.set(__self__, "backend_health_status", backend_health_status)
        if backend_name is not None:
            pulumi.set(__self__, "backend_name", backend_name)
        if backend_set_name is not None:
            pulumi.set(__self__, "backend_set_name", backend_set_name)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendHealthStatus")
    def backend_health_status(self) -> Optional[str]:
        return pulumi.get(self, "backend_health_status")

    @property
    @pulumi.getter(name="backendName")
    def backend_name(self) -> Optional[str]:
        return pulumi.get(self, "backend_name")

    @property
    @pulumi.getter(name="backendSetName")
    def backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "backend_set_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetClusterNetworkPlacementConfigurationResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 placement_constraint: Optional[str] = None,
                 primary_subnet_id: Optional[str] = None,
                 primary_vnic_subnets: Optional[Sequence['outputs.GetClusterNetworkPlacementConfigurationPrimaryVnicSubnetResult']] = None,
                 secondary_vnic_subnets: Optional[Sequence['outputs.GetClusterNetworkPlacementConfigurationSecondaryVnicSubnetResult']] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if placement_constraint is not None:
            pulumi.set(__self__, "placement_constraint", placement_constraint)
        if primary_subnet_id is not None:
            pulumi.set(__self__, "primary_subnet_id", primary_subnet_id)
        if primary_vnic_subnets is not None:
            pulumi.set(__self__, "primary_vnic_subnets", primary_vnic_subnets)
        if secondary_vnic_subnets is not None:
            pulumi.set(__self__, "secondary_vnic_subnets", secondary_vnic_subnets)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="placementConstraint")
    def placement_constraint(self) -> Optional[str]:
        return pulumi.get(self, "placement_constraint")

    @property
    @pulumi.getter(name="primarySubnetId")
    def primary_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "primary_subnet_id")

    @property
    @pulumi.getter(name="primaryVnicSubnets")
    def primary_vnic_subnets(self) -> Optional[Sequence['outputs.GetClusterNetworkPlacementConfigurationPrimaryVnicSubnetResult']]:
        return pulumi.get(self, "primary_vnic_subnets")

    @property
    @pulumi.getter(name="secondaryVnicSubnets")
    def secondary_vnic_subnets(self) -> Optional[Sequence['outputs.GetClusterNetworkPlacementConfigurationSecondaryVnicSubnetResult']]:
        return pulumi.get(self, "secondary_vnic_subnets")


@pulumi.output_type
class GetClusterNetworkPlacementConfigurationPrimaryVnicSubnetResult(dict):
    def __init__(__self__, *,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetClusterNetworkPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 is_assign_ipv6ip: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetClusterNetworkPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetClusterNetworkPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetClusterNetworkPlacementConfigurationSecondaryVnicSubnetResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 is_assign_ipv6ip: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetClusterNetworksClusterNetworkResult(dict):
    def __init__(__self__, *,
                 cluster_configurations: Optional[Sequence['outputs.GetClusterNetworksClusterNetworkClusterConfigurationResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hpc_island_id: Optional[str] = None,
                 id: Optional[str] = None,
                 instance_pools: Optional[Sequence['outputs.GetClusterNetworksClusterNetworkInstancePoolResult']] = None,
                 network_block_ids: Optional[Sequence[str]] = None,
                 placement_configurations: Optional[Sequence['outputs.GetClusterNetworksClusterNetworkPlacementConfigurationResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if cluster_configurations is not None:
            pulumi.set(__self__, "cluster_configurations", cluster_configurations)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hpc_island_id is not None:
            pulumi.set(__self__, "hpc_island_id", hpc_island_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_pools is not None:
            pulumi.set(__self__, "instance_pools", instance_pools)
        if network_block_ids is not None:
            pulumi.set(__self__, "network_block_ids", network_block_ids)
        if placement_configurations is not None:
            pulumi.set(__self__, "placement_configurations", placement_configurations)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="clusterConfigurations")
    def cluster_configurations(self) -> Optional[Sequence['outputs.GetClusterNetworksClusterNetworkClusterConfigurationResult']]:
        return pulumi.get(self, "cluster_configurations")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hpcIslandId")
    def hpc_island_id(self) -> Optional[str]:
        return pulumi.get(self, "hpc_island_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instancePools")
    def instance_pools(self) -> Optional[Sequence['outputs.GetClusterNetworksClusterNetworkInstancePoolResult']]:
        return pulumi.get(self, "instance_pools")

    @property
    @pulumi.getter(name="networkBlockIds")
    def network_block_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_block_ids")

    @property
    @pulumi.getter(name="placementConfigurations")
    def placement_configurations(self) -> Optional[Sequence['outputs.GetClusterNetworksClusterNetworkPlacementConfigurationResult']]:
        return pulumi.get(self, "placement_configurations")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetClusterNetworksClusterNetworkClusterConfigurationResult(dict):
    def __init__(__self__, *,
                 hpc_island_id: Optional[str] = None,
                 network_block_ids: Optional[Sequence[str]] = None):
        if hpc_island_id is not None:
            pulumi.set(__self__, "hpc_island_id", hpc_island_id)
        if network_block_ids is not None:
            pulumi.set(__self__, "network_block_ids", network_block_ids)

    @property
    @pulumi.getter(name="hpcIslandId")
    def hpc_island_id(self) -> Optional[str]:
        return pulumi.get(self, "hpc_island_id")

    @property
    @pulumi.getter(name="networkBlockIds")
    def network_block_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_block_ids")


@pulumi.output_type
class GetClusterNetworksClusterNetworkInstancePoolResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 instance_configuration_id: Optional[str] = None,
                 instance_display_name_formatter: Optional[str] = None,
                 instance_hostname_formatter: Optional[str] = None,
                 load_balancers: Optional[Sequence['outputs.GetClusterNetworksClusterNetworkInstancePoolLoadBalancerResult']] = None,
                 placement_configurations: Optional[Sequence['outputs.GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationResult']] = None,
                 size: Optional[int] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_display_name_formatter is not None:
            pulumi.set(__self__, "instance_display_name_formatter", instance_display_name_formatter)
        if instance_hostname_formatter is not None:
            pulumi.set(__self__, "instance_hostname_formatter", instance_hostname_formatter)
        if load_balancers is not None:
            pulumi.set(__self__, "load_balancers", load_balancers)
        if placement_configurations is not None:
            pulumi.set(__self__, "placement_configurations", placement_configurations)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter(name="instanceDisplayNameFormatter")
    def instance_display_name_formatter(self) -> Optional[str]:
        return pulumi.get(self, "instance_display_name_formatter")

    @property
    @pulumi.getter(name="instanceHostnameFormatter")
    def instance_hostname_formatter(self) -> Optional[str]:
        return pulumi.get(self, "instance_hostname_formatter")

    @property
    @pulumi.getter(name="loadBalancers")
    def load_balancers(self) -> Optional[Sequence['outputs.GetClusterNetworksClusterNetworkInstancePoolLoadBalancerResult']]:
        return pulumi.get(self, "load_balancers")

    @property
    @pulumi.getter(name="placementConfigurations")
    def placement_configurations(self) -> Optional[Sequence['outputs.GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationResult']]:
        return pulumi.get(self, "placement_configurations")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetClusterNetworksClusterNetworkInstancePoolLoadBalancerResult(dict):
    def __init__(__self__, *,
                 backend_set_name: Optional[str] = None,
                 id: Optional[str] = None,
                 instance_pool_id: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 port: Optional[int] = None,
                 state: Optional[str] = None,
                 vnic_selection: Optional[str] = None):
        if backend_set_name is not None:
            pulumi.set(__self__, "backend_set_name", backend_set_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_pool_id is not None:
            pulumi.set(__self__, "instance_pool_id", instance_pool_id)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vnic_selection is not None:
            pulumi.set(__self__, "vnic_selection", vnic_selection)

    @property
    @pulumi.getter(name="backendSetName")
    def backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "backend_set_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vnicSelection")
    def vnic_selection(self) -> Optional[str]:
        return pulumi.get(self, "vnic_selection")


@pulumi.output_type
class GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 fault_domains: Optional[Sequence[str]] = None,
                 primary_subnet_id: Optional[str] = None,
                 primary_vnic_subnets: Optional[Sequence['outputs.GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetResult']] = None,
                 secondary_vnic_subnets: Optional[Sequence['outputs.GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetResult']] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if fault_domains is not None:
            pulumi.set(__self__, "fault_domains", fault_domains)
        if primary_subnet_id is not None:
            pulumi.set(__self__, "primary_subnet_id", primary_subnet_id)
        if primary_vnic_subnets is not None:
            pulumi.set(__self__, "primary_vnic_subnets", primary_vnic_subnets)
        if secondary_vnic_subnets is not None:
            pulumi.set(__self__, "secondary_vnic_subnets", secondary_vnic_subnets)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="faultDomains")
    def fault_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "fault_domains")

    @property
    @pulumi.getter(name="primarySubnetId")
    def primary_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "primary_subnet_id")

    @property
    @pulumi.getter(name="primaryVnicSubnets")
    def primary_vnic_subnets(self) -> Optional[Sequence['outputs.GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetResult']]:
        return pulumi.get(self, "primary_vnic_subnets")

    @property
    @pulumi.getter(name="secondaryVnicSubnets")
    def secondary_vnic_subnets(self) -> Optional[Sequence['outputs.GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetResult']]:
        return pulumi.get(self, "secondary_vnic_subnets")


@pulumi.output_type
class GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetResult(dict):
    def __init__(__self__, *,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 is_assign_ipv6ip: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 is_assign_ipv6ip: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetClusterNetworksClusterNetworkInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetClusterNetworksClusterNetworkPlacementConfigurationResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 placement_constraint: Optional[str] = None,
                 primary_subnet_id: Optional[str] = None,
                 primary_vnic_subnets: Optional[Sequence['outputs.GetClusterNetworksClusterNetworkPlacementConfigurationPrimaryVnicSubnetResult']] = None,
                 secondary_vnic_subnets: Optional[Sequence['outputs.GetClusterNetworksClusterNetworkPlacementConfigurationSecondaryVnicSubnetResult']] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if placement_constraint is not None:
            pulumi.set(__self__, "placement_constraint", placement_constraint)
        if primary_subnet_id is not None:
            pulumi.set(__self__, "primary_subnet_id", primary_subnet_id)
        if primary_vnic_subnets is not None:
            pulumi.set(__self__, "primary_vnic_subnets", primary_vnic_subnets)
        if secondary_vnic_subnets is not None:
            pulumi.set(__self__, "secondary_vnic_subnets", secondary_vnic_subnets)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="placementConstraint")
    def placement_constraint(self) -> Optional[str]:
        return pulumi.get(self, "placement_constraint")

    @property
    @pulumi.getter(name="primarySubnetId")
    def primary_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "primary_subnet_id")

    @property
    @pulumi.getter(name="primaryVnicSubnets")
    def primary_vnic_subnets(self) -> Optional[Sequence['outputs.GetClusterNetworksClusterNetworkPlacementConfigurationPrimaryVnicSubnetResult']]:
        return pulumi.get(self, "primary_vnic_subnets")

    @property
    @pulumi.getter(name="secondaryVnicSubnets")
    def secondary_vnic_subnets(self) -> Optional[Sequence['outputs.GetClusterNetworksClusterNetworkPlacementConfigurationSecondaryVnicSubnetResult']]:
        return pulumi.get(self, "secondary_vnic_subnets")


@pulumi.output_type
class GetClusterNetworksClusterNetworkPlacementConfigurationPrimaryVnicSubnetResult(dict):
    def __init__(__self__, *,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetClusterNetworksClusterNetworkPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 is_assign_ipv6ip: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetClusterNetworksClusterNetworkPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetClusterNetworksClusterNetworkPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetClusterNetworksClusterNetworkPlacementConfigurationSecondaryVnicSubnetResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetClusterNetworksClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 is_assign_ipv6ip: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetClusterNetworksClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetClusterNetworksClusterNetworkPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetClusterNetworksFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetComputeCapacityReservationInstanceReservationConfigResult(dict):
    def __init__(__self__, *,
                 cluster_configs: Optional[Sequence['outputs.GetComputeCapacityReservationInstanceReservationConfigClusterConfigResult']] = None,
                 fault_domain: Optional[str] = None,
                 instance_shape: Optional[str] = None,
                 instance_shape_configs: Optional[Sequence['outputs.GetComputeCapacityReservationInstanceReservationConfigInstanceShapeConfigResult']] = None,
                 reserved_count: Optional[str] = None,
                 used_count: Optional[str] = None):
        if cluster_configs is not None:
            pulumi.set(__self__, "cluster_configs", cluster_configs)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if instance_shape is not None:
            pulumi.set(__self__, "instance_shape", instance_shape)
        if instance_shape_configs is not None:
            pulumi.set(__self__, "instance_shape_configs", instance_shape_configs)
        if reserved_count is not None:
            pulumi.set(__self__, "reserved_count", reserved_count)
        if used_count is not None:
            pulumi.set(__self__, "used_count", used_count)

    @property
    @pulumi.getter(name="clusterConfigs")
    def cluster_configs(self) -> Optional[Sequence['outputs.GetComputeCapacityReservationInstanceReservationConfigClusterConfigResult']]:
        return pulumi.get(self, "cluster_configs")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="instanceShape")
    def instance_shape(self) -> Optional[str]:
        return pulumi.get(self, "instance_shape")

    @property
    @pulumi.getter(name="instanceShapeConfigs")
    def instance_shape_configs(self) -> Optional[Sequence['outputs.GetComputeCapacityReservationInstanceReservationConfigInstanceShapeConfigResult']]:
        return pulumi.get(self, "instance_shape_configs")

    @property
    @pulumi.getter(name="reservedCount")
    def reserved_count(self) -> Optional[str]:
        return pulumi.get(self, "reserved_count")

    @property
    @pulumi.getter(name="usedCount")
    def used_count(self) -> Optional[str]:
        return pulumi.get(self, "used_count")


@pulumi.output_type
class GetComputeCapacityReservationInstanceReservationConfigClusterConfigResult(dict):
    def __init__(__self__, *,
                 hpc_island_id: Optional[str] = None,
                 network_block_ids: Optional[Sequence[str]] = None):
        if hpc_island_id is not None:
            pulumi.set(__self__, "hpc_island_id", hpc_island_id)
        if network_block_ids is not None:
            pulumi.set(__self__, "network_block_ids", network_block_ids)

    @property
    @pulumi.getter(name="hpcIslandId")
    def hpc_island_id(self) -> Optional[str]:
        return pulumi.get(self, "hpc_island_id")

    @property
    @pulumi.getter(name="networkBlockIds")
    def network_block_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_block_ids")


@pulumi.output_type
class GetComputeCapacityReservationInstanceReservationConfigInstanceShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetComputeCapacityReservationInstanceShapesComputeCapacityReservationInstanceShapeResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 instance_shape: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if instance_shape is not None:
            pulumi.set(__self__, "instance_shape", instance_shape)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="instanceShape")
    def instance_shape(self) -> Optional[str]:
        return pulumi.get(self, "instance_shape")


@pulumi.output_type
class GetComputeCapacityReservationInstanceShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetComputeCapacityReservationInstancesCapacityReservationInstanceResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 id: Optional[str] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetComputeCapacityReservationInstancesCapacityReservationInstanceShapeConfigResult']] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetComputeCapacityReservationInstancesCapacityReservationInstanceShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")


@pulumi.output_type
class GetComputeCapacityReservationInstancesCapacityReservationInstanceShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetComputeCapacityReservationInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetComputeCapacityReservationsComputeCapacityReservationResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 instance_reservation_configs: Optional[Sequence['outputs.GetComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigResult']] = None,
                 is_default_reservation: Optional[bool] = None,
                 reserved_instance_count: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 used_instance_count: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_reservation_configs is not None:
            pulumi.set(__self__, "instance_reservation_configs", instance_reservation_configs)
        if is_default_reservation is not None:
            pulumi.set(__self__, "is_default_reservation", is_default_reservation)
        if reserved_instance_count is not None:
            pulumi.set(__self__, "reserved_instance_count", reserved_instance_count)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if used_instance_count is not None:
            pulumi.set(__self__, "used_instance_count", used_instance_count)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceReservationConfigs")
    def instance_reservation_configs(self) -> Optional[Sequence['outputs.GetComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigResult']]:
        return pulumi.get(self, "instance_reservation_configs")

    @property
    @pulumi.getter(name="isDefaultReservation")
    def is_default_reservation(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_reservation")

    @property
    @pulumi.getter(name="reservedInstanceCount")
    def reserved_instance_count(self) -> Optional[str]:
        return pulumi.get(self, "reserved_instance_count")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="usedInstanceCount")
    def used_instance_count(self) -> Optional[str]:
        return pulumi.get(self, "used_instance_count")


@pulumi.output_type
class GetComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigResult(dict):
    def __init__(__self__, *,
                 cluster_configs: Optional[Sequence['outputs.GetComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigClusterConfigResult']] = None,
                 fault_domain: Optional[str] = None,
                 instance_shape: Optional[str] = None,
                 instance_shape_configs: Optional[Sequence['outputs.GetComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigInstanceShapeConfigResult']] = None,
                 reserved_count: Optional[str] = None,
                 used_count: Optional[str] = None):
        if cluster_configs is not None:
            pulumi.set(__self__, "cluster_configs", cluster_configs)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if instance_shape is not None:
            pulumi.set(__self__, "instance_shape", instance_shape)
        if instance_shape_configs is not None:
            pulumi.set(__self__, "instance_shape_configs", instance_shape_configs)
        if reserved_count is not None:
            pulumi.set(__self__, "reserved_count", reserved_count)
        if used_count is not None:
            pulumi.set(__self__, "used_count", used_count)

    @property
    @pulumi.getter(name="clusterConfigs")
    def cluster_configs(self) -> Optional[Sequence['outputs.GetComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigClusterConfigResult']]:
        return pulumi.get(self, "cluster_configs")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="instanceShape")
    def instance_shape(self) -> Optional[str]:
        return pulumi.get(self, "instance_shape")

    @property
    @pulumi.getter(name="instanceShapeConfigs")
    def instance_shape_configs(self) -> Optional[Sequence['outputs.GetComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigInstanceShapeConfigResult']]:
        return pulumi.get(self, "instance_shape_configs")

    @property
    @pulumi.getter(name="reservedCount")
    def reserved_count(self) -> Optional[str]:
        return pulumi.get(self, "reserved_count")

    @property
    @pulumi.getter(name="usedCount")
    def used_count(self) -> Optional[str]:
        return pulumi.get(self, "used_count")


@pulumi.output_type
class GetComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigClusterConfigResult(dict):
    def __init__(__self__, *,
                 hpc_island_id: Optional[str] = None,
                 network_block_ids: Optional[Sequence[str]] = None):
        if hpc_island_id is not None:
            pulumi.set(__self__, "hpc_island_id", hpc_island_id)
        if network_block_ids is not None:
            pulumi.set(__self__, "network_block_ids", network_block_ids)

    @property
    @pulumi.getter(name="hpcIslandId")
    def hpc_island_id(self) -> Optional[str]:
        return pulumi.get(self, "hpc_island_id")

    @property
    @pulumi.getter(name="networkBlockIds")
    def network_block_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_block_ids")


@pulumi.output_type
class GetComputeCapacityReservationsComputeCapacityReservationInstanceReservationConfigInstanceShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetComputeCapacityReservationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetComputeClustersComputeClusterCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetComputeClustersComputeClusterCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetComputeClustersComputeClusterCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetComputeClustersComputeClusterCollectionItemResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetComputeClustersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetComputeGlobalImageCapabilitySchemasComputeGlobalImageCapabilitySchemaResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 current_version_name: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if current_version_name is not None:
            pulumi.set(__self__, "current_version_name", current_version_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="currentVersionName")
    def current_version_name(self) -> Optional[str]:
        return pulumi.get(self, "current_version_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetComputeGlobalImageCapabilitySchemasFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetComputeGlobalImageCapabilitySchemasVersionsComputeGlobalImageCapabilitySchemaVersionResult(dict):
    def __init__(__self__, *,
                 compute_global_image_capability_schema_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 name: Optional[str] = None,
                 schema_data: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None):
        if compute_global_image_capability_schema_id is not None:
            pulumi.set(__self__, "compute_global_image_capability_schema_id", compute_global_image_capability_schema_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schema_data is not None:
            pulumi.set(__self__, "schema_data", schema_data)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="computeGlobalImageCapabilitySchemaId")
    def compute_global_image_capability_schema_id(self) -> Optional[str]:
        return pulumi.get(self, "compute_global_image_capability_schema_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="schemaData")
    def schema_data(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "schema_data")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetComputeGlobalImageCapabilitySchemasVersionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetComputeImageCapabilitySchemasComputeImageCapabilitySchemaResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 compute_global_image_capability_schema_id: Optional[str] = None,
                 compute_global_image_capability_schema_version_name: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 image_id: Optional[str] = None,
                 schema_data: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compute_global_image_capability_schema_id is not None:
            pulumi.set(__self__, "compute_global_image_capability_schema_id", compute_global_image_capability_schema_id)
        if compute_global_image_capability_schema_version_name is not None:
            pulumi.set(__self__, "compute_global_image_capability_schema_version_name", compute_global_image_capability_schema_version_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if schema_data is not None:
            pulumi.set(__self__, "schema_data", schema_data)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeGlobalImageCapabilitySchemaId")
    def compute_global_image_capability_schema_id(self) -> Optional[str]:
        return pulumi.get(self, "compute_global_image_capability_schema_id")

    @property
    @pulumi.getter(name="computeGlobalImageCapabilitySchemaVersionName")
    def compute_global_image_capability_schema_version_name(self) -> Optional[str]:
        return pulumi.get(self, "compute_global_image_capability_schema_version_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="schemaData")
    def schema_data(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "schema_data")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetComputeImageCapabilitySchemasFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetConsoleHistoriesConsoleHistoryResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetConsoleHistoriesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCpeDeviceShapeCpeDeviceInfoResult(dict):
    def __init__(__self__, *,
                 platform_software_version: Optional[str] = None,
                 vendor: Optional[str] = None):
        if platform_software_version is not None:
            pulumi.set(__self__, "platform_software_version", platform_software_version)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="platformSoftwareVersion")
    def platform_software_version(self) -> Optional[str]:
        return pulumi.get(self, "platform_software_version")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetCpeDeviceShapeParameterResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 explanation: Optional[str] = None,
                 key: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if explanation is not None:
            pulumi.set(__self__, "explanation", explanation)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def explanation(self) -> Optional[str]:
        return pulumi.get(self, "explanation")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class GetCpeDeviceShapesCpeDeviceShapeResult(dict):
    def __init__(__self__, *,
                 cpe_device_infos: Optional[Sequence['outputs.GetCpeDeviceShapesCpeDeviceShapeCpeDeviceInfoResult']] = None,
                 cpe_device_shape_id: Optional[str] = None,
                 template: Optional[str] = None):
        if cpe_device_infos is not None:
            pulumi.set(__self__, "cpe_device_infos", cpe_device_infos)
        if cpe_device_shape_id is not None:
            pulumi.set(__self__, "cpe_device_shape_id", cpe_device_shape_id)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="cpeDeviceInfos")
    def cpe_device_infos(self) -> Optional[Sequence['outputs.GetCpeDeviceShapesCpeDeviceShapeCpeDeviceInfoResult']]:
        return pulumi.get(self, "cpe_device_infos")

    @property
    @pulumi.getter(name="cpeDeviceShapeId")
    def cpe_device_shape_id(self) -> Optional[str]:
        return pulumi.get(self, "cpe_device_shape_id")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        return pulumi.get(self, "template")


@pulumi.output_type
class GetCpeDeviceShapesCpeDeviceShapeCpeDeviceInfoResult(dict):
    def __init__(__self__, *,
                 platform_software_version: Optional[str] = None,
                 vendor: Optional[str] = None):
        if platform_software_version is not None:
            pulumi.set(__self__, "platform_software_version", platform_software_version)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="platformSoftwareVersion")
    def platform_software_version(self) -> Optional[str]:
        return pulumi.get(self, "platform_software_version")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetCpeDeviceShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCpesCpeResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 cpe_device_shape_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 is_private: Optional[bool] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if cpe_device_shape_id is not None:
            pulumi.set(__self__, "cpe_device_shape_id", cpe_device_shape_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_private is not None:
            pulumi.set(__self__, "is_private", is_private)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="cpeDeviceShapeId")
    def cpe_device_shape_id(self) -> Optional[str]:
        return pulumi.get(self, "cpe_device_shape_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isPrivate")
    def is_private(self) -> Optional[bool]:
        return pulumi.get(self, "is_private")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetCpesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCrossConnectGroupMacsecPropertyResult(dict):
    def __init__(__self__, *,
                 encryption_cipher: Optional[str] = None,
                 is_unprotected_traffic_allowed: Optional[bool] = None,
                 primary_keys: Optional[Sequence['outputs.GetCrossConnectGroupMacsecPropertyPrimaryKeyResult']] = None,
                 state: Optional[str] = None):
        if encryption_cipher is not None:
            pulumi.set(__self__, "encryption_cipher", encryption_cipher)
        if is_unprotected_traffic_allowed is not None:
            pulumi.set(__self__, "is_unprotected_traffic_allowed", is_unprotected_traffic_allowed)
        if primary_keys is not None:
            pulumi.set(__self__, "primary_keys", primary_keys)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="encryptionCipher")
    def encryption_cipher(self) -> Optional[str]:
        return pulumi.get(self, "encryption_cipher")

    @property
    @pulumi.getter(name="isUnprotectedTrafficAllowed")
    def is_unprotected_traffic_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_unprotected_traffic_allowed")

    @property
    @pulumi.getter(name="primaryKeys")
    def primary_keys(self) -> Optional[Sequence['outputs.GetCrossConnectGroupMacsecPropertyPrimaryKeyResult']]:
        return pulumi.get(self, "primary_keys")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetCrossConnectGroupMacsecPropertyPrimaryKeyResult(dict):
    def __init__(__self__, *,
                 connectivity_association_key_secret_id: Optional[str] = None,
                 connectivity_association_key_secret_version: Optional[str] = None,
                 connectivity_association_name_secret_id: Optional[str] = None,
                 connectivity_association_name_secret_version: Optional[str] = None):
        if connectivity_association_key_secret_id is not None:
            pulumi.set(__self__, "connectivity_association_key_secret_id", connectivity_association_key_secret_id)
        if connectivity_association_key_secret_version is not None:
            pulumi.set(__self__, "connectivity_association_key_secret_version", connectivity_association_key_secret_version)
        if connectivity_association_name_secret_id is not None:
            pulumi.set(__self__, "connectivity_association_name_secret_id", connectivity_association_name_secret_id)
        if connectivity_association_name_secret_version is not None:
            pulumi.set(__self__, "connectivity_association_name_secret_version", connectivity_association_name_secret_version)

    @property
    @pulumi.getter(name="connectivityAssociationKeySecretId")
    def connectivity_association_key_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_key_secret_id")

    @property
    @pulumi.getter(name="connectivityAssociationKeySecretVersion")
    def connectivity_association_key_secret_version(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_key_secret_version")

    @property
    @pulumi.getter(name="connectivityAssociationNameSecretId")
    def connectivity_association_name_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_name_secret_id")

    @property
    @pulumi.getter(name="connectivityAssociationNameSecretVersion")
    def connectivity_association_name_secret_version(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_name_secret_version")


@pulumi.output_type
class GetCrossConnectGroupsCrossConnectGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 customer_reference_name: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 macsec_properties: Optional[Sequence['outputs.GetCrossConnectGroupsCrossConnectGroupMacsecPropertyResult']] = None,
                 oci_logical_device_name: Optional[str] = None,
                 oci_physical_device_name: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if customer_reference_name is not None:
            pulumi.set(__self__, "customer_reference_name", customer_reference_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if macsec_properties is not None:
            pulumi.set(__self__, "macsec_properties", macsec_properties)
        if oci_logical_device_name is not None:
            pulumi.set(__self__, "oci_logical_device_name", oci_logical_device_name)
        if oci_physical_device_name is not None:
            pulumi.set(__self__, "oci_physical_device_name", oci_physical_device_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="customerReferenceName")
    def customer_reference_name(self) -> Optional[str]:
        return pulumi.get(self, "customer_reference_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="macsecProperties")
    def macsec_properties(self) -> Optional[Sequence['outputs.GetCrossConnectGroupsCrossConnectGroupMacsecPropertyResult']]:
        return pulumi.get(self, "macsec_properties")

    @property
    @pulumi.getter(name="ociLogicalDeviceName")
    def oci_logical_device_name(self) -> Optional[str]:
        return pulumi.get(self, "oci_logical_device_name")

    @property
    @pulumi.getter(name="ociPhysicalDeviceName")
    def oci_physical_device_name(self) -> Optional[str]:
        return pulumi.get(self, "oci_physical_device_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetCrossConnectGroupsCrossConnectGroupMacsecPropertyResult(dict):
    def __init__(__self__, *,
                 encryption_cipher: Optional[str] = None,
                 is_unprotected_traffic_allowed: Optional[bool] = None,
                 primary_keys: Optional[Sequence['outputs.GetCrossConnectGroupsCrossConnectGroupMacsecPropertyPrimaryKeyResult']] = None,
                 state: Optional[str] = None):
        if encryption_cipher is not None:
            pulumi.set(__self__, "encryption_cipher", encryption_cipher)
        if is_unprotected_traffic_allowed is not None:
            pulumi.set(__self__, "is_unprotected_traffic_allowed", is_unprotected_traffic_allowed)
        if primary_keys is not None:
            pulumi.set(__self__, "primary_keys", primary_keys)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="encryptionCipher")
    def encryption_cipher(self) -> Optional[str]:
        return pulumi.get(self, "encryption_cipher")

    @property
    @pulumi.getter(name="isUnprotectedTrafficAllowed")
    def is_unprotected_traffic_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_unprotected_traffic_allowed")

    @property
    @pulumi.getter(name="primaryKeys")
    def primary_keys(self) -> Optional[Sequence['outputs.GetCrossConnectGroupsCrossConnectGroupMacsecPropertyPrimaryKeyResult']]:
        return pulumi.get(self, "primary_keys")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetCrossConnectGroupsCrossConnectGroupMacsecPropertyPrimaryKeyResult(dict):
    def __init__(__self__, *,
                 connectivity_association_key_secret_id: Optional[str] = None,
                 connectivity_association_key_secret_version: Optional[str] = None,
                 connectivity_association_name_secret_id: Optional[str] = None,
                 connectivity_association_name_secret_version: Optional[str] = None):
        if connectivity_association_key_secret_id is not None:
            pulumi.set(__self__, "connectivity_association_key_secret_id", connectivity_association_key_secret_id)
        if connectivity_association_key_secret_version is not None:
            pulumi.set(__self__, "connectivity_association_key_secret_version", connectivity_association_key_secret_version)
        if connectivity_association_name_secret_id is not None:
            pulumi.set(__self__, "connectivity_association_name_secret_id", connectivity_association_name_secret_id)
        if connectivity_association_name_secret_version is not None:
            pulumi.set(__self__, "connectivity_association_name_secret_version", connectivity_association_name_secret_version)

    @property
    @pulumi.getter(name="connectivityAssociationKeySecretId")
    def connectivity_association_key_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_key_secret_id")

    @property
    @pulumi.getter(name="connectivityAssociationKeySecretVersion")
    def connectivity_association_key_secret_version(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_key_secret_version")

    @property
    @pulumi.getter(name="connectivityAssociationNameSecretId")
    def connectivity_association_name_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_name_secret_id")

    @property
    @pulumi.getter(name="connectivityAssociationNameSecretVersion")
    def connectivity_association_name_secret_version(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_name_secret_version")


@pulumi.output_type
class GetCrossConnectGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCrossConnectLocationsCrossConnectLocationResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCrossConnectLocationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCrossConnectMacsecPropertyResult(dict):
    def __init__(__self__, *,
                 encryption_cipher: Optional[str] = None,
                 is_unprotected_traffic_allowed: Optional[bool] = None,
                 primary_keys: Optional[Sequence['outputs.GetCrossConnectMacsecPropertyPrimaryKeyResult']] = None,
                 state: Optional[str] = None):
        if encryption_cipher is not None:
            pulumi.set(__self__, "encryption_cipher", encryption_cipher)
        if is_unprotected_traffic_allowed is not None:
            pulumi.set(__self__, "is_unprotected_traffic_allowed", is_unprotected_traffic_allowed)
        if primary_keys is not None:
            pulumi.set(__self__, "primary_keys", primary_keys)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="encryptionCipher")
    def encryption_cipher(self) -> Optional[str]:
        return pulumi.get(self, "encryption_cipher")

    @property
    @pulumi.getter(name="isUnprotectedTrafficAllowed")
    def is_unprotected_traffic_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_unprotected_traffic_allowed")

    @property
    @pulumi.getter(name="primaryKeys")
    def primary_keys(self) -> Optional[Sequence['outputs.GetCrossConnectMacsecPropertyPrimaryKeyResult']]:
        return pulumi.get(self, "primary_keys")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetCrossConnectMacsecPropertyPrimaryKeyResult(dict):
    def __init__(__self__, *,
                 connectivity_association_key_secret_id: Optional[str] = None,
                 connectivity_association_key_secret_version: Optional[str] = None,
                 connectivity_association_name_secret_id: Optional[str] = None,
                 connectivity_association_name_secret_version: Optional[str] = None):
        if connectivity_association_key_secret_id is not None:
            pulumi.set(__self__, "connectivity_association_key_secret_id", connectivity_association_key_secret_id)
        if connectivity_association_key_secret_version is not None:
            pulumi.set(__self__, "connectivity_association_key_secret_version", connectivity_association_key_secret_version)
        if connectivity_association_name_secret_id is not None:
            pulumi.set(__self__, "connectivity_association_name_secret_id", connectivity_association_name_secret_id)
        if connectivity_association_name_secret_version is not None:
            pulumi.set(__self__, "connectivity_association_name_secret_version", connectivity_association_name_secret_version)

    @property
    @pulumi.getter(name="connectivityAssociationKeySecretId")
    def connectivity_association_key_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_key_secret_id")

    @property
    @pulumi.getter(name="connectivityAssociationKeySecretVersion")
    def connectivity_association_key_secret_version(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_key_secret_version")

    @property
    @pulumi.getter(name="connectivityAssociationNameSecretId")
    def connectivity_association_name_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_name_secret_id")

    @property
    @pulumi.getter(name="connectivityAssociationNameSecretVersion")
    def connectivity_association_name_secret_version(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_name_secret_version")


@pulumi.output_type
class GetCrossConnectPortSpeedShapeCrossConnectPortSpeedShapeResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 port_speed_in_gbps: Optional[int] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port_speed_in_gbps is not None:
            pulumi.set(__self__, "port_speed_in_gbps", port_speed_in_gbps)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="portSpeedInGbps")
    def port_speed_in_gbps(self) -> Optional[int]:
        return pulumi.get(self, "port_speed_in_gbps")


@pulumi.output_type
class GetCrossConnectPortSpeedShapeFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCrossConnectsCrossConnectResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 cross_connect_group_id: Optional[str] = None,
                 customer_reference_name: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 far_cross_connect_or_cross_connect_group_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_active: Optional[bool] = None,
                 location_name: Optional[str] = None,
                 macsec_properties: Optional[Sequence['outputs.GetCrossConnectsCrossConnectMacsecPropertyResult']] = None,
                 near_cross_connect_or_cross_connect_group_id: Optional[str] = None,
                 oci_logical_device_name: Optional[str] = None,
                 oci_physical_device_name: Optional[str] = None,
                 port_name: Optional[str] = None,
                 port_speed_shape_name: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if cross_connect_group_id is not None:
            pulumi.set(__self__, "cross_connect_group_id", cross_connect_group_id)
        if customer_reference_name is not None:
            pulumi.set(__self__, "customer_reference_name", customer_reference_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if far_cross_connect_or_cross_connect_group_id is not None:
            pulumi.set(__self__, "far_cross_connect_or_cross_connect_group_id", far_cross_connect_or_cross_connect_group_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if location_name is not None:
            pulumi.set(__self__, "location_name", location_name)
        if macsec_properties is not None:
            pulumi.set(__self__, "macsec_properties", macsec_properties)
        if near_cross_connect_or_cross_connect_group_id is not None:
            pulumi.set(__self__, "near_cross_connect_or_cross_connect_group_id", near_cross_connect_or_cross_connect_group_id)
        if oci_logical_device_name is not None:
            pulumi.set(__self__, "oci_logical_device_name", oci_logical_device_name)
        if oci_physical_device_name is not None:
            pulumi.set(__self__, "oci_physical_device_name", oci_physical_device_name)
        if port_name is not None:
            pulumi.set(__self__, "port_name", port_name)
        if port_speed_shape_name is not None:
            pulumi.set(__self__, "port_speed_shape_name", port_speed_shape_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="crossConnectGroupId")
    def cross_connect_group_id(self) -> Optional[str]:
        return pulumi.get(self, "cross_connect_group_id")

    @property
    @pulumi.getter(name="customerReferenceName")
    def customer_reference_name(self) -> Optional[str]:
        return pulumi.get(self, "customer_reference_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="farCrossConnectOrCrossConnectGroupId")
    def far_cross_connect_or_cross_connect_group_id(self) -> Optional[str]:
        return pulumi.get(self, "far_cross_connect_or_cross_connect_group_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[bool]:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> Optional[str]:
        return pulumi.get(self, "location_name")

    @property
    @pulumi.getter(name="macsecProperties")
    def macsec_properties(self) -> Optional[Sequence['outputs.GetCrossConnectsCrossConnectMacsecPropertyResult']]:
        return pulumi.get(self, "macsec_properties")

    @property
    @pulumi.getter(name="nearCrossConnectOrCrossConnectGroupId")
    def near_cross_connect_or_cross_connect_group_id(self) -> Optional[str]:
        return pulumi.get(self, "near_cross_connect_or_cross_connect_group_id")

    @property
    @pulumi.getter(name="ociLogicalDeviceName")
    def oci_logical_device_name(self) -> Optional[str]:
        return pulumi.get(self, "oci_logical_device_name")

    @property
    @pulumi.getter(name="ociPhysicalDeviceName")
    def oci_physical_device_name(self) -> Optional[str]:
        return pulumi.get(self, "oci_physical_device_name")

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[str]:
        return pulumi.get(self, "port_name")

    @property
    @pulumi.getter(name="portSpeedShapeName")
    def port_speed_shape_name(self) -> Optional[str]:
        return pulumi.get(self, "port_speed_shape_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetCrossConnectsCrossConnectMacsecPropertyResult(dict):
    def __init__(__self__, *,
                 encryption_cipher: Optional[str] = None,
                 is_unprotected_traffic_allowed: Optional[bool] = None,
                 primary_keys: Optional[Sequence['outputs.GetCrossConnectsCrossConnectMacsecPropertyPrimaryKeyResult']] = None,
                 state: Optional[str] = None):
        if encryption_cipher is not None:
            pulumi.set(__self__, "encryption_cipher", encryption_cipher)
        if is_unprotected_traffic_allowed is not None:
            pulumi.set(__self__, "is_unprotected_traffic_allowed", is_unprotected_traffic_allowed)
        if primary_keys is not None:
            pulumi.set(__self__, "primary_keys", primary_keys)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="encryptionCipher")
    def encryption_cipher(self) -> Optional[str]:
        return pulumi.get(self, "encryption_cipher")

    @property
    @pulumi.getter(name="isUnprotectedTrafficAllowed")
    def is_unprotected_traffic_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_unprotected_traffic_allowed")

    @property
    @pulumi.getter(name="primaryKeys")
    def primary_keys(self) -> Optional[Sequence['outputs.GetCrossConnectsCrossConnectMacsecPropertyPrimaryKeyResult']]:
        return pulumi.get(self, "primary_keys")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetCrossConnectsCrossConnectMacsecPropertyPrimaryKeyResult(dict):
    def __init__(__self__, *,
                 connectivity_association_key_secret_id: Optional[str] = None,
                 connectivity_association_key_secret_version: Optional[str] = None,
                 connectivity_association_name_secret_id: Optional[str] = None,
                 connectivity_association_name_secret_version: Optional[str] = None):
        if connectivity_association_key_secret_id is not None:
            pulumi.set(__self__, "connectivity_association_key_secret_id", connectivity_association_key_secret_id)
        if connectivity_association_key_secret_version is not None:
            pulumi.set(__self__, "connectivity_association_key_secret_version", connectivity_association_key_secret_version)
        if connectivity_association_name_secret_id is not None:
            pulumi.set(__self__, "connectivity_association_name_secret_id", connectivity_association_name_secret_id)
        if connectivity_association_name_secret_version is not None:
            pulumi.set(__self__, "connectivity_association_name_secret_version", connectivity_association_name_secret_version)

    @property
    @pulumi.getter(name="connectivityAssociationKeySecretId")
    def connectivity_association_key_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_key_secret_id")

    @property
    @pulumi.getter(name="connectivityAssociationKeySecretVersion")
    def connectivity_association_key_secret_version(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_key_secret_version")

    @property
    @pulumi.getter(name="connectivityAssociationNameSecretId")
    def connectivity_association_name_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_name_secret_id")

    @property
    @pulumi.getter(name="connectivityAssociationNameSecretVersion")
    def connectivity_association_name_secret_version(self) -> Optional[str]:
        return pulumi.get(self, "connectivity_association_name_secret_version")


@pulumi.output_type
class GetCrossConnectsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDedicatedVmHostInstanceShapesDedicatedVmHostInstanceShapeResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 instance_shape_name: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if instance_shape_name is not None:
            pulumi.set(__self__, "instance_shape_name", instance_shape_name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="instanceShapeName")
    def instance_shape_name(self) -> Optional[str]:
        return pulumi.get(self, "instance_shape_name")


@pulumi.output_type
class GetDedicatedVmHostInstanceShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDedicatedVmHostInstancesDedicatedVmHostInstanceResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 shape: Optional[str] = None,
                 time_created: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetDedicatedVmHostInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDedicatedVmHostShapesDedicatedVmHostShapeResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 dedicated_vm_host_shape: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if dedicated_vm_host_shape is not None:
            pulumi.set(__self__, "dedicated_vm_host_shape", dedicated_vm_host_shape)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="dedicatedVmHostShape")
    def dedicated_vm_host_shape(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_shape")


@pulumi.output_type
class GetDedicatedVmHostShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDedicatedVmHostsDedicatedVmHostResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 dedicated_vm_host_shape: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 remaining_memory_in_gbs: Optional[float] = None,
                 remaining_ocpus: Optional[float] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 total_memory_in_gbs: Optional[float] = None,
                 total_ocpus: Optional[float] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if dedicated_vm_host_shape is not None:
            pulumi.set(__self__, "dedicated_vm_host_shape", dedicated_vm_host_shape)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if remaining_memory_in_gbs is not None:
            pulumi.set(__self__, "remaining_memory_in_gbs", remaining_memory_in_gbs)
        if remaining_ocpus is not None:
            pulumi.set(__self__, "remaining_ocpus", remaining_ocpus)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if total_memory_in_gbs is not None:
            pulumi.set(__self__, "total_memory_in_gbs", total_memory_in_gbs)
        if total_ocpus is not None:
            pulumi.set(__self__, "total_ocpus", total_ocpus)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dedicatedVmHostShape")
    def dedicated_vm_host_shape(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_shape")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="remainingMemoryInGbs")
    def remaining_memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "remaining_memory_in_gbs")

    @property
    @pulumi.getter(name="remainingOcpus")
    def remaining_ocpus(self) -> Optional[float]:
        return pulumi.get(self, "remaining_ocpus")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="totalMemoryInGbs")
    def total_memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "total_memory_in_gbs")

    @property
    @pulumi.getter(name="totalOcpus")
    def total_ocpus(self) -> Optional[float]:
        return pulumi.get(self, "total_ocpus")


@pulumi.output_type
class GetDedicatedVmHostsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDhcpOptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDhcpOptionsOptionResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 domain_name_type: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 options: Optional[Sequence['outputs.GetDhcpOptionsOptionOptionResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_name_type is not None:
            pulumi.set(__self__, "domain_name_type", domain_name_type)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainNameType")
    def domain_name_type(self) -> Optional[str]:
        return pulumi.get(self, "domain_name_type")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence['outputs.GetDhcpOptionsOptionOptionResult']]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetDhcpOptionsOptionOptionResult(dict):
    def __init__(__self__, *,
                 custom_dns_servers: Optional[Sequence[str]] = None,
                 search_domain_names: Optional[Sequence[str]] = None,
                 server_type: Optional[str] = None,
                 type: Optional[str] = None):
        if custom_dns_servers is not None:
            pulumi.set(__self__, "custom_dns_servers", custom_dns_servers)
        if search_domain_names is not None:
            pulumi.set(__self__, "search_domain_names", search_domain_names)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="customDnsServers")
    def custom_dns_servers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_dns_servers")

    @property
    @pulumi.getter(name="searchDomainNames")
    def search_domain_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "search_domain_names")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[str]:
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDrgAttachmentsDrgAttachmentResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 drg_id: Optional[str] = None,
                 drg_route_table_id: Optional[str] = None,
                 export_drg_route_distribution_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_cross_tenancy: Optional[bool] = None,
                 network_details: Optional[Sequence['outputs.GetDrgAttachmentsDrgAttachmentNetworkDetailResult']] = None,
                 remove_export_drg_route_distribution_trigger: Optional[bool] = None,
                 route_table_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if drg_id is not None:
            pulumi.set(__self__, "drg_id", drg_id)
        if drg_route_table_id is not None:
            pulumi.set(__self__, "drg_route_table_id", drg_route_table_id)
        if export_drg_route_distribution_id is not None:
            pulumi.set(__self__, "export_drg_route_distribution_id", export_drg_route_distribution_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_cross_tenancy is not None:
            pulumi.set(__self__, "is_cross_tenancy", is_cross_tenancy)
        if network_details is not None:
            pulumi.set(__self__, "network_details", network_details)
        if remove_export_drg_route_distribution_trigger is not None:
            pulumi.set(__self__, "remove_export_drg_route_distribution_trigger", remove_export_drg_route_distribution_trigger)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="drgId")
    def drg_id(self) -> Optional[str]:
        return pulumi.get(self, "drg_id")

    @property
    @pulumi.getter(name="drgRouteTableId")
    def drg_route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "drg_route_table_id")

    @property
    @pulumi.getter(name="exportDrgRouteDistributionId")
    def export_drg_route_distribution_id(self) -> Optional[str]:
        return pulumi.get(self, "export_drg_route_distribution_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCrossTenancy")
    def is_cross_tenancy(self) -> Optional[bool]:
        return pulumi.get(self, "is_cross_tenancy")

    @property
    @pulumi.getter(name="networkDetails")
    def network_details(self) -> Optional[Sequence['outputs.GetDrgAttachmentsDrgAttachmentNetworkDetailResult']]:
        return pulumi.get(self, "network_details")

    @property
    @pulumi.getter(name="removeExportDrgRouteDistributionTrigger")
    def remove_export_drg_route_distribution_trigger(self) -> Optional[bool]:
        return pulumi.get(self, "remove_export_drg_route_distribution_trigger")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetDrgAttachmentsDrgAttachmentNetworkDetailResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 ids: Optional[Sequence[str]] = None,
                 ipsec_connection_id: Optional[str] = None,
                 route_table_id: Optional[str] = None,
                 transport_attachment_id: Optional[str] = None,
                 transport_only_mode: Optional[bool] = None,
                 type: Optional[str] = None,
                 vcn_route_type: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if ipsec_connection_id is not None:
            pulumi.set(__self__, "ipsec_connection_id", ipsec_connection_id)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if transport_attachment_id is not None:
            pulumi.set(__self__, "transport_attachment_id", transport_attachment_id)
        if transport_only_mode is not None:
            pulumi.set(__self__, "transport_only_mode", transport_only_mode)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vcn_route_type is not None:
            pulumi.set(__self__, "vcn_route_type", vcn_route_type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="ipsecConnectionId")
    def ipsec_connection_id(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_connection_id")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter(name="transportAttachmentId")
    def transport_attachment_id(self) -> Optional[str]:
        return pulumi.get(self, "transport_attachment_id")

    @property
    @pulumi.getter(name="transportOnlyMode")
    def transport_only_mode(self) -> Optional[bool]:
        return pulumi.get(self, "transport_only_mode")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vcnRouteType")
    def vcn_route_type(self) -> Optional[str]:
        return pulumi.get(self, "vcn_route_type")


@pulumi.output_type
class GetDrgAttachmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDrgRouteDistributionStatementsDrgRouteDistributionStatementResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[str] = None,
                 match_criterias: Optional[Sequence['outputs.GetDrgRouteDistributionStatementsDrgRouteDistributionStatementMatchCriteriaResult']] = None,
                 priority: Optional[int] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_criterias is not None:
            pulumi.set(__self__, "match_criterias", match_criterias)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchCriterias")
    def match_criterias(self) -> Optional[Sequence['outputs.GetDrgRouteDistributionStatementsDrgRouteDistributionStatementMatchCriteriaResult']]:
        return pulumi.get(self, "match_criterias")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetDrgRouteDistributionStatementsDrgRouteDistributionStatementMatchCriteriaResult(dict):
    def __init__(__self__, *,
                 attachment_type: Optional[str] = None,
                 drg_attachment_id: Optional[str] = None,
                 match_type: Optional[str] = None):
        if attachment_type is not None:
            pulumi.set(__self__, "attachment_type", attachment_type)
        if drg_attachment_id is not None:
            pulumi.set(__self__, "drg_attachment_id", drg_attachment_id)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="attachmentType")
    def attachment_type(self) -> Optional[str]:
        return pulumi.get(self, "attachment_type")

    @property
    @pulumi.getter(name="drgAttachmentId")
    def drg_attachment_id(self) -> Optional[str]:
        return pulumi.get(self, "drg_attachment_id")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")


@pulumi.output_type
class GetDrgRouteDistributionStatementsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDrgRouteDistributionsDrgRouteDistributionResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 distribution_type: Optional[str] = None,
                 drg_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if distribution_type is not None:
            pulumi.set(__self__, "distribution_type", distribution_type)
        if drg_id is not None:
            pulumi.set(__self__, "drg_id", drg_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="distributionType")
    def distribution_type(self) -> Optional[str]:
        return pulumi.get(self, "distribution_type")

    @property
    @pulumi.getter(name="drgId")
    def drg_id(self) -> Optional[str]:
        return pulumi.get(self, "drg_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetDrgRouteDistributionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDrgRouteTableRouteRulesDrgRouteRuleResult(dict):
    def __init__(__self__, *,
                 attributes: Optional[Mapping[str, Any]] = None,
                 destination: Optional[str] = None,
                 destination_type: Optional[str] = None,
                 id: Optional[str] = None,
                 is_blackhole: Optional[bool] = None,
                 is_conflict: Optional[bool] = None,
                 next_hop_drg_attachment_id: Optional[str] = None,
                 route_provenance: Optional[str] = None,
                 route_type: Optional[str] = None):
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_blackhole is not None:
            pulumi.set(__self__, "is_blackhole", is_blackhole)
        if is_conflict is not None:
            pulumi.set(__self__, "is_conflict", is_conflict)
        if next_hop_drg_attachment_id is not None:
            pulumi.set(__self__, "next_hop_drg_attachment_id", next_hop_drg_attachment_id)
        if route_provenance is not None:
            pulumi.set(__self__, "route_provenance", route_provenance)
        if route_type is not None:
            pulumi.set(__self__, "route_type", route_type)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBlackhole")
    def is_blackhole(self) -> Optional[bool]:
        return pulumi.get(self, "is_blackhole")

    @property
    @pulumi.getter(name="isConflict")
    def is_conflict(self) -> Optional[bool]:
        return pulumi.get(self, "is_conflict")

    @property
    @pulumi.getter(name="nextHopDrgAttachmentId")
    def next_hop_drg_attachment_id(self) -> Optional[str]:
        return pulumi.get(self, "next_hop_drg_attachment_id")

    @property
    @pulumi.getter(name="routeProvenance")
    def route_provenance(self) -> Optional[str]:
        return pulumi.get(self, "route_provenance")

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> Optional[str]:
        return pulumi.get(self, "route_type")


@pulumi.output_type
class GetDrgRouteTableRouteRulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDrgRouteTablesDrgRouteTableResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 drg_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 import_drg_route_distribution_id: Optional[str] = None,
                 is_ecmp_enabled: Optional[bool] = None,
                 remove_import_trigger: Optional[bool] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if drg_id is not None:
            pulumi.set(__self__, "drg_id", drg_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if import_drg_route_distribution_id is not None:
            pulumi.set(__self__, "import_drg_route_distribution_id", import_drg_route_distribution_id)
        if is_ecmp_enabled is not None:
            pulumi.set(__self__, "is_ecmp_enabled", is_ecmp_enabled)
        if remove_import_trigger is not None:
            pulumi.set(__self__, "remove_import_trigger", remove_import_trigger)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="drgId")
    def drg_id(self) -> Optional[str]:
        return pulumi.get(self, "drg_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="importDrgRouteDistributionId")
    def import_drg_route_distribution_id(self) -> Optional[str]:
        return pulumi.get(self, "import_drg_route_distribution_id")

    @property
    @pulumi.getter(name="isEcmpEnabled")
    def is_ecmp_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ecmp_enabled")

    @property
    @pulumi.getter(name="removeImportTrigger")
    def remove_import_trigger(self) -> Optional[bool]:
        return pulumi.get(self, "remove_import_trigger")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetDrgRouteTablesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDrgsDrgResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 default_drg_route_tables: Optional[Sequence['outputs.GetDrgsDrgDefaultDrgRouteTableResult']] = None,
                 default_export_drg_route_distribution_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 redundancy_status: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if default_drg_route_tables is not None:
            pulumi.set(__self__, "default_drg_route_tables", default_drg_route_tables)
        if default_export_drg_route_distribution_id is not None:
            pulumi.set(__self__, "default_export_drg_route_distribution_id", default_export_drg_route_distribution_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if redundancy_status is not None:
            pulumi.set(__self__, "redundancy_status", redundancy_status)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="defaultDrgRouteTables")
    def default_drg_route_tables(self) -> Optional[Sequence['outputs.GetDrgsDrgDefaultDrgRouteTableResult']]:
        return pulumi.get(self, "default_drg_route_tables")

    @property
    @pulumi.getter(name="defaultExportDrgRouteDistributionId")
    def default_export_drg_route_distribution_id(self) -> Optional[str]:
        return pulumi.get(self, "default_export_drg_route_distribution_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="redundancyStatus")
    def redundancy_status(self) -> Optional[str]:
        return pulumi.get(self, "redundancy_status")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetDrgsDrgDefaultDrgRouteTableResult(dict):
    def __init__(__self__, *,
                 ipsec_tunnel: Optional[str] = None,
                 remote_peering_connection: Optional[str] = None,
                 vcn: Optional[str] = None,
                 virtual_circuit: Optional[str] = None):
        if ipsec_tunnel is not None:
            pulumi.set(__self__, "ipsec_tunnel", ipsec_tunnel)
        if remote_peering_connection is not None:
            pulumi.set(__self__, "remote_peering_connection", remote_peering_connection)
        if vcn is not None:
            pulumi.set(__self__, "vcn", vcn)
        if virtual_circuit is not None:
            pulumi.set(__self__, "virtual_circuit", virtual_circuit)

    @property
    @pulumi.getter(name="ipsecTunnel")
    def ipsec_tunnel(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_tunnel")

    @property
    @pulumi.getter(name="remotePeeringConnection")
    def remote_peering_connection(self) -> Optional[str]:
        return pulumi.get(self, "remote_peering_connection")

    @property
    @pulumi.getter
    def vcn(self) -> Optional[str]:
        return pulumi.get(self, "vcn")

    @property
    @pulumi.getter(name="virtualCircuit")
    def virtual_circuit(self) -> Optional[str]:
        return pulumi.get(self, "virtual_circuit")


@pulumi.output_type
class GetDrgsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFastConnectProviderServicesFastConnectProviderServiceResult(dict):
    def __init__(__self__, *,
                 bandwith_shape_management: Optional[str] = None,
                 customer_asn_management: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 private_peering_bgp_management: Optional[str] = None,
                 provider_name: Optional[str] = None,
                 provider_service_key_management: Optional[str] = None,
                 provider_service_name: Optional[str] = None,
                 public_peering_bgp_management: Optional[str] = None,
                 required_total_cross_connects: Optional[int] = None,
                 supported_virtual_circuit_types: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        if bandwith_shape_management is not None:
            pulumi.set(__self__, "bandwith_shape_management", bandwith_shape_management)
        if customer_asn_management is not None:
            pulumi.set(__self__, "customer_asn_management", customer_asn_management)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_peering_bgp_management is not None:
            pulumi.set(__self__, "private_peering_bgp_management", private_peering_bgp_management)
        if provider_name is not None:
            pulumi.set(__self__, "provider_name", provider_name)
        if provider_service_key_management is not None:
            pulumi.set(__self__, "provider_service_key_management", provider_service_key_management)
        if provider_service_name is not None:
            pulumi.set(__self__, "provider_service_name", provider_service_name)
        if public_peering_bgp_management is not None:
            pulumi.set(__self__, "public_peering_bgp_management", public_peering_bgp_management)
        if required_total_cross_connects is not None:
            pulumi.set(__self__, "required_total_cross_connects", required_total_cross_connects)
        if supported_virtual_circuit_types is not None:
            pulumi.set(__self__, "supported_virtual_circuit_types", supported_virtual_circuit_types)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bandwithShapeManagement")
    def bandwith_shape_management(self) -> Optional[str]:
        return pulumi.get(self, "bandwith_shape_management")

    @property
    @pulumi.getter(name="customerAsnManagement")
    def customer_asn_management(self) -> Optional[str]:
        return pulumi.get(self, "customer_asn_management")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="privatePeeringBgpManagement")
    def private_peering_bgp_management(self) -> Optional[str]:
        return pulumi.get(self, "private_peering_bgp_management")

    @property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> Optional[str]:
        return pulumi.get(self, "provider_name")

    @property
    @pulumi.getter(name="providerServiceKeyManagement")
    def provider_service_key_management(self) -> Optional[str]:
        return pulumi.get(self, "provider_service_key_management")

    @property
    @pulumi.getter(name="providerServiceName")
    def provider_service_name(self) -> Optional[str]:
        return pulumi.get(self, "provider_service_name")

    @property
    @pulumi.getter(name="publicPeeringBgpManagement")
    def public_peering_bgp_management(self) -> Optional[str]:
        return pulumi.get(self, "public_peering_bgp_management")

    @property
    @pulumi.getter(name="requiredTotalCrossConnects")
    def required_total_cross_connects(self) -> Optional[int]:
        return pulumi.get(self, "required_total_cross_connects")

    @property
    @pulumi.getter(name="supportedVirtualCircuitTypes")
    def supported_virtual_circuit_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_virtual_circuit_types")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFastConnectProviderServicesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetImageAgentFeatureResult(dict):
    def __init__(__self__, *,
                 is_management_supported: Optional[bool] = None,
                 is_monitoring_supported: Optional[bool] = None):
        if is_management_supported is not None:
            pulumi.set(__self__, "is_management_supported", is_management_supported)
        if is_monitoring_supported is not None:
            pulumi.set(__self__, "is_monitoring_supported", is_monitoring_supported)

    @property
    @pulumi.getter(name="isManagementSupported")
    def is_management_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_supported")

    @property
    @pulumi.getter(name="isMonitoringSupported")
    def is_monitoring_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_supported")


@pulumi.output_type
class GetImageImageSourceDetailResult(dict):
    def __init__(__self__, *,
                 bucket_name: Optional[str] = None,
                 namespace_name: Optional[str] = None,
                 object_name: Optional[str] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None,
                 source_image_type: Optional[str] = None,
                 source_type: Optional[str] = None,
                 source_uri: Optional[str] = None):
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if object_name is not None:
            pulumi.set(__self__, "object_name", object_name)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)
        if source_image_type is not None:
            pulumi.set(__self__, "source_image_type", source_image_type)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if source_uri is not None:
            pulumi.set(__self__, "source_uri", source_uri)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[str]:
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> Optional[str]:
        return pulumi.get(self, "object_name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")

    @property
    @pulumi.getter(name="sourceImageType")
    def source_image_type(self) -> Optional[str]:
        return pulumi.get(self, "source_image_type")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="sourceUri")
    def source_uri(self) -> Optional[str]:
        return pulumi.get(self, "source_uri")


@pulumi.output_type
class GetImageLaunchOptionResult(dict):
    def __init__(__self__, *,
                 boot_volume_type: Optional[str] = None,
                 firmware: Optional[str] = None,
                 is_consistent_volume_naming_enabled: Optional[bool] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 network_type: Optional[str] = None,
                 remote_data_volume_type: Optional[str] = None):
        if boot_volume_type is not None:
            pulumi.set(__self__, "boot_volume_type", boot_volume_type)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if is_consistent_volume_naming_enabled is not None:
            pulumi.set(__self__, "is_consistent_volume_naming_enabled", is_consistent_volume_naming_enabled)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if remote_data_volume_type is not None:
            pulumi.set(__self__, "remote_data_volume_type", remote_data_volume_type)

    @property
    @pulumi.getter(name="bootVolumeType")
    def boot_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_type")

    @property
    @pulumi.getter
    def firmware(self) -> Optional[str]:
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="isConsistentVolumeNamingEnabled")
    def is_consistent_volume_naming_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_consistent_volume_naming_enabled")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="remoteDataVolumeType")
    def remote_data_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "remote_data_volume_type")


@pulumi.output_type
class GetImageShapeMemoryConstraintResult(dict):
    def __init__(__self__, *,
                 max_in_gbs: Optional[int] = None,
                 min_in_gbs: Optional[int] = None):
        if max_in_gbs is not None:
            pulumi.set(__self__, "max_in_gbs", max_in_gbs)
        if min_in_gbs is not None:
            pulumi.set(__self__, "min_in_gbs", min_in_gbs)

    @property
    @pulumi.getter(name="maxInGbs")
    def max_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "max_in_gbs")

    @property
    @pulumi.getter(name="minInGbs")
    def min_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "min_in_gbs")


@pulumi.output_type
class GetImageShapeOcpuConstraintResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetImageShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetImageShapesImageShapeCompatibilityResult(dict):
    def __init__(__self__, *,
                 image_id: Optional[str] = None,
                 memory_constraints: Optional[Sequence['outputs.GetImageShapesImageShapeCompatibilityMemoryConstraintResult']] = None,
                 ocpu_constraints: Optional[Sequence['outputs.GetImageShapesImageShapeCompatibilityOcpuConstraintResult']] = None,
                 shape: Optional[str] = None):
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if memory_constraints is not None:
            pulumi.set(__self__, "memory_constraints", memory_constraints)
        if ocpu_constraints is not None:
            pulumi.set(__self__, "ocpu_constraints", ocpu_constraints)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="memoryConstraints")
    def memory_constraints(self) -> Optional[Sequence['outputs.GetImageShapesImageShapeCompatibilityMemoryConstraintResult']]:
        return pulumi.get(self, "memory_constraints")

    @property
    @pulumi.getter(name="ocpuConstraints")
    def ocpu_constraints(self) -> Optional[Sequence['outputs.GetImageShapesImageShapeCompatibilityOcpuConstraintResult']]:
        return pulumi.get(self, "ocpu_constraints")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")


@pulumi.output_type
class GetImageShapesImageShapeCompatibilityMemoryConstraintResult(dict):
    def __init__(__self__, *,
                 max_in_gbs: Optional[int] = None,
                 min_in_gbs: Optional[int] = None):
        if max_in_gbs is not None:
            pulumi.set(__self__, "max_in_gbs", max_in_gbs)
        if min_in_gbs is not None:
            pulumi.set(__self__, "min_in_gbs", min_in_gbs)

    @property
    @pulumi.getter(name="maxInGbs")
    def max_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "max_in_gbs")

    @property
    @pulumi.getter(name="minInGbs")
    def min_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "min_in_gbs")


@pulumi.output_type
class GetImageShapesImageShapeCompatibilityOcpuConstraintResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetImagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetImagesImageResult(dict):
    def __init__(__self__, *,
                 agent_features: Optional[Sequence['outputs.GetImagesImageAgentFeatureResult']] = None,
                 base_image_id: Optional[str] = None,
                 billable_size_in_gbs: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_image_allowed: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 image_source_details: Optional[Sequence['outputs.GetImagesImageImageSourceDetailResult']] = None,
                 instance_id: Optional[str] = None,
                 launch_mode: Optional[str] = None,
                 launch_options: Optional[Sequence['outputs.GetImagesImageLaunchOptionResult']] = None,
                 listing_type: Optional[str] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None,
                 size_in_mbs: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if agent_features is not None:
            pulumi.set(__self__, "agent_features", agent_features)
        if base_image_id is not None:
            pulumi.set(__self__, "base_image_id", base_image_id)
        if billable_size_in_gbs is not None:
            pulumi.set(__self__, "billable_size_in_gbs", billable_size_in_gbs)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_image_allowed is not None:
            pulumi.set(__self__, "create_image_allowed", create_image_allowed)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_source_details is not None:
            pulumi.set(__self__, "image_source_details", image_source_details)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if launch_mode is not None:
            pulumi.set(__self__, "launch_mode", launch_mode)
        if launch_options is not None:
            pulumi.set(__self__, "launch_options", launch_options)
        if listing_type is not None:
            pulumi.set(__self__, "listing_type", listing_type)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)
        if size_in_mbs is not None:
            pulumi.set(__self__, "size_in_mbs", size_in_mbs)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="agentFeatures")
    def agent_features(self) -> Optional[Sequence['outputs.GetImagesImageAgentFeatureResult']]:
        return pulumi.get(self, "agent_features")

    @property
    @pulumi.getter(name="baseImageId")
    def base_image_id(self) -> Optional[str]:
        return pulumi.get(self, "base_image_id")

    @property
    @pulumi.getter(name="billableSizeInGbs")
    def billable_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "billable_size_in_gbs")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createImageAllowed")
    def create_image_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "create_image_allowed")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageSourceDetails")
    def image_source_details(self) -> Optional[Sequence['outputs.GetImagesImageImageSourceDetailResult']]:
        return pulumi.get(self, "image_source_details")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="launchMode")
    def launch_mode(self) -> Optional[str]:
        return pulumi.get(self, "launch_mode")

    @property
    @pulumi.getter(name="launchOptions")
    def launch_options(self) -> Optional[Sequence['outputs.GetImagesImageLaunchOptionResult']]:
        return pulumi.get(self, "launch_options")

    @property
    @pulumi.getter(name="listingType")
    def listing_type(self) -> Optional[str]:
        return pulumi.get(self, "listing_type")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")

    @property
    @pulumi.getter(name="sizeInMbs")
    def size_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_mbs")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetImagesImageAgentFeatureResult(dict):
    def __init__(__self__, *,
                 is_management_supported: Optional[bool] = None,
                 is_monitoring_supported: Optional[bool] = None):
        if is_management_supported is not None:
            pulumi.set(__self__, "is_management_supported", is_management_supported)
        if is_monitoring_supported is not None:
            pulumi.set(__self__, "is_monitoring_supported", is_monitoring_supported)

    @property
    @pulumi.getter(name="isManagementSupported")
    def is_management_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_supported")

    @property
    @pulumi.getter(name="isMonitoringSupported")
    def is_monitoring_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_supported")


@pulumi.output_type
class GetImagesImageImageSourceDetailResult(dict):
    def __init__(__self__, *,
                 bucket_name: Optional[str] = None,
                 namespace_name: Optional[str] = None,
                 object_name: Optional[str] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None,
                 source_image_type: Optional[str] = None,
                 source_type: Optional[str] = None,
                 source_uri: Optional[str] = None):
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if object_name is not None:
            pulumi.set(__self__, "object_name", object_name)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)
        if source_image_type is not None:
            pulumi.set(__self__, "source_image_type", source_image_type)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if source_uri is not None:
            pulumi.set(__self__, "source_uri", source_uri)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[str]:
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> Optional[str]:
        return pulumi.get(self, "object_name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")

    @property
    @pulumi.getter(name="sourceImageType")
    def source_image_type(self) -> Optional[str]:
        return pulumi.get(self, "source_image_type")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="sourceUri")
    def source_uri(self) -> Optional[str]:
        return pulumi.get(self, "source_uri")


@pulumi.output_type
class GetImagesImageLaunchOptionResult(dict):
    def __init__(__self__, *,
                 boot_volume_type: Optional[str] = None,
                 firmware: Optional[str] = None,
                 is_consistent_volume_naming_enabled: Optional[bool] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 network_type: Optional[str] = None,
                 remote_data_volume_type: Optional[str] = None):
        if boot_volume_type is not None:
            pulumi.set(__self__, "boot_volume_type", boot_volume_type)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if is_consistent_volume_naming_enabled is not None:
            pulumi.set(__self__, "is_consistent_volume_naming_enabled", is_consistent_volume_naming_enabled)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if remote_data_volume_type is not None:
            pulumi.set(__self__, "remote_data_volume_type", remote_data_volume_type)

    @property
    @pulumi.getter(name="bootVolumeType")
    def boot_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_type")

    @property
    @pulumi.getter
    def firmware(self) -> Optional[str]:
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="isConsistentVolumeNamingEnabled")
    def is_consistent_volume_naming_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_consistent_volume_naming_enabled")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="remoteDataVolumeType")
    def remote_data_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "remote_data_volume_type")


@pulumi.output_type
class GetInstanceAgentConfigResult(dict):
    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.GetInstanceAgentConfigPluginsConfigResult']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.GetInstanceAgentConfigPluginsConfigResult']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class GetInstanceAgentConfigPluginsConfigResult(dict):
    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInstanceAvailabilityConfigResult(dict):
    def __init__(__self__, *,
                 is_live_migration_preferred: Optional[bool] = None,
                 recovery_action: Optional[str] = None):
        if is_live_migration_preferred is not None:
            pulumi.set(__self__, "is_live_migration_preferred", is_live_migration_preferred)
        if recovery_action is not None:
            pulumi.set(__self__, "recovery_action", recovery_action)

    @property
    @pulumi.getter(name="isLiveMigrationPreferred")
    def is_live_migration_preferred(self) -> Optional[bool]:
        return pulumi.get(self, "is_live_migration_preferred")

    @property
    @pulumi.getter(name="recoveryAction")
    def recovery_action(self) -> Optional[str]:
        return pulumi.get(self, "recovery_action")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailResult(dict):
    def __init__(__self__, *,
                 block_volumes: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailBlockVolumeResult']] = None,
                 instance_type: Optional[str] = None,
                 launch_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailResult']] = None,
                 options: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionResult']] = None,
                 secondary_vnics: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailSecondaryVnicResult']] = None):
        if block_volumes is not None:
            pulumi.set(__self__, "block_volumes", block_volumes)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if launch_details is not None:
            pulumi.set(__self__, "launch_details", launch_details)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if secondary_vnics is not None:
            pulumi.set(__self__, "secondary_vnics", secondary_vnics)

    @property
    @pulumi.getter(name="blockVolumes")
    def block_volumes(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailBlockVolumeResult']]:
        return pulumi.get(self, "block_volumes")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="launchDetails")
    def launch_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailResult']]:
        return pulumi.get(self, "launch_details")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionResult']]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="secondaryVnics")
    def secondary_vnics(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailSecondaryVnicResult']]:
        return pulumi.get(self, "secondary_vnics")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailBlockVolumeResult(dict):
    def __init__(__self__, *,
                 attach_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailBlockVolumeAttachDetailResult']] = None,
                 create_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailResult']] = None,
                 volume_id: Optional[str] = None):
        if attach_details is not None:
            pulumi.set(__self__, "attach_details", attach_details)
        if create_details is not None:
            pulumi.set(__self__, "create_details", create_details)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="attachDetails")
    def attach_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailBlockVolumeAttachDetailResult']]:
        return pulumi.get(self, "attach_details")

    @property
    @pulumi.getter(name="createDetails")
    def create_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailResult']]:
        return pulumi.get(self, "create_details")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailBlockVolumeAttachDetailResult(dict):
    def __init__(__self__, *,
                 device: Optional[str] = None,
                 display_name: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 is_read_only: Optional[bool] = None,
                 is_shareable: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_chap: Optional[bool] = None):
        if device is not None:
            pulumi.set(__self__, "device", device)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if is_shareable is not None:
            pulumi.set(__self__, "is_shareable", is_shareable)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_chap is not None:
            pulumi.set(__self__, "use_chap", use_chap)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_read_only")

    @property
    @pulumi.getter(name="isShareable")
    def is_shareable(self) -> Optional[bool]:
        return pulumi.get(self, "is_shareable")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useChap")
    def use_chap(self) -> Optional[bool]:
        return pulumi.get(self, "use_chap")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailResult(dict):
    def __init__(__self__, *,
                 autotune_policies: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailAutotunePolicyResult']] = None,
                 availability_domain: Optional[str] = None,
                 backup_policy_id: Optional[str] = None,
                 block_volume_replicas: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailBlockVolumeReplicaResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 is_auto_tune_enabled: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 size_in_gbs: Optional[str] = None,
                 source_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailSourceDetailResult']] = None,
                 vpus_per_gb: Optional[str] = None):
        if autotune_policies is not None:
            pulumi.set(__self__, "autotune_policies", autotune_policies)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if backup_policy_id is not None:
            pulumi.set(__self__, "backup_policy_id", backup_policy_id)
        if block_volume_replicas is not None:
            pulumi.set(__self__, "block_volume_replicas", block_volume_replicas)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_auto_tune_enabled is not None:
            pulumi.set(__self__, "is_auto_tune_enabled", is_auto_tune_enabled)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size_in_gbs is not None:
            pulumi.set(__self__, "size_in_gbs", size_in_gbs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)
        if vpus_per_gb is not None:
            pulumi.set(__self__, "vpus_per_gb", vpus_per_gb)

    @property
    @pulumi.getter(name="autotunePolicies")
    def autotune_policies(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailAutotunePolicyResult']]:
        return pulumi.get(self, "autotune_policies")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "backup_policy_id")

    @property
    @pulumi.getter(name="blockVolumeReplicas")
    def block_volume_replicas(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailBlockVolumeReplicaResult']]:
        return pulumi.get(self, "block_volume_replicas")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isAutoTuneEnabled")
    def is_auto_tune_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_tune_enabled")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sizeInGbs")
    def size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_gbs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailSourceDetailResult']]:
        return pulumi.get(self, "source_details")

    @property
    @pulumi.getter(name="vpusPerGb")
    def vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "vpus_per_gb")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailAutotunePolicyResult(dict):
    def __init__(__self__, *,
                 autotune_type: Optional[str] = None,
                 max_vpus_per_gb: Optional[str] = None):
        if autotune_type is not None:
            pulumi.set(__self__, "autotune_type", autotune_type)
        if max_vpus_per_gb is not None:
            pulumi.set(__self__, "max_vpus_per_gb", max_vpus_per_gb)

    @property
    @pulumi.getter(name="autotuneType")
    def autotune_type(self) -> Optional[str]:
        return pulumi.get(self, "autotune_type")

    @property
    @pulumi.getter(name="maxVpusPerGb")
    def max_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "max_vpus_per_gb")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailBlockVolumeReplicaResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 display_name: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailBlockVolumeCreateDetailSourceDetailResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 type: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailLaunchDetailResult(dict):
    def __init__(__self__, *,
                 agent_configs: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailAgentConfigResult']] = None,
                 availability_configs: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailAvailabilityConfigResult']] = None,
                 availability_domain: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailResult']] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 extended_metadata: Optional[Mapping[str, Any]] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 instance_options: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailInstanceOptionResult']] = None,
                 ipxe_script: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 launch_mode: Optional[str] = None,
                 launch_options: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOptionResult']] = None,
                 metadata: Optional[Mapping[str, Any]] = None,
                 platform_configs: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailPlatformConfigResult']] = None,
                 preemptible_instance_configs: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigResult']] = None,
                 preferred_maintenance_action: Optional[str] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailShapeConfigResult']] = None,
                 source_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetailResult']] = None):
        if agent_configs is not None:
            pulumi.set(__self__, "agent_configs", agent_configs)
        if availability_configs is not None:
            pulumi.set(__self__, "availability_configs", availability_configs)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if extended_metadata is not None:
            pulumi.set(__self__, "extended_metadata", extended_metadata)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if launch_mode is not None:
            pulumi.set(__self__, "launch_mode", launch_mode)
        if launch_options is not None:
            pulumi.set(__self__, "launch_options", launch_options)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if platform_configs is not None:
            pulumi.set(__self__, "platform_configs", platform_configs)
        if preemptible_instance_configs is not None:
            pulumi.set(__self__, "preemptible_instance_configs", preemptible_instance_configs)
        if preferred_maintenance_action is not None:
            pulumi.set(__self__, "preferred_maintenance_action", preferred_maintenance_action)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)

    @property
    @pulumi.getter(name="agentConfigs")
    def agent_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailAgentConfigResult']]:
        return pulumi.get(self, "agent_configs")

    @property
    @pulumi.getter(name="availabilityConfigs")
    def availability_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailAvailabilityConfigResult']]:
        return pulumi.get(self, "availability_configs")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="extendedMetadata")
    def extended_metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "extended_metadata")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailInstanceOptionResult']]:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="launchMode")
    def launch_mode(self) -> Optional[str]:
        return pulumi.get(self, "launch_mode")

    @property
    @pulumi.getter(name="launchOptions")
    def launch_options(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOptionResult']]:
        return pulumi.get(self, "launch_options")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="platformConfigs")
    def platform_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailPlatformConfigResult']]:
        return pulumi.get(self, "platform_configs")

    @property
    @pulumi.getter(name="preemptibleInstanceConfigs")
    def preemptible_instance_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigResult']]:
        return pulumi.get(self, "preemptible_instance_configs")

    @property
    @pulumi.getter(name="preferredMaintenanceAction")
    def preferred_maintenance_action(self) -> Optional[str]:
        return pulumi.get(self, "preferred_maintenance_action")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetailResult']]:
        return pulumi.get(self, "source_details")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailLaunchDetailAgentConfigResult(dict):
    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailAgentConfigPluginsConfigResult']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailAgentConfigPluginsConfigResult']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailLaunchDetailAgentConfigPluginsConfigResult(dict):
    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailLaunchDetailAvailabilityConfigResult(dict):
    def __init__(__self__, *,
                 is_live_migration_preferred: Optional[bool] = None,
                 recovery_action: Optional[str] = None):
        if is_live_migration_preferred is not None:
            pulumi.set(__self__, "is_live_migration_preferred", is_live_migration_preferred)
        if recovery_action is not None:
            pulumi.set(__self__, "recovery_action", recovery_action)

    @property
    @pulumi.getter(name="isLiveMigrationPreferred")
    def is_live_migration_preferred(self) -> Optional[bool]:
        return pulumi.get(self, "is_live_migration_preferred")

    @property
    @pulumi.getter(name="recoveryAction")
    def recovery_action(self) -> Optional[str]:
        return pulumi.get(self, "recovery_action")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailLaunchDetailInstanceOptionResult(dict):
    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailLaunchDetailLaunchOptionResult(dict):
    def __init__(__self__, *,
                 boot_volume_type: Optional[str] = None,
                 firmware: Optional[str] = None,
                 is_consistent_volume_naming_enabled: Optional[bool] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 network_type: Optional[str] = None,
                 remote_data_volume_type: Optional[str] = None):
        if boot_volume_type is not None:
            pulumi.set(__self__, "boot_volume_type", boot_volume_type)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if is_consistent_volume_naming_enabled is not None:
            pulumi.set(__self__, "is_consistent_volume_naming_enabled", is_consistent_volume_naming_enabled)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if remote_data_volume_type is not None:
            pulumi.set(__self__, "remote_data_volume_type", remote_data_volume_type)

    @property
    @pulumi.getter(name="bootVolumeType")
    def boot_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_type")

    @property
    @pulumi.getter
    def firmware(self) -> Optional[str]:
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="isConsistentVolumeNamingEnabled")
    def is_consistent_volume_naming_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_consistent_volume_naming_enabled")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="remoteDataVolumeType")
    def remote_data_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "remote_data_volume_type")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailLaunchDetailPlatformConfigResult(dict):
    def __init__(__self__, *,
                 are_virtual_instructions_enabled: Optional[bool] = None,
                 config_map: Optional[Mapping[str, Any]] = None,
                 is_access_control_service_enabled: Optional[bool] = None,
                 is_input_output_memory_management_unit_enabled: Optional[bool] = None,
                 is_measured_boot_enabled: Optional[bool] = None,
                 is_memory_encryption_enabled: Optional[bool] = None,
                 is_secure_boot_enabled: Optional[bool] = None,
                 is_symmetric_multi_threading_enabled: Optional[bool] = None,
                 is_trusted_platform_module_enabled: Optional[bool] = None,
                 numa_nodes_per_socket: Optional[str] = None,
                 percentage_of_cores_enabled: Optional[int] = None,
                 type: Optional[str] = None):
        if are_virtual_instructions_enabled is not None:
            pulumi.set(__self__, "are_virtual_instructions_enabled", are_virtual_instructions_enabled)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if is_access_control_service_enabled is not None:
            pulumi.set(__self__, "is_access_control_service_enabled", is_access_control_service_enabled)
        if is_input_output_memory_management_unit_enabled is not None:
            pulumi.set(__self__, "is_input_output_memory_management_unit_enabled", is_input_output_memory_management_unit_enabled)
        if is_measured_boot_enabled is not None:
            pulumi.set(__self__, "is_measured_boot_enabled", is_measured_boot_enabled)
        if is_memory_encryption_enabled is not None:
            pulumi.set(__self__, "is_memory_encryption_enabled", is_memory_encryption_enabled)
        if is_secure_boot_enabled is not None:
            pulumi.set(__self__, "is_secure_boot_enabled", is_secure_boot_enabled)
        if is_symmetric_multi_threading_enabled is not None:
            pulumi.set(__self__, "is_symmetric_multi_threading_enabled", is_symmetric_multi_threading_enabled)
        if is_trusted_platform_module_enabled is not None:
            pulumi.set(__self__, "is_trusted_platform_module_enabled", is_trusted_platform_module_enabled)
        if numa_nodes_per_socket is not None:
            pulumi.set(__self__, "numa_nodes_per_socket", numa_nodes_per_socket)
        if percentage_of_cores_enabled is not None:
            pulumi.set(__self__, "percentage_of_cores_enabled", percentage_of_cores_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="areVirtualInstructionsEnabled")
    def are_virtual_instructions_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_virtual_instructions_enabled")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="isAccessControlServiceEnabled")
    def is_access_control_service_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_access_control_service_enabled")

    @property
    @pulumi.getter(name="isInputOutputMemoryManagementUnitEnabled")
    def is_input_output_memory_management_unit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_input_output_memory_management_unit_enabled")

    @property
    @pulumi.getter(name="isMeasuredBootEnabled")
    def is_measured_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_measured_boot_enabled")

    @property
    @pulumi.getter(name="isMemoryEncryptionEnabled")
    def is_memory_encryption_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_memory_encryption_enabled")

    @property
    @pulumi.getter(name="isSecureBootEnabled")
    def is_secure_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure_boot_enabled")

    @property
    @pulumi.getter(name="isSymmetricMultiThreadingEnabled")
    def is_symmetric_multi_threading_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_symmetric_multi_threading_enabled")

    @property
    @pulumi.getter(name="isTrustedPlatformModuleEnabled")
    def is_trusted_platform_module_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_trusted_platform_module_enabled")

    @property
    @pulumi.getter(name="numaNodesPerSocket")
    def numa_nodes_per_socket(self) -> Optional[str]:
        return pulumi.get(self, "numa_nodes_per_socket")

    @property
    @pulumi.getter(name="percentageOfCoresEnabled")
    def percentage_of_cores_enabled(self) -> Optional[int]:
        return pulumi.get(self, "percentage_of_cores_enabled")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigResult(dict):
    def __init__(__self__, *,
                 preemption_actions: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigPreemptionActionResult']] = None):
        if preemption_actions is not None:
            pulumi.set(__self__, "preemption_actions", preemption_actions)

    @property
    @pulumi.getter(name="preemptionActions")
    def preemption_actions(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigPreemptionActionResult']]:
        return pulumi.get(self, "preemption_actions")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigPreemptionActionResult(dict):
    def __init__(__self__, *,
                 preserve_boot_volume: Optional[bool] = None,
                 type: Optional[str] = None):
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailLaunchDetailShapeConfigResult(dict):
    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 memory_in_gbs: Optional[float] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[float] = None,
                 vcpus: Optional[int] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[int]:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetailResult(dict):
    def __init__(__self__, *,
                 boot_volume_id: Optional[str] = None,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 image_id: Optional[str] = None,
                 instance_source_image_filter_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult']] = None,
                 kms_key_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_source_image_filter_details is not None:
            pulumi.set(__self__, "instance_source_image_filter_details", instance_source_image_filter_details)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceSourceImageFilterDetails")
    def instance_source_image_filter_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult']]:
        return pulumi.get(self, "instance_source_image_filter_details")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags_filter: Optional[Mapping[str, Any]] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags_filter is not None:
            pulumi.set(__self__, "defined_tags_filter", defined_tags_filter)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTagsFilter")
    def defined_tags_filter(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags_filter")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionResult(dict):
    def __init__(__self__, *,
                 block_volumes: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionBlockVolumeResult']] = None,
                 launch_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailResult']] = None,
                 secondary_vnics: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionSecondaryVnicResult']] = None):
        if block_volumes is not None:
            pulumi.set(__self__, "block_volumes", block_volumes)
        if launch_details is not None:
            pulumi.set(__self__, "launch_details", launch_details)
        if secondary_vnics is not None:
            pulumi.set(__self__, "secondary_vnics", secondary_vnics)

    @property
    @pulumi.getter(name="blockVolumes")
    def block_volumes(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionBlockVolumeResult']]:
        return pulumi.get(self, "block_volumes")

    @property
    @pulumi.getter(name="launchDetails")
    def launch_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailResult']]:
        return pulumi.get(self, "launch_details")

    @property
    @pulumi.getter(name="secondaryVnics")
    def secondary_vnics(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionSecondaryVnicResult']]:
        return pulumi.get(self, "secondary_vnics")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionBlockVolumeResult(dict):
    def __init__(__self__, *,
                 attach_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionBlockVolumeAttachDetailResult']] = None,
                 create_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailResult']] = None,
                 volume_id: Optional[str] = None):
        if attach_details is not None:
            pulumi.set(__self__, "attach_details", attach_details)
        if create_details is not None:
            pulumi.set(__self__, "create_details", create_details)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="attachDetails")
    def attach_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionBlockVolumeAttachDetailResult']]:
        return pulumi.get(self, "attach_details")

    @property
    @pulumi.getter(name="createDetails")
    def create_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailResult']]:
        return pulumi.get(self, "create_details")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionBlockVolumeAttachDetailResult(dict):
    def __init__(__self__, *,
                 device: Optional[str] = None,
                 display_name: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 is_read_only: Optional[bool] = None,
                 is_shareable: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_chap: Optional[bool] = None):
        if device is not None:
            pulumi.set(__self__, "device", device)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if is_shareable is not None:
            pulumi.set(__self__, "is_shareable", is_shareable)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_chap is not None:
            pulumi.set(__self__, "use_chap", use_chap)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_read_only")

    @property
    @pulumi.getter(name="isShareable")
    def is_shareable(self) -> Optional[bool]:
        return pulumi.get(self, "is_shareable")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useChap")
    def use_chap(self) -> Optional[bool]:
        return pulumi.get(self, "use_chap")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailResult(dict):
    def __init__(__self__, *,
                 autotune_policies: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailAutotunePolicyResult']] = None,
                 availability_domain: Optional[str] = None,
                 backup_policy_id: Optional[str] = None,
                 block_volume_replicas: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailBlockVolumeReplicaResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 is_auto_tune_enabled: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 size_in_gbs: Optional[str] = None,
                 source_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailSourceDetailResult']] = None,
                 vpus_per_gb: Optional[str] = None):
        if autotune_policies is not None:
            pulumi.set(__self__, "autotune_policies", autotune_policies)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if backup_policy_id is not None:
            pulumi.set(__self__, "backup_policy_id", backup_policy_id)
        if block_volume_replicas is not None:
            pulumi.set(__self__, "block_volume_replicas", block_volume_replicas)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_auto_tune_enabled is not None:
            pulumi.set(__self__, "is_auto_tune_enabled", is_auto_tune_enabled)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size_in_gbs is not None:
            pulumi.set(__self__, "size_in_gbs", size_in_gbs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)
        if vpus_per_gb is not None:
            pulumi.set(__self__, "vpus_per_gb", vpus_per_gb)

    @property
    @pulumi.getter(name="autotunePolicies")
    def autotune_policies(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailAutotunePolicyResult']]:
        return pulumi.get(self, "autotune_policies")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "backup_policy_id")

    @property
    @pulumi.getter(name="blockVolumeReplicas")
    def block_volume_replicas(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailBlockVolumeReplicaResult']]:
        return pulumi.get(self, "block_volume_replicas")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isAutoTuneEnabled")
    def is_auto_tune_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_tune_enabled")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sizeInGbs")
    def size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_gbs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailSourceDetailResult']]:
        return pulumi.get(self, "source_details")

    @property
    @pulumi.getter(name="vpusPerGb")
    def vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "vpus_per_gb")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailAutotunePolicyResult(dict):
    def __init__(__self__, *,
                 autotune_type: Optional[str] = None,
                 max_vpus_per_gb: Optional[str] = None):
        if autotune_type is not None:
            pulumi.set(__self__, "autotune_type", autotune_type)
        if max_vpus_per_gb is not None:
            pulumi.set(__self__, "max_vpus_per_gb", max_vpus_per_gb)

    @property
    @pulumi.getter(name="autotuneType")
    def autotune_type(self) -> Optional[str]:
        return pulumi.get(self, "autotune_type")

    @property
    @pulumi.getter(name="maxVpusPerGb")
    def max_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "max_vpus_per_gb")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailBlockVolumeReplicaResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 display_name: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailSourceDetailResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 type: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionLaunchDetailResult(dict):
    def __init__(__self__, *,
                 agent_configs: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigResult']] = None,
                 availability_configs: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailAvailabilityConfigResult']] = None,
                 availability_domain: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailResult']] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 extended_metadata: Optional[Mapping[str, Any]] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 instance_options: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailInstanceOptionResult']] = None,
                 ipxe_script: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 launch_mode: Optional[str] = None,
                 launch_options: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailLaunchOptionResult']] = None,
                 metadata: Optional[Mapping[str, Any]] = None,
                 platform_configs: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailPlatformConfigResult']] = None,
                 preemptible_instance_configs: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigResult']] = None,
                 preferred_maintenance_action: Optional[str] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailShapeConfigResult']] = None,
                 source_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailResult']] = None):
        if agent_configs is not None:
            pulumi.set(__self__, "agent_configs", agent_configs)
        if availability_configs is not None:
            pulumi.set(__self__, "availability_configs", availability_configs)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if extended_metadata is not None:
            pulumi.set(__self__, "extended_metadata", extended_metadata)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if launch_mode is not None:
            pulumi.set(__self__, "launch_mode", launch_mode)
        if launch_options is not None:
            pulumi.set(__self__, "launch_options", launch_options)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if platform_configs is not None:
            pulumi.set(__self__, "platform_configs", platform_configs)
        if preemptible_instance_configs is not None:
            pulumi.set(__self__, "preemptible_instance_configs", preemptible_instance_configs)
        if preferred_maintenance_action is not None:
            pulumi.set(__self__, "preferred_maintenance_action", preferred_maintenance_action)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)

    @property
    @pulumi.getter(name="agentConfigs")
    def agent_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigResult']]:
        return pulumi.get(self, "agent_configs")

    @property
    @pulumi.getter(name="availabilityConfigs")
    def availability_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailAvailabilityConfigResult']]:
        return pulumi.get(self, "availability_configs")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="extendedMetadata")
    def extended_metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "extended_metadata")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailInstanceOptionResult']]:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="launchMode")
    def launch_mode(self) -> Optional[str]:
        return pulumi.get(self, "launch_mode")

    @property
    @pulumi.getter(name="launchOptions")
    def launch_options(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailLaunchOptionResult']]:
        return pulumi.get(self, "launch_options")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="platformConfigs")
    def platform_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailPlatformConfigResult']]:
        return pulumi.get(self, "platform_configs")

    @property
    @pulumi.getter(name="preemptibleInstanceConfigs")
    def preemptible_instance_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigResult']]:
        return pulumi.get(self, "preemptible_instance_configs")

    @property
    @pulumi.getter(name="preferredMaintenanceAction")
    def preferred_maintenance_action(self) -> Optional[str]:
        return pulumi.get(self, "preferred_maintenance_action")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailResult']]:
        return pulumi.get(self, "source_details")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigResult(dict):
    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigPluginsConfigResult']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigPluginsConfigResult']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigPluginsConfigResult(dict):
    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionLaunchDetailAvailabilityConfigResult(dict):
    def __init__(__self__, *,
                 is_live_migration_preferred: Optional[bool] = None,
                 recovery_action: Optional[str] = None):
        if is_live_migration_preferred is not None:
            pulumi.set(__self__, "is_live_migration_preferred", is_live_migration_preferred)
        if recovery_action is not None:
            pulumi.set(__self__, "recovery_action", recovery_action)

    @property
    @pulumi.getter(name="isLiveMigrationPreferred")
    def is_live_migration_preferred(self) -> Optional[bool]:
        return pulumi.get(self, "is_live_migration_preferred")

    @property
    @pulumi.getter(name="recoveryAction")
    def recovery_action(self) -> Optional[str]:
        return pulumi.get(self, "recovery_action")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionLaunchDetailInstanceOptionResult(dict):
    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionLaunchDetailLaunchOptionResult(dict):
    def __init__(__self__, *,
                 boot_volume_type: Optional[str] = None,
                 firmware: Optional[str] = None,
                 is_consistent_volume_naming_enabled: Optional[bool] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 network_type: Optional[str] = None,
                 remote_data_volume_type: Optional[str] = None):
        if boot_volume_type is not None:
            pulumi.set(__self__, "boot_volume_type", boot_volume_type)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if is_consistent_volume_naming_enabled is not None:
            pulumi.set(__self__, "is_consistent_volume_naming_enabled", is_consistent_volume_naming_enabled)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if remote_data_volume_type is not None:
            pulumi.set(__self__, "remote_data_volume_type", remote_data_volume_type)

    @property
    @pulumi.getter(name="bootVolumeType")
    def boot_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_type")

    @property
    @pulumi.getter
    def firmware(self) -> Optional[str]:
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="isConsistentVolumeNamingEnabled")
    def is_consistent_volume_naming_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_consistent_volume_naming_enabled")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="remoteDataVolumeType")
    def remote_data_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "remote_data_volume_type")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionLaunchDetailPlatformConfigResult(dict):
    def __init__(__self__, *,
                 are_virtual_instructions_enabled: Optional[bool] = None,
                 is_access_control_service_enabled: Optional[bool] = None,
                 is_input_output_memory_management_unit_enabled: Optional[bool] = None,
                 is_measured_boot_enabled: Optional[bool] = None,
                 is_memory_encryption_enabled: Optional[bool] = None,
                 is_secure_boot_enabled: Optional[bool] = None,
                 is_symmetric_multi_threading_enabled: Optional[bool] = None,
                 is_trusted_platform_module_enabled: Optional[bool] = None,
                 numa_nodes_per_socket: Optional[str] = None,
                 percentage_of_cores_enabled: Optional[int] = None,
                 type: Optional[str] = None):
        if are_virtual_instructions_enabled is not None:
            pulumi.set(__self__, "are_virtual_instructions_enabled", are_virtual_instructions_enabled)
        if is_access_control_service_enabled is not None:
            pulumi.set(__self__, "is_access_control_service_enabled", is_access_control_service_enabled)
        if is_input_output_memory_management_unit_enabled is not None:
            pulumi.set(__self__, "is_input_output_memory_management_unit_enabled", is_input_output_memory_management_unit_enabled)
        if is_measured_boot_enabled is not None:
            pulumi.set(__self__, "is_measured_boot_enabled", is_measured_boot_enabled)
        if is_memory_encryption_enabled is not None:
            pulumi.set(__self__, "is_memory_encryption_enabled", is_memory_encryption_enabled)
        if is_secure_boot_enabled is not None:
            pulumi.set(__self__, "is_secure_boot_enabled", is_secure_boot_enabled)
        if is_symmetric_multi_threading_enabled is not None:
            pulumi.set(__self__, "is_symmetric_multi_threading_enabled", is_symmetric_multi_threading_enabled)
        if is_trusted_platform_module_enabled is not None:
            pulumi.set(__self__, "is_trusted_platform_module_enabled", is_trusted_platform_module_enabled)
        if numa_nodes_per_socket is not None:
            pulumi.set(__self__, "numa_nodes_per_socket", numa_nodes_per_socket)
        if percentage_of_cores_enabled is not None:
            pulumi.set(__self__, "percentage_of_cores_enabled", percentage_of_cores_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="areVirtualInstructionsEnabled")
    def are_virtual_instructions_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_virtual_instructions_enabled")

    @property
    @pulumi.getter(name="isAccessControlServiceEnabled")
    def is_access_control_service_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_access_control_service_enabled")

    @property
    @pulumi.getter(name="isInputOutputMemoryManagementUnitEnabled")
    def is_input_output_memory_management_unit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_input_output_memory_management_unit_enabled")

    @property
    @pulumi.getter(name="isMeasuredBootEnabled")
    def is_measured_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_measured_boot_enabled")

    @property
    @pulumi.getter(name="isMemoryEncryptionEnabled")
    def is_memory_encryption_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_memory_encryption_enabled")

    @property
    @pulumi.getter(name="isSecureBootEnabled")
    def is_secure_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure_boot_enabled")

    @property
    @pulumi.getter(name="isSymmetricMultiThreadingEnabled")
    def is_symmetric_multi_threading_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_symmetric_multi_threading_enabled")

    @property
    @pulumi.getter(name="isTrustedPlatformModuleEnabled")
    def is_trusted_platform_module_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_trusted_platform_module_enabled")

    @property
    @pulumi.getter(name="numaNodesPerSocket")
    def numa_nodes_per_socket(self) -> Optional[str]:
        return pulumi.get(self, "numa_nodes_per_socket")

    @property
    @pulumi.getter(name="percentageOfCoresEnabled")
    def percentage_of_cores_enabled(self) -> Optional[int]:
        return pulumi.get(self, "percentage_of_cores_enabled")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigResult(dict):
    def __init__(__self__, *,
                 preemption_actions: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigPreemptionActionResult']] = None):
        if preemption_actions is not None:
            pulumi.set(__self__, "preemption_actions", preemption_actions)

    @property
    @pulumi.getter(name="preemptionActions")
    def preemption_actions(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigPreemptionActionResult']]:
        return pulumi.get(self, "preemption_actions")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigPreemptionActionResult(dict):
    def __init__(__self__, *,
                 preserve_boot_volume: Optional[bool] = None,
                 type: Optional[str] = None):
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionLaunchDetailShapeConfigResult(dict):
    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 memory_in_gbs: Optional[float] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[float] = None,
                 vcpus: Optional[int] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[int]:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailResult(dict):
    def __init__(__self__, *,
                 boot_volume_id: Optional[str] = None,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 image_id: Optional[str] = None,
                 instance_source_image_filter_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult']] = None,
                 kms_key_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_source_image_filter_details is not None:
            pulumi.set(__self__, "instance_source_image_filter_details", instance_source_image_filter_details)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceSourceImageFilterDetails")
    def instance_source_image_filter_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult']]:
        return pulumi.get(self, "instance_source_image_filter_details")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags_filter: Optional[Mapping[str, Any]] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags_filter is not None:
            pulumi.set(__self__, "defined_tags_filter", defined_tags_filter)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTagsFilter")
    def defined_tags_filter(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags_filter")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionSecondaryVnicResult(dict):
    def __init__(__self__, *,
                 create_vnic_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailResult']] = None,
                 display_name: Optional[str] = None,
                 nic_index: Optional[int] = None):
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if nic_index is not None:
            pulumi.set(__self__, "nic_index", nic_index)

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="nicIndex")
    def nic_index(self) -> Optional[int]:
        return pulumi.get(self, "nic_index")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailSecondaryVnicResult(dict):
    def __init__(__self__, *,
                 create_vnic_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailResult']] = None,
                 display_name: Optional[str] = None,
                 nic_index: Optional[int] = None):
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if nic_index is not None:
            pulumi.set(__self__, "nic_index", nic_index)

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="nicIndex")
    def nic_index(self) -> Optional[int]:
        return pulumi.get(self, "nic_index")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetInstanceConfigurationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 deferred_fields: Optional[Sequence[str]] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 instance_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailResult']] = None,
                 instance_id: Optional[str] = None,
                 source: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if deferred_fields is not None:
            pulumi.set(__self__, "deferred_fields", deferred_fields)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_details is not None:
            pulumi.set(__self__, "instance_details", instance_details)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="deferredFields")
    def deferred_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "deferred_fields")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceDetails")
    def instance_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailResult']]:
        return pulumi.get(self, "instance_details")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailResult(dict):
    def __init__(__self__, *,
                 block_volumes: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeResult']] = None,
                 instance_type: Optional[str] = None,
                 launch_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailResult']] = None,
                 options: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionResult']] = None,
                 secondary_vnics: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicResult']] = None):
        if block_volumes is not None:
            pulumi.set(__self__, "block_volumes", block_volumes)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if launch_details is not None:
            pulumi.set(__self__, "launch_details", launch_details)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if secondary_vnics is not None:
            pulumi.set(__self__, "secondary_vnics", secondary_vnics)

    @property
    @pulumi.getter(name="blockVolumes")
    def block_volumes(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeResult']]:
        return pulumi.get(self, "block_volumes")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="launchDetails")
    def launch_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailResult']]:
        return pulumi.get(self, "launch_details")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionResult']]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="secondaryVnics")
    def secondary_vnics(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicResult']]:
        return pulumi.get(self, "secondary_vnics")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeResult(dict):
    def __init__(__self__, *,
                 attach_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeAttachDetailResult']] = None,
                 create_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailResult']] = None,
                 volume_id: Optional[str] = None):
        if attach_details is not None:
            pulumi.set(__self__, "attach_details", attach_details)
        if create_details is not None:
            pulumi.set(__self__, "create_details", create_details)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="attachDetails")
    def attach_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeAttachDetailResult']]:
        return pulumi.get(self, "attach_details")

    @property
    @pulumi.getter(name="createDetails")
    def create_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailResult']]:
        return pulumi.get(self, "create_details")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeAttachDetailResult(dict):
    def __init__(__self__, *,
                 device: Optional[str] = None,
                 display_name: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 is_read_only: Optional[bool] = None,
                 is_shareable: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_chap: Optional[bool] = None):
        if device is not None:
            pulumi.set(__self__, "device", device)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if is_shareable is not None:
            pulumi.set(__self__, "is_shareable", is_shareable)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_chap is not None:
            pulumi.set(__self__, "use_chap", use_chap)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_read_only")

    @property
    @pulumi.getter(name="isShareable")
    def is_shareable(self) -> Optional[bool]:
        return pulumi.get(self, "is_shareable")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useChap")
    def use_chap(self) -> Optional[bool]:
        return pulumi.get(self, "use_chap")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailResult(dict):
    def __init__(__self__, *,
                 autotune_policies: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailAutotunePolicyResult']] = None,
                 availability_domain: Optional[str] = None,
                 backup_policy_id: Optional[str] = None,
                 block_volume_replicas: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailBlockVolumeReplicaResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 is_auto_tune_enabled: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 size_in_gbs: Optional[str] = None,
                 source_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailSourceDetailResult']] = None,
                 vpus_per_gb: Optional[str] = None):
        if autotune_policies is not None:
            pulumi.set(__self__, "autotune_policies", autotune_policies)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if backup_policy_id is not None:
            pulumi.set(__self__, "backup_policy_id", backup_policy_id)
        if block_volume_replicas is not None:
            pulumi.set(__self__, "block_volume_replicas", block_volume_replicas)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_auto_tune_enabled is not None:
            pulumi.set(__self__, "is_auto_tune_enabled", is_auto_tune_enabled)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size_in_gbs is not None:
            pulumi.set(__self__, "size_in_gbs", size_in_gbs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)
        if vpus_per_gb is not None:
            pulumi.set(__self__, "vpus_per_gb", vpus_per_gb)

    @property
    @pulumi.getter(name="autotunePolicies")
    def autotune_policies(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailAutotunePolicyResult']]:
        return pulumi.get(self, "autotune_policies")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "backup_policy_id")

    @property
    @pulumi.getter(name="blockVolumeReplicas")
    def block_volume_replicas(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailBlockVolumeReplicaResult']]:
        return pulumi.get(self, "block_volume_replicas")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isAutoTuneEnabled")
    def is_auto_tune_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_tune_enabled")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sizeInGbs")
    def size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_gbs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailSourceDetailResult']]:
        return pulumi.get(self, "source_details")

    @property
    @pulumi.getter(name="vpusPerGb")
    def vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "vpus_per_gb")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailAutotunePolicyResult(dict):
    def __init__(__self__, *,
                 autotune_type: Optional[str] = None,
                 max_vpus_per_gb: Optional[str] = None):
        if autotune_type is not None:
            pulumi.set(__self__, "autotune_type", autotune_type)
        if max_vpus_per_gb is not None:
            pulumi.set(__self__, "max_vpus_per_gb", max_vpus_per_gb)

    @property
    @pulumi.getter(name="autotuneType")
    def autotune_type(self) -> Optional[str]:
        return pulumi.get(self, "autotune_type")

    @property
    @pulumi.getter(name="maxVpusPerGb")
    def max_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "max_vpus_per_gb")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailBlockVolumeReplicaResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 display_name: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailBlockVolumeCreateDetailSourceDetailResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 type: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailResult(dict):
    def __init__(__self__, *,
                 agent_configs: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAgentConfigResult']] = None,
                 availability_configs: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAvailabilityConfigResult']] = None,
                 availability_domain: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailResult']] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 extended_metadata: Optional[Mapping[str, Any]] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 instance_options: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailInstanceOptionResult']] = None,
                 ipxe_script: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 launch_mode: Optional[str] = None,
                 launch_options: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailLaunchOptionResult']] = None,
                 metadata: Optional[Mapping[str, Any]] = None,
                 platform_configs: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPlatformConfigResult']] = None,
                 preemptible_instance_configs: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigResult']] = None,
                 preferred_maintenance_action: Optional[str] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailShapeConfigResult']] = None,
                 source_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailSourceDetailResult']] = None):
        if agent_configs is not None:
            pulumi.set(__self__, "agent_configs", agent_configs)
        if availability_configs is not None:
            pulumi.set(__self__, "availability_configs", availability_configs)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if extended_metadata is not None:
            pulumi.set(__self__, "extended_metadata", extended_metadata)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if launch_mode is not None:
            pulumi.set(__self__, "launch_mode", launch_mode)
        if launch_options is not None:
            pulumi.set(__self__, "launch_options", launch_options)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if platform_configs is not None:
            pulumi.set(__self__, "platform_configs", platform_configs)
        if preemptible_instance_configs is not None:
            pulumi.set(__self__, "preemptible_instance_configs", preemptible_instance_configs)
        if preferred_maintenance_action is not None:
            pulumi.set(__self__, "preferred_maintenance_action", preferred_maintenance_action)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)

    @property
    @pulumi.getter(name="agentConfigs")
    def agent_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAgentConfigResult']]:
        return pulumi.get(self, "agent_configs")

    @property
    @pulumi.getter(name="availabilityConfigs")
    def availability_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAvailabilityConfigResult']]:
        return pulumi.get(self, "availability_configs")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="extendedMetadata")
    def extended_metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "extended_metadata")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailInstanceOptionResult']]:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="launchMode")
    def launch_mode(self) -> Optional[str]:
        return pulumi.get(self, "launch_mode")

    @property
    @pulumi.getter(name="launchOptions")
    def launch_options(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailLaunchOptionResult']]:
        return pulumi.get(self, "launch_options")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="platformConfigs")
    def platform_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPlatformConfigResult']]:
        return pulumi.get(self, "platform_configs")

    @property
    @pulumi.getter(name="preemptibleInstanceConfigs")
    def preemptible_instance_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigResult']]:
        return pulumi.get(self, "preemptible_instance_configs")

    @property
    @pulumi.getter(name="preferredMaintenanceAction")
    def preferred_maintenance_action(self) -> Optional[str]:
        return pulumi.get(self, "preferred_maintenance_action")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailSourceDetailResult']]:
        return pulumi.get(self, "source_details")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAgentConfigResult(dict):
    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAgentConfigPluginsConfigResult']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAgentConfigPluginsConfigResult']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAgentConfigPluginsConfigResult(dict):
    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailAvailabilityConfigResult(dict):
    def __init__(__self__, *,
                 is_live_migration_preferred: Optional[bool] = None,
                 recovery_action: Optional[str] = None):
        if is_live_migration_preferred is not None:
            pulumi.set(__self__, "is_live_migration_preferred", is_live_migration_preferred)
        if recovery_action is not None:
            pulumi.set(__self__, "recovery_action", recovery_action)

    @property
    @pulumi.getter(name="isLiveMigrationPreferred")
    def is_live_migration_preferred(self) -> Optional[bool]:
        return pulumi.get(self, "is_live_migration_preferred")

    @property
    @pulumi.getter(name="recoveryAction")
    def recovery_action(self) -> Optional[str]:
        return pulumi.get(self, "recovery_action")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailInstanceOptionResult(dict):
    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailLaunchOptionResult(dict):
    def __init__(__self__, *,
                 boot_volume_type: Optional[str] = None,
                 firmware: Optional[str] = None,
                 is_consistent_volume_naming_enabled: Optional[bool] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 network_type: Optional[str] = None,
                 remote_data_volume_type: Optional[str] = None):
        if boot_volume_type is not None:
            pulumi.set(__self__, "boot_volume_type", boot_volume_type)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if is_consistent_volume_naming_enabled is not None:
            pulumi.set(__self__, "is_consistent_volume_naming_enabled", is_consistent_volume_naming_enabled)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if remote_data_volume_type is not None:
            pulumi.set(__self__, "remote_data_volume_type", remote_data_volume_type)

    @property
    @pulumi.getter(name="bootVolumeType")
    def boot_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_type")

    @property
    @pulumi.getter
    def firmware(self) -> Optional[str]:
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="isConsistentVolumeNamingEnabled")
    def is_consistent_volume_naming_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_consistent_volume_naming_enabled")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="remoteDataVolumeType")
    def remote_data_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "remote_data_volume_type")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPlatformConfigResult(dict):
    def __init__(__self__, *,
                 are_virtual_instructions_enabled: Optional[bool] = None,
                 config_map: Optional[Mapping[str, Any]] = None,
                 is_access_control_service_enabled: Optional[bool] = None,
                 is_input_output_memory_management_unit_enabled: Optional[bool] = None,
                 is_measured_boot_enabled: Optional[bool] = None,
                 is_memory_encryption_enabled: Optional[bool] = None,
                 is_secure_boot_enabled: Optional[bool] = None,
                 is_symmetric_multi_threading_enabled: Optional[bool] = None,
                 is_trusted_platform_module_enabled: Optional[bool] = None,
                 numa_nodes_per_socket: Optional[str] = None,
                 percentage_of_cores_enabled: Optional[int] = None,
                 type: Optional[str] = None):
        if are_virtual_instructions_enabled is not None:
            pulumi.set(__self__, "are_virtual_instructions_enabled", are_virtual_instructions_enabled)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if is_access_control_service_enabled is not None:
            pulumi.set(__self__, "is_access_control_service_enabled", is_access_control_service_enabled)
        if is_input_output_memory_management_unit_enabled is not None:
            pulumi.set(__self__, "is_input_output_memory_management_unit_enabled", is_input_output_memory_management_unit_enabled)
        if is_measured_boot_enabled is not None:
            pulumi.set(__self__, "is_measured_boot_enabled", is_measured_boot_enabled)
        if is_memory_encryption_enabled is not None:
            pulumi.set(__self__, "is_memory_encryption_enabled", is_memory_encryption_enabled)
        if is_secure_boot_enabled is not None:
            pulumi.set(__self__, "is_secure_boot_enabled", is_secure_boot_enabled)
        if is_symmetric_multi_threading_enabled is not None:
            pulumi.set(__self__, "is_symmetric_multi_threading_enabled", is_symmetric_multi_threading_enabled)
        if is_trusted_platform_module_enabled is not None:
            pulumi.set(__self__, "is_trusted_platform_module_enabled", is_trusted_platform_module_enabled)
        if numa_nodes_per_socket is not None:
            pulumi.set(__self__, "numa_nodes_per_socket", numa_nodes_per_socket)
        if percentage_of_cores_enabled is not None:
            pulumi.set(__self__, "percentage_of_cores_enabled", percentage_of_cores_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="areVirtualInstructionsEnabled")
    def are_virtual_instructions_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_virtual_instructions_enabled")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="isAccessControlServiceEnabled")
    def is_access_control_service_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_access_control_service_enabled")

    @property
    @pulumi.getter(name="isInputOutputMemoryManagementUnitEnabled")
    def is_input_output_memory_management_unit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_input_output_memory_management_unit_enabled")

    @property
    @pulumi.getter(name="isMeasuredBootEnabled")
    def is_measured_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_measured_boot_enabled")

    @property
    @pulumi.getter(name="isMemoryEncryptionEnabled")
    def is_memory_encryption_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_memory_encryption_enabled")

    @property
    @pulumi.getter(name="isSecureBootEnabled")
    def is_secure_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure_boot_enabled")

    @property
    @pulumi.getter(name="isSymmetricMultiThreadingEnabled")
    def is_symmetric_multi_threading_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_symmetric_multi_threading_enabled")

    @property
    @pulumi.getter(name="isTrustedPlatformModuleEnabled")
    def is_trusted_platform_module_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_trusted_platform_module_enabled")

    @property
    @pulumi.getter(name="numaNodesPerSocket")
    def numa_nodes_per_socket(self) -> Optional[str]:
        return pulumi.get(self, "numa_nodes_per_socket")

    @property
    @pulumi.getter(name="percentageOfCoresEnabled")
    def percentage_of_cores_enabled(self) -> Optional[int]:
        return pulumi.get(self, "percentage_of_cores_enabled")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigResult(dict):
    def __init__(__self__, *,
                 preemption_actions: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigPreemptionActionResult']] = None):
        if preemption_actions is not None:
            pulumi.set(__self__, "preemption_actions", preemption_actions)

    @property
    @pulumi.getter(name="preemptionActions")
    def preemption_actions(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigPreemptionActionResult']]:
        return pulumi.get(self, "preemption_actions")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailPreemptibleInstanceConfigPreemptionActionResult(dict):
    def __init__(__self__, *,
                 preserve_boot_volume: Optional[bool] = None,
                 type: Optional[str] = None):
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailShapeConfigResult(dict):
    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 memory_in_gbs: Optional[float] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[float] = None,
                 vcpus: Optional[int] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[int]:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailSourceDetailResult(dict):
    def __init__(__self__, *,
                 boot_volume_id: Optional[str] = None,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 image_id: Optional[str] = None,
                 instance_source_image_filter_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult']] = None,
                 kms_key_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_source_image_filter_details is not None:
            pulumi.set(__self__, "instance_source_image_filter_details", instance_source_image_filter_details)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceSourceImageFilterDetails")
    def instance_source_image_filter_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult']]:
        return pulumi.get(self, "instance_source_image_filter_details")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags_filter: Optional[Mapping[str, Any]] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags_filter is not None:
            pulumi.set(__self__, "defined_tags_filter", defined_tags_filter)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTagsFilter")
    def defined_tags_filter(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags_filter")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionResult(dict):
    def __init__(__self__, *,
                 block_volumes: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeResult']] = None,
                 launch_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailResult']] = None,
                 secondary_vnics: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicResult']] = None):
        if block_volumes is not None:
            pulumi.set(__self__, "block_volumes", block_volumes)
        if launch_details is not None:
            pulumi.set(__self__, "launch_details", launch_details)
        if secondary_vnics is not None:
            pulumi.set(__self__, "secondary_vnics", secondary_vnics)

    @property
    @pulumi.getter(name="blockVolumes")
    def block_volumes(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeResult']]:
        return pulumi.get(self, "block_volumes")

    @property
    @pulumi.getter(name="launchDetails")
    def launch_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailResult']]:
        return pulumi.get(self, "launch_details")

    @property
    @pulumi.getter(name="secondaryVnics")
    def secondary_vnics(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicResult']]:
        return pulumi.get(self, "secondary_vnics")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeResult(dict):
    def __init__(__self__, *,
                 attach_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeAttachDetailResult']] = None,
                 create_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailResult']] = None,
                 volume_id: Optional[str] = None):
        if attach_details is not None:
            pulumi.set(__self__, "attach_details", attach_details)
        if create_details is not None:
            pulumi.set(__self__, "create_details", create_details)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="attachDetails")
    def attach_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeAttachDetailResult']]:
        return pulumi.get(self, "attach_details")

    @property
    @pulumi.getter(name="createDetails")
    def create_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailResult']]:
        return pulumi.get(self, "create_details")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeAttachDetailResult(dict):
    def __init__(__self__, *,
                 device: Optional[str] = None,
                 display_name: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 is_read_only: Optional[bool] = None,
                 is_shareable: Optional[bool] = None,
                 type: Optional[str] = None,
                 use_chap: Optional[bool] = None):
        if device is not None:
            pulumi.set(__self__, "device", device)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if is_shareable is not None:
            pulumi.set(__self__, "is_shareable", is_shareable)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_chap is not None:
            pulumi.set(__self__, "use_chap", use_chap)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_read_only")

    @property
    @pulumi.getter(name="isShareable")
    def is_shareable(self) -> Optional[bool]:
        return pulumi.get(self, "is_shareable")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useChap")
    def use_chap(self) -> Optional[bool]:
        return pulumi.get(self, "use_chap")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailResult(dict):
    def __init__(__self__, *,
                 autotune_policies: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailAutotunePolicyResult']] = None,
                 availability_domain: Optional[str] = None,
                 backup_policy_id: Optional[str] = None,
                 block_volume_replicas: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailBlockVolumeReplicaResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 is_auto_tune_enabled: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 size_in_gbs: Optional[str] = None,
                 source_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailSourceDetailResult']] = None,
                 vpus_per_gb: Optional[str] = None):
        if autotune_policies is not None:
            pulumi.set(__self__, "autotune_policies", autotune_policies)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if backup_policy_id is not None:
            pulumi.set(__self__, "backup_policy_id", backup_policy_id)
        if block_volume_replicas is not None:
            pulumi.set(__self__, "block_volume_replicas", block_volume_replicas)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_auto_tune_enabled is not None:
            pulumi.set(__self__, "is_auto_tune_enabled", is_auto_tune_enabled)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size_in_gbs is not None:
            pulumi.set(__self__, "size_in_gbs", size_in_gbs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)
        if vpus_per_gb is not None:
            pulumi.set(__self__, "vpus_per_gb", vpus_per_gb)

    @property
    @pulumi.getter(name="autotunePolicies")
    def autotune_policies(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailAutotunePolicyResult']]:
        return pulumi.get(self, "autotune_policies")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "backup_policy_id")

    @property
    @pulumi.getter(name="blockVolumeReplicas")
    def block_volume_replicas(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailBlockVolumeReplicaResult']]:
        return pulumi.get(self, "block_volume_replicas")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isAutoTuneEnabled")
    def is_auto_tune_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_tune_enabled")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sizeInGbs")
    def size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_gbs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailSourceDetailResult']]:
        return pulumi.get(self, "source_details")

    @property
    @pulumi.getter(name="vpusPerGb")
    def vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "vpus_per_gb")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailAutotunePolicyResult(dict):
    def __init__(__self__, *,
                 autotune_type: Optional[str] = None,
                 max_vpus_per_gb: Optional[str] = None):
        if autotune_type is not None:
            pulumi.set(__self__, "autotune_type", autotune_type)
        if max_vpus_per_gb is not None:
            pulumi.set(__self__, "max_vpus_per_gb", max_vpus_per_gb)

    @property
    @pulumi.getter(name="autotuneType")
    def autotune_type(self) -> Optional[str]:
        return pulumi.get(self, "autotune_type")

    @property
    @pulumi.getter(name="maxVpusPerGb")
    def max_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "max_vpus_per_gb")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailBlockVolumeReplicaResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 display_name: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionBlockVolumeCreateDetailSourceDetailResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 type: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailResult(dict):
    def __init__(__self__, *,
                 agent_configs: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigResult']] = None,
                 availability_configs: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAvailabilityConfigResult']] = None,
                 availability_domain: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailResult']] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 extended_metadata: Optional[Mapping[str, Any]] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 instance_options: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailInstanceOptionResult']] = None,
                 ipxe_script: Optional[str] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 launch_mode: Optional[str] = None,
                 launch_options: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailLaunchOptionResult']] = None,
                 metadata: Optional[Mapping[str, Any]] = None,
                 platform_configs: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPlatformConfigResult']] = None,
                 preemptible_instance_configs: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigResult']] = None,
                 preferred_maintenance_action: Optional[str] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailShapeConfigResult']] = None,
                 source_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailResult']] = None):
        if agent_configs is not None:
            pulumi.set(__self__, "agent_configs", agent_configs)
        if availability_configs is not None:
            pulumi.set(__self__, "availability_configs", availability_configs)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if extended_metadata is not None:
            pulumi.set(__self__, "extended_metadata", extended_metadata)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if launch_mode is not None:
            pulumi.set(__self__, "launch_mode", launch_mode)
        if launch_options is not None:
            pulumi.set(__self__, "launch_options", launch_options)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if platform_configs is not None:
            pulumi.set(__self__, "platform_configs", platform_configs)
        if preemptible_instance_configs is not None:
            pulumi.set(__self__, "preemptible_instance_configs", preemptible_instance_configs)
        if preferred_maintenance_action is not None:
            pulumi.set(__self__, "preferred_maintenance_action", preferred_maintenance_action)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)

    @property
    @pulumi.getter(name="agentConfigs")
    def agent_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigResult']]:
        return pulumi.get(self, "agent_configs")

    @property
    @pulumi.getter(name="availabilityConfigs")
    def availability_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAvailabilityConfigResult']]:
        return pulumi.get(self, "availability_configs")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="extendedMetadata")
    def extended_metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "extended_metadata")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailInstanceOptionResult']]:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="launchMode")
    def launch_mode(self) -> Optional[str]:
        return pulumi.get(self, "launch_mode")

    @property
    @pulumi.getter(name="launchOptions")
    def launch_options(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailLaunchOptionResult']]:
        return pulumi.get(self, "launch_options")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="platformConfigs")
    def platform_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPlatformConfigResult']]:
        return pulumi.get(self, "platform_configs")

    @property
    @pulumi.getter(name="preemptibleInstanceConfigs")
    def preemptible_instance_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigResult']]:
        return pulumi.get(self, "preemptible_instance_configs")

    @property
    @pulumi.getter(name="preferredMaintenanceAction")
    def preferred_maintenance_action(self) -> Optional[str]:
        return pulumi.get(self, "preferred_maintenance_action")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailResult']]:
        return pulumi.get(self, "source_details")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigResult(dict):
    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigPluginsConfigResult']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigPluginsConfigResult']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAgentConfigPluginsConfigResult(dict):
    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailAvailabilityConfigResult(dict):
    def __init__(__self__, *,
                 is_live_migration_preferred: Optional[bool] = None,
                 recovery_action: Optional[str] = None):
        if is_live_migration_preferred is not None:
            pulumi.set(__self__, "is_live_migration_preferred", is_live_migration_preferred)
        if recovery_action is not None:
            pulumi.set(__self__, "recovery_action", recovery_action)

    @property
    @pulumi.getter(name="isLiveMigrationPreferred")
    def is_live_migration_preferred(self) -> Optional[bool]:
        return pulumi.get(self, "is_live_migration_preferred")

    @property
    @pulumi.getter(name="recoveryAction")
    def recovery_action(self) -> Optional[str]:
        return pulumi.get(self, "recovery_action")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailInstanceOptionResult(dict):
    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailLaunchOptionResult(dict):
    def __init__(__self__, *,
                 boot_volume_type: Optional[str] = None,
                 firmware: Optional[str] = None,
                 is_consistent_volume_naming_enabled: Optional[bool] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 network_type: Optional[str] = None,
                 remote_data_volume_type: Optional[str] = None):
        if boot_volume_type is not None:
            pulumi.set(__self__, "boot_volume_type", boot_volume_type)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if is_consistent_volume_naming_enabled is not None:
            pulumi.set(__self__, "is_consistent_volume_naming_enabled", is_consistent_volume_naming_enabled)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if remote_data_volume_type is not None:
            pulumi.set(__self__, "remote_data_volume_type", remote_data_volume_type)

    @property
    @pulumi.getter(name="bootVolumeType")
    def boot_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_type")

    @property
    @pulumi.getter
    def firmware(self) -> Optional[str]:
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="isConsistentVolumeNamingEnabled")
    def is_consistent_volume_naming_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_consistent_volume_naming_enabled")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="remoteDataVolumeType")
    def remote_data_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "remote_data_volume_type")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPlatformConfigResult(dict):
    def __init__(__self__, *,
                 are_virtual_instructions_enabled: Optional[bool] = None,
                 is_access_control_service_enabled: Optional[bool] = None,
                 is_input_output_memory_management_unit_enabled: Optional[bool] = None,
                 is_measured_boot_enabled: Optional[bool] = None,
                 is_memory_encryption_enabled: Optional[bool] = None,
                 is_secure_boot_enabled: Optional[bool] = None,
                 is_symmetric_multi_threading_enabled: Optional[bool] = None,
                 is_trusted_platform_module_enabled: Optional[bool] = None,
                 numa_nodes_per_socket: Optional[str] = None,
                 percentage_of_cores_enabled: Optional[int] = None,
                 type: Optional[str] = None):
        if are_virtual_instructions_enabled is not None:
            pulumi.set(__self__, "are_virtual_instructions_enabled", are_virtual_instructions_enabled)
        if is_access_control_service_enabled is not None:
            pulumi.set(__self__, "is_access_control_service_enabled", is_access_control_service_enabled)
        if is_input_output_memory_management_unit_enabled is not None:
            pulumi.set(__self__, "is_input_output_memory_management_unit_enabled", is_input_output_memory_management_unit_enabled)
        if is_measured_boot_enabled is not None:
            pulumi.set(__self__, "is_measured_boot_enabled", is_measured_boot_enabled)
        if is_memory_encryption_enabled is not None:
            pulumi.set(__self__, "is_memory_encryption_enabled", is_memory_encryption_enabled)
        if is_secure_boot_enabled is not None:
            pulumi.set(__self__, "is_secure_boot_enabled", is_secure_boot_enabled)
        if is_symmetric_multi_threading_enabled is not None:
            pulumi.set(__self__, "is_symmetric_multi_threading_enabled", is_symmetric_multi_threading_enabled)
        if is_trusted_platform_module_enabled is not None:
            pulumi.set(__self__, "is_trusted_platform_module_enabled", is_trusted_platform_module_enabled)
        if numa_nodes_per_socket is not None:
            pulumi.set(__self__, "numa_nodes_per_socket", numa_nodes_per_socket)
        if percentage_of_cores_enabled is not None:
            pulumi.set(__self__, "percentage_of_cores_enabled", percentage_of_cores_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="areVirtualInstructionsEnabled")
    def are_virtual_instructions_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_virtual_instructions_enabled")

    @property
    @pulumi.getter(name="isAccessControlServiceEnabled")
    def is_access_control_service_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_access_control_service_enabled")

    @property
    @pulumi.getter(name="isInputOutputMemoryManagementUnitEnabled")
    def is_input_output_memory_management_unit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_input_output_memory_management_unit_enabled")

    @property
    @pulumi.getter(name="isMeasuredBootEnabled")
    def is_measured_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_measured_boot_enabled")

    @property
    @pulumi.getter(name="isMemoryEncryptionEnabled")
    def is_memory_encryption_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_memory_encryption_enabled")

    @property
    @pulumi.getter(name="isSecureBootEnabled")
    def is_secure_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure_boot_enabled")

    @property
    @pulumi.getter(name="isSymmetricMultiThreadingEnabled")
    def is_symmetric_multi_threading_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_symmetric_multi_threading_enabled")

    @property
    @pulumi.getter(name="isTrustedPlatformModuleEnabled")
    def is_trusted_platform_module_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_trusted_platform_module_enabled")

    @property
    @pulumi.getter(name="numaNodesPerSocket")
    def numa_nodes_per_socket(self) -> Optional[str]:
        return pulumi.get(self, "numa_nodes_per_socket")

    @property
    @pulumi.getter(name="percentageOfCoresEnabled")
    def percentage_of_cores_enabled(self) -> Optional[int]:
        return pulumi.get(self, "percentage_of_cores_enabled")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigResult(dict):
    def __init__(__self__, *,
                 preemption_actions: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigPreemptionActionResult']] = None):
        if preemption_actions is not None:
            pulumi.set(__self__, "preemption_actions", preemption_actions)

    @property
    @pulumi.getter(name="preemptionActions")
    def preemption_actions(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigPreemptionActionResult']]:
        return pulumi.get(self, "preemption_actions")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailPreemptibleInstanceConfigPreemptionActionResult(dict):
    def __init__(__self__, *,
                 preserve_boot_volume: Optional[bool] = None,
                 type: Optional[str] = None):
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailShapeConfigResult(dict):
    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 memory_in_gbs: Optional[float] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[float] = None,
                 vcpus: Optional[int] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[int]:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailResult(dict):
    def __init__(__self__, *,
                 boot_volume_id: Optional[str] = None,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 image_id: Optional[str] = None,
                 instance_source_image_filter_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult']] = None,
                 kms_key_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_source_image_filter_details is not None:
            pulumi.set(__self__, "instance_source_image_filter_details", instance_source_image_filter_details)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceSourceImageFilterDetails")
    def instance_source_image_filter_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult']]:
        return pulumi.get(self, "instance_source_image_filter_details")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionLaunchDetailSourceDetailInstanceSourceImageFilterDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags_filter: Optional[Mapping[str, Any]] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags_filter is not None:
            pulumi.set(__self__, "defined_tags_filter", defined_tags_filter)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTagsFilter")
    def defined_tags_filter(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags_filter")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicResult(dict):
    def __init__(__self__, *,
                 create_vnic_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailResult']] = None,
                 display_name: Optional[str] = None,
                 nic_index: Optional[int] = None):
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if nic_index is not None:
            pulumi.set(__self__, "nic_index", nic_index)

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="nicIndex")
    def nic_index(self) -> Optional[int]:
        return pulumi.get(self, "nic_index")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailOptionSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicResult(dict):
    def __init__(__self__, *,
                 create_vnic_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailResult']] = None,
                 display_name: Optional[str] = None,
                 nic_index: Optional[int] = None):
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if nic_index is not None:
            pulumi.set(__self__, "nic_index", nic_index)

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="nicIndex")
    def nic_index(self) -> Optional[int]:
        return pulumi.get(self, "nic_index")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[bool] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstanceConfigurationsInstanceConfigurationInstanceDetailSecondaryVnicCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetInstanceConsoleConnectionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInstanceConsoleConnectionsInstanceConsoleConnectionResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 connection_string: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 fingerprint: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 public_key: Optional[str] = None,
                 service_host_key_fingerprint: Optional[str] = None,
                 state: Optional[str] = None,
                 vnc_connection_string: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if service_host_key_fingerprint is not None:
            pulumi.set(__self__, "service_host_key_fingerprint", service_host_key_fingerprint)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vnc_connection_string is not None:
            pulumi.set(__self__, "vnc_connection_string", vnc_connection_string)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[str]:
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="serviceHostKeyFingerprint")
    def service_host_key_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "service_host_key_fingerprint")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vncConnectionString")
    def vnc_connection_string(self) -> Optional[str]:
        return pulumi.get(self, "vnc_connection_string")


@pulumi.output_type
class GetInstanceCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetInstanceCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[str]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetInstanceCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetInstanceCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetInstanceDevicesDeviceResult(dict):
    def __init__(__self__, *,
                 is_available: Optional[bool] = None,
                 name: Optional[str] = None):
        if is_available is not None:
            pulumi.set(__self__, "is_available", is_available)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="isAvailable")
    def is_available(self) -> Optional[bool]:
        return pulumi.get(self, "is_available")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInstanceDevicesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInstanceInstanceOptionResult(dict):
    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class GetInstanceLaunchOptionResult(dict):
    def __init__(__self__, *,
                 boot_volume_type: Optional[str] = None,
                 firmware: Optional[str] = None,
                 is_consistent_volume_naming_enabled: Optional[bool] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 network_type: Optional[str] = None,
                 remote_data_volume_type: Optional[str] = None):
        if boot_volume_type is not None:
            pulumi.set(__self__, "boot_volume_type", boot_volume_type)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if is_consistent_volume_naming_enabled is not None:
            pulumi.set(__self__, "is_consistent_volume_naming_enabled", is_consistent_volume_naming_enabled)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if remote_data_volume_type is not None:
            pulumi.set(__self__, "remote_data_volume_type", remote_data_volume_type)

    @property
    @pulumi.getter(name="bootVolumeType")
    def boot_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_type")

    @property
    @pulumi.getter
    def firmware(self) -> Optional[str]:
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="isConsistentVolumeNamingEnabled")
    def is_consistent_volume_naming_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_consistent_volume_naming_enabled")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="remoteDataVolumeType")
    def remote_data_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "remote_data_volume_type")


@pulumi.output_type
class GetInstanceMeasuredBootReportMeasurementResult(dict):
    def __init__(__self__, *,
                 actuals: Optional[Sequence['outputs.GetInstanceMeasuredBootReportMeasurementActualResult']] = None,
                 policies: Optional[Sequence['outputs.GetInstanceMeasuredBootReportMeasurementPolicyResult']] = None):
        if actuals is not None:
            pulumi.set(__self__, "actuals", actuals)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)

    @property
    @pulumi.getter
    def actuals(self) -> Optional[Sequence['outputs.GetInstanceMeasuredBootReportMeasurementActualResult']]:
        return pulumi.get(self, "actuals")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence['outputs.GetInstanceMeasuredBootReportMeasurementPolicyResult']]:
        return pulumi.get(self, "policies")


@pulumi.output_type
class GetInstanceMeasuredBootReportMeasurementActualResult(dict):
    def __init__(__self__, *,
                 hash_algorithm: Optional[str] = None,
                 pcr_index: Optional[str] = None,
                 value: Optional[str] = None):
        if hash_algorithm is not None:
            pulumi.set(__self__, "hash_algorithm", hash_algorithm)
        if pcr_index is not None:
            pulumi.set(__self__, "pcr_index", pcr_index)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hash_algorithm")

    @property
    @pulumi.getter(name="pcrIndex")
    def pcr_index(self) -> Optional[str]:
        return pulumi.get(self, "pcr_index")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInstanceMeasuredBootReportMeasurementPolicyResult(dict):
    def __init__(__self__, *,
                 hash_algorithm: Optional[str] = None,
                 pcr_index: Optional[str] = None,
                 value: Optional[str] = None):
        if hash_algorithm is not None:
            pulumi.set(__self__, "hash_algorithm", hash_algorithm)
        if pcr_index is not None:
            pulumi.set(__self__, "pcr_index", pcr_index)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hash_algorithm")

    @property
    @pulumi.getter(name="pcrIndex")
    def pcr_index(self) -> Optional[str]:
        return pulumi.get(self, "pcr_index")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInstancePlatformConfigResult(dict):
    def __init__(__self__, *,
                 are_virtual_instructions_enabled: Optional[bool] = None,
                 config_map: Optional[Mapping[str, Any]] = None,
                 is_access_control_service_enabled: Optional[bool] = None,
                 is_input_output_memory_management_unit_enabled: Optional[bool] = None,
                 is_measured_boot_enabled: Optional[bool] = None,
                 is_memory_encryption_enabled: Optional[bool] = None,
                 is_secure_boot_enabled: Optional[bool] = None,
                 is_symmetric_multi_threading_enabled: Optional[bool] = None,
                 is_trusted_platform_module_enabled: Optional[bool] = None,
                 numa_nodes_per_socket: Optional[str] = None,
                 percentage_of_cores_enabled: Optional[int] = None,
                 type: Optional[str] = None):
        if are_virtual_instructions_enabled is not None:
            pulumi.set(__self__, "are_virtual_instructions_enabled", are_virtual_instructions_enabled)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if is_access_control_service_enabled is not None:
            pulumi.set(__self__, "is_access_control_service_enabled", is_access_control_service_enabled)
        if is_input_output_memory_management_unit_enabled is not None:
            pulumi.set(__self__, "is_input_output_memory_management_unit_enabled", is_input_output_memory_management_unit_enabled)
        if is_measured_boot_enabled is not None:
            pulumi.set(__self__, "is_measured_boot_enabled", is_measured_boot_enabled)
        if is_memory_encryption_enabled is not None:
            pulumi.set(__self__, "is_memory_encryption_enabled", is_memory_encryption_enabled)
        if is_secure_boot_enabled is not None:
            pulumi.set(__self__, "is_secure_boot_enabled", is_secure_boot_enabled)
        if is_symmetric_multi_threading_enabled is not None:
            pulumi.set(__self__, "is_symmetric_multi_threading_enabled", is_symmetric_multi_threading_enabled)
        if is_trusted_platform_module_enabled is not None:
            pulumi.set(__self__, "is_trusted_platform_module_enabled", is_trusted_platform_module_enabled)
        if numa_nodes_per_socket is not None:
            pulumi.set(__self__, "numa_nodes_per_socket", numa_nodes_per_socket)
        if percentage_of_cores_enabled is not None:
            pulumi.set(__self__, "percentage_of_cores_enabled", percentage_of_cores_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="areVirtualInstructionsEnabled")
    def are_virtual_instructions_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_virtual_instructions_enabled")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="isAccessControlServiceEnabled")
    def is_access_control_service_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_access_control_service_enabled")

    @property
    @pulumi.getter(name="isInputOutputMemoryManagementUnitEnabled")
    def is_input_output_memory_management_unit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_input_output_memory_management_unit_enabled")

    @property
    @pulumi.getter(name="isMeasuredBootEnabled")
    def is_measured_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_measured_boot_enabled")

    @property
    @pulumi.getter(name="isMemoryEncryptionEnabled")
    def is_memory_encryption_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_memory_encryption_enabled")

    @property
    @pulumi.getter(name="isSecureBootEnabled")
    def is_secure_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure_boot_enabled")

    @property
    @pulumi.getter(name="isSymmetricMultiThreadingEnabled")
    def is_symmetric_multi_threading_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_symmetric_multi_threading_enabled")

    @property
    @pulumi.getter(name="isTrustedPlatformModuleEnabled")
    def is_trusted_platform_module_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_trusted_platform_module_enabled")

    @property
    @pulumi.getter(name="numaNodesPerSocket")
    def numa_nodes_per_socket(self) -> Optional[str]:
        return pulumi.get(self, "numa_nodes_per_socket")

    @property
    @pulumi.getter(name="percentageOfCoresEnabled")
    def percentage_of_cores_enabled(self) -> Optional[int]:
        return pulumi.get(self, "percentage_of_cores_enabled")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstancePoolInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInstancePoolInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 auto_terminate_instance_on_delete: Optional[bool] = None,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 decrement_size_on_delete: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 fault_domain: Optional[str] = None,
                 id: Optional[str] = None,
                 instance_configuration_id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 instance_pool_id: Optional[str] = None,
                 load_balancer_backends: Optional[Sequence['outputs.GetInstancePoolInstancesInstanceLoadBalancerBackendResult']] = None,
                 region: Optional[str] = None,
                 shape: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if auto_terminate_instance_on_delete is not None:
            pulumi.set(__self__, "auto_terminate_instance_on_delete", auto_terminate_instance_on_delete)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if decrement_size_on_delete is not None:
            pulumi.set(__self__, "decrement_size_on_delete", decrement_size_on_delete)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_pool_id is not None:
            pulumi.set(__self__, "instance_pool_id", instance_pool_id)
        if load_balancer_backends is not None:
            pulumi.set(__self__, "load_balancer_backends", load_balancer_backends)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="autoTerminateInstanceOnDelete")
    def auto_terminate_instance_on_delete(self) -> Optional[bool]:
        return pulumi.get(self, "auto_terminate_instance_on_delete")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="decrementSizeOnDelete")
    def decrement_size_on_delete(self) -> Optional[bool]:
        return pulumi.get(self, "decrement_size_on_delete")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="loadBalancerBackends")
    def load_balancer_backends(self) -> Optional[Sequence['outputs.GetInstancePoolInstancesInstanceLoadBalancerBackendResult']]:
        return pulumi.get(self, "load_balancer_backends")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetInstancePoolInstancesInstanceLoadBalancerBackendResult(dict):
    def __init__(__self__, *,
                 backend_health_status: Optional[str] = None,
                 backend_name: Optional[str] = None,
                 backend_set_name: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 state: Optional[str] = None):
        if backend_health_status is not None:
            pulumi.set(__self__, "backend_health_status", backend_health_status)
        if backend_name is not None:
            pulumi.set(__self__, "backend_name", backend_name)
        if backend_set_name is not None:
            pulumi.set(__self__, "backend_set_name", backend_set_name)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendHealthStatus")
    def backend_health_status(self) -> Optional[str]:
        return pulumi.get(self, "backend_health_status")

    @property
    @pulumi.getter(name="backendName")
    def backend_name(self) -> Optional[str]:
        return pulumi.get(self, "backend_name")

    @property
    @pulumi.getter(name="backendSetName")
    def backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "backend_set_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetInstancePoolLoadBalancerResult(dict):
    def __init__(__self__, *,
                 backend_set_name: Optional[str] = None,
                 id: Optional[str] = None,
                 instance_pool_id: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 port: Optional[int] = None,
                 state: Optional[str] = None,
                 vnic_selection: Optional[str] = None):
        if backend_set_name is not None:
            pulumi.set(__self__, "backend_set_name", backend_set_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_pool_id is not None:
            pulumi.set(__self__, "instance_pool_id", instance_pool_id)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vnic_selection is not None:
            pulumi.set(__self__, "vnic_selection", vnic_selection)

    @property
    @pulumi.getter(name="backendSetName")
    def backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "backend_set_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vnicSelection")
    def vnic_selection(self) -> Optional[str]:
        return pulumi.get(self, "vnic_selection")


@pulumi.output_type
class GetInstancePoolPlacementConfigurationResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 fault_domains: Optional[Sequence[str]] = None,
                 primary_subnet_id: Optional[str] = None,
                 primary_vnic_subnets: Optional[Sequence['outputs.GetInstancePoolPlacementConfigurationPrimaryVnicSubnetResult']] = None,
                 secondary_vnic_subnets: Optional[Sequence['outputs.GetInstancePoolPlacementConfigurationSecondaryVnicSubnetResult']] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if fault_domains is not None:
            pulumi.set(__self__, "fault_domains", fault_domains)
        if primary_subnet_id is not None:
            pulumi.set(__self__, "primary_subnet_id", primary_subnet_id)
        if primary_vnic_subnets is not None:
            pulumi.set(__self__, "primary_vnic_subnets", primary_vnic_subnets)
        if secondary_vnic_subnets is not None:
            pulumi.set(__self__, "secondary_vnic_subnets", secondary_vnic_subnets)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="faultDomains")
    def fault_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "fault_domains")

    @property
    @pulumi.getter(name="primarySubnetId")
    def primary_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "primary_subnet_id")

    @property
    @pulumi.getter(name="primaryVnicSubnets")
    def primary_vnic_subnets(self) -> Optional[Sequence['outputs.GetInstancePoolPlacementConfigurationPrimaryVnicSubnetResult']]:
        return pulumi.get(self, "primary_vnic_subnets")

    @property
    @pulumi.getter(name="secondaryVnicSubnets")
    def secondary_vnic_subnets(self) -> Optional[Sequence['outputs.GetInstancePoolPlacementConfigurationSecondaryVnicSubnetResult']]:
        return pulumi.get(self, "secondary_vnic_subnets")


@pulumi.output_type
class GetInstancePoolPlacementConfigurationPrimaryVnicSubnetResult(dict):
    def __init__(__self__, *,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 is_assign_ipv6ip: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetInstancePoolPlacementConfigurationSecondaryVnicSubnetResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 is_assign_ipv6ip: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetInstancePoolsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInstancePoolsInstancePoolResult(dict):
    def __init__(__self__, *,
                 actual_size: Optional[int] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 instance_configuration_id: Optional[str] = None,
                 instance_display_name_formatter: Optional[str] = None,
                 instance_hostname_formatter: Optional[str] = None,
                 load_balancers: Optional[Sequence['outputs.GetInstancePoolsInstancePoolLoadBalancerResult']] = None,
                 placement_configurations: Optional[Sequence['outputs.GetInstancePoolsInstancePoolPlacementConfigurationResult']] = None,
                 size: Optional[int] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if actual_size is not None:
            pulumi.set(__self__, "actual_size", actual_size)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_display_name_formatter is not None:
            pulumi.set(__self__, "instance_display_name_formatter", instance_display_name_formatter)
        if instance_hostname_formatter is not None:
            pulumi.set(__self__, "instance_hostname_formatter", instance_hostname_formatter)
        if load_balancers is not None:
            pulumi.set(__self__, "load_balancers", load_balancers)
        if placement_configurations is not None:
            pulumi.set(__self__, "placement_configurations", placement_configurations)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="actualSize")
    def actual_size(self) -> Optional[int]:
        return pulumi.get(self, "actual_size")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter(name="instanceDisplayNameFormatter")
    def instance_display_name_formatter(self) -> Optional[str]:
        return pulumi.get(self, "instance_display_name_formatter")

    @property
    @pulumi.getter(name="instanceHostnameFormatter")
    def instance_hostname_formatter(self) -> Optional[str]:
        return pulumi.get(self, "instance_hostname_formatter")

    @property
    @pulumi.getter(name="loadBalancers")
    def load_balancers(self) -> Optional[Sequence['outputs.GetInstancePoolsInstancePoolLoadBalancerResult']]:
        return pulumi.get(self, "load_balancers")

    @property
    @pulumi.getter(name="placementConfigurations")
    def placement_configurations(self) -> Optional[Sequence['outputs.GetInstancePoolsInstancePoolPlacementConfigurationResult']]:
        return pulumi.get(self, "placement_configurations")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetInstancePoolsInstancePoolLoadBalancerResult(dict):
    def __init__(__self__, *,
                 backend_set_name: Optional[str] = None,
                 id: Optional[str] = None,
                 instance_pool_id: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 port: Optional[int] = None,
                 state: Optional[str] = None,
                 vnic_selection: Optional[str] = None):
        if backend_set_name is not None:
            pulumi.set(__self__, "backend_set_name", backend_set_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_pool_id is not None:
            pulumi.set(__self__, "instance_pool_id", instance_pool_id)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vnic_selection is not None:
            pulumi.set(__self__, "vnic_selection", vnic_selection)

    @property
    @pulumi.getter(name="backendSetName")
    def backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "backend_set_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instancePoolId")
    def instance_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_pool_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vnicSelection")
    def vnic_selection(self) -> Optional[str]:
        return pulumi.get(self, "vnic_selection")


@pulumi.output_type
class GetInstancePoolsInstancePoolPlacementConfigurationResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 fault_domains: Optional[Sequence[str]] = None,
                 primary_subnet_id: Optional[str] = None,
                 primary_vnic_subnets: Optional[Sequence['outputs.GetInstancePoolsInstancePoolPlacementConfigurationPrimaryVnicSubnetResult']] = None,
                 secondary_vnic_subnets: Optional[Sequence['outputs.GetInstancePoolsInstancePoolPlacementConfigurationSecondaryVnicSubnetResult']] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if fault_domains is not None:
            pulumi.set(__self__, "fault_domains", fault_domains)
        if primary_subnet_id is not None:
            pulumi.set(__self__, "primary_subnet_id", primary_subnet_id)
        if primary_vnic_subnets is not None:
            pulumi.set(__self__, "primary_vnic_subnets", primary_vnic_subnets)
        if secondary_vnic_subnets is not None:
            pulumi.set(__self__, "secondary_vnic_subnets", secondary_vnic_subnets)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="faultDomains")
    def fault_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "fault_domains")

    @property
    @pulumi.getter(name="primarySubnetId")
    def primary_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "primary_subnet_id")

    @property
    @pulumi.getter(name="primaryVnicSubnets")
    def primary_vnic_subnets(self) -> Optional[Sequence['outputs.GetInstancePoolsInstancePoolPlacementConfigurationPrimaryVnicSubnetResult']]:
        return pulumi.get(self, "primary_vnic_subnets")

    @property
    @pulumi.getter(name="secondaryVnicSubnets")
    def secondary_vnic_subnets(self) -> Optional[Sequence['outputs.GetInstancePoolsInstancePoolPlacementConfigurationSecondaryVnicSubnetResult']]:
        return pulumi.get(self, "secondary_vnic_subnets")


@pulumi.output_type
class GetInstancePoolsInstancePoolPlacementConfigurationPrimaryVnicSubnetResult(dict):
    def __init__(__self__, *,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetInstancePoolsInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 is_assign_ipv6ip: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetInstancePoolsInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstancePoolsInstancePoolPlacementConfigurationPrimaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetInstancePoolsInstancePoolPlacementConfigurationSecondaryVnicSubnetResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetInstancePoolsInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 is_assign_ipv6ip: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if is_assign_ipv6ip is not None:
            pulumi.set(__self__, "is_assign_ipv6ip", is_assign_ipv6ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetInstancePoolsInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="isAssignIpv6ip")
    def is_assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "is_assign_ipv6ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstancePoolsInstancePoolPlacementConfigurationSecondaryVnicSubnetIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetInstancePreemptibleInstanceConfigResult(dict):
    def __init__(__self__, *,
                 preemption_actions: Optional[Sequence['outputs.GetInstancePreemptibleInstanceConfigPreemptionActionResult']] = None):
        if preemption_actions is not None:
            pulumi.set(__self__, "preemption_actions", preemption_actions)

    @property
    @pulumi.getter(name="preemptionActions")
    def preemption_actions(self) -> Optional[Sequence['outputs.GetInstancePreemptibleInstanceConfigPreemptionActionResult']]:
        return pulumi.get(self, "preemption_actions")


@pulumi.output_type
class GetInstancePreemptibleInstanceConfigPreemptionActionResult(dict):
    def __init__(__self__, *,
                 preserve_boot_volume: Optional[bool] = None,
                 type: Optional[str] = None):
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceShapeConfigResult(dict):
    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 gpu_description: Optional[str] = None,
                 gpus: Optional[int] = None,
                 local_disk_description: Optional[str] = None,
                 local_disks: Optional[int] = None,
                 local_disks_total_size_in_gbs: Optional[float] = None,
                 max_vnic_attachments: Optional[int] = None,
                 memory_in_gbs: Optional[float] = None,
                 networking_bandwidth_in_gbps: Optional[float] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[float] = None,
                 processor_description: Optional[str] = None,
                 vcpus: Optional[int] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if gpu_description is not None:
            pulumi.set(__self__, "gpu_description", gpu_description)
        if gpus is not None:
            pulumi.set(__self__, "gpus", gpus)
        if local_disk_description is not None:
            pulumi.set(__self__, "local_disk_description", local_disk_description)
        if local_disks is not None:
            pulumi.set(__self__, "local_disks", local_disks)
        if local_disks_total_size_in_gbs is not None:
            pulumi.set(__self__, "local_disks_total_size_in_gbs", local_disks_total_size_in_gbs)
        if max_vnic_attachments is not None:
            pulumi.set(__self__, "max_vnic_attachments", max_vnic_attachments)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if networking_bandwidth_in_gbps is not None:
            pulumi.set(__self__, "networking_bandwidth_in_gbps", networking_bandwidth_in_gbps)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if processor_description is not None:
            pulumi.set(__self__, "processor_description", processor_description)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="gpuDescription")
    def gpu_description(self) -> Optional[str]:
        return pulumi.get(self, "gpu_description")

    @property
    @pulumi.getter
    def gpus(self) -> Optional[int]:
        return pulumi.get(self, "gpus")

    @property
    @pulumi.getter(name="localDiskDescription")
    def local_disk_description(self) -> Optional[str]:
        return pulumi.get(self, "local_disk_description")

    @property
    @pulumi.getter(name="localDisks")
    def local_disks(self) -> Optional[int]:
        return pulumi.get(self, "local_disks")

    @property
    @pulumi.getter(name="localDisksTotalSizeInGbs")
    def local_disks_total_size_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "local_disks_total_size_in_gbs")

    @property
    @pulumi.getter(name="maxVnicAttachments")
    def max_vnic_attachments(self) -> Optional[int]:
        return pulumi.get(self, "max_vnic_attachments")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter(name="networkingBandwidthInGbps")
    def networking_bandwidth_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "networking_bandwidth_in_gbps")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter(name="processorDescription")
    def processor_description(self) -> Optional[str]:
        return pulumi.get(self, "processor_description")

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[int]:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetInstanceSourceDetailResult(dict):
    def __init__(__self__, *,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 instance_source_image_filter_details: Optional[Sequence['outputs.GetInstanceSourceDetailInstanceSourceImageFilterDetailResult']] = None,
                 kms_key_id: Optional[str] = None,
                 source_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if instance_source_image_filter_details is not None:
            pulumi.set(__self__, "instance_source_image_filter_details", instance_source_image_filter_details)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="instanceSourceImageFilterDetails")
    def instance_source_image_filter_details(self) -> Optional[Sequence['outputs.GetInstanceSourceDetailInstanceSourceImageFilterDetailResult']]:
        return pulumi.get(self, "instance_source_image_filter_details")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[str]:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetInstanceSourceDetailInstanceSourceImageFilterDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags_filter: Optional[Mapping[str, Any]] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags_filter is not None:
            pulumi.set(__self__, "defined_tags_filter", defined_tags_filter)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTagsFilter")
    def defined_tags_filter(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags_filter")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")


@pulumi.output_type
class GetInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 agent_configs: Optional[Sequence['outputs.GetInstancesInstanceAgentConfigResult']] = None,
                 async_: Optional[bool] = None,
                 availability_configs: Optional[Sequence['outputs.GetInstancesInstanceAvailabilityConfigResult']] = None,
                 availability_domain: Optional[str] = None,
                 boot_volume_id: Optional[str] = None,
                 capacity_reservation_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 compute_cluster_id: Optional[str] = None,
                 create_vnic_details: Optional[Sequence['outputs.GetInstancesInstanceCreateVnicDetailResult']] = None,
                 dedicated_vm_host_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 extended_metadata: Optional[Mapping[str, Any]] = None,
                 fault_domain: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 id: Optional[str] = None,
                 image: Optional[str] = None,
                 instance_configuration_id: Optional[str] = None,
                 instance_options: Optional[Sequence['outputs.GetInstancesInstanceInstanceOptionResult']] = None,
                 ipxe_script: Optional[str] = None,
                 is_cross_numa_node: Optional[bool] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 launch_mode: Optional[str] = None,
                 launch_options: Optional[Sequence['outputs.GetInstancesInstanceLaunchOptionResult']] = None,
                 metadata: Optional[Mapping[str, Any]] = None,
                 platform_configs: Optional[Sequence['outputs.GetInstancesInstancePlatformConfigResult']] = None,
                 preemptible_instance_configs: Optional[Sequence['outputs.GetInstancesInstancePreemptibleInstanceConfigResult']] = None,
                 preserve_boot_volume: Optional[bool] = None,
                 private_ip: Optional[str] = None,
                 public_ip: Optional[str] = None,
                 region: Optional[str] = None,
                 shape: Optional[str] = None,
                 shape_configs: Optional[Sequence['outputs.GetInstancesInstanceShapeConfigResult']] = None,
                 source_details: Optional[Sequence['outputs.GetInstancesInstanceSourceDetailResult']] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_maintenance_reboot_due: Optional[str] = None,
                 update_operation_constraint: Optional[str] = None):
        if agent_configs is not None:
            pulumi.set(__self__, "agent_configs", agent_configs)
        if async_ is not None:
            pulumi.set(__self__, "async_", async_)
        if availability_configs is not None:
            pulumi.set(__self__, "availability_configs", availability_configs)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if boot_volume_id is not None:
            pulumi.set(__self__, "boot_volume_id", boot_volume_id)
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compute_cluster_id is not None:
            pulumi.set(__self__, "compute_cluster_id", compute_cluster_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if dedicated_vm_host_id is not None:
            pulumi.set(__self__, "dedicated_vm_host_id", dedicated_vm_host_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if extended_metadata is not None:
            pulumi.set(__self__, "extended_metadata", extended_metadata)
        if fault_domain is not None:
            pulumi.set(__self__, "fault_domain", fault_domain)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_options is not None:
            pulumi.set(__self__, "instance_options", instance_options)
        if ipxe_script is not None:
            pulumi.set(__self__, "ipxe_script", ipxe_script)
        if is_cross_numa_node is not None:
            pulumi.set(__self__, "is_cross_numa_node", is_cross_numa_node)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if launch_mode is not None:
            pulumi.set(__self__, "launch_mode", launch_mode)
        if launch_options is not None:
            pulumi.set(__self__, "launch_options", launch_options)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if platform_configs is not None:
            pulumi.set(__self__, "platform_configs", platform_configs)
        if preemptible_instance_configs is not None:
            pulumi.set(__self__, "preemptible_instance_configs", preemptible_instance_configs)
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_maintenance_reboot_due is not None:
            pulumi.set(__self__, "time_maintenance_reboot_due", time_maintenance_reboot_due)
        if update_operation_constraint is not None:
            pulumi.set(__self__, "update_operation_constraint", update_operation_constraint)

    @property
    @pulumi.getter(name="agentConfigs")
    def agent_configs(self) -> Optional[Sequence['outputs.GetInstancesInstanceAgentConfigResult']]:
        return pulumi.get(self, "agent_configs")

    @property
    @pulumi.getter(name="async")
    def async_(self) -> Optional[bool]:
        return pulumi.get(self, "async_")

    @property
    @pulumi.getter(name="availabilityConfigs")
    def availability_configs(self) -> Optional[Sequence['outputs.GetInstancesInstanceAvailabilityConfigResult']]:
        return pulumi.get(self, "availability_configs")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="bootVolumeId")
    def boot_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_id")

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "capacity_reservation_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeClusterId")
    def compute_cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "compute_cluster_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetInstancesInstanceCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="dedicatedVmHostId")
    def dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "dedicated_vm_host_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="extendedMetadata")
    def extended_metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "extended_metadata")

    @property
    @pulumi.getter(name="faultDomain")
    def fault_domain(self) -> Optional[str]:
        return pulumi.get(self, "fault_domain")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        warnings.warn("""The 'hostname_label' field has been deprecated. Please use 'hostname_label under create_vnic_details' instead.""", DeprecationWarning)
        pulumi.log.warn("""hostname_label is deprecated: The 'hostname_label' field has been deprecated. Please use 'hostname_label under create_vnic_details' instead.""")

        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        warnings.warn("""The 'image' field has been deprecated. Please use 'source_details' instead. If both fields are specified, then 'source_details' will be used.""", DeprecationWarning)
        pulumi.log.warn("""image is deprecated: The 'image' field has been deprecated. Please use 'source_details' instead. If both fields are specified, then 'source_details' will be used.""")

        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter(name="instanceOptions")
    def instance_options(self) -> Optional[Sequence['outputs.GetInstancesInstanceInstanceOptionResult']]:
        return pulumi.get(self, "instance_options")

    @property
    @pulumi.getter(name="ipxeScript")
    def ipxe_script(self) -> Optional[str]:
        return pulumi.get(self, "ipxe_script")

    @property
    @pulumi.getter(name="isCrossNumaNode")
    def is_cross_numa_node(self) -> Optional[bool]:
        return pulumi.get(self, "is_cross_numa_node")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="launchMode")
    def launch_mode(self) -> Optional[str]:
        return pulumi.get(self, "launch_mode")

    @property
    @pulumi.getter(name="launchOptions")
    def launch_options(self) -> Optional[Sequence['outputs.GetInstancesInstanceLaunchOptionResult']]:
        return pulumi.get(self, "launch_options")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="platformConfigs")
    def platform_configs(self) -> Optional[Sequence['outputs.GetInstancesInstancePlatformConfigResult']]:
        return pulumi.get(self, "platform_configs")

    @property
    @pulumi.getter(name="preemptibleInstanceConfigs")
    def preemptible_instance_configs(self) -> Optional[Sequence['outputs.GetInstancesInstancePreemptibleInstanceConfigResult']]:
        return pulumi.get(self, "preemptible_instance_configs")

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetInstancesInstanceShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetInstancesInstanceSourceDetailResult']]:
        return pulumi.get(self, "source_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        warnings.warn("""The 'subnet_id' field has been deprecated. Please use 'subnet_id under create_vnic_details' instead.""", DeprecationWarning)
        pulumi.log.warn("""subnet_id is deprecated: The 'subnet_id' field has been deprecated. Please use 'subnet_id under create_vnic_details' instead.""")

        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeMaintenanceRebootDue")
    def time_maintenance_reboot_due(self) -> Optional[str]:
        return pulumi.get(self, "time_maintenance_reboot_due")

    @property
    @pulumi.getter(name="updateOperationConstraint")
    def update_operation_constraint(self) -> Optional[str]:
        return pulumi.get(self, "update_operation_constraint")


@pulumi.output_type
class GetInstancesInstanceAgentConfigResult(dict):
    def __init__(__self__, *,
                 are_all_plugins_disabled: Optional[bool] = None,
                 is_management_disabled: Optional[bool] = None,
                 is_monitoring_disabled: Optional[bool] = None,
                 plugins_configs: Optional[Sequence['outputs.GetInstancesInstanceAgentConfigPluginsConfigResult']] = None):
        if are_all_plugins_disabled is not None:
            pulumi.set(__self__, "are_all_plugins_disabled", are_all_plugins_disabled)
        if is_management_disabled is not None:
            pulumi.set(__self__, "is_management_disabled", is_management_disabled)
        if is_monitoring_disabled is not None:
            pulumi.set(__self__, "is_monitoring_disabled", is_monitoring_disabled)
        if plugins_configs is not None:
            pulumi.set(__self__, "plugins_configs", plugins_configs)

    @property
    @pulumi.getter(name="areAllPluginsDisabled")
    def are_all_plugins_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_all_plugins_disabled")

    @property
    @pulumi.getter(name="isManagementDisabled")
    def is_management_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_management_disabled")

    @property
    @pulumi.getter(name="isMonitoringDisabled")
    def is_monitoring_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_monitoring_disabled")

    @property
    @pulumi.getter(name="pluginsConfigs")
    def plugins_configs(self) -> Optional[Sequence['outputs.GetInstancesInstanceAgentConfigPluginsConfigResult']]:
        return pulumi.get(self, "plugins_configs")


@pulumi.output_type
class GetInstancesInstanceAgentConfigPluginsConfigResult(dict):
    def __init__(__self__, *,
                 desired_state: Optional[str] = None,
                 name: Optional[str] = None):
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInstancesInstanceAvailabilityConfigResult(dict):
    def __init__(__self__, *,
                 is_live_migration_preferred: Optional[bool] = None,
                 recovery_action: Optional[str] = None):
        if is_live_migration_preferred is not None:
            pulumi.set(__self__, "is_live_migration_preferred", is_live_migration_preferred)
        if recovery_action is not None:
            pulumi.set(__self__, "recovery_action", recovery_action)

    @property
    @pulumi.getter(name="isLiveMigrationPreferred")
    def is_live_migration_preferred(self) -> Optional[bool]:
        return pulumi.get(self, "is_live_migration_preferred")

    @property
    @pulumi.getter(name="recoveryAction")
    def recovery_action(self) -> Optional[str]:
        return pulumi.get(self, "recovery_action")


@pulumi.output_type
class GetInstancesInstanceCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetInstancesInstanceCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[str]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetInstancesInstanceCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetInstancesInstanceCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None):
        if ipv6address is not None:
            pulumi.set(__self__, "ipv6address", ipv6address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)

    @property
    @pulumi.getter
    def ipv6address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")


@pulumi.output_type
class GetInstancesInstanceInstanceOptionResult(dict):
    def __init__(__self__, *,
                 are_legacy_imds_endpoints_disabled: Optional[bool] = None):
        if are_legacy_imds_endpoints_disabled is not None:
            pulumi.set(__self__, "are_legacy_imds_endpoints_disabled", are_legacy_imds_endpoints_disabled)

    @property
    @pulumi.getter(name="areLegacyImdsEndpointsDisabled")
    def are_legacy_imds_endpoints_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_legacy_imds_endpoints_disabled")


@pulumi.output_type
class GetInstancesInstanceLaunchOptionResult(dict):
    def __init__(__self__, *,
                 boot_volume_type: Optional[str] = None,
                 firmware: Optional[str] = None,
                 is_consistent_volume_naming_enabled: Optional[bool] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 network_type: Optional[str] = None,
                 remote_data_volume_type: Optional[str] = None):
        if boot_volume_type is not None:
            pulumi.set(__self__, "boot_volume_type", boot_volume_type)
        if firmware is not None:
            pulumi.set(__self__, "firmware", firmware)
        if is_consistent_volume_naming_enabled is not None:
            pulumi.set(__self__, "is_consistent_volume_naming_enabled", is_consistent_volume_naming_enabled)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if remote_data_volume_type is not None:
            pulumi.set(__self__, "remote_data_volume_type", remote_data_volume_type)

    @property
    @pulumi.getter(name="bootVolumeType")
    def boot_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_type")

    @property
    @pulumi.getter
    def firmware(self) -> Optional[str]:
        return pulumi.get(self, "firmware")

    @property
    @pulumi.getter(name="isConsistentVolumeNamingEnabled")
    def is_consistent_volume_naming_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_consistent_volume_naming_enabled")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="remoteDataVolumeType")
    def remote_data_volume_type(self) -> Optional[str]:
        return pulumi.get(self, "remote_data_volume_type")


@pulumi.output_type
class GetInstancesInstancePlatformConfigResult(dict):
    def __init__(__self__, *,
                 are_virtual_instructions_enabled: Optional[bool] = None,
                 config_map: Optional[Mapping[str, Any]] = None,
                 is_access_control_service_enabled: Optional[bool] = None,
                 is_input_output_memory_management_unit_enabled: Optional[bool] = None,
                 is_measured_boot_enabled: Optional[bool] = None,
                 is_memory_encryption_enabled: Optional[bool] = None,
                 is_secure_boot_enabled: Optional[bool] = None,
                 is_symmetric_multi_threading_enabled: Optional[bool] = None,
                 is_trusted_platform_module_enabled: Optional[bool] = None,
                 numa_nodes_per_socket: Optional[str] = None,
                 percentage_of_cores_enabled: Optional[int] = None,
                 type: Optional[str] = None):
        if are_virtual_instructions_enabled is not None:
            pulumi.set(__self__, "are_virtual_instructions_enabled", are_virtual_instructions_enabled)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if is_access_control_service_enabled is not None:
            pulumi.set(__self__, "is_access_control_service_enabled", is_access_control_service_enabled)
        if is_input_output_memory_management_unit_enabled is not None:
            pulumi.set(__self__, "is_input_output_memory_management_unit_enabled", is_input_output_memory_management_unit_enabled)
        if is_measured_boot_enabled is not None:
            pulumi.set(__self__, "is_measured_boot_enabled", is_measured_boot_enabled)
        if is_memory_encryption_enabled is not None:
            pulumi.set(__self__, "is_memory_encryption_enabled", is_memory_encryption_enabled)
        if is_secure_boot_enabled is not None:
            pulumi.set(__self__, "is_secure_boot_enabled", is_secure_boot_enabled)
        if is_symmetric_multi_threading_enabled is not None:
            pulumi.set(__self__, "is_symmetric_multi_threading_enabled", is_symmetric_multi_threading_enabled)
        if is_trusted_platform_module_enabled is not None:
            pulumi.set(__self__, "is_trusted_platform_module_enabled", is_trusted_platform_module_enabled)
        if numa_nodes_per_socket is not None:
            pulumi.set(__self__, "numa_nodes_per_socket", numa_nodes_per_socket)
        if percentage_of_cores_enabled is not None:
            pulumi.set(__self__, "percentage_of_cores_enabled", percentage_of_cores_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="areVirtualInstructionsEnabled")
    def are_virtual_instructions_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_virtual_instructions_enabled")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="isAccessControlServiceEnabled")
    def is_access_control_service_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_access_control_service_enabled")

    @property
    @pulumi.getter(name="isInputOutputMemoryManagementUnitEnabled")
    def is_input_output_memory_management_unit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_input_output_memory_management_unit_enabled")

    @property
    @pulumi.getter(name="isMeasuredBootEnabled")
    def is_measured_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_measured_boot_enabled")

    @property
    @pulumi.getter(name="isMemoryEncryptionEnabled")
    def is_memory_encryption_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_memory_encryption_enabled")

    @property
    @pulumi.getter(name="isSecureBootEnabled")
    def is_secure_boot_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure_boot_enabled")

    @property
    @pulumi.getter(name="isSymmetricMultiThreadingEnabled")
    def is_symmetric_multi_threading_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_symmetric_multi_threading_enabled")

    @property
    @pulumi.getter(name="isTrustedPlatformModuleEnabled")
    def is_trusted_platform_module_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_trusted_platform_module_enabled")

    @property
    @pulumi.getter(name="numaNodesPerSocket")
    def numa_nodes_per_socket(self) -> Optional[str]:
        return pulumi.get(self, "numa_nodes_per_socket")

    @property
    @pulumi.getter(name="percentageOfCoresEnabled")
    def percentage_of_cores_enabled(self) -> Optional[int]:
        return pulumi.get(self, "percentage_of_cores_enabled")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstancesInstancePreemptibleInstanceConfigResult(dict):
    def __init__(__self__, *,
                 preemption_actions: Optional[Sequence['outputs.GetInstancesInstancePreemptibleInstanceConfigPreemptionActionResult']] = None):
        if preemption_actions is not None:
            pulumi.set(__self__, "preemption_actions", preemption_actions)

    @property
    @pulumi.getter(name="preemptionActions")
    def preemption_actions(self) -> Optional[Sequence['outputs.GetInstancesInstancePreemptibleInstanceConfigPreemptionActionResult']]:
        return pulumi.get(self, "preemption_actions")


@pulumi.output_type
class GetInstancesInstancePreemptibleInstanceConfigPreemptionActionResult(dict):
    def __init__(__self__, *,
                 preserve_boot_volume: Optional[bool] = None,
                 type: Optional[str] = None):
        if preserve_boot_volume is not None:
            pulumi.set(__self__, "preserve_boot_volume", preserve_boot_volume)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="preserveBootVolume")
    def preserve_boot_volume(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_boot_volume")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstancesInstanceShapeConfigResult(dict):
    def __init__(__self__, *,
                 baseline_ocpu_utilization: Optional[str] = None,
                 gpu_description: Optional[str] = None,
                 gpus: Optional[int] = None,
                 local_disk_description: Optional[str] = None,
                 local_disks: Optional[int] = None,
                 local_disks_total_size_in_gbs: Optional[float] = None,
                 max_vnic_attachments: Optional[int] = None,
                 memory_in_gbs: Optional[float] = None,
                 networking_bandwidth_in_gbps: Optional[float] = None,
                 nvmes: Optional[int] = None,
                 ocpus: Optional[float] = None,
                 processor_description: Optional[str] = None,
                 vcpus: Optional[int] = None):
        if baseline_ocpu_utilization is not None:
            pulumi.set(__self__, "baseline_ocpu_utilization", baseline_ocpu_utilization)
        if gpu_description is not None:
            pulumi.set(__self__, "gpu_description", gpu_description)
        if gpus is not None:
            pulumi.set(__self__, "gpus", gpus)
        if local_disk_description is not None:
            pulumi.set(__self__, "local_disk_description", local_disk_description)
        if local_disks is not None:
            pulumi.set(__self__, "local_disks", local_disks)
        if local_disks_total_size_in_gbs is not None:
            pulumi.set(__self__, "local_disks_total_size_in_gbs", local_disks_total_size_in_gbs)
        if max_vnic_attachments is not None:
            pulumi.set(__self__, "max_vnic_attachments", max_vnic_attachments)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if networking_bandwidth_in_gbps is not None:
            pulumi.set(__self__, "networking_bandwidth_in_gbps", networking_bandwidth_in_gbps)
        if nvmes is not None:
            pulumi.set(__self__, "nvmes", nvmes)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if processor_description is not None:
            pulumi.set(__self__, "processor_description", processor_description)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter(name="baselineOcpuUtilization")
    def baseline_ocpu_utilization(self) -> Optional[str]:
        return pulumi.get(self, "baseline_ocpu_utilization")

    @property
    @pulumi.getter(name="gpuDescription")
    def gpu_description(self) -> Optional[str]:
        return pulumi.get(self, "gpu_description")

    @property
    @pulumi.getter
    def gpus(self) -> Optional[int]:
        return pulumi.get(self, "gpus")

    @property
    @pulumi.getter(name="localDiskDescription")
    def local_disk_description(self) -> Optional[str]:
        return pulumi.get(self, "local_disk_description")

    @property
    @pulumi.getter(name="localDisks")
    def local_disks(self) -> Optional[int]:
        return pulumi.get(self, "local_disks")

    @property
    @pulumi.getter(name="localDisksTotalSizeInGbs")
    def local_disks_total_size_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "local_disks_total_size_in_gbs")

    @property
    @pulumi.getter(name="maxVnicAttachments")
    def max_vnic_attachments(self) -> Optional[int]:
        return pulumi.get(self, "max_vnic_attachments")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter(name="networkingBandwidthInGbps")
    def networking_bandwidth_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "networking_bandwidth_in_gbps")

    @property
    @pulumi.getter
    def nvmes(self) -> Optional[int]:
        return pulumi.get(self, "nvmes")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter(name="processorDescription")
    def processor_description(self) -> Optional[str]:
        return pulumi.get(self, "processor_description")

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[int]:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetInstancesInstanceSourceDetailResult(dict):
    def __init__(__self__, *,
                 boot_volume_size_in_gbs: Optional[str] = None,
                 boot_volume_vpus_per_gb: Optional[str] = None,
                 instance_source_image_filter_details: Optional[Sequence['outputs.GetInstancesInstanceSourceDetailInstanceSourceImageFilterDetailResult']] = None,
                 kms_key_id: Optional[str] = None,
                 source_id: Optional[str] = None,
                 source_type: Optional[str] = None):
        if boot_volume_size_in_gbs is not None:
            pulumi.set(__self__, "boot_volume_size_in_gbs", boot_volume_size_in_gbs)
        if boot_volume_vpus_per_gb is not None:
            pulumi.set(__self__, "boot_volume_vpus_per_gb", boot_volume_vpus_per_gb)
        if instance_source_image_filter_details is not None:
            pulumi.set(__self__, "instance_source_image_filter_details", instance_source_image_filter_details)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="bootVolumeSizeInGbs")
    def boot_volume_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_size_in_gbs")

    @property
    @pulumi.getter(name="bootVolumeVpusPerGb")
    def boot_volume_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "boot_volume_vpus_per_gb")

    @property
    @pulumi.getter(name="instanceSourceImageFilterDetails")
    def instance_source_image_filter_details(self) -> Optional[Sequence['outputs.GetInstancesInstanceSourceDetailInstanceSourceImageFilterDetailResult']]:
        return pulumi.get(self, "instance_source_image_filter_details")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[str]:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetInstancesInstanceSourceDetailInstanceSourceImageFilterDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags_filter: Optional[Mapping[str, Any]] = None,
                 operating_system: Optional[str] = None,
                 operating_system_version: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags_filter is not None:
            pulumi.set(__self__, "defined_tags_filter", defined_tags_filter)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if operating_system_version is not None:
            pulumi.set(__self__, "operating_system_version", operating_system_version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTagsFilter")
    def defined_tags_filter(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags_filter")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[str]:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="operatingSystemVersion")
    def operating_system_version(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_version")


@pulumi.output_type
class GetInternetGatewaysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInternetGatewaysGatewayResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 route_table_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetIpsecAlgorithmAllowedPhaseOneParameterResult(dict):
    def __init__(__self__, *,
                 authentication_algorithms: Optional[Sequence[str]] = None,
                 dh_groups: Optional[Sequence[str]] = None,
                 encryption_algorithms: Optional[Sequence[str]] = None):
        if authentication_algorithms is not None:
            pulumi.set(__self__, "authentication_algorithms", authentication_algorithms)
        if dh_groups is not None:
            pulumi.set(__self__, "dh_groups", dh_groups)
        if encryption_algorithms is not None:
            pulumi.set(__self__, "encryption_algorithms", encryption_algorithms)

    @property
    @pulumi.getter(name="authenticationAlgorithms")
    def authentication_algorithms(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "authentication_algorithms")

    @property
    @pulumi.getter(name="dhGroups")
    def dh_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dh_groups")

    @property
    @pulumi.getter(name="encryptionAlgorithms")
    def encryption_algorithms(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "encryption_algorithms")


@pulumi.output_type
class GetIpsecAlgorithmAllowedPhaseTwoParameterResult(dict):
    def __init__(__self__, *,
                 authentication_algorithms: Optional[Sequence[str]] = None,
                 encryption_algorithms: Optional[Sequence[str]] = None,
                 pfs_dh_groups: Optional[Sequence[str]] = None):
        if authentication_algorithms is not None:
            pulumi.set(__self__, "authentication_algorithms", authentication_algorithms)
        if encryption_algorithms is not None:
            pulumi.set(__self__, "encryption_algorithms", encryption_algorithms)
        if pfs_dh_groups is not None:
            pulumi.set(__self__, "pfs_dh_groups", pfs_dh_groups)

    @property
    @pulumi.getter(name="authenticationAlgorithms")
    def authentication_algorithms(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "authentication_algorithms")

    @property
    @pulumi.getter(name="encryptionAlgorithms")
    def encryption_algorithms(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "encryption_algorithms")

    @property
    @pulumi.getter(name="pfsDhGroups")
    def pfs_dh_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "pfs_dh_groups")


@pulumi.output_type
class GetIpsecAlgorithmDefaultPhaseOneParameterResult(dict):
    def __init__(__self__, *,
                 default_authentication_algorithms: Optional[Sequence[str]] = None,
                 default_dh_groups: Optional[Sequence[str]] = None,
                 default_encryption_algorithms: Optional[Sequence[str]] = None):
        if default_authentication_algorithms is not None:
            pulumi.set(__self__, "default_authentication_algorithms", default_authentication_algorithms)
        if default_dh_groups is not None:
            pulumi.set(__self__, "default_dh_groups", default_dh_groups)
        if default_encryption_algorithms is not None:
            pulumi.set(__self__, "default_encryption_algorithms", default_encryption_algorithms)

    @property
    @pulumi.getter(name="defaultAuthenticationAlgorithms")
    def default_authentication_algorithms(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "default_authentication_algorithms")

    @property
    @pulumi.getter(name="defaultDhGroups")
    def default_dh_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "default_dh_groups")

    @property
    @pulumi.getter(name="defaultEncryptionAlgorithms")
    def default_encryption_algorithms(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "default_encryption_algorithms")


@pulumi.output_type
class GetIpsecAlgorithmDefaultPhaseTwoParameterResult(dict):
    def __init__(__self__, *,
                 default_authentication_algorithms: Optional[Sequence[str]] = None,
                 default_encryption_algorithms: Optional[Sequence[str]] = None,
                 default_pfs_dh_group: Optional[str] = None):
        if default_authentication_algorithms is not None:
            pulumi.set(__self__, "default_authentication_algorithms", default_authentication_algorithms)
        if default_encryption_algorithms is not None:
            pulumi.set(__self__, "default_encryption_algorithms", default_encryption_algorithms)
        if default_pfs_dh_group is not None:
            pulumi.set(__self__, "default_pfs_dh_group", default_pfs_dh_group)

    @property
    @pulumi.getter(name="defaultAuthenticationAlgorithms")
    def default_authentication_algorithms(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "default_authentication_algorithms")

    @property
    @pulumi.getter(name="defaultEncryptionAlgorithms")
    def default_encryption_algorithms(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "default_encryption_algorithms")

    @property
    @pulumi.getter(name="defaultPfsDhGroup")
    def default_pfs_dh_group(self) -> Optional[str]:
        return pulumi.get(self, "default_pfs_dh_group")


@pulumi.output_type
class GetIpsecConfigFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIpsecConfigTunnelResult(dict):
    def __init__(__self__, *,
                 ip_address: Optional[str] = None,
                 shared_secret: Optional[str] = None,
                 time_created: Optional[str] = None):
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if shared_secret is not None:
            pulumi.set(__self__, "shared_secret", shared_secret)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="sharedSecret")
    def shared_secret(self) -> Optional[str]:
        return pulumi.get(self, "shared_secret")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetIpsecConnectionTunnelBgpSessionInfoResult(dict):
    def __init__(__self__, *,
                 bgp_ipv6state: Optional[str] = None,
                 bgp_state: Optional[str] = None,
                 customer_bgp_asn: Optional[str] = None,
                 customer_interface_ip: Optional[str] = None,
                 oracle_bgp_asn: Optional[str] = None,
                 oracle_interface_ip: Optional[str] = None):
        if bgp_ipv6state is not None:
            pulumi.set(__self__, "bgp_ipv6state", bgp_ipv6state)
        if bgp_state is not None:
            pulumi.set(__self__, "bgp_state", bgp_state)
        if customer_bgp_asn is not None:
            pulumi.set(__self__, "customer_bgp_asn", customer_bgp_asn)
        if customer_interface_ip is not None:
            pulumi.set(__self__, "customer_interface_ip", customer_interface_ip)
        if oracle_bgp_asn is not None:
            pulumi.set(__self__, "oracle_bgp_asn", oracle_bgp_asn)
        if oracle_interface_ip is not None:
            pulumi.set(__self__, "oracle_interface_ip", oracle_interface_ip)

    @property
    @pulumi.getter(name="bgpIpv6state")
    def bgp_ipv6state(self) -> Optional[str]:
        return pulumi.get(self, "bgp_ipv6state")

    @property
    @pulumi.getter(name="bgpState")
    def bgp_state(self) -> Optional[str]:
        return pulumi.get(self, "bgp_state")

    @property
    @pulumi.getter(name="customerBgpAsn")
    def customer_bgp_asn(self) -> Optional[str]:
        return pulumi.get(self, "customer_bgp_asn")

    @property
    @pulumi.getter(name="customerInterfaceIp")
    def customer_interface_ip(self) -> Optional[str]:
        return pulumi.get(self, "customer_interface_ip")

    @property
    @pulumi.getter(name="oracleBgpAsn")
    def oracle_bgp_asn(self) -> Optional[str]:
        return pulumi.get(self, "oracle_bgp_asn")

    @property
    @pulumi.getter(name="oracleInterfaceIp")
    def oracle_interface_ip(self) -> Optional[str]:
        return pulumi.get(self, "oracle_interface_ip")


@pulumi.output_type
class GetIpsecConnectionTunnelEncryptionDomainConfigResult(dict):
    def __init__(__self__, *,
                 cpe_traffic_selectors: Optional[Sequence[str]] = None,
                 oracle_traffic_selectors: Optional[Sequence[str]] = None):
        if cpe_traffic_selectors is not None:
            pulumi.set(__self__, "cpe_traffic_selectors", cpe_traffic_selectors)
        if oracle_traffic_selectors is not None:
            pulumi.set(__self__, "oracle_traffic_selectors", oracle_traffic_selectors)

    @property
    @pulumi.getter(name="cpeTrafficSelectors")
    def cpe_traffic_selectors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cpe_traffic_selectors")

    @property
    @pulumi.getter(name="oracleTrafficSelectors")
    def oracle_traffic_selectors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "oracle_traffic_selectors")


@pulumi.output_type
class GetIpsecConnectionTunnelRoutesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIpsecConnectionTunnelRoutesTunnelRouteResult(dict):
    def __init__(__self__, *,
                 advertiser: Optional[str] = None,
                 age: Optional[str] = None,
                 as_paths: Optional[Sequence[int]] = None,
                 is_best_path: Optional[bool] = None,
                 prefix: Optional[str] = None):
        if advertiser is not None:
            pulumi.set(__self__, "advertiser", advertiser)
        if age is not None:
            pulumi.set(__self__, "age", age)
        if as_paths is not None:
            pulumi.set(__self__, "as_paths", as_paths)
        if is_best_path is not None:
            pulumi.set(__self__, "is_best_path", is_best_path)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def advertiser(self) -> Optional[str]:
        return pulumi.get(self, "advertiser")

    @property
    @pulumi.getter
    def age(self) -> Optional[str]:
        return pulumi.get(self, "age")

    @property
    @pulumi.getter(name="asPaths")
    def as_paths(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "as_paths")

    @property
    @pulumi.getter(name="isBestPath")
    def is_best_path(self) -> Optional[bool]:
        return pulumi.get(self, "is_best_path")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetIpsecConnectionTunnelsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIpsecConnectionTunnelsIpSecConnectionTunnelResult(dict):
    def __init__(__self__, *,
                 associated_virtual_circuits: Optional[Sequence[str]] = None,
                 bgp_session_infos: Optional[Sequence['outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfoResult']] = None,
                 compartment_id: Optional[str] = None,
                 cpe_ip: Optional[str] = None,
                 display_name: Optional[str] = None,
                 dpd_mode: Optional[str] = None,
                 dpd_timeout_in_sec: Optional[int] = None,
                 encryption_domain_configs: Optional[Sequence['outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfigResult']] = None,
                 id: Optional[str] = None,
                 ike_version: Optional[str] = None,
                 nat_translation_enabled: Optional[str] = None,
                 oracle_can_initiate: Optional[str] = None,
                 phase_one_details: Optional[Sequence['outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetailResult']] = None,
                 phase_two_details: Optional[Sequence['outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetailResult']] = None,
                 routing: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_status_updated: Optional[str] = None,
                 vpn_ip: Optional[str] = None):
        if associated_virtual_circuits is not None:
            pulumi.set(__self__, "associated_virtual_circuits", associated_virtual_circuits)
        if bgp_session_infos is not None:
            pulumi.set(__self__, "bgp_session_infos", bgp_session_infos)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if cpe_ip is not None:
            pulumi.set(__self__, "cpe_ip", cpe_ip)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dpd_mode is not None:
            pulumi.set(__self__, "dpd_mode", dpd_mode)
        if dpd_timeout_in_sec is not None:
            pulumi.set(__self__, "dpd_timeout_in_sec", dpd_timeout_in_sec)
        if encryption_domain_configs is not None:
            pulumi.set(__self__, "encryption_domain_configs", encryption_domain_configs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ike_version is not None:
            pulumi.set(__self__, "ike_version", ike_version)
        if nat_translation_enabled is not None:
            pulumi.set(__self__, "nat_translation_enabled", nat_translation_enabled)
        if oracle_can_initiate is not None:
            pulumi.set(__self__, "oracle_can_initiate", oracle_can_initiate)
        if phase_one_details is not None:
            pulumi.set(__self__, "phase_one_details", phase_one_details)
        if phase_two_details is not None:
            pulumi.set(__self__, "phase_two_details", phase_two_details)
        if routing is not None:
            pulumi.set(__self__, "routing", routing)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_status_updated is not None:
            pulumi.set(__self__, "time_status_updated", time_status_updated)
        if vpn_ip is not None:
            pulumi.set(__self__, "vpn_ip", vpn_ip)

    @property
    @pulumi.getter(name="associatedVirtualCircuits")
    def associated_virtual_circuits(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "associated_virtual_circuits")

    @property
    @pulumi.getter(name="bgpSessionInfos")
    def bgp_session_infos(self) -> Optional[Sequence['outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfoResult']]:
        return pulumi.get(self, "bgp_session_infos")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="cpeIp")
    def cpe_ip(self) -> Optional[str]:
        return pulumi.get(self, "cpe_ip")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dpdMode")
    def dpd_mode(self) -> Optional[str]:
        return pulumi.get(self, "dpd_mode")

    @property
    @pulumi.getter(name="dpdTimeoutInSec")
    def dpd_timeout_in_sec(self) -> Optional[int]:
        return pulumi.get(self, "dpd_timeout_in_sec")

    @property
    @pulumi.getter(name="encryptionDomainConfigs")
    def encryption_domain_configs(self) -> Optional[Sequence['outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfigResult']]:
        return pulumi.get(self, "encryption_domain_configs")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> Optional[str]:
        return pulumi.get(self, "ike_version")

    @property
    @pulumi.getter(name="natTranslationEnabled")
    def nat_translation_enabled(self) -> Optional[str]:
        return pulumi.get(self, "nat_translation_enabled")

    @property
    @pulumi.getter(name="oracleCanInitiate")
    def oracle_can_initiate(self) -> Optional[str]:
        return pulumi.get(self, "oracle_can_initiate")

    @property
    @pulumi.getter(name="phaseOneDetails")
    def phase_one_details(self) -> Optional[Sequence['outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetailResult']]:
        return pulumi.get(self, "phase_one_details")

    @property
    @pulumi.getter(name="phaseTwoDetails")
    def phase_two_details(self) -> Optional[Sequence['outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetailResult']]:
        return pulumi.get(self, "phase_two_details")

    @property
    @pulumi.getter
    def routing(self) -> Optional[str]:
        return pulumi.get(self, "routing")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeStatusUpdated")
    def time_status_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_status_updated")

    @property
    @pulumi.getter(name="vpnIp")
    def vpn_ip(self) -> Optional[str]:
        return pulumi.get(self, "vpn_ip")


@pulumi.output_type
class GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfoResult(dict):
    def __init__(__self__, *,
                 bgp_ipv6state: Optional[str] = None,
                 bgp_state: Optional[str] = None,
                 customer_bgp_asn: Optional[str] = None,
                 customer_interface_ip: Optional[str] = None,
                 customer_interface_ipv6: Optional[str] = None,
                 oracle_bgp_asn: Optional[str] = None,
                 oracle_interface_ip: Optional[str] = None,
                 oracle_interface_ipv6: Optional[str] = None):
        if bgp_ipv6state is not None:
            pulumi.set(__self__, "bgp_ipv6state", bgp_ipv6state)
        if bgp_state is not None:
            pulumi.set(__self__, "bgp_state", bgp_state)
        if customer_bgp_asn is not None:
            pulumi.set(__self__, "customer_bgp_asn", customer_bgp_asn)
        if customer_interface_ip is not None:
            pulumi.set(__self__, "customer_interface_ip", customer_interface_ip)
        if customer_interface_ipv6 is not None:
            pulumi.set(__self__, "customer_interface_ipv6", customer_interface_ipv6)
        if oracle_bgp_asn is not None:
            pulumi.set(__self__, "oracle_bgp_asn", oracle_bgp_asn)
        if oracle_interface_ip is not None:
            pulumi.set(__self__, "oracle_interface_ip", oracle_interface_ip)
        if oracle_interface_ipv6 is not None:
            pulumi.set(__self__, "oracle_interface_ipv6", oracle_interface_ipv6)

    @property
    @pulumi.getter(name="bgpIpv6state")
    def bgp_ipv6state(self) -> Optional[str]:
        return pulumi.get(self, "bgp_ipv6state")

    @property
    @pulumi.getter(name="bgpState")
    def bgp_state(self) -> Optional[str]:
        return pulumi.get(self, "bgp_state")

    @property
    @pulumi.getter(name="customerBgpAsn")
    def customer_bgp_asn(self) -> Optional[str]:
        return pulumi.get(self, "customer_bgp_asn")

    @property
    @pulumi.getter(name="customerInterfaceIp")
    def customer_interface_ip(self) -> Optional[str]:
        return pulumi.get(self, "customer_interface_ip")

    @property
    @pulumi.getter(name="customerInterfaceIpv6")
    def customer_interface_ipv6(self) -> Optional[str]:
        return pulumi.get(self, "customer_interface_ipv6")

    @property
    @pulumi.getter(name="oracleBgpAsn")
    def oracle_bgp_asn(self) -> Optional[str]:
        return pulumi.get(self, "oracle_bgp_asn")

    @property
    @pulumi.getter(name="oracleInterfaceIp")
    def oracle_interface_ip(self) -> Optional[str]:
        return pulumi.get(self, "oracle_interface_ip")

    @property
    @pulumi.getter(name="oracleInterfaceIpv6")
    def oracle_interface_ipv6(self) -> Optional[str]:
        return pulumi.get(self, "oracle_interface_ipv6")


@pulumi.output_type
class GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfigResult(dict):
    def __init__(__self__, *,
                 cpe_traffic_selectors: Optional[Sequence[str]] = None,
                 oracle_traffic_selectors: Optional[Sequence[str]] = None):
        if cpe_traffic_selectors is not None:
            pulumi.set(__self__, "cpe_traffic_selectors", cpe_traffic_selectors)
        if oracle_traffic_selectors is not None:
            pulumi.set(__self__, "oracle_traffic_selectors", oracle_traffic_selectors)

    @property
    @pulumi.getter(name="cpeTrafficSelectors")
    def cpe_traffic_selectors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cpe_traffic_selectors")

    @property
    @pulumi.getter(name="oracleTrafficSelectors")
    def oracle_traffic_selectors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "oracle_traffic_selectors")


@pulumi.output_type
class GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetailResult(dict):
    def __init__(__self__, *,
                 custom_authentication_algorithm: Optional[str] = None,
                 custom_dh_group: Optional[str] = None,
                 custom_encryption_algorithm: Optional[str] = None,
                 is_custom_phase_one_config: Optional[bool] = None,
                 is_ike_established: Optional[bool] = None,
                 lifetime: Optional[int] = None,
                 negotiated_authentication_algorithm: Optional[str] = None,
                 negotiated_dh_group: Optional[str] = None,
                 negotiated_encryption_algorithm: Optional[str] = None,
                 remaining_lifetime: Optional[str] = None,
                 remaining_lifetime_last_retrieved: Optional[str] = None):
        if custom_authentication_algorithm is not None:
            pulumi.set(__self__, "custom_authentication_algorithm", custom_authentication_algorithm)
        if custom_dh_group is not None:
            pulumi.set(__self__, "custom_dh_group", custom_dh_group)
        if custom_encryption_algorithm is not None:
            pulumi.set(__self__, "custom_encryption_algorithm", custom_encryption_algorithm)
        if is_custom_phase_one_config is not None:
            pulumi.set(__self__, "is_custom_phase_one_config", is_custom_phase_one_config)
        if is_ike_established is not None:
            pulumi.set(__self__, "is_ike_established", is_ike_established)
        if lifetime is not None:
            pulumi.set(__self__, "lifetime", lifetime)
        if negotiated_authentication_algorithm is not None:
            pulumi.set(__self__, "negotiated_authentication_algorithm", negotiated_authentication_algorithm)
        if negotiated_dh_group is not None:
            pulumi.set(__self__, "negotiated_dh_group", negotiated_dh_group)
        if negotiated_encryption_algorithm is not None:
            pulumi.set(__self__, "negotiated_encryption_algorithm", negotiated_encryption_algorithm)
        if remaining_lifetime is not None:
            pulumi.set(__self__, "remaining_lifetime", remaining_lifetime)
        if remaining_lifetime_last_retrieved is not None:
            pulumi.set(__self__, "remaining_lifetime_last_retrieved", remaining_lifetime_last_retrieved)

    @property
    @pulumi.getter(name="customAuthenticationAlgorithm")
    def custom_authentication_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "custom_authentication_algorithm")

    @property
    @pulumi.getter(name="customDhGroup")
    def custom_dh_group(self) -> Optional[str]:
        return pulumi.get(self, "custom_dh_group")

    @property
    @pulumi.getter(name="customEncryptionAlgorithm")
    def custom_encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "custom_encryption_algorithm")

    @property
    @pulumi.getter(name="isCustomPhaseOneConfig")
    def is_custom_phase_one_config(self) -> Optional[bool]:
        return pulumi.get(self, "is_custom_phase_one_config")

    @property
    @pulumi.getter(name="isIkeEstablished")
    def is_ike_established(self) -> Optional[bool]:
        return pulumi.get(self, "is_ike_established")

    @property
    @pulumi.getter
    def lifetime(self) -> Optional[int]:
        return pulumi.get(self, "lifetime")

    @property
    @pulumi.getter(name="negotiatedAuthenticationAlgorithm")
    def negotiated_authentication_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "negotiated_authentication_algorithm")

    @property
    @pulumi.getter(name="negotiatedDhGroup")
    def negotiated_dh_group(self) -> Optional[str]:
        return pulumi.get(self, "negotiated_dh_group")

    @property
    @pulumi.getter(name="negotiatedEncryptionAlgorithm")
    def negotiated_encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "negotiated_encryption_algorithm")

    @property
    @pulumi.getter(name="remainingLifetime")
    def remaining_lifetime(self) -> Optional[str]:
        return pulumi.get(self, "remaining_lifetime")

    @property
    @pulumi.getter(name="remainingLifetimeLastRetrieved")
    def remaining_lifetime_last_retrieved(self) -> Optional[str]:
        return pulumi.get(self, "remaining_lifetime_last_retrieved")


@pulumi.output_type
class GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetailResult(dict):
    def __init__(__self__, *,
                 custom_authentication_algorithm: Optional[str] = None,
                 custom_encryption_algorithm: Optional[str] = None,
                 dh_group: Optional[str] = None,
                 is_custom_phase_two_config: Optional[bool] = None,
                 is_esp_established: Optional[bool] = None,
                 is_pfs_enabled: Optional[bool] = None,
                 lifetime: Optional[int] = None,
                 negotiated_authentication_algorithm: Optional[str] = None,
                 negotiated_dh_group: Optional[str] = None,
                 negotiated_encryption_algorithm: Optional[str] = None,
                 remaining_lifetime: Optional[str] = None,
                 remaining_lifetime_last_retrieved: Optional[str] = None):
        if custom_authentication_algorithm is not None:
            pulumi.set(__self__, "custom_authentication_algorithm", custom_authentication_algorithm)
        if custom_encryption_algorithm is not None:
            pulumi.set(__self__, "custom_encryption_algorithm", custom_encryption_algorithm)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if is_custom_phase_two_config is not None:
            pulumi.set(__self__, "is_custom_phase_two_config", is_custom_phase_two_config)
        if is_esp_established is not None:
            pulumi.set(__self__, "is_esp_established", is_esp_established)
        if is_pfs_enabled is not None:
            pulumi.set(__self__, "is_pfs_enabled", is_pfs_enabled)
        if lifetime is not None:
            pulumi.set(__self__, "lifetime", lifetime)
        if negotiated_authentication_algorithm is not None:
            pulumi.set(__self__, "negotiated_authentication_algorithm", negotiated_authentication_algorithm)
        if negotiated_dh_group is not None:
            pulumi.set(__self__, "negotiated_dh_group", negotiated_dh_group)
        if negotiated_encryption_algorithm is not None:
            pulumi.set(__self__, "negotiated_encryption_algorithm", negotiated_encryption_algorithm)
        if remaining_lifetime is not None:
            pulumi.set(__self__, "remaining_lifetime", remaining_lifetime)
        if remaining_lifetime_last_retrieved is not None:
            pulumi.set(__self__, "remaining_lifetime_last_retrieved", remaining_lifetime_last_retrieved)

    @property
    @pulumi.getter(name="customAuthenticationAlgorithm")
    def custom_authentication_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "custom_authentication_algorithm")

    @property
    @pulumi.getter(name="customEncryptionAlgorithm")
    def custom_encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "custom_encryption_algorithm")

    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[str]:
        return pulumi.get(self, "dh_group")

    @property
    @pulumi.getter(name="isCustomPhaseTwoConfig")
    def is_custom_phase_two_config(self) -> Optional[bool]:
        return pulumi.get(self, "is_custom_phase_two_config")

    @property
    @pulumi.getter(name="isEspEstablished")
    def is_esp_established(self) -> Optional[bool]:
        return pulumi.get(self, "is_esp_established")

    @property
    @pulumi.getter(name="isPfsEnabled")
    def is_pfs_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pfs_enabled")

    @property
    @pulumi.getter
    def lifetime(self) -> Optional[int]:
        return pulumi.get(self, "lifetime")

    @property
    @pulumi.getter(name="negotiatedAuthenticationAlgorithm")
    def negotiated_authentication_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "negotiated_authentication_algorithm")

    @property
    @pulumi.getter(name="negotiatedDhGroup")
    def negotiated_dh_group(self) -> Optional[str]:
        return pulumi.get(self, "negotiated_dh_group")

    @property
    @pulumi.getter(name="negotiatedEncryptionAlgorithm")
    def negotiated_encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "negotiated_encryption_algorithm")

    @property
    @pulumi.getter(name="remainingLifetime")
    def remaining_lifetime(self) -> Optional[str]:
        return pulumi.get(self, "remaining_lifetime")

    @property
    @pulumi.getter(name="remainingLifetimeLastRetrieved")
    def remaining_lifetime_last_retrieved(self) -> Optional[str]:
        return pulumi.get(self, "remaining_lifetime_last_retrieved")


@pulumi.output_type
class GetIpsecConnectionsConnectionResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 cpe_id: Optional[str] = None,
                 cpe_local_identifier: Optional[str] = None,
                 cpe_local_identifier_type: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 drg_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 state: Optional[str] = None,
                 static_routes: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 transport_type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if cpe_id is not None:
            pulumi.set(__self__, "cpe_id", cpe_id)
        if cpe_local_identifier is not None:
            pulumi.set(__self__, "cpe_local_identifier", cpe_local_identifier)
        if cpe_local_identifier_type is not None:
            pulumi.set(__self__, "cpe_local_identifier_type", cpe_local_identifier_type)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if drg_id is not None:
            pulumi.set(__self__, "drg_id", drg_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if static_routes is not None:
            pulumi.set(__self__, "static_routes", static_routes)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if transport_type is not None:
            pulumi.set(__self__, "transport_type", transport_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="cpeId")
    def cpe_id(self) -> Optional[str]:
        return pulumi.get(self, "cpe_id")

    @property
    @pulumi.getter(name="cpeLocalIdentifier")
    def cpe_local_identifier(self) -> Optional[str]:
        return pulumi.get(self, "cpe_local_identifier")

    @property
    @pulumi.getter(name="cpeLocalIdentifierType")
    def cpe_local_identifier_type(self) -> Optional[str]:
        return pulumi.get(self, "cpe_local_identifier_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="drgId")
    def drg_id(self) -> Optional[str]:
        return pulumi.get(self, "drg_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="staticRoutes")
    def static_routes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "static_routes")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="transportType")
    def transport_type(self) -> Optional[str]:
        return pulumi.get(self, "transport_type")


@pulumi.output_type
class GetIpsecConnectionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIpsecStatusFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIpsecStatusTunnelResult(dict):
    def __init__(__self__, *,
                 ip_address: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_state_modified: Optional[str] = None):
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_state_modified is not None:
            pulumi.set(__self__, "time_state_modified", time_state_modified)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeStateModified")
    def time_state_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_state_modified")


@pulumi.output_type
class GetIpv6sFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetIpv6sIpv6Result(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 ipv6subnet_cidr: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vnic_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ipv6subnet_cidr is not None:
            pulumi.set(__self__, "ipv6subnet_cidr", ipv6subnet_cidr)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vnic_id is not None:
            pulumi.set(__self__, "vnic_id", vnic_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipv6subnetCidr")
    def ipv6subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6subnet_cidr")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vnicId")
    def vnic_id(self) -> Optional[str]:
        return pulumi.get(self, "vnic_id")


@pulumi.output_type
class GetListingResourceVersionsAppCatalogListingResourceVersionResult(dict):
    def __init__(__self__, *,
                 accessible_ports: Optional[Sequence[int]] = None,
                 allowed_actions: Optional[Sequence[str]] = None,
                 available_regions: Optional[Sequence[str]] = None,
                 compatible_shapes: Optional[Sequence[str]] = None,
                 listing_id: Optional[str] = None,
                 listing_resource_id: Optional[str] = None,
                 listing_resource_version: Optional[str] = None,
                 time_published: Optional[str] = None):
        if accessible_ports is not None:
            pulumi.set(__self__, "accessible_ports", accessible_ports)
        if allowed_actions is not None:
            pulumi.set(__self__, "allowed_actions", allowed_actions)
        if available_regions is not None:
            pulumi.set(__self__, "available_regions", available_regions)
        if compatible_shapes is not None:
            pulumi.set(__self__, "compatible_shapes", compatible_shapes)
        if listing_id is not None:
            pulumi.set(__self__, "listing_id", listing_id)
        if listing_resource_id is not None:
            pulumi.set(__self__, "listing_resource_id", listing_resource_id)
        if listing_resource_version is not None:
            pulumi.set(__self__, "listing_resource_version", listing_resource_version)
        if time_published is not None:
            pulumi.set(__self__, "time_published", time_published)

    @property
    @pulumi.getter(name="accessiblePorts")
    def accessible_ports(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "accessible_ports")

    @property
    @pulumi.getter(name="allowedActions")
    def allowed_actions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_actions")

    @property
    @pulumi.getter(name="availableRegions")
    def available_regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "available_regions")

    @property
    @pulumi.getter(name="compatibleShapes")
    def compatible_shapes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "compatible_shapes")

    @property
    @pulumi.getter(name="listingId")
    def listing_id(self) -> Optional[str]:
        return pulumi.get(self, "listing_id")

    @property
    @pulumi.getter(name="listingResourceId")
    def listing_resource_id(self) -> Optional[str]:
        return pulumi.get(self, "listing_resource_id")

    @property
    @pulumi.getter(name="listingResourceVersion")
    def listing_resource_version(self) -> Optional[str]:
        return pulumi.get(self, "listing_resource_version")

    @property
    @pulumi.getter(name="timePublished")
    def time_published(self) -> Optional[str]:
        return pulumi.get(self, "time_published")


@pulumi.output_type
class GetListingResourceVersionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLocalPeeringGatewaysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLocalPeeringGatewaysLocalPeeringGatewayResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_cross_tenancy_peering: Optional[bool] = None,
                 peer_advertised_cidr: Optional[str] = None,
                 peer_advertised_cidr_details: Optional[Sequence[str]] = None,
                 peer_id: Optional[str] = None,
                 peering_status: Optional[str] = None,
                 peering_status_details: Optional[str] = None,
                 route_table_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_cross_tenancy_peering is not None:
            pulumi.set(__self__, "is_cross_tenancy_peering", is_cross_tenancy_peering)
        if peer_advertised_cidr is not None:
            pulumi.set(__self__, "peer_advertised_cidr", peer_advertised_cidr)
        if peer_advertised_cidr_details is not None:
            pulumi.set(__self__, "peer_advertised_cidr_details", peer_advertised_cidr_details)
        if peer_id is not None:
            pulumi.set(__self__, "peer_id", peer_id)
        if peering_status is not None:
            pulumi.set(__self__, "peering_status", peering_status)
        if peering_status_details is not None:
            pulumi.set(__self__, "peering_status_details", peering_status_details)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCrossTenancyPeering")
    def is_cross_tenancy_peering(self) -> Optional[bool]:
        return pulumi.get(self, "is_cross_tenancy_peering")

    @property
    @pulumi.getter(name="peerAdvertisedCidr")
    def peer_advertised_cidr(self) -> Optional[str]:
        return pulumi.get(self, "peer_advertised_cidr")

    @property
    @pulumi.getter(name="peerAdvertisedCidrDetails")
    def peer_advertised_cidr_details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "peer_advertised_cidr_details")

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> Optional[str]:
        return pulumi.get(self, "peer_id")

    @property
    @pulumi.getter(name="peeringStatus")
    def peering_status(self) -> Optional[str]:
        return pulumi.get(self, "peering_status")

    @property
    @pulumi.getter(name="peeringStatusDetails")
    def peering_status_details(self) -> Optional[str]:
        return pulumi.get(self, "peering_status_details")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetNatGatewaysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNatGatewaysNatGatewayResult(dict):
    def __init__(__self__, *,
                 block_traffic: Optional[bool] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 nat_ip: Optional[str] = None,
                 public_ip_id: Optional[str] = None,
                 route_table_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if block_traffic is not None:
            pulumi.set(__self__, "block_traffic", block_traffic)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if nat_ip is not None:
            pulumi.set(__self__, "nat_ip", nat_ip)
        if public_ip_id is not None:
            pulumi.set(__self__, "public_ip_id", public_ip_id)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="blockTraffic")
    def block_traffic(self) -> Optional[bool]:
        return pulumi.get(self, "block_traffic")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="natIp")
    def nat_ip(self) -> Optional[str]:
        return pulumi.get(self, "nat_ip")

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> Optional[str]:
        return pulumi.get(self, "public_ip_id")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetNetworkSecurityGroupSecurityRulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkSecurityGroupSecurityRulesSecurityRuleResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 destination: Optional[str] = None,
                 destination_type: Optional[str] = None,
                 direction: Optional[str] = None,
                 icmp_options: Optional[Sequence['outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOptionResult']] = None,
                 id: Optional[str] = None,
                 is_valid: Optional[bool] = None,
                 protocol: Optional[str] = None,
                 source: Optional[str] = None,
                 source_type: Optional[str] = None,
                 stateless: Optional[bool] = None,
                 tcp_options: Optional[Sequence['outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionResult']] = None,
                 time_created: Optional[str] = None,
                 udp_options: Optional[Sequence['outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionResult']] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if icmp_options is not None:
            pulumi.set(__self__, "icmp_options", icmp_options)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_valid is not None:
            pulumi.set(__self__, "is_valid", is_valid)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stateless is not None:
            pulumi.set(__self__, "stateless", stateless)
        if tcp_options is not None:
            pulumi.set(__self__, "tcp_options", tcp_options)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if udp_options is not None:
            pulumi.set(__self__, "udp_options", udp_options)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> Optional[Sequence['outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOptionResult']]:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isValid")
    def is_valid(self) -> Optional[bool]:
        return pulumi.get(self, "is_valid")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def stateless(self) -> Optional[bool]:
        return pulumi.get(self, "stateless")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Optional[Sequence['outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionResult']]:
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="udpOptions")
    def udp_options(self) -> Optional[Sequence['outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionResult']]:
        return pulumi.get(self, "udp_options")


@pulumi.output_type
class GetNetworkSecurityGroupSecurityRulesSecurityRuleIcmpOptionResult(dict):
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 type: Optional[int] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[int]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionResult(dict):
    def __init__(__self__, *,
                 destination_port_ranges: Optional[Sequence['outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionDestinationPortRangeResult']] = None,
                 source_port_ranges: Optional[Sequence['outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionSourcePortRangeResult']] = None):
        if destination_port_ranges is not None:
            pulumi.set(__self__, "destination_port_ranges", destination_port_ranges)
        if source_port_ranges is not None:
            pulumi.set(__self__, "source_port_ranges", source_port_ranges)

    @property
    @pulumi.getter(name="destinationPortRanges")
    def destination_port_ranges(self) -> Optional[Sequence['outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionDestinationPortRangeResult']]:
        return pulumi.get(self, "destination_port_ranges")

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> Optional[Sequence['outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionSourcePortRangeResult']]:
        return pulumi.get(self, "source_port_ranges")


@pulumi.output_type
class GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionDestinationPortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetNetworkSecurityGroupSecurityRulesSecurityRuleTcpOptionSourcePortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionResult(dict):
    def __init__(__self__, *,
                 destination_port_ranges: Optional[Sequence['outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionDestinationPortRangeResult']] = None,
                 source_port_ranges: Optional[Sequence['outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionSourcePortRangeResult']] = None):
        if destination_port_ranges is not None:
            pulumi.set(__self__, "destination_port_ranges", destination_port_ranges)
        if source_port_ranges is not None:
            pulumi.set(__self__, "source_port_ranges", source_port_ranges)

    @property
    @pulumi.getter(name="destinationPortRanges")
    def destination_port_ranges(self) -> Optional[Sequence['outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionDestinationPortRangeResult']]:
        return pulumi.get(self, "destination_port_ranges")

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> Optional[Sequence['outputs.GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionSourcePortRangeResult']]:
        return pulumi.get(self, "source_port_ranges")


@pulumi.output_type
class GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionDestinationPortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetNetworkSecurityGroupSecurityRulesSecurityRuleUdpOptionSourcePortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetNetworkSecurityGroupVnicsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkSecurityGroupVnicsNetworkSecurityGroupVnicResult(dict):
    def __init__(__self__, *,
                 resource_id: Optional[str] = None,
                 time_associated: Optional[str] = None,
                 vnic_id: Optional[str] = None):
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if time_associated is not None:
            pulumi.set(__self__, "time_associated", time_associated)
        if vnic_id is not None:
            pulumi.set(__self__, "vnic_id", vnic_id)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="timeAssociated")
    def time_associated(self) -> Optional[str]:
        return pulumi.get(self, "time_associated")

    @property
    @pulumi.getter(name="vnicId")
    def vnic_id(self) -> Optional[str]:
        return pulumi.get(self, "vnic_id")


@pulumi.output_type
class GetNetworkSecurityGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNetworkSecurityGroupsNetworkSecurityGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetPeerRegionForRemotePeeringsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPeerRegionForRemotePeeringsPeerRegionForRemotePeeringResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPrivateIpsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPrivateIpsPrivateIpResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 id: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 is_primary: Optional[bool] = None,
                 is_reserved: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vlan_id: Optional[str] = None,
                 vnic_id: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if is_reserved is not None:
            pulumi.set(__self__, "is_reserved", is_reserved)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vnic_id is not None:
            pulumi.set(__self__, "vnic_id", vnic_id)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[bool]:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter(name="isReserved")
    def is_reserved(self) -> Optional[bool]:
        return pulumi.get(self, "is_reserved")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vnicId")
    def vnic_id(self) -> Optional[str]:
        return pulumi.get(self, "vnic_id")


@pulumi.output_type
class GetPublicIpPoolsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPublicIpPoolsPublicIpPoolCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetPublicIpPoolsPublicIpPoolCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetPublicIpPoolsPublicIpPoolCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetPublicIpPoolsPublicIpPoolCollectionItemResult(dict):
    def __init__(__self__, *,
                 cidr_blocks: Optional[Sequence[str]] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if cidr_blocks is not None:
            pulumi.set(__self__, "cidr_blocks", cidr_blocks)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cidr_blocks")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetPublicIpsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPublicIpsPublicIpResult(dict):
    def __init__(__self__, *,
                 assigned_entity_id: Optional[str] = None,
                 assigned_entity_type: Optional[str] = None,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 lifetime: Optional[str] = None,
                 private_ip_id: Optional[str] = None,
                 public_ip_pool_id: Optional[str] = None,
                 scope: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if assigned_entity_id is not None:
            pulumi.set(__self__, "assigned_entity_id", assigned_entity_id)
        if assigned_entity_type is not None:
            pulumi.set(__self__, "assigned_entity_type", assigned_entity_type)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if lifetime is not None:
            pulumi.set(__self__, "lifetime", lifetime)
        if private_ip_id is not None:
            pulumi.set(__self__, "private_ip_id", private_ip_id)
        if public_ip_pool_id is not None:
            pulumi.set(__self__, "public_ip_pool_id", public_ip_pool_id)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="assignedEntityId")
    def assigned_entity_id(self) -> Optional[str]:
        return pulumi.get(self, "assigned_entity_id")

    @property
    @pulumi.getter(name="assignedEntityType")
    def assigned_entity_type(self) -> Optional[str]:
        return pulumi.get(self, "assigned_entity_type")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def lifetime(self) -> Optional[str]:
        return pulumi.get(self, "lifetime")

    @property
    @pulumi.getter(name="privateIpId")
    def private_ip_id(self) -> Optional[str]:
        return pulumi.get(self, "private_ip_id")

    @property
    @pulumi.getter(name="publicIpPoolId")
    def public_ip_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "public_ip_pool_id")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetRemotePeeringConnectionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRemotePeeringConnectionsRemotePeeringConnectionResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 drg_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_cross_tenancy_peering: Optional[bool] = None,
                 peer_id: Optional[str] = None,
                 peer_region_name: Optional[str] = None,
                 peer_tenancy_id: Optional[str] = None,
                 peering_status: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if drg_id is not None:
            pulumi.set(__self__, "drg_id", drg_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_cross_tenancy_peering is not None:
            pulumi.set(__self__, "is_cross_tenancy_peering", is_cross_tenancy_peering)
        if peer_id is not None:
            pulumi.set(__self__, "peer_id", peer_id)
        if peer_region_name is not None:
            pulumi.set(__self__, "peer_region_name", peer_region_name)
        if peer_tenancy_id is not None:
            pulumi.set(__self__, "peer_tenancy_id", peer_tenancy_id)
        if peering_status is not None:
            pulumi.set(__self__, "peering_status", peering_status)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="drgId")
    def drg_id(self) -> Optional[str]:
        return pulumi.get(self, "drg_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCrossTenancyPeering")
    def is_cross_tenancy_peering(self) -> Optional[bool]:
        return pulumi.get(self, "is_cross_tenancy_peering")

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> Optional[str]:
        return pulumi.get(self, "peer_id")

    @property
    @pulumi.getter(name="peerRegionName")
    def peer_region_name(self) -> Optional[str]:
        return pulumi.get(self, "peer_region_name")

    @property
    @pulumi.getter(name="peerTenancyId")
    def peer_tenancy_id(self) -> Optional[str]:
        return pulumi.get(self, "peer_tenancy_id")

    @property
    @pulumi.getter(name="peeringStatus")
    def peering_status(self) -> Optional[str]:
        return pulumi.get(self, "peering_status")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetRouteTablesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRouteTablesRouteTableResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 route_rules: Optional[Sequence['outputs.GetRouteTablesRouteTableRouteRuleResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if route_rules is not None:
            pulumi.set(__self__, "route_rules", route_rules)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="routeRules")
    def route_rules(self) -> Optional[Sequence['outputs.GetRouteTablesRouteTableRouteRuleResult']]:
        return pulumi.get(self, "route_rules")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetRouteTablesRouteTableRouteRuleResult(dict):
    def __init__(__self__, *,
                 cidr_block: Optional[str] = None,
                 description: Optional[str] = None,
                 destination: Optional[str] = None,
                 destination_type: Optional[str] = None,
                 network_entity_id: Optional[str] = None,
                 route_type: Optional[str] = None):
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if network_entity_id is not None:
            pulumi.set(__self__, "network_entity_id", network_entity_id)
        if route_type is not None:
            pulumi.set(__self__, "route_type", route_type)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        warnings.warn("""The 'cidr_block' field has been deprecated. Please use 'destination' instead.""", DeprecationWarning)
        pulumi.log.warn("""cidr_block is deprecated: The 'cidr_block' field has been deprecated. Please use 'destination' instead.""")

        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="networkEntityId")
    def network_entity_id(self) -> Optional[str]:
        return pulumi.get(self, "network_entity_id")

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> Optional[str]:
        return pulumi.get(self, "route_type")


@pulumi.output_type
class GetSecurityListsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityListsSecurityListResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 egress_security_rules: Optional[Sequence['outputs.GetSecurityListsSecurityListEgressSecurityRuleResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 ingress_security_rules: Optional[Sequence['outputs.GetSecurityListsSecurityListIngressSecurityRuleResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if egress_security_rules is not None:
            pulumi.set(__self__, "egress_security_rules", egress_security_rules)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ingress_security_rules is not None:
            pulumi.set(__self__, "ingress_security_rules", ingress_security_rules)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="egressSecurityRules")
    def egress_security_rules(self) -> Optional[Sequence['outputs.GetSecurityListsSecurityListEgressSecurityRuleResult']]:
        return pulumi.get(self, "egress_security_rules")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ingressSecurityRules")
    def ingress_security_rules(self) -> Optional[Sequence['outputs.GetSecurityListsSecurityListIngressSecurityRuleResult']]:
        return pulumi.get(self, "ingress_security_rules")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetSecurityListsSecurityListEgressSecurityRuleResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 destination: Optional[str] = None,
                 destination_type: Optional[str] = None,
                 icmp_options: Optional[Sequence['outputs.GetSecurityListsSecurityListEgressSecurityRuleIcmpOptionResult']] = None,
                 protocol: Optional[str] = None,
                 stateless: Optional[bool] = None,
                 tcp_options: Optional[Sequence['outputs.GetSecurityListsSecurityListEgressSecurityRuleTcpOptionResult']] = None,
                 udp_options: Optional[Sequence['outputs.GetSecurityListsSecurityListEgressSecurityRuleUdpOptionResult']] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if icmp_options is not None:
            pulumi.set(__self__, "icmp_options", icmp_options)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if stateless is not None:
            pulumi.set(__self__, "stateless", stateless)
        if tcp_options is not None:
            pulumi.set(__self__, "tcp_options", tcp_options)
        if udp_options is not None:
            pulumi.set(__self__, "udp_options", udp_options)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> Optional[Sequence['outputs.GetSecurityListsSecurityListEgressSecurityRuleIcmpOptionResult']]:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def stateless(self) -> Optional[bool]:
        return pulumi.get(self, "stateless")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Optional[Sequence['outputs.GetSecurityListsSecurityListEgressSecurityRuleTcpOptionResult']]:
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter(name="udpOptions")
    def udp_options(self) -> Optional[Sequence['outputs.GetSecurityListsSecurityListEgressSecurityRuleUdpOptionResult']]:
        return pulumi.get(self, "udp_options")


@pulumi.output_type
class GetSecurityListsSecurityListEgressSecurityRuleIcmpOptionResult(dict):
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 type: Optional[int] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[int]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSecurityListsSecurityListEgressSecurityRuleTcpOptionResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None,
                 source_port_ranges: Optional[Sequence['outputs.GetSecurityListsSecurityListEgressSecurityRuleTcpOptionSourcePortRangeResult']] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if source_port_ranges is not None:
            pulumi.set(__self__, "source_port_ranges", source_port_ranges)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> Optional[Sequence['outputs.GetSecurityListsSecurityListEgressSecurityRuleTcpOptionSourcePortRangeResult']]:
        return pulumi.get(self, "source_port_ranges")


@pulumi.output_type
class GetSecurityListsSecurityListEgressSecurityRuleTcpOptionSourcePortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetSecurityListsSecurityListEgressSecurityRuleUdpOptionResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None,
                 source_port_ranges: Optional[Sequence['outputs.GetSecurityListsSecurityListEgressSecurityRuleUdpOptionSourcePortRangeResult']] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if source_port_ranges is not None:
            pulumi.set(__self__, "source_port_ranges", source_port_ranges)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> Optional[Sequence['outputs.GetSecurityListsSecurityListEgressSecurityRuleUdpOptionSourcePortRangeResult']]:
        return pulumi.get(self, "source_port_ranges")


@pulumi.output_type
class GetSecurityListsSecurityListEgressSecurityRuleUdpOptionSourcePortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetSecurityListsSecurityListIngressSecurityRuleResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 icmp_options: Optional[Sequence['outputs.GetSecurityListsSecurityListIngressSecurityRuleIcmpOptionResult']] = None,
                 protocol: Optional[str] = None,
                 source: Optional[str] = None,
                 source_type: Optional[str] = None,
                 stateless: Optional[bool] = None,
                 tcp_options: Optional[Sequence['outputs.GetSecurityListsSecurityListIngressSecurityRuleTcpOptionResult']] = None,
                 udp_options: Optional[Sequence['outputs.GetSecurityListsSecurityListIngressSecurityRuleUdpOptionResult']] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icmp_options is not None:
            pulumi.set(__self__, "icmp_options", icmp_options)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if stateless is not None:
            pulumi.set(__self__, "stateless", stateless)
        if tcp_options is not None:
            pulumi.set(__self__, "tcp_options", tcp_options)
        if udp_options is not None:
            pulumi.set(__self__, "udp_options", udp_options)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> Optional[Sequence['outputs.GetSecurityListsSecurityListIngressSecurityRuleIcmpOptionResult']]:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def stateless(self) -> Optional[bool]:
        return pulumi.get(self, "stateless")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Optional[Sequence['outputs.GetSecurityListsSecurityListIngressSecurityRuleTcpOptionResult']]:
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter(name="udpOptions")
    def udp_options(self) -> Optional[Sequence['outputs.GetSecurityListsSecurityListIngressSecurityRuleUdpOptionResult']]:
        return pulumi.get(self, "udp_options")


@pulumi.output_type
class GetSecurityListsSecurityListIngressSecurityRuleIcmpOptionResult(dict):
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 type: Optional[int] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[int]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSecurityListsSecurityListIngressSecurityRuleTcpOptionResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None,
                 source_port_ranges: Optional[Sequence['outputs.GetSecurityListsSecurityListIngressSecurityRuleTcpOptionSourcePortRangeResult']] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if source_port_ranges is not None:
            pulumi.set(__self__, "source_port_ranges", source_port_ranges)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> Optional[Sequence['outputs.GetSecurityListsSecurityListIngressSecurityRuleTcpOptionSourcePortRangeResult']]:
        return pulumi.get(self, "source_port_ranges")


@pulumi.output_type
class GetSecurityListsSecurityListIngressSecurityRuleTcpOptionSourcePortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetSecurityListsSecurityListIngressSecurityRuleUdpOptionResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None,
                 source_port_ranges: Optional[Sequence['outputs.GetSecurityListsSecurityListIngressSecurityRuleUdpOptionSourcePortRangeResult']] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if source_port_ranges is not None:
            pulumi.set(__self__, "source_port_ranges", source_port_ranges)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="sourcePortRanges")
    def source_port_ranges(self) -> Optional[Sequence['outputs.GetSecurityListsSecurityListIngressSecurityRuleUdpOptionSourcePortRangeResult']]:
        return pulumi.get(self, "source_port_ranges")


@pulumi.output_type
class GetSecurityListsSecurityListIngressSecurityRuleUdpOptionSourcePortRangeResult(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetServiceGatewaysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetServiceGatewaysServiceGatewayResult(dict):
    def __init__(__self__, *,
                 block_traffic: Optional[bool] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 route_table_id: Optional[str] = None,
                 services: Optional[Sequence['outputs.GetServiceGatewaysServiceGatewayServiceResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if block_traffic is not None:
            pulumi.set(__self__, "block_traffic", block_traffic)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="blockTraffic")
    def block_traffic(self) -> Optional[bool]:
        return pulumi.get(self, "block_traffic")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence['outputs.GetServiceGatewaysServiceGatewayServiceResult']]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetServiceGatewaysServiceGatewayServiceResult(dict):
    def __init__(__self__, *,
                 service_id: Optional[str] = None,
                 service_name: Optional[str] = None):
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[str]:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetServicesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetServicesServiceResult(dict):
    def __init__(__self__, *,
                 cidr_block: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetShapeFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetShapeShapeResult(dict):
    def __init__(__self__, *,
                 baseline_ocpu_utilizations: Optional[Sequence[str]] = None,
                 billing_type: Optional[str] = None,
                 gpu_description: Optional[str] = None,
                 gpus: Optional[int] = None,
                 is_billed_for_stopped_instance: Optional[bool] = None,
                 is_flexible: Optional[bool] = None,
                 is_live_migration_supported: Optional[bool] = None,
                 is_subcore: Optional[bool] = None,
                 local_disk_description: Optional[str] = None,
                 local_disks: Optional[int] = None,
                 local_disks_total_size_in_gbs: Optional[float] = None,
                 max_vnic_attachment_options: Optional[Sequence['outputs.GetShapeShapeMaxVnicAttachmentOptionResult']] = None,
                 max_vnic_attachments: Optional[int] = None,
                 memory_in_gbs: Optional[float] = None,
                 memory_options: Optional[Sequence['outputs.GetShapeShapeMemoryOptionResult']] = None,
                 min_total_baseline_ocpus_required: Optional[float] = None,
                 name: Optional[str] = None,
                 network_ports: Optional[int] = None,
                 networking_bandwidth_in_gbps: Optional[float] = None,
                 networking_bandwidth_options: Optional[Sequence['outputs.GetShapeShapeNetworkingBandwidthOptionResult']] = None,
                 ocpu_options: Optional[Sequence['outputs.GetShapeShapeOcpuOptionResult']] = None,
                 ocpus: Optional[float] = None,
                 platform_config_options: Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionResult']] = None,
                 processor_description: Optional[str] = None,
                 quota_names: Optional[Sequence[str]] = None,
                 rdma_bandwidth_in_gbps: Optional[int] = None,
                 rdma_ports: Optional[int] = None,
                 recommended_alternatives: Optional[Sequence['outputs.GetShapeShapeRecommendedAlternativeResult']] = None,
                 resize_compatible_shapes: Optional[Sequence[str]] = None):
        if baseline_ocpu_utilizations is not None:
            pulumi.set(__self__, "baseline_ocpu_utilizations", baseline_ocpu_utilizations)
        if billing_type is not None:
            pulumi.set(__self__, "billing_type", billing_type)
        if gpu_description is not None:
            pulumi.set(__self__, "gpu_description", gpu_description)
        if gpus is not None:
            pulumi.set(__self__, "gpus", gpus)
        if is_billed_for_stopped_instance is not None:
            pulumi.set(__self__, "is_billed_for_stopped_instance", is_billed_for_stopped_instance)
        if is_flexible is not None:
            pulumi.set(__self__, "is_flexible", is_flexible)
        if is_live_migration_supported is not None:
            pulumi.set(__self__, "is_live_migration_supported", is_live_migration_supported)
        if is_subcore is not None:
            pulumi.set(__self__, "is_subcore", is_subcore)
        if local_disk_description is not None:
            pulumi.set(__self__, "local_disk_description", local_disk_description)
        if local_disks is not None:
            pulumi.set(__self__, "local_disks", local_disks)
        if local_disks_total_size_in_gbs is not None:
            pulumi.set(__self__, "local_disks_total_size_in_gbs", local_disks_total_size_in_gbs)
        if max_vnic_attachment_options is not None:
            pulumi.set(__self__, "max_vnic_attachment_options", max_vnic_attachment_options)
        if max_vnic_attachments is not None:
            pulumi.set(__self__, "max_vnic_attachments", max_vnic_attachments)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if memory_options is not None:
            pulumi.set(__self__, "memory_options", memory_options)
        if min_total_baseline_ocpus_required is not None:
            pulumi.set(__self__, "min_total_baseline_ocpus_required", min_total_baseline_ocpus_required)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_ports is not None:
            pulumi.set(__self__, "network_ports", network_ports)
        if networking_bandwidth_in_gbps is not None:
            pulumi.set(__self__, "networking_bandwidth_in_gbps", networking_bandwidth_in_gbps)
        if networking_bandwidth_options is not None:
            pulumi.set(__self__, "networking_bandwidth_options", networking_bandwidth_options)
        if ocpu_options is not None:
            pulumi.set(__self__, "ocpu_options", ocpu_options)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if platform_config_options is not None:
            pulumi.set(__self__, "platform_config_options", platform_config_options)
        if processor_description is not None:
            pulumi.set(__self__, "processor_description", processor_description)
        if quota_names is not None:
            pulumi.set(__self__, "quota_names", quota_names)
        if rdma_bandwidth_in_gbps is not None:
            pulumi.set(__self__, "rdma_bandwidth_in_gbps", rdma_bandwidth_in_gbps)
        if rdma_ports is not None:
            pulumi.set(__self__, "rdma_ports", rdma_ports)
        if recommended_alternatives is not None:
            pulumi.set(__self__, "recommended_alternatives", recommended_alternatives)
        if resize_compatible_shapes is not None:
            pulumi.set(__self__, "resize_compatible_shapes", resize_compatible_shapes)

    @property
    @pulumi.getter(name="baselineOcpuUtilizations")
    def baseline_ocpu_utilizations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "baseline_ocpu_utilizations")

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> Optional[str]:
        return pulumi.get(self, "billing_type")

    @property
    @pulumi.getter(name="gpuDescription")
    def gpu_description(self) -> Optional[str]:
        return pulumi.get(self, "gpu_description")

    @property
    @pulumi.getter
    def gpus(self) -> Optional[int]:
        return pulumi.get(self, "gpus")

    @property
    @pulumi.getter(name="isBilledForStoppedInstance")
    def is_billed_for_stopped_instance(self) -> Optional[bool]:
        return pulumi.get(self, "is_billed_for_stopped_instance")

    @property
    @pulumi.getter(name="isFlexible")
    def is_flexible(self) -> Optional[bool]:
        return pulumi.get(self, "is_flexible")

    @property
    @pulumi.getter(name="isLiveMigrationSupported")
    def is_live_migration_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_live_migration_supported")

    @property
    @pulumi.getter(name="isSubcore")
    def is_subcore(self) -> Optional[bool]:
        return pulumi.get(self, "is_subcore")

    @property
    @pulumi.getter(name="localDiskDescription")
    def local_disk_description(self) -> Optional[str]:
        return pulumi.get(self, "local_disk_description")

    @property
    @pulumi.getter(name="localDisks")
    def local_disks(self) -> Optional[int]:
        return pulumi.get(self, "local_disks")

    @property
    @pulumi.getter(name="localDisksTotalSizeInGbs")
    def local_disks_total_size_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "local_disks_total_size_in_gbs")

    @property
    @pulumi.getter(name="maxVnicAttachmentOptions")
    def max_vnic_attachment_options(self) -> Optional[Sequence['outputs.GetShapeShapeMaxVnicAttachmentOptionResult']]:
        return pulumi.get(self, "max_vnic_attachment_options")

    @property
    @pulumi.getter(name="maxVnicAttachments")
    def max_vnic_attachments(self) -> Optional[int]:
        return pulumi.get(self, "max_vnic_attachments")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter(name="memoryOptions")
    def memory_options(self) -> Optional[Sequence['outputs.GetShapeShapeMemoryOptionResult']]:
        return pulumi.get(self, "memory_options")

    @property
    @pulumi.getter(name="minTotalBaselineOcpusRequired")
    def min_total_baseline_ocpus_required(self) -> Optional[float]:
        return pulumi.get(self, "min_total_baseline_ocpus_required")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkPorts")
    def network_ports(self) -> Optional[int]:
        return pulumi.get(self, "network_ports")

    @property
    @pulumi.getter(name="networkingBandwidthInGbps")
    def networking_bandwidth_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "networking_bandwidth_in_gbps")

    @property
    @pulumi.getter(name="networkingBandwidthOptions")
    def networking_bandwidth_options(self) -> Optional[Sequence['outputs.GetShapeShapeNetworkingBandwidthOptionResult']]:
        return pulumi.get(self, "networking_bandwidth_options")

    @property
    @pulumi.getter(name="ocpuOptions")
    def ocpu_options(self) -> Optional[Sequence['outputs.GetShapeShapeOcpuOptionResult']]:
        return pulumi.get(self, "ocpu_options")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter(name="platformConfigOptions")
    def platform_config_options(self) -> Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionResult']]:
        return pulumi.get(self, "platform_config_options")

    @property
    @pulumi.getter(name="processorDescription")
    def processor_description(self) -> Optional[str]:
        return pulumi.get(self, "processor_description")

    @property
    @pulumi.getter(name="quotaNames")
    def quota_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "quota_names")

    @property
    @pulumi.getter(name="rdmaBandwidthInGbps")
    def rdma_bandwidth_in_gbps(self) -> Optional[int]:
        return pulumi.get(self, "rdma_bandwidth_in_gbps")

    @property
    @pulumi.getter(name="rdmaPorts")
    def rdma_ports(self) -> Optional[int]:
        return pulumi.get(self, "rdma_ports")

    @property
    @pulumi.getter(name="recommendedAlternatives")
    def recommended_alternatives(self) -> Optional[Sequence['outputs.GetShapeShapeRecommendedAlternativeResult']]:
        return pulumi.get(self, "recommended_alternatives")

    @property
    @pulumi.getter(name="resizeCompatibleShapes")
    def resize_compatible_shapes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "resize_compatible_shapes")


@pulumi.output_type
class GetShapeShapeMaxVnicAttachmentOptionResult(dict):
    def __init__(__self__, *,
                 default_per_ocpu: Optional[float] = None,
                 max: Optional[float] = None,
                 min: Optional[int] = None):
        if default_per_ocpu is not None:
            pulumi.set(__self__, "default_per_ocpu", default_per_ocpu)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter(name="defaultPerOcpu")
    def default_per_ocpu(self) -> Optional[float]:
        return pulumi.get(self, "default_per_ocpu")

    @property
    @pulumi.getter
    def max(self) -> Optional[float]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetShapeShapeMemoryOptionResult(dict):
    def __init__(__self__, *,
                 default_per_ocpu_in_gbs: Optional[float] = None,
                 max_in_gbs: Optional[float] = None,
                 max_per_numa_node_in_gbs: Optional[float] = None,
                 max_per_ocpu_in_gbs: Optional[float] = None,
                 min_in_gbs: Optional[float] = None,
                 min_per_ocpu_in_gbs: Optional[float] = None):
        if default_per_ocpu_in_gbs is not None:
            pulumi.set(__self__, "default_per_ocpu_in_gbs", default_per_ocpu_in_gbs)
        if max_in_gbs is not None:
            pulumi.set(__self__, "max_in_gbs", max_in_gbs)
        if max_per_numa_node_in_gbs is not None:
            pulumi.set(__self__, "max_per_numa_node_in_gbs", max_per_numa_node_in_gbs)
        if max_per_ocpu_in_gbs is not None:
            pulumi.set(__self__, "max_per_ocpu_in_gbs", max_per_ocpu_in_gbs)
        if min_in_gbs is not None:
            pulumi.set(__self__, "min_in_gbs", min_in_gbs)
        if min_per_ocpu_in_gbs is not None:
            pulumi.set(__self__, "min_per_ocpu_in_gbs", min_per_ocpu_in_gbs)

    @property
    @pulumi.getter(name="defaultPerOcpuInGbs")
    def default_per_ocpu_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "default_per_ocpu_in_gbs")

    @property
    @pulumi.getter(name="maxInGbs")
    def max_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "max_in_gbs")

    @property
    @pulumi.getter(name="maxPerNumaNodeInGbs")
    def max_per_numa_node_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "max_per_numa_node_in_gbs")

    @property
    @pulumi.getter(name="maxPerOcpuInGbs")
    def max_per_ocpu_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "max_per_ocpu_in_gbs")

    @property
    @pulumi.getter(name="minInGbs")
    def min_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "min_in_gbs")

    @property
    @pulumi.getter(name="minPerOcpuInGbs")
    def min_per_ocpu_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "min_per_ocpu_in_gbs")


@pulumi.output_type
class GetShapeShapeNetworkingBandwidthOptionResult(dict):
    def __init__(__self__, *,
                 default_per_ocpu_in_gbps: Optional[float] = None,
                 max_in_gbps: Optional[float] = None,
                 min_in_gbps: Optional[float] = None):
        if default_per_ocpu_in_gbps is not None:
            pulumi.set(__self__, "default_per_ocpu_in_gbps", default_per_ocpu_in_gbps)
        if max_in_gbps is not None:
            pulumi.set(__self__, "max_in_gbps", max_in_gbps)
        if min_in_gbps is not None:
            pulumi.set(__self__, "min_in_gbps", min_in_gbps)

    @property
    @pulumi.getter(name="defaultPerOcpuInGbps")
    def default_per_ocpu_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "default_per_ocpu_in_gbps")

    @property
    @pulumi.getter(name="maxInGbps")
    def max_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "max_in_gbps")

    @property
    @pulumi.getter(name="minInGbps")
    def min_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "min_in_gbps")


@pulumi.output_type
class GetShapeShapeOcpuOptionResult(dict):
    def __init__(__self__, *,
                 max: Optional[float] = None,
                 max_per_numa_node: Optional[float] = None,
                 min: Optional[float] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if max_per_numa_node is not None:
            pulumi.set(__self__, "max_per_numa_node", max_per_numa_node)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[float]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter(name="maxPerNumaNode")
    def max_per_numa_node(self) -> Optional[float]:
        return pulumi.get(self, "max_per_numa_node")

    @property
    @pulumi.getter
    def min(self) -> Optional[float]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetShapeShapePlatformConfigOptionResult(dict):
    def __init__(__self__, *,
                 access_control_service_options: Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionAccessControlServiceOptionResult']] = None,
                 input_output_memory_management_unit_options: Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionInputOutputMemoryManagementUnitOptionResult']] = None,
                 measured_boot_options: Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionMeasuredBootOptionResult']] = None,
                 memory_encryption_options: Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionMemoryEncryptionOptionResult']] = None,
                 numa_nodes_per_socket_platform_options: Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionNumaNodesPerSocketPlatformOptionResult']] = None,
                 percentage_of_cores_enabled_options: Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionPercentageOfCoresEnabledOptionResult']] = None,
                 secure_boot_options: Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionSecureBootOptionResult']] = None,
                 symmetric_multi_threading_options: Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionSymmetricMultiThreadingOptionResult']] = None,
                 trusted_platform_module_options: Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionTrustedPlatformModuleOptionResult']] = None,
                 type: Optional[str] = None,
                 virtual_instructions_options: Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionVirtualInstructionsOptionResult']] = None):
        if access_control_service_options is not None:
            pulumi.set(__self__, "access_control_service_options", access_control_service_options)
        if input_output_memory_management_unit_options is not None:
            pulumi.set(__self__, "input_output_memory_management_unit_options", input_output_memory_management_unit_options)
        if measured_boot_options is not None:
            pulumi.set(__self__, "measured_boot_options", measured_boot_options)
        if memory_encryption_options is not None:
            pulumi.set(__self__, "memory_encryption_options", memory_encryption_options)
        if numa_nodes_per_socket_platform_options is not None:
            pulumi.set(__self__, "numa_nodes_per_socket_platform_options", numa_nodes_per_socket_platform_options)
        if percentage_of_cores_enabled_options is not None:
            pulumi.set(__self__, "percentage_of_cores_enabled_options", percentage_of_cores_enabled_options)
        if secure_boot_options is not None:
            pulumi.set(__self__, "secure_boot_options", secure_boot_options)
        if symmetric_multi_threading_options is not None:
            pulumi.set(__self__, "symmetric_multi_threading_options", symmetric_multi_threading_options)
        if trusted_platform_module_options is not None:
            pulumi.set(__self__, "trusted_platform_module_options", trusted_platform_module_options)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_instructions_options is not None:
            pulumi.set(__self__, "virtual_instructions_options", virtual_instructions_options)

    @property
    @pulumi.getter(name="accessControlServiceOptions")
    def access_control_service_options(self) -> Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionAccessControlServiceOptionResult']]:
        return pulumi.get(self, "access_control_service_options")

    @property
    @pulumi.getter(name="inputOutputMemoryManagementUnitOptions")
    def input_output_memory_management_unit_options(self) -> Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionInputOutputMemoryManagementUnitOptionResult']]:
        return pulumi.get(self, "input_output_memory_management_unit_options")

    @property
    @pulumi.getter(name="measuredBootOptions")
    def measured_boot_options(self) -> Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionMeasuredBootOptionResult']]:
        return pulumi.get(self, "measured_boot_options")

    @property
    @pulumi.getter(name="memoryEncryptionOptions")
    def memory_encryption_options(self) -> Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionMemoryEncryptionOptionResult']]:
        return pulumi.get(self, "memory_encryption_options")

    @property
    @pulumi.getter(name="numaNodesPerSocketPlatformOptions")
    def numa_nodes_per_socket_platform_options(self) -> Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionNumaNodesPerSocketPlatformOptionResult']]:
        return pulumi.get(self, "numa_nodes_per_socket_platform_options")

    @property
    @pulumi.getter(name="percentageOfCoresEnabledOptions")
    def percentage_of_cores_enabled_options(self) -> Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionPercentageOfCoresEnabledOptionResult']]:
        return pulumi.get(self, "percentage_of_cores_enabled_options")

    @property
    @pulumi.getter(name="secureBootOptions")
    def secure_boot_options(self) -> Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionSecureBootOptionResult']]:
        return pulumi.get(self, "secure_boot_options")

    @property
    @pulumi.getter(name="symmetricMultiThreadingOptions")
    def symmetric_multi_threading_options(self) -> Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionSymmetricMultiThreadingOptionResult']]:
        return pulumi.get(self, "symmetric_multi_threading_options")

    @property
    @pulumi.getter(name="trustedPlatformModuleOptions")
    def trusted_platform_module_options(self) -> Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionTrustedPlatformModuleOptionResult']]:
        return pulumi.get(self, "trusted_platform_module_options")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualInstructionsOptions")
    def virtual_instructions_options(self) -> Optional[Sequence['outputs.GetShapeShapePlatformConfigOptionVirtualInstructionsOptionResult']]:
        return pulumi.get(self, "virtual_instructions_options")


@pulumi.output_type
class GetShapeShapePlatformConfigOptionAccessControlServiceOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapeShapePlatformConfigOptionInputOutputMemoryManagementUnitOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapeShapePlatformConfigOptionMeasuredBootOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapeShapePlatformConfigOptionMemoryEncryptionOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapeShapePlatformConfigOptionNumaNodesPerSocketPlatformOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[str]] = None,
                 default_value: Optional[str] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")


@pulumi.output_type
class GetShapeShapePlatformConfigOptionPercentageOfCoresEnabledOptionResult(dict):
    def __init__(__self__, *,
                 default_value: Optional[int] = None,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[int]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetShapeShapePlatformConfigOptionSecureBootOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapeShapePlatformConfigOptionSymmetricMultiThreadingOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapeShapePlatformConfigOptionTrustedPlatformModuleOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapeShapePlatformConfigOptionVirtualInstructionsOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapeShapeRecommendedAlternativeResult(dict):
    def __init__(__self__, *,
                 shape_name: Optional[str] = None):
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        return pulumi.get(self, "shape_name")


@pulumi.output_type
class GetShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetShapesShapeResult(dict):
    def __init__(__self__, *,
                 baseline_ocpu_utilizations: Optional[Sequence[str]] = None,
                 billing_type: Optional[str] = None,
                 gpu_description: Optional[str] = None,
                 gpus: Optional[int] = None,
                 is_billed_for_stopped_instance: Optional[bool] = None,
                 is_flexible: Optional[bool] = None,
                 is_live_migration_supported: Optional[bool] = None,
                 is_subcore: Optional[bool] = None,
                 local_disk_description: Optional[str] = None,
                 local_disks: Optional[int] = None,
                 local_disks_total_size_in_gbs: Optional[float] = None,
                 max_vnic_attachment_options: Optional[Sequence['outputs.GetShapesShapeMaxVnicAttachmentOptionResult']] = None,
                 max_vnic_attachments: Optional[int] = None,
                 memory_in_gbs: Optional[float] = None,
                 memory_options: Optional[Sequence['outputs.GetShapesShapeMemoryOptionResult']] = None,
                 min_total_baseline_ocpus_required: Optional[float] = None,
                 name: Optional[str] = None,
                 network_ports: Optional[int] = None,
                 networking_bandwidth_in_gbps: Optional[float] = None,
                 networking_bandwidth_options: Optional[Sequence['outputs.GetShapesShapeNetworkingBandwidthOptionResult']] = None,
                 ocpu_options: Optional[Sequence['outputs.GetShapesShapeOcpuOptionResult']] = None,
                 ocpus: Optional[float] = None,
                 platform_config_options: Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionResult']] = None,
                 processor_description: Optional[str] = None,
                 quota_names: Optional[Sequence[str]] = None,
                 rdma_bandwidth_in_gbps: Optional[int] = None,
                 rdma_ports: Optional[int] = None,
                 recommended_alternatives: Optional[Sequence['outputs.GetShapesShapeRecommendedAlternativeResult']] = None,
                 resize_compatible_shapes: Optional[Sequence[str]] = None):
        if baseline_ocpu_utilizations is not None:
            pulumi.set(__self__, "baseline_ocpu_utilizations", baseline_ocpu_utilizations)
        if billing_type is not None:
            pulumi.set(__self__, "billing_type", billing_type)
        if gpu_description is not None:
            pulumi.set(__self__, "gpu_description", gpu_description)
        if gpus is not None:
            pulumi.set(__self__, "gpus", gpus)
        if is_billed_for_stopped_instance is not None:
            pulumi.set(__self__, "is_billed_for_stopped_instance", is_billed_for_stopped_instance)
        if is_flexible is not None:
            pulumi.set(__self__, "is_flexible", is_flexible)
        if is_live_migration_supported is not None:
            pulumi.set(__self__, "is_live_migration_supported", is_live_migration_supported)
        if is_subcore is not None:
            pulumi.set(__self__, "is_subcore", is_subcore)
        if local_disk_description is not None:
            pulumi.set(__self__, "local_disk_description", local_disk_description)
        if local_disks is not None:
            pulumi.set(__self__, "local_disks", local_disks)
        if local_disks_total_size_in_gbs is not None:
            pulumi.set(__self__, "local_disks_total_size_in_gbs", local_disks_total_size_in_gbs)
        if max_vnic_attachment_options is not None:
            pulumi.set(__self__, "max_vnic_attachment_options", max_vnic_attachment_options)
        if max_vnic_attachments is not None:
            pulumi.set(__self__, "max_vnic_attachments", max_vnic_attachments)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if memory_options is not None:
            pulumi.set(__self__, "memory_options", memory_options)
        if min_total_baseline_ocpus_required is not None:
            pulumi.set(__self__, "min_total_baseline_ocpus_required", min_total_baseline_ocpus_required)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_ports is not None:
            pulumi.set(__self__, "network_ports", network_ports)
        if networking_bandwidth_in_gbps is not None:
            pulumi.set(__self__, "networking_bandwidth_in_gbps", networking_bandwidth_in_gbps)
        if networking_bandwidth_options is not None:
            pulumi.set(__self__, "networking_bandwidth_options", networking_bandwidth_options)
        if ocpu_options is not None:
            pulumi.set(__self__, "ocpu_options", ocpu_options)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)
        if platform_config_options is not None:
            pulumi.set(__self__, "platform_config_options", platform_config_options)
        if processor_description is not None:
            pulumi.set(__self__, "processor_description", processor_description)
        if quota_names is not None:
            pulumi.set(__self__, "quota_names", quota_names)
        if rdma_bandwidth_in_gbps is not None:
            pulumi.set(__self__, "rdma_bandwidth_in_gbps", rdma_bandwidth_in_gbps)
        if rdma_ports is not None:
            pulumi.set(__self__, "rdma_ports", rdma_ports)
        if recommended_alternatives is not None:
            pulumi.set(__self__, "recommended_alternatives", recommended_alternatives)
        if resize_compatible_shapes is not None:
            pulumi.set(__self__, "resize_compatible_shapes", resize_compatible_shapes)

    @property
    @pulumi.getter(name="baselineOcpuUtilizations")
    def baseline_ocpu_utilizations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "baseline_ocpu_utilizations")

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> Optional[str]:
        return pulumi.get(self, "billing_type")

    @property
    @pulumi.getter(name="gpuDescription")
    def gpu_description(self) -> Optional[str]:
        return pulumi.get(self, "gpu_description")

    @property
    @pulumi.getter
    def gpus(self) -> Optional[int]:
        return pulumi.get(self, "gpus")

    @property
    @pulumi.getter(name="isBilledForStoppedInstance")
    def is_billed_for_stopped_instance(self) -> Optional[bool]:
        return pulumi.get(self, "is_billed_for_stopped_instance")

    @property
    @pulumi.getter(name="isFlexible")
    def is_flexible(self) -> Optional[bool]:
        return pulumi.get(self, "is_flexible")

    @property
    @pulumi.getter(name="isLiveMigrationSupported")
    def is_live_migration_supported(self) -> Optional[bool]:
        return pulumi.get(self, "is_live_migration_supported")

    @property
    @pulumi.getter(name="isSubcore")
    def is_subcore(self) -> Optional[bool]:
        return pulumi.get(self, "is_subcore")

    @property
    @pulumi.getter(name="localDiskDescription")
    def local_disk_description(self) -> Optional[str]:
        return pulumi.get(self, "local_disk_description")

    @property
    @pulumi.getter(name="localDisks")
    def local_disks(self) -> Optional[int]:
        return pulumi.get(self, "local_disks")

    @property
    @pulumi.getter(name="localDisksTotalSizeInGbs")
    def local_disks_total_size_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "local_disks_total_size_in_gbs")

    @property
    @pulumi.getter(name="maxVnicAttachmentOptions")
    def max_vnic_attachment_options(self) -> Optional[Sequence['outputs.GetShapesShapeMaxVnicAttachmentOptionResult']]:
        return pulumi.get(self, "max_vnic_attachment_options")

    @property
    @pulumi.getter(name="maxVnicAttachments")
    def max_vnic_attachments(self) -> Optional[int]:
        return pulumi.get(self, "max_vnic_attachments")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter(name="memoryOptions")
    def memory_options(self) -> Optional[Sequence['outputs.GetShapesShapeMemoryOptionResult']]:
        return pulumi.get(self, "memory_options")

    @property
    @pulumi.getter(name="minTotalBaselineOcpusRequired")
    def min_total_baseline_ocpus_required(self) -> Optional[float]:
        return pulumi.get(self, "min_total_baseline_ocpus_required")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkPorts")
    def network_ports(self) -> Optional[int]:
        return pulumi.get(self, "network_ports")

    @property
    @pulumi.getter(name="networkingBandwidthInGbps")
    def networking_bandwidth_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "networking_bandwidth_in_gbps")

    @property
    @pulumi.getter(name="networkingBandwidthOptions")
    def networking_bandwidth_options(self) -> Optional[Sequence['outputs.GetShapesShapeNetworkingBandwidthOptionResult']]:
        return pulumi.get(self, "networking_bandwidth_options")

    @property
    @pulumi.getter(name="ocpuOptions")
    def ocpu_options(self) -> Optional[Sequence['outputs.GetShapesShapeOcpuOptionResult']]:
        return pulumi.get(self, "ocpu_options")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter(name="platformConfigOptions")
    def platform_config_options(self) -> Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionResult']]:
        return pulumi.get(self, "platform_config_options")

    @property
    @pulumi.getter(name="processorDescription")
    def processor_description(self) -> Optional[str]:
        return pulumi.get(self, "processor_description")

    @property
    @pulumi.getter(name="quotaNames")
    def quota_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "quota_names")

    @property
    @pulumi.getter(name="rdmaBandwidthInGbps")
    def rdma_bandwidth_in_gbps(self) -> Optional[int]:
        return pulumi.get(self, "rdma_bandwidth_in_gbps")

    @property
    @pulumi.getter(name="rdmaPorts")
    def rdma_ports(self) -> Optional[int]:
        return pulumi.get(self, "rdma_ports")

    @property
    @pulumi.getter(name="recommendedAlternatives")
    def recommended_alternatives(self) -> Optional[Sequence['outputs.GetShapesShapeRecommendedAlternativeResult']]:
        return pulumi.get(self, "recommended_alternatives")

    @property
    @pulumi.getter(name="resizeCompatibleShapes")
    def resize_compatible_shapes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "resize_compatible_shapes")


@pulumi.output_type
class GetShapesShapeMaxVnicAttachmentOptionResult(dict):
    def __init__(__self__, *,
                 default_per_ocpu: Optional[float] = None,
                 max: Optional[float] = None,
                 min: Optional[int] = None):
        if default_per_ocpu is not None:
            pulumi.set(__self__, "default_per_ocpu", default_per_ocpu)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter(name="defaultPerOcpu")
    def default_per_ocpu(self) -> Optional[float]:
        return pulumi.get(self, "default_per_ocpu")

    @property
    @pulumi.getter
    def max(self) -> Optional[float]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetShapesShapeMemoryOptionResult(dict):
    def __init__(__self__, *,
                 default_per_ocpu_in_gbs: Optional[float] = None,
                 max_in_gbs: Optional[float] = None,
                 max_per_numa_node_in_gbs: Optional[float] = None,
                 max_per_ocpu_in_gbs: Optional[float] = None,
                 min_in_gbs: Optional[float] = None,
                 min_per_ocpu_in_gbs: Optional[float] = None):
        if default_per_ocpu_in_gbs is not None:
            pulumi.set(__self__, "default_per_ocpu_in_gbs", default_per_ocpu_in_gbs)
        if max_in_gbs is not None:
            pulumi.set(__self__, "max_in_gbs", max_in_gbs)
        if max_per_numa_node_in_gbs is not None:
            pulumi.set(__self__, "max_per_numa_node_in_gbs", max_per_numa_node_in_gbs)
        if max_per_ocpu_in_gbs is not None:
            pulumi.set(__self__, "max_per_ocpu_in_gbs", max_per_ocpu_in_gbs)
        if min_in_gbs is not None:
            pulumi.set(__self__, "min_in_gbs", min_in_gbs)
        if min_per_ocpu_in_gbs is not None:
            pulumi.set(__self__, "min_per_ocpu_in_gbs", min_per_ocpu_in_gbs)

    @property
    @pulumi.getter(name="defaultPerOcpuInGbs")
    def default_per_ocpu_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "default_per_ocpu_in_gbs")

    @property
    @pulumi.getter(name="maxInGbs")
    def max_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "max_in_gbs")

    @property
    @pulumi.getter(name="maxPerNumaNodeInGbs")
    def max_per_numa_node_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "max_per_numa_node_in_gbs")

    @property
    @pulumi.getter(name="maxPerOcpuInGbs")
    def max_per_ocpu_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "max_per_ocpu_in_gbs")

    @property
    @pulumi.getter(name="minInGbs")
    def min_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "min_in_gbs")

    @property
    @pulumi.getter(name="minPerOcpuInGbs")
    def min_per_ocpu_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "min_per_ocpu_in_gbs")


@pulumi.output_type
class GetShapesShapeNetworkingBandwidthOptionResult(dict):
    def __init__(__self__, *,
                 default_per_ocpu_in_gbps: Optional[float] = None,
                 max_in_gbps: Optional[float] = None,
                 min_in_gbps: Optional[float] = None):
        if default_per_ocpu_in_gbps is not None:
            pulumi.set(__self__, "default_per_ocpu_in_gbps", default_per_ocpu_in_gbps)
        if max_in_gbps is not None:
            pulumi.set(__self__, "max_in_gbps", max_in_gbps)
        if min_in_gbps is not None:
            pulumi.set(__self__, "min_in_gbps", min_in_gbps)

    @property
    @pulumi.getter(name="defaultPerOcpuInGbps")
    def default_per_ocpu_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "default_per_ocpu_in_gbps")

    @property
    @pulumi.getter(name="maxInGbps")
    def max_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "max_in_gbps")

    @property
    @pulumi.getter(name="minInGbps")
    def min_in_gbps(self) -> Optional[float]:
        return pulumi.get(self, "min_in_gbps")


@pulumi.output_type
class GetShapesShapeOcpuOptionResult(dict):
    def __init__(__self__, *,
                 max: Optional[float] = None,
                 max_per_numa_node: Optional[float] = None,
                 min: Optional[float] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if max_per_numa_node is not None:
            pulumi.set(__self__, "max_per_numa_node", max_per_numa_node)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[float]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter(name="maxPerNumaNode")
    def max_per_numa_node(self) -> Optional[float]:
        return pulumi.get(self, "max_per_numa_node")

    @property
    @pulumi.getter
    def min(self) -> Optional[float]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetShapesShapePlatformConfigOptionResult(dict):
    def __init__(__self__, *,
                 access_control_service_options: Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionAccessControlServiceOptionResult']] = None,
                 input_output_memory_management_unit_options: Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionInputOutputMemoryManagementUnitOptionResult']] = None,
                 measured_boot_options: Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionMeasuredBootOptionResult']] = None,
                 memory_encryption_options: Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionMemoryEncryptionOptionResult']] = None,
                 numa_nodes_per_socket_platform_options: Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionNumaNodesPerSocketPlatformOptionResult']] = None,
                 percentage_of_cores_enabled_options: Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionPercentageOfCoresEnabledOptionResult']] = None,
                 secure_boot_options: Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionSecureBootOptionResult']] = None,
                 symmetric_multi_threading_options: Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionSymmetricMultiThreadingOptionResult']] = None,
                 trusted_platform_module_options: Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionTrustedPlatformModuleOptionResult']] = None,
                 type: Optional[str] = None,
                 virtual_instructions_options: Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionVirtualInstructionsOptionResult']] = None):
        if access_control_service_options is not None:
            pulumi.set(__self__, "access_control_service_options", access_control_service_options)
        if input_output_memory_management_unit_options is not None:
            pulumi.set(__self__, "input_output_memory_management_unit_options", input_output_memory_management_unit_options)
        if measured_boot_options is not None:
            pulumi.set(__self__, "measured_boot_options", measured_boot_options)
        if memory_encryption_options is not None:
            pulumi.set(__self__, "memory_encryption_options", memory_encryption_options)
        if numa_nodes_per_socket_platform_options is not None:
            pulumi.set(__self__, "numa_nodes_per_socket_platform_options", numa_nodes_per_socket_platform_options)
        if percentage_of_cores_enabled_options is not None:
            pulumi.set(__self__, "percentage_of_cores_enabled_options", percentage_of_cores_enabled_options)
        if secure_boot_options is not None:
            pulumi.set(__self__, "secure_boot_options", secure_boot_options)
        if symmetric_multi_threading_options is not None:
            pulumi.set(__self__, "symmetric_multi_threading_options", symmetric_multi_threading_options)
        if trusted_platform_module_options is not None:
            pulumi.set(__self__, "trusted_platform_module_options", trusted_platform_module_options)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_instructions_options is not None:
            pulumi.set(__self__, "virtual_instructions_options", virtual_instructions_options)

    @property
    @pulumi.getter(name="accessControlServiceOptions")
    def access_control_service_options(self) -> Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionAccessControlServiceOptionResult']]:
        return pulumi.get(self, "access_control_service_options")

    @property
    @pulumi.getter(name="inputOutputMemoryManagementUnitOptions")
    def input_output_memory_management_unit_options(self) -> Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionInputOutputMemoryManagementUnitOptionResult']]:
        return pulumi.get(self, "input_output_memory_management_unit_options")

    @property
    @pulumi.getter(name="measuredBootOptions")
    def measured_boot_options(self) -> Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionMeasuredBootOptionResult']]:
        return pulumi.get(self, "measured_boot_options")

    @property
    @pulumi.getter(name="memoryEncryptionOptions")
    def memory_encryption_options(self) -> Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionMemoryEncryptionOptionResult']]:
        return pulumi.get(self, "memory_encryption_options")

    @property
    @pulumi.getter(name="numaNodesPerSocketPlatformOptions")
    def numa_nodes_per_socket_platform_options(self) -> Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionNumaNodesPerSocketPlatformOptionResult']]:
        return pulumi.get(self, "numa_nodes_per_socket_platform_options")

    @property
    @pulumi.getter(name="percentageOfCoresEnabledOptions")
    def percentage_of_cores_enabled_options(self) -> Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionPercentageOfCoresEnabledOptionResult']]:
        return pulumi.get(self, "percentage_of_cores_enabled_options")

    @property
    @pulumi.getter(name="secureBootOptions")
    def secure_boot_options(self) -> Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionSecureBootOptionResult']]:
        return pulumi.get(self, "secure_boot_options")

    @property
    @pulumi.getter(name="symmetricMultiThreadingOptions")
    def symmetric_multi_threading_options(self) -> Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionSymmetricMultiThreadingOptionResult']]:
        return pulumi.get(self, "symmetric_multi_threading_options")

    @property
    @pulumi.getter(name="trustedPlatformModuleOptions")
    def trusted_platform_module_options(self) -> Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionTrustedPlatformModuleOptionResult']]:
        return pulumi.get(self, "trusted_platform_module_options")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualInstructionsOptions")
    def virtual_instructions_options(self) -> Optional[Sequence['outputs.GetShapesShapePlatformConfigOptionVirtualInstructionsOptionResult']]:
        return pulumi.get(self, "virtual_instructions_options")


@pulumi.output_type
class GetShapesShapePlatformConfigOptionAccessControlServiceOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapesShapePlatformConfigOptionInputOutputMemoryManagementUnitOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapesShapePlatformConfigOptionMeasuredBootOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapesShapePlatformConfigOptionMemoryEncryptionOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapesShapePlatformConfigOptionNumaNodesPerSocketPlatformOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[str]] = None,
                 default_value: Optional[str] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")


@pulumi.output_type
class GetShapesShapePlatformConfigOptionPercentageOfCoresEnabledOptionResult(dict):
    def __init__(__self__, *,
                 default_value: Optional[int] = None,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[int]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetShapesShapePlatformConfigOptionSecureBootOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapesShapePlatformConfigOptionSymmetricMultiThreadingOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapesShapePlatformConfigOptionTrustedPlatformModuleOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapesShapePlatformConfigOptionVirtualInstructionsOptionResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence[bool]] = None,
                 is_default_enabled: Optional[bool] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if is_default_enabled is not None:
            pulumi.set(__self__, "is_default_enabled", is_default_enabled)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter(name="isDefaultEnabled")
    def is_default_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_default_enabled")


@pulumi.output_type
class GetShapesShapeRecommendedAlternativeResult(dict):
    def __init__(__self__, *,
                 shape_name: Optional[str] = None):
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        return pulumi.get(self, "shape_name")


@pulumi.output_type
class GetSubnetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSubnetsSubnetResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 cidr_block: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 dhcp_options_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 dns_label: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 ipv6cidr_block: Optional[str] = None,
                 ipv6cidr_blocks: Optional[Sequence[str]] = None,
                 ipv6virtual_router_ip: Optional[str] = None,
                 prohibit_internet_ingress: Optional[bool] = None,
                 prohibit_public_ip_on_vnic: Optional[bool] = None,
                 route_table_id: Optional[str] = None,
                 security_list_ids: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 subnet_domain_name: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vcn_id: Optional[str] = None,
                 virtual_router_ip: Optional[str] = None,
                 virtual_router_mac: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if dhcp_options_id is not None:
            pulumi.set(__self__, "dhcp_options_id", dhcp_options_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dns_label is not None:
            pulumi.set(__self__, "dns_label", dns_label)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv6cidr_block is not None:
            pulumi.set(__self__, "ipv6cidr_block", ipv6cidr_block)
        if ipv6cidr_blocks is not None:
            pulumi.set(__self__, "ipv6cidr_blocks", ipv6cidr_blocks)
        if ipv6virtual_router_ip is not None:
            pulumi.set(__self__, "ipv6virtual_router_ip", ipv6virtual_router_ip)
        if prohibit_internet_ingress is not None:
            pulumi.set(__self__, "prohibit_internet_ingress", prohibit_internet_ingress)
        if prohibit_public_ip_on_vnic is not None:
            pulumi.set(__self__, "prohibit_public_ip_on_vnic", prohibit_public_ip_on_vnic)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if security_list_ids is not None:
            pulumi.set(__self__, "security_list_ids", security_list_ids)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_domain_name is not None:
            pulumi.set(__self__, "subnet_domain_name", subnet_domain_name)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)
        if virtual_router_ip is not None:
            pulumi.set(__self__, "virtual_router_ip", virtual_router_ip)
        if virtual_router_mac is not None:
            pulumi.set(__self__, "virtual_router_mac", virtual_router_mac)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="dhcpOptionsId")
    def dhcp_options_id(self) -> Optional[str]:
        return pulumi.get(self, "dhcp_options_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsLabel")
    def dns_label(self) -> Optional[str]:
        return pulumi.get(self, "dns_label")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv6cidrBlock")
    def ipv6cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "ipv6cidr_block")

    @property
    @pulumi.getter(name="ipv6cidrBlocks")
    def ipv6cidr_blocks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ipv6cidr_blocks")

    @property
    @pulumi.getter(name="ipv6virtualRouterIp")
    def ipv6virtual_router_ip(self) -> Optional[str]:
        return pulumi.get(self, "ipv6virtual_router_ip")

    @property
    @pulumi.getter(name="prohibitInternetIngress")
    def prohibit_internet_ingress(self) -> Optional[bool]:
        return pulumi.get(self, "prohibit_internet_ingress")

    @property
    @pulumi.getter(name="prohibitPublicIpOnVnic")
    def prohibit_public_ip_on_vnic(self) -> Optional[bool]:
        return pulumi.get(self, "prohibit_public_ip_on_vnic")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter(name="securityListIds")
    def security_list_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_list_ids")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetDomainName")
    def subnet_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "subnet_domain_name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")

    @property
    @pulumi.getter(name="virtualRouterIp")
    def virtual_router_ip(self) -> Optional[str]:
        return pulumi.get(self, "virtual_router_ip")

    @property
    @pulumi.getter(name="virtualRouterMac")
    def virtual_router_mac(self) -> Optional[str]:
        return pulumi.get(self, "virtual_router_mac")


@pulumi.output_type
class GetTunnelSecurityAssociationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTunnelSecurityAssociationsTunnelSecurityAssociationResult(dict):
    def __init__(__self__, *,
                 cpe_subnet: Optional[str] = None,
                 oracle_subnet: Optional[str] = None,
                 time: Optional[str] = None,
                 tunnel_sa_error_info: Optional[str] = None,
                 tunnel_sa_status: Optional[str] = None):
        if cpe_subnet is not None:
            pulumi.set(__self__, "cpe_subnet", cpe_subnet)
        if oracle_subnet is not None:
            pulumi.set(__self__, "oracle_subnet", oracle_subnet)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if tunnel_sa_error_info is not None:
            pulumi.set(__self__, "tunnel_sa_error_info", tunnel_sa_error_info)
        if tunnel_sa_status is not None:
            pulumi.set(__self__, "tunnel_sa_status", tunnel_sa_status)

    @property
    @pulumi.getter(name="cpeSubnet")
    def cpe_subnet(self) -> Optional[str]:
        return pulumi.get(self, "cpe_subnet")

    @property
    @pulumi.getter(name="oracleSubnet")
    def oracle_subnet(self) -> Optional[str]:
        return pulumi.get(self, "oracle_subnet")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="tunnelSaErrorInfo")
    def tunnel_sa_error_info(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_sa_error_info")

    @property
    @pulumi.getter(name="tunnelSaStatus")
    def tunnel_sa_status(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_sa_status")


@pulumi.output_type
class GetVcnByoipv6cidrDetailResult(dict):
    def __init__(__self__, *,
                 byoipv6range_id: Optional[str] = None,
                 ipv6cidr_block: Optional[str] = None):
        if byoipv6range_id is not None:
            pulumi.set(__self__, "byoipv6range_id", byoipv6range_id)
        if ipv6cidr_block is not None:
            pulumi.set(__self__, "ipv6cidr_block", ipv6cidr_block)

    @property
    @pulumi.getter(name="byoipv6rangeId")
    def byoipv6range_id(self) -> Optional[str]:
        return pulumi.get(self, "byoipv6range_id")

    @property
    @pulumi.getter(name="ipv6cidrBlock")
    def ipv6cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "ipv6cidr_block")


@pulumi.output_type
class GetVcnsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVcnsVirtualNetworkResult(dict):
    def __init__(__self__, *,
                 byoipv6cidr_blocks: Optional[Sequence[str]] = None,
                 byoipv6cidr_details: Optional[Sequence['outputs.GetVcnsVirtualNetworkByoipv6cidrDetailResult']] = None,
                 cidr_block: Optional[str] = None,
                 cidr_blocks: Optional[Sequence[str]] = None,
                 compartment_id: Optional[str] = None,
                 default_dhcp_options_id: Optional[str] = None,
                 default_route_table_id: Optional[str] = None,
                 default_security_list_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 dns_label: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 ipv6cidr_blocks: Optional[Sequence[str]] = None,
                 ipv6private_cidr_blocks: Optional[Sequence[str]] = None,
                 is_ipv6enabled: Optional[bool] = None,
                 is_oracle_gua_allocation_enabled: Optional[bool] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vcn_domain_name: Optional[str] = None):
        if byoipv6cidr_blocks is not None:
            pulumi.set(__self__, "byoipv6cidr_blocks", byoipv6cidr_blocks)
        if byoipv6cidr_details is not None:
            pulumi.set(__self__, "byoipv6cidr_details", byoipv6cidr_details)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if cidr_blocks is not None:
            pulumi.set(__self__, "cidr_blocks", cidr_blocks)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if default_dhcp_options_id is not None:
            pulumi.set(__self__, "default_dhcp_options_id", default_dhcp_options_id)
        if default_route_table_id is not None:
            pulumi.set(__self__, "default_route_table_id", default_route_table_id)
        if default_security_list_id is not None:
            pulumi.set(__self__, "default_security_list_id", default_security_list_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dns_label is not None:
            pulumi.set(__self__, "dns_label", dns_label)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv6cidr_blocks is not None:
            pulumi.set(__self__, "ipv6cidr_blocks", ipv6cidr_blocks)
        if ipv6private_cidr_blocks is not None:
            pulumi.set(__self__, "ipv6private_cidr_blocks", ipv6private_cidr_blocks)
        if is_ipv6enabled is not None:
            pulumi.set(__self__, "is_ipv6enabled", is_ipv6enabled)
        if is_oracle_gua_allocation_enabled is not None:
            pulumi.set(__self__, "is_oracle_gua_allocation_enabled", is_oracle_gua_allocation_enabled)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_domain_name is not None:
            pulumi.set(__self__, "vcn_domain_name", vcn_domain_name)

    @property
    @pulumi.getter(name="byoipv6cidrBlocks")
    def byoipv6cidr_blocks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "byoipv6cidr_blocks")

    @property
    @pulumi.getter(name="byoipv6cidrDetails")
    def byoipv6cidr_details(self) -> Optional[Sequence['outputs.GetVcnsVirtualNetworkByoipv6cidrDetailResult']]:
        return pulumi.get(self, "byoipv6cidr_details")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cidr_blocks")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="defaultDhcpOptionsId")
    def default_dhcp_options_id(self) -> Optional[str]:
        return pulumi.get(self, "default_dhcp_options_id")

    @property
    @pulumi.getter(name="defaultRouteTableId")
    def default_route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "default_route_table_id")

    @property
    @pulumi.getter(name="defaultSecurityListId")
    def default_security_list_id(self) -> Optional[str]:
        return pulumi.get(self, "default_security_list_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsLabel")
    def dns_label(self) -> Optional[str]:
        return pulumi.get(self, "dns_label")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv6cidrBlocks")
    def ipv6cidr_blocks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ipv6cidr_blocks")

    @property
    @pulumi.getter(name="ipv6privateCidrBlocks")
    def ipv6private_cidr_blocks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ipv6private_cidr_blocks")

    @property
    @pulumi.getter(name="isIpv6enabled")
    def is_ipv6enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ipv6enabled")

    @property
    @pulumi.getter(name="isOracleGuaAllocationEnabled")
    def is_oracle_gua_allocation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_oracle_gua_allocation_enabled")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnDomainName")
    def vcn_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "vcn_domain_name")


@pulumi.output_type
class GetVcnsVirtualNetworkByoipv6cidrDetailResult(dict):
    def __init__(__self__, *,
                 byoipv6range_id: Optional[str] = None,
                 ipv6cidr_block: Optional[str] = None):
        if byoipv6range_id is not None:
            pulumi.set(__self__, "byoipv6range_id", byoipv6range_id)
        if ipv6cidr_block is not None:
            pulumi.set(__self__, "ipv6cidr_block", ipv6cidr_block)

    @property
    @pulumi.getter(name="byoipv6rangeId")
    def byoipv6range_id(self) -> Optional[str]:
        return pulumi.get(self, "byoipv6range_id")

    @property
    @pulumi.getter(name="ipv6cidrBlock")
    def ipv6cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "ipv6cidr_block")


@pulumi.output_type
class GetVirtualCircuitAssociatedTunnelsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVirtualCircuitAssociatedTunnelsVirtualCircuitAssociatedTunnelDetailResult(dict):
    def __init__(__self__, *,
                 ipsec_connection_id: Optional[str] = None,
                 tunnel_id: Optional[str] = None,
                 tunnel_type: Optional[str] = None):
        if ipsec_connection_id is not None:
            pulumi.set(__self__, "ipsec_connection_id", ipsec_connection_id)
        if tunnel_id is not None:
            pulumi.set(__self__, "tunnel_id", tunnel_id)
        if tunnel_type is not None:
            pulumi.set(__self__, "tunnel_type", tunnel_type)

    @property
    @pulumi.getter(name="ipsecConnectionId")
    def ipsec_connection_id(self) -> Optional[str]:
        return pulumi.get(self, "ipsec_connection_id")

    @property
    @pulumi.getter(name="tunnelId")
    def tunnel_id(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_id")

    @property
    @pulumi.getter(name="tunnelType")
    def tunnel_type(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_type")


@pulumi.output_type
class GetVirtualCircuitBandwidthShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVirtualCircuitBandwidthShapesVirtualCircuitBandwidthShapeResult(dict):
    def __init__(__self__, *,
                 bandwidth_in_mbps: Optional[int] = None,
                 name: Optional[str] = None):
        if bandwidth_in_mbps is not None:
            pulumi.set(__self__, "bandwidth_in_mbps", bandwidth_in_mbps)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="bandwidthInMbps")
    def bandwidth_in_mbps(self) -> Optional[int]:
        return pulumi.get(self, "bandwidth_in_mbps")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualCircuitCrossConnectMappingResult(dict):
    def __init__(__self__, *,
                 bgp_md5auth_key: Optional[str] = None,
                 cross_connect_or_cross_connect_group_id: Optional[str] = None,
                 customer_bgp_peering_ip: Optional[str] = None,
                 customer_bgp_peering_ipv6: Optional[str] = None,
                 oracle_bgp_peering_ip: Optional[str] = None,
                 oracle_bgp_peering_ipv6: Optional[str] = None,
                 vlan: Optional[int] = None):
        if bgp_md5auth_key is not None:
            pulumi.set(__self__, "bgp_md5auth_key", bgp_md5auth_key)
        if cross_connect_or_cross_connect_group_id is not None:
            pulumi.set(__self__, "cross_connect_or_cross_connect_group_id", cross_connect_or_cross_connect_group_id)
        if customer_bgp_peering_ip is not None:
            pulumi.set(__self__, "customer_bgp_peering_ip", customer_bgp_peering_ip)
        if customer_bgp_peering_ipv6 is not None:
            pulumi.set(__self__, "customer_bgp_peering_ipv6", customer_bgp_peering_ipv6)
        if oracle_bgp_peering_ip is not None:
            pulumi.set(__self__, "oracle_bgp_peering_ip", oracle_bgp_peering_ip)
        if oracle_bgp_peering_ipv6 is not None:
            pulumi.set(__self__, "oracle_bgp_peering_ipv6", oracle_bgp_peering_ipv6)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="bgpMd5authKey")
    def bgp_md5auth_key(self) -> Optional[str]:
        return pulumi.get(self, "bgp_md5auth_key")

    @property
    @pulumi.getter(name="crossConnectOrCrossConnectGroupId")
    def cross_connect_or_cross_connect_group_id(self) -> Optional[str]:
        return pulumi.get(self, "cross_connect_or_cross_connect_group_id")

    @property
    @pulumi.getter(name="customerBgpPeeringIp")
    def customer_bgp_peering_ip(self) -> Optional[str]:
        return pulumi.get(self, "customer_bgp_peering_ip")

    @property
    @pulumi.getter(name="customerBgpPeeringIpv6")
    def customer_bgp_peering_ipv6(self) -> Optional[str]:
        return pulumi.get(self, "customer_bgp_peering_ipv6")

    @property
    @pulumi.getter(name="oracleBgpPeeringIp")
    def oracle_bgp_peering_ip(self) -> Optional[str]:
        return pulumi.get(self, "oracle_bgp_peering_ip")

    @property
    @pulumi.getter(name="oracleBgpPeeringIpv6")
    def oracle_bgp_peering_ipv6(self) -> Optional[str]:
        return pulumi.get(self, "oracle_bgp_peering_ipv6")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetVirtualCircuitPublicPrefixResult(dict):
    def __init__(__self__, *,
                 cidr_block: Optional[str] = None):
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")


@pulumi.output_type
class GetVirtualCircuitPublicPrefixesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVirtualCircuitPublicPrefixesVirtualCircuitPublicPrefixResult(dict):
    def __init__(__self__, *,
                 cidr_block: Optional[str] = None,
                 verification_state: Optional[str] = None):
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if verification_state is not None:
            pulumi.set(__self__, "verification_state", verification_state)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="verificationState")
    def verification_state(self) -> Optional[str]:
        return pulumi.get(self, "verification_state")


@pulumi.output_type
class GetVirtualCircuitsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVirtualCircuitsVirtualCircuitResult(dict):
    def __init__(__self__, *,
                 bandwidth_shape_name: Optional[str] = None,
                 bgp_admin_state: Optional[str] = None,
                 bgp_ipv6session_state: Optional[str] = None,
                 bgp_management: Optional[str] = None,
                 bgp_session_state: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 cross_connect_mappings: Optional[Sequence['outputs.GetVirtualCircuitsVirtualCircuitCrossConnectMappingResult']] = None,
                 customer_asn: Optional[str] = None,
                 customer_bgp_asn: Optional[int] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 gateway_id: Optional[str] = None,
                 id: Optional[str] = None,
                 ip_mtu: Optional[str] = None,
                 is_bfd_enabled: Optional[bool] = None,
                 is_transport_mode: Optional[bool] = None,
                 oracle_bgp_asn: Optional[int] = None,
                 provider_service_id: Optional[str] = None,
                 provider_service_key_name: Optional[str] = None,
                 provider_state: Optional[str] = None,
                 public_prefixes: Optional[Sequence['outputs.GetVirtualCircuitsVirtualCircuitPublicPrefixResult']] = None,
                 reference_comment: Optional[str] = None,
                 region: Optional[str] = None,
                 routing_policies: Optional[Sequence[str]] = None,
                 service_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_circuit_id: Optional[str] = None):
        if bandwidth_shape_name is not None:
            pulumi.set(__self__, "bandwidth_shape_name", bandwidth_shape_name)
        if bgp_admin_state is not None:
            pulumi.set(__self__, "bgp_admin_state", bgp_admin_state)
        if bgp_ipv6session_state is not None:
            pulumi.set(__self__, "bgp_ipv6session_state", bgp_ipv6session_state)
        if bgp_management is not None:
            pulumi.set(__self__, "bgp_management", bgp_management)
        if bgp_session_state is not None:
            pulumi.set(__self__, "bgp_session_state", bgp_session_state)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if cross_connect_mappings is not None:
            pulumi.set(__self__, "cross_connect_mappings", cross_connect_mappings)
        if customer_asn is not None:
            pulumi.set(__self__, "customer_asn", customer_asn)
        if customer_bgp_asn is not None:
            pulumi.set(__self__, "customer_bgp_asn", customer_bgp_asn)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_mtu is not None:
            pulumi.set(__self__, "ip_mtu", ip_mtu)
        if is_bfd_enabled is not None:
            pulumi.set(__self__, "is_bfd_enabled", is_bfd_enabled)
        if is_transport_mode is not None:
            pulumi.set(__self__, "is_transport_mode", is_transport_mode)
        if oracle_bgp_asn is not None:
            pulumi.set(__self__, "oracle_bgp_asn", oracle_bgp_asn)
        if provider_service_id is not None:
            pulumi.set(__self__, "provider_service_id", provider_service_id)
        if provider_service_key_name is not None:
            pulumi.set(__self__, "provider_service_key_name", provider_service_key_name)
        if provider_state is not None:
            pulumi.set(__self__, "provider_state", provider_state)
        if public_prefixes is not None:
            pulumi.set(__self__, "public_prefixes", public_prefixes)
        if reference_comment is not None:
            pulumi.set(__self__, "reference_comment", reference_comment)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if routing_policies is not None:
            pulumi.set(__self__, "routing_policies", routing_policies)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_circuit_id is not None:
            pulumi.set(__self__, "virtual_circuit_id", virtual_circuit_id)

    @property
    @pulumi.getter(name="bandwidthShapeName")
    def bandwidth_shape_name(self) -> Optional[str]:
        return pulumi.get(self, "bandwidth_shape_name")

    @property
    @pulumi.getter(name="bgpAdminState")
    def bgp_admin_state(self) -> Optional[str]:
        return pulumi.get(self, "bgp_admin_state")

    @property
    @pulumi.getter(name="bgpIpv6sessionState")
    def bgp_ipv6session_state(self) -> Optional[str]:
        return pulumi.get(self, "bgp_ipv6session_state")

    @property
    @pulumi.getter(name="bgpManagement")
    def bgp_management(self) -> Optional[str]:
        warnings.warn("""The 'bgp_management' field has been deprecated. Please use the 'oci_core_fast_connect_provider_service' data source instead.""", DeprecationWarning)
        pulumi.log.warn("""bgp_management is deprecated: The 'bgp_management' field has been deprecated. Please use the 'oci_core_fast_connect_provider_service' data source instead.""")

        return pulumi.get(self, "bgp_management")

    @property
    @pulumi.getter(name="bgpSessionState")
    def bgp_session_state(self) -> Optional[str]:
        return pulumi.get(self, "bgp_session_state")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="crossConnectMappings")
    def cross_connect_mappings(self) -> Optional[Sequence['outputs.GetVirtualCircuitsVirtualCircuitCrossConnectMappingResult']]:
        return pulumi.get(self, "cross_connect_mappings")

    @property
    @pulumi.getter(name="customerAsn")
    def customer_asn(self) -> Optional[str]:
        return pulumi.get(self, "customer_asn")

    @property
    @pulumi.getter(name="customerBgpAsn")
    def customer_bgp_asn(self) -> Optional[int]:
        warnings.warn("""The 'customer_bgp_asn' field has been deprecated. Please use 'customer_asn' instead.""", DeprecationWarning)
        pulumi.log.warn("""customer_bgp_asn is deprecated: The 'customer_bgp_asn' field has been deprecated. Please use 'customer_asn' instead.""")

        return pulumi.get(self, "customer_bgp_asn")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> Optional[str]:
        return pulumi.get(self, "ip_mtu")

    @property
    @pulumi.getter(name="isBfdEnabled")
    def is_bfd_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_bfd_enabled")

    @property
    @pulumi.getter(name="isTransportMode")
    def is_transport_mode(self) -> Optional[bool]:
        return pulumi.get(self, "is_transport_mode")

    @property
    @pulumi.getter(name="oracleBgpAsn")
    def oracle_bgp_asn(self) -> Optional[int]:
        return pulumi.get(self, "oracle_bgp_asn")

    @property
    @pulumi.getter(name="providerServiceId")
    def provider_service_id(self) -> Optional[str]:
        return pulumi.get(self, "provider_service_id")

    @property
    @pulumi.getter(name="providerServiceKeyName")
    def provider_service_key_name(self) -> Optional[str]:
        return pulumi.get(self, "provider_service_key_name")

    @property
    @pulumi.getter(name="providerState")
    def provider_state(self) -> Optional[str]:
        return pulumi.get(self, "provider_state")

    @property
    @pulumi.getter(name="publicPrefixes")
    def public_prefixes(self) -> Optional[Sequence['outputs.GetVirtualCircuitsVirtualCircuitPublicPrefixResult']]:
        return pulumi.get(self, "public_prefixes")

    @property
    @pulumi.getter(name="referenceComment")
    def reference_comment(self) -> Optional[str]:
        return pulumi.get(self, "reference_comment")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="routingPolicies")
    def routing_policies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "routing_policies")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualCircuitId")
    def virtual_circuit_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_circuit_id")


@pulumi.output_type
class GetVirtualCircuitsVirtualCircuitCrossConnectMappingResult(dict):
    def __init__(__self__, *,
                 bgp_md5auth_key: Optional[str] = None,
                 cross_connect_or_cross_connect_group_id: Optional[str] = None,
                 customer_bgp_peering_ip: Optional[str] = None,
                 customer_bgp_peering_ipv6: Optional[str] = None,
                 oracle_bgp_peering_ip: Optional[str] = None,
                 oracle_bgp_peering_ipv6: Optional[str] = None,
                 vlan: Optional[int] = None):
        if bgp_md5auth_key is not None:
            pulumi.set(__self__, "bgp_md5auth_key", bgp_md5auth_key)
        if cross_connect_or_cross_connect_group_id is not None:
            pulumi.set(__self__, "cross_connect_or_cross_connect_group_id", cross_connect_or_cross_connect_group_id)
        if customer_bgp_peering_ip is not None:
            pulumi.set(__self__, "customer_bgp_peering_ip", customer_bgp_peering_ip)
        if customer_bgp_peering_ipv6 is not None:
            pulumi.set(__self__, "customer_bgp_peering_ipv6", customer_bgp_peering_ipv6)
        if oracle_bgp_peering_ip is not None:
            pulumi.set(__self__, "oracle_bgp_peering_ip", oracle_bgp_peering_ip)
        if oracle_bgp_peering_ipv6 is not None:
            pulumi.set(__self__, "oracle_bgp_peering_ipv6", oracle_bgp_peering_ipv6)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="bgpMd5authKey")
    def bgp_md5auth_key(self) -> Optional[str]:
        return pulumi.get(self, "bgp_md5auth_key")

    @property
    @pulumi.getter(name="crossConnectOrCrossConnectGroupId")
    def cross_connect_or_cross_connect_group_id(self) -> Optional[str]:
        return pulumi.get(self, "cross_connect_or_cross_connect_group_id")

    @property
    @pulumi.getter(name="customerBgpPeeringIp")
    def customer_bgp_peering_ip(self) -> Optional[str]:
        return pulumi.get(self, "customer_bgp_peering_ip")

    @property
    @pulumi.getter(name="customerBgpPeeringIpv6")
    def customer_bgp_peering_ipv6(self) -> Optional[str]:
        return pulumi.get(self, "customer_bgp_peering_ipv6")

    @property
    @pulumi.getter(name="oracleBgpPeeringIp")
    def oracle_bgp_peering_ip(self) -> Optional[str]:
        return pulumi.get(self, "oracle_bgp_peering_ip")

    @property
    @pulumi.getter(name="oracleBgpPeeringIpv6")
    def oracle_bgp_peering_ipv6(self) -> Optional[str]:
        return pulumi.get(self, "oracle_bgp_peering_ipv6")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[int]:
        return pulumi.get(self, "vlan")


@pulumi.output_type
class GetVirtualCircuitsVirtualCircuitPublicPrefixResult(dict):
    def __init__(__self__, *,
                 cidr_block: Optional[str] = None):
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")


@pulumi.output_type
class GetVirtualNetworksFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVirtualNetworksVirtualNetworkResult(dict):
    def __init__(__self__, *,
                 byoipv6cidr_blocks: Optional[Sequence[str]] = None,
                 byoipv6cidr_details: Optional[Sequence['outputs.GetVirtualNetworksVirtualNetworkByoipv6cidrDetailResult']] = None,
                 cidr_block: Optional[str] = None,
                 cidr_blocks: Optional[Sequence[str]] = None,
                 compartment_id: Optional[str] = None,
                 default_dhcp_options_id: Optional[str] = None,
                 default_route_table_id: Optional[str] = None,
                 default_security_list_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 dns_label: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 ipv6cidr_blocks: Optional[Sequence[str]] = None,
                 ipv6private_cidr_blocks: Optional[Sequence[str]] = None,
                 is_ipv6enabled: Optional[bool] = None,
                 is_oracle_gua_allocation_enabled: Optional[bool] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vcn_domain_name: Optional[str] = None):
        if byoipv6cidr_blocks is not None:
            pulumi.set(__self__, "byoipv6cidr_blocks", byoipv6cidr_blocks)
        if byoipv6cidr_details is not None:
            pulumi.set(__self__, "byoipv6cidr_details", byoipv6cidr_details)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if cidr_blocks is not None:
            pulumi.set(__self__, "cidr_blocks", cidr_blocks)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if default_dhcp_options_id is not None:
            pulumi.set(__self__, "default_dhcp_options_id", default_dhcp_options_id)
        if default_route_table_id is not None:
            pulumi.set(__self__, "default_route_table_id", default_route_table_id)
        if default_security_list_id is not None:
            pulumi.set(__self__, "default_security_list_id", default_security_list_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dns_label is not None:
            pulumi.set(__self__, "dns_label", dns_label)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv6cidr_blocks is not None:
            pulumi.set(__self__, "ipv6cidr_blocks", ipv6cidr_blocks)
        if ipv6private_cidr_blocks is not None:
            pulumi.set(__self__, "ipv6private_cidr_blocks", ipv6private_cidr_blocks)
        if is_ipv6enabled is not None:
            pulumi.set(__self__, "is_ipv6enabled", is_ipv6enabled)
        if is_oracle_gua_allocation_enabled is not None:
            pulumi.set(__self__, "is_oracle_gua_allocation_enabled", is_oracle_gua_allocation_enabled)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_domain_name is not None:
            pulumi.set(__self__, "vcn_domain_name", vcn_domain_name)

    @property
    @pulumi.getter(name="byoipv6cidrBlocks")
    def byoipv6cidr_blocks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "byoipv6cidr_blocks")

    @property
    @pulumi.getter(name="byoipv6cidrDetails")
    def byoipv6cidr_details(self) -> Optional[Sequence['outputs.GetVirtualNetworksVirtualNetworkByoipv6cidrDetailResult']]:
        return pulumi.get(self, "byoipv6cidr_details")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cidr_blocks")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="defaultDhcpOptionsId")
    def default_dhcp_options_id(self) -> Optional[str]:
        return pulumi.get(self, "default_dhcp_options_id")

    @property
    @pulumi.getter(name="defaultRouteTableId")
    def default_route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "default_route_table_id")

    @property
    @pulumi.getter(name="defaultSecurityListId")
    def default_security_list_id(self) -> Optional[str]:
        return pulumi.get(self, "default_security_list_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsLabel")
    def dns_label(self) -> Optional[str]:
        return pulumi.get(self, "dns_label")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv6cidrBlocks")
    def ipv6cidr_blocks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ipv6cidr_blocks")

    @property
    @pulumi.getter(name="ipv6privateCidrBlocks")
    def ipv6private_cidr_blocks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ipv6private_cidr_blocks")

    @property
    @pulumi.getter(name="isIpv6enabled")
    def is_ipv6enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_ipv6enabled")

    @property
    @pulumi.getter(name="isOracleGuaAllocationEnabled")
    def is_oracle_gua_allocation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_oracle_gua_allocation_enabled")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnDomainName")
    def vcn_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "vcn_domain_name")


@pulumi.output_type
class GetVirtualNetworksVirtualNetworkByoipv6cidrDetailResult(dict):
    def __init__(__self__, *,
                 byoipv6range_id: Optional[str] = None,
                 ipv6cidr_block: Optional[str] = None):
        if byoipv6range_id is not None:
            pulumi.set(__self__, "byoipv6range_id", byoipv6range_id)
        if ipv6cidr_block is not None:
            pulumi.set(__self__, "ipv6cidr_block", ipv6cidr_block)

    @property
    @pulumi.getter(name="byoipv6rangeId")
    def byoipv6range_id(self) -> Optional[str]:
        return pulumi.get(self, "byoipv6range_id")

    @property
    @pulumi.getter(name="ipv6cidrBlock")
    def ipv6cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "ipv6cidr_block")


@pulumi.output_type
class GetVlansFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVlansVlanResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 cidr_block: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 route_table_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vcn_id: Optional[str] = None,
                 vlan_tag: Optional[int] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)
        if vlan_tag is not None:
            pulumi.set(__self__, "vlan_tag", vlan_tag)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> Optional[int]:
        return pulumi.get(self, "vlan_tag")


@pulumi.output_type
class GetVnicAttachmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVnicAttachmentsVnicAttachmentResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 create_vnic_details: Optional[Sequence['outputs.GetVnicAttachmentsVnicAttachmentCreateVnicDetailResult']] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 nic_index: Optional[int] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vlan_id: Optional[str] = None,
                 vlan_tag: Optional[int] = None,
                 vnic_id: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if create_vnic_details is not None:
            pulumi.set(__self__, "create_vnic_details", create_vnic_details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if nic_index is not None:
            pulumi.set(__self__, "nic_index", nic_index)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vlan_tag is not None:
            pulumi.set(__self__, "vlan_tag", vlan_tag)
        if vnic_id is not None:
            pulumi.set(__self__, "vnic_id", vnic_id)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createVnicDetails")
    def create_vnic_details(self) -> Optional[Sequence['outputs.GetVnicAttachmentsVnicAttachmentCreateVnicDetailResult']]:
        return pulumi.get(self, "create_vnic_details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="nicIndex")
    def nic_index(self) -> Optional[int]:
        return pulumi.get(self, "nic_index")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vlanTag")
    def vlan_tag(self) -> Optional[int]:
        return pulumi.get(self, "vlan_tag")

    @property
    @pulumi.getter(name="vnicId")
    def vnic_id(self) -> Optional[str]:
        return pulumi.get(self, "vnic_id")


@pulumi.output_type
class GetVnicAttachmentsVnicAttachmentCreateVnicDetailResult(dict):
    def __init__(__self__, *,
                 assign_ipv6ip: Optional[bool] = None,
                 assign_private_dns_record: Optional[bool] = None,
                 assign_public_ip: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 ipv6address_ipv6subnet_cidr_pair_details: Optional[Sequence['outputs.GetVnicAttachmentsVnicAttachmentCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 skip_source_dest_check: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 vlan_id: Optional[str] = None):
        if assign_ipv6ip is not None:
            pulumi.set(__self__, "assign_ipv6ip", assign_ipv6ip)
        if assign_private_dns_record is not None:
            pulumi.set(__self__, "assign_private_dns_record", assign_private_dns_record)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if ipv6address_ipv6subnet_cidr_pair_details is not None:
            pulumi.set(__self__, "ipv6address_ipv6subnet_cidr_pair_details", ipv6address_ipv6subnet_cidr_pair_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if skip_source_dest_check is not None:
            pulumi.set(__self__, "skip_source_dest_check", skip_source_dest_check)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="assignIpv6ip")
    def assign_ipv6ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_ipv6ip")

    @property
    @pulumi.getter(name="assignPrivateDnsRecord")
    def assign_private_dns_record(self) -> Optional[bool]:
        return pulumi.get(self, "assign_private_dns_record")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[str]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter(name="ipv6addressIpv6subnetCidrPairDetails")
    def ipv6address_ipv6subnet_cidr_pair_details(self) -> Optional[Sequence['outputs.GetVnicAttachmentsVnicAttachmentCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult']]:
        return pulumi.get(self, "ipv6address_ipv6subnet_cidr_pair_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="skipSourceDestCheck")
    def skip_source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "skip_source_dest_check")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetVnicAttachmentsVnicAttachmentCreateVnicDetailIpv6addressIpv6subnetCidrPairDetailResult(dict):
    def __init__(__self__, *,
                 ipv6_address: Optional[str] = None,
                 ipv6_subnet_cidr: Optional[str] = None):
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_subnet_cidr is not None:
            pulumi.set(__self__, "ipv6_subnet_cidr", ipv6_subnet_cidr)

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="ipv6SubnetCidr")
    def ipv6_subnet_cidr(self) -> Optional[str]:
        return pulumi.get(self, "ipv6_subnet_cidr")


@pulumi.output_type
class GetVolumeAttachmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVolumeAttachmentsVolumeAttachmentResult(dict):
    def __init__(__self__, *,
                 attachment_type: Optional[str] = None,
                 availability_domain: Optional[str] = None,
                 chap_secret: Optional[str] = None,
                 chap_username: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 device: Optional[str] = None,
                 display_name: Optional[str] = None,
                 encryption_in_transit_type: Optional[str] = None,
                 id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 ipv4: Optional[str] = None,
                 iqn: Optional[str] = None,
                 is_agent_auto_iscsi_login_enabled: Optional[bool] = None,
                 is_multipath: Optional[bool] = None,
                 is_pv_encryption_in_transit_enabled: Optional[bool] = None,
                 is_read_only: Optional[bool] = None,
                 is_shareable: Optional[bool] = None,
                 iscsi_login_state: Optional[str] = None,
                 multipath_devices: Optional[Sequence['outputs.GetVolumeAttachmentsVolumeAttachmentMultipathDeviceResult']] = None,
                 port: Optional[int] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 use_chap: Optional[bool] = None,
                 volume_id: Optional[str] = None):
        if attachment_type is not None:
            pulumi.set(__self__, "attachment_type", attachment_type)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if chap_secret is not None:
            pulumi.set(__self__, "chap_secret", chap_secret)
        if chap_username is not None:
            pulumi.set(__self__, "chap_username", chap_username)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if encryption_in_transit_type is not None:
            pulumi.set(__self__, "encryption_in_transit_type", encryption_in_transit_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if iqn is not None:
            pulumi.set(__self__, "iqn", iqn)
        if is_agent_auto_iscsi_login_enabled is not None:
            pulumi.set(__self__, "is_agent_auto_iscsi_login_enabled", is_agent_auto_iscsi_login_enabled)
        if is_multipath is not None:
            pulumi.set(__self__, "is_multipath", is_multipath)
        if is_pv_encryption_in_transit_enabled is not None:
            pulumi.set(__self__, "is_pv_encryption_in_transit_enabled", is_pv_encryption_in_transit_enabled)
        if is_read_only is not None:
            pulumi.set(__self__, "is_read_only", is_read_only)
        if is_shareable is not None:
            pulumi.set(__self__, "is_shareable", is_shareable)
        if iscsi_login_state is not None:
            pulumi.set(__self__, "iscsi_login_state", iscsi_login_state)
        if multipath_devices is not None:
            pulumi.set(__self__, "multipath_devices", multipath_devices)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if use_chap is not None:
            pulumi.set(__self__, "use_chap", use_chap)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="attachmentType")
    def attachment_type(self) -> Optional[str]:
        return pulumi.get(self, "attachment_type")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="chapSecret")
    def chap_secret(self) -> Optional[str]:
        return pulumi.get(self, "chap_secret")

    @property
    @pulumi.getter(name="chapUsername")
    def chap_username(self) -> Optional[str]:
        return pulumi.get(self, "chap_username")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        warnings.warn("""The 'compartment_id' field has been deprecated and may be removed in a future version. Do not use this field.""", DeprecationWarning)
        pulumi.log.warn("""compartment_id is deprecated: The 'compartment_id' field has been deprecated and may be removed in a future version. Do not use this field.""")

        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encryptionInTransitType")
    def encryption_in_transit_type(self) -> Optional[str]:
        return pulumi.get(self, "encryption_in_transit_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[str]:
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def iqn(self) -> Optional[str]:
        return pulumi.get(self, "iqn")

    @property
    @pulumi.getter(name="isAgentAutoIscsiLoginEnabled")
    def is_agent_auto_iscsi_login_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_agent_auto_iscsi_login_enabled")

    @property
    @pulumi.getter(name="isMultipath")
    def is_multipath(self) -> Optional[bool]:
        return pulumi.get(self, "is_multipath")

    @property
    @pulumi.getter(name="isPvEncryptionInTransitEnabled")
    def is_pv_encryption_in_transit_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pv_encryption_in_transit_enabled")

    @property
    @pulumi.getter(name="isReadOnly")
    def is_read_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_read_only")

    @property
    @pulumi.getter(name="isShareable")
    def is_shareable(self) -> Optional[bool]:
        return pulumi.get(self, "is_shareable")

    @property
    @pulumi.getter(name="iscsiLoginState")
    def iscsi_login_state(self) -> Optional[str]:
        return pulumi.get(self, "iscsi_login_state")

    @property
    @pulumi.getter(name="multipathDevices")
    def multipath_devices(self) -> Optional[Sequence['outputs.GetVolumeAttachmentsVolumeAttachmentMultipathDeviceResult']]:
        return pulumi.get(self, "multipath_devices")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="useChap")
    def use_chap(self) -> Optional[bool]:
        return pulumi.get(self, "use_chap")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumeAttachmentsVolumeAttachmentMultipathDeviceResult(dict):
    def __init__(__self__, *,
                 ipv4: Optional[str] = None,
                 iqn: Optional[str] = None,
                 port: Optional[int] = None):
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if iqn is not None:
            pulumi.set(__self__, "iqn", iqn)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[str]:
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def iqn(self) -> Optional[str]:
        return pulumi.get(self, "iqn")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetVolumeAutotunePolicyResult(dict):
    def __init__(__self__, *,
                 autotune_type: Optional[str] = None,
                 max_vpus_per_gb: Optional[str] = None):
        if autotune_type is not None:
            pulumi.set(__self__, "autotune_type", autotune_type)
        if max_vpus_per_gb is not None:
            pulumi.set(__self__, "max_vpus_per_gb", max_vpus_per_gb)

    @property
    @pulumi.getter(name="autotuneType")
    def autotune_type(self) -> Optional[str]:
        return pulumi.get(self, "autotune_type")

    @property
    @pulumi.getter(name="maxVpusPerGb")
    def max_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "max_vpus_per_gb")


@pulumi.output_type
class GetVolumeBackupPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVolumeBackupPoliciesVolumeBackupPolicyResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 destination_region: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 schedules: Optional[Sequence['outputs.GetVolumeBackupPoliciesVolumeBackupPolicyScheduleResult']] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if destination_region is not None:
            pulumi.set(__self__, "destination_region", destination_region)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> Optional[str]:
        return pulumi.get(self, "destination_region")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def schedules(self) -> Optional[Sequence['outputs.GetVolumeBackupPoliciesVolumeBackupPolicyScheduleResult']]:
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetVolumeBackupPoliciesVolumeBackupPolicyScheduleResult(dict):
    def __init__(__self__, *,
                 backup_type: Optional[str] = None,
                 day_of_month: Optional[int] = None,
                 day_of_week: Optional[str] = None,
                 hour_of_day: Optional[int] = None,
                 month: Optional[str] = None,
                 offset_seconds: Optional[int] = None,
                 offset_type: Optional[str] = None,
                 period: Optional[str] = None,
                 retention_seconds: Optional[int] = None,
                 time_zone: Optional[str] = None):
        if backup_type is not None:
            pulumi.set(__self__, "backup_type", backup_type)
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if hour_of_day is not None:
            pulumi.set(__self__, "hour_of_day", hour_of_day)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if offset_seconds is not None:
            pulumi.set(__self__, "offset_seconds", offset_seconds)
        if offset_type is not None:
            pulumi.set(__self__, "offset_type", offset_type)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if retention_seconds is not None:
            pulumi.set(__self__, "retention_seconds", retention_seconds)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> Optional[str]:
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> Optional[int]:
        return pulumi.get(self, "hour_of_day")

    @property
    @pulumi.getter
    def month(self) -> Optional[str]:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="offsetSeconds")
    def offset_seconds(self) -> Optional[int]:
        return pulumi.get(self, "offset_seconds")

    @property
    @pulumi.getter(name="offsetType")
    def offset_type(self) -> Optional[str]:
        return pulumi.get(self, "offset_type")

    @property
    @pulumi.getter
    def period(self) -> Optional[str]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="retentionSeconds")
    def retention_seconds(self) -> Optional[int]:
        return pulumi.get(self, "retention_seconds")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class GetVolumeBackupPolicyAssignmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVolumeBackupPolicyAssignmentsVolumeBackupPolicyAssignmentResult(dict):
    def __init__(__self__, *,
                 asset_id: Optional[str] = None,
                 id: Optional[str] = None,
                 policy_id: Optional[str] = None,
                 time_created: Optional[str] = None):
        if asset_id is not None:
            pulumi.set(__self__, "asset_id", asset_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="assetId")
    def asset_id(self) -> Optional[str]:
        return pulumi.get(self, "asset_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetVolumeBackupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVolumeBackupsVolumeBackupResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 expiration_time: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 size_in_gbs: Optional[str] = None,
                 size_in_mbs: Optional[str] = None,
                 source_details: Optional[Sequence['outputs.GetVolumeBackupsVolumeBackupSourceDetailResult']] = None,
                 source_type: Optional[str] = None,
                 source_volume_backup_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_request_received: Optional[str] = None,
                 type: Optional[str] = None,
                 unique_size_in_gbs: Optional[str] = None,
                 unique_size_in_mbs: Optional[str] = None,
                 volume_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size_in_gbs is not None:
            pulumi.set(__self__, "size_in_gbs", size_in_gbs)
        if size_in_mbs is not None:
            pulumi.set(__self__, "size_in_mbs", size_in_mbs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if source_volume_backup_id is not None:
            pulumi.set(__self__, "source_volume_backup_id", source_volume_backup_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_request_received is not None:
            pulumi.set(__self__, "time_request_received", time_request_received)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unique_size_in_gbs is not None:
            pulumi.set(__self__, "unique_size_in_gbs", unique_size_in_gbs)
        if unique_size_in_mbs is not None:
            pulumi.set(__self__, "unique_size_in_mbs", unique_size_in_mbs)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sizeInGbs")
    def size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_gbs")

    @property
    @pulumi.getter(name="sizeInMbs")
    def size_in_mbs(self) -> Optional[str]:
        warnings.warn("""The 'size_in_mbs' field has been deprecated. Please use 'size_in_gbs' instead.""", DeprecationWarning)
        pulumi.log.warn("""size_in_mbs is deprecated: The 'size_in_mbs' field has been deprecated. Please use 'size_in_gbs' instead.""")

        return pulumi.get(self, "size_in_mbs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetVolumeBackupsVolumeBackupSourceDetailResult']]:
        return pulumi.get(self, "source_details")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="sourceVolumeBackupId")
    def source_volume_backup_id(self) -> Optional[str]:
        return pulumi.get(self, "source_volume_backup_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeRequestReceived")
    def time_request_received(self) -> Optional[str]:
        return pulumi.get(self, "time_request_received")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="uniqueSizeInGbs")
    def unique_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "unique_size_in_gbs")

    @property
    @pulumi.getter(name="uniqueSizeInMbs")
    def unique_size_in_mbs(self) -> Optional[str]:
        warnings.warn("""The 'unique_size_in_mbs' field has been deprecated. Please use 'unique_size_in_gbs' instead.""", DeprecationWarning)
        pulumi.log.warn("""unique_size_in_mbs is deprecated: The 'unique_size_in_mbs' field has been deprecated. Please use 'unique_size_in_gbs' instead.""")

        return pulumi.get(self, "unique_size_in_mbs")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumeBackupsVolumeBackupSourceDetailResult(dict):
    def __init__(__self__, *,
                 kms_key_id: Optional[str] = None,
                 region: Optional[str] = None,
                 volume_backup_id: Optional[str] = None):
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if volume_backup_id is not None:
            pulumi.set(__self__, "volume_backup_id", volume_backup_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="volumeBackupId")
    def volume_backup_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_backup_id")


@pulumi.output_type
class GetVolumeBlockVolumeReplicaResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 block_volume_replica_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if block_volume_replica_id is not None:
            pulumi.set(__self__, "block_volume_replica_id", block_volume_replica_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="blockVolumeReplicaId")
    def block_volume_replica_id(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_replica_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetVolumeGroupBackupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVolumeGroupBackupsVolumeGroupBackupResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 expiration_time: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 size_in_gbs: Optional[str] = None,
                 size_in_mbs: Optional[str] = None,
                 source_details: Optional[Sequence['outputs.GetVolumeGroupBackupsVolumeGroupBackupSourceDetailResult']] = None,
                 source_type: Optional[str] = None,
                 source_volume_group_backup_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_request_received: Optional[str] = None,
                 type: Optional[str] = None,
                 unique_size_in_gbs: Optional[str] = None,
                 unique_size_in_mbs: Optional[str] = None,
                 volume_backup_ids: Optional[Sequence[str]] = None,
                 volume_group_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if size_in_gbs is not None:
            pulumi.set(__self__, "size_in_gbs", size_in_gbs)
        if size_in_mbs is not None:
            pulumi.set(__self__, "size_in_mbs", size_in_mbs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if source_volume_group_backup_id is not None:
            pulumi.set(__self__, "source_volume_group_backup_id", source_volume_group_backup_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_request_received is not None:
            pulumi.set(__self__, "time_request_received", time_request_received)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unique_size_in_gbs is not None:
            pulumi.set(__self__, "unique_size_in_gbs", unique_size_in_gbs)
        if unique_size_in_mbs is not None:
            pulumi.set(__self__, "unique_size_in_mbs", unique_size_in_mbs)
        if volume_backup_ids is not None:
            pulumi.set(__self__, "volume_backup_ids", volume_backup_ids)
        if volume_group_id is not None:
            pulumi.set(__self__, "volume_group_id", volume_group_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sizeInGbs")
    def size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_gbs")

    @property
    @pulumi.getter(name="sizeInMbs")
    def size_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_mbs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetVolumeGroupBackupsVolumeGroupBackupSourceDetailResult']]:
        return pulumi.get(self, "source_details")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="sourceVolumeGroupBackupId")
    def source_volume_group_backup_id(self) -> Optional[str]:
        return pulumi.get(self, "source_volume_group_backup_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeRequestReceived")
    def time_request_received(self) -> Optional[str]:
        return pulumi.get(self, "time_request_received")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="uniqueSizeInGbs")
    def unique_size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "unique_size_in_gbs")

    @property
    @pulumi.getter(name="uniqueSizeInMbs")
    def unique_size_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "unique_size_in_mbs")

    @property
    @pulumi.getter(name="volumeBackupIds")
    def volume_backup_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "volume_backup_ids")

    @property
    @pulumi.getter(name="volumeGroupId")
    def volume_group_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_group_id")


@pulumi.output_type
class GetVolumeGroupBackupsVolumeGroupBackupSourceDetailResult(dict):
    def __init__(__self__, *,
                 kms_key_id: Optional[str] = None,
                 region: Optional[str] = None,
                 volume_group_backup_id: Optional[str] = None):
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if volume_group_backup_id is not None:
            pulumi.set(__self__, "volume_group_backup_id", volume_group_backup_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="volumeGroupBackupId")
    def volume_group_backup_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_group_backup_id")


@pulumi.output_type
class GetVolumeGroupReplicaMemberReplicaResult(dict):
    def __init__(__self__, *,
                 membership_state: Optional[str] = None,
                 volume_replica_id: Optional[str] = None):
        if membership_state is not None:
            pulumi.set(__self__, "membership_state", membership_state)
        if volume_replica_id is not None:
            pulumi.set(__self__, "volume_replica_id", volume_replica_id)

    @property
    @pulumi.getter(name="membershipState")
    def membership_state(self) -> Optional[str]:
        return pulumi.get(self, "membership_state")

    @property
    @pulumi.getter(name="volumeReplicaId")
    def volume_replica_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_replica_id")


@pulumi.output_type
class GetVolumeGroupReplicasFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVolumeGroupReplicasVolumeGroupReplicaResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 member_replicas: Optional[Sequence['outputs.GetVolumeGroupReplicasVolumeGroupReplicaMemberReplicaResult']] = None,
                 size_in_gbs: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_synced: Optional[str] = None,
                 volume_group_id: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if member_replicas is not None:
            pulumi.set(__self__, "member_replicas", member_replicas)
        if size_in_gbs is not None:
            pulumi.set(__self__, "size_in_gbs", size_in_gbs)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_synced is not None:
            pulumi.set(__self__, "time_last_synced", time_last_synced)
        if volume_group_id is not None:
            pulumi.set(__self__, "volume_group_id", volume_group_id)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="memberReplicas")
    def member_replicas(self) -> Optional[Sequence['outputs.GetVolumeGroupReplicasVolumeGroupReplicaMemberReplicaResult']]:
        return pulumi.get(self, "member_replicas")

    @property
    @pulumi.getter(name="sizeInGbs")
    def size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_gbs")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastSynced")
    def time_last_synced(self) -> Optional[str]:
        return pulumi.get(self, "time_last_synced")

    @property
    @pulumi.getter(name="volumeGroupId")
    def volume_group_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_group_id")


@pulumi.output_type
class GetVolumeGroupReplicasVolumeGroupReplicaMemberReplicaResult(dict):
    def __init__(__self__, *,
                 membership_state: Optional[str] = None,
                 volume_replica_id: Optional[str] = None):
        if membership_state is not None:
            pulumi.set(__self__, "membership_state", membership_state)
        if volume_replica_id is not None:
            pulumi.set(__self__, "volume_replica_id", volume_replica_id)

    @property
    @pulumi.getter(name="membershipState")
    def membership_state(self) -> Optional[str]:
        return pulumi.get(self, "membership_state")

    @property
    @pulumi.getter(name="volumeReplicaId")
    def volume_replica_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_replica_id")


@pulumi.output_type
class GetVolumeGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVolumeGroupsVolumeGroupResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 backup_policy_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_hydrated: Optional[bool] = None,
                 preserve_volume_replica: Optional[bool] = None,
                 size_in_gbs: Optional[str] = None,
                 size_in_mbs: Optional[str] = None,
                 source_details: Optional[Sequence['outputs.GetVolumeGroupsVolumeGroupSourceDetailResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 volume_group_replicas: Optional[Sequence['outputs.GetVolumeGroupsVolumeGroupVolumeGroupReplicaResult']] = None,
                 volume_group_replicas_deletion: Optional[bool] = None,
                 volume_ids: Optional[Sequence[str]] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if backup_policy_id is not None:
            pulumi.set(__self__, "backup_policy_id", backup_policy_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_hydrated is not None:
            pulumi.set(__self__, "is_hydrated", is_hydrated)
        if preserve_volume_replica is not None:
            pulumi.set(__self__, "preserve_volume_replica", preserve_volume_replica)
        if size_in_gbs is not None:
            pulumi.set(__self__, "size_in_gbs", size_in_gbs)
        if size_in_mbs is not None:
            pulumi.set(__self__, "size_in_mbs", size_in_mbs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if volume_group_replicas is not None:
            pulumi.set(__self__, "volume_group_replicas", volume_group_replicas)
        if volume_group_replicas_deletion is not None:
            pulumi.set(__self__, "volume_group_replicas_deletion", volume_group_replicas_deletion)
        if volume_ids is not None:
            pulumi.set(__self__, "volume_ids", volume_ids)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "backup_policy_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isHydrated")
    def is_hydrated(self) -> Optional[bool]:
        return pulumi.get(self, "is_hydrated")

    @property
    @pulumi.getter(name="preserveVolumeReplica")
    def preserve_volume_replica(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_volume_replica")

    @property
    @pulumi.getter(name="sizeInGbs")
    def size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_gbs")

    @property
    @pulumi.getter(name="sizeInMbs")
    def size_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_mbs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetVolumeGroupsVolumeGroupSourceDetailResult']]:
        return pulumi.get(self, "source_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="volumeGroupReplicas")
    def volume_group_replicas(self) -> Optional[Sequence['outputs.GetVolumeGroupsVolumeGroupVolumeGroupReplicaResult']]:
        return pulumi.get(self, "volume_group_replicas")

    @property
    @pulumi.getter(name="volumeGroupReplicasDeletion")
    def volume_group_replicas_deletion(self) -> Optional[bool]:
        return pulumi.get(self, "volume_group_replicas_deletion")

    @property
    @pulumi.getter(name="volumeIds")
    def volume_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "volume_ids")


@pulumi.output_type
class GetVolumeGroupsVolumeGroupSourceDetailResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 volume_group_backup_id: Optional[str] = None,
                 volume_group_id: Optional[str] = None,
                 volume_group_replica_id: Optional[str] = None,
                 volume_ids: Optional[Sequence[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if volume_group_backup_id is not None:
            pulumi.set(__self__, "volume_group_backup_id", volume_group_backup_id)
        if volume_group_id is not None:
            pulumi.set(__self__, "volume_group_id", volume_group_id)
        if volume_group_replica_id is not None:
            pulumi.set(__self__, "volume_group_replica_id", volume_group_replica_id)
        if volume_ids is not None:
            pulumi.set(__self__, "volume_ids", volume_ids)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="volumeGroupBackupId")
    def volume_group_backup_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_group_backup_id")

    @property
    @pulumi.getter(name="volumeGroupId")
    def volume_group_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_group_id")

    @property
    @pulumi.getter(name="volumeGroupReplicaId")
    def volume_group_replica_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_group_replica_id")

    @property
    @pulumi.getter(name="volumeIds")
    def volume_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "volume_ids")


@pulumi.output_type
class GetVolumeGroupsVolumeGroupVolumeGroupReplicaResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 display_name: Optional[str] = None,
                 volume_group_replica_id: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if volume_group_replica_id is not None:
            pulumi.set(__self__, "volume_group_replica_id", volume_group_replica_id)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="volumeGroupReplicaId")
    def volume_group_replica_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_group_replica_id")


@pulumi.output_type
class GetVolumeSourceDetailResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 type: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVolumesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVolumesVolumeResult(dict):
    def __init__(__self__, *,
                 auto_tuned_vpus_per_gb: Optional[str] = None,
                 autotune_policies: Optional[Sequence['outputs.GetVolumesVolumeAutotunePolicyResult']] = None,
                 availability_domain: Optional[str] = None,
                 backup_policy_id: Optional[str] = None,
                 block_volume_replicas: Optional[Sequence['outputs.GetVolumesVolumeBlockVolumeReplicaResult']] = None,
                 block_volume_replicas_deletion: Optional[bool] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_auto_tune_enabled: Optional[bool] = None,
                 is_hydrated: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 size_in_gbs: Optional[str] = None,
                 size_in_mbs: Optional[str] = None,
                 source_details: Optional[Sequence['outputs.GetVolumesVolumeSourceDetailResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 volume_backup_id: Optional[str] = None,
                 volume_group_id: Optional[str] = None,
                 vpus_per_gb: Optional[str] = None):
        if auto_tuned_vpus_per_gb is not None:
            pulumi.set(__self__, "auto_tuned_vpus_per_gb", auto_tuned_vpus_per_gb)
        if autotune_policies is not None:
            pulumi.set(__self__, "autotune_policies", autotune_policies)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if backup_policy_id is not None:
            pulumi.set(__self__, "backup_policy_id", backup_policy_id)
        if block_volume_replicas is not None:
            pulumi.set(__self__, "block_volume_replicas", block_volume_replicas)
        if block_volume_replicas_deletion is not None:
            pulumi.set(__self__, "block_volume_replicas_deletion", block_volume_replicas_deletion)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_auto_tune_enabled is not None:
            pulumi.set(__self__, "is_auto_tune_enabled", is_auto_tune_enabled)
        if is_hydrated is not None:
            pulumi.set(__self__, "is_hydrated", is_hydrated)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size_in_gbs is not None:
            pulumi.set(__self__, "size_in_gbs", size_in_gbs)
        if size_in_mbs is not None:
            pulumi.set(__self__, "size_in_mbs", size_in_mbs)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if volume_backup_id is not None:
            pulumi.set(__self__, "volume_backup_id", volume_backup_id)
        if volume_group_id is not None:
            pulumi.set(__self__, "volume_group_id", volume_group_id)
        if vpus_per_gb is not None:
            pulumi.set(__self__, "vpus_per_gb", vpus_per_gb)

    @property
    @pulumi.getter(name="autoTunedVpusPerGb")
    def auto_tuned_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "auto_tuned_vpus_per_gb")

    @property
    @pulumi.getter(name="autotunePolicies")
    def autotune_policies(self) -> Optional[Sequence['outputs.GetVolumesVolumeAutotunePolicyResult']]:
        return pulumi.get(self, "autotune_policies")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> Optional[str]:
        warnings.warn("""The 'backup_policy_id' field has been deprecated. Please use the 'oci_core_volume_backup_policy_assignment' resource instead.""", DeprecationWarning)
        pulumi.log.warn("""backup_policy_id is deprecated: The 'backup_policy_id' field has been deprecated. Please use the 'oci_core_volume_backup_policy_assignment' resource instead.""")

        return pulumi.get(self, "backup_policy_id")

    @property
    @pulumi.getter(name="blockVolumeReplicas")
    def block_volume_replicas(self) -> Optional[Sequence['outputs.GetVolumesVolumeBlockVolumeReplicaResult']]:
        return pulumi.get(self, "block_volume_replicas")

    @property
    @pulumi.getter(name="blockVolumeReplicasDeletion")
    def block_volume_replicas_deletion(self) -> Optional[bool]:
        return pulumi.get(self, "block_volume_replicas_deletion")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutoTuneEnabled")
    def is_auto_tune_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_tune_enabled")

    @property
    @pulumi.getter(name="isHydrated")
    def is_hydrated(self) -> Optional[bool]:
        return pulumi.get(self, "is_hydrated")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sizeInGbs")
    def size_in_gbs(self) -> Optional[str]:
        return pulumi.get(self, "size_in_gbs")

    @property
    @pulumi.getter(name="sizeInMbs")
    def size_in_mbs(self) -> Optional[str]:
        warnings.warn("""The 'size_in_mbs' field has been deprecated. Please use 'size_in_gbs' instead.""", DeprecationWarning)
        pulumi.log.warn("""size_in_mbs is deprecated: The 'size_in_mbs' field has been deprecated. Please use 'size_in_gbs' instead.""")

        return pulumi.get(self, "size_in_mbs")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetVolumesVolumeSourceDetailResult']]:
        return pulumi.get(self, "source_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="volumeBackupId")
    def volume_backup_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_backup_id")

    @property
    @pulumi.getter(name="volumeGroupId")
    def volume_group_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_group_id")

    @property
    @pulumi.getter(name="vpusPerGb")
    def vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "vpus_per_gb")


@pulumi.output_type
class GetVolumesVolumeAutotunePolicyResult(dict):
    def __init__(__self__, *,
                 autotune_type: Optional[str] = None,
                 max_vpus_per_gb: Optional[str] = None):
        if autotune_type is not None:
            pulumi.set(__self__, "autotune_type", autotune_type)
        if max_vpus_per_gb is not None:
            pulumi.set(__self__, "max_vpus_per_gb", max_vpus_per_gb)

    @property
    @pulumi.getter(name="autotuneType")
    def autotune_type(self) -> Optional[str]:
        return pulumi.get(self, "autotune_type")

    @property
    @pulumi.getter(name="maxVpusPerGb")
    def max_vpus_per_gb(self) -> Optional[str]:
        return pulumi.get(self, "max_vpus_per_gb")


@pulumi.output_type
class GetVolumesVolumeBlockVolumeReplicaResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 block_volume_replica_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if block_volume_replica_id is not None:
            pulumi.set(__self__, "block_volume_replica_id", block_volume_replica_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="blockVolumeReplicaId")
    def block_volume_replica_id(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_replica_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetVolumesVolumeSourceDetailResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 type: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVtapsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVtapsVtapResult(dict):
    def __init__(__self__, *,
                 capture_filter_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 encapsulation_protocol: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_vtap_enabled: Optional[bool] = None,
                 lifecycle_state_details: Optional[str] = None,
                 max_packet_size: Optional[int] = None,
                 source_id: Optional[str] = None,
                 source_private_endpoint_ip: Optional[str] = None,
                 source_private_endpoint_subnet_id: Optional[str] = None,
                 source_type: Optional[str] = None,
                 state: Optional[str] = None,
                 target_id: Optional[str] = None,
                 target_ip: Optional[str] = None,
                 target_type: Optional[str] = None,
                 time_created: Optional[str] = None,
                 traffic_mode: Optional[str] = None,
                 vcn_id: Optional[str] = None,
                 vxlan_network_identifier: Optional[str] = None):
        if capture_filter_id is not None:
            pulumi.set(__self__, "capture_filter_id", capture_filter_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if encapsulation_protocol is not None:
            pulumi.set(__self__, "encapsulation_protocol", encapsulation_protocol)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_vtap_enabled is not None:
            pulumi.set(__self__, "is_vtap_enabled", is_vtap_enabled)
        if lifecycle_state_details is not None:
            pulumi.set(__self__, "lifecycle_state_details", lifecycle_state_details)
        if max_packet_size is not None:
            pulumi.set(__self__, "max_packet_size", max_packet_size)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_private_endpoint_ip is not None:
            pulumi.set(__self__, "source_private_endpoint_ip", source_private_endpoint_ip)
        if source_private_endpoint_subnet_id is not None:
            pulumi.set(__self__, "source_private_endpoint_subnet_id", source_private_endpoint_subnet_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_ip is not None:
            pulumi.set(__self__, "target_ip", target_ip)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if traffic_mode is not None:
            pulumi.set(__self__, "traffic_mode", traffic_mode)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)
        if vxlan_network_identifier is not None:
            pulumi.set(__self__, "vxlan_network_identifier", vxlan_network_identifier)

    @property
    @pulumi.getter(name="captureFilterId")
    def capture_filter_id(self) -> Optional[str]:
        return pulumi.get(self, "capture_filter_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encapsulationProtocol")
    def encapsulation_protocol(self) -> Optional[str]:
        return pulumi.get(self, "encapsulation_protocol")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isVtapEnabled")
    def is_vtap_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_vtap_enabled")

    @property
    @pulumi.getter(name="lifecycleStateDetails")
    def lifecycle_state_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_state_details")

    @property
    @pulumi.getter(name="maxPacketSize")
    def max_packet_size(self) -> Optional[int]:
        return pulumi.get(self, "max_packet_size")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[str]:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourcePrivateEndpointIp")
    def source_private_endpoint_ip(self) -> Optional[str]:
        return pulumi.get(self, "source_private_endpoint_ip")

    @property
    @pulumi.getter(name="sourcePrivateEndpointSubnetId")
    def source_private_endpoint_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "source_private_endpoint_subnet_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetIp")
    def target_ip(self) -> Optional[str]:
        return pulumi.get(self, "target_ip")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[str]:
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="trafficMode")
    def traffic_mode(self) -> Optional[str]:
        return pulumi.get(self, "traffic_mode")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")

    @property
    @pulumi.getter(name="vxlanNetworkIdentifier")
    def vxlan_network_identifier(self) -> Optional[str]:
        return pulumi.get(self, "vxlan_network_identifier")


