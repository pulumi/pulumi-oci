# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VirtualCircuitArgs', 'VirtualCircuit']

@pulumi.input_type
class VirtualCircuitArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 bandwidth_shape_name: Optional[pulumi.Input[str]] = None,
                 bgp_admin_state: Optional[pulumi.Input[str]] = None,
                 cross_connect_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualCircuitCrossConnectMappingArgs']]]] = None,
                 customer_asn: Optional[pulumi.Input[str]] = None,
                 customer_bgp_asn: Optional[pulumi.Input[int]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 ip_mtu: Optional[pulumi.Input[str]] = None,
                 is_bfd_enabled: Optional[pulumi.Input[bool]] = None,
                 is_transport_mode: Optional[pulumi.Input[bool]] = None,
                 provider_service_id: Optional[pulumi.Input[str]] = None,
                 provider_service_key_name: Optional[pulumi.Input[str]] = None,
                 public_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualCircuitPublicPrefixArgs']]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 routing_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a VirtualCircuit resource.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "type", type)
        if bandwidth_shape_name is not None:
            pulumi.set(__self__, "bandwidth_shape_name", bandwidth_shape_name)
        if bgp_admin_state is not None:
            pulumi.set(__self__, "bgp_admin_state", bgp_admin_state)
        if cross_connect_mappings is not None:
            pulumi.set(__self__, "cross_connect_mappings", cross_connect_mappings)
        if customer_asn is not None:
            pulumi.set(__self__, "customer_asn", customer_asn)
        if customer_bgp_asn is not None:
            warnings.warn("""The 'customer_bgp_asn' field has been deprecated. Please use 'customer_asn' instead.""", DeprecationWarning)
            pulumi.log.warn("""customer_bgp_asn is deprecated: The 'customer_bgp_asn' field has been deprecated. Please use 'customer_asn' instead.""")
        if customer_bgp_asn is not None:
            pulumi.set(__self__, "customer_bgp_asn", customer_bgp_asn)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if ip_mtu is not None:
            pulumi.set(__self__, "ip_mtu", ip_mtu)
        if is_bfd_enabled is not None:
            pulumi.set(__self__, "is_bfd_enabled", is_bfd_enabled)
        if is_transport_mode is not None:
            pulumi.set(__self__, "is_transport_mode", is_transport_mode)
        if provider_service_id is not None:
            pulumi.set(__self__, "provider_service_id", provider_service_id)
        if provider_service_key_name is not None:
            pulumi.set(__self__, "provider_service_key_name", provider_service_key_name)
        if public_prefixes is not None:
            pulumi.set(__self__, "public_prefixes", public_prefixes)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if routing_policies is not None:
            pulumi.set(__self__, "routing_policies", routing_policies)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="bandwidthShapeName")
    def bandwidth_shape_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bandwidth_shape_name")

    @bandwidth_shape_name.setter
    def bandwidth_shape_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_shape_name", value)

    @property
    @pulumi.getter(name="bgpAdminState")
    def bgp_admin_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bgp_admin_state")

    @bgp_admin_state.setter
    def bgp_admin_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_admin_state", value)

    @property
    @pulumi.getter(name="crossConnectMappings")
    def cross_connect_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualCircuitCrossConnectMappingArgs']]]]:
        return pulumi.get(self, "cross_connect_mappings")

    @cross_connect_mappings.setter
    def cross_connect_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualCircuitCrossConnectMappingArgs']]]]):
        pulumi.set(self, "cross_connect_mappings", value)

    @property
    @pulumi.getter(name="customerAsn")
    def customer_asn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customer_asn")

    @customer_asn.setter
    def customer_asn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_asn", value)

    @property
    @pulumi.getter(name="customerBgpAsn")
    def customer_bgp_asn(self) -> Optional[pulumi.Input[int]]:
        warnings.warn("""The 'customer_bgp_asn' field has been deprecated. Please use 'customer_asn' instead.""", DeprecationWarning)
        pulumi.log.warn("""customer_bgp_asn is deprecated: The 'customer_bgp_asn' field has been deprecated. Please use 'customer_asn' instead.""")

        return pulumi.get(self, "customer_bgp_asn")

    @customer_bgp_asn.setter
    def customer_bgp_asn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "customer_bgp_asn", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_mtu")

    @ip_mtu.setter
    def ip_mtu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_mtu", value)

    @property
    @pulumi.getter(name="isBfdEnabled")
    def is_bfd_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_bfd_enabled")

    @is_bfd_enabled.setter
    def is_bfd_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_bfd_enabled", value)

    @property
    @pulumi.getter(name="isTransportMode")
    def is_transport_mode(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_transport_mode")

    @is_transport_mode.setter
    def is_transport_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_transport_mode", value)

    @property
    @pulumi.getter(name="providerServiceId")
    def provider_service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider_service_id")

    @provider_service_id.setter
    def provider_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_service_id", value)

    @property
    @pulumi.getter(name="providerServiceKeyName")
    def provider_service_key_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider_service_key_name")

    @provider_service_key_name.setter
    def provider_service_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_service_key_name", value)

    @property
    @pulumi.getter(name="publicPrefixes")
    def public_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualCircuitPublicPrefixArgs']]]]:
        return pulumi.get(self, "public_prefixes")

    @public_prefixes.setter
    def public_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualCircuitPublicPrefixArgs']]]]):
        pulumi.set(self, "public_prefixes", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="routingPolicies")
    def routing_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "routing_policies")

    @routing_policies.setter
    def routing_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "routing_policies", value)


@pulumi.input_type
class _VirtualCircuitState:
    def __init__(__self__, *,
                 bandwidth_shape_name: Optional[pulumi.Input[str]] = None,
                 bgp_admin_state: Optional[pulumi.Input[str]] = None,
                 bgp_ipv6session_state: Optional[pulumi.Input[str]] = None,
                 bgp_management: Optional[pulumi.Input[str]] = None,
                 bgp_session_state: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 cross_connect_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualCircuitCrossConnectMappingArgs']]]] = None,
                 customer_asn: Optional[pulumi.Input[str]] = None,
                 customer_bgp_asn: Optional[pulumi.Input[int]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 ip_mtu: Optional[pulumi.Input[str]] = None,
                 is_bfd_enabled: Optional[pulumi.Input[bool]] = None,
                 is_transport_mode: Optional[pulumi.Input[bool]] = None,
                 oracle_bgp_asn: Optional[pulumi.Input[int]] = None,
                 provider_service_id: Optional[pulumi.Input[str]] = None,
                 provider_service_key_name: Optional[pulumi.Input[str]] = None,
                 provider_state: Optional[pulumi.Input[str]] = None,
                 public_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualCircuitPublicPrefixArgs']]]] = None,
                 reference_comment: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 routing_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VirtualCircuit resources.
        """
        if bandwidth_shape_name is not None:
            pulumi.set(__self__, "bandwidth_shape_name", bandwidth_shape_name)
        if bgp_admin_state is not None:
            pulumi.set(__self__, "bgp_admin_state", bgp_admin_state)
        if bgp_ipv6session_state is not None:
            pulumi.set(__self__, "bgp_ipv6session_state", bgp_ipv6session_state)
        if bgp_management is not None:
            warnings.warn("""The 'bgp_management' field has been deprecated. Please use the 'oci_core_fast_connect_provider_service' data source instead.""", DeprecationWarning)
            pulumi.log.warn("""bgp_management is deprecated: The 'bgp_management' field has been deprecated. Please use the 'oci_core_fast_connect_provider_service' data source instead.""")
        if bgp_management is not None:
            pulumi.set(__self__, "bgp_management", bgp_management)
        if bgp_session_state is not None:
            pulumi.set(__self__, "bgp_session_state", bgp_session_state)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if cross_connect_mappings is not None:
            pulumi.set(__self__, "cross_connect_mappings", cross_connect_mappings)
        if customer_asn is not None:
            pulumi.set(__self__, "customer_asn", customer_asn)
        if customer_bgp_asn is not None:
            warnings.warn("""The 'customer_bgp_asn' field has been deprecated. Please use 'customer_asn' instead.""", DeprecationWarning)
            pulumi.log.warn("""customer_bgp_asn is deprecated: The 'customer_bgp_asn' field has been deprecated. Please use 'customer_asn' instead.""")
        if customer_bgp_asn is not None:
            pulumi.set(__self__, "customer_bgp_asn", customer_bgp_asn)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if ip_mtu is not None:
            pulumi.set(__self__, "ip_mtu", ip_mtu)
        if is_bfd_enabled is not None:
            pulumi.set(__self__, "is_bfd_enabled", is_bfd_enabled)
        if is_transport_mode is not None:
            pulumi.set(__self__, "is_transport_mode", is_transport_mode)
        if oracle_bgp_asn is not None:
            pulumi.set(__self__, "oracle_bgp_asn", oracle_bgp_asn)
        if provider_service_id is not None:
            pulumi.set(__self__, "provider_service_id", provider_service_id)
        if provider_service_key_name is not None:
            pulumi.set(__self__, "provider_service_key_name", provider_service_key_name)
        if provider_state is not None:
            pulumi.set(__self__, "provider_state", provider_state)
        if public_prefixes is not None:
            pulumi.set(__self__, "public_prefixes", public_prefixes)
        if reference_comment is not None:
            pulumi.set(__self__, "reference_comment", reference_comment)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if routing_policies is not None:
            pulumi.set(__self__, "routing_policies", routing_policies)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bandwidthShapeName")
    def bandwidth_shape_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bandwidth_shape_name")

    @bandwidth_shape_name.setter
    def bandwidth_shape_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_shape_name", value)

    @property
    @pulumi.getter(name="bgpAdminState")
    def bgp_admin_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bgp_admin_state")

    @bgp_admin_state.setter
    def bgp_admin_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_admin_state", value)

    @property
    @pulumi.getter(name="bgpIpv6sessionState")
    def bgp_ipv6session_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bgp_ipv6session_state")

    @bgp_ipv6session_state.setter
    def bgp_ipv6session_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_ipv6session_state", value)

    @property
    @pulumi.getter(name="bgpManagement")
    def bgp_management(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""The 'bgp_management' field has been deprecated. Please use the 'oci_core_fast_connect_provider_service' data source instead.""", DeprecationWarning)
        pulumi.log.warn("""bgp_management is deprecated: The 'bgp_management' field has been deprecated. Please use the 'oci_core_fast_connect_provider_service' data source instead.""")

        return pulumi.get(self, "bgp_management")

    @bgp_management.setter
    def bgp_management(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_management", value)

    @property
    @pulumi.getter(name="bgpSessionState")
    def bgp_session_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bgp_session_state")

    @bgp_session_state.setter
    def bgp_session_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_session_state", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="crossConnectMappings")
    def cross_connect_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualCircuitCrossConnectMappingArgs']]]]:
        return pulumi.get(self, "cross_connect_mappings")

    @cross_connect_mappings.setter
    def cross_connect_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualCircuitCrossConnectMappingArgs']]]]):
        pulumi.set(self, "cross_connect_mappings", value)

    @property
    @pulumi.getter(name="customerAsn")
    def customer_asn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customer_asn")

    @customer_asn.setter
    def customer_asn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_asn", value)

    @property
    @pulumi.getter(name="customerBgpAsn")
    def customer_bgp_asn(self) -> Optional[pulumi.Input[int]]:
        warnings.warn("""The 'customer_bgp_asn' field has been deprecated. Please use 'customer_asn' instead.""", DeprecationWarning)
        pulumi.log.warn("""customer_bgp_asn is deprecated: The 'customer_bgp_asn' field has been deprecated. Please use 'customer_asn' instead.""")

        return pulumi.get(self, "customer_bgp_asn")

    @customer_bgp_asn.setter
    def customer_bgp_asn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "customer_bgp_asn", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_mtu")

    @ip_mtu.setter
    def ip_mtu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_mtu", value)

    @property
    @pulumi.getter(name="isBfdEnabled")
    def is_bfd_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_bfd_enabled")

    @is_bfd_enabled.setter
    def is_bfd_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_bfd_enabled", value)

    @property
    @pulumi.getter(name="isTransportMode")
    def is_transport_mode(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_transport_mode")

    @is_transport_mode.setter
    def is_transport_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_transport_mode", value)

    @property
    @pulumi.getter(name="oracleBgpAsn")
    def oracle_bgp_asn(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "oracle_bgp_asn")

    @oracle_bgp_asn.setter
    def oracle_bgp_asn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oracle_bgp_asn", value)

    @property
    @pulumi.getter(name="providerServiceId")
    def provider_service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider_service_id")

    @provider_service_id.setter
    def provider_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_service_id", value)

    @property
    @pulumi.getter(name="providerServiceKeyName")
    def provider_service_key_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider_service_key_name")

    @provider_service_key_name.setter
    def provider_service_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_service_key_name", value)

    @property
    @pulumi.getter(name="providerState")
    def provider_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider_state")

    @provider_state.setter
    def provider_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_state", value)

    @property
    @pulumi.getter(name="publicPrefixes")
    def public_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualCircuitPublicPrefixArgs']]]]:
        return pulumi.get(self, "public_prefixes")

    @public_prefixes.setter
    def public_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualCircuitPublicPrefixArgs']]]]):
        pulumi.set(self, "public_prefixes", value)

    @property
    @pulumi.getter(name="referenceComment")
    def reference_comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reference_comment")

    @reference_comment.setter
    def reference_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_comment", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="routingPolicies")
    def routing_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "routing_policies")

    @routing_policies.setter
    def routing_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "routing_policies", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class VirtualCircuit(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth_shape_name: Optional[pulumi.Input[str]] = None,
                 bgp_admin_state: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 cross_connect_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VirtualCircuitCrossConnectMappingArgs']]]]] = None,
                 customer_asn: Optional[pulumi.Input[str]] = None,
                 customer_bgp_asn: Optional[pulumi.Input[int]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 ip_mtu: Optional[pulumi.Input[str]] = None,
                 is_bfd_enabled: Optional[pulumi.Input[bool]] = None,
                 is_transport_mode: Optional[pulumi.Input[bool]] = None,
                 provider_service_id: Optional[pulumi.Input[str]] = None,
                 provider_service_key_name: Optional[pulumi.Input[str]] = None,
                 public_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VirtualCircuitPublicPrefixArgs']]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 routing_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VirtualCircuit resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VirtualCircuitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VirtualCircuit resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VirtualCircuitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualCircuitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth_shape_name: Optional[pulumi.Input[str]] = None,
                 bgp_admin_state: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 cross_connect_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VirtualCircuitCrossConnectMappingArgs']]]]] = None,
                 customer_asn: Optional[pulumi.Input[str]] = None,
                 customer_bgp_asn: Optional[pulumi.Input[int]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 ip_mtu: Optional[pulumi.Input[str]] = None,
                 is_bfd_enabled: Optional[pulumi.Input[bool]] = None,
                 is_transport_mode: Optional[pulumi.Input[bool]] = None,
                 provider_service_id: Optional[pulumi.Input[str]] = None,
                 provider_service_key_name: Optional[pulumi.Input[str]] = None,
                 public_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VirtualCircuitPublicPrefixArgs']]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 routing_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualCircuitArgs.__new__(VirtualCircuitArgs)

            __props__.__dict__["bandwidth_shape_name"] = bandwidth_shape_name
            __props__.__dict__["bgp_admin_state"] = bgp_admin_state
            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["cross_connect_mappings"] = cross_connect_mappings
            __props__.__dict__["customer_asn"] = customer_asn
            __props__.__dict__["customer_bgp_asn"] = customer_bgp_asn
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["ip_mtu"] = ip_mtu
            __props__.__dict__["is_bfd_enabled"] = is_bfd_enabled
            __props__.__dict__["is_transport_mode"] = is_transport_mode
            __props__.__dict__["provider_service_id"] = provider_service_id
            __props__.__dict__["provider_service_key_name"] = provider_service_key_name
            __props__.__dict__["public_prefixes"] = public_prefixes
            __props__.__dict__["region"] = region
            __props__.__dict__["routing_policies"] = routing_policies
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["bgp_ipv6session_state"] = None
            __props__.__dict__["bgp_management"] = None
            __props__.__dict__["bgp_session_state"] = None
            __props__.__dict__["oracle_bgp_asn"] = None
            __props__.__dict__["provider_state"] = None
            __props__.__dict__["reference_comment"] = None
            __props__.__dict__["service_type"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
        super(VirtualCircuit, __self__).__init__(
            'oci:Core/virtualCircuit:VirtualCircuit',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bandwidth_shape_name: Optional[pulumi.Input[str]] = None,
            bgp_admin_state: Optional[pulumi.Input[str]] = None,
            bgp_ipv6session_state: Optional[pulumi.Input[str]] = None,
            bgp_management: Optional[pulumi.Input[str]] = None,
            bgp_session_state: Optional[pulumi.Input[str]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            cross_connect_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VirtualCircuitCrossConnectMappingArgs']]]]] = None,
            customer_asn: Optional[pulumi.Input[str]] = None,
            customer_bgp_asn: Optional[pulumi.Input[int]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            gateway_id: Optional[pulumi.Input[str]] = None,
            ip_mtu: Optional[pulumi.Input[str]] = None,
            is_bfd_enabled: Optional[pulumi.Input[bool]] = None,
            is_transport_mode: Optional[pulumi.Input[bool]] = None,
            oracle_bgp_asn: Optional[pulumi.Input[int]] = None,
            provider_service_id: Optional[pulumi.Input[str]] = None,
            provider_service_key_name: Optional[pulumi.Input[str]] = None,
            provider_state: Optional[pulumi.Input[str]] = None,
            public_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VirtualCircuitPublicPrefixArgs']]]]] = None,
            reference_comment: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            routing_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            service_type: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'VirtualCircuit':
        """
        Get an existing VirtualCircuit resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VirtualCircuitState.__new__(_VirtualCircuitState)

        __props__.__dict__["bandwidth_shape_name"] = bandwidth_shape_name
        __props__.__dict__["bgp_admin_state"] = bgp_admin_state
        __props__.__dict__["bgp_ipv6session_state"] = bgp_ipv6session_state
        __props__.__dict__["bgp_management"] = bgp_management
        __props__.__dict__["bgp_session_state"] = bgp_session_state
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["cross_connect_mappings"] = cross_connect_mappings
        __props__.__dict__["customer_asn"] = customer_asn
        __props__.__dict__["customer_bgp_asn"] = customer_bgp_asn
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["ip_mtu"] = ip_mtu
        __props__.__dict__["is_bfd_enabled"] = is_bfd_enabled
        __props__.__dict__["is_transport_mode"] = is_transport_mode
        __props__.__dict__["oracle_bgp_asn"] = oracle_bgp_asn
        __props__.__dict__["provider_service_id"] = provider_service_id
        __props__.__dict__["provider_service_key_name"] = provider_service_key_name
        __props__.__dict__["provider_state"] = provider_state
        __props__.__dict__["public_prefixes"] = public_prefixes
        __props__.__dict__["reference_comment"] = reference_comment
        __props__.__dict__["region"] = region
        __props__.__dict__["routing_policies"] = routing_policies
        __props__.__dict__["service_type"] = service_type
        __props__.__dict__["state"] = state
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["type"] = type
        return VirtualCircuit(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bandwidthShapeName")
    def bandwidth_shape_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "bandwidth_shape_name")

    @property
    @pulumi.getter(name="bgpAdminState")
    def bgp_admin_state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "bgp_admin_state")

    @property
    @pulumi.getter(name="bgpIpv6sessionState")
    def bgp_ipv6session_state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "bgp_ipv6session_state")

    @property
    @pulumi.getter(name="bgpManagement")
    def bgp_management(self) -> pulumi.Output[Optional[str]]:
        warnings.warn("""The 'bgp_management' field has been deprecated. Please use the 'oci_core_fast_connect_provider_service' data source instead.""", DeprecationWarning)
        pulumi.log.warn("""bgp_management is deprecated: The 'bgp_management' field has been deprecated. Please use the 'oci_core_fast_connect_provider_service' data source instead.""")

        return pulumi.get(self, "bgp_management")

    @property
    @pulumi.getter(name="bgpSessionState")
    def bgp_session_state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "bgp_session_state")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="crossConnectMappings")
    def cross_connect_mappings(self) -> pulumi.Output[Optional[Sequence['outputs.VirtualCircuitCrossConnectMapping']]]:
        return pulumi.get(self, "cross_connect_mappings")

    @property
    @pulumi.getter(name="customerAsn")
    def customer_asn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "customer_asn")

    @property
    @pulumi.getter(name="customerBgpAsn")
    def customer_bgp_asn(self) -> pulumi.Output[Optional[int]]:
        warnings.warn("""The 'customer_bgp_asn' field has been deprecated. Please use 'customer_asn' instead.""", DeprecationWarning)
        pulumi.log.warn("""customer_bgp_asn is deprecated: The 'customer_bgp_asn' field has been deprecated. Please use 'customer_asn' instead.""")

        return pulumi.get(self, "customer_bgp_asn")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ip_mtu")

    @property
    @pulumi.getter(name="isBfdEnabled")
    def is_bfd_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_bfd_enabled")

    @property
    @pulumi.getter(name="isTransportMode")
    def is_transport_mode(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_transport_mode")

    @property
    @pulumi.getter(name="oracleBgpAsn")
    def oracle_bgp_asn(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "oracle_bgp_asn")

    @property
    @pulumi.getter(name="providerServiceId")
    def provider_service_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "provider_service_id")

    @property
    @pulumi.getter(name="providerServiceKeyName")
    def provider_service_key_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "provider_service_key_name")

    @property
    @pulumi.getter(name="providerState")
    def provider_state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "provider_state")

    @property
    @pulumi.getter(name="publicPrefixes")
    def public_prefixes(self) -> pulumi.Output[Optional[Sequence['outputs.VirtualCircuitPublicPrefix']]]:
        return pulumi.get(self, "public_prefixes")

    @property
    @pulumi.getter(name="referenceComment")
    def reference_comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "reference_comment")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="routingPolicies")
    def routing_policies(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "routing_policies")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

