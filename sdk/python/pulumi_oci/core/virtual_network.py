# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VirtualNetworkArgs', 'VirtualNetwork']

@pulumi.input_type
class VirtualNetworkArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 byoipv6cidr_details: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkByoipv6cidrDetailArgs']]]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dns_label: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 ipv6private_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_ipv6enabled: Optional[pulumi.Input[bool]] = None,
                 is_oracle_gua_allocation_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a VirtualNetwork resource.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        if byoipv6cidr_details is not None:
            pulumi.set(__self__, "byoipv6cidr_details", byoipv6cidr_details)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if cidr_blocks is not None:
            pulumi.set(__self__, "cidr_blocks", cidr_blocks)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dns_label is not None:
            pulumi.set(__self__, "dns_label", dns_label)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if ipv6private_cidr_blocks is not None:
            pulumi.set(__self__, "ipv6private_cidr_blocks", ipv6private_cidr_blocks)
        if is_ipv6enabled is not None:
            pulumi.set(__self__, "is_ipv6enabled", is_ipv6enabled)
        if is_oracle_gua_allocation_enabled is not None:
            pulumi.set(__self__, "is_oracle_gua_allocation_enabled", is_oracle_gua_allocation_enabled)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="byoipv6cidrDetails")
    def byoipv6cidr_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkByoipv6cidrDetailArgs']]]]:
        return pulumi.get(self, "byoipv6cidr_details")

    @byoipv6cidr_details.setter
    def byoipv6cidr_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkByoipv6cidrDetailArgs']]]]):
        pulumi.set(self, "byoipv6cidr_details", value)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cidr_blocks")

    @cidr_blocks.setter
    def cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cidr_blocks", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="dnsLabel")
    def dns_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_label")

    @dns_label.setter
    def dns_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_label", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="ipv6privateCidrBlocks")
    def ipv6private_cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ipv6private_cidr_blocks")

    @ipv6private_cidr_blocks.setter
    def ipv6private_cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ipv6private_cidr_blocks", value)

    @property
    @pulumi.getter(name="isIpv6enabled")
    def is_ipv6enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_ipv6enabled")

    @is_ipv6enabled.setter
    def is_ipv6enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ipv6enabled", value)

    @property
    @pulumi.getter(name="isOracleGuaAllocationEnabled")
    def is_oracle_gua_allocation_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_oracle_gua_allocation_enabled")

    @is_oracle_gua_allocation_enabled.setter
    def is_oracle_gua_allocation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_oracle_gua_allocation_enabled", value)


@pulumi.input_type
class _VirtualNetworkState:
    def __init__(__self__, *,
                 byoipv6cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 byoipv6cidr_details: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkByoipv6cidrDetailArgs']]]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 default_dhcp_options_id: Optional[pulumi.Input[str]] = None,
                 default_route_table_id: Optional[pulumi.Input[str]] = None,
                 default_security_list_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dns_label: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 ipv6cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv6private_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_ipv6enabled: Optional[pulumi.Input[bool]] = None,
                 is_oracle_gua_allocation_enabled: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 vcn_domain_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VirtualNetwork resources.
        """
        if byoipv6cidr_blocks is not None:
            pulumi.set(__self__, "byoipv6cidr_blocks", byoipv6cidr_blocks)
        if byoipv6cidr_details is not None:
            pulumi.set(__self__, "byoipv6cidr_details", byoipv6cidr_details)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if cidr_blocks is not None:
            pulumi.set(__self__, "cidr_blocks", cidr_blocks)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if default_dhcp_options_id is not None:
            pulumi.set(__self__, "default_dhcp_options_id", default_dhcp_options_id)
        if default_route_table_id is not None:
            pulumi.set(__self__, "default_route_table_id", default_route_table_id)
        if default_security_list_id is not None:
            pulumi.set(__self__, "default_security_list_id", default_security_list_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dns_label is not None:
            pulumi.set(__self__, "dns_label", dns_label)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if ipv6cidr_blocks is not None:
            pulumi.set(__self__, "ipv6cidr_blocks", ipv6cidr_blocks)
        if ipv6private_cidr_blocks is not None:
            pulumi.set(__self__, "ipv6private_cidr_blocks", ipv6private_cidr_blocks)
        if is_ipv6enabled is not None:
            pulumi.set(__self__, "is_ipv6enabled", is_ipv6enabled)
        if is_oracle_gua_allocation_enabled is not None:
            pulumi.set(__self__, "is_oracle_gua_allocation_enabled", is_oracle_gua_allocation_enabled)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_domain_name is not None:
            pulumi.set(__self__, "vcn_domain_name", vcn_domain_name)

    @property
    @pulumi.getter(name="byoipv6cidrBlocks")
    def byoipv6cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "byoipv6cidr_blocks")

    @byoipv6cidr_blocks.setter
    def byoipv6cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "byoipv6cidr_blocks", value)

    @property
    @pulumi.getter(name="byoipv6cidrDetails")
    def byoipv6cidr_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkByoipv6cidrDetailArgs']]]]:
        return pulumi.get(self, "byoipv6cidr_details")

    @byoipv6cidr_details.setter
    def byoipv6cidr_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkByoipv6cidrDetailArgs']]]]):
        pulumi.set(self, "byoipv6cidr_details", value)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cidr_blocks")

    @cidr_blocks.setter
    def cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cidr_blocks", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="defaultDhcpOptionsId")
    def default_dhcp_options_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_dhcp_options_id")

    @default_dhcp_options_id.setter
    def default_dhcp_options_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_dhcp_options_id", value)

    @property
    @pulumi.getter(name="defaultRouteTableId")
    def default_route_table_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_route_table_id")

    @default_route_table_id.setter
    def default_route_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_route_table_id", value)

    @property
    @pulumi.getter(name="defaultSecurityListId")
    def default_security_list_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_security_list_id")

    @default_security_list_id.setter
    def default_security_list_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_security_list_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="dnsLabel")
    def dns_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_label")

    @dns_label.setter
    def dns_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_label", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="ipv6cidrBlocks")
    def ipv6cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ipv6cidr_blocks")

    @ipv6cidr_blocks.setter
    def ipv6cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ipv6cidr_blocks", value)

    @property
    @pulumi.getter(name="ipv6privateCidrBlocks")
    def ipv6private_cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ipv6private_cidr_blocks")

    @ipv6private_cidr_blocks.setter
    def ipv6private_cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ipv6private_cidr_blocks", value)

    @property
    @pulumi.getter(name="isIpv6enabled")
    def is_ipv6enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_ipv6enabled")

    @is_ipv6enabled.setter
    def is_ipv6enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ipv6enabled", value)

    @property
    @pulumi.getter(name="isOracleGuaAllocationEnabled")
    def is_oracle_gua_allocation_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_oracle_gua_allocation_enabled")

    @is_oracle_gua_allocation_enabled.setter
    def is_oracle_gua_allocation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_oracle_gua_allocation_enabled", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="vcnDomainName")
    def vcn_domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vcn_domain_name")

    @vcn_domain_name.setter
    def vcn_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcn_domain_name", value)


class VirtualNetwork(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 byoipv6cidr_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VirtualNetworkByoipv6cidrDetailArgs']]]]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dns_label: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 ipv6private_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_ipv6enabled: Optional[pulumi.Input[bool]] = None,
                 is_oracle_gua_allocation_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a VirtualNetwork resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VirtualNetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VirtualNetwork resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VirtualNetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualNetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 byoipv6cidr_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VirtualNetworkByoipv6cidrDetailArgs']]]]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dns_label: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 ipv6private_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_ipv6enabled: Optional[pulumi.Input[bool]] = None,
                 is_oracle_gua_allocation_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualNetworkArgs.__new__(VirtualNetworkArgs)

            __props__.__dict__["byoipv6cidr_details"] = byoipv6cidr_details
            __props__.__dict__["cidr_block"] = cidr_block
            __props__.__dict__["cidr_blocks"] = cidr_blocks
            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["dns_label"] = dns_label
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["ipv6private_cidr_blocks"] = ipv6private_cidr_blocks
            __props__.__dict__["is_ipv6enabled"] = is_ipv6enabled
            __props__.__dict__["is_oracle_gua_allocation_enabled"] = is_oracle_gua_allocation_enabled
            __props__.__dict__["byoipv6cidr_blocks"] = None
            __props__.__dict__["default_dhcp_options_id"] = None
            __props__.__dict__["default_route_table_id"] = None
            __props__.__dict__["default_security_list_id"] = None
            __props__.__dict__["ipv6cidr_blocks"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["vcn_domain_name"] = None
        super(VirtualNetwork, __self__).__init__(
            'oci:Core/virtualNetwork:VirtualNetwork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            byoipv6cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            byoipv6cidr_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VirtualNetworkByoipv6cidrDetailArgs']]]]] = None,
            cidr_block: Optional[pulumi.Input[str]] = None,
            cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            default_dhcp_options_id: Optional[pulumi.Input[str]] = None,
            default_route_table_id: Optional[pulumi.Input[str]] = None,
            default_security_list_id: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            dns_label: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            ipv6cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ipv6private_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            is_ipv6enabled: Optional[pulumi.Input[bool]] = None,
            is_oracle_gua_allocation_enabled: Optional[pulumi.Input[bool]] = None,
            state: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            vcn_domain_name: Optional[pulumi.Input[str]] = None) -> 'VirtualNetwork':
        """
        Get an existing VirtualNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VirtualNetworkState.__new__(_VirtualNetworkState)

        __props__.__dict__["byoipv6cidr_blocks"] = byoipv6cidr_blocks
        __props__.__dict__["byoipv6cidr_details"] = byoipv6cidr_details
        __props__.__dict__["cidr_block"] = cidr_block
        __props__.__dict__["cidr_blocks"] = cidr_blocks
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["default_dhcp_options_id"] = default_dhcp_options_id
        __props__.__dict__["default_route_table_id"] = default_route_table_id
        __props__.__dict__["default_security_list_id"] = default_security_list_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["dns_label"] = dns_label
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["ipv6cidr_blocks"] = ipv6cidr_blocks
        __props__.__dict__["ipv6private_cidr_blocks"] = ipv6private_cidr_blocks
        __props__.__dict__["is_ipv6enabled"] = is_ipv6enabled
        __props__.__dict__["is_oracle_gua_allocation_enabled"] = is_oracle_gua_allocation_enabled
        __props__.__dict__["state"] = state
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["vcn_domain_name"] = vcn_domain_name
        return VirtualNetwork(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="byoipv6cidrBlocks")
    def byoipv6cidr_blocks(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "byoipv6cidr_blocks")

    @property
    @pulumi.getter(name="byoipv6cidrDetails")
    def byoipv6cidr_details(self) -> pulumi.Output[Sequence['outputs.VirtualNetworkByoipv6cidrDetail']]:
        return pulumi.get(self, "byoipv6cidr_details")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "cidr_blocks")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="defaultDhcpOptionsId")
    def default_dhcp_options_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_dhcp_options_id")

    @property
    @pulumi.getter(name="defaultRouteTableId")
    def default_route_table_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_route_table_id")

    @property
    @pulumi.getter(name="defaultSecurityListId")
    def default_security_list_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_security_list_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsLabel")
    def dns_label(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_label")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="ipv6cidrBlocks")
    def ipv6cidr_blocks(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "ipv6cidr_blocks")

    @property
    @pulumi.getter(name="ipv6privateCidrBlocks")
    def ipv6private_cidr_blocks(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "ipv6private_cidr_blocks")

    @property
    @pulumi.getter(name="isIpv6enabled")
    def is_ipv6enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_ipv6enabled")

    @property
    @pulumi.getter(name="isOracleGuaAllocationEnabled")
    def is_oracle_gua_allocation_enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_oracle_gua_allocation_enabled")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnDomainName")
    def vcn_domain_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vcn_domain_name")

