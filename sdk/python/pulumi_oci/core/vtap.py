# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['VtapArgs', 'Vtap']

@pulumi.input_type
class VtapArgs:
    def __init__(__self__, *,
                 capture_filter_id: pulumi.Input[str],
                 compartment_id: pulumi.Input[str],
                 source_id: pulumi.Input[str],
                 vcn_id: pulumi.Input[str],
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encapsulation_protocol: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_vtap_enabled: Optional[pulumi.Input[bool]] = None,
                 max_packet_size: Optional[pulumi.Input[int]] = None,
                 source_private_endpoint_ip: Optional[pulumi.Input[str]] = None,
                 source_private_endpoint_subnet_id: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 target_ip: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 traffic_mode: Optional[pulumi.Input[str]] = None,
                 vxlan_network_identifier: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Vtap resource.
        """
        pulumi.set(__self__, "capture_filter_id", capture_filter_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "vcn_id", vcn_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if encapsulation_protocol is not None:
            pulumi.set(__self__, "encapsulation_protocol", encapsulation_protocol)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_vtap_enabled is not None:
            pulumi.set(__self__, "is_vtap_enabled", is_vtap_enabled)
        if max_packet_size is not None:
            pulumi.set(__self__, "max_packet_size", max_packet_size)
        if source_private_endpoint_ip is not None:
            pulumi.set(__self__, "source_private_endpoint_ip", source_private_endpoint_ip)
        if source_private_endpoint_subnet_id is not None:
            pulumi.set(__self__, "source_private_endpoint_subnet_id", source_private_endpoint_subnet_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_ip is not None:
            pulumi.set(__self__, "target_ip", target_ip)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if traffic_mode is not None:
            pulumi.set(__self__, "traffic_mode", traffic_mode)
        if vxlan_network_identifier is not None:
            pulumi.set(__self__, "vxlan_network_identifier", vxlan_network_identifier)

    @property
    @pulumi.getter(name="captureFilterId")
    def capture_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "capture_filter_id")

    @capture_filter_id.setter
    def capture_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "capture_filter_id", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vcn_id")

    @vcn_id.setter
    def vcn_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vcn_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="encapsulationProtocol")
    def encapsulation_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encapsulation_protocol")

    @encapsulation_protocol.setter
    def encapsulation_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encapsulation_protocol", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isVtapEnabled")
    def is_vtap_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_vtap_enabled")

    @is_vtap_enabled.setter
    def is_vtap_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_vtap_enabled", value)

    @property
    @pulumi.getter(name="maxPacketSize")
    def max_packet_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_packet_size")

    @max_packet_size.setter
    def max_packet_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_packet_size", value)

    @property
    @pulumi.getter(name="sourcePrivateEndpointIp")
    def source_private_endpoint_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_private_endpoint_ip")

    @source_private_endpoint_ip.setter
    def source_private_endpoint_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_private_endpoint_ip", value)

    @property
    @pulumi.getter(name="sourcePrivateEndpointSubnetId")
    def source_private_endpoint_subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_private_endpoint_subnet_id")

    @source_private_endpoint_subnet_id.setter
    def source_private_endpoint_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_private_endpoint_subnet_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_id", value)

    @property
    @pulumi.getter(name="targetIp")
    def target_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_ip")

    @target_ip.setter
    def target_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_ip", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter(name="trafficMode")
    def traffic_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "traffic_mode")

    @traffic_mode.setter
    def traffic_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_mode", value)

    @property
    @pulumi.getter(name="vxlanNetworkIdentifier")
    def vxlan_network_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vxlan_network_identifier")

    @vxlan_network_identifier.setter
    def vxlan_network_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vxlan_network_identifier", value)


@pulumi.input_type
class _VtapState:
    def __init__(__self__, *,
                 capture_filter_id: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encapsulation_protocol: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_vtap_enabled: Optional[pulumi.Input[bool]] = None,
                 lifecycle_state_details: Optional[pulumi.Input[str]] = None,
                 max_packet_size: Optional[pulumi.Input[int]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 source_private_endpoint_ip: Optional[pulumi.Input[str]] = None,
                 source_private_endpoint_subnet_id: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 target_ip: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 traffic_mode: Optional[pulumi.Input[str]] = None,
                 vcn_id: Optional[pulumi.Input[str]] = None,
                 vxlan_network_identifier: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Vtap resources.
        """
        if capture_filter_id is not None:
            pulumi.set(__self__, "capture_filter_id", capture_filter_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if encapsulation_protocol is not None:
            pulumi.set(__self__, "encapsulation_protocol", encapsulation_protocol)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_vtap_enabled is not None:
            pulumi.set(__self__, "is_vtap_enabled", is_vtap_enabled)
        if lifecycle_state_details is not None:
            pulumi.set(__self__, "lifecycle_state_details", lifecycle_state_details)
        if max_packet_size is not None:
            pulumi.set(__self__, "max_packet_size", max_packet_size)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_private_endpoint_ip is not None:
            pulumi.set(__self__, "source_private_endpoint_ip", source_private_endpoint_ip)
        if source_private_endpoint_subnet_id is not None:
            pulumi.set(__self__, "source_private_endpoint_subnet_id", source_private_endpoint_subnet_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_ip is not None:
            pulumi.set(__self__, "target_ip", target_ip)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if traffic_mode is not None:
            pulumi.set(__self__, "traffic_mode", traffic_mode)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)
        if vxlan_network_identifier is not None:
            pulumi.set(__self__, "vxlan_network_identifier", vxlan_network_identifier)

    @property
    @pulumi.getter(name="captureFilterId")
    def capture_filter_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capture_filter_id")

    @capture_filter_id.setter
    def capture_filter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capture_filter_id", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="encapsulationProtocol")
    def encapsulation_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encapsulation_protocol")

    @encapsulation_protocol.setter
    def encapsulation_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encapsulation_protocol", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isVtapEnabled")
    def is_vtap_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_vtap_enabled")

    @is_vtap_enabled.setter
    def is_vtap_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_vtap_enabled", value)

    @property
    @pulumi.getter(name="lifecycleStateDetails")
    def lifecycle_state_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_state_details")

    @lifecycle_state_details.setter
    def lifecycle_state_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_state_details", value)

    @property
    @pulumi.getter(name="maxPacketSize")
    def max_packet_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_packet_size")

    @max_packet_size.setter
    def max_packet_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_packet_size", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourcePrivateEndpointIp")
    def source_private_endpoint_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_private_endpoint_ip")

    @source_private_endpoint_ip.setter
    def source_private_endpoint_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_private_endpoint_ip", value)

    @property
    @pulumi.getter(name="sourcePrivateEndpointSubnetId")
    def source_private_endpoint_subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_private_endpoint_subnet_id")

    @source_private_endpoint_subnet_id.setter
    def source_private_endpoint_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_private_endpoint_subnet_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_id", value)

    @property
    @pulumi.getter(name="targetIp")
    def target_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_ip")

    @target_ip.setter
    def target_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_ip", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="trafficMode")
    def traffic_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "traffic_mode")

    @traffic_mode.setter
    def traffic_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_mode", value)

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vcn_id")

    @vcn_id.setter
    def vcn_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcn_id", value)

    @property
    @pulumi.getter(name="vxlanNetworkIdentifier")
    def vxlan_network_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vxlan_network_identifier")

    @vxlan_network_identifier.setter
    def vxlan_network_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vxlan_network_identifier", value)


class Vtap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capture_filter_id: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encapsulation_protocol: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_vtap_enabled: Optional[pulumi.Input[bool]] = None,
                 max_packet_size: Optional[pulumi.Input[int]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 source_private_endpoint_ip: Optional[pulumi.Input[str]] = None,
                 source_private_endpoint_subnet_id: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 target_ip: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 traffic_mode: Optional[pulumi.Input[str]] = None,
                 vcn_id: Optional[pulumi.Input[str]] = None,
                 vxlan_network_identifier: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Vtap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VtapArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Vtap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VtapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VtapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capture_filter_id: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encapsulation_protocol: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_vtap_enabled: Optional[pulumi.Input[bool]] = None,
                 max_packet_size: Optional[pulumi.Input[int]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 source_private_endpoint_ip: Optional[pulumi.Input[str]] = None,
                 source_private_endpoint_subnet_id: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 target_ip: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 traffic_mode: Optional[pulumi.Input[str]] = None,
                 vcn_id: Optional[pulumi.Input[str]] = None,
                 vxlan_network_identifier: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VtapArgs.__new__(VtapArgs)

            if capture_filter_id is None and not opts.urn:
                raise TypeError("Missing required property 'capture_filter_id'")
            __props__.__dict__["capture_filter_id"] = capture_filter_id
            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["encapsulation_protocol"] = encapsulation_protocol
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["is_vtap_enabled"] = is_vtap_enabled
            __props__.__dict__["max_packet_size"] = max_packet_size
            if source_id is None and not opts.urn:
                raise TypeError("Missing required property 'source_id'")
            __props__.__dict__["source_id"] = source_id
            __props__.__dict__["source_private_endpoint_ip"] = source_private_endpoint_ip
            __props__.__dict__["source_private_endpoint_subnet_id"] = source_private_endpoint_subnet_id
            __props__.__dict__["source_type"] = source_type
            __props__.__dict__["target_id"] = target_id
            __props__.__dict__["target_ip"] = target_ip
            __props__.__dict__["target_type"] = target_type
            __props__.__dict__["traffic_mode"] = traffic_mode
            if vcn_id is None and not opts.urn:
                raise TypeError("Missing required property 'vcn_id'")
            __props__.__dict__["vcn_id"] = vcn_id
            __props__.__dict__["vxlan_network_identifier"] = vxlan_network_identifier
            __props__.__dict__["lifecycle_state_details"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
        super(Vtap, __self__).__init__(
            'oci:Core/vtap:Vtap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            capture_filter_id: Optional[pulumi.Input[str]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            encapsulation_protocol: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            is_vtap_enabled: Optional[pulumi.Input[bool]] = None,
            lifecycle_state_details: Optional[pulumi.Input[str]] = None,
            max_packet_size: Optional[pulumi.Input[int]] = None,
            source_id: Optional[pulumi.Input[str]] = None,
            source_private_endpoint_ip: Optional[pulumi.Input[str]] = None,
            source_private_endpoint_subnet_id: Optional[pulumi.Input[str]] = None,
            source_type: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            target_id: Optional[pulumi.Input[str]] = None,
            target_ip: Optional[pulumi.Input[str]] = None,
            target_type: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            traffic_mode: Optional[pulumi.Input[str]] = None,
            vcn_id: Optional[pulumi.Input[str]] = None,
            vxlan_network_identifier: Optional[pulumi.Input[str]] = None) -> 'Vtap':
        """
        Get an existing Vtap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VtapState.__new__(_VtapState)

        __props__.__dict__["capture_filter_id"] = capture_filter_id
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["encapsulation_protocol"] = encapsulation_protocol
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["is_vtap_enabled"] = is_vtap_enabled
        __props__.__dict__["lifecycle_state_details"] = lifecycle_state_details
        __props__.__dict__["max_packet_size"] = max_packet_size
        __props__.__dict__["source_id"] = source_id
        __props__.__dict__["source_private_endpoint_ip"] = source_private_endpoint_ip
        __props__.__dict__["source_private_endpoint_subnet_id"] = source_private_endpoint_subnet_id
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["state"] = state
        __props__.__dict__["target_id"] = target_id
        __props__.__dict__["target_ip"] = target_ip
        __props__.__dict__["target_type"] = target_type
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["traffic_mode"] = traffic_mode
        __props__.__dict__["vcn_id"] = vcn_id
        __props__.__dict__["vxlan_network_identifier"] = vxlan_network_identifier
        return Vtap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="captureFilterId")
    def capture_filter_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "capture_filter_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encapsulationProtocol")
    def encapsulation_protocol(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "encapsulation_protocol")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isVtapEnabled")
    def is_vtap_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_vtap_enabled")

    @property
    @pulumi.getter(name="lifecycleStateDetails")
    def lifecycle_state_details(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "lifecycle_state_details")

    @property
    @pulumi.getter(name="maxPacketSize")
    def max_packet_size(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "max_packet_size")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourcePrivateEndpointIp")
    def source_private_endpoint_ip(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "source_private_endpoint_ip")

    @property
    @pulumi.getter(name="sourcePrivateEndpointSubnetId")
    def source_private_endpoint_subnet_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "source_private_endpoint_subnet_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetIp")
    def target_ip(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "target_ip")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="trafficMode")
    def traffic_mode(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "traffic_mode")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vcn_id")

    @property
    @pulumi.getter(name="vxlanNetworkIdentifier")
    def vxlan_network_identifier(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vxlan_network_identifier")

