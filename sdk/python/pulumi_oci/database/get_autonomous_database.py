# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAutonomousDatabaseResult',
    'AwaitableGetAutonomousDatabaseResult',
    'get_autonomous_database',
    'get_autonomous_database_output',
]

@pulumi.output_type
class GetAutonomousDatabaseResult:
    """
    A collection of values returned by getAutonomousDatabase.
    """
    def __init__(__self__, actual_used_data_storage_size_in_tbs=None, admin_password=None, allocated_storage_size_in_tbs=None, apex_details=None, are_primary_whitelisted_ips_used=None, autonomous_container_database_id=None, autonomous_database_backup_id=None, autonomous_database_id=None, autonomous_maintenance_schedule_type=None, available_upgrade_versions=None, backup_configs=None, backup_retention_period_in_days=None, character_set=None, clone_type=None, compartment_id=None, compute_count=None, compute_model=None, connection_strings=None, connection_urls=None, cpu_core_count=None, customer_contacts=None, data_safe_status=None, data_storage_size_in_gb=None, data_storage_size_in_tbs=None, database_edition=None, database_management_status=None, dataguard_region_type=None, db_name=None, db_version=None, db_workload=None, defined_tags=None, disaster_recovery_region_type=None, display_name=None, failed_data_recovery_in_seconds=None, freeform_tags=None, id=None, in_memory_area_in_gbs=None, in_memory_percentage=None, infrastructure_type=None, is_access_control_enabled=None, is_auto_scaling_enabled=None, is_auto_scaling_for_storage_enabled=None, is_data_guard_enabled=None, is_dedicated=None, is_free_tier=None, is_local_data_guard_enabled=None, is_mtls_connection_required=None, is_preview=None, is_preview_version_with_service_terms_accepted=None, is_reconnect_clone_enabled=None, is_refreshable_clone=None, is_remote_data_guard_enabled=None, is_shrink_only=None, key_history_entries=None, key_store_id=None, key_store_wallet_name=None, kms_key_id=None, kms_key_lifecycle_details=None, kms_key_version_id=None, license_model=None, lifecycle_details=None, local_adg_auto_failover_max_data_loss_limit=None, local_disaster_recovery_type=None, local_standby_dbs=None, long_term_backup_schedules=None, max_cpu_core_count=None, memory_per_oracle_compute_unit_in_gbs=None, ncharacter_set=None, next_long_term_backup_time_stamp=None, nsg_ids=None, ocpu_count=None, open_mode=None, operations_insights_status=None, peer_db_ids=None, permission_level=None, private_endpoint=None, private_endpoint_ip=None, private_endpoint_label=None, provisionable_cpuses=None, refreshable_mode=None, refreshable_status=None, remote_disaster_recovery_configurations=None, remote_disaster_recovery_type=None, resource_pool_leader_id=None, resource_pool_summaries=None, role=None, rotate_key_trigger=None, scheduled_operations=None, secret_id=None, secret_version_number=None, service_console_url=None, source=None, source_id=None, standby_dbs=None, standby_whitelisted_ips=None, state=None, subnet_id=None, supported_regions_to_clone_tos=None, switchover_to=None, switchover_to_remote_peer_id=None, system_tags=None, time_created=None, time_data_guard_role_changed=None, time_deletion_of_free_autonomous_database=None, time_disaster_recovery_role_changed=None, time_local_data_guard_enabled=None, time_maintenance_begin=None, time_maintenance_end=None, time_of_joining_resource_pool=None, time_of_last_failover=None, time_of_last_refresh=None, time_of_last_refresh_point=None, time_of_last_switchover=None, time_of_next_refresh=None, time_reclamation_of_free_autonomous_database=None, time_until_reconnect_clone_enabled=None, timestamp=None, total_backup_storage_size_in_gbs=None, use_latest_available_backup_time_stamp=None, used_data_storage_size_in_gbs=None, used_data_storage_size_in_tbs=None, vault_id=None, whitelisted_ips=None):
        if actual_used_data_storage_size_in_tbs and not isinstance(actual_used_data_storage_size_in_tbs, float):
            raise TypeError("Expected argument 'actual_used_data_storage_size_in_tbs' to be a float")
        pulumi.set(__self__, "actual_used_data_storage_size_in_tbs", actual_used_data_storage_size_in_tbs)
        if admin_password and not isinstance(admin_password, str):
            raise TypeError("Expected argument 'admin_password' to be a str")
        pulumi.set(__self__, "admin_password", admin_password)
        if allocated_storage_size_in_tbs and not isinstance(allocated_storage_size_in_tbs, float):
            raise TypeError("Expected argument 'allocated_storage_size_in_tbs' to be a float")
        pulumi.set(__self__, "allocated_storage_size_in_tbs", allocated_storage_size_in_tbs)
        if apex_details and not isinstance(apex_details, list):
            raise TypeError("Expected argument 'apex_details' to be a list")
        pulumi.set(__self__, "apex_details", apex_details)
        if are_primary_whitelisted_ips_used and not isinstance(are_primary_whitelisted_ips_used, bool):
            raise TypeError("Expected argument 'are_primary_whitelisted_ips_used' to be a bool")
        pulumi.set(__self__, "are_primary_whitelisted_ips_used", are_primary_whitelisted_ips_used)
        if autonomous_container_database_id and not isinstance(autonomous_container_database_id, str):
            raise TypeError("Expected argument 'autonomous_container_database_id' to be a str")
        pulumi.set(__self__, "autonomous_container_database_id", autonomous_container_database_id)
        if autonomous_database_backup_id and not isinstance(autonomous_database_backup_id, str):
            raise TypeError("Expected argument 'autonomous_database_backup_id' to be a str")
        pulumi.set(__self__, "autonomous_database_backup_id", autonomous_database_backup_id)
        if autonomous_database_id and not isinstance(autonomous_database_id, str):
            raise TypeError("Expected argument 'autonomous_database_id' to be a str")
        pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        if autonomous_maintenance_schedule_type and not isinstance(autonomous_maintenance_schedule_type, str):
            raise TypeError("Expected argument 'autonomous_maintenance_schedule_type' to be a str")
        pulumi.set(__self__, "autonomous_maintenance_schedule_type", autonomous_maintenance_schedule_type)
        if available_upgrade_versions and not isinstance(available_upgrade_versions, list):
            raise TypeError("Expected argument 'available_upgrade_versions' to be a list")
        pulumi.set(__self__, "available_upgrade_versions", available_upgrade_versions)
        if backup_configs and not isinstance(backup_configs, list):
            raise TypeError("Expected argument 'backup_configs' to be a list")
        pulumi.set(__self__, "backup_configs", backup_configs)
        if backup_retention_period_in_days and not isinstance(backup_retention_period_in_days, int):
            raise TypeError("Expected argument 'backup_retention_period_in_days' to be a int")
        pulumi.set(__self__, "backup_retention_period_in_days", backup_retention_period_in_days)
        if character_set and not isinstance(character_set, str):
            raise TypeError("Expected argument 'character_set' to be a str")
        pulumi.set(__self__, "character_set", character_set)
        if clone_type and not isinstance(clone_type, str):
            raise TypeError("Expected argument 'clone_type' to be a str")
        pulumi.set(__self__, "clone_type", clone_type)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if compute_count and not isinstance(compute_count, float):
            raise TypeError("Expected argument 'compute_count' to be a float")
        pulumi.set(__self__, "compute_count", compute_count)
        if compute_model and not isinstance(compute_model, str):
            raise TypeError("Expected argument 'compute_model' to be a str")
        pulumi.set(__self__, "compute_model", compute_model)
        if connection_strings and not isinstance(connection_strings, list):
            raise TypeError("Expected argument 'connection_strings' to be a list")
        pulumi.set(__self__, "connection_strings", connection_strings)
        if connection_urls and not isinstance(connection_urls, list):
            raise TypeError("Expected argument 'connection_urls' to be a list")
        pulumi.set(__self__, "connection_urls", connection_urls)
        if cpu_core_count and not isinstance(cpu_core_count, int):
            raise TypeError("Expected argument 'cpu_core_count' to be a int")
        pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        if customer_contacts and not isinstance(customer_contacts, list):
            raise TypeError("Expected argument 'customer_contacts' to be a list")
        pulumi.set(__self__, "customer_contacts", customer_contacts)
        if data_safe_status and not isinstance(data_safe_status, str):
            raise TypeError("Expected argument 'data_safe_status' to be a str")
        pulumi.set(__self__, "data_safe_status", data_safe_status)
        if data_storage_size_in_gb and not isinstance(data_storage_size_in_gb, int):
            raise TypeError("Expected argument 'data_storage_size_in_gb' to be a int")
        pulumi.set(__self__, "data_storage_size_in_gb", data_storage_size_in_gb)
        if data_storage_size_in_tbs and not isinstance(data_storage_size_in_tbs, int):
            raise TypeError("Expected argument 'data_storage_size_in_tbs' to be a int")
        pulumi.set(__self__, "data_storage_size_in_tbs", data_storage_size_in_tbs)
        if database_edition and not isinstance(database_edition, str):
            raise TypeError("Expected argument 'database_edition' to be a str")
        pulumi.set(__self__, "database_edition", database_edition)
        if database_management_status and not isinstance(database_management_status, str):
            raise TypeError("Expected argument 'database_management_status' to be a str")
        pulumi.set(__self__, "database_management_status", database_management_status)
        if dataguard_region_type and not isinstance(dataguard_region_type, str):
            raise TypeError("Expected argument 'dataguard_region_type' to be a str")
        pulumi.set(__self__, "dataguard_region_type", dataguard_region_type)
        if db_name and not isinstance(db_name, str):
            raise TypeError("Expected argument 'db_name' to be a str")
        pulumi.set(__self__, "db_name", db_name)
        if db_version and not isinstance(db_version, str):
            raise TypeError("Expected argument 'db_version' to be a str")
        pulumi.set(__self__, "db_version", db_version)
        if db_workload and not isinstance(db_workload, str):
            raise TypeError("Expected argument 'db_workload' to be a str")
        pulumi.set(__self__, "db_workload", db_workload)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if disaster_recovery_region_type and not isinstance(disaster_recovery_region_type, str):
            raise TypeError("Expected argument 'disaster_recovery_region_type' to be a str")
        pulumi.set(__self__, "disaster_recovery_region_type", disaster_recovery_region_type)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if failed_data_recovery_in_seconds and not isinstance(failed_data_recovery_in_seconds, int):
            raise TypeError("Expected argument 'failed_data_recovery_in_seconds' to be a int")
        pulumi.set(__self__, "failed_data_recovery_in_seconds", failed_data_recovery_in_seconds)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if in_memory_area_in_gbs and not isinstance(in_memory_area_in_gbs, int):
            raise TypeError("Expected argument 'in_memory_area_in_gbs' to be a int")
        pulumi.set(__self__, "in_memory_area_in_gbs", in_memory_area_in_gbs)
        if in_memory_percentage and not isinstance(in_memory_percentage, int):
            raise TypeError("Expected argument 'in_memory_percentage' to be a int")
        pulumi.set(__self__, "in_memory_percentage", in_memory_percentage)
        if infrastructure_type and not isinstance(infrastructure_type, str):
            raise TypeError("Expected argument 'infrastructure_type' to be a str")
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        if is_access_control_enabled and not isinstance(is_access_control_enabled, bool):
            raise TypeError("Expected argument 'is_access_control_enabled' to be a bool")
        pulumi.set(__self__, "is_access_control_enabled", is_access_control_enabled)
        if is_auto_scaling_enabled and not isinstance(is_auto_scaling_enabled, bool):
            raise TypeError("Expected argument 'is_auto_scaling_enabled' to be a bool")
        pulumi.set(__self__, "is_auto_scaling_enabled", is_auto_scaling_enabled)
        if is_auto_scaling_for_storage_enabled and not isinstance(is_auto_scaling_for_storage_enabled, bool):
            raise TypeError("Expected argument 'is_auto_scaling_for_storage_enabled' to be a bool")
        pulumi.set(__self__, "is_auto_scaling_for_storage_enabled", is_auto_scaling_for_storage_enabled)
        if is_data_guard_enabled and not isinstance(is_data_guard_enabled, bool):
            raise TypeError("Expected argument 'is_data_guard_enabled' to be a bool")
        pulumi.set(__self__, "is_data_guard_enabled", is_data_guard_enabled)
        if is_dedicated and not isinstance(is_dedicated, bool):
            raise TypeError("Expected argument 'is_dedicated' to be a bool")
        pulumi.set(__self__, "is_dedicated", is_dedicated)
        if is_free_tier and not isinstance(is_free_tier, bool):
            raise TypeError("Expected argument 'is_free_tier' to be a bool")
        pulumi.set(__self__, "is_free_tier", is_free_tier)
        if is_local_data_guard_enabled and not isinstance(is_local_data_guard_enabled, bool):
            raise TypeError("Expected argument 'is_local_data_guard_enabled' to be a bool")
        pulumi.set(__self__, "is_local_data_guard_enabled", is_local_data_guard_enabled)
        if is_mtls_connection_required and not isinstance(is_mtls_connection_required, bool):
            raise TypeError("Expected argument 'is_mtls_connection_required' to be a bool")
        pulumi.set(__self__, "is_mtls_connection_required", is_mtls_connection_required)
        if is_preview and not isinstance(is_preview, bool):
            raise TypeError("Expected argument 'is_preview' to be a bool")
        pulumi.set(__self__, "is_preview", is_preview)
        if is_preview_version_with_service_terms_accepted and not isinstance(is_preview_version_with_service_terms_accepted, bool):
            raise TypeError("Expected argument 'is_preview_version_with_service_terms_accepted' to be a bool")
        pulumi.set(__self__, "is_preview_version_with_service_terms_accepted", is_preview_version_with_service_terms_accepted)
        if is_reconnect_clone_enabled and not isinstance(is_reconnect_clone_enabled, bool):
            raise TypeError("Expected argument 'is_reconnect_clone_enabled' to be a bool")
        pulumi.set(__self__, "is_reconnect_clone_enabled", is_reconnect_clone_enabled)
        if is_refreshable_clone and not isinstance(is_refreshable_clone, bool):
            raise TypeError("Expected argument 'is_refreshable_clone' to be a bool")
        pulumi.set(__self__, "is_refreshable_clone", is_refreshable_clone)
        if is_remote_data_guard_enabled and not isinstance(is_remote_data_guard_enabled, bool):
            raise TypeError("Expected argument 'is_remote_data_guard_enabled' to be a bool")
        pulumi.set(__self__, "is_remote_data_guard_enabled", is_remote_data_guard_enabled)
        if is_shrink_only and not isinstance(is_shrink_only, bool):
            raise TypeError("Expected argument 'is_shrink_only' to be a bool")
        pulumi.set(__self__, "is_shrink_only", is_shrink_only)
        if key_history_entries and not isinstance(key_history_entries, list):
            raise TypeError("Expected argument 'key_history_entries' to be a list")
        pulumi.set(__self__, "key_history_entries", key_history_entries)
        if key_store_id and not isinstance(key_store_id, str):
            raise TypeError("Expected argument 'key_store_id' to be a str")
        pulumi.set(__self__, "key_store_id", key_store_id)
        if key_store_wallet_name and not isinstance(key_store_wallet_name, str):
            raise TypeError("Expected argument 'key_store_wallet_name' to be a str")
        pulumi.set(__self__, "key_store_wallet_name", key_store_wallet_name)
        if kms_key_id and not isinstance(kms_key_id, str):
            raise TypeError("Expected argument 'kms_key_id' to be a str")
        pulumi.set(__self__, "kms_key_id", kms_key_id)
        if kms_key_lifecycle_details and not isinstance(kms_key_lifecycle_details, str):
            raise TypeError("Expected argument 'kms_key_lifecycle_details' to be a str")
        pulumi.set(__self__, "kms_key_lifecycle_details", kms_key_lifecycle_details)
        if kms_key_version_id and not isinstance(kms_key_version_id, str):
            raise TypeError("Expected argument 'kms_key_version_id' to be a str")
        pulumi.set(__self__, "kms_key_version_id", kms_key_version_id)
        if license_model and not isinstance(license_model, str):
            raise TypeError("Expected argument 'license_model' to be a str")
        pulumi.set(__self__, "license_model", license_model)
        if lifecycle_details and not isinstance(lifecycle_details, str):
            raise TypeError("Expected argument 'lifecycle_details' to be a str")
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if local_adg_auto_failover_max_data_loss_limit and not isinstance(local_adg_auto_failover_max_data_loss_limit, int):
            raise TypeError("Expected argument 'local_adg_auto_failover_max_data_loss_limit' to be a int")
        pulumi.set(__self__, "local_adg_auto_failover_max_data_loss_limit", local_adg_auto_failover_max_data_loss_limit)
        if local_disaster_recovery_type and not isinstance(local_disaster_recovery_type, str):
            raise TypeError("Expected argument 'local_disaster_recovery_type' to be a str")
        pulumi.set(__self__, "local_disaster_recovery_type", local_disaster_recovery_type)
        if local_standby_dbs and not isinstance(local_standby_dbs, list):
            raise TypeError("Expected argument 'local_standby_dbs' to be a list")
        pulumi.set(__self__, "local_standby_dbs", local_standby_dbs)
        if long_term_backup_schedules and not isinstance(long_term_backup_schedules, list):
            raise TypeError("Expected argument 'long_term_backup_schedules' to be a list")
        pulumi.set(__self__, "long_term_backup_schedules", long_term_backup_schedules)
        if max_cpu_core_count and not isinstance(max_cpu_core_count, int):
            raise TypeError("Expected argument 'max_cpu_core_count' to be a int")
        pulumi.set(__self__, "max_cpu_core_count", max_cpu_core_count)
        if memory_per_oracle_compute_unit_in_gbs and not isinstance(memory_per_oracle_compute_unit_in_gbs, int):
            raise TypeError("Expected argument 'memory_per_oracle_compute_unit_in_gbs' to be a int")
        pulumi.set(__self__, "memory_per_oracle_compute_unit_in_gbs", memory_per_oracle_compute_unit_in_gbs)
        if ncharacter_set and not isinstance(ncharacter_set, str):
            raise TypeError("Expected argument 'ncharacter_set' to be a str")
        pulumi.set(__self__, "ncharacter_set", ncharacter_set)
        if next_long_term_backup_time_stamp and not isinstance(next_long_term_backup_time_stamp, str):
            raise TypeError("Expected argument 'next_long_term_backup_time_stamp' to be a str")
        pulumi.set(__self__, "next_long_term_backup_time_stamp", next_long_term_backup_time_stamp)
        if nsg_ids and not isinstance(nsg_ids, list):
            raise TypeError("Expected argument 'nsg_ids' to be a list")
        pulumi.set(__self__, "nsg_ids", nsg_ids)
        if ocpu_count and not isinstance(ocpu_count, float):
            raise TypeError("Expected argument 'ocpu_count' to be a float")
        pulumi.set(__self__, "ocpu_count", ocpu_count)
        if open_mode and not isinstance(open_mode, str):
            raise TypeError("Expected argument 'open_mode' to be a str")
        pulumi.set(__self__, "open_mode", open_mode)
        if operations_insights_status and not isinstance(operations_insights_status, str):
            raise TypeError("Expected argument 'operations_insights_status' to be a str")
        pulumi.set(__self__, "operations_insights_status", operations_insights_status)
        if peer_db_ids and not isinstance(peer_db_ids, list):
            raise TypeError("Expected argument 'peer_db_ids' to be a list")
        pulumi.set(__self__, "peer_db_ids", peer_db_ids)
        if permission_level and not isinstance(permission_level, str):
            raise TypeError("Expected argument 'permission_level' to be a str")
        pulumi.set(__self__, "permission_level", permission_level)
        if private_endpoint and not isinstance(private_endpoint, str):
            raise TypeError("Expected argument 'private_endpoint' to be a str")
        pulumi.set(__self__, "private_endpoint", private_endpoint)
        if private_endpoint_ip and not isinstance(private_endpoint_ip, str):
            raise TypeError("Expected argument 'private_endpoint_ip' to be a str")
        pulumi.set(__self__, "private_endpoint_ip", private_endpoint_ip)
        if private_endpoint_label and not isinstance(private_endpoint_label, str):
            raise TypeError("Expected argument 'private_endpoint_label' to be a str")
        pulumi.set(__self__, "private_endpoint_label", private_endpoint_label)
        if provisionable_cpuses and not isinstance(provisionable_cpuses, list):
            raise TypeError("Expected argument 'provisionable_cpuses' to be a list")
        pulumi.set(__self__, "provisionable_cpuses", provisionable_cpuses)
        if refreshable_mode and not isinstance(refreshable_mode, str):
            raise TypeError("Expected argument 'refreshable_mode' to be a str")
        pulumi.set(__self__, "refreshable_mode", refreshable_mode)
        if refreshable_status and not isinstance(refreshable_status, str):
            raise TypeError("Expected argument 'refreshable_status' to be a str")
        pulumi.set(__self__, "refreshable_status", refreshable_status)
        if remote_disaster_recovery_configurations and not isinstance(remote_disaster_recovery_configurations, list):
            raise TypeError("Expected argument 'remote_disaster_recovery_configurations' to be a list")
        pulumi.set(__self__, "remote_disaster_recovery_configurations", remote_disaster_recovery_configurations)
        if remote_disaster_recovery_type and not isinstance(remote_disaster_recovery_type, str):
            raise TypeError("Expected argument 'remote_disaster_recovery_type' to be a str")
        pulumi.set(__self__, "remote_disaster_recovery_type", remote_disaster_recovery_type)
        if resource_pool_leader_id and not isinstance(resource_pool_leader_id, str):
            raise TypeError("Expected argument 'resource_pool_leader_id' to be a str")
        pulumi.set(__self__, "resource_pool_leader_id", resource_pool_leader_id)
        if resource_pool_summaries and not isinstance(resource_pool_summaries, list):
            raise TypeError("Expected argument 'resource_pool_summaries' to be a list")
        pulumi.set(__self__, "resource_pool_summaries", resource_pool_summaries)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if rotate_key_trigger and not isinstance(rotate_key_trigger, bool):
            raise TypeError("Expected argument 'rotate_key_trigger' to be a bool")
        pulumi.set(__self__, "rotate_key_trigger", rotate_key_trigger)
        if scheduled_operations and not isinstance(scheduled_operations, list):
            raise TypeError("Expected argument 'scheduled_operations' to be a list")
        pulumi.set(__self__, "scheduled_operations", scheduled_operations)
        if secret_id and not isinstance(secret_id, str):
            raise TypeError("Expected argument 'secret_id' to be a str")
        pulumi.set(__self__, "secret_id", secret_id)
        if secret_version_number and not isinstance(secret_version_number, int):
            raise TypeError("Expected argument 'secret_version_number' to be a int")
        pulumi.set(__self__, "secret_version_number", secret_version_number)
        if service_console_url and not isinstance(service_console_url, str):
            raise TypeError("Expected argument 'service_console_url' to be a str")
        pulumi.set(__self__, "service_console_url", service_console_url)
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        pulumi.set(__self__, "source", source)
        if source_id and not isinstance(source_id, str):
            raise TypeError("Expected argument 'source_id' to be a str")
        pulumi.set(__self__, "source_id", source_id)
        if standby_dbs and not isinstance(standby_dbs, list):
            raise TypeError("Expected argument 'standby_dbs' to be a list")
        pulumi.set(__self__, "standby_dbs", standby_dbs)
        if standby_whitelisted_ips and not isinstance(standby_whitelisted_ips, list):
            raise TypeError("Expected argument 'standby_whitelisted_ips' to be a list")
        pulumi.set(__self__, "standby_whitelisted_ips", standby_whitelisted_ips)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if supported_regions_to_clone_tos and not isinstance(supported_regions_to_clone_tos, list):
            raise TypeError("Expected argument 'supported_regions_to_clone_tos' to be a list")
        pulumi.set(__self__, "supported_regions_to_clone_tos", supported_regions_to_clone_tos)
        if switchover_to and not isinstance(switchover_to, str):
            raise TypeError("Expected argument 'switchover_to' to be a str")
        pulumi.set(__self__, "switchover_to", switchover_to)
        if switchover_to_remote_peer_id and not isinstance(switchover_to_remote_peer_id, str):
            raise TypeError("Expected argument 'switchover_to_remote_peer_id' to be a str")
        pulumi.set(__self__, "switchover_to_remote_peer_id", switchover_to_remote_peer_id)
        if system_tags and not isinstance(system_tags, dict):
            raise TypeError("Expected argument 'system_tags' to be a dict")
        pulumi.set(__self__, "system_tags", system_tags)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_data_guard_role_changed and not isinstance(time_data_guard_role_changed, str):
            raise TypeError("Expected argument 'time_data_guard_role_changed' to be a str")
        pulumi.set(__self__, "time_data_guard_role_changed", time_data_guard_role_changed)
        if time_deletion_of_free_autonomous_database and not isinstance(time_deletion_of_free_autonomous_database, str):
            raise TypeError("Expected argument 'time_deletion_of_free_autonomous_database' to be a str")
        pulumi.set(__self__, "time_deletion_of_free_autonomous_database", time_deletion_of_free_autonomous_database)
        if time_disaster_recovery_role_changed and not isinstance(time_disaster_recovery_role_changed, str):
            raise TypeError("Expected argument 'time_disaster_recovery_role_changed' to be a str")
        pulumi.set(__self__, "time_disaster_recovery_role_changed", time_disaster_recovery_role_changed)
        if time_local_data_guard_enabled and not isinstance(time_local_data_guard_enabled, str):
            raise TypeError("Expected argument 'time_local_data_guard_enabled' to be a str")
        pulumi.set(__self__, "time_local_data_guard_enabled", time_local_data_guard_enabled)
        if time_maintenance_begin and not isinstance(time_maintenance_begin, str):
            raise TypeError("Expected argument 'time_maintenance_begin' to be a str")
        pulumi.set(__self__, "time_maintenance_begin", time_maintenance_begin)
        if time_maintenance_end and not isinstance(time_maintenance_end, str):
            raise TypeError("Expected argument 'time_maintenance_end' to be a str")
        pulumi.set(__self__, "time_maintenance_end", time_maintenance_end)
        if time_of_joining_resource_pool and not isinstance(time_of_joining_resource_pool, str):
            raise TypeError("Expected argument 'time_of_joining_resource_pool' to be a str")
        pulumi.set(__self__, "time_of_joining_resource_pool", time_of_joining_resource_pool)
        if time_of_last_failover and not isinstance(time_of_last_failover, str):
            raise TypeError("Expected argument 'time_of_last_failover' to be a str")
        pulumi.set(__self__, "time_of_last_failover", time_of_last_failover)
        if time_of_last_refresh and not isinstance(time_of_last_refresh, str):
            raise TypeError("Expected argument 'time_of_last_refresh' to be a str")
        pulumi.set(__self__, "time_of_last_refresh", time_of_last_refresh)
        if time_of_last_refresh_point and not isinstance(time_of_last_refresh_point, str):
            raise TypeError("Expected argument 'time_of_last_refresh_point' to be a str")
        pulumi.set(__self__, "time_of_last_refresh_point", time_of_last_refresh_point)
        if time_of_last_switchover and not isinstance(time_of_last_switchover, str):
            raise TypeError("Expected argument 'time_of_last_switchover' to be a str")
        pulumi.set(__self__, "time_of_last_switchover", time_of_last_switchover)
        if time_of_next_refresh and not isinstance(time_of_next_refresh, str):
            raise TypeError("Expected argument 'time_of_next_refresh' to be a str")
        pulumi.set(__self__, "time_of_next_refresh", time_of_next_refresh)
        if time_reclamation_of_free_autonomous_database and not isinstance(time_reclamation_of_free_autonomous_database, str):
            raise TypeError("Expected argument 'time_reclamation_of_free_autonomous_database' to be a str")
        pulumi.set(__self__, "time_reclamation_of_free_autonomous_database", time_reclamation_of_free_autonomous_database)
        if time_until_reconnect_clone_enabled and not isinstance(time_until_reconnect_clone_enabled, str):
            raise TypeError("Expected argument 'time_until_reconnect_clone_enabled' to be a str")
        pulumi.set(__self__, "time_until_reconnect_clone_enabled", time_until_reconnect_clone_enabled)
        if timestamp and not isinstance(timestamp, str):
            raise TypeError("Expected argument 'timestamp' to be a str")
        pulumi.set(__self__, "timestamp", timestamp)
        if total_backup_storage_size_in_gbs and not isinstance(total_backup_storage_size_in_gbs, float):
            raise TypeError("Expected argument 'total_backup_storage_size_in_gbs' to be a float")
        pulumi.set(__self__, "total_backup_storage_size_in_gbs", total_backup_storage_size_in_gbs)
        if use_latest_available_backup_time_stamp and not isinstance(use_latest_available_backup_time_stamp, bool):
            raise TypeError("Expected argument 'use_latest_available_backup_time_stamp' to be a bool")
        pulumi.set(__self__, "use_latest_available_backup_time_stamp", use_latest_available_backup_time_stamp)
        if used_data_storage_size_in_gbs and not isinstance(used_data_storage_size_in_gbs, int):
            raise TypeError("Expected argument 'used_data_storage_size_in_gbs' to be a int")
        pulumi.set(__self__, "used_data_storage_size_in_gbs", used_data_storage_size_in_gbs)
        if used_data_storage_size_in_tbs and not isinstance(used_data_storage_size_in_tbs, int):
            raise TypeError("Expected argument 'used_data_storage_size_in_tbs' to be a int")
        pulumi.set(__self__, "used_data_storage_size_in_tbs", used_data_storage_size_in_tbs)
        if vault_id and not isinstance(vault_id, str):
            raise TypeError("Expected argument 'vault_id' to be a str")
        pulumi.set(__self__, "vault_id", vault_id)
        if whitelisted_ips and not isinstance(whitelisted_ips, list):
            raise TypeError("Expected argument 'whitelisted_ips' to be a list")
        pulumi.set(__self__, "whitelisted_ips", whitelisted_ips)

    @property
    @pulumi.getter(name="actualUsedDataStorageSizeInTbs")
    def actual_used_data_storage_size_in_tbs(self) -> float:
        """
        The current amount of storage in use for user and system data, in terabytes (TB).
        """
        return pulumi.get(self, "actual_used_data_storage_size_in_tbs")

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> str:
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="allocatedStorageSizeInTbs")
    def allocated_storage_size_in_tbs(self) -> float:
        """
        The amount of storage currently allocated for the database tables and billed for, rounded up. When auto-scaling is not enabled, this value is equal to the `dataStorageSizeInTBs` value. You can compare this value to the `actualUsedDataStorageSizeInTBs` value to determine if a manual shrink operation is appropriate for your allocated storage.
        """
        return pulumi.get(self, "allocated_storage_size_in_tbs")

    @property
    @pulumi.getter(name="apexDetails")
    def apex_details(self) -> Sequence['outputs.GetAutonomousDatabaseApexDetailResult']:
        """
        Information about Oracle APEX Application Development.
        """
        return pulumi.get(self, "apex_details")

    @property
    @pulumi.getter(name="arePrimaryWhitelistedIpsUsed")
    def are_primary_whitelisted_ips_used(self) -> bool:
        """
        This field will be null if the Autonomous Database is not Data Guard enabled or Access Control is disabled. It's value would be `TRUE` if Autonomous Database is Data Guard enabled and Access Control is enabled and if the Autonomous Database uses primary IP access control list (ACL) for standby. It's value would be `FALSE` if Autonomous Database is Data Guard enabled and Access Control is enabled and if the Autonomous Database uses different IP access control list (ACL) for standby compared to primary.
        """
        return pulumi.get(self, "are_primary_whitelisted_ips_used")

    @property
    @pulumi.getter(name="autonomousContainerDatabaseId")
    def autonomous_container_database_id(self) -> str:
        """
        The Autonomous Container Database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "autonomous_container_database_id")

    @property
    @pulumi.getter(name="autonomousDatabaseBackupId")
    def autonomous_database_backup_id(self) -> str:
        return pulumi.get(self, "autonomous_database_backup_id")

    @property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> str:
        return pulumi.get(self, "autonomous_database_id")

    @property
    @pulumi.getter(name="autonomousMaintenanceScheduleType")
    def autonomous_maintenance_schedule_type(self) -> str:
        """
        The maintenance schedule type of the Autonomous Database on shared Exadata infrastructure. The EARLY maintenance schedule of this Autonomous Database follows a schedule that applies patches prior to the REGULAR schedule.The REGULAR maintenance schedule of this Autonomous Database follows the normal cycle.
        """
        return pulumi.get(self, "autonomous_maintenance_schedule_type")

    @property
    @pulumi.getter(name="availableUpgradeVersions")
    def available_upgrade_versions(self) -> Sequence[str]:
        """
        List of Oracle Database versions available for a database upgrade. If there are no version upgrades available, this list is empty.
        """
        return pulumi.get(self, "available_upgrade_versions")

    @property
    @pulumi.getter(name="backupConfigs")
    def backup_configs(self) -> Sequence['outputs.GetAutonomousDatabaseBackupConfigResult']:
        """
        Autonomous Database configuration details for storing [manual backups](https://docs.oracle.com/en/cloud/paas/autonomous-database/adbsa/backup-restore.html#GUID-9035DFB8-4702-4CEB-8281-C2A303820809) in the [Object Storage](https://docs.cloud.oracle.com/iaas/Content/Object/Concepts/objectstorageoverview.htm) service.
        """
        return pulumi.get(self, "backup_configs")

    @property
    @pulumi.getter(name="backupRetentionPeriodInDays")
    def backup_retention_period_in_days(self) -> int:
        """
        Retention period, in days, for backups.
        """
        return pulumi.get(self, "backup_retention_period_in_days")

    @property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> str:
        """
        The character set for the autonomous database.  The default is AL32UTF8. Allowed values are:
        """
        return pulumi.get(self, "character_set")

    @property
    @pulumi.getter(name="cloneType")
    def clone_type(self) -> str:
        return pulumi.get(self, "clone_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeCount")
    def compute_count(self) -> float:
        """
        The compute amount available to the database. Minimum and maximum values depend on the compute model and whether the database is on Shared or Dedicated infrastructure. For an Autonomous Database on Shared infrastructure, the 'ECPU' compute model requires values in multiples of two. Required when using the `computeModel` parameter. When using `cpuCoreCount` parameter, it is an error to specify computeCount to a non-null value.
        """
        return pulumi.get(self, "compute_count")

    @property
    @pulumi.getter(name="computeModel")
    def compute_model(self) -> str:
        """
        The compute model of the Autonomous Database. This is required if using the `computeCount` parameter. If using `cpuCoreCount` then it is an error to specify `computeModel` to a non-null value.
        """
        return pulumi.get(self, "compute_model")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Sequence['outputs.GetAutonomousDatabaseConnectionStringResult']:
        """
        The connection string used to connect to the Autonomous Database. The username for the Service Console is ADMIN. Use the password you entered when creating the Autonomous Database for the password value.
        """
        return pulumi.get(self, "connection_strings")

    @property
    @pulumi.getter(name="connectionUrls")
    def connection_urls(self) -> Sequence['outputs.GetAutonomousDatabaseConnectionUrlResult']:
        """
        The URLs for accessing Oracle Application Express (APEX) and SQL Developer Web with a browser from a Compute instance within your VCN or that has a direct connection to your VCN. Note that these URLs are provided by the console only for databases on [dedicated Exadata infrastructure](https://docs.oracle.com/en/cloud/paas/autonomous-database/index.html).  Example: `{"sqlDevWebUrl": "https://<hostname>/ords...", "apexUrl", "https://<hostname>/ords..."}`
        """
        return pulumi.get(self, "connection_urls")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> int:
        """
        The number of OCPU cores to be made available to the database. When the ECPU is selected, the value for cpuCoreCount is 0. For Autonomous Databases on dedicated Exadata infrastructure, the maximum number of cores is determined by the infrastructure shape. See [Characteristics of Infrastructure Shapes](https://www.oracle.com/pls/topic/lookup?ctx=en/cloud/paas/autonomous-database&id=ATPFG-GUID-B0F033C1-CC5A-42F0-B2E7-3CECFEDA1FD1) for shape details.
        """
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="customerContacts")
    def customer_contacts(self) -> Sequence['outputs.GetAutonomousDatabaseCustomerContactResult']:
        """
        Customer Contacts.
        """
        return pulumi.get(self, "customer_contacts")

    @property
    @pulumi.getter(name="dataSafeStatus")
    def data_safe_status(self) -> str:
        """
        Status of the Data Safe registration for this Autonomous Database. Could be REGISTERED or NOT_REGISTERED.
        """
        return pulumi.get(self, "data_safe_status")

    @property
    @pulumi.getter(name="dataStorageSizeInGb")
    def data_storage_size_in_gb(self) -> int:
        """
        The quantity of data in the database, in gigabytes.
        """
        return pulumi.get(self, "data_storage_size_in_gb")

    @property
    @pulumi.getter(name="dataStorageSizeInTbs")
    def data_storage_size_in_tbs(self) -> int:
        """
        The quantity of data in the database, in terabytes.
        """
        return pulumi.get(self, "data_storage_size_in_tbs")

    @property
    @pulumi.getter(name="databaseEdition")
    def database_edition(self) -> str:
        """
        The Oracle Database Edition that applies to the Autonomous databases.
        """
        return pulumi.get(self, "database_edition")

    @property
    @pulumi.getter(name="databaseManagementStatus")
    def database_management_status(self) -> str:
        """
        Status of Database Management for this Autonomous Database.
        """
        return pulumi.get(self, "database_management_status")

    @property
    @pulumi.getter(name="dataguardRegionType")
    def dataguard_region_type(self) -> str:
        """
        The Autonomous Data Guard region type of the Autonomous Database. For Autonomous Databases on shared Exadata infrastructure, Data Guard associations have designated primary and standby regions, and these region types do not change when the database changes roles. The standby regions in Data Guard associations can be the same region designated as the primary region, or they can be remote regions. Certain database administrative operations may be available only in the primary region of the Data Guard association, and cannot be performed when the database using the "primary" role is operating in a remote Data Guard standby region.
        """
        return pulumi.get(self, "dataguard_region_type")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        The database name.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        """
        A valid Oracle Database version for Autonomous Database.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="dbWorkload")
    def db_workload(self) -> str:
        """
        The Autonomous Database workload type. The following values are valid:
        * OLTP - indicates an Autonomous Transaction Processing database
        * DW - indicates an Autonomous Data Warehouse database
        * AJD - indicates an Autonomous JSON Database
        * APEX - indicates an Autonomous Database with the Oracle APEX Application Development workload type.
        """
        return pulumi.get(self, "db_workload")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="disasterRecoveryRegionType")
    def disaster_recovery_region_type(self) -> str:
        """
        The disaster recovery (DR) region type of the Autonomous Database. For Shared Autonomous Databases, DR associations have designated primary and standby regions. These region types do not change when the database changes roles. The standby region in DR associations can be the same region as the primary region, or they can be in a remote regions. Some database administration operations may be available only in the primary region of the DR association, and cannot be performed when the database using the primary role is operating in a remote region.
        """
        return pulumi.get(self, "disaster_recovery_region_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The user-friendly name for the Autonomous Database. The name does not have to be unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="failedDataRecoveryInSeconds")
    def failed_data_recovery_in_seconds(self) -> int:
        """
        Indicates the number of seconds of data loss for a Data Guard failover.
        """
        return pulumi.get(self, "failed_data_recovery_in_seconds")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the Autonomous Database [Vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts) service key management history entry.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inMemoryAreaInGbs")
    def in_memory_area_in_gbs(self) -> int:
        """
        The area assigned to In-Memory tables in Autonomous Database.
        """
        return pulumi.get(self, "in_memory_area_in_gbs")

    @property
    @pulumi.getter(name="inMemoryPercentage")
    def in_memory_percentage(self) -> int:
        """
        The percentage of the System Global Area(SGA) assigned to In-Memory tables in Autonomous Database.
        """
        return pulumi.get(self, "in_memory_percentage")

    @property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> str:
        """
        The infrastructure type this resource belongs to.
        """
        return pulumi.get(self, "infrastructure_type")

    @property
    @pulumi.getter(name="isAccessControlEnabled")
    def is_access_control_enabled(self) -> bool:
        """
        Indicates if the database-level access control is enabled. If disabled, database access is defined by the network security rules. If enabled, database access is restricted to the IP addresses defined by the rules specified with the `whitelistedIps` property. While specifying `whitelistedIps` rules is optional, if database-level access control is enabled and no rules are specified, the database will become inaccessible. The rules can be added later using the `UpdateAutonomousDatabase` API operation or edit option in console. When creating a database clone, the desired access control setting should be specified. By default, database-level access control will be disabled for the clone.
        """
        return pulumi.get(self, "is_access_control_enabled")

    @property
    @pulumi.getter(name="isAutoScalingEnabled")
    def is_auto_scaling_enabled(self) -> bool:
        """
        Indicates if auto scaling is enabled for the Autonomous Database CPU core count.
        """
        return pulumi.get(self, "is_auto_scaling_enabled")

    @property
    @pulumi.getter(name="isAutoScalingForStorageEnabled")
    def is_auto_scaling_for_storage_enabled(self) -> bool:
        """
        Indicates if auto scaling is enabled for the Autonomous Database storage. The default value is `FALSE`.
        """
        return pulumi.get(self, "is_auto_scaling_for_storage_enabled")

    @property
    @pulumi.getter(name="isDataGuardEnabled")
    def is_data_guard_enabled(self) -> bool:
        """
        **Deprecated.** Indicates whether the Autonomous Database has local (in-region) Data Guard enabled. Not applicable to cross-region Autonomous Data Guard associations, or to Autonomous Databases using dedicated Exadata infrastructure or Exadata Cloud@Customer infrastructure.
        """
        return pulumi.get(self, "is_data_guard_enabled")

    @property
    @pulumi.getter(name="isDedicated")
    def is_dedicated(self) -> bool:
        """
        True if the database uses [dedicated Exadata infrastructure](https://docs.oracle.com/en/cloud/paas/autonomous-database/index.html).
        """
        return pulumi.get(self, "is_dedicated")

    @property
    @pulumi.getter(name="isFreeTier")
    def is_free_tier(self) -> bool:
        """
        Indicates if this is an Always Free resource. The default value is false. Note that Always Free Autonomous Databases have 1 CPU and 20GB of memory. For Always Free databases, memory and CPU cannot be scaled.
        """
        return pulumi.get(self, "is_free_tier")

    @property
    @pulumi.getter(name="isLocalDataGuardEnabled")
    def is_local_data_guard_enabled(self) -> bool:
        """
        Indicates whether the Autonomous Database has local (in-region) Data Guard enabled. Not applicable to cross-region Autonomous Data Guard associations, or to Autonomous Databases using dedicated Exadata infrastructure or Exadata Cloud@Customer infrastructure.
        """
        return pulumi.get(self, "is_local_data_guard_enabled")

    @property
    @pulumi.getter(name="isMtlsConnectionRequired")
    def is_mtls_connection_required(self) -> bool:
        """
        Specifies if the Autonomous Database requires mTLS connections.
        """
        return pulumi.get(self, "is_mtls_connection_required")

    @property
    @pulumi.getter(name="isPreview")
    def is_preview(self) -> bool:
        """
        Indicates if the Autonomous Database version is a preview version.
        """
        return pulumi.get(self, "is_preview")

    @property
    @pulumi.getter(name="isPreviewVersionWithServiceTermsAccepted")
    def is_preview_version_with_service_terms_accepted(self) -> bool:
        return pulumi.get(self, "is_preview_version_with_service_terms_accepted")

    @property
    @pulumi.getter(name="isReconnectCloneEnabled")
    def is_reconnect_clone_enabled(self) -> bool:
        """
        Indicates if the refreshable clone can be reconnected to its source database.
        """
        return pulumi.get(self, "is_reconnect_clone_enabled")

    @property
    @pulumi.getter(name="isRefreshableClone")
    def is_refreshable_clone(self) -> bool:
        """
        Indicates if the Autonomous Database is a refreshable clone.
        """
        return pulumi.get(self, "is_refreshable_clone")

    @property
    @pulumi.getter(name="isRemoteDataGuardEnabled")
    def is_remote_data_guard_enabled(self) -> bool:
        """
        Indicates whether the Autonomous Database has Cross Region Data Guard enabled. Not applicable to Autonomous Databases using dedicated Exadata infrastructure or Exadata Cloud@Customer infrastructure.
        """
        return pulumi.get(self, "is_remote_data_guard_enabled")

    @property
    @pulumi.getter(name="isShrinkOnly")
    def is_shrink_only(self) -> bool:
        return pulumi.get(self, "is_shrink_only")

    @property
    @pulumi.getter(name="keyHistoryEntries")
    def key_history_entries(self) -> Sequence['outputs.GetAutonomousDatabaseKeyHistoryEntryResult']:
        """
        Key History Entry.
        """
        return pulumi.get(self, "key_history_entries")

    @property
    @pulumi.getter(name="keyStoreId")
    def key_store_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the key store.
        """
        return pulumi.get(self, "key_store_id")

    @property
    @pulumi.getter(name="keyStoreWalletName")
    def key_store_wallet_name(self) -> str:
        """
        The wallet name for Oracle Key Vault.
        """
        return pulumi.get(self, "key_store_wallet_name")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> str:
        """
        The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="kmsKeyLifecycleDetails")
    def kms_key_lifecycle_details(self) -> str:
        """
        KMS key lifecycle details.
        """
        return pulumi.get(self, "kms_key_lifecycle_details")

    @property
    @pulumi.getter(name="kmsKeyVersionId")
    def kms_key_version_id(self) -> str:
        """
        The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation.
        """
        return pulumi.get(self, "kms_key_version_id")

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> str:
        """
        The Oracle license model that applies to the Oracle Autonomous Database. Bring your own license (BYOL) allows you to apply your current on-premises Oracle software licenses to equivalent, highly automated Oracle PaaS and IaaS services in the cloud. License Included allows you to subscribe to new Oracle Database software licenses and the Database service. Note that when provisioning an Autonomous Database on [dedicated Exadata infrastructure](https://docs.oracle.com/en/cloud/paas/autonomous-database/index.html), this attribute must be null because the attribute is already set at the Autonomous Exadata Infrastructure level. When using [shared Exadata infrastructure](https://docs.oracle.com/en/cloud/paas/autonomous-database/index.html), if a value is not specified, the system will supply the value of `BRING_YOUR_OWN_LICENSE`.
        """
        return pulumi.get(self, "license_model")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Additional information about the current lifecycle state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="localAdgAutoFailoverMaxDataLossLimit")
    def local_adg_auto_failover_max_data_loss_limit(self) -> int:
        """
        Parameter that allows users to select an acceptable maximum data loss limit in seconds, up to which Automatic Failover will be triggered when necessary for a Local Autonomous Data Guard
        """
        return pulumi.get(self, "local_adg_auto_failover_max_data_loss_limit")

    @property
    @pulumi.getter(name="localDisasterRecoveryType")
    def local_disaster_recovery_type(self) -> str:
        """
        Indicates the local disaster recovery (DR) type of the Shared Autonomous Database. Autonomous Data Guard (ADG) DR type provides business critical DR with a faster recovery time objective (RTO) during failover or switchover. Backup-based DR type provides lower cost DR with a slower RTO during failover or switchover.
        """
        return pulumi.get(self, "local_disaster_recovery_type")

    @property
    @pulumi.getter(name="localStandbyDbs")
    def local_standby_dbs(self) -> Sequence['outputs.GetAutonomousDatabaseLocalStandbyDbResult']:
        """
        Autonomous Data Guard standby database details.
        """
        return pulumi.get(self, "local_standby_dbs")

    @property
    @pulumi.getter(name="longTermBackupSchedules")
    def long_term_backup_schedules(self) -> Sequence['outputs.GetAutonomousDatabaseLongTermBackupScheduleResult']:
        """
        Details for the long-term backup schedule.
        """
        return pulumi.get(self, "long_term_backup_schedules")

    @property
    @pulumi.getter(name="maxCpuCoreCount")
    def max_cpu_core_count(self) -> int:
        """
        The number of Max OCPU cores to be made available to the autonomous database with auto scaling of cpu enabled.
        """
        return pulumi.get(self, "max_cpu_core_count")

    @property
    @pulumi.getter(name="memoryPerOracleComputeUnitInGbs")
    def memory_per_oracle_compute_unit_in_gbs(self) -> int:
        """
        The amount of memory (in GBs) enabled per each CPU in the Autonomous VM Cluster.
        """
        return pulumi.get(self, "memory_per_oracle_compute_unit_in_gbs")

    @property
    @pulumi.getter(name="ncharacterSet")
    def ncharacter_set(self) -> str:
        """
        The national character set for the autonomous database.  The default is AL16UTF16. Allowed values are: AL16UTF16 or UTF8.
        """
        return pulumi.get(self, "ncharacter_set")

    @property
    @pulumi.getter(name="nextLongTermBackupTimeStamp")
    def next_long_term_backup_time_stamp(self) -> str:
        """
        The date and time when the next long-term backup would be created.
        """
        return pulumi.get(self, "next_long_term_backup_time_stamp")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Sequence[str]:
        """
        The list of [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the network security groups (NSGs) to which this resource belongs. Setting this to an empty list removes all resources from all NSGs. For more information about NSGs, see [Security Rules](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/securityrules.htm). **NsgIds restrictions:**
        * A network security group (NSG) is optional for Autonomous Databases with private access. The nsgIds list can be empty.
        """
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="ocpuCount")
    def ocpu_count(self) -> float:
        """
        The number of OCPU cores to be made available to the database.
        """
        return pulumi.get(self, "ocpu_count")

    @property
    @pulumi.getter(name="openMode")
    def open_mode(self) -> str:
        """
        Indicates the Autonomous Database mode. The database can be opened in `READ_ONLY` or `READ_WRITE` mode.
        """
        return pulumi.get(self, "open_mode")

    @property
    @pulumi.getter(name="operationsInsightsStatus")
    def operations_insights_status(self) -> str:
        """
        Status of Operations Insights for this Autonomous Database.
        """
        return pulumi.get(self, "operations_insights_status")

    @property
    @pulumi.getter(name="peerDbIds")
    def peer_db_ids(self) -> Sequence[str]:
        """
        The list of [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of standby databases located in Autonomous Data Guard remote regions that are associated with the source database. Note that for shared Exadata infrastructure, standby databases located in the same region as the source primary database do not have OCIDs.
        """
        return pulumi.get(self, "peer_db_ids")

    @property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> str:
        """
        The Autonomous Database permission level. Restricted mode allows access only by admin users.
        """
        return pulumi.get(self, "permission_level")

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> str:
        """
        The private endpoint for the resource.
        """
        return pulumi.get(self, "private_endpoint")

    @property
    @pulumi.getter(name="privateEndpointIp")
    def private_endpoint_ip(self) -> str:
        """
        The private endpoint Ip address for the resource.
        """
        return pulumi.get(self, "private_endpoint_ip")

    @property
    @pulumi.getter(name="privateEndpointLabel")
    def private_endpoint_label(self) -> str:
        """
        The private endpoint label for the resource.
        """
        return pulumi.get(self, "private_endpoint_label")

    @property
    @pulumi.getter(name="provisionableCpuses")
    def provisionable_cpuses(self) -> Sequence[float]:
        """
        An array of CPU values that an Autonomous Database can be scaled to.
        """
        return pulumi.get(self, "provisionable_cpuses")

    @property
    @pulumi.getter(name="refreshableMode")
    def refreshable_mode(self) -> str:
        """
        The refresh mode of the clone. AUTOMATIC indicates that the clone is automatically being refreshed with data from the source Autonomous Database.
        """
        return pulumi.get(self, "refreshable_mode")

    @property
    @pulumi.getter(name="refreshableStatus")
    def refreshable_status(self) -> str:
        """
        The refresh status of the clone. REFRESHING indicates that the clone is currently being refreshed with data from the source Autonomous Database.
        """
        return pulumi.get(self, "refreshable_status")

    @property
    @pulumi.getter(name="remoteDisasterRecoveryConfigurations")
    def remote_disaster_recovery_configurations(self) -> Sequence['outputs.GetAutonomousDatabaseRemoteDisasterRecoveryConfigurationResult']:
        """
        Configurations of a Disaster Recovery.
        """
        return pulumi.get(self, "remote_disaster_recovery_configurations")

    @property
    @pulumi.getter(name="remoteDisasterRecoveryType")
    def remote_disaster_recovery_type(self) -> str:
        return pulumi.get(self, "remote_disaster_recovery_type")

    @property
    @pulumi.getter(name="resourcePoolLeaderId")
    def resource_pool_leader_id(self) -> str:
        """
        The unique identifier for leader autonomous database OCID [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "resource_pool_leader_id")

    @property
    @pulumi.getter(name="resourcePoolSummaries")
    def resource_pool_summaries(self) -> Sequence['outputs.GetAutonomousDatabaseResourcePoolSummaryResult']:
        """
        The configuration details for resource pool
        """
        return pulumi.get(self, "resource_pool_summaries")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The Data Guard role of the Autonomous Container Database or Autonomous Database, if Autonomous Data Guard is enabled.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="rotateKeyTrigger")
    def rotate_key_trigger(self) -> bool:
        return pulumi.get(self, "rotate_key_trigger")

    @property
    @pulumi.getter(name="scheduledOperations")
    def scheduled_operations(self) -> Sequence['outputs.GetAutonomousDatabaseScheduledOperationResult']:
        """
        The list of scheduled operations.
        """
        return pulumi.get(self, "scheduled_operations")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> str:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="secretVersionNumber")
    def secret_version_number(self) -> int:
        return pulumi.get(self, "secret_version_number")

    @property
    @pulumi.getter(name="serviceConsoleUrl")
    def service_console_url(self) -> str:
        """
        The URL of the Service Console for the Autonomous Database.
        """
        return pulumi.get(self, "service_console_url")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the source Autonomous Database that was cloned to create the current Autonomous Database.
        """
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="standbyDbs")
    def standby_dbs(self) -> Sequence['outputs.GetAutonomousDatabaseStandbyDbResult']:
        """
        **Deprecated** Autonomous Data Guard standby database details.
        """
        return pulumi.get(self, "standby_dbs")

    @property
    @pulumi.getter(name="standbyWhitelistedIps")
    def standby_whitelisted_ips(self) -> Sequence[str]:
        """
        The client IP access control list (ACL). This feature is available for autonomous databases on [shared Exadata infrastructure](https://docs.oracle.com/en/cloud/paas/autonomous-database/index.html) and on Exadata Cloud@Customer. Only clients connecting from an IP address included in the ACL may access the Autonomous Database instance.
        """
        return pulumi.get(self, "standby_whitelisted_ips")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the Autonomous Database.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet the resource is associated with.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="supportedRegionsToCloneTos")
    def supported_regions_to_clone_tos(self) -> Sequence[str]:
        """
        The list of regions that support the creation of an Autonomous Database clone or an Autonomous Data Guard standby database.
        """
        return pulumi.get(self, "supported_regions_to_clone_tos")

    @property
    @pulumi.getter(name="switchoverTo")
    def switchover_to(self) -> str:
        return pulumi.get(self, "switchover_to")

    @property
    @pulumi.getter(name="switchoverToRemotePeerId")
    def switchover_to_remote_peer_id(self) -> str:
        return pulumi.get(self, "switchover_to_remote_peer_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the Autonomous Database was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeDataGuardRoleChanged")
    def time_data_guard_role_changed(self) -> str:
        """
        The date and time the Autonomous Data Guard role was switched for the Autonomous Database. For databases that have standbys in both the primary Data Guard region and a remote Data Guard standby region, this is the latest timestamp of either the database using the "primary" role in the primary Data Guard region, or database located in the remote Data Guard standby region.
        """
        return pulumi.get(self, "time_data_guard_role_changed")

    @property
    @pulumi.getter(name="timeDeletionOfFreeAutonomousDatabase")
    def time_deletion_of_free_autonomous_database(self) -> str:
        """
        The date and time the Always Free database will be automatically deleted because of inactivity. If the database is in the STOPPED state and without activity until this time, it will be deleted.
        """
        return pulumi.get(self, "time_deletion_of_free_autonomous_database")

    @property
    @pulumi.getter(name="timeDisasterRecoveryRoleChanged")
    def time_disaster_recovery_role_changed(self) -> str:
        """
        The date and time the Disaster Recovery role was switched for the standby Autonomous Database.
        """
        return pulumi.get(self, "time_disaster_recovery_role_changed")

    @property
    @pulumi.getter(name="timeLocalDataGuardEnabled")
    def time_local_data_guard_enabled(self) -> str:
        """
        The date and time that Autonomous Data Guard was enabled for an Autonomous Database where the standby was provisioned in the same region as the primary database.
        """
        return pulumi.get(self, "time_local_data_guard_enabled")

    @property
    @pulumi.getter(name="timeMaintenanceBegin")
    def time_maintenance_begin(self) -> str:
        """
        The date and time when maintenance will begin.
        """
        return pulumi.get(self, "time_maintenance_begin")

    @property
    @pulumi.getter(name="timeMaintenanceEnd")
    def time_maintenance_end(self) -> str:
        """
        The date and time when maintenance will end.
        """
        return pulumi.get(self, "time_maintenance_end")

    @property
    @pulumi.getter(name="timeOfJoiningResourcePool")
    def time_of_joining_resource_pool(self) -> str:
        """
        The time the member joined the resource pool.
        """
        return pulumi.get(self, "time_of_joining_resource_pool")

    @property
    @pulumi.getter(name="timeOfLastFailover")
    def time_of_last_failover(self) -> str:
        """
        The timestamp of the last failover operation.
        """
        return pulumi.get(self, "time_of_last_failover")

    @property
    @pulumi.getter(name="timeOfLastRefresh")
    def time_of_last_refresh(self) -> str:
        """
        The date and time when last refresh happened.
        """
        return pulumi.get(self, "time_of_last_refresh")

    @property
    @pulumi.getter(name="timeOfLastRefreshPoint")
    def time_of_last_refresh_point(self) -> str:
        """
        The refresh point timestamp (UTC). The refresh point is the time to which the database was most recently refreshed. Data created after the refresh point is not included in the refresh.
        """
        return pulumi.get(self, "time_of_last_refresh_point")

    @property
    @pulumi.getter(name="timeOfLastSwitchover")
    def time_of_last_switchover(self) -> str:
        """
        The timestamp of the last switchover operation for the Autonomous Database.
        """
        return pulumi.get(self, "time_of_last_switchover")

    @property
    @pulumi.getter(name="timeOfNextRefresh")
    def time_of_next_refresh(self) -> str:
        """
        The date and time of next refresh.
        """
        return pulumi.get(self, "time_of_next_refresh")

    @property
    @pulumi.getter(name="timeReclamationOfFreeAutonomousDatabase")
    def time_reclamation_of_free_autonomous_database(self) -> str:
        """
        The date and time the Always Free database will be stopped because of inactivity. If this time is reached without any database activity, the database will automatically be put into the STOPPED state.
        """
        return pulumi.get(self, "time_reclamation_of_free_autonomous_database")

    @property
    @pulumi.getter(name="timeUntilReconnectCloneEnabled")
    def time_until_reconnect_clone_enabled(self) -> str:
        """
        The time and date as an RFC3339 formatted string, e.g., 2022-01-01T12:00:00.000Z, to set the limit for a refreshable clone to be reconnected to its source database.
        """
        return pulumi.get(self, "time_until_reconnect_clone_enabled")

    @property
    @pulumi.getter
    def timestamp(self) -> str:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter(name="totalBackupStorageSizeInGbs")
    def total_backup_storage_size_in_gbs(self) -> float:
        """
        The backup storage to the database.
        """
        return pulumi.get(self, "total_backup_storage_size_in_gbs")

    @property
    @pulumi.getter(name="useLatestAvailableBackupTimeStamp")
    def use_latest_available_backup_time_stamp(self) -> bool:
        return pulumi.get(self, "use_latest_available_backup_time_stamp")

    @property
    @pulumi.getter(name="usedDataStorageSizeInGbs")
    def used_data_storage_size_in_gbs(self) -> int:
        """
        The storage space consumed by Autonomous Database in GBs.
        """
        return pulumi.get(self, "used_data_storage_size_in_gbs")

    @property
    @pulumi.getter(name="usedDataStorageSizeInTbs")
    def used_data_storage_size_in_tbs(self) -> int:
        """
        The amount of storage that has been used, in terabytes.
        """
        return pulumi.get(self, "used_data_storage_size_in_tbs")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
        """
        return pulumi.get(self, "vault_id")

    @property
    @pulumi.getter(name="whitelistedIps")
    def whitelisted_ips(self) -> Sequence[str]:
        """
        The client IP access control list (ACL). This feature is available for autonomous databases on [shared Exadata infrastructure](https://docs.oracle.com/en/cloud/paas/autonomous-database/index.html) and on Exadata Cloud@Customer. Only clients connecting from an IP address included in the ACL may access the Autonomous Database instance.
        """
        return pulumi.get(self, "whitelisted_ips")


class AwaitableGetAutonomousDatabaseResult(GetAutonomousDatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutonomousDatabaseResult(
            actual_used_data_storage_size_in_tbs=self.actual_used_data_storage_size_in_tbs,
            admin_password=self.admin_password,
            allocated_storage_size_in_tbs=self.allocated_storage_size_in_tbs,
            apex_details=self.apex_details,
            are_primary_whitelisted_ips_used=self.are_primary_whitelisted_ips_used,
            autonomous_container_database_id=self.autonomous_container_database_id,
            autonomous_database_backup_id=self.autonomous_database_backup_id,
            autonomous_database_id=self.autonomous_database_id,
            autonomous_maintenance_schedule_type=self.autonomous_maintenance_schedule_type,
            available_upgrade_versions=self.available_upgrade_versions,
            backup_configs=self.backup_configs,
            backup_retention_period_in_days=self.backup_retention_period_in_days,
            character_set=self.character_set,
            clone_type=self.clone_type,
            compartment_id=self.compartment_id,
            compute_count=self.compute_count,
            compute_model=self.compute_model,
            connection_strings=self.connection_strings,
            connection_urls=self.connection_urls,
            cpu_core_count=self.cpu_core_count,
            customer_contacts=self.customer_contacts,
            data_safe_status=self.data_safe_status,
            data_storage_size_in_gb=self.data_storage_size_in_gb,
            data_storage_size_in_tbs=self.data_storage_size_in_tbs,
            database_edition=self.database_edition,
            database_management_status=self.database_management_status,
            dataguard_region_type=self.dataguard_region_type,
            db_name=self.db_name,
            db_version=self.db_version,
            db_workload=self.db_workload,
            defined_tags=self.defined_tags,
            disaster_recovery_region_type=self.disaster_recovery_region_type,
            display_name=self.display_name,
            failed_data_recovery_in_seconds=self.failed_data_recovery_in_seconds,
            freeform_tags=self.freeform_tags,
            id=self.id,
            in_memory_area_in_gbs=self.in_memory_area_in_gbs,
            in_memory_percentage=self.in_memory_percentage,
            infrastructure_type=self.infrastructure_type,
            is_access_control_enabled=self.is_access_control_enabled,
            is_auto_scaling_enabled=self.is_auto_scaling_enabled,
            is_auto_scaling_for_storage_enabled=self.is_auto_scaling_for_storage_enabled,
            is_data_guard_enabled=self.is_data_guard_enabled,
            is_dedicated=self.is_dedicated,
            is_free_tier=self.is_free_tier,
            is_local_data_guard_enabled=self.is_local_data_guard_enabled,
            is_mtls_connection_required=self.is_mtls_connection_required,
            is_preview=self.is_preview,
            is_preview_version_with_service_terms_accepted=self.is_preview_version_with_service_terms_accepted,
            is_reconnect_clone_enabled=self.is_reconnect_clone_enabled,
            is_refreshable_clone=self.is_refreshable_clone,
            is_remote_data_guard_enabled=self.is_remote_data_guard_enabled,
            is_shrink_only=self.is_shrink_only,
            key_history_entries=self.key_history_entries,
            key_store_id=self.key_store_id,
            key_store_wallet_name=self.key_store_wallet_name,
            kms_key_id=self.kms_key_id,
            kms_key_lifecycle_details=self.kms_key_lifecycle_details,
            kms_key_version_id=self.kms_key_version_id,
            license_model=self.license_model,
            lifecycle_details=self.lifecycle_details,
            local_adg_auto_failover_max_data_loss_limit=self.local_adg_auto_failover_max_data_loss_limit,
            local_disaster_recovery_type=self.local_disaster_recovery_type,
            local_standby_dbs=self.local_standby_dbs,
            long_term_backup_schedules=self.long_term_backup_schedules,
            max_cpu_core_count=self.max_cpu_core_count,
            memory_per_oracle_compute_unit_in_gbs=self.memory_per_oracle_compute_unit_in_gbs,
            ncharacter_set=self.ncharacter_set,
            next_long_term_backup_time_stamp=self.next_long_term_backup_time_stamp,
            nsg_ids=self.nsg_ids,
            ocpu_count=self.ocpu_count,
            open_mode=self.open_mode,
            operations_insights_status=self.operations_insights_status,
            peer_db_ids=self.peer_db_ids,
            permission_level=self.permission_level,
            private_endpoint=self.private_endpoint,
            private_endpoint_ip=self.private_endpoint_ip,
            private_endpoint_label=self.private_endpoint_label,
            provisionable_cpuses=self.provisionable_cpuses,
            refreshable_mode=self.refreshable_mode,
            refreshable_status=self.refreshable_status,
            remote_disaster_recovery_configurations=self.remote_disaster_recovery_configurations,
            remote_disaster_recovery_type=self.remote_disaster_recovery_type,
            resource_pool_leader_id=self.resource_pool_leader_id,
            resource_pool_summaries=self.resource_pool_summaries,
            role=self.role,
            rotate_key_trigger=self.rotate_key_trigger,
            scheduled_operations=self.scheduled_operations,
            secret_id=self.secret_id,
            secret_version_number=self.secret_version_number,
            service_console_url=self.service_console_url,
            source=self.source,
            source_id=self.source_id,
            standby_dbs=self.standby_dbs,
            standby_whitelisted_ips=self.standby_whitelisted_ips,
            state=self.state,
            subnet_id=self.subnet_id,
            supported_regions_to_clone_tos=self.supported_regions_to_clone_tos,
            switchover_to=self.switchover_to,
            switchover_to_remote_peer_id=self.switchover_to_remote_peer_id,
            system_tags=self.system_tags,
            time_created=self.time_created,
            time_data_guard_role_changed=self.time_data_guard_role_changed,
            time_deletion_of_free_autonomous_database=self.time_deletion_of_free_autonomous_database,
            time_disaster_recovery_role_changed=self.time_disaster_recovery_role_changed,
            time_local_data_guard_enabled=self.time_local_data_guard_enabled,
            time_maintenance_begin=self.time_maintenance_begin,
            time_maintenance_end=self.time_maintenance_end,
            time_of_joining_resource_pool=self.time_of_joining_resource_pool,
            time_of_last_failover=self.time_of_last_failover,
            time_of_last_refresh=self.time_of_last_refresh,
            time_of_last_refresh_point=self.time_of_last_refresh_point,
            time_of_last_switchover=self.time_of_last_switchover,
            time_of_next_refresh=self.time_of_next_refresh,
            time_reclamation_of_free_autonomous_database=self.time_reclamation_of_free_autonomous_database,
            time_until_reconnect_clone_enabled=self.time_until_reconnect_clone_enabled,
            timestamp=self.timestamp,
            total_backup_storage_size_in_gbs=self.total_backup_storage_size_in_gbs,
            use_latest_available_backup_time_stamp=self.use_latest_available_backup_time_stamp,
            used_data_storage_size_in_gbs=self.used_data_storage_size_in_gbs,
            used_data_storage_size_in_tbs=self.used_data_storage_size_in_tbs,
            vault_id=self.vault_id,
            whitelisted_ips=self.whitelisted_ips)


def get_autonomous_database(autonomous_database_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutonomousDatabaseResult:
    """
    This data source provides details about a specific Autonomous Database resource in Oracle Cloud Infrastructure Database service.

    Gets the details of the specified Autonomous Database.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_autonomous_database = oci.Database.get_autonomous_database(autonomous_database_id=oci_database_autonomous_database["test_autonomous_database"]["id"])
    ```


    :param str autonomous_database_id: The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
    """
    __args__ = dict()
    __args__['autonomousDatabaseId'] = autonomous_database_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Database/getAutonomousDatabase:getAutonomousDatabase', __args__, opts=opts, typ=GetAutonomousDatabaseResult).value

    return AwaitableGetAutonomousDatabaseResult(
        actual_used_data_storage_size_in_tbs=pulumi.get(__ret__, 'actual_used_data_storage_size_in_tbs'),
        admin_password=pulumi.get(__ret__, 'admin_password'),
        allocated_storage_size_in_tbs=pulumi.get(__ret__, 'allocated_storage_size_in_tbs'),
        apex_details=pulumi.get(__ret__, 'apex_details'),
        are_primary_whitelisted_ips_used=pulumi.get(__ret__, 'are_primary_whitelisted_ips_used'),
        autonomous_container_database_id=pulumi.get(__ret__, 'autonomous_container_database_id'),
        autonomous_database_backup_id=pulumi.get(__ret__, 'autonomous_database_backup_id'),
        autonomous_database_id=pulumi.get(__ret__, 'autonomous_database_id'),
        autonomous_maintenance_schedule_type=pulumi.get(__ret__, 'autonomous_maintenance_schedule_type'),
        available_upgrade_versions=pulumi.get(__ret__, 'available_upgrade_versions'),
        backup_configs=pulumi.get(__ret__, 'backup_configs'),
        backup_retention_period_in_days=pulumi.get(__ret__, 'backup_retention_period_in_days'),
        character_set=pulumi.get(__ret__, 'character_set'),
        clone_type=pulumi.get(__ret__, 'clone_type'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        compute_count=pulumi.get(__ret__, 'compute_count'),
        compute_model=pulumi.get(__ret__, 'compute_model'),
        connection_strings=pulumi.get(__ret__, 'connection_strings'),
        connection_urls=pulumi.get(__ret__, 'connection_urls'),
        cpu_core_count=pulumi.get(__ret__, 'cpu_core_count'),
        customer_contacts=pulumi.get(__ret__, 'customer_contacts'),
        data_safe_status=pulumi.get(__ret__, 'data_safe_status'),
        data_storage_size_in_gb=pulumi.get(__ret__, 'data_storage_size_in_gb'),
        data_storage_size_in_tbs=pulumi.get(__ret__, 'data_storage_size_in_tbs'),
        database_edition=pulumi.get(__ret__, 'database_edition'),
        database_management_status=pulumi.get(__ret__, 'database_management_status'),
        dataguard_region_type=pulumi.get(__ret__, 'dataguard_region_type'),
        db_name=pulumi.get(__ret__, 'db_name'),
        db_version=pulumi.get(__ret__, 'db_version'),
        db_workload=pulumi.get(__ret__, 'db_workload'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        disaster_recovery_region_type=pulumi.get(__ret__, 'disaster_recovery_region_type'),
        display_name=pulumi.get(__ret__, 'display_name'),
        failed_data_recovery_in_seconds=pulumi.get(__ret__, 'failed_data_recovery_in_seconds'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        id=pulumi.get(__ret__, 'id'),
        in_memory_area_in_gbs=pulumi.get(__ret__, 'in_memory_area_in_gbs'),
        in_memory_percentage=pulumi.get(__ret__, 'in_memory_percentage'),
        infrastructure_type=pulumi.get(__ret__, 'infrastructure_type'),
        is_access_control_enabled=pulumi.get(__ret__, 'is_access_control_enabled'),
        is_auto_scaling_enabled=pulumi.get(__ret__, 'is_auto_scaling_enabled'),
        is_auto_scaling_for_storage_enabled=pulumi.get(__ret__, 'is_auto_scaling_for_storage_enabled'),
        is_data_guard_enabled=pulumi.get(__ret__, 'is_data_guard_enabled'),
        is_dedicated=pulumi.get(__ret__, 'is_dedicated'),
        is_free_tier=pulumi.get(__ret__, 'is_free_tier'),
        is_local_data_guard_enabled=pulumi.get(__ret__, 'is_local_data_guard_enabled'),
        is_mtls_connection_required=pulumi.get(__ret__, 'is_mtls_connection_required'),
        is_preview=pulumi.get(__ret__, 'is_preview'),
        is_preview_version_with_service_terms_accepted=pulumi.get(__ret__, 'is_preview_version_with_service_terms_accepted'),
        is_reconnect_clone_enabled=pulumi.get(__ret__, 'is_reconnect_clone_enabled'),
        is_refreshable_clone=pulumi.get(__ret__, 'is_refreshable_clone'),
        is_remote_data_guard_enabled=pulumi.get(__ret__, 'is_remote_data_guard_enabled'),
        is_shrink_only=pulumi.get(__ret__, 'is_shrink_only'),
        key_history_entries=pulumi.get(__ret__, 'key_history_entries'),
        key_store_id=pulumi.get(__ret__, 'key_store_id'),
        key_store_wallet_name=pulumi.get(__ret__, 'key_store_wallet_name'),
        kms_key_id=pulumi.get(__ret__, 'kms_key_id'),
        kms_key_lifecycle_details=pulumi.get(__ret__, 'kms_key_lifecycle_details'),
        kms_key_version_id=pulumi.get(__ret__, 'kms_key_version_id'),
        license_model=pulumi.get(__ret__, 'license_model'),
        lifecycle_details=pulumi.get(__ret__, 'lifecycle_details'),
        local_adg_auto_failover_max_data_loss_limit=pulumi.get(__ret__, 'local_adg_auto_failover_max_data_loss_limit'),
        local_disaster_recovery_type=pulumi.get(__ret__, 'local_disaster_recovery_type'),
        local_standby_dbs=pulumi.get(__ret__, 'local_standby_dbs'),
        long_term_backup_schedules=pulumi.get(__ret__, 'long_term_backup_schedules'),
        max_cpu_core_count=pulumi.get(__ret__, 'max_cpu_core_count'),
        memory_per_oracle_compute_unit_in_gbs=pulumi.get(__ret__, 'memory_per_oracle_compute_unit_in_gbs'),
        ncharacter_set=pulumi.get(__ret__, 'ncharacter_set'),
        next_long_term_backup_time_stamp=pulumi.get(__ret__, 'next_long_term_backup_time_stamp'),
        nsg_ids=pulumi.get(__ret__, 'nsg_ids'),
        ocpu_count=pulumi.get(__ret__, 'ocpu_count'),
        open_mode=pulumi.get(__ret__, 'open_mode'),
        operations_insights_status=pulumi.get(__ret__, 'operations_insights_status'),
        peer_db_ids=pulumi.get(__ret__, 'peer_db_ids'),
        permission_level=pulumi.get(__ret__, 'permission_level'),
        private_endpoint=pulumi.get(__ret__, 'private_endpoint'),
        private_endpoint_ip=pulumi.get(__ret__, 'private_endpoint_ip'),
        private_endpoint_label=pulumi.get(__ret__, 'private_endpoint_label'),
        provisionable_cpuses=pulumi.get(__ret__, 'provisionable_cpuses'),
        refreshable_mode=pulumi.get(__ret__, 'refreshable_mode'),
        refreshable_status=pulumi.get(__ret__, 'refreshable_status'),
        remote_disaster_recovery_configurations=pulumi.get(__ret__, 'remote_disaster_recovery_configurations'),
        remote_disaster_recovery_type=pulumi.get(__ret__, 'remote_disaster_recovery_type'),
        resource_pool_leader_id=pulumi.get(__ret__, 'resource_pool_leader_id'),
        resource_pool_summaries=pulumi.get(__ret__, 'resource_pool_summaries'),
        role=pulumi.get(__ret__, 'role'),
        rotate_key_trigger=pulumi.get(__ret__, 'rotate_key_trigger'),
        scheduled_operations=pulumi.get(__ret__, 'scheduled_operations'),
        secret_id=pulumi.get(__ret__, 'secret_id'),
        secret_version_number=pulumi.get(__ret__, 'secret_version_number'),
        service_console_url=pulumi.get(__ret__, 'service_console_url'),
        source=pulumi.get(__ret__, 'source'),
        source_id=pulumi.get(__ret__, 'source_id'),
        standby_dbs=pulumi.get(__ret__, 'standby_dbs'),
        standby_whitelisted_ips=pulumi.get(__ret__, 'standby_whitelisted_ips'),
        state=pulumi.get(__ret__, 'state'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        supported_regions_to_clone_tos=pulumi.get(__ret__, 'supported_regions_to_clone_tos'),
        switchover_to=pulumi.get(__ret__, 'switchover_to'),
        switchover_to_remote_peer_id=pulumi.get(__ret__, 'switchover_to_remote_peer_id'),
        system_tags=pulumi.get(__ret__, 'system_tags'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_data_guard_role_changed=pulumi.get(__ret__, 'time_data_guard_role_changed'),
        time_deletion_of_free_autonomous_database=pulumi.get(__ret__, 'time_deletion_of_free_autonomous_database'),
        time_disaster_recovery_role_changed=pulumi.get(__ret__, 'time_disaster_recovery_role_changed'),
        time_local_data_guard_enabled=pulumi.get(__ret__, 'time_local_data_guard_enabled'),
        time_maintenance_begin=pulumi.get(__ret__, 'time_maintenance_begin'),
        time_maintenance_end=pulumi.get(__ret__, 'time_maintenance_end'),
        time_of_joining_resource_pool=pulumi.get(__ret__, 'time_of_joining_resource_pool'),
        time_of_last_failover=pulumi.get(__ret__, 'time_of_last_failover'),
        time_of_last_refresh=pulumi.get(__ret__, 'time_of_last_refresh'),
        time_of_last_refresh_point=pulumi.get(__ret__, 'time_of_last_refresh_point'),
        time_of_last_switchover=pulumi.get(__ret__, 'time_of_last_switchover'),
        time_of_next_refresh=pulumi.get(__ret__, 'time_of_next_refresh'),
        time_reclamation_of_free_autonomous_database=pulumi.get(__ret__, 'time_reclamation_of_free_autonomous_database'),
        time_until_reconnect_clone_enabled=pulumi.get(__ret__, 'time_until_reconnect_clone_enabled'),
        timestamp=pulumi.get(__ret__, 'timestamp'),
        total_backup_storage_size_in_gbs=pulumi.get(__ret__, 'total_backup_storage_size_in_gbs'),
        use_latest_available_backup_time_stamp=pulumi.get(__ret__, 'use_latest_available_backup_time_stamp'),
        used_data_storage_size_in_gbs=pulumi.get(__ret__, 'used_data_storage_size_in_gbs'),
        used_data_storage_size_in_tbs=pulumi.get(__ret__, 'used_data_storage_size_in_tbs'),
        vault_id=pulumi.get(__ret__, 'vault_id'),
        whitelisted_ips=pulumi.get(__ret__, 'whitelisted_ips'))


@_utilities.lift_output_func(get_autonomous_database)
def get_autonomous_database_output(autonomous_database_id: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAutonomousDatabaseResult]:
    """
    This data source provides details about a specific Autonomous Database resource in Oracle Cloud Infrastructure Database service.

    Gets the details of the specified Autonomous Database.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_autonomous_database = oci.Database.get_autonomous_database(autonomous_database_id=oci_database_autonomous_database["test_autonomous_database"]["id"])
    ```


    :param str autonomous_database_id: The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
    """
    ...
