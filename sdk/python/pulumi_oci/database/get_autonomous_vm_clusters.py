# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAutonomousVmClustersResult',
    'AwaitableGetAutonomousVmClustersResult',
    'get_autonomous_vm_clusters',
    'get_autonomous_vm_clusters_output',
]

@pulumi.output_type
class GetAutonomousVmClustersResult:
    """
    A collection of values returned by getAutonomousVmClusters.
    """
    def __init__(__self__, autonomous_vm_clusters=None, compartment_id=None, display_name=None, exadata_infrastructure_id=None, filters=None, id=None, state=None):
        if autonomous_vm_clusters and not isinstance(autonomous_vm_clusters, list):
            raise TypeError("Expected argument 'autonomous_vm_clusters' to be a list")
        pulumi.set(__self__, "autonomous_vm_clusters", autonomous_vm_clusters)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if exadata_infrastructure_id and not isinstance(exadata_infrastructure_id, str):
            raise TypeError("Expected argument 'exadata_infrastructure_id' to be a str")
        pulumi.set(__self__, "exadata_infrastructure_id", exadata_infrastructure_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="autonomousVmClusters")
    def autonomous_vm_clusters(self) -> Sequence['outputs.GetAutonomousVmClustersAutonomousVmClusterResult']:
        """
        The list of autonomous_vm_clusters.
        """
        return pulumi.get(self, "autonomous_vm_clusters")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The user-friendly name for the Autonomous VM cluster. The name does not need to be unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="exadataInfrastructureId")
    def exadata_infrastructure_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
        """
        return pulumi.get(self, "exadata_infrastructure_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetAutonomousVmClustersFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of the Autonomous VM cluster.
        """
        return pulumi.get(self, "state")


class AwaitableGetAutonomousVmClustersResult(GetAutonomousVmClustersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutonomousVmClustersResult(
            autonomous_vm_clusters=self.autonomous_vm_clusters,
            compartment_id=self.compartment_id,
            display_name=self.display_name,
            exadata_infrastructure_id=self.exadata_infrastructure_id,
            filters=self.filters,
            id=self.id,
            state=self.state)


def get_autonomous_vm_clusters(compartment_id: Optional[str] = None,
                               display_name: Optional[str] = None,
                               exadata_infrastructure_id: Optional[str] = None,
                               filters: Optional[Sequence[pulumi.InputType['GetAutonomousVmClustersFilterArgs']]] = None,
                               state: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutonomousVmClustersResult:
    """
    This data source provides the list of Autonomous Vm Clusters in Oracle Cloud Infrastructure Database service.

    Gets a list of Exadata Cloud@Customer Autonomous VM clusters in the specified compartment. To list Autonomous VM Clusters in the Oracle Cloud, see [ListCloudAutonomousVmClusters](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/CloudAutonomousVmCluster/ListCloudAutonomousVmClusters).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_autonomous_vm_clusters = oci.Database.get_autonomous_vm_clusters(compartment_id=var["compartment_id"],
        display_name=var["autonomous_vm_cluster_display_name"],
        exadata_infrastructure_id=oci_database_exadata_infrastructure["test_exadata_infrastructure"]["id"],
        state=var["autonomous_vm_cluster_state"])
    ```


    :param str compartment_id: The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
    :param str display_name: A filter to return only resources that match the entire display name given. The match is not case sensitive.
    :param str exadata_infrastructure_id: If provided, filters the results for the given Exadata Infrastructure.
    :param str state: A filter to return only resources that match the given lifecycle state exactly.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['displayName'] = display_name
    __args__['exadataInfrastructureId'] = exadata_infrastructure_id
    __args__['filters'] = filters
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Database/getAutonomousVmClusters:getAutonomousVmClusters', __args__, opts=opts, typ=GetAutonomousVmClustersResult).value

    return AwaitableGetAutonomousVmClustersResult(
        autonomous_vm_clusters=pulumi.get(__ret__, 'autonomous_vm_clusters'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        display_name=pulumi.get(__ret__, 'display_name'),
        exadata_infrastructure_id=pulumi.get(__ret__, 'exadata_infrastructure_id'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        state=pulumi.get(__ret__, 'state'))


@_utilities.lift_output_func(get_autonomous_vm_clusters)
def get_autonomous_vm_clusters_output(compartment_id: Optional[pulumi.Input[str]] = None,
                                      display_name: Optional[pulumi.Input[Optional[str]]] = None,
                                      exadata_infrastructure_id: Optional[pulumi.Input[Optional[str]]] = None,
                                      filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetAutonomousVmClustersFilterArgs']]]]] = None,
                                      state: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAutonomousVmClustersResult]:
    """
    This data source provides the list of Autonomous Vm Clusters in Oracle Cloud Infrastructure Database service.

    Gets a list of Exadata Cloud@Customer Autonomous VM clusters in the specified compartment. To list Autonomous VM Clusters in the Oracle Cloud, see [ListCloudAutonomousVmClusters](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/CloudAutonomousVmCluster/ListCloudAutonomousVmClusters).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_autonomous_vm_clusters = oci.Database.get_autonomous_vm_clusters(compartment_id=var["compartment_id"],
        display_name=var["autonomous_vm_cluster_display_name"],
        exadata_infrastructure_id=oci_database_exadata_infrastructure["test_exadata_infrastructure"]["id"],
        state=var["autonomous_vm_cluster_state"])
    ```


    :param str compartment_id: The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
    :param str display_name: A filter to return only resources that match the entire display name given. The match is not case sensitive.
    :param str exadata_infrastructure_id: If provided, filters the results for the given Exadata Infrastructure.
    :param str state: A filter to return only resources that match the given lifecycle state exactly.
    """
    ...
