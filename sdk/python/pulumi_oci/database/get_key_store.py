# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetKeyStoreResult',
    'AwaitableGetKeyStoreResult',
    'get_key_store',
    'get_key_store_output',
]

@pulumi.output_type
class GetKeyStoreResult:
    """
    A collection of values returned by getKeyStore.
    """
    def __init__(__self__, associated_databases=None, compartment_id=None, defined_tags=None, display_name=None, freeform_tags=None, id=None, key_store_id=None, lifecycle_details=None, state=None, time_created=None, type_details=None):
        if associated_databases and not isinstance(associated_databases, list):
            raise TypeError("Expected argument 'associated_databases' to be a list")
        pulumi.set(__self__, "associated_databases", associated_databases)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_store_id and not isinstance(key_store_id, str):
            raise TypeError("Expected argument 'key_store_id' to be a str")
        pulumi.set(__self__, "key_store_id", key_store_id)
        if lifecycle_details and not isinstance(lifecycle_details, str):
            raise TypeError("Expected argument 'lifecycle_details' to be a str")
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if type_details and not isinstance(type_details, list):
            raise TypeError("Expected argument 'type_details' to be a list")
        pulumi.set(__self__, "type_details", type_details)

    @property
    @pulumi.getter(name="associatedDatabases")
    def associated_databases(self) -> Sequence['outputs.GetKeyStoreAssociatedDatabaseResult']:
        """
        List of databases associated with the key store.
        """
        return pulumi.get(self, "associated_databases")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The user-friendly name for the key store. The name does not need to be unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the key store.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyStoreId")
    def key_store_id(self) -> str:
        return pulumi.get(self, "key_store_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Additional information about the current lifecycle state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the key store.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the key store was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="typeDetails")
    def type_details(self) -> Sequence['outputs.GetKeyStoreTypeDetailResult']:
        """
        Key store type details.
        """
        return pulumi.get(self, "type_details")


class AwaitableGetKeyStoreResult(GetKeyStoreResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKeyStoreResult(
            associated_databases=self.associated_databases,
            compartment_id=self.compartment_id,
            defined_tags=self.defined_tags,
            display_name=self.display_name,
            freeform_tags=self.freeform_tags,
            id=self.id,
            key_store_id=self.key_store_id,
            lifecycle_details=self.lifecycle_details,
            state=self.state,
            time_created=self.time_created,
            type_details=self.type_details)


def get_key_store(key_store_id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKeyStoreResult:
    """
    This data source provides details about a specific Key Store resource in Oracle Cloud Infrastructure Database service.

    Gets information about the specified key store.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_key_store = oci.Database.get_key_store(key_store_id=oci_database_key_store["test_key_store"]["id"])
    ```


    :param str key_store_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the key store.
    """
    __args__ = dict()
    __args__['keyStoreId'] = key_store_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Database/getKeyStore:getKeyStore', __args__, opts=opts, typ=GetKeyStoreResult).value

    return AwaitableGetKeyStoreResult(
        associated_databases=pulumi.get(__ret__, 'associated_databases'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        display_name=pulumi.get(__ret__, 'display_name'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        id=pulumi.get(__ret__, 'id'),
        key_store_id=pulumi.get(__ret__, 'key_store_id'),
        lifecycle_details=pulumi.get(__ret__, 'lifecycle_details'),
        state=pulumi.get(__ret__, 'state'),
        time_created=pulumi.get(__ret__, 'time_created'),
        type_details=pulumi.get(__ret__, 'type_details'))


@_utilities.lift_output_func(get_key_store)
def get_key_store_output(key_store_id: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetKeyStoreResult]:
    """
    This data source provides details about a specific Key Store resource in Oracle Cloud Infrastructure Database service.

    Gets information about the specified key store.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_key_store = oci.Database.get_key_store(key_store_id=oci_database_key_store["test_key_store"]["id"])
    ```


    :param str key_store_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the key store.
    """
    ...
