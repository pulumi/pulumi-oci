# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetOneoffPatchResult',
    'AwaitableGetOneoffPatchResult',
    'get_oneoff_patch',
    'get_oneoff_patch_output',
]

@pulumi.output_type
class GetOneoffPatchResult:
    """
    A collection of values returned by getOneoffPatch.
    """
    def __init__(__self__, compartment_id=None, db_version=None, defined_tags=None, display_name=None, download_oneoff_patch_trigger=None, freeform_tags=None, id=None, lifecycle_details=None, one_off_patches=None, oneoff_patch_id=None, release_update=None, sha256sum=None, size_in_kbs=None, state=None, time_created=None, time_of_expiration=None, time_updated=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if db_version and not isinstance(db_version, str):
            raise TypeError("Expected argument 'db_version' to be a str")
        pulumi.set(__self__, "db_version", db_version)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if download_oneoff_patch_trigger and not isinstance(download_oneoff_patch_trigger, int):
            raise TypeError("Expected argument 'download_oneoff_patch_trigger' to be a int")
        pulumi.set(__self__, "download_oneoff_patch_trigger", download_oneoff_patch_trigger)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_details and not isinstance(lifecycle_details, str):
            raise TypeError("Expected argument 'lifecycle_details' to be a str")
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if one_off_patches and not isinstance(one_off_patches, list):
            raise TypeError("Expected argument 'one_off_patches' to be a list")
        pulumi.set(__self__, "one_off_patches", one_off_patches)
        if oneoff_patch_id and not isinstance(oneoff_patch_id, str):
            raise TypeError("Expected argument 'oneoff_patch_id' to be a str")
        pulumi.set(__self__, "oneoff_patch_id", oneoff_patch_id)
        if release_update and not isinstance(release_update, str):
            raise TypeError("Expected argument 'release_update' to be a str")
        pulumi.set(__self__, "release_update", release_update)
        if sha256sum and not isinstance(sha256sum, str):
            raise TypeError("Expected argument 'sha256sum' to be a str")
        pulumi.set(__self__, "sha256sum", sha256sum)
        if size_in_kbs and not isinstance(size_in_kbs, float):
            raise TypeError("Expected argument 'size_in_kbs' to be a float")
        pulumi.set(__self__, "size_in_kbs", size_in_kbs)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_of_expiration and not isinstance(time_of_expiration, str):
            raise TypeError("Expected argument 'time_of_expiration' to be a str")
        pulumi.set(__self__, "time_of_expiration", time_of_expiration)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="downloadOneoffPatchTrigger")
    def download_oneoff_patch_trigger(self) -> Optional[int]:
        return pulumi.get(self, "download_oneoff_patch_trigger")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="oneOffPatches")
    def one_off_patches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "one_off_patches")

    @property
    @pulumi.getter(name="oneoffPatchId")
    def oneoff_patch_id(self) -> str:
        return pulumi.get(self, "oneoff_patch_id")

    @property
    @pulumi.getter(name="releaseUpdate")
    def release_update(self) -> Optional[str]:
        return pulumi.get(self, "release_update")

    @property
    @pulumi.getter
    def sha256sum(self) -> Optional[str]:
        return pulumi.get(self, "sha256sum")

    @property
    @pulumi.getter(name="sizeInKbs")
    def size_in_kbs(self) -> Optional[float]:
        return pulumi.get(self, "size_in_kbs")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeOfExpiration")
    def time_of_expiration(self) -> Optional[str]:
        return pulumi.get(self, "time_of_expiration")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


class AwaitableGetOneoffPatchResult(GetOneoffPatchResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOneoffPatchResult(
            compartment_id=self.compartment_id,
            db_version=self.db_version,
            defined_tags=self.defined_tags,
            display_name=self.display_name,
            download_oneoff_patch_trigger=self.download_oneoff_patch_trigger,
            freeform_tags=self.freeform_tags,
            id=self.id,
            lifecycle_details=self.lifecycle_details,
            one_off_patches=self.one_off_patches,
            oneoff_patch_id=self.oneoff_patch_id,
            release_update=self.release_update,
            sha256sum=self.sha256sum,
            size_in_kbs=self.size_in_kbs,
            state=self.state,
            time_created=self.time_created,
            time_of_expiration=self.time_of_expiration,
            time_updated=self.time_updated)


def get_oneoff_patch(oneoff_patch_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOneoffPatchResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['oneoffPatchId'] = oneoff_patch_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Database/getOneoffPatch:getOneoffPatch', __args__, opts=opts, typ=GetOneoffPatchResult).value

    return AwaitableGetOneoffPatchResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        db_version=pulumi.get(__ret__, 'db_version'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        display_name=pulumi.get(__ret__, 'display_name'),
        download_oneoff_patch_trigger=pulumi.get(__ret__, 'download_oneoff_patch_trigger'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        id=pulumi.get(__ret__, 'id'),
        lifecycle_details=pulumi.get(__ret__, 'lifecycle_details'),
        one_off_patches=pulumi.get(__ret__, 'one_off_patches'),
        oneoff_patch_id=pulumi.get(__ret__, 'oneoff_patch_id'),
        release_update=pulumi.get(__ret__, 'release_update'),
        sha256sum=pulumi.get(__ret__, 'sha256sum'),
        size_in_kbs=pulumi.get(__ret__, 'size_in_kbs'),
        state=pulumi.get(__ret__, 'state'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_of_expiration=pulumi.get(__ret__, 'time_of_expiration'),
        time_updated=pulumi.get(__ret__, 'time_updated'))


@_utilities.lift_output_func(get_oneoff_patch)
def get_oneoff_patch_output(oneoff_patch_id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOneoffPatchResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
