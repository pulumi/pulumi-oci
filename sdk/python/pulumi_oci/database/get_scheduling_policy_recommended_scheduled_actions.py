# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSchedulingPolicyRecommendedScheduledActionsResult',
    'AwaitableGetSchedulingPolicyRecommendedScheduledActionsResult',
    'get_scheduling_policy_recommended_scheduled_actions',
    'get_scheduling_policy_recommended_scheduled_actions_output',
]

@pulumi.output_type
class GetSchedulingPolicyRecommendedScheduledActionsResult:
    """
    A collection of values returned by getSchedulingPolicyRecommendedScheduledActions.
    """
    def __init__(__self__, filters=None, id=None, plan_intent=None, recommended_scheduled_actions_collections=None, scheduling_policy_id=None, scheduling_policy_target_resource_id=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if plan_intent and not isinstance(plan_intent, str):
            raise TypeError("Expected argument 'plan_intent' to be a str")
        pulumi.set(__self__, "plan_intent", plan_intent)
        if recommended_scheduled_actions_collections and not isinstance(recommended_scheduled_actions_collections, list):
            raise TypeError("Expected argument 'recommended_scheduled_actions_collections' to be a list")
        pulumi.set(__self__, "recommended_scheduled_actions_collections", recommended_scheduled_actions_collections)
        if scheduling_policy_id and not isinstance(scheduling_policy_id, str):
            raise TypeError("Expected argument 'scheduling_policy_id' to be a str")
        pulumi.set(__self__, "scheduling_policy_id", scheduling_policy_id)
        if scheduling_policy_target_resource_id and not isinstance(scheduling_policy_target_resource_id, str):
            raise TypeError("Expected argument 'scheduling_policy_target_resource_id' to be a str")
        pulumi.set(__self__, "scheduling_policy_target_resource_id", scheduling_policy_target_resource_id)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetSchedulingPolicyRecommendedScheduledActionsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="planIntent")
    def plan_intent(self) -> str:
        return pulumi.get(self, "plan_intent")

    @property
    @pulumi.getter(name="recommendedScheduledActionsCollections")
    def recommended_scheduled_actions_collections(self) -> Sequence['outputs.GetSchedulingPolicyRecommendedScheduledActionsRecommendedScheduledActionsCollectionResult']:
        """
        The list of recommended_scheduled_actions_collection.
        """
        return pulumi.get(self, "recommended_scheduled_actions_collections")

    @property
    @pulumi.getter(name="schedulingPolicyId")
    def scheduling_policy_id(self) -> str:
        return pulumi.get(self, "scheduling_policy_id")

    @property
    @pulumi.getter(name="schedulingPolicyTargetResourceId")
    def scheduling_policy_target_resource_id(self) -> str:
        return pulumi.get(self, "scheduling_policy_target_resource_id")


class AwaitableGetSchedulingPolicyRecommendedScheduledActionsResult(GetSchedulingPolicyRecommendedScheduledActionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchedulingPolicyRecommendedScheduledActionsResult(
            filters=self.filters,
            id=self.id,
            plan_intent=self.plan_intent,
            recommended_scheduled_actions_collections=self.recommended_scheduled_actions_collections,
            scheduling_policy_id=self.scheduling_policy_id,
            scheduling_policy_target_resource_id=self.scheduling_policy_target_resource_id)


def get_scheduling_policy_recommended_scheduled_actions(filters: Optional[Sequence[Union['GetSchedulingPolicyRecommendedScheduledActionsFilterArgs', 'GetSchedulingPolicyRecommendedScheduledActionsFilterArgsDict']]] = None,
                                                        plan_intent: Optional[str] = None,
                                                        scheduling_policy_id: Optional[str] = None,
                                                        scheduling_policy_target_resource_id: Optional[str] = None,
                                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchedulingPolicyRecommendedScheduledActionsResult:
    """
    This data source provides the list of Scheduling Policy Recommended Scheduled Actions in Oracle Cloud Infrastructure Database service.

    Returns a recommended Scheduled Actions configuration for a given resource, plan intent and scheduling policy.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_scheduling_policy_recommended_scheduled_actions = oci.Database.get_scheduling_policy_recommended_scheduled_actions(plan_intent=scheduling_policy_recommended_scheduled_action_plan_intent,
        scheduling_policy_id=test_scheduling_policy["id"],
        scheduling_policy_target_resource_id=test_resource["id"])
    ```


    :param str plan_intent: The scheduling plan intent the scheduled actions will be for.
    :param str scheduling_policy_id: The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
    :param str scheduling_policy_target_resource_id: The target resource [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) the scheduled actions will be for.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['planIntent'] = plan_intent
    __args__['schedulingPolicyId'] = scheduling_policy_id
    __args__['schedulingPolicyTargetResourceId'] = scheduling_policy_target_resource_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Database/getSchedulingPolicyRecommendedScheduledActions:getSchedulingPolicyRecommendedScheduledActions', __args__, opts=opts, typ=GetSchedulingPolicyRecommendedScheduledActionsResult).value

    return AwaitableGetSchedulingPolicyRecommendedScheduledActionsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        plan_intent=pulumi.get(__ret__, 'plan_intent'),
        recommended_scheduled_actions_collections=pulumi.get(__ret__, 'recommended_scheduled_actions_collections'),
        scheduling_policy_id=pulumi.get(__ret__, 'scheduling_policy_id'),
        scheduling_policy_target_resource_id=pulumi.get(__ret__, 'scheduling_policy_target_resource_id'))
def get_scheduling_policy_recommended_scheduled_actions_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetSchedulingPolicyRecommendedScheduledActionsFilterArgs', 'GetSchedulingPolicyRecommendedScheduledActionsFilterArgsDict']]]]] = None,
                                                               plan_intent: Optional[pulumi.Input[str]] = None,
                                                               scheduling_policy_id: Optional[pulumi.Input[str]] = None,
                                                               scheduling_policy_target_resource_id: Optional[pulumi.Input[str]] = None,
                                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSchedulingPolicyRecommendedScheduledActionsResult]:
    """
    This data source provides the list of Scheduling Policy Recommended Scheduled Actions in Oracle Cloud Infrastructure Database service.

    Returns a recommended Scheduled Actions configuration for a given resource, plan intent and scheduling policy.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_scheduling_policy_recommended_scheduled_actions = oci.Database.get_scheduling_policy_recommended_scheduled_actions(plan_intent=scheduling_policy_recommended_scheduled_action_plan_intent,
        scheduling_policy_id=test_scheduling_policy["id"],
        scheduling_policy_target_resource_id=test_resource["id"])
    ```


    :param str plan_intent: The scheduling plan intent the scheduled actions will be for.
    :param str scheduling_policy_id: The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
    :param str scheduling_policy_target_resource_id: The target resource [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) the scheduled actions will be for.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['planIntent'] = plan_intent
    __args__['schedulingPolicyId'] = scheduling_policy_id
    __args__['schedulingPolicyTargetResourceId'] = scheduling_policy_target_resource_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:Database/getSchedulingPolicyRecommendedScheduledActions:getSchedulingPolicyRecommendedScheduledActions', __args__, opts=opts, typ=GetSchedulingPolicyRecommendedScheduledActionsResult)
    return __ret__.apply(lambda __response__: GetSchedulingPolicyRecommendedScheduledActionsResult(
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        plan_intent=pulumi.get(__response__, 'plan_intent'),
        recommended_scheduled_actions_collections=pulumi.get(__response__, 'recommended_scheduled_actions_collections'),
        scheduling_policy_id=pulumi.get(__response__, 'scheduling_policy_id'),
        scheduling_policy_target_resource_id=pulumi.get(__response__, 'scheduling_policy_target_resource_id')))
