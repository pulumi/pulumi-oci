# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetVmClusterRecommendedNetworkResult',
    'AwaitableGetVmClusterRecommendedNetworkResult',
    'get_vm_cluster_recommended_network',
    'get_vm_cluster_recommended_network_output',
]

@pulumi.output_type
class GetVmClusterRecommendedNetworkResult:
    """
    A collection of values returned by getVmClusterRecommendedNetwork.
    """
    def __init__(__self__, compartment_id=None, db_servers=None, defined_tags=None, display_name=None, dns=None, dr_scan_listener_port_tcp=None, dr_scans=None, exadata_infrastructure_id=None, freeform_tags=None, id=None, networks=None, ntps=None, scan_listener_port_tcp=None, scan_listener_port_tcp_ssl=None, scans=None, vm_networks=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if db_servers and not isinstance(db_servers, list):
            raise TypeError("Expected argument 'db_servers' to be a list")
        pulumi.set(__self__, "db_servers", db_servers)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if dns and not isinstance(dns, list):
            raise TypeError("Expected argument 'dns' to be a list")
        pulumi.set(__self__, "dns", dns)
        if dr_scan_listener_port_tcp and not isinstance(dr_scan_listener_port_tcp, int):
            raise TypeError("Expected argument 'dr_scan_listener_port_tcp' to be a int")
        pulumi.set(__self__, "dr_scan_listener_port_tcp", dr_scan_listener_port_tcp)
        if dr_scans and not isinstance(dr_scans, list):
            raise TypeError("Expected argument 'dr_scans' to be a list")
        pulumi.set(__self__, "dr_scans", dr_scans)
        if exadata_infrastructure_id and not isinstance(exadata_infrastructure_id, str):
            raise TypeError("Expected argument 'exadata_infrastructure_id' to be a str")
        pulumi.set(__self__, "exadata_infrastructure_id", exadata_infrastructure_id)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if networks and not isinstance(networks, list):
            raise TypeError("Expected argument 'networks' to be a list")
        pulumi.set(__self__, "networks", networks)
        if ntps and not isinstance(ntps, list):
            raise TypeError("Expected argument 'ntps' to be a list")
        pulumi.set(__self__, "ntps", ntps)
        if scan_listener_port_tcp and not isinstance(scan_listener_port_tcp, int):
            raise TypeError("Expected argument 'scan_listener_port_tcp' to be a int")
        pulumi.set(__self__, "scan_listener_port_tcp", scan_listener_port_tcp)
        if scan_listener_port_tcp_ssl and not isinstance(scan_listener_port_tcp_ssl, int):
            raise TypeError("Expected argument 'scan_listener_port_tcp_ssl' to be a int")
        pulumi.set(__self__, "scan_listener_port_tcp_ssl", scan_listener_port_tcp_ssl)
        if scans and not isinstance(scans, list):
            raise TypeError("Expected argument 'scans' to be a list")
        pulumi.set(__self__, "scans", scans)
        if vm_networks and not isinstance(vm_networks, list):
            raise TypeError("Expected argument 'vm_networks' to be a list")
        pulumi.set(__self__, "vm_networks", vm_networks)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbServers")
    def db_servers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_servers")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def dns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="drScanListenerPortTcp")
    def dr_scan_listener_port_tcp(self) -> Optional[int]:
        return pulumi.get(self, "dr_scan_listener_port_tcp")

    @property
    @pulumi.getter(name="drScans")
    def dr_scans(self) -> Optional[Sequence['outputs.GetVmClusterRecommendedNetworkDrScanResult']]:
        return pulumi.get(self, "dr_scans")

    @property
    @pulumi.getter(name="exadataInfrastructureId")
    def exadata_infrastructure_id(self) -> str:
        return pulumi.get(self, "exadata_infrastructure_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def networks(self) -> Sequence['outputs.GetVmClusterRecommendedNetworkNetworkResult']:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def ntps(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ntps")

    @property
    @pulumi.getter(name="scanListenerPortTcp")
    def scan_listener_port_tcp(self) -> Optional[int]:
        return pulumi.get(self, "scan_listener_port_tcp")

    @property
    @pulumi.getter(name="scanListenerPortTcpSsl")
    def scan_listener_port_tcp_ssl(self) -> Optional[int]:
        return pulumi.get(self, "scan_listener_port_tcp_ssl")

    @property
    @pulumi.getter
    def scans(self) -> Optional[Sequence['outputs.GetVmClusterRecommendedNetworkScanResult']]:
        return pulumi.get(self, "scans")

    @property
    @pulumi.getter(name="vmNetworks")
    def vm_networks(self) -> Optional[Sequence['outputs.GetVmClusterRecommendedNetworkVmNetworkResult']]:
        return pulumi.get(self, "vm_networks")


class AwaitableGetVmClusterRecommendedNetworkResult(GetVmClusterRecommendedNetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVmClusterRecommendedNetworkResult(
            compartment_id=self.compartment_id,
            db_servers=self.db_servers,
            defined_tags=self.defined_tags,
            display_name=self.display_name,
            dns=self.dns,
            dr_scan_listener_port_tcp=self.dr_scan_listener_port_tcp,
            dr_scans=self.dr_scans,
            exadata_infrastructure_id=self.exadata_infrastructure_id,
            freeform_tags=self.freeform_tags,
            id=self.id,
            networks=self.networks,
            ntps=self.ntps,
            scan_listener_port_tcp=self.scan_listener_port_tcp,
            scan_listener_port_tcp_ssl=self.scan_listener_port_tcp_ssl,
            scans=self.scans,
            vm_networks=self.vm_networks)


def get_vm_cluster_recommended_network(compartment_id: Optional[str] = None,
                                       db_servers: Optional[Sequence[str]] = None,
                                       defined_tags: Optional[Mapping[str, Any]] = None,
                                       display_name: Optional[str] = None,
                                       dns: Optional[Sequence[str]] = None,
                                       dr_scan_listener_port_tcp: Optional[int] = None,
                                       exadata_infrastructure_id: Optional[str] = None,
                                       freeform_tags: Optional[Mapping[str, Any]] = None,
                                       networks: Optional[Sequence[pulumi.InputType['GetVmClusterRecommendedNetworkNetworkArgs']]] = None,
                                       ntps: Optional[Sequence[str]] = None,
                                       scan_listener_port_tcp: Optional[int] = None,
                                       scan_listener_port_tcp_ssl: Optional[int] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVmClusterRecommendedNetworkResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['dbServers'] = db_servers
    __args__['definedTags'] = defined_tags
    __args__['displayName'] = display_name
    __args__['dns'] = dns
    __args__['drScanListenerPortTcp'] = dr_scan_listener_port_tcp
    __args__['exadataInfrastructureId'] = exadata_infrastructure_id
    __args__['freeformTags'] = freeform_tags
    __args__['networks'] = networks
    __args__['ntps'] = ntps
    __args__['scanListenerPortTcp'] = scan_listener_port_tcp
    __args__['scanListenerPortTcpSsl'] = scan_listener_port_tcp_ssl
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:Database/getVmClusterRecommendedNetwork:getVmClusterRecommendedNetwork', __args__, opts=opts, typ=GetVmClusterRecommendedNetworkResult).value

    return AwaitableGetVmClusterRecommendedNetworkResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        db_servers=pulumi.get(__ret__, 'db_servers'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        display_name=pulumi.get(__ret__, 'display_name'),
        dns=pulumi.get(__ret__, 'dns'),
        dr_scan_listener_port_tcp=pulumi.get(__ret__, 'dr_scan_listener_port_tcp'),
        dr_scans=pulumi.get(__ret__, 'dr_scans'),
        exadata_infrastructure_id=pulumi.get(__ret__, 'exadata_infrastructure_id'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        id=pulumi.get(__ret__, 'id'),
        networks=pulumi.get(__ret__, 'networks'),
        ntps=pulumi.get(__ret__, 'ntps'),
        scan_listener_port_tcp=pulumi.get(__ret__, 'scan_listener_port_tcp'),
        scan_listener_port_tcp_ssl=pulumi.get(__ret__, 'scan_listener_port_tcp_ssl'),
        scans=pulumi.get(__ret__, 'scans'),
        vm_networks=pulumi.get(__ret__, 'vm_networks'))


@_utilities.lift_output_func(get_vm_cluster_recommended_network)
def get_vm_cluster_recommended_network_output(compartment_id: Optional[pulumi.Input[str]] = None,
                                              db_servers: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                              defined_tags: Optional[pulumi.Input[Optional[Mapping[str, Any]]]] = None,
                                              display_name: Optional[pulumi.Input[str]] = None,
                                              dns: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                              dr_scan_listener_port_tcp: Optional[pulumi.Input[Optional[int]]] = None,
                                              exadata_infrastructure_id: Optional[pulumi.Input[str]] = None,
                                              freeform_tags: Optional[pulumi.Input[Optional[Mapping[str, Any]]]] = None,
                                              networks: Optional[pulumi.Input[Sequence[pulumi.InputType['GetVmClusterRecommendedNetworkNetworkArgs']]]] = None,
                                              ntps: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                              scan_listener_port_tcp: Optional[pulumi.Input[Optional[int]]] = None,
                                              scan_listener_port_tcp_ssl: Optional[pulumi.Input[Optional[int]]] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVmClusterRecommendedNetworkResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
