# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PluggableDatabaseArgs', 'PluggableDatabase']

@pulumi.input_type
class PluggableDatabaseArgs:
    def __init__(__self__, *,
                 container_database_id: pulumi.Input[str],
                 pdb_name: pulumi.Input[str],
                 container_database_admin_password: Optional[pulumi.Input[str]] = None,
                 convert_to_regular_trigger: Optional[pulumi.Input[int]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 pdb_admin_password: Optional[pulumi.Input[str]] = None,
                 pdb_creation_type_details: Optional[pulumi.Input['PluggableDatabasePdbCreationTypeDetailsArgs']] = None,
                 refresh_trigger: Optional[pulumi.Input[int]] = None,
                 rotate_key_trigger: Optional[pulumi.Input[int]] = None,
                 should_create_pdb_backup: Optional[pulumi.Input[bool]] = None,
                 should_pdb_admin_account_be_locked: Optional[pulumi.Input[bool]] = None,
                 tde_wallet_password: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PluggableDatabase resource.
        """
        pulumi.set(__self__, "container_database_id", container_database_id)
        pulumi.set(__self__, "pdb_name", pdb_name)
        if container_database_admin_password is not None:
            pulumi.set(__self__, "container_database_admin_password", container_database_admin_password)
        if convert_to_regular_trigger is not None:
            pulumi.set(__self__, "convert_to_regular_trigger", convert_to_regular_trigger)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if pdb_admin_password is not None:
            pulumi.set(__self__, "pdb_admin_password", pdb_admin_password)
        if pdb_creation_type_details is not None:
            pulumi.set(__self__, "pdb_creation_type_details", pdb_creation_type_details)
        if refresh_trigger is not None:
            pulumi.set(__self__, "refresh_trigger", refresh_trigger)
        if rotate_key_trigger is not None:
            pulumi.set(__self__, "rotate_key_trigger", rotate_key_trigger)
        if should_create_pdb_backup is not None:
            pulumi.set(__self__, "should_create_pdb_backup", should_create_pdb_backup)
        if should_pdb_admin_account_be_locked is not None:
            pulumi.set(__self__, "should_pdb_admin_account_be_locked", should_pdb_admin_account_be_locked)
        if tde_wallet_password is not None:
            pulumi.set(__self__, "tde_wallet_password", tde_wallet_password)

    @property
    @pulumi.getter(name="containerDatabaseId")
    def container_database_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container_database_id")

    @container_database_id.setter
    def container_database_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_database_id", value)

    @property
    @pulumi.getter(name="pdbName")
    def pdb_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pdb_name")

    @pdb_name.setter
    def pdb_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "pdb_name", value)

    @property
    @pulumi.getter(name="containerDatabaseAdminPassword")
    def container_database_admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_database_admin_password")

    @container_database_admin_password.setter
    def container_database_admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_database_admin_password", value)

    @property
    @pulumi.getter(name="convertToRegularTrigger")
    def convert_to_regular_trigger(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "convert_to_regular_trigger")

    @convert_to_regular_trigger.setter
    def convert_to_regular_trigger(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "convert_to_regular_trigger", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="pdbAdminPassword")
    def pdb_admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdb_admin_password")

    @pdb_admin_password.setter
    def pdb_admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdb_admin_password", value)

    @property
    @pulumi.getter(name="pdbCreationTypeDetails")
    def pdb_creation_type_details(self) -> Optional[pulumi.Input['PluggableDatabasePdbCreationTypeDetailsArgs']]:
        return pulumi.get(self, "pdb_creation_type_details")

    @pdb_creation_type_details.setter
    def pdb_creation_type_details(self, value: Optional[pulumi.Input['PluggableDatabasePdbCreationTypeDetailsArgs']]):
        pulumi.set(self, "pdb_creation_type_details", value)

    @property
    @pulumi.getter(name="refreshTrigger")
    def refresh_trigger(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_trigger")

    @refresh_trigger.setter
    def refresh_trigger(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_trigger", value)

    @property
    @pulumi.getter(name="rotateKeyTrigger")
    def rotate_key_trigger(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rotate_key_trigger")

    @rotate_key_trigger.setter
    def rotate_key_trigger(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rotate_key_trigger", value)

    @property
    @pulumi.getter(name="shouldCreatePdbBackup")
    def should_create_pdb_backup(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "should_create_pdb_backup")

    @should_create_pdb_backup.setter
    def should_create_pdb_backup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_create_pdb_backup", value)

    @property
    @pulumi.getter(name="shouldPdbAdminAccountBeLocked")
    def should_pdb_admin_account_be_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "should_pdb_admin_account_be_locked")

    @should_pdb_admin_account_be_locked.setter
    def should_pdb_admin_account_be_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_pdb_admin_account_be_locked", value)

    @property
    @pulumi.getter(name="tdeWalletPassword")
    def tde_wallet_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tde_wallet_password")

    @tde_wallet_password.setter
    def tde_wallet_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tde_wallet_password", value)


@pulumi.input_type
class _PluggableDatabaseState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 connection_strings: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabaseConnectionStringArgs']]]] = None,
                 container_database_admin_password: Optional[pulumi.Input[str]] = None,
                 container_database_id: Optional[pulumi.Input[str]] = None,
                 convert_to_regular_trigger: Optional[pulumi.Input[int]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_restricted: Optional[pulumi.Input[bool]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 open_mode: Optional[pulumi.Input[str]] = None,
                 pdb_admin_password: Optional[pulumi.Input[str]] = None,
                 pdb_creation_type_details: Optional[pulumi.Input['PluggableDatabasePdbCreationTypeDetailsArgs']] = None,
                 pdb_name: Optional[pulumi.Input[str]] = None,
                 pdb_node_level_details: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasePdbNodeLevelDetailArgs']]]] = None,
                 pluggable_database_management_configs: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasePluggableDatabaseManagementConfigArgs']]]] = None,
                 refresh_trigger: Optional[pulumi.Input[int]] = None,
                 refreshable_clone_configs: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabaseRefreshableCloneConfigArgs']]]] = None,
                 rotate_key_trigger: Optional[pulumi.Input[int]] = None,
                 should_create_pdb_backup: Optional[pulumi.Input[bool]] = None,
                 should_pdb_admin_account_be_locked: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tde_wallet_password: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PluggableDatabase resources.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)
        if container_database_admin_password is not None:
            pulumi.set(__self__, "container_database_admin_password", container_database_admin_password)
        if container_database_id is not None:
            pulumi.set(__self__, "container_database_id", container_database_id)
        if convert_to_regular_trigger is not None:
            pulumi.set(__self__, "convert_to_regular_trigger", convert_to_regular_trigger)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_restricted is not None:
            pulumi.set(__self__, "is_restricted", is_restricted)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if open_mode is not None:
            pulumi.set(__self__, "open_mode", open_mode)
        if pdb_admin_password is not None:
            pulumi.set(__self__, "pdb_admin_password", pdb_admin_password)
        if pdb_creation_type_details is not None:
            pulumi.set(__self__, "pdb_creation_type_details", pdb_creation_type_details)
        if pdb_name is not None:
            pulumi.set(__self__, "pdb_name", pdb_name)
        if pdb_node_level_details is not None:
            pulumi.set(__self__, "pdb_node_level_details", pdb_node_level_details)
        if pluggable_database_management_configs is not None:
            pulumi.set(__self__, "pluggable_database_management_configs", pluggable_database_management_configs)
        if refresh_trigger is not None:
            pulumi.set(__self__, "refresh_trigger", refresh_trigger)
        if refreshable_clone_configs is not None:
            pulumi.set(__self__, "refreshable_clone_configs", refreshable_clone_configs)
        if rotate_key_trigger is not None:
            pulumi.set(__self__, "rotate_key_trigger", rotate_key_trigger)
        if should_create_pdb_backup is not None:
            pulumi.set(__self__, "should_create_pdb_backup", should_create_pdb_backup)
        if should_pdb_admin_account_be_locked is not None:
            pulumi.set(__self__, "should_pdb_admin_account_be_locked", should_pdb_admin_account_be_locked)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tde_wallet_password is not None:
            pulumi.set(__self__, "tde_wallet_password", tde_wallet_password)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabaseConnectionStringArgs']]]]:
        return pulumi.get(self, "connection_strings")

    @connection_strings.setter
    def connection_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabaseConnectionStringArgs']]]]):
        pulumi.set(self, "connection_strings", value)

    @property
    @pulumi.getter(name="containerDatabaseAdminPassword")
    def container_database_admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_database_admin_password")

    @container_database_admin_password.setter
    def container_database_admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_database_admin_password", value)

    @property
    @pulumi.getter(name="containerDatabaseId")
    def container_database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_database_id")

    @container_database_id.setter
    def container_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_database_id", value)

    @property
    @pulumi.getter(name="convertToRegularTrigger")
    def convert_to_regular_trigger(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "convert_to_regular_trigger")

    @convert_to_regular_trigger.setter
    def convert_to_regular_trigger(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "convert_to_regular_trigger", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isRestricted")
    def is_restricted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_restricted")

    @is_restricted.setter
    def is_restricted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_restricted", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter(name="openMode")
    def open_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "open_mode")

    @open_mode.setter
    def open_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_mode", value)

    @property
    @pulumi.getter(name="pdbAdminPassword")
    def pdb_admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdb_admin_password")

    @pdb_admin_password.setter
    def pdb_admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdb_admin_password", value)

    @property
    @pulumi.getter(name="pdbCreationTypeDetails")
    def pdb_creation_type_details(self) -> Optional[pulumi.Input['PluggableDatabasePdbCreationTypeDetailsArgs']]:
        return pulumi.get(self, "pdb_creation_type_details")

    @pdb_creation_type_details.setter
    def pdb_creation_type_details(self, value: Optional[pulumi.Input['PluggableDatabasePdbCreationTypeDetailsArgs']]):
        pulumi.set(self, "pdb_creation_type_details", value)

    @property
    @pulumi.getter(name="pdbName")
    def pdb_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdb_name")

    @pdb_name.setter
    def pdb_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdb_name", value)

    @property
    @pulumi.getter(name="pdbNodeLevelDetails")
    def pdb_node_level_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasePdbNodeLevelDetailArgs']]]]:
        return pulumi.get(self, "pdb_node_level_details")

    @pdb_node_level_details.setter
    def pdb_node_level_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasePdbNodeLevelDetailArgs']]]]):
        pulumi.set(self, "pdb_node_level_details", value)

    @property
    @pulumi.getter(name="pluggableDatabaseManagementConfigs")
    def pluggable_database_management_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasePluggableDatabaseManagementConfigArgs']]]]:
        return pulumi.get(self, "pluggable_database_management_configs")

    @pluggable_database_management_configs.setter
    def pluggable_database_management_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasePluggableDatabaseManagementConfigArgs']]]]):
        pulumi.set(self, "pluggable_database_management_configs", value)

    @property
    @pulumi.getter(name="refreshTrigger")
    def refresh_trigger(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "refresh_trigger")

    @refresh_trigger.setter
    def refresh_trigger(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refresh_trigger", value)

    @property
    @pulumi.getter(name="refreshableCloneConfigs")
    def refreshable_clone_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabaseRefreshableCloneConfigArgs']]]]:
        return pulumi.get(self, "refreshable_clone_configs")

    @refreshable_clone_configs.setter
    def refreshable_clone_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabaseRefreshableCloneConfigArgs']]]]):
        pulumi.set(self, "refreshable_clone_configs", value)

    @property
    @pulumi.getter(name="rotateKeyTrigger")
    def rotate_key_trigger(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rotate_key_trigger")

    @rotate_key_trigger.setter
    def rotate_key_trigger(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rotate_key_trigger", value)

    @property
    @pulumi.getter(name="shouldCreatePdbBackup")
    def should_create_pdb_backup(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "should_create_pdb_backup")

    @should_create_pdb_backup.setter
    def should_create_pdb_backup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_create_pdb_backup", value)

    @property
    @pulumi.getter(name="shouldPdbAdminAccountBeLocked")
    def should_pdb_admin_account_be_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "should_pdb_admin_account_be_locked")

    @should_pdb_admin_account_be_locked.setter
    def should_pdb_admin_account_be_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_pdb_admin_account_be_locked", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="tdeWalletPassword")
    def tde_wallet_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tde_wallet_password")

    @tde_wallet_password.setter
    def tde_wallet_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tde_wallet_password", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)


class PluggableDatabase(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_database_admin_password: Optional[pulumi.Input[str]] = None,
                 container_database_id: Optional[pulumi.Input[str]] = None,
                 convert_to_regular_trigger: Optional[pulumi.Input[int]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 pdb_admin_password: Optional[pulumi.Input[str]] = None,
                 pdb_creation_type_details: Optional[pulumi.Input[pulumi.InputType['PluggableDatabasePdbCreationTypeDetailsArgs']]] = None,
                 pdb_name: Optional[pulumi.Input[str]] = None,
                 refresh_trigger: Optional[pulumi.Input[int]] = None,
                 rotate_key_trigger: Optional[pulumi.Input[int]] = None,
                 should_create_pdb_backup: Optional[pulumi.Input[bool]] = None,
                 should_pdb_admin_account_be_locked: Optional[pulumi.Input[bool]] = None,
                 tde_wallet_password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a PluggableDatabase resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PluggableDatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PluggableDatabase resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PluggableDatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PluggableDatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_database_admin_password: Optional[pulumi.Input[str]] = None,
                 container_database_id: Optional[pulumi.Input[str]] = None,
                 convert_to_regular_trigger: Optional[pulumi.Input[int]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 pdb_admin_password: Optional[pulumi.Input[str]] = None,
                 pdb_creation_type_details: Optional[pulumi.Input[pulumi.InputType['PluggableDatabasePdbCreationTypeDetailsArgs']]] = None,
                 pdb_name: Optional[pulumi.Input[str]] = None,
                 refresh_trigger: Optional[pulumi.Input[int]] = None,
                 rotate_key_trigger: Optional[pulumi.Input[int]] = None,
                 should_create_pdb_backup: Optional[pulumi.Input[bool]] = None,
                 should_pdb_admin_account_be_locked: Optional[pulumi.Input[bool]] = None,
                 tde_wallet_password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PluggableDatabaseArgs.__new__(PluggableDatabaseArgs)

            __props__.__dict__["container_database_admin_password"] = None if container_database_admin_password is None else pulumi.Output.secret(container_database_admin_password)
            if container_database_id is None and not opts.urn:
                raise TypeError("Missing required property 'container_database_id'")
            __props__.__dict__["container_database_id"] = container_database_id
            __props__.__dict__["convert_to_regular_trigger"] = convert_to_regular_trigger
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["pdb_admin_password"] = None if pdb_admin_password is None else pulumi.Output.secret(pdb_admin_password)
            __props__.__dict__["pdb_creation_type_details"] = pdb_creation_type_details
            if pdb_name is None and not opts.urn:
                raise TypeError("Missing required property 'pdb_name'")
            __props__.__dict__["pdb_name"] = pdb_name
            __props__.__dict__["refresh_trigger"] = refresh_trigger
            __props__.__dict__["rotate_key_trigger"] = rotate_key_trigger
            __props__.__dict__["should_create_pdb_backup"] = should_create_pdb_backup
            __props__.__dict__["should_pdb_admin_account_be_locked"] = should_pdb_admin_account_be_locked
            __props__.__dict__["tde_wallet_password"] = None if tde_wallet_password is None else pulumi.Output.secret(tde_wallet_password)
            __props__.__dict__["compartment_id"] = None
            __props__.__dict__["connection_strings"] = None
            __props__.__dict__["is_restricted"] = None
            __props__.__dict__["lifecycle_details"] = None
            __props__.__dict__["open_mode"] = None
            __props__.__dict__["pdb_node_level_details"] = None
            __props__.__dict__["pluggable_database_management_configs"] = None
            __props__.__dict__["refreshable_clone_configs"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["containerDatabaseAdminPassword", "pdbAdminPassword", "tdeWalletPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(PluggableDatabase, __self__).__init__(
            'oci:Database/pluggableDatabase:PluggableDatabase',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            connection_strings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PluggableDatabaseConnectionStringArgs']]]]] = None,
            container_database_admin_password: Optional[pulumi.Input[str]] = None,
            container_database_id: Optional[pulumi.Input[str]] = None,
            convert_to_regular_trigger: Optional[pulumi.Input[int]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            is_restricted: Optional[pulumi.Input[bool]] = None,
            lifecycle_details: Optional[pulumi.Input[str]] = None,
            open_mode: Optional[pulumi.Input[str]] = None,
            pdb_admin_password: Optional[pulumi.Input[str]] = None,
            pdb_creation_type_details: Optional[pulumi.Input[pulumi.InputType['PluggableDatabasePdbCreationTypeDetailsArgs']]] = None,
            pdb_name: Optional[pulumi.Input[str]] = None,
            pdb_node_level_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PluggableDatabasePdbNodeLevelDetailArgs']]]]] = None,
            pluggable_database_management_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PluggableDatabasePluggableDatabaseManagementConfigArgs']]]]] = None,
            refresh_trigger: Optional[pulumi.Input[int]] = None,
            refreshable_clone_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PluggableDatabaseRefreshableCloneConfigArgs']]]]] = None,
            rotate_key_trigger: Optional[pulumi.Input[int]] = None,
            should_create_pdb_backup: Optional[pulumi.Input[bool]] = None,
            should_pdb_admin_account_be_locked: Optional[pulumi.Input[bool]] = None,
            state: Optional[pulumi.Input[str]] = None,
            tde_wallet_password: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None) -> 'PluggableDatabase':
        """
        Get an existing PluggableDatabase resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PluggableDatabaseState.__new__(_PluggableDatabaseState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["connection_strings"] = connection_strings
        __props__.__dict__["container_database_admin_password"] = container_database_admin_password
        __props__.__dict__["container_database_id"] = container_database_id
        __props__.__dict__["convert_to_regular_trigger"] = convert_to_regular_trigger
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["is_restricted"] = is_restricted
        __props__.__dict__["lifecycle_details"] = lifecycle_details
        __props__.__dict__["open_mode"] = open_mode
        __props__.__dict__["pdb_admin_password"] = pdb_admin_password
        __props__.__dict__["pdb_creation_type_details"] = pdb_creation_type_details
        __props__.__dict__["pdb_name"] = pdb_name
        __props__.__dict__["pdb_node_level_details"] = pdb_node_level_details
        __props__.__dict__["pluggable_database_management_configs"] = pluggable_database_management_configs
        __props__.__dict__["refresh_trigger"] = refresh_trigger
        __props__.__dict__["refreshable_clone_configs"] = refreshable_clone_configs
        __props__.__dict__["rotate_key_trigger"] = rotate_key_trigger
        __props__.__dict__["should_create_pdb_backup"] = should_create_pdb_backup
        __props__.__dict__["should_pdb_admin_account_be_locked"] = should_pdb_admin_account_be_locked
        __props__.__dict__["state"] = state
        __props__.__dict__["tde_wallet_password"] = tde_wallet_password
        __props__.__dict__["time_created"] = time_created
        return PluggableDatabase(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> pulumi.Output[Optional[Sequence['outputs.PluggableDatabaseConnectionString']]]:
        return pulumi.get(self, "connection_strings")

    @property
    @pulumi.getter(name="containerDatabaseAdminPassword")
    def container_database_admin_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "container_database_admin_password")

    @property
    @pulumi.getter(name="containerDatabaseId")
    def container_database_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "container_database_id")

    @property
    @pulumi.getter(name="convertToRegularTrigger")
    def convert_to_regular_trigger(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "convert_to_regular_trigger")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isRestricted")
    def is_restricted(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_restricted")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="openMode")
    def open_mode(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "open_mode")

    @property
    @pulumi.getter(name="pdbAdminPassword")
    def pdb_admin_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "pdb_admin_password")

    @property
    @pulumi.getter(name="pdbCreationTypeDetails")
    def pdb_creation_type_details(self) -> pulumi.Output[Optional['outputs.PluggableDatabasePdbCreationTypeDetails']]:
        return pulumi.get(self, "pdb_creation_type_details")

    @property
    @pulumi.getter(name="pdbName")
    def pdb_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pdb_name")

    @property
    @pulumi.getter(name="pdbNodeLevelDetails")
    def pdb_node_level_details(self) -> pulumi.Output[Optional[Sequence['outputs.PluggableDatabasePdbNodeLevelDetail']]]:
        return pulumi.get(self, "pdb_node_level_details")

    @property
    @pulumi.getter(name="pluggableDatabaseManagementConfigs")
    def pluggable_database_management_configs(self) -> pulumi.Output[Optional[Sequence['outputs.PluggableDatabasePluggableDatabaseManagementConfig']]]:
        return pulumi.get(self, "pluggable_database_management_configs")

    @property
    @pulumi.getter(name="refreshTrigger")
    def refresh_trigger(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "refresh_trigger")

    @property
    @pulumi.getter(name="refreshableCloneConfigs")
    def refreshable_clone_configs(self) -> pulumi.Output[Optional[Sequence['outputs.PluggableDatabaseRefreshableCloneConfig']]]:
        return pulumi.get(self, "refreshable_clone_configs")

    @property
    @pulumi.getter(name="rotateKeyTrigger")
    def rotate_key_trigger(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "rotate_key_trigger")

    @property
    @pulumi.getter(name="shouldCreatePdbBackup")
    def should_create_pdb_backup(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "should_create_pdb_backup")

    @property
    @pulumi.getter(name="shouldPdbAdminAccountBeLocked")
    def should_pdb_admin_account_be_locked(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "should_pdb_admin_account_be_locked")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tdeWalletPassword")
    def tde_wallet_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "tde_wallet_password")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

