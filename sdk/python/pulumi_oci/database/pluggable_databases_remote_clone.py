# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PluggableDatabasesRemoteCloneArgs', 'PluggableDatabasesRemoteClone']

@pulumi.input_type
class PluggableDatabasesRemoteCloneArgs:
    def __init__(__self__, *,
                 cloned_pdb_name: pulumi.Input[str],
                 pluggable_database_id: pulumi.Input[str],
                 source_container_db_admin_password: pulumi.Input[str],
                 target_container_database_id: pulumi.Input[str],
                 pdb_admin_password: Optional[pulumi.Input[str]] = None,
                 should_pdb_admin_account_be_locked: Optional[pulumi.Input[bool]] = None,
                 target_tde_wallet_password: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PluggableDatabasesRemoteClone resource.
        """
        pulumi.set(__self__, "cloned_pdb_name", cloned_pdb_name)
        pulumi.set(__self__, "pluggable_database_id", pluggable_database_id)
        pulumi.set(__self__, "source_container_db_admin_password", source_container_db_admin_password)
        pulumi.set(__self__, "target_container_database_id", target_container_database_id)
        if pdb_admin_password is not None:
            pulumi.set(__self__, "pdb_admin_password", pdb_admin_password)
        if should_pdb_admin_account_be_locked is not None:
            pulumi.set(__self__, "should_pdb_admin_account_be_locked", should_pdb_admin_account_be_locked)
        if target_tde_wallet_password is not None:
            pulumi.set(__self__, "target_tde_wallet_password", target_tde_wallet_password)

    @property
    @pulumi.getter(name="clonedPdbName")
    def cloned_pdb_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cloned_pdb_name")

    @cloned_pdb_name.setter
    def cloned_pdb_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloned_pdb_name", value)

    @property
    @pulumi.getter(name="pluggableDatabaseId")
    def pluggable_database_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pluggable_database_id")

    @pluggable_database_id.setter
    def pluggable_database_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "pluggable_database_id", value)

    @property
    @pulumi.getter(name="sourceContainerDbAdminPassword")
    def source_container_db_admin_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_container_db_admin_password")

    @source_container_db_admin_password.setter
    def source_container_db_admin_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_container_db_admin_password", value)

    @property
    @pulumi.getter(name="targetContainerDatabaseId")
    def target_container_database_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_container_database_id")

    @target_container_database_id.setter
    def target_container_database_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_container_database_id", value)

    @property
    @pulumi.getter(name="pdbAdminPassword")
    def pdb_admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdb_admin_password")

    @pdb_admin_password.setter
    def pdb_admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdb_admin_password", value)

    @property
    @pulumi.getter(name="shouldPdbAdminAccountBeLocked")
    def should_pdb_admin_account_be_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "should_pdb_admin_account_be_locked")

    @should_pdb_admin_account_be_locked.setter
    def should_pdb_admin_account_be_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_pdb_admin_account_be_locked", value)

    @property
    @pulumi.getter(name="targetTdeWalletPassword")
    def target_tde_wallet_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_tde_wallet_password")

    @target_tde_wallet_password.setter
    def target_tde_wallet_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_tde_wallet_password", value)


@pulumi.input_type
class _PluggableDatabasesRemoteCloneState:
    def __init__(__self__, *,
                 cloned_pdb_name: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 connection_strings: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasesRemoteCloneConnectionStringArgs']]]] = None,
                 container_database_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_restricted: Optional[pulumi.Input[bool]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 open_mode: Optional[pulumi.Input[str]] = None,
                 pdb_admin_password: Optional[pulumi.Input[str]] = None,
                 pdb_name: Optional[pulumi.Input[str]] = None,
                 pdb_node_level_details: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasesRemoteClonePdbNodeLevelDetailArgs']]]] = None,
                 pluggable_database_id: Optional[pulumi.Input[str]] = None,
                 pluggable_database_management_configs: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasesRemoteClonePluggableDatabaseManagementConfigArgs']]]] = None,
                 refreshable_clone_configs: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasesRemoteCloneRefreshableCloneConfigArgs']]]] = None,
                 should_pdb_admin_account_be_locked: Optional[pulumi.Input[bool]] = None,
                 source_container_db_admin_password: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 target_container_database_id: Optional[pulumi.Input[str]] = None,
                 target_tde_wallet_password: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PluggableDatabasesRemoteClone resources.
        """
        if cloned_pdb_name is not None:
            pulumi.set(__self__, "cloned_pdb_name", cloned_pdb_name)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)
        if container_database_id is not None:
            pulumi.set(__self__, "container_database_id", container_database_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_restricted is not None:
            pulumi.set(__self__, "is_restricted", is_restricted)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if open_mode is not None:
            pulumi.set(__self__, "open_mode", open_mode)
        if pdb_admin_password is not None:
            pulumi.set(__self__, "pdb_admin_password", pdb_admin_password)
        if pdb_name is not None:
            pulumi.set(__self__, "pdb_name", pdb_name)
        if pdb_node_level_details is not None:
            pulumi.set(__self__, "pdb_node_level_details", pdb_node_level_details)
        if pluggable_database_id is not None:
            pulumi.set(__self__, "pluggable_database_id", pluggable_database_id)
        if pluggable_database_management_configs is not None:
            pulumi.set(__self__, "pluggable_database_management_configs", pluggable_database_management_configs)
        if refreshable_clone_configs is not None:
            pulumi.set(__self__, "refreshable_clone_configs", refreshable_clone_configs)
        if should_pdb_admin_account_be_locked is not None:
            pulumi.set(__self__, "should_pdb_admin_account_be_locked", should_pdb_admin_account_be_locked)
        if source_container_db_admin_password is not None:
            pulumi.set(__self__, "source_container_db_admin_password", source_container_db_admin_password)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if target_container_database_id is not None:
            pulumi.set(__self__, "target_container_database_id", target_container_database_id)
        if target_tde_wallet_password is not None:
            pulumi.set(__self__, "target_tde_wallet_password", target_tde_wallet_password)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="clonedPdbName")
    def cloned_pdb_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloned_pdb_name")

    @cloned_pdb_name.setter
    def cloned_pdb_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloned_pdb_name", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasesRemoteCloneConnectionStringArgs']]]]:
        return pulumi.get(self, "connection_strings")

    @connection_strings.setter
    def connection_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasesRemoteCloneConnectionStringArgs']]]]):
        pulumi.set(self, "connection_strings", value)

    @property
    @pulumi.getter(name="containerDatabaseId")
    def container_database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_database_id")

    @container_database_id.setter
    def container_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_database_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isRestricted")
    def is_restricted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_restricted")

    @is_restricted.setter
    def is_restricted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_restricted", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter(name="openMode")
    def open_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "open_mode")

    @open_mode.setter
    def open_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_mode", value)

    @property
    @pulumi.getter(name="pdbAdminPassword")
    def pdb_admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdb_admin_password")

    @pdb_admin_password.setter
    def pdb_admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdb_admin_password", value)

    @property
    @pulumi.getter(name="pdbName")
    def pdb_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pdb_name")

    @pdb_name.setter
    def pdb_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdb_name", value)

    @property
    @pulumi.getter(name="pdbNodeLevelDetails")
    def pdb_node_level_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasesRemoteClonePdbNodeLevelDetailArgs']]]]:
        return pulumi.get(self, "pdb_node_level_details")

    @pdb_node_level_details.setter
    def pdb_node_level_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasesRemoteClonePdbNodeLevelDetailArgs']]]]):
        pulumi.set(self, "pdb_node_level_details", value)

    @property
    @pulumi.getter(name="pluggableDatabaseId")
    def pluggable_database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pluggable_database_id")

    @pluggable_database_id.setter
    def pluggable_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pluggable_database_id", value)

    @property
    @pulumi.getter(name="pluggableDatabaseManagementConfigs")
    def pluggable_database_management_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasesRemoteClonePluggableDatabaseManagementConfigArgs']]]]:
        return pulumi.get(self, "pluggable_database_management_configs")

    @pluggable_database_management_configs.setter
    def pluggable_database_management_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasesRemoteClonePluggableDatabaseManagementConfigArgs']]]]):
        pulumi.set(self, "pluggable_database_management_configs", value)

    @property
    @pulumi.getter(name="refreshableCloneConfigs")
    def refreshable_clone_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasesRemoteCloneRefreshableCloneConfigArgs']]]]:
        return pulumi.get(self, "refreshable_clone_configs")

    @refreshable_clone_configs.setter
    def refreshable_clone_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PluggableDatabasesRemoteCloneRefreshableCloneConfigArgs']]]]):
        pulumi.set(self, "refreshable_clone_configs", value)

    @property
    @pulumi.getter(name="shouldPdbAdminAccountBeLocked")
    def should_pdb_admin_account_be_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "should_pdb_admin_account_be_locked")

    @should_pdb_admin_account_be_locked.setter
    def should_pdb_admin_account_be_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_pdb_admin_account_be_locked", value)

    @property
    @pulumi.getter(name="sourceContainerDbAdminPassword")
    def source_container_db_admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_container_db_admin_password")

    @source_container_db_admin_password.setter
    def source_container_db_admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_container_db_admin_password", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="targetContainerDatabaseId")
    def target_container_database_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_container_database_id")

    @target_container_database_id.setter
    def target_container_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_container_database_id", value)

    @property
    @pulumi.getter(name="targetTdeWalletPassword")
    def target_tde_wallet_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_tde_wallet_password")

    @target_tde_wallet_password.setter
    def target_tde_wallet_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_tde_wallet_password", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)


class PluggableDatabasesRemoteClone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloned_pdb_name: Optional[pulumi.Input[str]] = None,
                 pdb_admin_password: Optional[pulumi.Input[str]] = None,
                 pluggable_database_id: Optional[pulumi.Input[str]] = None,
                 should_pdb_admin_account_be_locked: Optional[pulumi.Input[bool]] = None,
                 source_container_db_admin_password: Optional[pulumi.Input[str]] = None,
                 target_container_database_id: Optional[pulumi.Input[str]] = None,
                 target_tde_wallet_password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a PluggableDatabasesRemoteClone resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PluggableDatabasesRemoteCloneArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PluggableDatabasesRemoteClone resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PluggableDatabasesRemoteCloneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PluggableDatabasesRemoteCloneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloned_pdb_name: Optional[pulumi.Input[str]] = None,
                 pdb_admin_password: Optional[pulumi.Input[str]] = None,
                 pluggable_database_id: Optional[pulumi.Input[str]] = None,
                 should_pdb_admin_account_be_locked: Optional[pulumi.Input[bool]] = None,
                 source_container_db_admin_password: Optional[pulumi.Input[str]] = None,
                 target_container_database_id: Optional[pulumi.Input[str]] = None,
                 target_tde_wallet_password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PluggableDatabasesRemoteCloneArgs.__new__(PluggableDatabasesRemoteCloneArgs)

            if cloned_pdb_name is None and not opts.urn:
                raise TypeError("Missing required property 'cloned_pdb_name'")
            __props__.__dict__["cloned_pdb_name"] = cloned_pdb_name
            __props__.__dict__["pdb_admin_password"] = None if pdb_admin_password is None else pulumi.Output.secret(pdb_admin_password)
            if pluggable_database_id is None and not opts.urn:
                raise TypeError("Missing required property 'pluggable_database_id'")
            __props__.__dict__["pluggable_database_id"] = pluggable_database_id
            __props__.__dict__["should_pdb_admin_account_be_locked"] = should_pdb_admin_account_be_locked
            if source_container_db_admin_password is None and not opts.urn:
                raise TypeError("Missing required property 'source_container_db_admin_password'")
            __props__.__dict__["source_container_db_admin_password"] = None if source_container_db_admin_password is None else pulumi.Output.secret(source_container_db_admin_password)
            if target_container_database_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_container_database_id'")
            __props__.__dict__["target_container_database_id"] = target_container_database_id
            __props__.__dict__["target_tde_wallet_password"] = None if target_tde_wallet_password is None else pulumi.Output.secret(target_tde_wallet_password)
            __props__.__dict__["compartment_id"] = None
            __props__.__dict__["connection_strings"] = None
            __props__.__dict__["container_database_id"] = None
            __props__.__dict__["defined_tags"] = None
            __props__.__dict__["freeform_tags"] = None
            __props__.__dict__["is_restricted"] = None
            __props__.__dict__["lifecycle_details"] = None
            __props__.__dict__["open_mode"] = None
            __props__.__dict__["pdb_name"] = None
            __props__.__dict__["pdb_node_level_details"] = None
            __props__.__dict__["pluggable_database_management_configs"] = None
            __props__.__dict__["refreshable_clone_configs"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["pdbAdminPassword", "sourceContainerDbAdminPassword", "targetTdeWalletPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(PluggableDatabasesRemoteClone, __self__).__init__(
            'oci:Database/pluggableDatabasesRemoteClone:PluggableDatabasesRemoteClone',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cloned_pdb_name: Optional[pulumi.Input[str]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            connection_strings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PluggableDatabasesRemoteCloneConnectionStringArgs']]]]] = None,
            container_database_id: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            is_restricted: Optional[pulumi.Input[bool]] = None,
            lifecycle_details: Optional[pulumi.Input[str]] = None,
            open_mode: Optional[pulumi.Input[str]] = None,
            pdb_admin_password: Optional[pulumi.Input[str]] = None,
            pdb_name: Optional[pulumi.Input[str]] = None,
            pdb_node_level_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PluggableDatabasesRemoteClonePdbNodeLevelDetailArgs']]]]] = None,
            pluggable_database_id: Optional[pulumi.Input[str]] = None,
            pluggable_database_management_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PluggableDatabasesRemoteClonePluggableDatabaseManagementConfigArgs']]]]] = None,
            refreshable_clone_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PluggableDatabasesRemoteCloneRefreshableCloneConfigArgs']]]]] = None,
            should_pdb_admin_account_be_locked: Optional[pulumi.Input[bool]] = None,
            source_container_db_admin_password: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            target_container_database_id: Optional[pulumi.Input[str]] = None,
            target_tde_wallet_password: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None) -> 'PluggableDatabasesRemoteClone':
        """
        Get an existing PluggableDatabasesRemoteClone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PluggableDatabasesRemoteCloneState.__new__(_PluggableDatabasesRemoteCloneState)

        __props__.__dict__["cloned_pdb_name"] = cloned_pdb_name
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["connection_strings"] = connection_strings
        __props__.__dict__["container_database_id"] = container_database_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["is_restricted"] = is_restricted
        __props__.__dict__["lifecycle_details"] = lifecycle_details
        __props__.__dict__["open_mode"] = open_mode
        __props__.__dict__["pdb_admin_password"] = pdb_admin_password
        __props__.__dict__["pdb_name"] = pdb_name
        __props__.__dict__["pdb_node_level_details"] = pdb_node_level_details
        __props__.__dict__["pluggable_database_id"] = pluggable_database_id
        __props__.__dict__["pluggable_database_management_configs"] = pluggable_database_management_configs
        __props__.__dict__["refreshable_clone_configs"] = refreshable_clone_configs
        __props__.__dict__["should_pdb_admin_account_be_locked"] = should_pdb_admin_account_be_locked
        __props__.__dict__["source_container_db_admin_password"] = source_container_db_admin_password
        __props__.__dict__["state"] = state
        __props__.__dict__["target_container_database_id"] = target_container_database_id
        __props__.__dict__["target_tde_wallet_password"] = target_tde_wallet_password
        __props__.__dict__["time_created"] = time_created
        return PluggableDatabasesRemoteClone(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clonedPdbName")
    def cloned_pdb_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cloned_pdb_name")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> pulumi.Output[Optional[Sequence['outputs.PluggableDatabasesRemoteCloneConnectionString']]]:
        return pulumi.get(self, "connection_strings")

    @property
    @pulumi.getter(name="containerDatabaseId")
    def container_database_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "container_database_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isRestricted")
    def is_restricted(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_restricted")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="openMode")
    def open_mode(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "open_mode")

    @property
    @pulumi.getter(name="pdbAdminPassword")
    def pdb_admin_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "pdb_admin_password")

    @property
    @pulumi.getter(name="pdbName")
    def pdb_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "pdb_name")

    @property
    @pulumi.getter(name="pdbNodeLevelDetails")
    def pdb_node_level_details(self) -> pulumi.Output[Optional[Sequence['outputs.PluggableDatabasesRemoteClonePdbNodeLevelDetail']]]:
        return pulumi.get(self, "pdb_node_level_details")

    @property
    @pulumi.getter(name="pluggableDatabaseId")
    def pluggable_database_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pluggable_database_id")

    @property
    @pulumi.getter(name="pluggableDatabaseManagementConfigs")
    def pluggable_database_management_configs(self) -> pulumi.Output[Optional[Sequence['outputs.PluggableDatabasesRemoteClonePluggableDatabaseManagementConfig']]]:
        return pulumi.get(self, "pluggable_database_management_configs")

    @property
    @pulumi.getter(name="refreshableCloneConfigs")
    def refreshable_clone_configs(self) -> pulumi.Output[Optional[Sequence['outputs.PluggableDatabasesRemoteCloneRefreshableCloneConfig']]]:
        return pulumi.get(self, "refreshable_clone_configs")

    @property
    @pulumi.getter(name="shouldPdbAdminAccountBeLocked")
    def should_pdb_admin_account_be_locked(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "should_pdb_admin_account_be_locked")

    @property
    @pulumi.getter(name="sourceContainerDbAdminPassword")
    def source_container_db_admin_password(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_container_db_admin_password")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetContainerDatabaseId")
    def target_container_database_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "target_container_database_id")

    @property
    @pulumi.getter(name="targetTdeWalletPassword")
    def target_tde_wallet_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "target_tde_wallet_password")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

