# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VmClusterNetworkArgs', 'VmClusterNetwork']

@pulumi.input_type
class VmClusterNetworkArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 exadata_infrastructure_id: pulumi.Input[str],
                 scans: pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkScanArgs']]],
                 vm_networks: pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkVmNetworkArgs']]],
                 action: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 dns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dr_scans: Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkDrScanArgs']]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 ntps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 validate_vm_cluster_network: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a VmClusterNetwork resource.
        :param pulumi.Input[str] compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param pulumi.Input[str] display_name: The user-friendly name for the Exadata Cloud@Customer VM cluster network. The name does not need to be unique.
        :param pulumi.Input[str] exadata_infrastructure_id: The Exadata infrastructure [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkScanArgs']]] scans: (Updatable) The SCAN details.
        :param pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkVmNetworkArgs']]] vm_networks: (Updatable) Details of the client and backup networks.
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns: (Updatable) The list of DNS server IP addresses. Maximum of 3 allowed.
        :param pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkDrScanArgs']]] dr_scans: (Updatable) The SCAN details for DR network
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntps: (Updatable) The list of NTP server IP addresses. Maximum of 3 allowed.
        """
        VmClusterNetworkArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            display_name=display_name,
            exadata_infrastructure_id=exadata_infrastructure_id,
            scans=scans,
            vm_networks=vm_networks,
            action=action,
            defined_tags=defined_tags,
            dns=dns,
            dr_scans=dr_scans,
            freeform_tags=freeform_tags,
            ntps=ntps,
            validate_vm_cluster_network=validate_vm_cluster_network,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: pulumi.Input[str],
             display_name: pulumi.Input[str],
             exadata_infrastructure_id: pulumi.Input[str],
             scans: pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkScanArgs']]],
             vm_networks: pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkVmNetworkArgs']]],
             action: Optional[pulumi.Input[str]] = None,
             defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             dns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             dr_scans: Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkDrScanArgs']]]] = None,
             freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             ntps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             validate_vm_cluster_network: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("compartment_id", compartment_id)
        _setter("display_name", display_name)
        _setter("exadata_infrastructure_id", exadata_infrastructure_id)
        _setter("scans", scans)
        _setter("vm_networks", vm_networks)
        if action is not None:
            _setter("action", action)
        if defined_tags is not None:
            _setter("defined_tags", defined_tags)
        if dns is not None:
            _setter("dns", dns)
        if dr_scans is not None:
            _setter("dr_scans", dr_scans)
        if freeform_tags is not None:
            _setter("freeform_tags", freeform_tags)
        if ntps is not None:
            _setter("ntps", ntps)
        if validate_vm_cluster_network is not None:
            _setter("validate_vm_cluster_network", validate_vm_cluster_network)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The user-friendly name for the Exadata Cloud@Customer VM cluster network. The name does not need to be unique.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="exadataInfrastructureId")
    def exadata_infrastructure_id(self) -> pulumi.Input[str]:
        """
        The Exadata infrastructure [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "exadata_infrastructure_id")

    @exadata_infrastructure_id.setter
    def exadata_infrastructure_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "exadata_infrastructure_id", value)

    @property
    @pulumi.getter
    def scans(self) -> pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkScanArgs']]]:
        """
        (Updatable) The SCAN details.
        """
        return pulumi.get(self, "scans")

    @scans.setter
    def scans(self, value: pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkScanArgs']]]):
        pulumi.set(self, "scans", value)

    @property
    @pulumi.getter(name="vmNetworks")
    def vm_networks(self) -> pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkVmNetworkArgs']]]:
        """
        (Updatable) Details of the client and backup networks.
        """
        return pulumi.get(self, "vm_networks")

    @vm_networks.setter
    def vm_networks(self, value: pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkVmNetworkArgs']]]):
        pulumi.set(self, "vm_networks", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The list of DNS server IP addresses. Maximum of 3 allowed.
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter(name="drScans")
    def dr_scans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkDrScanArgs']]]]:
        """
        (Updatable) The SCAN details for DR network
        """
        return pulumi.get(self, "dr_scans")

    @dr_scans.setter
    def dr_scans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkDrScanArgs']]]]):
        pulumi.set(self, "dr_scans", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter
    def ntps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The list of NTP server IP addresses. Maximum of 3 allowed.
        """
        return pulumi.get(self, "ntps")

    @ntps.setter
    def ntps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ntps", value)

    @property
    @pulumi.getter(name="validateVmClusterNetwork")
    def validate_vm_cluster_network(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "validate_vm_cluster_network")

    @validate_vm_cluster_network.setter
    def validate_vm_cluster_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_vm_cluster_network", value)


@pulumi.input_type
class _VmClusterNetworkState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dr_scans: Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkDrScanArgs']]]] = None,
                 exadata_infrastructure_id: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 ntps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scans: Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkScanArgs']]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 validate_vm_cluster_network: Optional[pulumi.Input[bool]] = None,
                 vm_cluster_id: Optional[pulumi.Input[str]] = None,
                 vm_networks: Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkVmNetworkArgs']]]] = None):
        """
        Input properties used for looking up and filtering VmClusterNetwork resources.
        :param pulumi.Input[str] compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        :param pulumi.Input[str] display_name: The user-friendly name for the Exadata Cloud@Customer VM cluster network. The name does not need to be unique.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns: (Updatable) The list of DNS server IP addresses. Maximum of 3 allowed.
        :param pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkDrScanArgs']]] dr_scans: (Updatable) The SCAN details for DR network
        :param pulumi.Input[str] exadata_infrastructure_id: The Exadata infrastructure [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param pulumi.Input[str] lifecycle_details: Additional information about the current lifecycle state.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntps: (Updatable) The list of NTP server IP addresses. Maximum of 3 allowed.
        :param pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkScanArgs']]] scans: (Updatable) The SCAN details.
        :param pulumi.Input[str] state: (Updatable) The current state of the VM cluster network nodes. CREATING - The resource is being created REQUIRES_VALIDATION - The resource is created and may not be usable until it is validated. VALIDATING - The resource is being validated and not available to use. VALIDATED - The resource is validated and is available for consumption by VM cluster. VALIDATION_FAILED - The resource validation has failed and might require user input to be corrected. UPDATING - The resource is being updated and not available to use. ALLOCATED - The resource is currently being used by VM cluster. TERMINATING - The resource is being deleted and not available to use. TERMINATED - The resource is deleted and unavailable. FAILED - The resource is in a failed state due to validation or other errors.
        :param pulumi.Input[str] time_created: The date and time when the VM cluster network was created.
        :param pulumi.Input[str] vm_cluster_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated VM Cluster.
        :param pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkVmNetworkArgs']]] vm_networks: (Updatable) Details of the client and backup networks.
        """
        _VmClusterNetworkState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            display_name=display_name,
            dns=dns,
            dr_scans=dr_scans,
            exadata_infrastructure_id=exadata_infrastructure_id,
            freeform_tags=freeform_tags,
            lifecycle_details=lifecycle_details,
            ntps=ntps,
            scans=scans,
            state=state,
            time_created=time_created,
            validate_vm_cluster_network=validate_vm_cluster_network,
            vm_cluster_id=vm_cluster_id,
            vm_networks=vm_networks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[pulumi.Input[str]] = None,
             compartment_id: Optional[pulumi.Input[str]] = None,
             defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             display_name: Optional[pulumi.Input[str]] = None,
             dns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             dr_scans: Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkDrScanArgs']]]] = None,
             exadata_infrastructure_id: Optional[pulumi.Input[str]] = None,
             freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             lifecycle_details: Optional[pulumi.Input[str]] = None,
             ntps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             scans: Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkScanArgs']]]] = None,
             state: Optional[pulumi.Input[str]] = None,
             time_created: Optional[pulumi.Input[str]] = None,
             validate_vm_cluster_network: Optional[pulumi.Input[bool]] = None,
             vm_cluster_id: Optional[pulumi.Input[str]] = None,
             vm_networks: Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkVmNetworkArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)
        if compartment_id is not None:
            _setter("compartment_id", compartment_id)
        if defined_tags is not None:
            _setter("defined_tags", defined_tags)
        if display_name is not None:
            _setter("display_name", display_name)
        if dns is not None:
            _setter("dns", dns)
        if dr_scans is not None:
            _setter("dr_scans", dr_scans)
        if exadata_infrastructure_id is not None:
            _setter("exadata_infrastructure_id", exadata_infrastructure_id)
        if freeform_tags is not None:
            _setter("freeform_tags", freeform_tags)
        if lifecycle_details is not None:
            _setter("lifecycle_details", lifecycle_details)
        if ntps is not None:
            _setter("ntps", ntps)
        if scans is not None:
            _setter("scans", scans)
        if state is not None:
            _setter("state", state)
        if time_created is not None:
            _setter("time_created", time_created)
        if validate_vm_cluster_network is not None:
            _setter("validate_vm_cluster_network", validate_vm_cluster_network)
        if vm_cluster_id is not None:
            _setter("vm_cluster_id", vm_cluster_id)
        if vm_networks is not None:
            _setter("vm_networks", vm_networks)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user-friendly name for the Exadata Cloud@Customer VM cluster network. The name does not need to be unique.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The list of DNS server IP addresses. Maximum of 3 allowed.
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter(name="drScans")
    def dr_scans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkDrScanArgs']]]]:
        """
        (Updatable) The SCAN details for DR network
        """
        return pulumi.get(self, "dr_scans")

    @dr_scans.setter
    def dr_scans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkDrScanArgs']]]]):
        pulumi.set(self, "dr_scans", value)

    @property
    @pulumi.getter(name="exadataInfrastructureId")
    def exadata_infrastructure_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Exadata infrastructure [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "exadata_infrastructure_id")

    @exadata_infrastructure_id.setter
    def exadata_infrastructure_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exadata_infrastructure_id", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information about the current lifecycle state.
        """
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter
    def ntps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) The list of NTP server IP addresses. Maximum of 3 allowed.
        """
        return pulumi.get(self, "ntps")

    @ntps.setter
    def ntps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ntps", value)

    @property
    @pulumi.getter
    def scans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkScanArgs']]]]:
        """
        (Updatable) The SCAN details.
        """
        return pulumi.get(self, "scans")

    @scans.setter
    def scans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkScanArgs']]]]):
        pulumi.set(self, "scans", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The current state of the VM cluster network nodes. CREATING - The resource is being created REQUIRES_VALIDATION - The resource is created and may not be usable until it is validated. VALIDATING - The resource is being validated and not available to use. VALIDATED - The resource is validated and is available for consumption by VM cluster. VALIDATION_FAILED - The resource validation has failed and might require user input to be corrected. UPDATING - The resource is being updated and not available to use. ALLOCATED - The resource is currently being used by VM cluster. TERMINATING - The resource is being deleted and not available to use. TERMINATED - The resource is deleted and unavailable. FAILED - The resource is in a failed state due to validation or other errors.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time when the VM cluster network was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="validateVmClusterNetwork")
    def validate_vm_cluster_network(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "validate_vm_cluster_network")

    @validate_vm_cluster_network.setter
    def validate_vm_cluster_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_vm_cluster_network", value)

    @property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated VM Cluster.
        """
        return pulumi.get(self, "vm_cluster_id")

    @vm_cluster_id.setter
    def vm_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_cluster_id", value)

    @property
    @pulumi.getter(name="vmNetworks")
    def vm_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkVmNetworkArgs']]]]:
        """
        (Updatable) Details of the client and backup networks.
        """
        return pulumi.get(self, "vm_networks")

    @vm_networks.setter
    def vm_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmClusterNetworkVmNetworkArgs']]]]):
        pulumi.set(self, "vm_networks", value)


class VmClusterNetwork(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dr_scans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmClusterNetworkDrScanArgs']]]]] = None,
                 exadata_infrastructure_id: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 ntps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmClusterNetworkScanArgs']]]]] = None,
                 validate_vm_cluster_network: Optional[pulumi.Input[bool]] = None,
                 vm_networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmClusterNetworkVmNetworkArgs']]]]] = None,
                 __props__=None):
        """
        This resource provides the Vm Cluster Network resource in Oracle Cloud Infrastructure Database service.

        Creates the VM cluster network. Applies to Exadata Cloud@Customer instances only.
        To create a cloud VM cluster in an Exadata Cloud Service instance, use the [CreateCloudVmCluster ](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/CloudVmCluster/CreateCloudVmCluster) operation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_vm_cluster_network = oci.database.VmClusterNetwork("testVmClusterNetwork",
            compartment_id=var["compartment_id"],
            display_name=var["vm_cluster_network_display_name"],
            exadata_infrastructure_id=oci_database_exadata_infrastructure["test_exadata_infrastructure"]["id"],
            scans=[oci.database.VmClusterNetworkScanArgs(
                hostname=var["vm_cluster_network_scans_hostname"],
                ips=var["vm_cluster_network_scans_ips"],
                port=var["vm_cluster_network_scans_port"],
                scan_listener_port_tcp=var["vm_cluster_network_scans_scan_listener_port_tcp"],
                scan_listener_port_tcp_ssl=var["vm_cluster_network_scans_scan_listener_port_tcp_ssl"],
            )],
            vm_networks=[oci.database.VmClusterNetworkVmNetworkArgs(
                network_type=var["vm_cluster_network_vm_networks_network_type"],
                nodes=[oci.database.VmClusterNetworkVmNetworkNodeArgs(
                    hostname=var["vm_cluster_network_vm_networks_nodes_hostname"],
                    ip=var["vm_cluster_network_vm_networks_nodes_ip"],
                    db_server_id=oci_database_db_server["test_db_server"]["id"],
                    state=var["vm_cluster_network_vm_networks_nodes_state"],
                    vip=var["vm_cluster_network_vm_networks_nodes_vip"],
                    vip_hostname=var["vm_cluster_network_vm_networks_nodes_vip_hostname"],
                )],
                domain_name=oci_identity_domain["test_domain"]["name"],
                gateway=var["vm_cluster_network_vm_networks_gateway"],
                netmask=var["vm_cluster_network_vm_networks_netmask"],
                vlan_id=var["vm_cluster_network_vm_networks_vlan_id"],
            )],
            defined_tags=var["vm_cluster_network_defined_tags"],
            dns=var["vm_cluster_network_dns"],
            dr_scans=[oci.database.VmClusterNetworkDrScanArgs(
                hostname=var["vm_cluster_network_dr_scans_hostname"],
                ips=var["vm_cluster_network_dr_scans_ips"],
                scan_listener_port_tcp=var["vm_cluster_network_dr_scans_scan_listener_port_tcp"],
            )],
            freeform_tags={
                "Department": "Finance",
            },
            ntps=var["vm_cluster_network_ntp"],
            validate_vm_cluster_network=var["vm_cluster_network_validate_vm_cluster_network"])
        ```

        ## Import

        VmClusterNetworks can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:Database/vmClusterNetwork:VmClusterNetwork test_vm_cluster_network "exadataInfrastructures/{exadataInfrastructureId}/vmClusterNetworks/{vmClusterNetworkId}"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        :param pulumi.Input[str] display_name: The user-friendly name for the Exadata Cloud@Customer VM cluster network. The name does not need to be unique.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns: (Updatable) The list of DNS server IP addresses. Maximum of 3 allowed.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmClusterNetworkDrScanArgs']]]] dr_scans: (Updatable) The SCAN details for DR network
        :param pulumi.Input[str] exadata_infrastructure_id: The Exadata infrastructure [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntps: (Updatable) The list of NTP server IP addresses. Maximum of 3 allowed.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmClusterNetworkScanArgs']]]] scans: (Updatable) The SCAN details.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmClusterNetworkVmNetworkArgs']]]] vm_networks: (Updatable) Details of the client and backup networks.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VmClusterNetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Vm Cluster Network resource in Oracle Cloud Infrastructure Database service.

        Creates the VM cluster network. Applies to Exadata Cloud@Customer instances only.
        To create a cloud VM cluster in an Exadata Cloud Service instance, use the [CreateCloudVmCluster ](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/CloudVmCluster/CreateCloudVmCluster) operation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_vm_cluster_network = oci.database.VmClusterNetwork("testVmClusterNetwork",
            compartment_id=var["compartment_id"],
            display_name=var["vm_cluster_network_display_name"],
            exadata_infrastructure_id=oci_database_exadata_infrastructure["test_exadata_infrastructure"]["id"],
            scans=[oci.database.VmClusterNetworkScanArgs(
                hostname=var["vm_cluster_network_scans_hostname"],
                ips=var["vm_cluster_network_scans_ips"],
                port=var["vm_cluster_network_scans_port"],
                scan_listener_port_tcp=var["vm_cluster_network_scans_scan_listener_port_tcp"],
                scan_listener_port_tcp_ssl=var["vm_cluster_network_scans_scan_listener_port_tcp_ssl"],
            )],
            vm_networks=[oci.database.VmClusterNetworkVmNetworkArgs(
                network_type=var["vm_cluster_network_vm_networks_network_type"],
                nodes=[oci.database.VmClusterNetworkVmNetworkNodeArgs(
                    hostname=var["vm_cluster_network_vm_networks_nodes_hostname"],
                    ip=var["vm_cluster_network_vm_networks_nodes_ip"],
                    db_server_id=oci_database_db_server["test_db_server"]["id"],
                    state=var["vm_cluster_network_vm_networks_nodes_state"],
                    vip=var["vm_cluster_network_vm_networks_nodes_vip"],
                    vip_hostname=var["vm_cluster_network_vm_networks_nodes_vip_hostname"],
                )],
                domain_name=oci_identity_domain["test_domain"]["name"],
                gateway=var["vm_cluster_network_vm_networks_gateway"],
                netmask=var["vm_cluster_network_vm_networks_netmask"],
                vlan_id=var["vm_cluster_network_vm_networks_vlan_id"],
            )],
            defined_tags=var["vm_cluster_network_defined_tags"],
            dns=var["vm_cluster_network_dns"],
            dr_scans=[oci.database.VmClusterNetworkDrScanArgs(
                hostname=var["vm_cluster_network_dr_scans_hostname"],
                ips=var["vm_cluster_network_dr_scans_ips"],
                scan_listener_port_tcp=var["vm_cluster_network_dr_scans_scan_listener_port_tcp"],
            )],
            freeform_tags={
                "Department": "Finance",
            },
            ntps=var["vm_cluster_network_ntp"],
            validate_vm_cluster_network=var["vm_cluster_network_validate_vm_cluster_network"])
        ```

        ## Import

        VmClusterNetworks can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:Database/vmClusterNetwork:VmClusterNetwork test_vm_cluster_network "exadataInfrastructures/{exadataInfrastructureId}/vmClusterNetworks/{vmClusterNetworkId}"
        ```

        :param str resource_name: The name of the resource.
        :param VmClusterNetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VmClusterNetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            VmClusterNetworkArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dr_scans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmClusterNetworkDrScanArgs']]]]] = None,
                 exadata_infrastructure_id: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 ntps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmClusterNetworkScanArgs']]]]] = None,
                 validate_vm_cluster_network: Optional[pulumi.Input[bool]] = None,
                 vm_networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmClusterNetworkVmNetworkArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VmClusterNetworkArgs.__new__(VmClusterNetworkArgs)

            __props__.__dict__["action"] = action
            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["defined_tags"] = defined_tags
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["dns"] = dns
            __props__.__dict__["dr_scans"] = dr_scans
            if exadata_infrastructure_id is None and not opts.urn:
                raise TypeError("Missing required property 'exadata_infrastructure_id'")
            __props__.__dict__["exadata_infrastructure_id"] = exadata_infrastructure_id
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["ntps"] = ntps
            if scans is None and not opts.urn:
                raise TypeError("Missing required property 'scans'")
            __props__.__dict__["scans"] = scans
            __props__.__dict__["validate_vm_cluster_network"] = validate_vm_cluster_network
            if vm_networks is None and not opts.urn:
                raise TypeError("Missing required property 'vm_networks'")
            __props__.__dict__["vm_networks"] = vm_networks
            __props__.__dict__["lifecycle_details"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["vm_cluster_id"] = None
        super(VmClusterNetwork, __self__).__init__(
            'oci:Database/vmClusterNetwork:VmClusterNetwork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            dns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dr_scans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmClusterNetworkDrScanArgs']]]]] = None,
            exadata_infrastructure_id: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            lifecycle_details: Optional[pulumi.Input[str]] = None,
            ntps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            scans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmClusterNetworkScanArgs']]]]] = None,
            state: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            validate_vm_cluster_network: Optional[pulumi.Input[bool]] = None,
            vm_cluster_id: Optional[pulumi.Input[str]] = None,
            vm_networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmClusterNetworkVmNetworkArgs']]]]] = None) -> 'VmClusterNetwork':
        """
        Get an existing VmClusterNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        :param pulumi.Input[str] display_name: The user-friendly name for the Exadata Cloud@Customer VM cluster network. The name does not need to be unique.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns: (Updatable) The list of DNS server IP addresses. Maximum of 3 allowed.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmClusterNetworkDrScanArgs']]]] dr_scans: (Updatable) The SCAN details for DR network
        :param pulumi.Input[str] exadata_infrastructure_id: The Exadata infrastructure [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param pulumi.Input[str] lifecycle_details: Additional information about the current lifecycle state.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntps: (Updatable) The list of NTP server IP addresses. Maximum of 3 allowed.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmClusterNetworkScanArgs']]]] scans: (Updatable) The SCAN details.
        :param pulumi.Input[str] state: (Updatable) The current state of the VM cluster network nodes. CREATING - The resource is being created REQUIRES_VALIDATION - The resource is created and may not be usable until it is validated. VALIDATING - The resource is being validated and not available to use. VALIDATED - The resource is validated and is available for consumption by VM cluster. VALIDATION_FAILED - The resource validation has failed and might require user input to be corrected. UPDATING - The resource is being updated and not available to use. ALLOCATED - The resource is currently being used by VM cluster. TERMINATING - The resource is being deleted and not available to use. TERMINATED - The resource is deleted and unavailable. FAILED - The resource is in a failed state due to validation or other errors.
        :param pulumi.Input[str] time_created: The date and time when the VM cluster network was created.
        :param pulumi.Input[str] vm_cluster_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated VM Cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmClusterNetworkVmNetworkArgs']]]] vm_networks: (Updatable) Details of the client and backup networks.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VmClusterNetworkState.__new__(_VmClusterNetworkState)

        __props__.__dict__["action"] = action
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["dns"] = dns
        __props__.__dict__["dr_scans"] = dr_scans
        __props__.__dict__["exadata_infrastructure_id"] = exadata_infrastructure_id
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["lifecycle_details"] = lifecycle_details
        __props__.__dict__["ntps"] = ntps
        __props__.__dict__["scans"] = scans
        __props__.__dict__["state"] = state
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["validate_vm_cluster_network"] = validate_vm_cluster_network
        __props__.__dict__["vm_cluster_id"] = vm_cluster_id
        __props__.__dict__["vm_networks"] = vm_networks
        return VmClusterNetwork(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The user-friendly name for the Exadata Cloud@Customer VM cluster network. The name does not need to be unique.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def dns(self) -> pulumi.Output[Sequence[str]]:
        """
        (Updatable) The list of DNS server IP addresses. Maximum of 3 allowed.
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="drScans")
    def dr_scans(self) -> pulumi.Output[Sequence['outputs.VmClusterNetworkDrScan']]:
        """
        (Updatable) The SCAN details for DR network
        """
        return pulumi.get(self, "dr_scans")

    @property
    @pulumi.getter(name="exadataInfrastructureId")
    def exadata_infrastructure_id(self) -> pulumi.Output[str]:
        """
        The Exadata infrastructure [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "exadata_infrastructure_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> pulumi.Output[str]:
        """
        Additional information about the current lifecycle state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def ntps(self) -> pulumi.Output[Sequence[str]]:
        """
        (Updatable) The list of NTP server IP addresses. Maximum of 3 allowed.
        """
        return pulumi.get(self, "ntps")

    @property
    @pulumi.getter
    def scans(self) -> pulumi.Output[Sequence['outputs.VmClusterNetworkScan']]:
        """
        (Updatable) The SCAN details.
        """
        return pulumi.get(self, "scans")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        (Updatable) The current state of the VM cluster network nodes. CREATING - The resource is being created REQUIRES_VALIDATION - The resource is created and may not be usable until it is validated. VALIDATING - The resource is being validated and not available to use. VALIDATED - The resource is validated and is available for consumption by VM cluster. VALIDATION_FAILED - The resource validation has failed and might require user input to be corrected. UPDATING - The resource is being updated and not available to use. ALLOCATED - The resource is currently being used by VM cluster. TERMINATING - The resource is being deleted and not available to use. TERMINATED - The resource is deleted and unavailable. FAILED - The resource is in a failed state due to validation or other errors.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[str]:
        """
        The date and time when the VM cluster network was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="validateVmClusterNetwork")
    def validate_vm_cluster_network(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "validate_vm_cluster_network")

    @property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> pulumi.Output[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated VM Cluster.
        """
        return pulumi.get(self, "vm_cluster_id")

    @property
    @pulumi.getter(name="vmNetworks")
    def vm_networks(self) -> pulumi.Output[Sequence['outputs.VmClusterNetworkVmNetwork']]:
        """
        (Updatable) Details of the client and backup networks.
        """
        return pulumi.get(self, "vm_networks")

