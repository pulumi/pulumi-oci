# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ExternalDbSystemArgs', 'ExternalDbSystem']

@pulumi.input_type
class ExternalDbSystemArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 db_system_discovery_id: pulumi.Input[str],
                 database_management_config: Optional[pulumi.Input['ExternalDbSystemDatabaseManagementConfigArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 stack_monitoring_config: Optional[pulumi.Input['ExternalDbSystemStackMonitoringConfigArgs']] = None):
        """
        The set of arguments for constructing a ExternalDbSystem resource.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "db_system_discovery_id", db_system_discovery_id)
        if database_management_config is not None:
            pulumi.set(__self__, "database_management_config", database_management_config)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if stack_monitoring_config is not None:
            pulumi.set(__self__, "stack_monitoring_config", stack_monitoring_config)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="dbSystemDiscoveryId")
    def db_system_discovery_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "db_system_discovery_id")

    @db_system_discovery_id.setter
    def db_system_discovery_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_system_discovery_id", value)

    @property
    @pulumi.getter(name="databaseManagementConfig")
    def database_management_config(self) -> Optional[pulumi.Input['ExternalDbSystemDatabaseManagementConfigArgs']]:
        return pulumi.get(self, "database_management_config")

    @database_management_config.setter
    def database_management_config(self, value: Optional[pulumi.Input['ExternalDbSystemDatabaseManagementConfigArgs']]):
        pulumi.set(self, "database_management_config", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="stackMonitoringConfig")
    def stack_monitoring_config(self) -> Optional[pulumi.Input['ExternalDbSystemStackMonitoringConfigArgs']]:
        return pulumi.get(self, "stack_monitoring_config")

    @stack_monitoring_config.setter
    def stack_monitoring_config(self, value: Optional[pulumi.Input['ExternalDbSystemStackMonitoringConfigArgs']]):
        pulumi.set(self, "stack_monitoring_config", value)


@pulumi.input_type
class _ExternalDbSystemState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 database_management_config: Optional[pulumi.Input['ExternalDbSystemDatabaseManagementConfigArgs']] = None,
                 db_system_discovery_id: Optional[pulumi.Input[str]] = None,
                 discovery_agent_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 home_directory: Optional[pulumi.Input[str]] = None,
                 is_cluster: Optional[pulumi.Input[bool]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 stack_monitoring_config: Optional[pulumi.Input['ExternalDbSystemStackMonitoringConfigArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ExternalDbSystem resources.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_management_config is not None:
            pulumi.set(__self__, "database_management_config", database_management_config)
        if db_system_discovery_id is not None:
            pulumi.set(__self__, "db_system_discovery_id", db_system_discovery_id)
        if discovery_agent_id is not None:
            pulumi.set(__self__, "discovery_agent_id", discovery_agent_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if home_directory is not None:
            pulumi.set(__self__, "home_directory", home_directory)
        if is_cluster is not None:
            pulumi.set(__self__, "is_cluster", is_cluster)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if stack_monitoring_config is not None:
            pulumi.set(__self__, "stack_monitoring_config", stack_monitoring_config)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="databaseManagementConfig")
    def database_management_config(self) -> Optional[pulumi.Input['ExternalDbSystemDatabaseManagementConfigArgs']]:
        return pulumi.get(self, "database_management_config")

    @database_management_config.setter
    def database_management_config(self, value: Optional[pulumi.Input['ExternalDbSystemDatabaseManagementConfigArgs']]):
        pulumi.set(self, "database_management_config", value)

    @property
    @pulumi.getter(name="dbSystemDiscoveryId")
    def db_system_discovery_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "db_system_discovery_id")

    @db_system_discovery_id.setter
    def db_system_discovery_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_system_discovery_id", value)

    @property
    @pulumi.getter(name="discoveryAgentId")
    def discovery_agent_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "discovery_agent_id")

    @discovery_agent_id.setter
    def discovery_agent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "discovery_agent_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "home_directory")

    @home_directory.setter
    def home_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "home_directory", value)

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_cluster")

    @is_cluster.setter
    def is_cluster(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_cluster", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter(name="stackMonitoringConfig")
    def stack_monitoring_config(self) -> Optional[pulumi.Input['ExternalDbSystemStackMonitoringConfigArgs']]:
        return pulumi.get(self, "stack_monitoring_config")

    @stack_monitoring_config.setter
    def stack_monitoring_config(self, value: Optional[pulumi.Input['ExternalDbSystemStackMonitoringConfigArgs']]):
        pulumi.set(self, "stack_monitoring_config", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)


class ExternalDbSystem(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 database_management_config: Optional[pulumi.Input[pulumi.InputType['ExternalDbSystemDatabaseManagementConfigArgs']]] = None,
                 db_system_discovery_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 stack_monitoring_config: Optional[pulumi.Input[pulumi.InputType['ExternalDbSystemStackMonitoringConfigArgs']]] = None,
                 __props__=None):
        """
        Create a ExternalDbSystem resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExternalDbSystemArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ExternalDbSystem resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ExternalDbSystemArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExternalDbSystemArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 database_management_config: Optional[pulumi.Input[pulumi.InputType['ExternalDbSystemDatabaseManagementConfigArgs']]] = None,
                 db_system_discovery_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 stack_monitoring_config: Optional[pulumi.Input[pulumi.InputType['ExternalDbSystemStackMonitoringConfigArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExternalDbSystemArgs.__new__(ExternalDbSystemArgs)

            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["database_management_config"] = database_management_config
            if db_system_discovery_id is None and not opts.urn:
                raise TypeError("Missing required property 'db_system_discovery_id'")
            __props__.__dict__["db_system_discovery_id"] = db_system_discovery_id
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["stack_monitoring_config"] = stack_monitoring_config
            __props__.__dict__["discovery_agent_id"] = None
            __props__.__dict__["home_directory"] = None
            __props__.__dict__["is_cluster"] = None
            __props__.__dict__["lifecycle_details"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        super(ExternalDbSystem, __self__).__init__(
            'oci:DatabaseManagement/externalDbSystem:ExternalDbSystem',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            database_management_config: Optional[pulumi.Input[pulumi.InputType['ExternalDbSystemDatabaseManagementConfigArgs']]] = None,
            db_system_discovery_id: Optional[pulumi.Input[str]] = None,
            discovery_agent_id: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            home_directory: Optional[pulumi.Input[str]] = None,
            is_cluster: Optional[pulumi.Input[bool]] = None,
            lifecycle_details: Optional[pulumi.Input[str]] = None,
            stack_monitoring_config: Optional[pulumi.Input[pulumi.InputType['ExternalDbSystemStackMonitoringConfigArgs']]] = None,
            state: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None) -> 'ExternalDbSystem':
        """
        Get an existing ExternalDbSystem resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExternalDbSystemState.__new__(_ExternalDbSystemState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["database_management_config"] = database_management_config
        __props__.__dict__["db_system_discovery_id"] = db_system_discovery_id
        __props__.__dict__["discovery_agent_id"] = discovery_agent_id
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["home_directory"] = home_directory
        __props__.__dict__["is_cluster"] = is_cluster
        __props__.__dict__["lifecycle_details"] = lifecycle_details
        __props__.__dict__["stack_monitoring_config"] = stack_monitoring_config
        __props__.__dict__["state"] = state
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        return ExternalDbSystem(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseManagementConfig")
    def database_management_config(self) -> pulumi.Output[Optional['outputs.ExternalDbSystemDatabaseManagementConfig']]:
        return pulumi.get(self, "database_management_config")

    @property
    @pulumi.getter(name="dbSystemDiscoveryId")
    def db_system_discovery_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "db_system_discovery_id")

    @property
    @pulumi.getter(name="discoveryAgentId")
    def discovery_agent_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "discovery_agent_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="stackMonitoringConfig")
    def stack_monitoring_config(self) -> pulumi.Output[Optional['outputs.ExternalDbSystemStackMonitoringConfig']]:
        return pulumi.get(self, "stack_monitoring_config")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_updated")

