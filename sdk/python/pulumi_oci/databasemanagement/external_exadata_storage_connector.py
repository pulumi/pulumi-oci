# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ExternalExadataStorageConnectorArgs', 'ExternalExadataStorageConnector']

@pulumi.input_type
class ExternalExadataStorageConnectorArgs:
    def __init__(__self__, *,
                 agent_id: pulumi.Input[str],
                 connection_uri: pulumi.Input[str],
                 connector_name: pulumi.Input[str],
                 credential_info: pulumi.Input['ExternalExadataStorageConnectorCredentialInfoArgs'],
                 storage_server_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a ExternalExadataStorageConnector resource.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "connection_uri", connection_uri)
        pulumi.set(__self__, "connector_name", connector_name)
        pulumi.set(__self__, "credential_info", credential_info)
        pulumi.set(__self__, "storage_server_id", storage_server_id)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "agent_id")

    @agent_id.setter
    def agent_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "agent_id", value)

    @property
    @pulumi.getter(name="connectionUri")
    def connection_uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "connection_uri")

    @connection_uri.setter
    def connection_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_uri", value)

    @property
    @pulumi.getter(name="connectorName")
    def connector_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "connector_name")

    @connector_name.setter
    def connector_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "connector_name", value)

    @property
    @pulumi.getter(name="credentialInfo")
    def credential_info(self) -> pulumi.Input['ExternalExadataStorageConnectorCredentialInfoArgs']:
        return pulumi.get(self, "credential_info")

    @credential_info.setter
    def credential_info(self, value: pulumi.Input['ExternalExadataStorageConnectorCredentialInfoArgs']):
        pulumi.set(self, "credential_info", value)

    @property
    @pulumi.getter(name="storageServerId")
    def storage_server_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage_server_id")

    @storage_server_id.setter
    def storage_server_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_server_id", value)


@pulumi.input_type
class _ExternalExadataStorageConnectorState:
    def __init__(__self__, *,
                 additional_details: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 agent_id: Optional[pulumi.Input[str]] = None,
                 connection_uri: Optional[pulumi.Input[str]] = None,
                 connector_name: Optional[pulumi.Input[str]] = None,
                 credential_info: Optional[pulumi.Input['ExternalExadataStorageConnectorCredentialInfoArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 exadata_infrastructure_id: Optional[pulumi.Input[str]] = None,
                 internal_id: Optional[pulumi.Input[str]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 storage_server_id: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ExternalExadataStorageConnector resources.
        """
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if connection_uri is not None:
            pulumi.set(__self__, "connection_uri", connection_uri)
        if connector_name is not None:
            pulumi.set(__self__, "connector_name", connector_name)
        if credential_info is not None:
            pulumi.set(__self__, "credential_info", credential_info)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if exadata_infrastructure_id is not None:
            pulumi.set(__self__, "exadata_infrastructure_id", exadata_infrastructure_id)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage_server_id is not None:
            pulumi.set(__self__, "storage_server_id", storage_server_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "additional_details")

    @additional_details.setter
    def additional_details(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "additional_details", value)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "agent_id")

    @agent_id.setter
    def agent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_id", value)

    @property
    @pulumi.getter(name="connectionUri")
    def connection_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_uri")

    @connection_uri.setter
    def connection_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_uri", value)

    @property
    @pulumi.getter(name="connectorName")
    def connector_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connector_name")

    @connector_name.setter
    def connector_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_name", value)

    @property
    @pulumi.getter(name="credentialInfo")
    def credential_info(self) -> Optional[pulumi.Input['ExternalExadataStorageConnectorCredentialInfoArgs']]:
        return pulumi.get(self, "credential_info")

    @credential_info.setter
    def credential_info(self, value: Optional[pulumi.Input['ExternalExadataStorageConnectorCredentialInfoArgs']]):
        pulumi.set(self, "credential_info", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="exadataInfrastructureId")
    def exadata_infrastructure_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exadata_infrastructure_id")

    @exadata_infrastructure_id.setter
    def exadata_infrastructure_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exadata_infrastructure_id", value)

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_id")

    @internal_id.setter
    def internal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_id", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="storageServerId")
    def storage_server_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_server_id")

    @storage_server_id.setter
    def storage_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_server_id", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class ExternalExadataStorageConnector(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_id: Optional[pulumi.Input[str]] = None,
                 connection_uri: Optional[pulumi.Input[str]] = None,
                 connector_name: Optional[pulumi.Input[str]] = None,
                 credential_info: Optional[pulumi.Input[pulumi.InputType['ExternalExadataStorageConnectorCredentialInfoArgs']]] = None,
                 storage_server_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ExternalExadataStorageConnector resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExternalExadataStorageConnectorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ExternalExadataStorageConnector resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ExternalExadataStorageConnectorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExternalExadataStorageConnectorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_id: Optional[pulumi.Input[str]] = None,
                 connection_uri: Optional[pulumi.Input[str]] = None,
                 connector_name: Optional[pulumi.Input[str]] = None,
                 credential_info: Optional[pulumi.Input[pulumi.InputType['ExternalExadataStorageConnectorCredentialInfoArgs']]] = None,
                 storage_server_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExternalExadataStorageConnectorArgs.__new__(ExternalExadataStorageConnectorArgs)

            if agent_id is None and not opts.urn:
                raise TypeError("Missing required property 'agent_id'")
            __props__.__dict__["agent_id"] = agent_id
            if connection_uri is None and not opts.urn:
                raise TypeError("Missing required property 'connection_uri'")
            __props__.__dict__["connection_uri"] = connection_uri
            if connector_name is None and not opts.urn:
                raise TypeError("Missing required property 'connector_name'")
            __props__.__dict__["connector_name"] = connector_name
            if credential_info is None and not opts.urn:
                raise TypeError("Missing required property 'credential_info'")
            __props__.__dict__["credential_info"] = credential_info
            if storage_server_id is None and not opts.urn:
                raise TypeError("Missing required property 'storage_server_id'")
            __props__.__dict__["storage_server_id"] = storage_server_id
            __props__.__dict__["additional_details"] = None
            __props__.__dict__["display_name"] = None
            __props__.__dict__["exadata_infrastructure_id"] = None
            __props__.__dict__["internal_id"] = None
            __props__.__dict__["lifecycle_details"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
            __props__.__dict__["version"] = None
        super(ExternalExadataStorageConnector, __self__).__init__(
            'oci:DatabaseManagement/externalExadataStorageConnector:ExternalExadataStorageConnector',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional_details: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            agent_id: Optional[pulumi.Input[str]] = None,
            connection_uri: Optional[pulumi.Input[str]] = None,
            connector_name: Optional[pulumi.Input[str]] = None,
            credential_info: Optional[pulumi.Input[pulumi.InputType['ExternalExadataStorageConnectorCredentialInfoArgs']]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            exadata_infrastructure_id: Optional[pulumi.Input[str]] = None,
            internal_id: Optional[pulumi.Input[str]] = None,
            lifecycle_details: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            storage_server_id: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'ExternalExadataStorageConnector':
        """
        Get an existing ExternalExadataStorageConnector resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExternalExadataStorageConnectorState.__new__(_ExternalExadataStorageConnectorState)

        __props__.__dict__["additional_details"] = additional_details
        __props__.__dict__["agent_id"] = agent_id
        __props__.__dict__["connection_uri"] = connection_uri
        __props__.__dict__["connector_name"] = connector_name
        __props__.__dict__["credential_info"] = credential_info
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["exadata_infrastructure_id"] = exadata_infrastructure_id
        __props__.__dict__["internal_id"] = internal_id
        __props__.__dict__["lifecycle_details"] = lifecycle_details
        __props__.__dict__["state"] = state
        __props__.__dict__["status"] = status
        __props__.__dict__["storage_server_id"] = storage_server_id
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        __props__.__dict__["version"] = version
        return ExternalExadataStorageConnector(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectionUri")
    def connection_uri(self) -> pulumi.Output[str]:
        return pulumi.get(self, "connection_uri")

    @property
    @pulumi.getter(name="connectorName")
    def connector_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "connector_name")

    @property
    @pulumi.getter(name="credentialInfo")
    def credential_info(self) -> pulumi.Output['outputs.ExternalExadataStorageConnectorCredentialInfo']:
        return pulumi.get(self, "credential_info")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="exadataInfrastructureId")
    def exadata_infrastructure_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "exadata_infrastructure_id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageServerId")
    def storage_server_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "storage_server_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "version")

