# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ExternalMySqlDatabaseExternalMysqlDatabasesManagementArgs', 'ExternalMySqlDatabaseExternalMysqlDatabasesManagement']

@pulumi.input_type
class ExternalMySqlDatabaseExternalMysqlDatabasesManagementArgs:
    def __init__(__self__, *,
                 enable_external_mysql_database: pulumi.Input[bool],
                 external_my_sql_database_id: pulumi.Input[str],
                 connector_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ExternalMySqlDatabaseExternalMysqlDatabasesManagement resource.
        :param pulumi.Input[bool] enable_external_mysql_database: (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] external_my_sql_database_id: The OCID of the External MySQL Database.
        :param pulumi.Input[str] connector_id: OCID of External MySQL Database connector.
        """
        pulumi.set(__self__, "enable_external_mysql_database", enable_external_mysql_database)
        pulumi.set(__self__, "external_my_sql_database_id", external_my_sql_database_id)
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)

    @property
    @pulumi.getter(name="enableExternalMysqlDatabase")
    def enable_external_mysql_database(self) -> pulumi.Input[bool]:
        """
        (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "enable_external_mysql_database")

    @enable_external_mysql_database.setter
    def enable_external_mysql_database(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_external_mysql_database", value)

    @property
    @pulumi.getter(name="externalMySqlDatabaseId")
    def external_my_sql_database_id(self) -> pulumi.Input[str]:
        """
        The OCID of the External MySQL Database.
        """
        return pulumi.get(self, "external_my_sql_database_id")

    @external_my_sql_database_id.setter
    def external_my_sql_database_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_my_sql_database_id", value)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[pulumi.Input[str]]:
        """
        OCID of External MySQL Database connector.
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_id", value)


@pulumi.input_type
class _ExternalMySqlDatabaseExternalMysqlDatabasesManagementState:
    def __init__(__self__, *,
                 connector_id: Optional[pulumi.Input[str]] = None,
                 enable_external_mysql_database: Optional[pulumi.Input[bool]] = None,
                 external_my_sql_database_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ExternalMySqlDatabaseExternalMysqlDatabasesManagement resources.
        :param pulumi.Input[str] connector_id: OCID of External MySQL Database connector.
        :param pulumi.Input[bool] enable_external_mysql_database: (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] external_my_sql_database_id: The OCID of the External MySQL Database.
        """
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if enable_external_mysql_database is not None:
            pulumi.set(__self__, "enable_external_mysql_database", enable_external_mysql_database)
        if external_my_sql_database_id is not None:
            pulumi.set(__self__, "external_my_sql_database_id", external_my_sql_database_id)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[pulumi.Input[str]]:
        """
        OCID of External MySQL Database connector.
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_id", value)

    @property
    @pulumi.getter(name="enableExternalMysqlDatabase")
    def enable_external_mysql_database(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "enable_external_mysql_database")

    @enable_external_mysql_database.setter
    def enable_external_mysql_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_external_mysql_database", value)

    @property
    @pulumi.getter(name="externalMySqlDatabaseId")
    def external_my_sql_database_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OCID of the External MySQL Database.
        """
        return pulumi.get(self, "external_my_sql_database_id")

    @external_my_sql_database_id.setter
    def external_my_sql_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_my_sql_database_id", value)


class ExternalMySqlDatabaseExternalMysqlDatabasesManagement(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_id: Optional[pulumi.Input[str]] = None,
                 enable_external_mysql_database: Optional[pulumi.Input[bool]] = None,
                 external_my_sql_database_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource provides the External My Sql Database External Mysql Databases Management resource in Oracle Cloud Infrastructure Database Management service.

        Enables Database Management for an external MySQL Database.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_external_my_sql_database_external_mysql_databases_management = oci.database_management.ExternalMySqlDatabaseExternalMysqlDatabasesManagement("test_external_my_sql_database_external_mysql_databases_management",
            external_my_sql_database_id=test_external_my_sql_database["id"],
            enable_external_mysql_database=enable_external_mysql_database,
            connector_id=test_connector["id"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] connector_id: OCID of External MySQL Database connector.
        :param pulumi.Input[bool] enable_external_mysql_database: (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] external_my_sql_database_id: The OCID of the External MySQL Database.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExternalMySqlDatabaseExternalMysqlDatabasesManagementArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the External My Sql Database External Mysql Databases Management resource in Oracle Cloud Infrastructure Database Management service.

        Enables Database Management for an external MySQL Database.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_external_my_sql_database_external_mysql_databases_management = oci.database_management.ExternalMySqlDatabaseExternalMysqlDatabasesManagement("test_external_my_sql_database_external_mysql_databases_management",
            external_my_sql_database_id=test_external_my_sql_database["id"],
            enable_external_mysql_database=enable_external_mysql_database,
            connector_id=test_connector["id"])
        ```

        :param str resource_name: The name of the resource.
        :param ExternalMySqlDatabaseExternalMysqlDatabasesManagementArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExternalMySqlDatabaseExternalMysqlDatabasesManagementArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_id: Optional[pulumi.Input[str]] = None,
                 enable_external_mysql_database: Optional[pulumi.Input[bool]] = None,
                 external_my_sql_database_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExternalMySqlDatabaseExternalMysqlDatabasesManagementArgs.__new__(ExternalMySqlDatabaseExternalMysqlDatabasesManagementArgs)

            __props__.__dict__["connector_id"] = connector_id
            if enable_external_mysql_database is None and not opts.urn:
                raise TypeError("Missing required property 'enable_external_mysql_database'")
            __props__.__dict__["enable_external_mysql_database"] = enable_external_mysql_database
            if external_my_sql_database_id is None and not opts.urn:
                raise TypeError("Missing required property 'external_my_sql_database_id'")
            __props__.__dict__["external_my_sql_database_id"] = external_my_sql_database_id
        super(ExternalMySqlDatabaseExternalMysqlDatabasesManagement, __self__).__init__(
            'oci:DatabaseManagement/externalMySqlDatabaseExternalMysqlDatabasesManagement:ExternalMySqlDatabaseExternalMysqlDatabasesManagement',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connector_id: Optional[pulumi.Input[str]] = None,
            enable_external_mysql_database: Optional[pulumi.Input[bool]] = None,
            external_my_sql_database_id: Optional[pulumi.Input[str]] = None) -> 'ExternalMySqlDatabaseExternalMysqlDatabasesManagement':
        """
        Get an existing ExternalMySqlDatabaseExternalMysqlDatabasesManagement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] connector_id: OCID of External MySQL Database connector.
        :param pulumi.Input[bool] enable_external_mysql_database: (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] external_my_sql_database_id: The OCID of the External MySQL Database.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExternalMySqlDatabaseExternalMysqlDatabasesManagementState.__new__(_ExternalMySqlDatabaseExternalMysqlDatabasesManagementState)

        __props__.__dict__["connector_id"] = connector_id
        __props__.__dict__["enable_external_mysql_database"] = enable_external_mysql_database
        __props__.__dict__["external_my_sql_database_id"] = external_my_sql_database_id
        return ExternalMySqlDatabaseExternalMysqlDatabasesManagement(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> pulumi.Output[str]:
        """
        OCID of External MySQL Database connector.
        """
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="enableExternalMysqlDatabase")
    def enable_external_mysql_database(self) -> pulumi.Output[bool]:
        """
        (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "enable_external_mysql_database")

    @property
    @pulumi.getter(name="externalMySqlDatabaseId")
    def external_my_sql_database_id(self) -> pulumi.Output[str]:
        """
        The OCID of the External MySQL Database.
        """
        return pulumi.get(self, "external_my_sql_database_id")

