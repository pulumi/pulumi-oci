# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetManagedDatabaseAlertLogCountResult',
    'AwaitableGetManagedDatabaseAlertLogCountResult',
    'get_managed_database_alert_log_count',
    'get_managed_database_alert_log_count_output',
]

@pulumi.output_type
class GetManagedDatabaseAlertLogCountResult:
    """
    A collection of values returned by getManagedDatabaseAlertLogCount.
    """
    def __init__(__self__, group_by=None, id=None, is_regular_expression=None, items=None, level_filter=None, log_search_text=None, managed_database_id=None, time_greater_than_or_equal_to=None, time_less_than_or_equal_to=None, type_filter=None):
        if group_by and not isinstance(group_by, str):
            raise TypeError("Expected argument 'group_by' to be a str")
        pulumi.set(__self__, "group_by", group_by)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_regular_expression and not isinstance(is_regular_expression, bool):
            raise TypeError("Expected argument 'is_regular_expression' to be a bool")
        pulumi.set(__self__, "is_regular_expression", is_regular_expression)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if level_filter and not isinstance(level_filter, str):
            raise TypeError("Expected argument 'level_filter' to be a str")
        pulumi.set(__self__, "level_filter", level_filter)
        if log_search_text and not isinstance(log_search_text, str):
            raise TypeError("Expected argument 'log_search_text' to be a str")
        pulumi.set(__self__, "log_search_text", log_search_text)
        if managed_database_id and not isinstance(managed_database_id, str):
            raise TypeError("Expected argument 'managed_database_id' to be a str")
        pulumi.set(__self__, "managed_database_id", managed_database_id)
        if time_greater_than_or_equal_to and not isinstance(time_greater_than_or_equal_to, str):
            raise TypeError("Expected argument 'time_greater_than_or_equal_to' to be a str")
        pulumi.set(__self__, "time_greater_than_or_equal_to", time_greater_than_or_equal_to)
        if time_less_than_or_equal_to and not isinstance(time_less_than_or_equal_to, str):
            raise TypeError("Expected argument 'time_less_than_or_equal_to' to be a str")
        pulumi.set(__self__, "time_less_than_or_equal_to", time_less_than_or_equal_to)
        if type_filter and not isinstance(type_filter, str):
            raise TypeError("Expected argument 'type_filter' to be a str")
        pulumi.set(__self__, "type_filter", type_filter)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[str]:
        return pulumi.get(self, "group_by")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRegularExpression")
    def is_regular_expression(self) -> Optional[bool]:
        return pulumi.get(self, "is_regular_expression")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseAlertLogCountItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="levelFilter")
    def level_filter(self) -> Optional[str]:
        return pulumi.get(self, "level_filter")

    @property
    @pulumi.getter(name="logSearchText")
    def log_search_text(self) -> Optional[str]:
        return pulumi.get(self, "log_search_text")

    @property
    @pulumi.getter(name="managedDatabaseId")
    def managed_database_id(self) -> str:
        return pulumi.get(self, "managed_database_id")

    @property
    @pulumi.getter(name="timeGreaterThanOrEqualTo")
    def time_greater_than_or_equal_to(self) -> Optional[str]:
        return pulumi.get(self, "time_greater_than_or_equal_to")

    @property
    @pulumi.getter(name="timeLessThanOrEqualTo")
    def time_less_than_or_equal_to(self) -> Optional[str]:
        return pulumi.get(self, "time_less_than_or_equal_to")

    @property
    @pulumi.getter(name="typeFilter")
    def type_filter(self) -> Optional[str]:
        return pulumi.get(self, "type_filter")


class AwaitableGetManagedDatabaseAlertLogCountResult(GetManagedDatabaseAlertLogCountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagedDatabaseAlertLogCountResult(
            group_by=self.group_by,
            id=self.id,
            is_regular_expression=self.is_regular_expression,
            items=self.items,
            level_filter=self.level_filter,
            log_search_text=self.log_search_text,
            managed_database_id=self.managed_database_id,
            time_greater_than_or_equal_to=self.time_greater_than_or_equal_to,
            time_less_than_or_equal_to=self.time_less_than_or_equal_to,
            type_filter=self.type_filter)


def get_managed_database_alert_log_count(group_by: Optional[str] = None,
                                         is_regular_expression: Optional[bool] = None,
                                         level_filter: Optional[str] = None,
                                         log_search_text: Optional[str] = None,
                                         managed_database_id: Optional[str] = None,
                                         time_greater_than_or_equal_to: Optional[str] = None,
                                         time_less_than_or_equal_to: Optional[str] = None,
                                         type_filter: Optional[str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagedDatabaseAlertLogCountResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['groupBy'] = group_by
    __args__['isRegularExpression'] = is_regular_expression
    __args__['levelFilter'] = level_filter
    __args__['logSearchText'] = log_search_text
    __args__['managedDatabaseId'] = managed_database_id
    __args__['timeGreaterThanOrEqualTo'] = time_greater_than_or_equal_to
    __args__['timeLessThanOrEqualTo'] = time_less_than_or_equal_to
    __args__['typeFilter'] = type_filter
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DatabaseManagement/getManagedDatabaseAlertLogCount:getManagedDatabaseAlertLogCount', __args__, opts=opts, typ=GetManagedDatabaseAlertLogCountResult).value

    return AwaitableGetManagedDatabaseAlertLogCountResult(
        group_by=pulumi.get(__ret__, 'group_by'),
        id=pulumi.get(__ret__, 'id'),
        is_regular_expression=pulumi.get(__ret__, 'is_regular_expression'),
        items=pulumi.get(__ret__, 'items'),
        level_filter=pulumi.get(__ret__, 'level_filter'),
        log_search_text=pulumi.get(__ret__, 'log_search_text'),
        managed_database_id=pulumi.get(__ret__, 'managed_database_id'),
        time_greater_than_or_equal_to=pulumi.get(__ret__, 'time_greater_than_or_equal_to'),
        time_less_than_or_equal_to=pulumi.get(__ret__, 'time_less_than_or_equal_to'),
        type_filter=pulumi.get(__ret__, 'type_filter'))


@_utilities.lift_output_func(get_managed_database_alert_log_count)
def get_managed_database_alert_log_count_output(group_by: Optional[pulumi.Input[Optional[str]]] = None,
                                                is_regular_expression: Optional[pulumi.Input[Optional[bool]]] = None,
                                                level_filter: Optional[pulumi.Input[Optional[str]]] = None,
                                                log_search_text: Optional[pulumi.Input[Optional[str]]] = None,
                                                managed_database_id: Optional[pulumi.Input[str]] = None,
                                                time_greater_than_or_equal_to: Optional[pulumi.Input[Optional[str]]] = None,
                                                time_less_than_or_equal_to: Optional[pulumi.Input[Optional[str]]] = None,
                                                type_filter: Optional[pulumi.Input[Optional[str]]] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetManagedDatabaseAlertLogCountResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
