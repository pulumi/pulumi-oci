# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult',
    'AwaitableGetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult',
    'get_managed_database_optimizer_statistics_collection_aggregations',
    'get_managed_database_optimizer_statistics_collection_aggregations_output',
]

@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult:
    """
    A collection of values returned by getManagedDatabaseOptimizerStatisticsCollectionAggregations.
    """
    def __init__(__self__, end_time_less_than_or_equal_to=None, filters=None, group_type=None, id=None, limit=None, managed_database_id=None, optimizer_statistics_collection_aggregations_collections=None, start_time_greater_than_or_equal_to=None, task_type=None):
        if end_time_less_than_or_equal_to and not isinstance(end_time_less_than_or_equal_to, str):
            raise TypeError("Expected argument 'end_time_less_than_or_equal_to' to be a str")
        pulumi.set(__self__, "end_time_less_than_or_equal_to", end_time_less_than_or_equal_to)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if group_type and not isinstance(group_type, str):
            raise TypeError("Expected argument 'group_type' to be a str")
        pulumi.set(__self__, "group_type", group_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if managed_database_id and not isinstance(managed_database_id, str):
            raise TypeError("Expected argument 'managed_database_id' to be a str")
        pulumi.set(__self__, "managed_database_id", managed_database_id)
        if optimizer_statistics_collection_aggregations_collections and not isinstance(optimizer_statistics_collection_aggregations_collections, list):
            raise TypeError("Expected argument 'optimizer_statistics_collection_aggregations_collections' to be a list")
        pulumi.set(__self__, "optimizer_statistics_collection_aggregations_collections", optimizer_statistics_collection_aggregations_collections)
        if start_time_greater_than_or_equal_to and not isinstance(start_time_greater_than_or_equal_to, str):
            raise TypeError("Expected argument 'start_time_greater_than_or_equal_to' to be a str")
        pulumi.set(__self__, "start_time_greater_than_or_equal_to", start_time_greater_than_or_equal_to)
        if task_type and not isinstance(task_type, str):
            raise TypeError("Expected argument 'task_type' to be a str")
        pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="endTimeLessThanOrEqualTo")
    def end_time_less_than_or_equal_to(self) -> Optional[str]:
        return pulumi.get(self, "end_time_less_than_or_equal_to")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsCollectionAggregationsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> str:
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="managedDatabaseId")
    def managed_database_id(self) -> str:
        return pulumi.get(self, "managed_database_id")

    @property
    @pulumi.getter(name="optimizerStatisticsCollectionAggregationsCollections")
    def optimizer_statistics_collection_aggregations_collections(self) -> Sequence['outputs.GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionResult']:
        """
        The list of optimizer_statistics_collection_aggregations_collection.
        """
        return pulumi.get(self, "optimizer_statistics_collection_aggregations_collections")

    @property
    @pulumi.getter(name="startTimeGreaterThanOrEqualTo")
    def start_time_greater_than_or_equal_to(self) -> Optional[str]:
        return pulumi.get(self, "start_time_greater_than_or_equal_to")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[str]:
        return pulumi.get(self, "task_type")


class AwaitableGetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult(GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult(
            end_time_less_than_or_equal_to=self.end_time_less_than_or_equal_to,
            filters=self.filters,
            group_type=self.group_type,
            id=self.id,
            limit=self.limit,
            managed_database_id=self.managed_database_id,
            optimizer_statistics_collection_aggregations_collections=self.optimizer_statistics_collection_aggregations_collections,
            start_time_greater_than_or_equal_to=self.start_time_greater_than_or_equal_to,
            task_type=self.task_type)


def get_managed_database_optimizer_statistics_collection_aggregations(end_time_less_than_or_equal_to: Optional[str] = None,
                                                                      filters: Optional[Sequence[pulumi.InputType['GetManagedDatabaseOptimizerStatisticsCollectionAggregationsFilterArgs']]] = None,
                                                                      group_type: Optional[str] = None,
                                                                      limit: Optional[int] = None,
                                                                      managed_database_id: Optional[str] = None,
                                                                      start_time_greater_than_or_equal_to: Optional[str] = None,
                                                                      task_type: Optional[str] = None,
                                                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult:
    """
    This data source provides the list of Managed Database Optimizer Statistics Collection Aggregations in Oracle Cloud Infrastructure Database Management service.

    Gets a list of the optimizer statistics collection operations per hour, grouped by task or object status for the specified Managed Database.
    You must specify a value for the GroupByQueryParam to determine whether the data should be grouped by task status or task object status.
    Optionally, you can specify a date-time range (of seven days) to obtain collection aggregations within the specified time range.
    If the date-time range is not specified, then the operations in the last seven days are listed.
    You can further filter the results by providing the optional type of TaskTypeQueryParam.
    If the task type if not provided, then both Auto and Manual tasks are considered for aggregation.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_managed_database_optimizer_statistics_collection_aggregations = oci.DatabaseManagement.get_managed_database_optimizer_statistics_collection_aggregations(group_type=var["managed_database_optimizer_statistics_collection_aggregation_group_type"],
        managed_database_id=oci_database_management_managed_database["test_managed_database"]["id"],
        end_time_less_than_or_equal_to=var["managed_database_optimizer_statistics_collection_aggregation_end_time_less_than_or_equal_to"],
        start_time_greater_than_or_equal_to=var["managed_database_optimizer_statistics_collection_aggregation_start_time_greater_than_or_equal_to"],
        task_type=var["managed_database_optimizer_statistics_collection_aggregation_task_type"])
    ```


    :param str end_time_less_than_or_equal_to: The end time of the time range to retrieve the optimizer statistics of a Managed Database in UTC in ISO-8601 format, which is "yyyy-MM-dd'T'hh:mm:ss.sss'Z'".
    :param str group_type: The optimizer statistics tasks grouped by type.
    :param str managed_database_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
    :param str start_time_greater_than_or_equal_to: The start time of the time range to retrieve the optimizer statistics of a Managed Database in UTC in ISO-8601 format, which is "yyyy-MM-dd'T'hh:mm:ss.sss'Z'".
    :param str task_type: The filter types of the optimizer statistics tasks.
    """
    __args__ = dict()
    __args__['endTimeLessThanOrEqualTo'] = end_time_less_than_or_equal_to
    __args__['filters'] = filters
    __args__['groupType'] = group_type
    __args__['limit'] = limit
    __args__['managedDatabaseId'] = managed_database_id
    __args__['startTimeGreaterThanOrEqualTo'] = start_time_greater_than_or_equal_to
    __args__['taskType'] = task_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DatabaseManagement/getManagedDatabaseOptimizerStatisticsCollectionAggregations:getManagedDatabaseOptimizerStatisticsCollectionAggregations', __args__, opts=opts, typ=GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult).value

    return AwaitableGetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult(
        end_time_less_than_or_equal_to=pulumi.get(__ret__, 'end_time_less_than_or_equal_to'),
        filters=pulumi.get(__ret__, 'filters'),
        group_type=pulumi.get(__ret__, 'group_type'),
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        managed_database_id=pulumi.get(__ret__, 'managed_database_id'),
        optimizer_statistics_collection_aggregations_collections=pulumi.get(__ret__, 'optimizer_statistics_collection_aggregations_collections'),
        start_time_greater_than_or_equal_to=pulumi.get(__ret__, 'start_time_greater_than_or_equal_to'),
        task_type=pulumi.get(__ret__, 'task_type'))


@_utilities.lift_output_func(get_managed_database_optimizer_statistics_collection_aggregations)
def get_managed_database_optimizer_statistics_collection_aggregations_output(end_time_less_than_or_equal_to: Optional[pulumi.Input[Optional[str]]] = None,
                                                                             filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetManagedDatabaseOptimizerStatisticsCollectionAggregationsFilterArgs']]]]] = None,
                                                                             group_type: Optional[pulumi.Input[str]] = None,
                                                                             limit: Optional[pulumi.Input[Optional[int]]] = None,
                                                                             managed_database_id: Optional[pulumi.Input[str]] = None,
                                                                             start_time_greater_than_or_equal_to: Optional[pulumi.Input[Optional[str]]] = None,
                                                                             task_type: Optional[pulumi.Input[Optional[str]]] = None,
                                                                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetManagedDatabaseOptimizerStatisticsCollectionAggregationsResult]:
    """
    This data source provides the list of Managed Database Optimizer Statistics Collection Aggregations in Oracle Cloud Infrastructure Database Management service.

    Gets a list of the optimizer statistics collection operations per hour, grouped by task or object status for the specified Managed Database.
    You must specify a value for the GroupByQueryParam to determine whether the data should be grouped by task status or task object status.
    Optionally, you can specify a date-time range (of seven days) to obtain collection aggregations within the specified time range.
    If the date-time range is not specified, then the operations in the last seven days are listed.
    You can further filter the results by providing the optional type of TaskTypeQueryParam.
    If the task type if not provided, then both Auto and Manual tasks are considered for aggregation.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_managed_database_optimizer_statistics_collection_aggregations = oci.DatabaseManagement.get_managed_database_optimizer_statistics_collection_aggregations(group_type=var["managed_database_optimizer_statistics_collection_aggregation_group_type"],
        managed_database_id=oci_database_management_managed_database["test_managed_database"]["id"],
        end_time_less_than_or_equal_to=var["managed_database_optimizer_statistics_collection_aggregation_end_time_less_than_or_equal_to"],
        start_time_greater_than_or_equal_to=var["managed_database_optimizer_statistics_collection_aggregation_start_time_greater_than_or_equal_to"],
        task_type=var["managed_database_optimizer_statistics_collection_aggregation_task_type"])
    ```


    :param str end_time_less_than_or_equal_to: The end time of the time range to retrieve the optimizer statistics of a Managed Database in UTC in ISO-8601 format, which is "yyyy-MM-dd'T'hh:mm:ss.sss'Z'".
    :param str group_type: The optimizer statistics tasks grouped by type.
    :param str managed_database_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
    :param str start_time_greater_than_or_equal_to: The start time of the time range to retrieve the optimizer statistics of a Managed Database in UTC in ISO-8601 format, which is "yyyy-MM-dd'T'hh:mm:ss.sss'Z'".
    :param str task_type: The filter types of the optimizer statistics tasks.
    """
    ...
