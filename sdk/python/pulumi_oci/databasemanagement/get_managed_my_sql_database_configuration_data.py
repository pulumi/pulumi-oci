# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetManagedMySqlDatabaseConfigurationDataResult',
    'AwaitableGetManagedMySqlDatabaseConfigurationDataResult',
    'get_managed_my_sql_database_configuration_data',
    'get_managed_my_sql_database_configuration_data_output',
]

@pulumi.output_type
class GetManagedMySqlDatabaseConfigurationDataResult:
    """
    A collection of values returned by getManagedMySqlDatabaseConfigurationData.
    """
    def __init__(__self__, filters=None, id=None, managed_my_sql_database_id=None, my_sql_configuration_data_collections=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if managed_my_sql_database_id and not isinstance(managed_my_sql_database_id, str):
            raise TypeError("Expected argument 'managed_my_sql_database_id' to be a str")
        pulumi.set(__self__, "managed_my_sql_database_id", managed_my_sql_database_id)
        if my_sql_configuration_data_collections and not isinstance(my_sql_configuration_data_collections, list):
            raise TypeError("Expected argument 'my_sql_configuration_data_collections' to be a list")
        pulumi.set(__self__, "my_sql_configuration_data_collections", my_sql_configuration_data_collections)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetManagedMySqlDatabaseConfigurationDataFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedMySqlDatabaseId")
    def managed_my_sql_database_id(self) -> str:
        return pulumi.get(self, "managed_my_sql_database_id")

    @property
    @pulumi.getter(name="mySqlConfigurationDataCollections")
    def my_sql_configuration_data_collections(self) -> Sequence['outputs.GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionResult']:
        """
        The list of my_sql_configuration_data_collection.
        """
        return pulumi.get(self, "my_sql_configuration_data_collections")


class AwaitableGetManagedMySqlDatabaseConfigurationDataResult(GetManagedMySqlDatabaseConfigurationDataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagedMySqlDatabaseConfigurationDataResult(
            filters=self.filters,
            id=self.id,
            managed_my_sql_database_id=self.managed_my_sql_database_id,
            my_sql_configuration_data_collections=self.my_sql_configuration_data_collections)


def get_managed_my_sql_database_configuration_data(filters: Optional[Sequence[pulumi.InputType['GetManagedMySqlDatabaseConfigurationDataFilterArgs']]] = None,
                                                   managed_my_sql_database_id: Optional[str] = None,
                                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagedMySqlDatabaseConfigurationDataResult:
    """
    This data source provides the list of Managed My Sql Database Configuration Data in Oracle Cloud Infrastructure Database Management service.

    Retrieves Configuration Data for given MySQL Instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_managed_my_sql_database_configuration_data = oci.DatabaseManagement.get_managed_my_sql_database_configuration_data(managed_my_sql_database_id=oci_database_management_managed_my_sql_database["test_managed_my_sql_database"]["id"])
    ```


    :param str managed_my_sql_database_id: The OCID of ManagedMySqlDatabase.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['managedMySqlDatabaseId'] = managed_my_sql_database_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DatabaseManagement/getManagedMySqlDatabaseConfigurationData:getManagedMySqlDatabaseConfigurationData', __args__, opts=opts, typ=GetManagedMySqlDatabaseConfigurationDataResult).value

    return AwaitableGetManagedMySqlDatabaseConfigurationDataResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        managed_my_sql_database_id=pulumi.get(__ret__, 'managed_my_sql_database_id'),
        my_sql_configuration_data_collections=pulumi.get(__ret__, 'my_sql_configuration_data_collections'))


@_utilities.lift_output_func(get_managed_my_sql_database_configuration_data)
def get_managed_my_sql_database_configuration_data_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetManagedMySqlDatabaseConfigurationDataFilterArgs']]]]] = None,
                                                          managed_my_sql_database_id: Optional[pulumi.Input[str]] = None,
                                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetManagedMySqlDatabaseConfigurationDataResult]:
    """
    This data source provides the list of Managed My Sql Database Configuration Data in Oracle Cloud Infrastructure Database Management service.

    Retrieves Configuration Data for given MySQL Instance.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_managed_my_sql_database_configuration_data = oci.DatabaseManagement.get_managed_my_sql_database_configuration_data(managed_my_sql_database_id=oci_database_management_managed_my_sql_database["test_managed_my_sql_database"]["id"])
    ```


    :param str managed_my_sql_database_id: The OCID of ManagedMySqlDatabase.
    """
    ...
