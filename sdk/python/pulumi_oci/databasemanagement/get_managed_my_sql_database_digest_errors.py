# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetManagedMySqlDatabaseDigestErrorsResult',
    'AwaitableGetManagedMySqlDatabaseDigestErrorsResult',
    'get_managed_my_sql_database_digest_errors',
    'get_managed_my_sql_database_digest_errors_output',
]

@pulumi.output_type
class GetManagedMySqlDatabaseDigestErrorsResult:
    """
    A collection of values returned by getManagedMySqlDatabaseDigestErrors.
    """
    def __init__(__self__, digest=None, filters=None, id=None, managed_my_sql_database_id=None, my_sql_digest_errors_collections=None):
        if digest and not isinstance(digest, str):
            raise TypeError("Expected argument 'digest' to be a str")
        pulumi.set(__self__, "digest", digest)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if managed_my_sql_database_id and not isinstance(managed_my_sql_database_id, str):
            raise TypeError("Expected argument 'managed_my_sql_database_id' to be a str")
        pulumi.set(__self__, "managed_my_sql_database_id", managed_my_sql_database_id)
        if my_sql_digest_errors_collections and not isinstance(my_sql_digest_errors_collections, list):
            raise TypeError("Expected argument 'my_sql_digest_errors_collections' to be a list")
        pulumi.set(__self__, "my_sql_digest_errors_collections", my_sql_digest_errors_collections)

    @_builtins.property
    @pulumi.getter
    def digest(self) -> _builtins.str:
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetManagedMySqlDatabaseDigestErrorsFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="managedMySqlDatabaseId")
    def managed_my_sql_database_id(self) -> _builtins.str:
        return pulumi.get(self, "managed_my_sql_database_id")

    @_builtins.property
    @pulumi.getter(name="mySqlDigestErrorsCollections")
    def my_sql_digest_errors_collections(self) -> Sequence['outputs.GetManagedMySqlDatabaseDigestErrorsMySqlDigestErrorsCollectionResult']:
        """
        The list of my_sql_digest_errors_collection.
        """
        return pulumi.get(self, "my_sql_digest_errors_collections")


class AwaitableGetManagedMySqlDatabaseDigestErrorsResult(GetManagedMySqlDatabaseDigestErrorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagedMySqlDatabaseDigestErrorsResult(
            digest=self.digest,
            filters=self.filters,
            id=self.id,
            managed_my_sql_database_id=self.managed_my_sql_database_id,
            my_sql_digest_errors_collections=self.my_sql_digest_errors_collections)


def get_managed_my_sql_database_digest_errors(digest: Optional[_builtins.str] = None,
                                              filters: Optional[Sequence[Union['GetManagedMySqlDatabaseDigestErrorsFilterArgs', 'GetManagedMySqlDatabaseDigestErrorsFilterArgsDict']]] = None,
                                              managed_my_sql_database_id: Optional[_builtins.str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagedMySqlDatabaseDigestErrorsResult:
    """
    This data source provides the list of Managed My Sql Database Digest Errors in Oracle Cloud Infrastructure Database Management service.

    Retrieves any potential errors for a given digest.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_managed_my_sql_database_digest_errors = oci.DatabaseManagement.get_managed_my_sql_database_digest_errors(digest=managed_my_sql_database_digest_error_digest,
        managed_my_sql_database_id=test_managed_my_sql_database["id"])
    ```


    :param _builtins.str digest: The digest of a MySQL normalized query.
    :param _builtins.str managed_my_sql_database_id: The OCID of the Managed MySQL Database.
    """
    __args__ = dict()
    __args__['digest'] = digest
    __args__['filters'] = filters
    __args__['managedMySqlDatabaseId'] = managed_my_sql_database_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DatabaseManagement/getManagedMySqlDatabaseDigestErrors:getManagedMySqlDatabaseDigestErrors', __args__, opts=opts, typ=GetManagedMySqlDatabaseDigestErrorsResult).value

    return AwaitableGetManagedMySqlDatabaseDigestErrorsResult(
        digest=pulumi.get(__ret__, 'digest'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        managed_my_sql_database_id=pulumi.get(__ret__, 'managed_my_sql_database_id'),
        my_sql_digest_errors_collections=pulumi.get(__ret__, 'my_sql_digest_errors_collections'))
def get_managed_my_sql_database_digest_errors_output(digest: Optional[pulumi.Input[_builtins.str]] = None,
                                                     filters: Optional[pulumi.Input[Optional[Sequence[Union['GetManagedMySqlDatabaseDigestErrorsFilterArgs', 'GetManagedMySqlDatabaseDigestErrorsFilterArgsDict']]]]] = None,
                                                     managed_my_sql_database_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetManagedMySqlDatabaseDigestErrorsResult]:
    """
    This data source provides the list of Managed My Sql Database Digest Errors in Oracle Cloud Infrastructure Database Management service.

    Retrieves any potential errors for a given digest.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_managed_my_sql_database_digest_errors = oci.DatabaseManagement.get_managed_my_sql_database_digest_errors(digest=managed_my_sql_database_digest_error_digest,
        managed_my_sql_database_id=test_managed_my_sql_database["id"])
    ```


    :param _builtins.str digest: The digest of a MySQL normalized query.
    :param _builtins.str managed_my_sql_database_id: The OCID of the Managed MySQL Database.
    """
    __args__ = dict()
    __args__['digest'] = digest
    __args__['filters'] = filters
    __args__['managedMySqlDatabaseId'] = managed_my_sql_database_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:DatabaseManagement/getManagedMySqlDatabaseDigestErrors:getManagedMySqlDatabaseDigestErrors', __args__, opts=opts, typ=GetManagedMySqlDatabaseDigestErrorsResult)
    return __ret__.apply(lambda __response__: GetManagedMySqlDatabaseDigestErrorsResult(
        digest=pulumi.get(__response__, 'digest'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        managed_my_sql_database_id=pulumi.get(__response__, 'managed_my_sql_database_id'),
        my_sql_digest_errors_collections=pulumi.get(__response__, 'my_sql_digest_errors_collections')))
