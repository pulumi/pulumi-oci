# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetManagedMySqlDatabaseGeneralReplicationInformationResult',
    'AwaitableGetManagedMySqlDatabaseGeneralReplicationInformationResult',
    'get_managed_my_sql_database_general_replication_information',
    'get_managed_my_sql_database_general_replication_information_output',
]

@pulumi.output_type
class GetManagedMySqlDatabaseGeneralReplicationInformationResult:
    """
    A collection of values returned by getManagedMySqlDatabaseGeneralReplicationInformation.
    """
    def __init__(__self__, apply_status_summary=None, binary_log_format=None, binary_logging=None, executed_gtid_set=None, fetch_status_summary=None, gtid_mode=None, high_availability_member_state=None, host_name=None, id=None, inbound_replications_count=None, instance_type=None, is_high_availability_enabled=None, managed_my_sql_database_id=None, outbound_replications_count=None, port=None, read_only=None, seconds_behind_source_max=None, server_id=None, server_uuid=None):
        if apply_status_summary and not isinstance(apply_status_summary, str):
            raise TypeError("Expected argument 'apply_status_summary' to be a str")
        pulumi.set(__self__, "apply_status_summary", apply_status_summary)
        if binary_log_format and not isinstance(binary_log_format, str):
            raise TypeError("Expected argument 'binary_log_format' to be a str")
        pulumi.set(__self__, "binary_log_format", binary_log_format)
        if binary_logging and not isinstance(binary_logging, str):
            raise TypeError("Expected argument 'binary_logging' to be a str")
        pulumi.set(__self__, "binary_logging", binary_logging)
        if executed_gtid_set and not isinstance(executed_gtid_set, str):
            raise TypeError("Expected argument 'executed_gtid_set' to be a str")
        pulumi.set(__self__, "executed_gtid_set", executed_gtid_set)
        if fetch_status_summary and not isinstance(fetch_status_summary, str):
            raise TypeError("Expected argument 'fetch_status_summary' to be a str")
        pulumi.set(__self__, "fetch_status_summary", fetch_status_summary)
        if gtid_mode and not isinstance(gtid_mode, str):
            raise TypeError("Expected argument 'gtid_mode' to be a str")
        pulumi.set(__self__, "gtid_mode", gtid_mode)
        if high_availability_member_state and not isinstance(high_availability_member_state, str):
            raise TypeError("Expected argument 'high_availability_member_state' to be a str")
        pulumi.set(__self__, "high_availability_member_state", high_availability_member_state)
        if host_name and not isinstance(host_name, str):
            raise TypeError("Expected argument 'host_name' to be a str")
        pulumi.set(__self__, "host_name", host_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inbound_replications_count and not isinstance(inbound_replications_count, int):
            raise TypeError("Expected argument 'inbound_replications_count' to be a int")
        pulumi.set(__self__, "inbound_replications_count", inbound_replications_count)
        if instance_type and not isinstance(instance_type, str):
            raise TypeError("Expected argument 'instance_type' to be a str")
        pulumi.set(__self__, "instance_type", instance_type)
        if is_high_availability_enabled and not isinstance(is_high_availability_enabled, bool):
            raise TypeError("Expected argument 'is_high_availability_enabled' to be a bool")
        pulumi.set(__self__, "is_high_availability_enabled", is_high_availability_enabled)
        if managed_my_sql_database_id and not isinstance(managed_my_sql_database_id, str):
            raise TypeError("Expected argument 'managed_my_sql_database_id' to be a str")
        pulumi.set(__self__, "managed_my_sql_database_id", managed_my_sql_database_id)
        if outbound_replications_count and not isinstance(outbound_replications_count, int):
            raise TypeError("Expected argument 'outbound_replications_count' to be a int")
        pulumi.set(__self__, "outbound_replications_count", outbound_replications_count)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if read_only and not isinstance(read_only, str):
            raise TypeError("Expected argument 'read_only' to be a str")
        pulumi.set(__self__, "read_only", read_only)
        if seconds_behind_source_max and not isinstance(seconds_behind_source_max, str):
            raise TypeError("Expected argument 'seconds_behind_source_max' to be a str")
        pulumi.set(__self__, "seconds_behind_source_max", seconds_behind_source_max)
        if server_id and not isinstance(server_id, str):
            raise TypeError("Expected argument 'server_id' to be a str")
        pulumi.set(__self__, "server_id", server_id)
        if server_uuid and not isinstance(server_uuid, str):
            raise TypeError("Expected argument 'server_uuid' to be a str")
        pulumi.set(__self__, "server_uuid", server_uuid)

    @property
    @pulumi.getter(name="applyStatusSummary")
    def apply_status_summary(self) -> builtins.str:
        """
        A summary of the current status of apply operations.
        """
        return pulumi.get(self, "apply_status_summary")

    @property
    @pulumi.getter(name="binaryLogFormat")
    def binary_log_format(self) -> builtins.str:
        """
        The binary logging format used by this server.
        """
        return pulumi.get(self, "binary_log_format")

    @property
    @pulumi.getter(name="binaryLogging")
    def binary_logging(self) -> builtins.str:
        """
        Status of binary logging on this server.
        """
        return pulumi.get(self, "binary_logging")

    @property
    @pulumi.getter(name="executedGtidSet")
    def executed_gtid_set(self) -> builtins.str:
        """
        The set of global transaction identifiers for transactions that have been executed on this source server.
        """
        return pulumi.get(self, "executed_gtid_set")

    @property
    @pulumi.getter(name="fetchStatusSummary")
    def fetch_status_summary(self) -> builtins.str:
        """
        A summary of the current status of fetch operations.
        """
        return pulumi.get(self, "fetch_status_summary")

    @property
    @pulumi.getter(name="gtidMode")
    def gtid_mode(self) -> builtins.str:
        """
        Global Transaction Identifier (GTID) mode of this server.
        """
        return pulumi.get(self, "gtid_mode")

    @property
    @pulumi.getter(name="highAvailabilityMemberState")
    def high_availability_member_state(self) -> builtins.str:
        """
        The state of this server as a group replication member.
        """
        return pulumi.get(self, "high_availability_member_state")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> builtins.str:
        """
        This server's host name.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inboundReplicationsCount")
    def inbound_replications_count(self) -> builtins.int:
        """
        The number of sources this server is replicating from.
        """
        return pulumi.get(self, "inbound_replications_count")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> builtins.str:
        """
        The type of the instance. Source, Replica, Primary Group Member, Secondary Group Member, and so on. If the instance is replicating from one or more sources and has one or more replicas, i.e., it belongs to a replication chain, the instance type can be Replica/Source.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="isHighAvailabilityEnabled")
    def is_high_availability_enabled(self) -> builtins.bool:
        """
        Specifies if high availability is enabled on this server.
        """
        return pulumi.get(self, "is_high_availability_enabled")

    @property
    @pulumi.getter(name="managedMySqlDatabaseId")
    def managed_my_sql_database_id(self) -> builtins.str:
        return pulumi.get(self, "managed_my_sql_database_id")

    @property
    @pulumi.getter(name="outboundReplicationsCount")
    def outbound_replications_count(self) -> builtins.int:
        """
        The number of replicas replicating from this server.
        """
        return pulumi.get(self, "outbound_replications_count")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        The number of the port on which the server listens for TCP/IP connections.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> builtins.str:
        """
        If the value is ON, the instance is configured as read_only. If the value is SUPER, the instance is configured as super_read_only. If the value is OFF, the instance is neither read_only nor super_read_only.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="secondsBehindSourceMax")
    def seconds_behind_source_max(self) -> builtins.str:
        """
        The number of seconds the replica is behind the source. When multiple sources are involved, this is the maximum value across all sources.
        """
        return pulumi.get(self, "seconds_behind_source_max")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> builtins.str:
        """
        This server's ID.
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter(name="serverUuid")
    def server_uuid(self) -> builtins.str:
        """
        This server's Universally Unique Identifier (UUID).
        """
        return pulumi.get(self, "server_uuid")


class AwaitableGetManagedMySqlDatabaseGeneralReplicationInformationResult(GetManagedMySqlDatabaseGeneralReplicationInformationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagedMySqlDatabaseGeneralReplicationInformationResult(
            apply_status_summary=self.apply_status_summary,
            binary_log_format=self.binary_log_format,
            binary_logging=self.binary_logging,
            executed_gtid_set=self.executed_gtid_set,
            fetch_status_summary=self.fetch_status_summary,
            gtid_mode=self.gtid_mode,
            high_availability_member_state=self.high_availability_member_state,
            host_name=self.host_name,
            id=self.id,
            inbound_replications_count=self.inbound_replications_count,
            instance_type=self.instance_type,
            is_high_availability_enabled=self.is_high_availability_enabled,
            managed_my_sql_database_id=self.managed_my_sql_database_id,
            outbound_replications_count=self.outbound_replications_count,
            port=self.port,
            read_only=self.read_only,
            seconds_behind_source_max=self.seconds_behind_source_max,
            server_id=self.server_id,
            server_uuid=self.server_uuid)


def get_managed_my_sql_database_general_replication_information(managed_my_sql_database_id: Optional[builtins.str] = None,
                                                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagedMySqlDatabaseGeneralReplicationInformationResult:
    """
    This data source provides details about a specific Managed My Sql Database General Replication Information resource in Oracle Cloud Infrastructure Database Management service.

    Retrieves general information regarding replication of a specific MySQL server.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_managed_my_sql_database_general_replication_information = oci.DatabaseManagement.get_managed_my_sql_database_general_replication_information(managed_my_sql_database_id=test_managed_my_sql_database["id"])
    ```


    :param builtins.str managed_my_sql_database_id: The OCID of the Managed MySQL Database.
    """
    __args__ = dict()
    __args__['managedMySqlDatabaseId'] = managed_my_sql_database_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DatabaseManagement/getManagedMySqlDatabaseGeneralReplicationInformation:getManagedMySqlDatabaseGeneralReplicationInformation', __args__, opts=opts, typ=GetManagedMySqlDatabaseGeneralReplicationInformationResult).value

    return AwaitableGetManagedMySqlDatabaseGeneralReplicationInformationResult(
        apply_status_summary=pulumi.get(__ret__, 'apply_status_summary'),
        binary_log_format=pulumi.get(__ret__, 'binary_log_format'),
        binary_logging=pulumi.get(__ret__, 'binary_logging'),
        executed_gtid_set=pulumi.get(__ret__, 'executed_gtid_set'),
        fetch_status_summary=pulumi.get(__ret__, 'fetch_status_summary'),
        gtid_mode=pulumi.get(__ret__, 'gtid_mode'),
        high_availability_member_state=pulumi.get(__ret__, 'high_availability_member_state'),
        host_name=pulumi.get(__ret__, 'host_name'),
        id=pulumi.get(__ret__, 'id'),
        inbound_replications_count=pulumi.get(__ret__, 'inbound_replications_count'),
        instance_type=pulumi.get(__ret__, 'instance_type'),
        is_high_availability_enabled=pulumi.get(__ret__, 'is_high_availability_enabled'),
        managed_my_sql_database_id=pulumi.get(__ret__, 'managed_my_sql_database_id'),
        outbound_replications_count=pulumi.get(__ret__, 'outbound_replications_count'),
        port=pulumi.get(__ret__, 'port'),
        read_only=pulumi.get(__ret__, 'read_only'),
        seconds_behind_source_max=pulumi.get(__ret__, 'seconds_behind_source_max'),
        server_id=pulumi.get(__ret__, 'server_id'),
        server_uuid=pulumi.get(__ret__, 'server_uuid'))
def get_managed_my_sql_database_general_replication_information_output(managed_my_sql_database_id: Optional[pulumi.Input[builtins.str]] = None,
                                                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetManagedMySqlDatabaseGeneralReplicationInformationResult]:
    """
    This data source provides details about a specific Managed My Sql Database General Replication Information resource in Oracle Cloud Infrastructure Database Management service.

    Retrieves general information regarding replication of a specific MySQL server.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_managed_my_sql_database_general_replication_information = oci.DatabaseManagement.get_managed_my_sql_database_general_replication_information(managed_my_sql_database_id=test_managed_my_sql_database["id"])
    ```


    :param builtins.str managed_my_sql_database_id: The OCID of the Managed MySQL Database.
    """
    __args__ = dict()
    __args__['managedMySqlDatabaseId'] = managed_my_sql_database_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:DatabaseManagement/getManagedMySqlDatabaseGeneralReplicationInformation:getManagedMySqlDatabaseGeneralReplicationInformation', __args__, opts=opts, typ=GetManagedMySqlDatabaseGeneralReplicationInformationResult)
    return __ret__.apply(lambda __response__: GetManagedMySqlDatabaseGeneralReplicationInformationResult(
        apply_status_summary=pulumi.get(__response__, 'apply_status_summary'),
        binary_log_format=pulumi.get(__response__, 'binary_log_format'),
        binary_logging=pulumi.get(__response__, 'binary_logging'),
        executed_gtid_set=pulumi.get(__response__, 'executed_gtid_set'),
        fetch_status_summary=pulumi.get(__response__, 'fetch_status_summary'),
        gtid_mode=pulumi.get(__response__, 'gtid_mode'),
        high_availability_member_state=pulumi.get(__response__, 'high_availability_member_state'),
        host_name=pulumi.get(__response__, 'host_name'),
        id=pulumi.get(__response__, 'id'),
        inbound_replications_count=pulumi.get(__response__, 'inbound_replications_count'),
        instance_type=pulumi.get(__response__, 'instance_type'),
        is_high_availability_enabled=pulumi.get(__response__, 'is_high_availability_enabled'),
        managed_my_sql_database_id=pulumi.get(__response__, 'managed_my_sql_database_id'),
        outbound_replications_count=pulumi.get(__response__, 'outbound_replications_count'),
        port=pulumi.get(__response__, 'port'),
        read_only=pulumi.get(__response__, 'read_only'),
        seconds_behind_source_max=pulumi.get(__response__, 'seconds_behind_source_max'),
        server_id=pulumi.get(__response__, 'server_id'),
        server_uuid=pulumi.get(__response__, 'server_uuid')))
