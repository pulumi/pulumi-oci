# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetNamedCredentialResult',
    'AwaitableGetNamedCredentialResult',
    'get_named_credential',
    'get_named_credential_output',
]

@pulumi.output_type
class GetNamedCredentialResult:
    """
    A collection of values returned by getNamedCredential.
    """
    def __init__(__self__, associated_resource=None, compartment_id=None, contents=None, description=None, id=None, lifecycle_details=None, name=None, named_credential_id=None, scope=None, state=None, time_created=None, time_updated=None, type=None):
        if associated_resource and not isinstance(associated_resource, str):
            raise TypeError("Expected argument 'associated_resource' to be a str")
        pulumi.set(__self__, "associated_resource", associated_resource)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if contents and not isinstance(contents, list):
            raise TypeError("Expected argument 'contents' to be a list")
        pulumi.set(__self__, "contents", contents)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_details and not isinstance(lifecycle_details, str):
            raise TypeError("Expected argument 'lifecycle_details' to be a str")
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if named_credential_id and not isinstance(named_credential_id, str):
            raise TypeError("Expected argument 'named_credential_id' to be a str")
        pulumi.set(__self__, "named_credential_id", named_credential_id)
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        pulumi.set(__self__, "scope", scope)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="associatedResource")
    def associated_resource(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that  is associated to the named credential.
        """
        return pulumi.get(self, "associated_resource")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetNamedCredentialContentResult']:
        """
        The details of the named credential.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The information specified by the user about the named credential.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the named credential.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        The details of the lifecycle state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the named credential.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namedCredentialId")
    def named_credential_id(self) -> str:
        return pulumi.get(self, "named_credential_id")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        The scope of the named credential.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current lifecycle state of the named credential.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the named credential was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the named credential was last updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of resource associated with the named credential.
        """
        return pulumi.get(self, "type")


class AwaitableGetNamedCredentialResult(GetNamedCredentialResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNamedCredentialResult(
            associated_resource=self.associated_resource,
            compartment_id=self.compartment_id,
            contents=self.contents,
            description=self.description,
            id=self.id,
            lifecycle_details=self.lifecycle_details,
            name=self.name,
            named_credential_id=self.named_credential_id,
            scope=self.scope,
            state=self.state,
            time_created=self.time_created,
            time_updated=self.time_updated,
            type=self.type)


def get_named_credential(named_credential_id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNamedCredentialResult:
    """
    This data source provides details about a specific Named Credential resource in Oracle Cloud Infrastructure Database Management service.

    Gets the details for the named credential specified by namedCredentialId.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_named_credential = oci.DatabaseManagement.get_named_credential(named_credential_id=oci_database_management_named_credential["test_named_credential"]["id"])
    ```


    :param str named_credential_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the named credential.
    """
    __args__ = dict()
    __args__['namedCredentialId'] = named_credential_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DatabaseManagement/getNamedCredential:getNamedCredential', __args__, opts=opts, typ=GetNamedCredentialResult).value

    return AwaitableGetNamedCredentialResult(
        associated_resource=pulumi.get(__ret__, 'associated_resource'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        contents=pulumi.get(__ret__, 'contents'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        lifecycle_details=pulumi.get(__ret__, 'lifecycle_details'),
        name=pulumi.get(__ret__, 'name'),
        named_credential_id=pulumi.get(__ret__, 'named_credential_id'),
        scope=pulumi.get(__ret__, 'scope'),
        state=pulumi.get(__ret__, 'state'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_updated=pulumi.get(__ret__, 'time_updated'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_named_credential)
def get_named_credential_output(named_credential_id: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNamedCredentialResult]:
    """
    This data source provides details about a specific Named Credential resource in Oracle Cloud Infrastructure Database Management service.

    Gets the details for the named credential specified by namedCredentialId.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_named_credential = oci.DatabaseManagement.get_named_credential(named_credential_id=oci_database_management_named_credential["test_named_credential"]["id"])
    ```


    :param str named_credential_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the named credential.
    """
    ...
