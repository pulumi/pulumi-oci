# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ExternalAsmServicedDatabase',
    'ExternalClusterNetworkConfiguration',
    'ExternalClusterScanConfiguration',
    'ExternalClusterVipConfiguration',
    'ExternalDbSystemConnectorConnectionInfo',
    'ExternalDbSystemConnectorConnectionInfoConnectionCredential',
    'ExternalDbSystemConnectorConnectionInfoConnectionString',
    'ExternalDbSystemDatabaseManagementConfig',
    'ExternalDbSystemDiscoveryDiscoveredComponent',
    'ExternalDbSystemDiscoveryDiscoveredComponentAsmInstance',
    'ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent',
    'ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance',
    'ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector',
    'ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfo',
    'ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredential',
    'ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString',
    'ExternalDbSystemDiscoveryDiscoveredComponentConnector',
    'ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfo',
    'ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionCredential',
    'ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionString',
    'ExternalDbSystemDiscoveryDiscoveredComponentEndpoint',
    'ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration',
    'ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase',
    'ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnector',
    'ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfo',
    'ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredential',
    'ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionString',
    'ExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration',
    'ExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration',
    'ExternalDbSystemDiscoveryPatchOperation',
    'ExternalDbSystemDiscoveryPatchOperationValue',
    'ExternalDbSystemDiscoveryPatchOperationValueConnector',
    'ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfo',
    'ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionCredentials',
    'ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionString',
    'ExternalDbSystemStackMonitoringConfig',
    'ExternalExadataInfrastructureDatabaseSystem',
    'ExternalExadataInfrastructureStorageGrid',
    'ExternalExadataStorageConnectorCredentialInfo',
    'ExternalListenerEndpoint',
    'ExternalListenerServicedAsm',
    'ExternalListenerServicedDatabase',
    'ManagedDatabaseGroupManagedDatabase',
    'ManagedDatabasesChangeDatabaseParameterCredentials',
    'ManagedDatabasesChangeDatabaseParameterParameter',
    'ManagedDatabasesResetDatabaseParameterCredentials',
    'GetDbManagementPrivateEndpointAssociatedDatabaseItemResult',
    'GetDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollectionResult',
    'GetDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollectionItemResult',
    'GetDbManagementPrivateEndpointAssociatedDatabasesFilterResult',
    'GetDbManagementPrivateEndpointsDbManagementPrivateEndpointCollectionResult',
    'GetDbManagementPrivateEndpointsDbManagementPrivateEndpointCollectionItemResult',
    'GetDbManagementPrivateEndpointsFilterResult',
    'GetExternalAsmConfigurationInitParameterResult',
    'GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionResult',
    'GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItemResult',
    'GetExternalAsmDiskGroupsFilterResult',
    'GetExternalAsmInstancesExternalAsmInstanceCollectionResult',
    'GetExternalAsmInstancesExternalAsmInstanceCollectionItemResult',
    'GetExternalAsmInstancesFilterResult',
    'GetExternalAsmServicedDatabaseResult',
    'GetExternalAsmUsersExternalAsmUserCollectionResult',
    'GetExternalAsmUsersExternalAsmUserCollectionItemResult',
    'GetExternalAsmUsersFilterResult',
    'GetExternalAsmsExternalAsmCollectionResult',
    'GetExternalAsmsExternalAsmCollectionItemResult',
    'GetExternalAsmsExternalAsmCollectionItemServicedDatabaseResult',
    'GetExternalAsmsFilterResult',
    'GetExternalClusterInstancesExternalClusterInstanceCollectionResult',
    'GetExternalClusterInstancesExternalClusterInstanceCollectionItemResult',
    'GetExternalClusterInstancesFilterResult',
    'GetExternalClusterNetworkConfigurationResult',
    'GetExternalClusterScanConfigurationResult',
    'GetExternalClusterVipConfigurationResult',
    'GetExternalClustersExternalClusterCollectionResult',
    'GetExternalClustersExternalClusterCollectionItemResult',
    'GetExternalClustersExternalClusterCollectionItemNetworkConfigurationResult',
    'GetExternalClustersExternalClusterCollectionItemScanConfigurationResult',
    'GetExternalClustersExternalClusterCollectionItemVipConfigurationResult',
    'GetExternalClustersFilterResult',
    'GetExternalDatabasesExternalDatabaseCollectionResult',
    'GetExternalDatabasesExternalDatabaseCollectionItemResult',
    'GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfigResult',
    'GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfoResult',
    'GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfoExadataInfraInfoResult',
    'GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetailResult',
    'GetExternalDatabasesFilterResult',
    'GetExternalDbHomesExternalDbHomeCollectionResult',
    'GetExternalDbHomesExternalDbHomeCollectionItemResult',
    'GetExternalDbHomesFilterResult',
    'GetExternalDbNodesExternalDbNodeCollectionResult',
    'GetExternalDbNodesExternalDbNodeCollectionItemResult',
    'GetExternalDbNodesFilterResult',
    'GetExternalDbSystemConnectorConnectionInfoResult',
    'GetExternalDbSystemConnectorConnectionInfoConnectionCredentialResult',
    'GetExternalDbSystemConnectorConnectionInfoConnectionStringResult',
    'GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionResult',
    'GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemResult',
    'GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoResult',
    'GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoConnectionCredentialResult',
    'GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoConnectionStringResult',
    'GetExternalDbSystemConnectorsFilterResult',
    'GetExternalDbSystemDatabaseManagementConfigResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentAsmInstanceResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentAssociatedComponentResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredentialResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionStringResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoConnectionCredentialResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoConnectionStringResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentEndpointResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentNetworkConfigurationResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredentialResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionStringResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentScanConfigurationResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentVipConfigurationResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoConnectionCredentialResult',
    'GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoConnectionStringResult',
    'GetExternalDbSystemDiscoveriesFilterResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentAsmInstanceResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponentResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredentialResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionStringResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentConnectorResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionCredentialResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionStringResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentEndpointResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentNetworkConfigurationResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredentialResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionStringResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentScanConfigurationResult',
    'GetExternalDbSystemDiscoveryDiscoveredComponentVipConfigurationResult',
    'GetExternalDbSystemDiscoveryPatchOperationResult',
    'GetExternalDbSystemDiscoveryPatchOperationValueResult',
    'GetExternalDbSystemDiscoveryPatchOperationValueConnectorResult',
    'GetExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoResult',
    'GetExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionCredentialResult',
    'GetExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionStringResult',
    'GetExternalDbSystemStackMonitoringConfigResult',
    'GetExternalDbSystemsExternalDbSystemCollectionResult',
    'GetExternalDbSystemsExternalDbSystemCollectionItemResult',
    'GetExternalDbSystemsExternalDbSystemCollectionItemDatabaseManagementConfigResult',
    'GetExternalDbSystemsExternalDbSystemCollectionItemStackMonitoringConfigResult',
    'GetExternalDbSystemsFilterResult',
    'GetExternalExadataInfrastructureDatabaseSystemResult',
    'GetExternalExadataInfrastructureStorageGridResult',
    'GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionResult',
    'GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemResult',
    'GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemDatabaseSystemResult',
    'GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemStorageGridResult',
    'GetExternalExadataInfrastructuresFilterResult',
    'GetExternalExadataStorageConnectorCredentialInfoResult',
    'GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionResult',
    'GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemResult',
    'GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfoResult',
    'GetExternalExadataStorageConnectorsFilterResult',
    'GetExternalExadataStorageGridStorageServerResult',
    'GetExternalExadataStorageServerConnectorResult',
    'GetExternalExadataStorageServerIormPlanDbPlanResult',
    'GetExternalExadataStorageServerIormPlanDbPlanItemResult',
    'GetExternalExadataStorageServerOpenAlertHistoryAlertResult',
    'GetExternalExadataStorageServerTopSqlCpuActivityActivityResult',
    'GetExternalExadataStorageServersExternalExadataStorageServerCollectionResult',
    'GetExternalExadataStorageServersExternalExadataStorageServerCollectionItemResult',
    'GetExternalExadataStorageServersFilterResult',
    'GetExternalListenerEndpointResult',
    'GetExternalListenerServicedAsmResult',
    'GetExternalListenerServicedDatabaseResult',
    'GetExternalListenerServicesExternalListenerServiceCollectionResult',
    'GetExternalListenerServicesExternalListenerServiceCollectionItemResult',
    'GetExternalListenerServicesFilterResult',
    'GetExternalListenersExternalListenerCollectionResult',
    'GetExternalListenersExternalListenerCollectionItemResult',
    'GetExternalListenersExternalListenerCollectionItemEndpointResult',
    'GetExternalListenersExternalListenerCollectionItemServicedAsmResult',
    'GetExternalListenersExternalListenerCollectionItemServicedDatabaseResult',
    'GetExternalListenersFilterResult',
    'GetJobExecutionsStatusItemResult',
    'GetJobExecutionsStatusesFilterResult',
    'GetJobExecutionsStatusesJobExecutionsStatusSummaryCollectionResult',
    'GetJobExecutionsStatusesJobExecutionsStatusSummaryCollectionItemResult',
    'GetManagedDatabaseAddmTaskItemResult',
    'GetManagedDatabaseAddmTasksAddmTasksCollectionResult',
    'GetManagedDatabaseAddmTasksAddmTasksCollectionItemResult',
    'GetManagedDatabaseAddmTasksFilterResult',
    'GetManagedDatabaseAlertLogCountItemResult',
    'GetManagedDatabaseAlertLogCountsAlertLogCountsCollectionResult',
    'GetManagedDatabaseAlertLogCountsAlertLogCountsCollectionItemResult',
    'GetManagedDatabaseAlertLogCountsFilterResult',
    'GetManagedDatabaseAttentionLogCountItemResult',
    'GetManagedDatabaseAttentionLogCountsAttentionLogCountsCollectionResult',
    'GetManagedDatabaseAttentionLogCountsAttentionLogCountsCollectionItemResult',
    'GetManagedDatabaseAttentionLogCountsFilterResult',
    'GetManagedDatabaseCursorCacheStatementsCursorCacheStatementCollectionResult',
    'GetManagedDatabaseCursorCacheStatementsCursorCacheStatementCollectionItemResult',
    'GetManagedDatabaseCursorCacheStatementsFilterResult',
    'GetManagedDatabaseGroupManagedDatabaseResult',
    'GetManagedDatabaseGroupsFilterResult',
    'GetManagedDatabaseGroupsManagedDatabaseGroupCollectionResult',
    'GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemResult',
    'GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabaseResult',
    'GetManagedDatabaseManagedDatabaseGroupResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionDatabaseResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingDetailResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingDetailSchemaResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationExampleResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationExampleLineResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationRationaleResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsFilterResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemDatabaseResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingDetailResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingDetailSchemaResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationExampleResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationExampleLineResult',
    'GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationRationaleResult',
    'GetManagedDatabaseOptimizerStatisticsCollectionAggregationsFilterResult',
    'GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionResult',
    'GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItemResult',
    'GetManagedDatabaseOptimizerStatisticsCollectionOperationDatabaseResult',
    'GetManagedDatabaseOptimizerStatisticsCollectionOperationTaskResult',
    'GetManagedDatabaseOptimizerStatisticsCollectionOperationsFilterResult',
    'GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionResult',
    'GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemResult',
    'GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemDatabaseResult',
    'GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemTaskResult',
    'GetManagedDatabaseSqlPlanBaselineConfigurationAutoCaptureFilterResult',
    'GetManagedDatabaseSqlPlanBaselineConfigurationAutoSpmEvolveTaskParameterResult',
    'GetManagedDatabaseSqlPlanBaselineJobsFilterResult',
    'GetManagedDatabaseSqlPlanBaselineJobsSqlPlanBaselineJobCollectionResult',
    'GetManagedDatabaseSqlPlanBaselineJobsSqlPlanBaselineJobCollectionItemResult',
    'GetManagedDatabaseSqlPlanBaselinesFilterResult',
    'GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionResult',
    'GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItemResult',
    'GetManagedDatabaseSqlTuningAdvisorTaskItemResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisonModifiedResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisonOriginalResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksFilterResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksFindingItemResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksFindingsFilterResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItemResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksRecommendationItemResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsFilterResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItemResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanPlanResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollectionResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollectionItemResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportIndexFindingResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportObjectStatFindingResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefitResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingCountResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticStatementCountResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportTaskInfoResult',
    'GetManagedDatabaseSqlTuningSetItemResult',
    'GetManagedDatabaseSqlTuningSetsFilterResult',
    'GetManagedDatabaseSqlTuningSetsSqlTuningSetCollectionResult',
    'GetManagedDatabaseSqlTuningSetsSqlTuningSetCollectionItemResult',
    'GetManagedDatabaseTableStatisticsFilterResult',
    'GetManagedDatabaseTableStatisticsTableStatisticsCollectionResult',
    'GetManagedDatabaseTableStatisticsTableStatisticsCollectionItemResult',
    'GetManagedDatabaseUserConsumerGroupPrivilegeItemResult',
    'GetManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollectionResult',
    'GetManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollectionItemResult',
    'GetManagedDatabaseUserConsumerGroupPrivilegesFilterResult',
    'GetManagedDatabaseUserDataAccessContainerItemResult',
    'GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionResult',
    'GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionItemResult',
    'GetManagedDatabaseUserDataAccessContainersFilterResult',
    'GetManagedDatabaseUserObjectPrivilegeItemResult',
    'GetManagedDatabaseUserObjectPrivilegesFilterResult',
    'GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionResult',
    'GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItemResult',
    'GetManagedDatabaseUserProxiedForUserItemResult',
    'GetManagedDatabaseUserProxiedForUsersFilterResult',
    'GetManagedDatabaseUserProxiedForUsersProxiedForUserCollectionResult',
    'GetManagedDatabaseUserProxiedForUsersProxiedForUserCollectionItemResult',
    'GetManagedDatabaseUserRoleItemResult',
    'GetManagedDatabaseUserRolesFilterResult',
    'GetManagedDatabaseUserRolesRoleCollectionResult',
    'GetManagedDatabaseUserRolesRoleCollectionItemResult',
    'GetManagedDatabaseUsersFilterResult',
    'GetManagedDatabaseUsersUserCollectionResult',
    'GetManagedDatabaseUsersUserCollectionItemResult',
    'GetManagedDatabasesAsmPropertiesAsmPropertyCollectionResult',
    'GetManagedDatabasesAsmPropertiesAsmPropertyCollectionItemResult',
    'GetManagedDatabasesAsmPropertiesFilterResult',
    'GetManagedDatabasesAsmPropertyItemResult',
    'GetManagedDatabasesDatabaseParameterItemResult',
    'GetManagedDatabasesDatabaseParameterItemAllowedValueResult',
    'GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionResult',
    'GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemResult',
    'GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValueResult',
    'GetManagedDatabasesDatabaseParametersFilterResult',
    'GetManagedDatabasesFilterResult',
    'GetManagedDatabasesManagedDatabaseCollectionResult',
    'GetManagedDatabasesManagedDatabaseCollectionItemResult',
    'GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroupResult',
    'GetManagedDatabasesUserProxyUserItemResult',
    'GetManagedDatabasesUserProxyUsersFilterResult',
    'GetManagedDatabasesUserProxyUsersProxyUserCollectionResult',
    'GetManagedDatabasesUserProxyUsersProxyUserCollectionItemResult',
    'GetManagedDatabasesUserSystemPrivilegeItemResult',
    'GetManagedDatabasesUserSystemPrivilegesFilterResult',
    'GetManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollectionResult',
    'GetManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollectionItemResult',
    'GetManagedMySqlDatabaseConfigurationDataFilterResult',
    'GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionResult',
    'GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItemResult',
    'GetManagedMySqlDatabaseSqlDataFilterResult',
    'GetManagedMySqlDatabaseSqlDataMySqlDataCollectionResult',
    'GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItemResult',
    'GetManagedMySqlDatabasesFilterResult',
    'GetManagedMySqlDatabasesManagedMySqlDatabaseCollectionResult',
    'GetManagedMySqlDatabasesManagedMySqlDatabaseCollectionItemResult',
]

@pulumi.output_type
class ExternalAsmServicedDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "databaseSubType":
            suggest = "database_sub_type"
        elif key == "databaseType":
            suggest = "database_type"
        elif key == "dbUniqueName":
            suggest = "db_unique_name"
        elif key == "diskGroups":
            suggest = "disk_groups"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "isManaged":
            suggest = "is_managed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalAsmServicedDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalAsmServicedDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalAsmServicedDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 database_sub_type: Optional[str] = None,
                 database_type: Optional[str] = None,
                 db_unique_name: Optional[str] = None,
                 disk_groups: Optional[Sequence[str]] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_managed: Optional[bool] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_sub_type is not None:
            pulumi.set(__self__, "database_sub_type", database_sub_type)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if db_unique_name is not None:
            pulumi.set(__self__, "db_unique_name", db_unique_name)
        if disk_groups is not None:
            pulumi.set(__self__, "disk_groups", disk_groups)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_managed is not None:
            pulumi.set(__self__, "is_managed", is_managed)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dbUniqueName")
    def db_unique_name(self) -> Optional[str]:
        return pulumi.get(self, "db_unique_name")

    @property
    @pulumi.getter(name="diskGroups")
    def disk_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "disk_groups")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isManaged")
    def is_managed(self) -> Optional[bool]:
        return pulumi.get(self, "is_managed")


@pulumi.output_type
class ExternalClusterNetworkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkNumber":
            suggest = "network_number"
        elif key == "networkType":
            suggest = "network_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalClusterNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalClusterNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalClusterNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_number: Optional[int] = None,
                 network_type: Optional[str] = None,
                 subnet: Optional[str] = None):
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class ExternalClusterScanConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkNumber":
            suggest = "network_number"
        elif key == "scanName":
            suggest = "scan_name"
        elif key == "scanPort":
            suggest = "scan_port"
        elif key == "scanProtocol":
            suggest = "scan_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalClusterScanConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalClusterScanConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalClusterScanConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_number: Optional[int] = None,
                 scan_name: Optional[str] = None,
                 scan_port: Optional[int] = None,
                 scan_protocol: Optional[str] = None):
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if scan_name is not None:
            pulumi.set(__self__, "scan_name", scan_name)
        if scan_port is not None:
            pulumi.set(__self__, "scan_port", scan_port)
        if scan_protocol is not None:
            pulumi.set(__self__, "scan_protocol", scan_protocol)

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="scanName")
    def scan_name(self) -> Optional[str]:
        return pulumi.get(self, "scan_name")

    @property
    @pulumi.getter(name="scanPort")
    def scan_port(self) -> Optional[int]:
        return pulumi.get(self, "scan_port")

    @property
    @pulumi.getter(name="scanProtocol")
    def scan_protocol(self) -> Optional[str]:
        return pulumi.get(self, "scan_protocol")


@pulumi.output_type
class ExternalClusterVipConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkNumber":
            suggest = "network_number"
        elif key == "nodeName":
            suggest = "node_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalClusterVipConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalClusterVipConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalClusterVipConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 network_number: Optional[int] = None,
                 node_name: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[str]:
        return pulumi.get(self, "node_name")


@pulumi.output_type
class ExternalDbSystemConnectorConnectionInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentType":
            suggest = "component_type"
        elif key == "connectionCredentials":
            suggest = "connection_credentials"
        elif key == "connectionStrings":
            suggest = "connection_strings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemConnectorConnectionInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemConnectorConnectionInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemConnectorConnectionInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_type: str,
                 connection_credentials: Optional[Sequence['outputs.ExternalDbSystemConnectorConnectionInfoConnectionCredential']] = None,
                 connection_strings: Optional[Sequence['outputs.ExternalDbSystemConnectorConnectionInfoConnectionString']] = None):
        pulumi.set(__self__, "component_type", component_type)
        if connection_credentials is not None:
            pulumi.set(__self__, "connection_credentials", connection_credentials)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> str:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="connectionCredentials")
    def connection_credentials(self) -> Optional[Sequence['outputs.ExternalDbSystemConnectorConnectionInfoConnectionCredential']]:
        return pulumi.get(self, "connection_credentials")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.ExternalDbSystemConnectorConnectionInfoConnectionString']]:
        return pulumi.get(self, "connection_strings")


@pulumi.output_type
class ExternalDbSystemConnectorConnectionInfoConnectionCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialName":
            suggest = "credential_name"
        elif key == "credentialType":
            suggest = "credential_type"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "sslSecretId":
            suggest = "ssl_secret_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemConnectorConnectionInfoConnectionCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemConnectorConnectionInfoConnectionCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemConnectorConnectionInfoConnectionCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class ExternalDbSystemConnectorConnectionInfoConnectionString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemConnectorConnectionInfoConnectionString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemConnectorConnectionInfoConnectionString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemConnectorConnectionInfoConnectionString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class ExternalDbSystemDatabaseManagementConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "licenseModel":
            suggest = "license_model"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDatabaseManagementConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDatabaseManagementConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDatabaseManagementConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 license_model: str):
        pulumi.set(__self__, "license_model", license_model)

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> str:
        return pulumi.get(self, "license_model")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adrHomeDirectory":
            suggest = "adr_home_directory"
        elif key == "asmInstances":
            suggest = "asm_instances"
        elif key == "associatedComponents":
            suggest = "associated_components"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterInstances":
            suggest = "cluster_instances"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "componentId":
            suggest = "component_id"
        elif key == "componentName":
            suggest = "component_name"
        elif key == "componentType":
            suggest = "component_type"
        elif key == "containerDatabaseId":
            suggest = "container_database_id"
        elif key == "cpuCoreCount":
            suggest = "cpu_core_count"
        elif key == "crsBaseDirectory":
            suggest = "crs_base_directory"
        elif key == "dbEdition":
            suggest = "db_edition"
        elif key == "dbId":
            suggest = "db_id"
        elif key == "dbNodeName":
            suggest = "db_node_name"
        elif key == "dbPacks":
            suggest = "db_packs"
        elif key == "dbRole":
            suggest = "db_role"
        elif key == "dbType":
            suggest = "db_type"
        elif key == "dbUniqueName":
            suggest = "db_unique_name"
        elif key == "dbVersion":
            suggest = "db_version"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "gridHome":
            suggest = "grid_home"
        elif key == "homeDirectory":
            suggest = "home_directory"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "instanceName":
            suggest = "instance_name"
        elif key == "isCluster":
            suggest = "is_cluster"
        elif key == "isFlexCluster":
            suggest = "is_flex_cluster"
        elif key == "isFlexEnabled":
            suggest = "is_flex_enabled"
        elif key == "isSelectedForMonitoring":
            suggest = "is_selected_for_monitoring"
        elif key == "listenerAlias":
            suggest = "listener_alias"
        elif key == "listenerType":
            suggest = "listener_type"
        elif key == "logDirectory":
            suggest = "log_directory"
        elif key == "memorySizeInGbs":
            suggest = "memory_size_in_gbs"
        elif key == "networkConfigurations":
            suggest = "network_configurations"
        elif key == "nodeRole":
            suggest = "node_role"
        elif key == "ocrFileLocation":
            suggest = "ocr_file_location"
        elif key == "oracleHome":
            suggest = "oracle_home"
        elif key == "pluggableDatabases":
            suggest = "pluggable_databases"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "scanConfigurations":
            suggest = "scan_configurations"
        elif key == "traceDirectory":
            suggest = "trace_directory"
        elif key == "vipConfigurations":
            suggest = "vip_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adr_home_directory: Optional[str] = None,
                 asm_instances: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentAsmInstance']] = None,
                 associated_components: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent']] = None,
                 cluster_id: Optional[str] = None,
                 cluster_instances: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance']] = None,
                 compartment_id: Optional[str] = None,
                 component_id: Optional[str] = None,
                 component_name: Optional[str] = None,
                 component_type: Optional[str] = None,
                 connectors: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentConnector']] = None,
                 container_database_id: Optional[str] = None,
                 cpu_core_count: Optional[float] = None,
                 crs_base_directory: Optional[str] = None,
                 db_edition: Optional[str] = None,
                 db_id: Optional[str] = None,
                 db_node_name: Optional[str] = None,
                 db_packs: Optional[str] = None,
                 db_role: Optional[str] = None,
                 db_type: Optional[str] = None,
                 db_unique_name: Optional[str] = None,
                 db_version: Optional[str] = None,
                 display_name: Optional[str] = None,
                 endpoints: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentEndpoint']] = None,
                 grid_home: Optional[str] = None,
                 guid: Optional[str] = None,
                 home_directory: Optional[str] = None,
                 host_name: Optional[str] = None,
                 instance_name: Optional[str] = None,
                 is_cluster: Optional[bool] = None,
                 is_flex_cluster: Optional[bool] = None,
                 is_flex_enabled: Optional[bool] = None,
                 is_selected_for_monitoring: Optional[bool] = None,
                 listener_alias: Optional[str] = None,
                 listener_type: Optional[str] = None,
                 log_directory: Optional[str] = None,
                 memory_size_in_gbs: Optional[float] = None,
                 network_configurations: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration']] = None,
                 node_role: Optional[str] = None,
                 ocr_file_location: Optional[str] = None,
                 oracle_home: Optional[str] = None,
                 pluggable_databases: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase']] = None,
                 resource_id: Optional[str] = None,
                 scan_configurations: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration']] = None,
                 status: Optional[str] = None,
                 trace_directory: Optional[str] = None,
                 version: Optional[str] = None,
                 vip_configurations: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration']] = None):
        if adr_home_directory is not None:
            pulumi.set(__self__, "adr_home_directory", adr_home_directory)
        if asm_instances is not None:
            pulumi.set(__self__, "asm_instances", asm_instances)
        if associated_components is not None:
            pulumi.set(__self__, "associated_components", associated_components)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_instances is not None:
            pulumi.set(__self__, "cluster_instances", cluster_instances)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connectors is not None:
            pulumi.set(__self__, "connectors", connectors)
        if container_database_id is not None:
            pulumi.set(__self__, "container_database_id", container_database_id)
        if cpu_core_count is not None:
            pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        if crs_base_directory is not None:
            pulumi.set(__self__, "crs_base_directory", crs_base_directory)
        if db_edition is not None:
            pulumi.set(__self__, "db_edition", db_edition)
        if db_id is not None:
            pulumi.set(__self__, "db_id", db_id)
        if db_node_name is not None:
            pulumi.set(__self__, "db_node_name", db_node_name)
        if db_packs is not None:
            pulumi.set(__self__, "db_packs", db_packs)
        if db_role is not None:
            pulumi.set(__self__, "db_role", db_role)
        if db_type is not None:
            pulumi.set(__self__, "db_type", db_type)
        if db_unique_name is not None:
            pulumi.set(__self__, "db_unique_name", db_unique_name)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if grid_home is not None:
            pulumi.set(__self__, "grid_home", grid_home)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)
        if home_directory is not None:
            pulumi.set(__self__, "home_directory", home_directory)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if is_cluster is not None:
            pulumi.set(__self__, "is_cluster", is_cluster)
        if is_flex_cluster is not None:
            pulumi.set(__self__, "is_flex_cluster", is_flex_cluster)
        if is_flex_enabled is not None:
            pulumi.set(__self__, "is_flex_enabled", is_flex_enabled)
        if is_selected_for_monitoring is not None:
            pulumi.set(__self__, "is_selected_for_monitoring", is_selected_for_monitoring)
        if listener_alias is not None:
            pulumi.set(__self__, "listener_alias", listener_alias)
        if listener_type is not None:
            pulumi.set(__self__, "listener_type", listener_type)
        if log_directory is not None:
            pulumi.set(__self__, "log_directory", log_directory)
        if memory_size_in_gbs is not None:
            pulumi.set(__self__, "memory_size_in_gbs", memory_size_in_gbs)
        if network_configurations is not None:
            pulumi.set(__self__, "network_configurations", network_configurations)
        if node_role is not None:
            pulumi.set(__self__, "node_role", node_role)
        if ocr_file_location is not None:
            pulumi.set(__self__, "ocr_file_location", ocr_file_location)
        if oracle_home is not None:
            pulumi.set(__self__, "oracle_home", oracle_home)
        if pluggable_databases is not None:
            pulumi.set(__self__, "pluggable_databases", pluggable_databases)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if scan_configurations is not None:
            pulumi.set(__self__, "scan_configurations", scan_configurations)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trace_directory is not None:
            pulumi.set(__self__, "trace_directory", trace_directory)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vip_configurations is not None:
            pulumi.set(__self__, "vip_configurations", vip_configurations)

    @property
    @pulumi.getter(name="adrHomeDirectory")
    def adr_home_directory(self) -> Optional[str]:
        return pulumi.get(self, "adr_home_directory")

    @property
    @pulumi.getter(name="asmInstances")
    def asm_instances(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentAsmInstance']]:
        return pulumi.get(self, "asm_instances")

    @property
    @pulumi.getter(name="associatedComponents")
    def associated_components(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent']]:
        return pulumi.get(self, "associated_components")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterInstances")
    def cluster_instances(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance']]:
        return pulumi.get(self, "cluster_instances")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[str]:
        return pulumi.get(self, "component_id")

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[str]:
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter
    def connectors(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentConnector']]:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter(name="containerDatabaseId")
    def container_database_id(self) -> Optional[str]:
        return pulumi.get(self, "container_database_id")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> Optional[float]:
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="crsBaseDirectory")
    def crs_base_directory(self) -> Optional[str]:
        return pulumi.get(self, "crs_base_directory")

    @property
    @pulumi.getter(name="dbEdition")
    def db_edition(self) -> Optional[str]:
        return pulumi.get(self, "db_edition")

    @property
    @pulumi.getter(name="dbId")
    def db_id(self) -> Optional[str]:
        return pulumi.get(self, "db_id")

    @property
    @pulumi.getter(name="dbNodeName")
    def db_node_name(self) -> Optional[str]:
        return pulumi.get(self, "db_node_name")

    @property
    @pulumi.getter(name="dbPacks")
    def db_packs(self) -> Optional[str]:
        return pulumi.get(self, "db_packs")

    @property
    @pulumi.getter(name="dbRole")
    def db_role(self) -> Optional[str]:
        return pulumi.get(self, "db_role")

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> Optional[str]:
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter(name="dbUniqueName")
    def db_unique_name(self) -> Optional[str]:
        return pulumi.get(self, "db_unique_name")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentEndpoint']]:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="gridHome")
    def grid_home(self) -> Optional[str]:
        return pulumi.get(self, "grid_home")

    @property
    @pulumi.getter
    def guid(self) -> Optional[str]:
        return pulumi.get(self, "guid")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> Optional[str]:
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter(name="isFlexCluster")
    def is_flex_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "is_flex_cluster")

    @property
    @pulumi.getter(name="isFlexEnabled")
    def is_flex_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_flex_enabled")

    @property
    @pulumi.getter(name="isSelectedForMonitoring")
    def is_selected_for_monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "is_selected_for_monitoring")

    @property
    @pulumi.getter(name="listenerAlias")
    def listener_alias(self) -> Optional[str]:
        return pulumi.get(self, "listener_alias")

    @property
    @pulumi.getter(name="listenerType")
    def listener_type(self) -> Optional[str]:
        return pulumi.get(self, "listener_type")

    @property
    @pulumi.getter(name="logDirectory")
    def log_directory(self) -> Optional[str]:
        return pulumi.get(self, "log_directory")

    @property
    @pulumi.getter(name="memorySizeInGbs")
    def memory_size_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_size_in_gbs")

    @property
    @pulumi.getter(name="networkConfigurations")
    def network_configurations(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration']]:
        return pulumi.get(self, "network_configurations")

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> Optional[str]:
        return pulumi.get(self, "node_role")

    @property
    @pulumi.getter(name="ocrFileLocation")
    def ocr_file_location(self) -> Optional[str]:
        return pulumi.get(self, "ocr_file_location")

    @property
    @pulumi.getter(name="oracleHome")
    def oracle_home(self) -> Optional[str]:
        return pulumi.get(self, "oracle_home")

    @property
    @pulumi.getter(name="pluggableDatabases")
    def pluggable_databases(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase']]:
        return pulumi.get(self, "pluggable_databases")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="scanConfigurations")
    def scan_configurations(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration']]:
        return pulumi.get(self, "scan_configurations")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="traceDirectory")
    def trace_directory(self) -> Optional[str]:
        return pulumi.get(self, "trace_directory")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vipConfigurations")
    def vip_configurations(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration']]:
        return pulumi.get(self, "vip_configurations")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentAsmInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adrHomeDirectory":
            suggest = "adr_home_directory"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "instanceName":
            suggest = "instance_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentAsmInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentAsmInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentAsmInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adr_home_directory: Optional[str] = None,
                 host_name: Optional[str] = None,
                 instance_name: Optional[str] = None):
        if adr_home_directory is not None:
            pulumi.set(__self__, "adr_home_directory", adr_home_directory)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)

    @property
    @pulumi.getter(name="adrHomeDirectory")
    def adr_home_directory(self) -> Optional[str]:
        return pulumi.get(self, "adr_home_directory")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        return pulumi.get(self, "instance_name")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "associationType":
            suggest = "association_type"
        elif key == "componentId":
            suggest = "component_id"
        elif key == "componentType":
            suggest = "component_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 association_type: Optional[str] = None,
                 component_id: Optional[str] = None,
                 component_type: Optional[str] = None):
        if association_type is not None:
            pulumi.set(__self__, "association_type", association_type)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)

    @property
    @pulumi.getter(name="associationType")
    def association_type(self) -> Optional[str]:
        return pulumi.get(self, "association_type")

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[str]:
        return pulumi.get(self, "component_id")

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adrHomeDirectory":
            suggest = "adr_home_directory"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "crsBaseDirectory":
            suggest = "crs_base_directory"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "nodeRole":
            suggest = "node_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentClusterInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adr_home_directory: Optional[str] = None,
                 cluster_id: Optional[str] = None,
                 connectors: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector']] = None,
                 crs_base_directory: Optional[str] = None,
                 host_name: Optional[str] = None,
                 node_role: Optional[str] = None):
        if adr_home_directory is not None:
            pulumi.set(__self__, "adr_home_directory", adr_home_directory)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if connectors is not None:
            pulumi.set(__self__, "connectors", connectors)
        if crs_base_directory is not None:
            pulumi.set(__self__, "crs_base_directory", crs_base_directory)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if node_role is not None:
            pulumi.set(__self__, "node_role", node_role)

    @property
    @pulumi.getter(name="adrHomeDirectory")
    def adr_home_directory(self) -> Optional[str]:
        return pulumi.get(self, "adr_home_directory")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def connectors(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector']]:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter(name="crsBaseDirectory")
    def crs_base_directory(self) -> Optional[str]:
        return pulumi.get(self, "crs_base_directory")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> Optional[str]:
        return pulumi.get(self, "node_role")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentId":
            suggest = "agent_id"
        elif key == "connectionFailureMessage":
            suggest = "connection_failure_message"
        elif key == "connectionInfos":
            suggest = "connection_infos"
        elif key == "connectionStatus":
            suggest = "connection_status"
        elif key == "connectorType":
            suggest = "connector_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "timeConnectionStatusLastUpdated":
            suggest = "time_connection_status_last_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 connection_failure_message: Optional[str] = None,
                 connection_infos: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfo']] = None,
                 connection_status: Optional[str] = None,
                 connector_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 time_connection_status_last_updated: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if connection_failure_message is not None:
            pulumi.set(__self__, "connection_failure_message", connection_failure_message)
        if connection_infos is not None:
            pulumi.set(__self__, "connection_infos", connection_infos)
        if connection_status is not None:
            pulumi.set(__self__, "connection_status", connection_status)
        if connector_type is not None:
            pulumi.set(__self__, "connector_type", connector_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if time_connection_status_last_updated is not None:
            pulumi.set(__self__, "time_connection_status_last_updated", time_connection_status_last_updated)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectionFailureMessage")
    def connection_failure_message(self) -> Optional[str]:
        return pulumi.get(self, "connection_failure_message")

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfo']]:
        return pulumi.get(self, "connection_infos")

    @property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> Optional[str]:
        return pulumi.get(self, "connection_status")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> Optional[str]:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="timeConnectionStatusLastUpdated")
    def time_connection_status_last_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_connection_status_last_updated")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentType":
            suggest = "component_type"
        elif key == "connectionCredentials":
            suggest = "connection_credentials"
        elif key == "connectionStrings":
            suggest = "connection_strings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_type: Optional[str] = None,
                 connection_credentials: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredential']] = None,
                 connection_strings: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString']] = None):
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connection_credentials is not None:
            pulumi.set(__self__, "connection_credentials", connection_credentials)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="connectionCredentials")
    def connection_credentials(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredential']]:
        return pulumi.get(self, "connection_credentials")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString']]:
        return pulumi.get(self, "connection_strings")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialName":
            suggest = "credential_name"
        elif key == "credentialType":
            suggest = "credential_type"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "sslSecretId":
            suggest = "ssl_secret_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentId":
            suggest = "agent_id"
        elif key == "connectionFailureMessage":
            suggest = "connection_failure_message"
        elif key == "connectionInfos":
            suggest = "connection_infos"
        elif key == "connectionStatus":
            suggest = "connection_status"
        elif key == "connectorType":
            suggest = "connector_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "timeConnectionStatusLastUpdated":
            suggest = "time_connection_status_last_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 connection_failure_message: Optional[str] = None,
                 connection_infos: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfo']] = None,
                 connection_status: Optional[str] = None,
                 connector_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 time_connection_status_last_updated: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if connection_failure_message is not None:
            pulumi.set(__self__, "connection_failure_message", connection_failure_message)
        if connection_infos is not None:
            pulumi.set(__self__, "connection_infos", connection_infos)
        if connection_status is not None:
            pulumi.set(__self__, "connection_status", connection_status)
        if connector_type is not None:
            pulumi.set(__self__, "connector_type", connector_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if time_connection_status_last_updated is not None:
            pulumi.set(__self__, "time_connection_status_last_updated", time_connection_status_last_updated)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectionFailureMessage")
    def connection_failure_message(self) -> Optional[str]:
        return pulumi.get(self, "connection_failure_message")

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfo']]:
        return pulumi.get(self, "connection_infos")

    @property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> Optional[str]:
        return pulumi.get(self, "connection_status")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> Optional[str]:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="timeConnectionStatusLastUpdated")
    def time_connection_status_last_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_connection_status_last_updated")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentType":
            suggest = "component_type"
        elif key == "connectionCredentials":
            suggest = "connection_credentials"
        elif key == "connectionStrings":
            suggest = "connection_strings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_type: Optional[str] = None,
                 connection_credentials: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionCredential']] = None,
                 connection_strings: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionString']] = None):
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connection_credentials is not None:
            pulumi.set(__self__, "connection_credentials", connection_credentials)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="connectionCredentials")
    def connection_credentials(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionCredential']]:
        return pulumi.get(self, "connection_credentials")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionString']]:
        return pulumi.get(self, "connection_strings")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialName":
            suggest = "credential_name"
        elif key == "credentialType":
            suggest = "credential_type"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "sslSecretId":
            suggest = "ssl_secret_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentEndpoint(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 key: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 services: Optional[Sequence[str]] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if services is not None:
            pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "services")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkNumber":
            suggest = "network_number"
        elif key == "networkType":
            suggest = "network_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_number: Optional[int] = None,
                 network_type: Optional[str] = None,
                 subnet: Optional[str] = None):
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "containerDatabaseId":
            suggest = "container_database_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 connectors: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnector']] = None,
                 container_database_id: Optional[str] = None,
                 guid: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connectors is not None:
            pulumi.set(__self__, "connectors", connectors)
        if container_database_id is not None:
            pulumi.set(__self__, "container_database_id", container_database_id)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def connectors(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnector']]:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter(name="containerDatabaseId")
    def container_database_id(self) -> Optional[str]:
        return pulumi.get(self, "container_database_id")

    @property
    @pulumi.getter
    def guid(self) -> Optional[str]:
        return pulumi.get(self, "guid")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentId":
            suggest = "agent_id"
        elif key == "connectionFailureMessage":
            suggest = "connection_failure_message"
        elif key == "connectionInfos":
            suggest = "connection_infos"
        elif key == "connectionStatus":
            suggest = "connection_status"
        elif key == "connectorType":
            suggest = "connector_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "timeConnectionStatusLastUpdated":
            suggest = "time_connection_status_last_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 connection_failure_message: Optional[str] = None,
                 connection_infos: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfo']] = None,
                 connection_status: Optional[str] = None,
                 connector_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 time_connection_status_last_updated: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if connection_failure_message is not None:
            pulumi.set(__self__, "connection_failure_message", connection_failure_message)
        if connection_infos is not None:
            pulumi.set(__self__, "connection_infos", connection_infos)
        if connection_status is not None:
            pulumi.set(__self__, "connection_status", connection_status)
        if connector_type is not None:
            pulumi.set(__self__, "connector_type", connector_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if time_connection_status_last_updated is not None:
            pulumi.set(__self__, "time_connection_status_last_updated", time_connection_status_last_updated)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectionFailureMessage")
    def connection_failure_message(self) -> Optional[str]:
        return pulumi.get(self, "connection_failure_message")

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfo']]:
        return pulumi.get(self, "connection_infos")

    @property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> Optional[str]:
        return pulumi.get(self, "connection_status")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> Optional[str]:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="timeConnectionStatusLastUpdated")
    def time_connection_status_last_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_connection_status_last_updated")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentType":
            suggest = "component_type"
        elif key == "connectionCredentials":
            suggest = "connection_credentials"
        elif key == "connectionStrings":
            suggest = "connection_strings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_type: Optional[str] = None,
                 connection_credentials: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredential']] = None,
                 connection_strings: Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionString']] = None):
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connection_credentials is not None:
            pulumi.set(__self__, "connection_credentials", connection_credentials)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="connectionCredentials")
    def connection_credentials(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredential']]:
        return pulumi.get(self, "connection_credentials")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionString']]:
        return pulumi.get(self, "connection_strings")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialName":
            suggest = "credential_name"
        elif key == "credentialType":
            suggest = "credential_type"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "sslSecretId":
            suggest = "ssl_secret_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkNumber":
            suggest = "network_number"
        elif key == "scanName":
            suggest = "scan_name"
        elif key == "scanPort":
            suggest = "scan_port"
        elif key == "scanProtocol":
            suggest = "scan_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentScanConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_number: Optional[int] = None,
                 scan_name: Optional[str] = None,
                 scan_port: Optional[int] = None,
                 scan_protocol: Optional[str] = None):
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if scan_name is not None:
            pulumi.set(__self__, "scan_name", scan_name)
        if scan_port is not None:
            pulumi.set(__self__, "scan_port", scan_port)
        if scan_protocol is not None:
            pulumi.set(__self__, "scan_protocol", scan_protocol)

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="scanName")
    def scan_name(self) -> Optional[str]:
        return pulumi.get(self, "scan_name")

    @property
    @pulumi.getter(name="scanPort")
    def scan_port(self) -> Optional[int]:
        return pulumi.get(self, "scan_port")

    @property
    @pulumi.getter(name="scanProtocol")
    def scan_protocol(self) -> Optional[str]:
        return pulumi.get(self, "scan_protocol")


@pulumi.output_type
class ExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkNumber":
            suggest = "network_number"
        elif key == "nodeName":
            suggest = "node_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryDiscoveredComponentVipConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 network_number: Optional[int] = None,
                 node_name: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[str]:
        return pulumi.get(self, "node_name")


@pulumi.output_type
class ExternalDbSystemDiscoveryPatchOperation(dict):
    def __init__(__self__, *,
                 operation: str,
                 selection: str,
                 value: Optional['outputs.ExternalDbSystemDiscoveryPatchOperationValue'] = None):
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "selection", selection)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def selection(self) -> str:
        return pulumi.get(self, "selection")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.ExternalDbSystemDiscoveryPatchOperationValue']:
        return pulumi.get(self, "value")


@pulumi.output_type
class ExternalDbSystemDiscoveryPatchOperationValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "isSelectedForMonitoring":
            suggest = "is_selected_for_monitoring"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryPatchOperationValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryPatchOperationValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryPatchOperationValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 connector: Optional['outputs.ExternalDbSystemDiscoveryPatchOperationValueConnector'] = None,
                 display_name: Optional[str] = None,
                 is_selected_for_monitoring: Optional[bool] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connector is not None:
            pulumi.set(__self__, "connector", connector)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_selected_for_monitoring is not None:
            pulumi.set(__self__, "is_selected_for_monitoring", is_selected_for_monitoring)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def connector(self) -> Optional['outputs.ExternalDbSystemDiscoveryPatchOperationValueConnector']:
        return pulumi.get(self, "connector")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isSelectedForMonitoring")
    def is_selected_for_monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "is_selected_for_monitoring")


@pulumi.output_type
class ExternalDbSystemDiscoveryPatchOperationValueConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectorType":
            suggest = "connector_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "agentId":
            suggest = "agent_id"
        elif key == "connectionInfo":
            suggest = "connection_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryPatchOperationValueConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryPatchOperationValueConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryPatchOperationValueConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connector_type: str,
                 display_name: str,
                 agent_id: Optional[str] = None,
                 connection_info: Optional['outputs.ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfo'] = None):
        pulumi.set(__self__, "connector_type", connector_type)
        pulumi.set(__self__, "display_name", display_name)
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if connection_info is not None:
            pulumi.set(__self__, "connection_info", connection_info)

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> str:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectionInfo")
    def connection_info(self) -> Optional['outputs.ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfo']:
        return pulumi.get(self, "connection_info")


@pulumi.output_type
class ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentType":
            suggest = "component_type"
        elif key == "connectionCredentials":
            suggest = "connection_credentials"
        elif key == "connectionString":
            suggest = "connection_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_type: str,
                 connection_credentials: Optional['outputs.ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionCredentials'] = None,
                 connection_string: Optional['outputs.ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionString'] = None):
        pulumi.set(__self__, "component_type", component_type)
        if connection_credentials is not None:
            pulumi.set(__self__, "connection_credentials", connection_credentials)
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> str:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="connectionCredentials")
    def connection_credentials(self) -> Optional['outputs.ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionCredentials']:
        return pulumi.get(self, "connection_credentials")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional['outputs.ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionString']:
        return pulumi.get(self, "connection_string")


@pulumi.output_type
class ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "credentialName":
            suggest = "credential_name"
        elif key == "passwordSecretId":
            suggest = "password_secret_id"
        elif key == "sslSecretId":
            suggest = "ssl_secret_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: str,
                 credential_name: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        pulumi.set(__self__, "credential_type", credential_type)
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class ExternalDbSystemStackMonitoringConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalDbSystemStackMonitoringConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalDbSystemStackMonitoringConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalDbSystemStackMonitoringConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: bool,
                 metadata: Optional[str] = None):
        pulumi.set(__self__, "is_enabled", is_enabled)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[str]:
        return pulumi.get(self, "metadata")


@pulumi.output_type
class ExternalExadataInfrastructureDatabaseSystem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalDetails":
            suggest = "additional_details"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "internalId":
            suggest = "internal_id"
        elif key == "licenseModel":
            suggest = "license_model"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalExadataInfrastructureDatabaseSystem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalExadataInfrastructureDatabaseSystem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalExadataInfrastructureDatabaseSystem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 compartment_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 internal_id: Optional[str] = None,
                 license_model: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if license_model is not None:
            pulumi.set(__self__, "license_model", license_model)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[str]:
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> Optional[str]:
        return pulumi.get(self, "license_model")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class ExternalExadataInfrastructureStorageGrid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalDetails":
            suggest = "additional_details"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "internalId":
            suggest = "internal_id"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "serverCount":
            suggest = "server_count"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalExadataInfrastructureStorageGrid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalExadataInfrastructureStorageGrid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalExadataInfrastructureStorageGrid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 internal_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 server_count: Optional[float] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if server_count is not None:
            pulumi.set(__self__, "server_count", server_count)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[str]:
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="serverCount")
    def server_count(self) -> Optional[float]:
        return pulumi.get(self, "server_count")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class ExternalExadataStorageConnectorCredentialInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sslTrustStoreLocation":
            suggest = "ssl_trust_store_location"
        elif key == "sslTrustStorePassword":
            suggest = "ssl_trust_store_password"
        elif key == "sslTrustStoreType":
            suggest = "ssl_trust_store_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalExadataStorageConnectorCredentialInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalExadataStorageConnectorCredentialInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalExadataStorageConnectorCredentialInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 username: str,
                 ssl_trust_store_location: Optional[str] = None,
                 ssl_trust_store_password: Optional[str] = None,
                 ssl_trust_store_type: Optional[str] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if ssl_trust_store_location is not None:
            pulumi.set(__self__, "ssl_trust_store_location", ssl_trust_store_location)
        if ssl_trust_store_password is not None:
            pulumi.set(__self__, "ssl_trust_store_password", ssl_trust_store_password)
        if ssl_trust_store_type is not None:
            pulumi.set(__self__, "ssl_trust_store_type", ssl_trust_store_type)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="sslTrustStoreLocation")
    def ssl_trust_store_location(self) -> Optional[str]:
        return pulumi.get(self, "ssl_trust_store_location")

    @property
    @pulumi.getter(name="sslTrustStorePassword")
    def ssl_trust_store_password(self) -> Optional[str]:
        return pulumi.get(self, "ssl_trust_store_password")

    @property
    @pulumi.getter(name="sslTrustStoreType")
    def ssl_trust_store_type(self) -> Optional[str]:
        return pulumi.get(self, "ssl_trust_store_type")


@pulumi.output_type
class ExternalListenerEndpoint(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 key: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 services: Optional[Sequence[str]] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if services is not None:
            pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "services")


@pulumi.output_type
class ExternalListenerServicedAsm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalListenerServicedAsm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalListenerServicedAsm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalListenerServicedAsm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ExternalListenerServicedDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "databaseSubType":
            suggest = "database_sub_type"
        elif key == "databaseType":
            suggest = "database_type"
        elif key == "dbUniqueName":
            suggest = "db_unique_name"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "isManaged":
            suggest = "is_managed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalListenerServicedDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalListenerServicedDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalListenerServicedDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 database_sub_type: Optional[str] = None,
                 database_type: Optional[str] = None,
                 db_unique_name: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_managed: Optional[bool] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_sub_type is not None:
            pulumi.set(__self__, "database_sub_type", database_sub_type)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if db_unique_name is not None:
            pulumi.set(__self__, "db_unique_name", db_unique_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_managed is not None:
            pulumi.set(__self__, "is_managed", is_managed)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dbUniqueName")
    def db_unique_name(self) -> Optional[str]:
        return pulumi.get(self, "db_unique_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isManaged")
    def is_managed(self) -> Optional[bool]:
        return pulumi.get(self, "is_managed")


@pulumi.output_type
class ManagedDatabaseGroupManagedDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "databaseSubType":
            suggest = "database_sub_type"
        elif key == "databaseType":
            suggest = "database_type"
        elif key == "deploymentType":
            suggest = "deployment_type"
        elif key == "timeAdded":
            suggest = "time_added"
        elif key == "workloadType":
            suggest = "workload_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedDatabaseGroupManagedDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedDatabaseGroupManagedDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedDatabaseGroupManagedDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 database_sub_type: Optional[str] = None,
                 database_type: Optional[str] = None,
                 deployment_type: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 time_added: Optional[str] = None,
                 workload_type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_sub_type is not None:
            pulumi.set(__self__, "database_sub_type", database_sub_type)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_added is not None:
            pulumi.set(__self__, "time_added", time_added)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeAdded")
    def time_added(self) -> Optional[str]:
        return pulumi.get(self, "time_added")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[str]:
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class ManagedDatabasesChangeDatabaseParameterCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretId":
            suggest = "secret_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedDatabasesChangeDatabaseParameterCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedDatabasesChangeDatabaseParameterCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedDatabasesChangeDatabaseParameterCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: Optional[str] = None,
                 role: Optional[str] = None,
                 secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class ManagedDatabasesChangeDatabaseParameterParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "updateComment":
            suggest = "update_comment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedDatabasesChangeDatabaseParameterParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedDatabasesChangeDatabaseParameterParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedDatabasesChangeDatabaseParameterParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 value: str,
                 update_comment: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if update_comment is not None:
            pulumi.set(__self__, "update_comment", update_comment)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="updateComment")
    def update_comment(self) -> Optional[str]:
        return pulumi.get(self, "update_comment")


@pulumi.output_type
class ManagedDatabasesResetDatabaseParameterCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretId":
            suggest = "secret_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedDatabasesResetDatabaseParameterCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedDatabasesResetDatabaseParameterCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedDatabasesResetDatabaseParameterCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: Optional[str] = None,
                 role: Optional[str] = None,
                 secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDbManagementPrivateEndpointAssociatedDatabaseItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 time_registered: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_registered is not None:
            pulumi.set(__self__, "time_registered", time_registered)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeRegistered")
    def time_registered(self) -> Optional[str]:
        return pulumi.get(self, "time_registered")


@pulumi.output_type
class GetDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 time_registered: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_registered is not None:
            pulumi.set(__self__, "time_registered", time_registered)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeRegistered")
    def time_registered(self) -> Optional[str]:
        return pulumi.get(self, "time_registered")


@pulumi.output_type
class GetDbManagementPrivateEndpointAssociatedDatabasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDbManagementPrivateEndpointsDbManagementPrivateEndpointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDbManagementPrivateEndpointsDbManagementPrivateEndpointCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDbManagementPrivateEndpointsDbManagementPrivateEndpointCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDbManagementPrivateEndpointsDbManagementPrivateEndpointCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 is_cluster: Optional[bool] = None,
                 name: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_cluster is not None:
            pulumi.set(__self__, "is_cluster", is_cluster)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetDbManagementPrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalAsmConfigurationInitParameterResult(dict):
    def __init__(__self__, *,
                 asm_instance_display_name: Optional[str] = None,
                 asm_instance_id: Optional[str] = None,
                 auto_mount_disk_groups: Optional[Sequence[str]] = None,
                 disk_discovery_path: Optional[str] = None,
                 preferred_read_failure_groups: Optional[Sequence[str]] = None,
                 rebalance_power: Optional[int] = None):
        if asm_instance_display_name is not None:
            pulumi.set(__self__, "asm_instance_display_name", asm_instance_display_name)
        if asm_instance_id is not None:
            pulumi.set(__self__, "asm_instance_id", asm_instance_id)
        if auto_mount_disk_groups is not None:
            pulumi.set(__self__, "auto_mount_disk_groups", auto_mount_disk_groups)
        if disk_discovery_path is not None:
            pulumi.set(__self__, "disk_discovery_path", disk_discovery_path)
        if preferred_read_failure_groups is not None:
            pulumi.set(__self__, "preferred_read_failure_groups", preferred_read_failure_groups)
        if rebalance_power is not None:
            pulumi.set(__self__, "rebalance_power", rebalance_power)

    @property
    @pulumi.getter(name="asmInstanceDisplayName")
    def asm_instance_display_name(self) -> Optional[str]:
        return pulumi.get(self, "asm_instance_display_name")

    @property
    @pulumi.getter(name="asmInstanceId")
    def asm_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "asm_instance_id")

    @property
    @pulumi.getter(name="autoMountDiskGroups")
    def auto_mount_disk_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "auto_mount_disk_groups")

    @property
    @pulumi.getter(name="diskDiscoveryPath")
    def disk_discovery_path(self) -> Optional[str]:
        return pulumi.get(self, "disk_discovery_path")

    @property
    @pulumi.getter(name="preferredReadFailureGroups")
    def preferred_read_failure_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "preferred_read_failure_groups")

    @property
    @pulumi.getter(name="rebalancePower")
    def rebalance_power(self) -> Optional[int]:
        return pulumi.get(self, "rebalance_power")


@pulumi.output_type
class GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalAsmDiskGroupsExternalAsmDiskGroupCollectionItemResult(dict):
    def __init__(__self__, *,
                 databases: Optional[Sequence[str]] = None,
                 dismounting_instance_count: Optional[int] = None,
                 is_sparse: Optional[bool] = None,
                 mounting_instance_count: Optional[int] = None,
                 name: Optional[str] = None,
                 redundancy_type: Optional[str] = None,
                 total_size_in_mbs: Optional[str] = None,
                 used_percent: Optional[float] = None,
                 used_size_in_mbs: Optional[str] = None):
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if dismounting_instance_count is not None:
            pulumi.set(__self__, "dismounting_instance_count", dismounting_instance_count)
        if is_sparse is not None:
            pulumi.set(__self__, "is_sparse", is_sparse)
        if mounting_instance_count is not None:
            pulumi.set(__self__, "mounting_instance_count", mounting_instance_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redundancy_type is not None:
            pulumi.set(__self__, "redundancy_type", redundancy_type)
        if total_size_in_mbs is not None:
            pulumi.set(__self__, "total_size_in_mbs", total_size_in_mbs)
        if used_percent is not None:
            pulumi.set(__self__, "used_percent", used_percent)
        if used_size_in_mbs is not None:
            pulumi.set(__self__, "used_size_in_mbs", used_size_in_mbs)

    @property
    @pulumi.getter
    def databases(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="dismountingInstanceCount")
    def dismounting_instance_count(self) -> Optional[int]:
        return pulumi.get(self, "dismounting_instance_count")

    @property
    @pulumi.getter(name="isSparse")
    def is_sparse(self) -> Optional[bool]:
        return pulumi.get(self, "is_sparse")

    @property
    @pulumi.getter(name="mountingInstanceCount")
    def mounting_instance_count(self) -> Optional[int]:
        return pulumi.get(self, "mounting_instance_count")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="redundancyType")
    def redundancy_type(self) -> Optional[str]:
        return pulumi.get(self, "redundancy_type")

    @property
    @pulumi.getter(name="totalSizeInMbs")
    def total_size_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "total_size_in_mbs")

    @property
    @pulumi.getter(name="usedPercent")
    def used_percent(self) -> Optional[float]:
        return pulumi.get(self, "used_percent")

    @property
    @pulumi.getter(name="usedSizeInMbs")
    def used_size_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "used_size_in_mbs")


@pulumi.output_type
class GetExternalAsmDiskGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalAsmInstancesExternalAsmInstanceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalAsmInstancesExternalAsmInstanceCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalAsmInstancesExternalAsmInstanceCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalAsmInstancesExternalAsmInstanceCollectionItemResult(dict):
    def __init__(__self__, *,
                 adr_home_directory: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 component_name: Optional[str] = None,
                 display_name: Optional[str] = None,
                 external_asm_id: Optional[str] = None,
                 external_db_node_id: Optional[str] = None,
                 external_db_system_id: Optional[str] = None,
                 host_name: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if adr_home_directory is not None:
            pulumi.set(__self__, "adr_home_directory", adr_home_directory)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_asm_id is not None:
            pulumi.set(__self__, "external_asm_id", external_asm_id)
        if external_db_node_id is not None:
            pulumi.set(__self__, "external_db_node_id", external_db_node_id)
        if external_db_system_id is not None:
            pulumi.set(__self__, "external_db_system_id", external_db_system_id)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="adrHomeDirectory")
    def adr_home_directory(self) -> Optional[str]:
        return pulumi.get(self, "adr_home_directory")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[str]:
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalAsmId")
    def external_asm_id(self) -> Optional[str]:
        return pulumi.get(self, "external_asm_id")

    @property
    @pulumi.getter(name="externalDbNodeId")
    def external_db_node_id(self) -> Optional[str]:
        return pulumi.get(self, "external_db_node_id")

    @property
    @pulumi.getter(name="externalDbSystemId")
    def external_db_system_id(self) -> Optional[str]:
        return pulumi.get(self, "external_db_system_id")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetExternalAsmInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalAsmServicedDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 database_sub_type: Optional[str] = None,
                 database_type: Optional[str] = None,
                 db_unique_name: Optional[str] = None,
                 disk_groups: Optional[Sequence[str]] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_managed: Optional[bool] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_sub_type is not None:
            pulumi.set(__self__, "database_sub_type", database_sub_type)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if db_unique_name is not None:
            pulumi.set(__self__, "db_unique_name", db_unique_name)
        if disk_groups is not None:
            pulumi.set(__self__, "disk_groups", disk_groups)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_managed is not None:
            pulumi.set(__self__, "is_managed", is_managed)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dbUniqueName")
    def db_unique_name(self) -> Optional[str]:
        return pulumi.get(self, "db_unique_name")

    @property
    @pulumi.getter(name="diskGroups")
    def disk_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "disk_groups")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isManaged")
    def is_managed(self) -> Optional[bool]:
        return pulumi.get(self, "is_managed")


@pulumi.output_type
class GetExternalAsmUsersExternalAsmUserCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalAsmUsersExternalAsmUserCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalAsmUsersExternalAsmUserCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalAsmUsersExternalAsmUserCollectionItemResult(dict):
    def __init__(__self__, *,
                 asm_id: Optional[str] = None,
                 name: Optional[str] = None,
                 privileges: Optional[Sequence[str]] = None):
        if asm_id is not None:
            pulumi.set(__self__, "asm_id", asm_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if privileges is not None:
            pulumi.set(__self__, "privileges", privileges)

    @property
    @pulumi.getter(name="asmId")
    def asm_id(self) -> Optional[str]:
        return pulumi.get(self, "asm_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def privileges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "privileges")


@pulumi.output_type
class GetExternalAsmUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalAsmsExternalAsmCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalAsmsExternalAsmCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalAsmsExternalAsmCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalAsmsExternalAsmCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 compartment_id: Optional[str] = None,
                 component_name: Optional[str] = None,
                 display_name: Optional[str] = None,
                 external_asm_id: Optional[str] = None,
                 external_connector_id: Optional[str] = None,
                 external_db_system_id: Optional[str] = None,
                 grid_home: Optional[str] = None,
                 id: Optional[str] = None,
                 is_cluster: Optional[bool] = None,
                 is_flex_enabled: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 serviced_databases: Optional[Sequence['outputs.GetExternalAsmsExternalAsmCollectionItemServicedDatabaseResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_asm_id is not None:
            pulumi.set(__self__, "external_asm_id", external_asm_id)
        if external_connector_id is not None:
            pulumi.set(__self__, "external_connector_id", external_connector_id)
        if external_db_system_id is not None:
            pulumi.set(__self__, "external_db_system_id", external_db_system_id)
        if grid_home is not None:
            pulumi.set(__self__, "grid_home", grid_home)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_cluster is not None:
            pulumi.set(__self__, "is_cluster", is_cluster)
        if is_flex_enabled is not None:
            pulumi.set(__self__, "is_flex_enabled", is_flex_enabled)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if serviced_databases is not None:
            pulumi.set(__self__, "serviced_databases", serviced_databases)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[str]:
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalAsmId")
    def external_asm_id(self) -> Optional[str]:
        return pulumi.get(self, "external_asm_id")

    @property
    @pulumi.getter(name="externalConnectorId")
    def external_connector_id(self) -> Optional[str]:
        return pulumi.get(self, "external_connector_id")

    @property
    @pulumi.getter(name="externalDbSystemId")
    def external_db_system_id(self) -> Optional[str]:
        return pulumi.get(self, "external_db_system_id")

    @property
    @pulumi.getter(name="gridHome")
    def grid_home(self) -> Optional[str]:
        return pulumi.get(self, "grid_home")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter(name="isFlexEnabled")
    def is_flex_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_flex_enabled")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="servicedDatabases")
    def serviced_databases(self) -> Optional[Sequence['outputs.GetExternalAsmsExternalAsmCollectionItemServicedDatabaseResult']]:
        return pulumi.get(self, "serviced_databases")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetExternalAsmsExternalAsmCollectionItemServicedDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 database_sub_type: Optional[str] = None,
                 database_type: Optional[str] = None,
                 db_unique_name: Optional[str] = None,
                 disk_groups: Optional[Sequence[str]] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_managed: Optional[bool] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_sub_type is not None:
            pulumi.set(__self__, "database_sub_type", database_sub_type)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if db_unique_name is not None:
            pulumi.set(__self__, "db_unique_name", db_unique_name)
        if disk_groups is not None:
            pulumi.set(__self__, "disk_groups", disk_groups)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_managed is not None:
            pulumi.set(__self__, "is_managed", is_managed)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dbUniqueName")
    def db_unique_name(self) -> Optional[str]:
        return pulumi.get(self, "db_unique_name")

    @property
    @pulumi.getter(name="diskGroups")
    def disk_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "disk_groups")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isManaged")
    def is_managed(self) -> Optional[bool]:
        return pulumi.get(self, "is_managed")


@pulumi.output_type
class GetExternalAsmsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalClusterInstancesExternalClusterInstanceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalClusterInstancesExternalClusterInstanceCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalClusterInstancesExternalClusterInstanceCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalClusterInstancesExternalClusterInstanceCollectionItemResult(dict):
    def __init__(__self__, *,
                 adr_home_directory: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 component_name: Optional[str] = None,
                 crs_base_directory: Optional[str] = None,
                 display_name: Optional[str] = None,
                 external_cluster_id: Optional[str] = None,
                 external_cluster_instance_id: Optional[str] = None,
                 external_connector_id: Optional[str] = None,
                 external_db_node_id: Optional[str] = None,
                 external_db_system_id: Optional[str] = None,
                 host_name: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 node_role: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if adr_home_directory is not None:
            pulumi.set(__self__, "adr_home_directory", adr_home_directory)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if crs_base_directory is not None:
            pulumi.set(__self__, "crs_base_directory", crs_base_directory)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_cluster_id is not None:
            pulumi.set(__self__, "external_cluster_id", external_cluster_id)
        if external_cluster_instance_id is not None:
            pulumi.set(__self__, "external_cluster_instance_id", external_cluster_instance_id)
        if external_connector_id is not None:
            pulumi.set(__self__, "external_connector_id", external_connector_id)
        if external_db_node_id is not None:
            pulumi.set(__self__, "external_db_node_id", external_db_node_id)
        if external_db_system_id is not None:
            pulumi.set(__self__, "external_db_system_id", external_db_system_id)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if node_role is not None:
            pulumi.set(__self__, "node_role", node_role)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="adrHomeDirectory")
    def adr_home_directory(self) -> Optional[str]:
        return pulumi.get(self, "adr_home_directory")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[str]:
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter(name="crsBaseDirectory")
    def crs_base_directory(self) -> Optional[str]:
        return pulumi.get(self, "crs_base_directory")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalClusterId")
    def external_cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "external_cluster_id")

    @property
    @pulumi.getter(name="externalClusterInstanceId")
    def external_cluster_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "external_cluster_instance_id")

    @property
    @pulumi.getter(name="externalConnectorId")
    def external_connector_id(self) -> Optional[str]:
        return pulumi.get(self, "external_connector_id")

    @property
    @pulumi.getter(name="externalDbNodeId")
    def external_db_node_id(self) -> Optional[str]:
        return pulumi.get(self, "external_db_node_id")

    @property
    @pulumi.getter(name="externalDbSystemId")
    def external_db_system_id(self) -> Optional[str]:
        return pulumi.get(self, "external_db_system_id")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> Optional[str]:
        return pulumi.get(self, "node_role")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetExternalClusterInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalClusterNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 network_number: Optional[int] = None,
                 network_type: Optional[str] = None,
                 subnet: Optional[str] = None):
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class GetExternalClusterScanConfigurationResult(dict):
    def __init__(__self__, *,
                 network_number: Optional[int] = None,
                 scan_name: Optional[str] = None,
                 scan_port: Optional[int] = None,
                 scan_protocol: Optional[str] = None):
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if scan_name is not None:
            pulumi.set(__self__, "scan_name", scan_name)
        if scan_port is not None:
            pulumi.set(__self__, "scan_port", scan_port)
        if scan_protocol is not None:
            pulumi.set(__self__, "scan_protocol", scan_protocol)

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="scanName")
    def scan_name(self) -> Optional[str]:
        return pulumi.get(self, "scan_name")

    @property
    @pulumi.getter(name="scanPort")
    def scan_port(self) -> Optional[int]:
        return pulumi.get(self, "scan_port")

    @property
    @pulumi.getter(name="scanProtocol")
    def scan_protocol(self) -> Optional[str]:
        return pulumi.get(self, "scan_protocol")


@pulumi.output_type
class GetExternalClusterVipConfigurationResult(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 network_number: Optional[int] = None,
                 node_name: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[str]:
        return pulumi.get(self, "node_name")


@pulumi.output_type
class GetExternalClustersExternalClusterCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalClustersExternalClusterCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalClustersExternalClusterCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalClustersExternalClusterCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 compartment_id: Optional[str] = None,
                 component_name: Optional[str] = None,
                 display_name: Optional[str] = None,
                 external_cluster_id: Optional[str] = None,
                 external_connector_id: Optional[str] = None,
                 external_db_system_id: Optional[str] = None,
                 grid_home: Optional[str] = None,
                 id: Optional[str] = None,
                 is_flex_cluster: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 network_configurations: Optional[Sequence['outputs.GetExternalClustersExternalClusterCollectionItemNetworkConfigurationResult']] = None,
                 ocr_file_location: Optional[str] = None,
                 scan_configurations: Optional[Sequence['outputs.GetExternalClustersExternalClusterCollectionItemScanConfigurationResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None,
                 vip_configurations: Optional[Sequence['outputs.GetExternalClustersExternalClusterCollectionItemVipConfigurationResult']] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_cluster_id is not None:
            pulumi.set(__self__, "external_cluster_id", external_cluster_id)
        if external_connector_id is not None:
            pulumi.set(__self__, "external_connector_id", external_connector_id)
        if external_db_system_id is not None:
            pulumi.set(__self__, "external_db_system_id", external_db_system_id)
        if grid_home is not None:
            pulumi.set(__self__, "grid_home", grid_home)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_flex_cluster is not None:
            pulumi.set(__self__, "is_flex_cluster", is_flex_cluster)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if network_configurations is not None:
            pulumi.set(__self__, "network_configurations", network_configurations)
        if ocr_file_location is not None:
            pulumi.set(__self__, "ocr_file_location", ocr_file_location)
        if scan_configurations is not None:
            pulumi.set(__self__, "scan_configurations", scan_configurations)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vip_configurations is not None:
            pulumi.set(__self__, "vip_configurations", vip_configurations)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[str]:
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalClusterId")
    def external_cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "external_cluster_id")

    @property
    @pulumi.getter(name="externalConnectorId")
    def external_connector_id(self) -> Optional[str]:
        return pulumi.get(self, "external_connector_id")

    @property
    @pulumi.getter(name="externalDbSystemId")
    def external_db_system_id(self) -> Optional[str]:
        return pulumi.get(self, "external_db_system_id")

    @property
    @pulumi.getter(name="gridHome")
    def grid_home(self) -> Optional[str]:
        return pulumi.get(self, "grid_home")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isFlexCluster")
    def is_flex_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "is_flex_cluster")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="networkConfigurations")
    def network_configurations(self) -> Optional[Sequence['outputs.GetExternalClustersExternalClusterCollectionItemNetworkConfigurationResult']]:
        return pulumi.get(self, "network_configurations")

    @property
    @pulumi.getter(name="ocrFileLocation")
    def ocr_file_location(self) -> Optional[str]:
        return pulumi.get(self, "ocr_file_location")

    @property
    @pulumi.getter(name="scanConfigurations")
    def scan_configurations(self) -> Optional[Sequence['outputs.GetExternalClustersExternalClusterCollectionItemScanConfigurationResult']]:
        return pulumi.get(self, "scan_configurations")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vipConfigurations")
    def vip_configurations(self) -> Optional[Sequence['outputs.GetExternalClustersExternalClusterCollectionItemVipConfigurationResult']]:
        return pulumi.get(self, "vip_configurations")


@pulumi.output_type
class GetExternalClustersExternalClusterCollectionItemNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 network_number: Optional[int] = None,
                 network_type: Optional[str] = None,
                 subnet: Optional[str] = None):
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class GetExternalClustersExternalClusterCollectionItemScanConfigurationResult(dict):
    def __init__(__self__, *,
                 network_number: Optional[int] = None,
                 scan_name: Optional[str] = None,
                 scan_port: Optional[int] = None,
                 scan_protocol: Optional[str] = None):
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if scan_name is not None:
            pulumi.set(__self__, "scan_name", scan_name)
        if scan_port is not None:
            pulumi.set(__self__, "scan_port", scan_port)
        if scan_protocol is not None:
            pulumi.set(__self__, "scan_protocol", scan_protocol)

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="scanName")
    def scan_name(self) -> Optional[str]:
        return pulumi.get(self, "scan_name")

    @property
    @pulumi.getter(name="scanPort")
    def scan_port(self) -> Optional[int]:
        return pulumi.get(self, "scan_port")

    @property
    @pulumi.getter(name="scanProtocol")
    def scan_protocol(self) -> Optional[str]:
        return pulumi.get(self, "scan_protocol")


@pulumi.output_type
class GetExternalClustersExternalClusterCollectionItemVipConfigurationResult(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 network_number: Optional[int] = None,
                 node_name: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[str]:
        return pulumi.get(self, "node_name")


@pulumi.output_type
class GetExternalClustersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalDatabasesExternalDatabaseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalDatabasesExternalDatabaseCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalDatabasesExternalDatabaseCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalDatabasesExternalDatabaseCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 database_sub_type: Optional[str] = None,
                 database_type: Optional[str] = None,
                 db_management_configs: Optional[Sequence['outputs.GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfigResult']] = None,
                 db_system_infos: Optional[Sequence['outputs.GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfoResult']] = None,
                 db_unique_name: Optional[str] = None,
                 display_name: Optional[str] = None,
                 external_container_database_id: Optional[str] = None,
                 external_db_home_id: Optional[str] = None,
                 id: Optional[str] = None,
                 instance_details: Optional[Sequence['outputs.GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetailResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_sub_type is not None:
            pulumi.set(__self__, "database_sub_type", database_sub_type)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if db_management_configs is not None:
            pulumi.set(__self__, "db_management_configs", db_management_configs)
        if db_system_infos is not None:
            pulumi.set(__self__, "db_system_infos", db_system_infos)
        if db_unique_name is not None:
            pulumi.set(__self__, "db_unique_name", db_unique_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_container_database_id is not None:
            pulumi.set(__self__, "external_container_database_id", external_container_database_id)
        if external_db_home_id is not None:
            pulumi.set(__self__, "external_db_home_id", external_db_home_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_details is not None:
            pulumi.set(__self__, "instance_details", instance_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dbManagementConfigs")
    def db_management_configs(self) -> Optional[Sequence['outputs.GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfigResult']]:
        return pulumi.get(self, "db_management_configs")

    @property
    @pulumi.getter(name="dbSystemInfos")
    def db_system_infos(self) -> Optional[Sequence['outputs.GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfoResult']]:
        return pulumi.get(self, "db_system_infos")

    @property
    @pulumi.getter(name="dbUniqueName")
    def db_unique_name(self) -> Optional[str]:
        return pulumi.get(self, "db_unique_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalContainerDatabaseId")
    def external_container_database_id(self) -> Optional[str]:
        return pulumi.get(self, "external_container_database_id")

    @property
    @pulumi.getter(name="externalDbHomeId")
    def external_db_home_id(self) -> Optional[str]:
        return pulumi.get(self, "external_db_home_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceDetails")
    def instance_details(self) -> Optional[Sequence['outputs.GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetailResult']]:
        return pulumi.get(self, "instance_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetExternalDatabasesExternalDatabaseCollectionItemDbManagementConfigResult(dict):
    def __init__(__self__, *,
                 connector_id: Optional[str] = None,
                 database_management_status: Optional[str] = None,
                 license_model: Optional[str] = None):
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if database_management_status is not None:
            pulumi.set(__self__, "database_management_status", database_management_status)
        if license_model is not None:
            pulumi.set(__self__, "license_model", license_model)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[str]:
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="databaseManagementStatus")
    def database_management_status(self) -> Optional[str]:
        return pulumi.get(self, "database_management_status")

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> Optional[str]:
        return pulumi.get(self, "license_model")


@pulumi.output_type
class GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfoResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 exadata_infra_infos: Optional[Sequence['outputs.GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfoExadataInfraInfoResult']] = None,
                 id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if exadata_infra_infos is not None:
            pulumi.set(__self__, "exadata_infra_infos", exadata_infra_infos)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="exadataInfraInfos")
    def exadata_infra_infos(self) -> Optional[Sequence['outputs.GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfoExadataInfraInfoResult']]:
        return pulumi.get(self, "exadata_infra_infos")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetExternalDatabasesExternalDatabaseCollectionItemDbSystemInfoExadataInfraInfoResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetExternalDatabasesExternalDatabaseCollectionItemInstanceDetailResult(dict):
    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 instance_name: Optional[str] = None,
                 instance_number: Optional[int] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_number is not None:
            pulumi.set(__self__, "instance_number", instance_number)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> Optional[int]:
        return pulumi.get(self, "instance_number")


@pulumi.output_type
class GetExternalDatabasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalDbHomesExternalDbHomeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalDbHomesExternalDbHomeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalDbHomesExternalDbHomeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalDbHomesExternalDbHomeCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 compartment_id: Optional[str] = None,
                 component_name: Optional[str] = None,
                 display_name: Optional[str] = None,
                 external_db_system_id: Optional[str] = None,
                 home_directory: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_db_system_id is not None:
            pulumi.set(__self__, "external_db_system_id", external_db_system_id)
        if home_directory is not None:
            pulumi.set(__self__, "home_directory", home_directory)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[str]:
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalDbSystemId")
    def external_db_system_id(self) -> Optional[str]:
        return pulumi.get(self, "external_db_system_id")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> Optional[str]:
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetExternalDbHomesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalDbNodesExternalDbNodeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalDbNodesExternalDbNodeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalDbNodesExternalDbNodeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalDbNodesExternalDbNodeCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 compartment_id: Optional[str] = None,
                 component_name: Optional[str] = None,
                 cpu_core_count: Optional[float] = None,
                 display_name: Optional[str] = None,
                 domain_name: Optional[str] = None,
                 external_connector_id: Optional[str] = None,
                 external_db_node_id: Optional[str] = None,
                 external_db_system_id: Optional[str] = None,
                 host_name: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 memory_size_in_gbs: Optional[float] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if cpu_core_count is not None:
            pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if external_connector_id is not None:
            pulumi.set(__self__, "external_connector_id", external_connector_id)
        if external_db_node_id is not None:
            pulumi.set(__self__, "external_db_node_id", external_db_node_id)
        if external_db_system_id is not None:
            pulumi.set(__self__, "external_db_system_id", external_db_system_id)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if memory_size_in_gbs is not None:
            pulumi.set(__self__, "memory_size_in_gbs", memory_size_in_gbs)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[str]:
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> Optional[float]:
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="externalConnectorId")
    def external_connector_id(self) -> Optional[str]:
        return pulumi.get(self, "external_connector_id")

    @property
    @pulumi.getter(name="externalDbNodeId")
    def external_db_node_id(self) -> Optional[str]:
        return pulumi.get(self, "external_db_node_id")

    @property
    @pulumi.getter(name="externalDbSystemId")
    def external_db_system_id(self) -> Optional[str]:
        return pulumi.get(self, "external_db_system_id")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="memorySizeInGbs")
    def memory_size_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_size_in_gbs")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetExternalDbNodesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalDbSystemConnectorConnectionInfoResult(dict):
    def __init__(__self__, *,
                 component_type: Optional[str] = None,
                 connection_credentials: Optional[Sequence['outputs.GetExternalDbSystemConnectorConnectionInfoConnectionCredentialResult']] = None,
                 connection_strings: Optional[Sequence['outputs.GetExternalDbSystemConnectorConnectionInfoConnectionStringResult']] = None):
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connection_credentials is not None:
            pulumi.set(__self__, "connection_credentials", connection_credentials)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="connectionCredentials")
    def connection_credentials(self) -> Optional[Sequence['outputs.GetExternalDbSystemConnectorConnectionInfoConnectionCredentialResult']]:
        return pulumi.get(self, "connection_credentials")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.GetExternalDbSystemConnectorConnectionInfoConnectionStringResult']]:
        return pulumi.get(self, "connection_strings")


@pulumi.output_type
class GetExternalDbSystemConnectorConnectionInfoConnectionCredentialResult(dict):
    def __init__(__self__, *,
                 credential_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetExternalDbSystemConnectorConnectionInfoConnectionStringResult(dict):
    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemResult(dict):
    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 connection_failure_message: Optional[str] = None,
                 connection_infos: Optional[Sequence['outputs.GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoResult']] = None,
                 connection_status: Optional[str] = None,
                 connector_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 external_db_system_id: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 time_connection_status_last_updated: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_failure_message is not None:
            pulumi.set(__self__, "connection_failure_message", connection_failure_message)
        if connection_infos is not None:
            pulumi.set(__self__, "connection_infos", connection_infos)
        if connection_status is not None:
            pulumi.set(__self__, "connection_status", connection_status)
        if connector_type is not None:
            pulumi.set(__self__, "connector_type", connector_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_db_system_id is not None:
            pulumi.set(__self__, "external_db_system_id", external_db_system_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_connection_status_last_updated is not None:
            pulumi.set(__self__, "time_connection_status_last_updated", time_connection_status_last_updated)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionFailureMessage")
    def connection_failure_message(self) -> Optional[str]:
        return pulumi.get(self, "connection_failure_message")

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> Optional[Sequence['outputs.GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoResult']]:
        return pulumi.get(self, "connection_infos")

    @property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> Optional[str]:
        return pulumi.get(self, "connection_status")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> Optional[str]:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalDbSystemId")
    def external_db_system_id(self) -> Optional[str]:
        return pulumi.get(self, "external_db_system_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeConnectionStatusLastUpdated")
    def time_connection_status_last_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_connection_status_last_updated")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoResult(dict):
    def __init__(__self__, *,
                 component_type: Optional[str] = None,
                 connection_credentials: Optional[Sequence['outputs.GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoConnectionCredentialResult']] = None,
                 connection_strings: Optional[Sequence['outputs.GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoConnectionStringResult']] = None):
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connection_credentials is not None:
            pulumi.set(__self__, "connection_credentials", connection_credentials)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="connectionCredentials")
    def connection_credentials(self) -> Optional[Sequence['outputs.GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoConnectionCredentialResult']]:
        return pulumi.get(self, "connection_credentials")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoConnectionStringResult']]:
        return pulumi.get(self, "connection_strings")


@pulumi.output_type
class GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoConnectionCredentialResult(dict):
    def __init__(__self__, *,
                 credential_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetExternalDbSystemConnectorsExternalDbSystemConnectorCollectionItemConnectionInfoConnectionStringResult(dict):
    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class GetExternalDbSystemConnectorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalDbSystemDatabaseManagementConfigResult(dict):
    def __init__(__self__, *,
                 license_model: Optional[str] = None):
        if license_model is not None:
            pulumi.set(__self__, "license_model", license_model)

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> Optional[str]:
        return pulumi.get(self, "license_model")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemResult(dict):
    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 discovered_components: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentResult']] = None,
                 display_name: Optional[str] = None,
                 external_db_system_discovery_id: Optional[str] = None,
                 grid_home: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 patch_operations: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationResult']] = None,
                 resource_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if discovered_components is not None:
            pulumi.set(__self__, "discovered_components", discovered_components)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if external_db_system_discovery_id is not None:
            pulumi.set(__self__, "external_db_system_discovery_id", external_db_system_discovery_id)
        if grid_home is not None:
            pulumi.set(__self__, "grid_home", grid_home)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if patch_operations is not None:
            pulumi.set(__self__, "patch_operations", patch_operations)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="discoveredComponents")
    def discovered_components(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentResult']]:
        return pulumi.get(self, "discovered_components")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="externalDbSystemDiscoveryId")
    def external_db_system_discovery_id(self) -> Optional[str]:
        return pulumi.get(self, "external_db_system_discovery_id")

    @property
    @pulumi.getter(name="gridHome")
    def grid_home(self) -> Optional[str]:
        return pulumi.get(self, "grid_home")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="patchOperations")
    def patch_operations(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationResult']]:
        return pulumi.get(self, "patch_operations")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentResult(dict):
    def __init__(__self__, *,
                 adr_home_directory: Optional[str] = None,
                 asm_instances: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentAsmInstanceResult']] = None,
                 associated_components: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentAssociatedComponentResult']] = None,
                 cluster_id: Optional[str] = None,
                 cluster_instances: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceResult']] = None,
                 compartment_id: Optional[str] = None,
                 component_id: Optional[str] = None,
                 component_name: Optional[str] = None,
                 component_type: Optional[str] = None,
                 connectors: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorResult']] = None,
                 container_database_id: Optional[str] = None,
                 cpu_core_count: Optional[float] = None,
                 crs_base_directory: Optional[str] = None,
                 db_edition: Optional[str] = None,
                 db_id: Optional[str] = None,
                 db_node_name: Optional[str] = None,
                 db_packs: Optional[str] = None,
                 db_role: Optional[str] = None,
                 db_type: Optional[str] = None,
                 db_unique_name: Optional[str] = None,
                 db_version: Optional[str] = None,
                 display_name: Optional[str] = None,
                 endpoints: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentEndpointResult']] = None,
                 grid_home: Optional[str] = None,
                 guid: Optional[str] = None,
                 home_directory: Optional[str] = None,
                 host_name: Optional[str] = None,
                 instance_name: Optional[str] = None,
                 is_cluster: Optional[bool] = None,
                 is_flex_cluster: Optional[bool] = None,
                 is_flex_enabled: Optional[bool] = None,
                 is_selected_for_monitoring: Optional[bool] = None,
                 listener_alias: Optional[str] = None,
                 listener_type: Optional[str] = None,
                 log_directory: Optional[str] = None,
                 memory_size_in_gbs: Optional[float] = None,
                 network_configurations: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentNetworkConfigurationResult']] = None,
                 node_role: Optional[str] = None,
                 ocr_file_location: Optional[str] = None,
                 oracle_home: Optional[str] = None,
                 pluggable_databases: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseResult']] = None,
                 resource_id: Optional[str] = None,
                 scan_configurations: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentScanConfigurationResult']] = None,
                 status: Optional[str] = None,
                 trace_directory: Optional[str] = None,
                 version: Optional[str] = None,
                 vip_configurations: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentVipConfigurationResult']] = None):
        if adr_home_directory is not None:
            pulumi.set(__self__, "adr_home_directory", adr_home_directory)
        if asm_instances is not None:
            pulumi.set(__self__, "asm_instances", asm_instances)
        if associated_components is not None:
            pulumi.set(__self__, "associated_components", associated_components)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_instances is not None:
            pulumi.set(__self__, "cluster_instances", cluster_instances)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connectors is not None:
            pulumi.set(__self__, "connectors", connectors)
        if container_database_id is not None:
            pulumi.set(__self__, "container_database_id", container_database_id)
        if cpu_core_count is not None:
            pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        if crs_base_directory is not None:
            pulumi.set(__self__, "crs_base_directory", crs_base_directory)
        if db_edition is not None:
            pulumi.set(__self__, "db_edition", db_edition)
        if db_id is not None:
            pulumi.set(__self__, "db_id", db_id)
        if db_node_name is not None:
            pulumi.set(__self__, "db_node_name", db_node_name)
        if db_packs is not None:
            pulumi.set(__self__, "db_packs", db_packs)
        if db_role is not None:
            pulumi.set(__self__, "db_role", db_role)
        if db_type is not None:
            pulumi.set(__self__, "db_type", db_type)
        if db_unique_name is not None:
            pulumi.set(__self__, "db_unique_name", db_unique_name)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if grid_home is not None:
            pulumi.set(__self__, "grid_home", grid_home)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)
        if home_directory is not None:
            pulumi.set(__self__, "home_directory", home_directory)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if is_cluster is not None:
            pulumi.set(__self__, "is_cluster", is_cluster)
        if is_flex_cluster is not None:
            pulumi.set(__self__, "is_flex_cluster", is_flex_cluster)
        if is_flex_enabled is not None:
            pulumi.set(__self__, "is_flex_enabled", is_flex_enabled)
        if is_selected_for_monitoring is not None:
            pulumi.set(__self__, "is_selected_for_monitoring", is_selected_for_monitoring)
        if listener_alias is not None:
            pulumi.set(__self__, "listener_alias", listener_alias)
        if listener_type is not None:
            pulumi.set(__self__, "listener_type", listener_type)
        if log_directory is not None:
            pulumi.set(__self__, "log_directory", log_directory)
        if memory_size_in_gbs is not None:
            pulumi.set(__self__, "memory_size_in_gbs", memory_size_in_gbs)
        if network_configurations is not None:
            pulumi.set(__self__, "network_configurations", network_configurations)
        if node_role is not None:
            pulumi.set(__self__, "node_role", node_role)
        if ocr_file_location is not None:
            pulumi.set(__self__, "ocr_file_location", ocr_file_location)
        if oracle_home is not None:
            pulumi.set(__self__, "oracle_home", oracle_home)
        if pluggable_databases is not None:
            pulumi.set(__self__, "pluggable_databases", pluggable_databases)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if scan_configurations is not None:
            pulumi.set(__self__, "scan_configurations", scan_configurations)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trace_directory is not None:
            pulumi.set(__self__, "trace_directory", trace_directory)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vip_configurations is not None:
            pulumi.set(__self__, "vip_configurations", vip_configurations)

    @property
    @pulumi.getter(name="adrHomeDirectory")
    def adr_home_directory(self) -> Optional[str]:
        return pulumi.get(self, "adr_home_directory")

    @property
    @pulumi.getter(name="asmInstances")
    def asm_instances(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentAsmInstanceResult']]:
        return pulumi.get(self, "asm_instances")

    @property
    @pulumi.getter(name="associatedComponents")
    def associated_components(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentAssociatedComponentResult']]:
        return pulumi.get(self, "associated_components")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterInstances")
    def cluster_instances(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceResult']]:
        return pulumi.get(self, "cluster_instances")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[str]:
        return pulumi.get(self, "component_id")

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[str]:
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter
    def connectors(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorResult']]:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter(name="containerDatabaseId")
    def container_database_id(self) -> Optional[str]:
        return pulumi.get(self, "container_database_id")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> Optional[float]:
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="crsBaseDirectory")
    def crs_base_directory(self) -> Optional[str]:
        return pulumi.get(self, "crs_base_directory")

    @property
    @pulumi.getter(name="dbEdition")
    def db_edition(self) -> Optional[str]:
        return pulumi.get(self, "db_edition")

    @property
    @pulumi.getter(name="dbId")
    def db_id(self) -> Optional[str]:
        return pulumi.get(self, "db_id")

    @property
    @pulumi.getter(name="dbNodeName")
    def db_node_name(self) -> Optional[str]:
        return pulumi.get(self, "db_node_name")

    @property
    @pulumi.getter(name="dbPacks")
    def db_packs(self) -> Optional[str]:
        return pulumi.get(self, "db_packs")

    @property
    @pulumi.getter(name="dbRole")
    def db_role(self) -> Optional[str]:
        return pulumi.get(self, "db_role")

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> Optional[str]:
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter(name="dbUniqueName")
    def db_unique_name(self) -> Optional[str]:
        return pulumi.get(self, "db_unique_name")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentEndpointResult']]:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="gridHome")
    def grid_home(self) -> Optional[str]:
        return pulumi.get(self, "grid_home")

    @property
    @pulumi.getter
    def guid(self) -> Optional[str]:
        return pulumi.get(self, "guid")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> Optional[str]:
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter(name="isFlexCluster")
    def is_flex_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "is_flex_cluster")

    @property
    @pulumi.getter(name="isFlexEnabled")
    def is_flex_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_flex_enabled")

    @property
    @pulumi.getter(name="isSelectedForMonitoring")
    def is_selected_for_monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "is_selected_for_monitoring")

    @property
    @pulumi.getter(name="listenerAlias")
    def listener_alias(self) -> Optional[str]:
        return pulumi.get(self, "listener_alias")

    @property
    @pulumi.getter(name="listenerType")
    def listener_type(self) -> Optional[str]:
        return pulumi.get(self, "listener_type")

    @property
    @pulumi.getter(name="logDirectory")
    def log_directory(self) -> Optional[str]:
        return pulumi.get(self, "log_directory")

    @property
    @pulumi.getter(name="memorySizeInGbs")
    def memory_size_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_size_in_gbs")

    @property
    @pulumi.getter(name="networkConfigurations")
    def network_configurations(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentNetworkConfigurationResult']]:
        return pulumi.get(self, "network_configurations")

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> Optional[str]:
        return pulumi.get(self, "node_role")

    @property
    @pulumi.getter(name="ocrFileLocation")
    def ocr_file_location(self) -> Optional[str]:
        return pulumi.get(self, "ocr_file_location")

    @property
    @pulumi.getter(name="oracleHome")
    def oracle_home(self) -> Optional[str]:
        return pulumi.get(self, "oracle_home")

    @property
    @pulumi.getter(name="pluggableDatabases")
    def pluggable_databases(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseResult']]:
        return pulumi.get(self, "pluggable_databases")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="scanConfigurations")
    def scan_configurations(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentScanConfigurationResult']]:
        return pulumi.get(self, "scan_configurations")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="traceDirectory")
    def trace_directory(self) -> Optional[str]:
        return pulumi.get(self, "trace_directory")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vipConfigurations")
    def vip_configurations(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentVipConfigurationResult']]:
        return pulumi.get(self, "vip_configurations")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentAsmInstanceResult(dict):
    def __init__(__self__, *,
                 adr_home_directory: Optional[str] = None,
                 host_name: Optional[str] = None,
                 instance_name: Optional[str] = None):
        if adr_home_directory is not None:
            pulumi.set(__self__, "adr_home_directory", adr_home_directory)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)

    @property
    @pulumi.getter(name="adrHomeDirectory")
    def adr_home_directory(self) -> Optional[str]:
        return pulumi.get(self, "adr_home_directory")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        return pulumi.get(self, "instance_name")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentAssociatedComponentResult(dict):
    def __init__(__self__, *,
                 association_type: Optional[str] = None,
                 component_id: Optional[str] = None,
                 component_type: Optional[str] = None):
        if association_type is not None:
            pulumi.set(__self__, "association_type", association_type)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)

    @property
    @pulumi.getter(name="associationType")
    def association_type(self) -> Optional[str]:
        return pulumi.get(self, "association_type")

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[str]:
        return pulumi.get(self, "component_id")

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceResult(dict):
    def __init__(__self__, *,
                 adr_home_directory: Optional[str] = None,
                 cluster_id: Optional[str] = None,
                 connectors: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorResult']] = None,
                 crs_base_directory: Optional[str] = None,
                 host_name: Optional[str] = None,
                 node_role: Optional[str] = None):
        if adr_home_directory is not None:
            pulumi.set(__self__, "adr_home_directory", adr_home_directory)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if connectors is not None:
            pulumi.set(__self__, "connectors", connectors)
        if crs_base_directory is not None:
            pulumi.set(__self__, "crs_base_directory", crs_base_directory)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if node_role is not None:
            pulumi.set(__self__, "node_role", node_role)

    @property
    @pulumi.getter(name="adrHomeDirectory")
    def adr_home_directory(self) -> Optional[str]:
        return pulumi.get(self, "adr_home_directory")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def connectors(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorResult']]:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter(name="crsBaseDirectory")
    def crs_base_directory(self) -> Optional[str]:
        return pulumi.get(self, "crs_base_directory")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> Optional[str]:
        return pulumi.get(self, "node_role")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorResult(dict):
    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 connection_failure_message: Optional[str] = None,
                 connection_infos: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoResult']] = None,
                 connection_status: Optional[str] = None,
                 connector_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 time_connection_status_last_updated: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if connection_failure_message is not None:
            pulumi.set(__self__, "connection_failure_message", connection_failure_message)
        if connection_infos is not None:
            pulumi.set(__self__, "connection_infos", connection_infos)
        if connection_status is not None:
            pulumi.set(__self__, "connection_status", connection_status)
        if connector_type is not None:
            pulumi.set(__self__, "connector_type", connector_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if time_connection_status_last_updated is not None:
            pulumi.set(__self__, "time_connection_status_last_updated", time_connection_status_last_updated)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectionFailureMessage")
    def connection_failure_message(self) -> Optional[str]:
        return pulumi.get(self, "connection_failure_message")

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoResult']]:
        return pulumi.get(self, "connection_infos")

    @property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> Optional[str]:
        return pulumi.get(self, "connection_status")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> Optional[str]:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="timeConnectionStatusLastUpdated")
    def time_connection_status_last_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_connection_status_last_updated")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoResult(dict):
    def __init__(__self__, *,
                 component_type: Optional[str] = None,
                 connection_credentials: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredentialResult']] = None,
                 connection_strings: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionStringResult']] = None):
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connection_credentials is not None:
            pulumi.set(__self__, "connection_credentials", connection_credentials)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="connectionCredentials")
    def connection_credentials(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredentialResult']]:
        return pulumi.get(self, "connection_credentials")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionStringResult']]:
        return pulumi.get(self, "connection_strings")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredentialResult(dict):
    def __init__(__self__, *,
                 credential_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionStringResult(dict):
    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorResult(dict):
    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 connection_failure_message: Optional[str] = None,
                 connection_infos: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoResult']] = None,
                 connection_status: Optional[str] = None,
                 connector_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 time_connection_status_last_updated: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if connection_failure_message is not None:
            pulumi.set(__self__, "connection_failure_message", connection_failure_message)
        if connection_infos is not None:
            pulumi.set(__self__, "connection_infos", connection_infos)
        if connection_status is not None:
            pulumi.set(__self__, "connection_status", connection_status)
        if connector_type is not None:
            pulumi.set(__self__, "connector_type", connector_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if time_connection_status_last_updated is not None:
            pulumi.set(__self__, "time_connection_status_last_updated", time_connection_status_last_updated)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectionFailureMessage")
    def connection_failure_message(self) -> Optional[str]:
        return pulumi.get(self, "connection_failure_message")

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoResult']]:
        return pulumi.get(self, "connection_infos")

    @property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> Optional[str]:
        return pulumi.get(self, "connection_status")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> Optional[str]:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="timeConnectionStatusLastUpdated")
    def time_connection_status_last_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_connection_status_last_updated")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoResult(dict):
    def __init__(__self__, *,
                 component_type: Optional[str] = None,
                 connection_credentials: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoConnectionCredentialResult']] = None,
                 connection_strings: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoConnectionStringResult']] = None):
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connection_credentials is not None:
            pulumi.set(__self__, "connection_credentials", connection_credentials)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="connectionCredentials")
    def connection_credentials(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoConnectionCredentialResult']]:
        return pulumi.get(self, "connection_credentials")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoConnectionStringResult']]:
        return pulumi.get(self, "connection_strings")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoConnectionCredentialResult(dict):
    def __init__(__self__, *,
                 credential_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentConnectorConnectionInfoConnectionStringResult(dict):
    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentEndpointResult(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 key: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 services: Optional[Sequence[str]] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if services is not None:
            pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "services")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 network_number: Optional[int] = None,
                 network_type: Optional[str] = None,
                 subnet: Optional[str] = None):
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 connectors: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorResult']] = None,
                 container_database_id: Optional[str] = None,
                 guid: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connectors is not None:
            pulumi.set(__self__, "connectors", connectors)
        if container_database_id is not None:
            pulumi.set(__self__, "container_database_id", container_database_id)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def connectors(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorResult']]:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter(name="containerDatabaseId")
    def container_database_id(self) -> Optional[str]:
        return pulumi.get(self, "container_database_id")

    @property
    @pulumi.getter
    def guid(self) -> Optional[str]:
        return pulumi.get(self, "guid")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorResult(dict):
    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 connection_failure_message: Optional[str] = None,
                 connection_infos: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoResult']] = None,
                 connection_status: Optional[str] = None,
                 connector_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 time_connection_status_last_updated: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if connection_failure_message is not None:
            pulumi.set(__self__, "connection_failure_message", connection_failure_message)
        if connection_infos is not None:
            pulumi.set(__self__, "connection_infos", connection_infos)
        if connection_status is not None:
            pulumi.set(__self__, "connection_status", connection_status)
        if connector_type is not None:
            pulumi.set(__self__, "connector_type", connector_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if time_connection_status_last_updated is not None:
            pulumi.set(__self__, "time_connection_status_last_updated", time_connection_status_last_updated)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectionFailureMessage")
    def connection_failure_message(self) -> Optional[str]:
        return pulumi.get(self, "connection_failure_message")

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoResult']]:
        return pulumi.get(self, "connection_infos")

    @property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> Optional[str]:
        return pulumi.get(self, "connection_status")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> Optional[str]:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="timeConnectionStatusLastUpdated")
    def time_connection_status_last_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_connection_status_last_updated")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoResult(dict):
    def __init__(__self__, *,
                 component_type: Optional[str] = None,
                 connection_credentials: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredentialResult']] = None,
                 connection_strings: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionStringResult']] = None):
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connection_credentials is not None:
            pulumi.set(__self__, "connection_credentials", connection_credentials)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="connectionCredentials")
    def connection_credentials(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredentialResult']]:
        return pulumi.get(self, "connection_credentials")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionStringResult']]:
        return pulumi.get(self, "connection_strings")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredentialResult(dict):
    def __init__(__self__, *,
                 credential_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionStringResult(dict):
    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentScanConfigurationResult(dict):
    def __init__(__self__, *,
                 network_number: Optional[int] = None,
                 scan_name: Optional[str] = None,
                 scan_port: Optional[int] = None,
                 scan_protocol: Optional[str] = None):
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if scan_name is not None:
            pulumi.set(__self__, "scan_name", scan_name)
        if scan_port is not None:
            pulumi.set(__self__, "scan_port", scan_port)
        if scan_protocol is not None:
            pulumi.set(__self__, "scan_protocol", scan_protocol)

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="scanName")
    def scan_name(self) -> Optional[str]:
        return pulumi.get(self, "scan_name")

    @property
    @pulumi.getter(name="scanPort")
    def scan_port(self) -> Optional[int]:
        return pulumi.get(self, "scan_port")

    @property
    @pulumi.getter(name="scanProtocol")
    def scan_protocol(self) -> Optional[str]:
        return pulumi.get(self, "scan_protocol")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemDiscoveredComponentVipConfigurationResult(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 network_number: Optional[int] = None,
                 node_name: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[str]:
        return pulumi.get(self, "node_name")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationResult(dict):
    def __init__(__self__, *,
                 operation: Optional[str] = None,
                 selection: Optional[str] = None,
                 values: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueResult']] = None):
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if selection is not None:
            pulumi.set(__self__, "selection", selection)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operation(self) -> Optional[str]:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def selection(self) -> Optional[str]:
        return pulumi.get(self, "selection")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueResult']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 connectors: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorResult']] = None,
                 display_name: Optional[str] = None,
                 is_selected_for_monitoring: Optional[bool] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connectors is not None:
            pulumi.set(__self__, "connectors", connectors)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_selected_for_monitoring is not None:
            pulumi.set(__self__, "is_selected_for_monitoring", is_selected_for_monitoring)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def connectors(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorResult']]:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isSelectedForMonitoring")
    def is_selected_for_monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "is_selected_for_monitoring")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorResult(dict):
    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 connection_infos: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoResult']] = None,
                 connector_type: Optional[str] = None,
                 display_name: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if connection_infos is not None:
            pulumi.set(__self__, "connection_infos", connection_infos)
        if connector_type is not None:
            pulumi.set(__self__, "connector_type", connector_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoResult']]:
        return pulumi.get(self, "connection_infos")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> Optional[str]:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoResult(dict):
    def __init__(__self__, *,
                 component_type: Optional[str] = None,
                 connection_credentials: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoConnectionCredentialResult']] = None,
                 connection_strings: Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoConnectionStringResult']] = None):
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connection_credentials is not None:
            pulumi.set(__self__, "connection_credentials", connection_credentials)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="connectionCredentials")
    def connection_credentials(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoConnectionCredentialResult']]:
        return pulumi.get(self, "connection_credentials")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoConnectionStringResult']]:
        return pulumi.get(self, "connection_strings")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoConnectionCredentialResult(dict):
    def __init__(__self__, *,
                 credential_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesExternalDbSystemDiscoveryCollectionItemPatchOperationValueConnectorConnectionInfoConnectionStringResult(dict):
    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class GetExternalDbSystemDiscoveriesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentResult(dict):
    def __init__(__self__, *,
                 adr_home_directory: Optional[str] = None,
                 asm_instances: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentAsmInstanceResult']] = None,
                 associated_components: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponentResult']] = None,
                 cluster_id: Optional[str] = None,
                 cluster_instances: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceResult']] = None,
                 compartment_id: Optional[str] = None,
                 component_id: Optional[str] = None,
                 component_name: Optional[str] = None,
                 component_type: Optional[str] = None,
                 connectors: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentConnectorResult']] = None,
                 container_database_id: Optional[str] = None,
                 cpu_core_count: Optional[float] = None,
                 crs_base_directory: Optional[str] = None,
                 db_edition: Optional[str] = None,
                 db_id: Optional[str] = None,
                 db_node_name: Optional[str] = None,
                 db_packs: Optional[str] = None,
                 db_role: Optional[str] = None,
                 db_type: Optional[str] = None,
                 db_unique_name: Optional[str] = None,
                 db_version: Optional[str] = None,
                 display_name: Optional[str] = None,
                 endpoints: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentEndpointResult']] = None,
                 grid_home: Optional[str] = None,
                 guid: Optional[str] = None,
                 home_directory: Optional[str] = None,
                 host_name: Optional[str] = None,
                 instance_name: Optional[str] = None,
                 is_cluster: Optional[bool] = None,
                 is_flex_cluster: Optional[bool] = None,
                 is_flex_enabled: Optional[bool] = None,
                 is_selected_for_monitoring: Optional[bool] = None,
                 listener_alias: Optional[str] = None,
                 listener_type: Optional[str] = None,
                 log_directory: Optional[str] = None,
                 memory_size_in_gbs: Optional[float] = None,
                 network_configurations: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentNetworkConfigurationResult']] = None,
                 node_role: Optional[str] = None,
                 ocr_file_location: Optional[str] = None,
                 oracle_home: Optional[str] = None,
                 pluggable_databases: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseResult']] = None,
                 resource_id: Optional[str] = None,
                 scan_configurations: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentScanConfigurationResult']] = None,
                 status: Optional[str] = None,
                 trace_directory: Optional[str] = None,
                 version: Optional[str] = None,
                 vip_configurations: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentVipConfigurationResult']] = None):
        if adr_home_directory is not None:
            pulumi.set(__self__, "adr_home_directory", adr_home_directory)
        if asm_instances is not None:
            pulumi.set(__self__, "asm_instances", asm_instances)
        if associated_components is not None:
            pulumi.set(__self__, "associated_components", associated_components)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_instances is not None:
            pulumi.set(__self__, "cluster_instances", cluster_instances)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connectors is not None:
            pulumi.set(__self__, "connectors", connectors)
        if container_database_id is not None:
            pulumi.set(__self__, "container_database_id", container_database_id)
        if cpu_core_count is not None:
            pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        if crs_base_directory is not None:
            pulumi.set(__self__, "crs_base_directory", crs_base_directory)
        if db_edition is not None:
            pulumi.set(__self__, "db_edition", db_edition)
        if db_id is not None:
            pulumi.set(__self__, "db_id", db_id)
        if db_node_name is not None:
            pulumi.set(__self__, "db_node_name", db_node_name)
        if db_packs is not None:
            pulumi.set(__self__, "db_packs", db_packs)
        if db_role is not None:
            pulumi.set(__self__, "db_role", db_role)
        if db_type is not None:
            pulumi.set(__self__, "db_type", db_type)
        if db_unique_name is not None:
            pulumi.set(__self__, "db_unique_name", db_unique_name)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if grid_home is not None:
            pulumi.set(__self__, "grid_home", grid_home)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)
        if home_directory is not None:
            pulumi.set(__self__, "home_directory", home_directory)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if is_cluster is not None:
            pulumi.set(__self__, "is_cluster", is_cluster)
        if is_flex_cluster is not None:
            pulumi.set(__self__, "is_flex_cluster", is_flex_cluster)
        if is_flex_enabled is not None:
            pulumi.set(__self__, "is_flex_enabled", is_flex_enabled)
        if is_selected_for_monitoring is not None:
            pulumi.set(__self__, "is_selected_for_monitoring", is_selected_for_monitoring)
        if listener_alias is not None:
            pulumi.set(__self__, "listener_alias", listener_alias)
        if listener_type is not None:
            pulumi.set(__self__, "listener_type", listener_type)
        if log_directory is not None:
            pulumi.set(__self__, "log_directory", log_directory)
        if memory_size_in_gbs is not None:
            pulumi.set(__self__, "memory_size_in_gbs", memory_size_in_gbs)
        if network_configurations is not None:
            pulumi.set(__self__, "network_configurations", network_configurations)
        if node_role is not None:
            pulumi.set(__self__, "node_role", node_role)
        if ocr_file_location is not None:
            pulumi.set(__self__, "ocr_file_location", ocr_file_location)
        if oracle_home is not None:
            pulumi.set(__self__, "oracle_home", oracle_home)
        if pluggable_databases is not None:
            pulumi.set(__self__, "pluggable_databases", pluggable_databases)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if scan_configurations is not None:
            pulumi.set(__self__, "scan_configurations", scan_configurations)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trace_directory is not None:
            pulumi.set(__self__, "trace_directory", trace_directory)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vip_configurations is not None:
            pulumi.set(__self__, "vip_configurations", vip_configurations)

    @property
    @pulumi.getter(name="adrHomeDirectory")
    def adr_home_directory(self) -> Optional[str]:
        return pulumi.get(self, "adr_home_directory")

    @property
    @pulumi.getter(name="asmInstances")
    def asm_instances(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentAsmInstanceResult']]:
        return pulumi.get(self, "asm_instances")

    @property
    @pulumi.getter(name="associatedComponents")
    def associated_components(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponentResult']]:
        return pulumi.get(self, "associated_components")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterInstances")
    def cluster_instances(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceResult']]:
        return pulumi.get(self, "cluster_instances")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[str]:
        return pulumi.get(self, "component_id")

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[str]:
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter
    def connectors(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentConnectorResult']]:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter(name="containerDatabaseId")
    def container_database_id(self) -> Optional[str]:
        return pulumi.get(self, "container_database_id")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> Optional[float]:
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="crsBaseDirectory")
    def crs_base_directory(self) -> Optional[str]:
        return pulumi.get(self, "crs_base_directory")

    @property
    @pulumi.getter(name="dbEdition")
    def db_edition(self) -> Optional[str]:
        return pulumi.get(self, "db_edition")

    @property
    @pulumi.getter(name="dbId")
    def db_id(self) -> Optional[str]:
        return pulumi.get(self, "db_id")

    @property
    @pulumi.getter(name="dbNodeName")
    def db_node_name(self) -> Optional[str]:
        return pulumi.get(self, "db_node_name")

    @property
    @pulumi.getter(name="dbPacks")
    def db_packs(self) -> Optional[str]:
        return pulumi.get(self, "db_packs")

    @property
    @pulumi.getter(name="dbRole")
    def db_role(self) -> Optional[str]:
        return pulumi.get(self, "db_role")

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> Optional[str]:
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter(name="dbUniqueName")
    def db_unique_name(self) -> Optional[str]:
        return pulumi.get(self, "db_unique_name")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentEndpointResult']]:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="gridHome")
    def grid_home(self) -> Optional[str]:
        return pulumi.get(self, "grid_home")

    @property
    @pulumi.getter
    def guid(self) -> Optional[str]:
        return pulumi.get(self, "guid")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> Optional[str]:
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter(name="isFlexCluster")
    def is_flex_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "is_flex_cluster")

    @property
    @pulumi.getter(name="isFlexEnabled")
    def is_flex_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_flex_enabled")

    @property
    @pulumi.getter(name="isSelectedForMonitoring")
    def is_selected_for_monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "is_selected_for_monitoring")

    @property
    @pulumi.getter(name="listenerAlias")
    def listener_alias(self) -> Optional[str]:
        return pulumi.get(self, "listener_alias")

    @property
    @pulumi.getter(name="listenerType")
    def listener_type(self) -> Optional[str]:
        return pulumi.get(self, "listener_type")

    @property
    @pulumi.getter(name="logDirectory")
    def log_directory(self) -> Optional[str]:
        return pulumi.get(self, "log_directory")

    @property
    @pulumi.getter(name="memorySizeInGbs")
    def memory_size_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_size_in_gbs")

    @property
    @pulumi.getter(name="networkConfigurations")
    def network_configurations(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentNetworkConfigurationResult']]:
        return pulumi.get(self, "network_configurations")

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> Optional[str]:
        return pulumi.get(self, "node_role")

    @property
    @pulumi.getter(name="ocrFileLocation")
    def ocr_file_location(self) -> Optional[str]:
        return pulumi.get(self, "ocr_file_location")

    @property
    @pulumi.getter(name="oracleHome")
    def oracle_home(self) -> Optional[str]:
        return pulumi.get(self, "oracle_home")

    @property
    @pulumi.getter(name="pluggableDatabases")
    def pluggable_databases(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseResult']]:
        return pulumi.get(self, "pluggable_databases")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="scanConfigurations")
    def scan_configurations(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentScanConfigurationResult']]:
        return pulumi.get(self, "scan_configurations")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="traceDirectory")
    def trace_directory(self) -> Optional[str]:
        return pulumi.get(self, "trace_directory")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vipConfigurations")
    def vip_configurations(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentVipConfigurationResult']]:
        return pulumi.get(self, "vip_configurations")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentAsmInstanceResult(dict):
    def __init__(__self__, *,
                 adr_home_directory: Optional[str] = None,
                 host_name: Optional[str] = None,
                 instance_name: Optional[str] = None):
        if adr_home_directory is not None:
            pulumi.set(__self__, "adr_home_directory", adr_home_directory)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)

    @property
    @pulumi.getter(name="adrHomeDirectory")
    def adr_home_directory(self) -> Optional[str]:
        return pulumi.get(self, "adr_home_directory")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        return pulumi.get(self, "instance_name")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentAssociatedComponentResult(dict):
    def __init__(__self__, *,
                 association_type: Optional[str] = None,
                 component_id: Optional[str] = None,
                 component_type: Optional[str] = None):
        if association_type is not None:
            pulumi.set(__self__, "association_type", association_type)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)

    @property
    @pulumi.getter(name="associationType")
    def association_type(self) -> Optional[str]:
        return pulumi.get(self, "association_type")

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[str]:
        return pulumi.get(self, "component_id")

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceResult(dict):
    def __init__(__self__, *,
                 adr_home_directory: Optional[str] = None,
                 cluster_id: Optional[str] = None,
                 connectors: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorResult']] = None,
                 crs_base_directory: Optional[str] = None,
                 host_name: Optional[str] = None,
                 node_role: Optional[str] = None):
        if adr_home_directory is not None:
            pulumi.set(__self__, "adr_home_directory", adr_home_directory)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if connectors is not None:
            pulumi.set(__self__, "connectors", connectors)
        if crs_base_directory is not None:
            pulumi.set(__self__, "crs_base_directory", crs_base_directory)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if node_role is not None:
            pulumi.set(__self__, "node_role", node_role)

    @property
    @pulumi.getter(name="adrHomeDirectory")
    def adr_home_directory(self) -> Optional[str]:
        return pulumi.get(self, "adr_home_directory")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def connectors(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorResult']]:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter(name="crsBaseDirectory")
    def crs_base_directory(self) -> Optional[str]:
        return pulumi.get(self, "crs_base_directory")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> Optional[str]:
        return pulumi.get(self, "node_role")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorResult(dict):
    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 connection_failure_message: Optional[str] = None,
                 connection_infos: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoResult']] = None,
                 connection_status: Optional[str] = None,
                 connector_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 time_connection_status_last_updated: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if connection_failure_message is not None:
            pulumi.set(__self__, "connection_failure_message", connection_failure_message)
        if connection_infos is not None:
            pulumi.set(__self__, "connection_infos", connection_infos)
        if connection_status is not None:
            pulumi.set(__self__, "connection_status", connection_status)
        if connector_type is not None:
            pulumi.set(__self__, "connector_type", connector_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if time_connection_status_last_updated is not None:
            pulumi.set(__self__, "time_connection_status_last_updated", time_connection_status_last_updated)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectionFailureMessage")
    def connection_failure_message(self) -> Optional[str]:
        return pulumi.get(self, "connection_failure_message")

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoResult']]:
        return pulumi.get(self, "connection_infos")

    @property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> Optional[str]:
        return pulumi.get(self, "connection_status")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> Optional[str]:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="timeConnectionStatusLastUpdated")
    def time_connection_status_last_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_connection_status_last_updated")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoResult(dict):
    def __init__(__self__, *,
                 component_type: Optional[str] = None,
                 connection_credentials: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredentialResult']] = None,
                 connection_strings: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionStringResult']] = None):
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connection_credentials is not None:
            pulumi.set(__self__, "connection_credentials", connection_credentials)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="connectionCredentials")
    def connection_credentials(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredentialResult']]:
        return pulumi.get(self, "connection_credentials")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionStringResult']]:
        return pulumi.get(self, "connection_strings")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionCredentialResult(dict):
    def __init__(__self__, *,
                 credential_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentClusterInstanceConnectorConnectionInfoConnectionStringResult(dict):
    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentConnectorResult(dict):
    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 connection_failure_message: Optional[str] = None,
                 connection_infos: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoResult']] = None,
                 connection_status: Optional[str] = None,
                 connector_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 time_connection_status_last_updated: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if connection_failure_message is not None:
            pulumi.set(__self__, "connection_failure_message", connection_failure_message)
        if connection_infos is not None:
            pulumi.set(__self__, "connection_infos", connection_infos)
        if connection_status is not None:
            pulumi.set(__self__, "connection_status", connection_status)
        if connector_type is not None:
            pulumi.set(__self__, "connector_type", connector_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if time_connection_status_last_updated is not None:
            pulumi.set(__self__, "time_connection_status_last_updated", time_connection_status_last_updated)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectionFailureMessage")
    def connection_failure_message(self) -> Optional[str]:
        return pulumi.get(self, "connection_failure_message")

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoResult']]:
        return pulumi.get(self, "connection_infos")

    @property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> Optional[str]:
        return pulumi.get(self, "connection_status")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> Optional[str]:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="timeConnectionStatusLastUpdated")
    def time_connection_status_last_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_connection_status_last_updated")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoResult(dict):
    def __init__(__self__, *,
                 component_type: Optional[str] = None,
                 connection_credentials: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionCredentialResult']] = None,
                 connection_strings: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionStringResult']] = None):
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connection_credentials is not None:
            pulumi.set(__self__, "connection_credentials", connection_credentials)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="connectionCredentials")
    def connection_credentials(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionCredentialResult']]:
        return pulumi.get(self, "connection_credentials")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionStringResult']]:
        return pulumi.get(self, "connection_strings")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionCredentialResult(dict):
    def __init__(__self__, *,
                 credential_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentConnectorConnectionInfoConnectionStringResult(dict):
    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentEndpointResult(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 key: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 services: Optional[Sequence[str]] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if services is not None:
            pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "services")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 network_number: Optional[int] = None,
                 network_type: Optional[str] = None,
                 subnet: Optional[str] = None):
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 connectors: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorResult']] = None,
                 container_database_id: Optional[str] = None,
                 guid: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connectors is not None:
            pulumi.set(__self__, "connectors", connectors)
        if container_database_id is not None:
            pulumi.set(__self__, "container_database_id", container_database_id)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def connectors(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorResult']]:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter(name="containerDatabaseId")
    def container_database_id(self) -> Optional[str]:
        return pulumi.get(self, "container_database_id")

    @property
    @pulumi.getter
    def guid(self) -> Optional[str]:
        return pulumi.get(self, "guid")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorResult(dict):
    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 connection_failure_message: Optional[str] = None,
                 connection_infos: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoResult']] = None,
                 connection_status: Optional[str] = None,
                 connector_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 time_connection_status_last_updated: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if connection_failure_message is not None:
            pulumi.set(__self__, "connection_failure_message", connection_failure_message)
        if connection_infos is not None:
            pulumi.set(__self__, "connection_infos", connection_infos)
        if connection_status is not None:
            pulumi.set(__self__, "connection_status", connection_status)
        if connector_type is not None:
            pulumi.set(__self__, "connector_type", connector_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if time_connection_status_last_updated is not None:
            pulumi.set(__self__, "time_connection_status_last_updated", time_connection_status_last_updated)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectionFailureMessage")
    def connection_failure_message(self) -> Optional[str]:
        return pulumi.get(self, "connection_failure_message")

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoResult']]:
        return pulumi.get(self, "connection_infos")

    @property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> Optional[str]:
        return pulumi.get(self, "connection_status")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> Optional[str]:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="timeConnectionStatusLastUpdated")
    def time_connection_status_last_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_connection_status_last_updated")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoResult(dict):
    def __init__(__self__, *,
                 component_type: Optional[str] = None,
                 connection_credentials: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredentialResult']] = None,
                 connection_strings: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionStringResult']] = None):
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connection_credentials is not None:
            pulumi.set(__self__, "connection_credentials", connection_credentials)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="connectionCredentials")
    def connection_credentials(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredentialResult']]:
        return pulumi.get(self, "connection_credentials")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionStringResult']]:
        return pulumi.get(self, "connection_strings")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionCredentialResult(dict):
    def __init__(__self__, *,
                 credential_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentPluggableDatabaseConnectorConnectionInfoConnectionStringResult(dict):
    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentScanConfigurationResult(dict):
    def __init__(__self__, *,
                 network_number: Optional[int] = None,
                 scan_name: Optional[str] = None,
                 scan_port: Optional[int] = None,
                 scan_protocol: Optional[str] = None):
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if scan_name is not None:
            pulumi.set(__self__, "scan_name", scan_name)
        if scan_port is not None:
            pulumi.set(__self__, "scan_port", scan_port)
        if scan_protocol is not None:
            pulumi.set(__self__, "scan_protocol", scan_protocol)

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="scanName")
    def scan_name(self) -> Optional[str]:
        return pulumi.get(self, "scan_name")

    @property
    @pulumi.getter(name="scanPort")
    def scan_port(self) -> Optional[int]:
        return pulumi.get(self, "scan_port")

    @property
    @pulumi.getter(name="scanProtocol")
    def scan_protocol(self) -> Optional[str]:
        return pulumi.get(self, "scan_protocol")


@pulumi.output_type
class GetExternalDbSystemDiscoveryDiscoveredComponentVipConfigurationResult(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 network_number: Optional[int] = None,
                 node_name: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if network_number is not None:
            pulumi.set(__self__, "network_number", network_number)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="networkNumber")
    def network_number(self) -> Optional[int]:
        return pulumi.get(self, "network_number")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[str]:
        return pulumi.get(self, "node_name")


@pulumi.output_type
class GetExternalDbSystemDiscoveryPatchOperationResult(dict):
    def __init__(__self__, *,
                 operation: Optional[str] = None,
                 selection: Optional[str] = None,
                 values: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryPatchOperationValueResult']] = None):
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if selection is not None:
            pulumi.set(__self__, "selection", selection)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operation(self) -> Optional[str]:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def selection(self) -> Optional[str]:
        return pulumi.get(self, "selection")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryPatchOperationValueResult']]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetExternalDbSystemDiscoveryPatchOperationValueResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 connectors: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryPatchOperationValueConnectorResult']] = None,
                 display_name: Optional[str] = None,
                 is_selected_for_monitoring: Optional[bool] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connectors is not None:
            pulumi.set(__self__, "connectors", connectors)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_selected_for_monitoring is not None:
            pulumi.set(__self__, "is_selected_for_monitoring", is_selected_for_monitoring)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def connectors(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryPatchOperationValueConnectorResult']]:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isSelectedForMonitoring")
    def is_selected_for_monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "is_selected_for_monitoring")


@pulumi.output_type
class GetExternalDbSystemDiscoveryPatchOperationValueConnectorResult(dict):
    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 connection_infos: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoResult']] = None,
                 connector_type: Optional[str] = None,
                 display_name: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if connection_infos is not None:
            pulumi.set(__self__, "connection_infos", connection_infos)
        if connector_type is not None:
            pulumi.set(__self__, "connector_type", connector_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectionInfos")
    def connection_infos(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoResult']]:
        return pulumi.get(self, "connection_infos")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> Optional[str]:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoResult(dict):
    def __init__(__self__, *,
                 component_type: Optional[str] = None,
                 connection_credentials: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionCredentialResult']] = None,
                 connection_strings: Optional[Sequence['outputs.GetExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionStringResult']] = None):
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if connection_credentials is not None:
            pulumi.set(__self__, "connection_credentials", connection_credentials)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="connectionCredentials")
    def connection_credentials(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionCredentialResult']]:
        return pulumi.get(self, "connection_credentials")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.GetExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionStringResult']]:
        return pulumi.get(self, "connection_strings")


@pulumi.output_type
class GetExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionCredentialResult(dict):
    def __init__(__self__, *,
                 credential_name: Optional[str] = None,
                 credential_type: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 role: Optional[str] = None,
                 ssl_secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        if credential_name is not None:
            pulumi.set(__self__, "credential_name", credential_name)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if ssl_secret_id is not None:
            pulumi.set(__self__, "ssl_secret_id", ssl_secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="credentialName")
    def credential_name(self) -> Optional[str]:
        return pulumi.get(self, "credential_name")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[str]:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sslSecretId")
    def ssl_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetExternalDbSystemDiscoveryPatchOperationValueConnectorConnectionInfoConnectionStringResult(dict):
    def __init__(__self__, *,
                 host_name: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 service: Optional[str] = None):
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class GetExternalDbSystemStackMonitoringConfigResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 metadata: Optional[str] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[str]:
        return pulumi.get(self, "metadata")


@pulumi.output_type
class GetExternalDbSystemsExternalDbSystemCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalDbSystemsExternalDbSystemCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalDbSystemsExternalDbSystemCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalDbSystemsExternalDbSystemCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 database_management_configs: Optional[Sequence['outputs.GetExternalDbSystemsExternalDbSystemCollectionItemDatabaseManagementConfigResult']] = None,
                 db_system_discovery_id: Optional[str] = None,
                 discovery_agent_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 home_directory: Optional[str] = None,
                 id: Optional[str] = None,
                 is_cluster: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 stack_monitoring_configs: Optional[Sequence['outputs.GetExternalDbSystemsExternalDbSystemCollectionItemStackMonitoringConfigResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_management_configs is not None:
            pulumi.set(__self__, "database_management_configs", database_management_configs)
        if db_system_discovery_id is not None:
            pulumi.set(__self__, "db_system_discovery_id", db_system_discovery_id)
        if discovery_agent_id is not None:
            pulumi.set(__self__, "discovery_agent_id", discovery_agent_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if home_directory is not None:
            pulumi.set(__self__, "home_directory", home_directory)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_cluster is not None:
            pulumi.set(__self__, "is_cluster", is_cluster)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if stack_monitoring_configs is not None:
            pulumi.set(__self__, "stack_monitoring_configs", stack_monitoring_configs)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseManagementConfigs")
    def database_management_configs(self) -> Optional[Sequence['outputs.GetExternalDbSystemsExternalDbSystemCollectionItemDatabaseManagementConfigResult']]:
        return pulumi.get(self, "database_management_configs")

    @property
    @pulumi.getter(name="dbSystemDiscoveryId")
    def db_system_discovery_id(self) -> Optional[str]:
        return pulumi.get(self, "db_system_discovery_id")

    @property
    @pulumi.getter(name="discoveryAgentId")
    def discovery_agent_id(self) -> Optional[str]:
        return pulumi.get(self, "discovery_agent_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> Optional[str]:
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="stackMonitoringConfigs")
    def stack_monitoring_configs(self) -> Optional[Sequence['outputs.GetExternalDbSystemsExternalDbSystemCollectionItemStackMonitoringConfigResult']]:
        return pulumi.get(self, "stack_monitoring_configs")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetExternalDbSystemsExternalDbSystemCollectionItemDatabaseManagementConfigResult(dict):
    def __init__(__self__, *,
                 license_model: Optional[str] = None):
        if license_model is not None:
            pulumi.set(__self__, "license_model", license_model)

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> Optional[str]:
        return pulumi.get(self, "license_model")


@pulumi.output_type
class GetExternalDbSystemsExternalDbSystemCollectionItemStackMonitoringConfigResult(dict):
    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 metadata: Optional[str] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[str]:
        return pulumi.get(self, "metadata")


@pulumi.output_type
class GetExternalDbSystemsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalExadataInfrastructureDatabaseSystemResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 compartment_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 internal_id: Optional[str] = None,
                 license_model: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if license_model is not None:
            pulumi.set(__self__, "license_model", license_model)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[str]:
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> Optional[str]:
        return pulumi.get(self, "license_model")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetExternalExadataInfrastructureStorageGridResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 internal_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 server_count: Optional[float] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if server_count is not None:
            pulumi.set(__self__, "server_count", server_count)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[str]:
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="serverCount")
    def server_count(self) -> Optional[float]:
        return pulumi.get(self, "server_count")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 compartment_id: Optional[str] = None,
                 database_compartments: Optional[Sequence[str]] = None,
                 database_systems: Optional[Sequence['outputs.GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemDatabaseSystemResult']] = None,
                 db_system_ids: Optional[Sequence[str]] = None,
                 discovery_key: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 internal_id: Optional[str] = None,
                 license_model: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 rack_size: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 storage_grids: Optional[Sequence['outputs.GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemStorageGridResult']] = None,
                 storage_server_names: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_compartments is not None:
            pulumi.set(__self__, "database_compartments", database_compartments)
        if database_systems is not None:
            pulumi.set(__self__, "database_systems", database_systems)
        if db_system_ids is not None:
            pulumi.set(__self__, "db_system_ids", db_system_ids)
        if discovery_key is not None:
            pulumi.set(__self__, "discovery_key", discovery_key)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if license_model is not None:
            pulumi.set(__self__, "license_model", license_model)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if rack_size is not None:
            pulumi.set(__self__, "rack_size", rack_size)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage_grids is not None:
            pulumi.set(__self__, "storage_grids", storage_grids)
        if storage_server_names is not None:
            pulumi.set(__self__, "storage_server_names", storage_server_names)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseCompartments")
    def database_compartments(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "database_compartments")

    @property
    @pulumi.getter(name="databaseSystems")
    def database_systems(self) -> Optional[Sequence['outputs.GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemDatabaseSystemResult']]:
        return pulumi.get(self, "database_systems")

    @property
    @pulumi.getter(name="dbSystemIds")
    def db_system_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_system_ids")

    @property
    @pulumi.getter(name="discoveryKey")
    def discovery_key(self) -> Optional[str]:
        return pulumi.get(self, "discovery_key")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[str]:
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> Optional[str]:
        return pulumi.get(self, "license_model")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="rackSize")
    def rack_size(self) -> Optional[str]:
        return pulumi.get(self, "rack_size")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageGrids")
    def storage_grids(self) -> Optional[Sequence['outputs.GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemStorageGridResult']]:
        return pulumi.get(self, "storage_grids")

    @property
    @pulumi.getter(name="storageServerNames")
    def storage_server_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "storage_server_names")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemDatabaseSystemResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 compartment_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 internal_id: Optional[str] = None,
                 license_model: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if license_model is not None:
            pulumi.set(__self__, "license_model", license_model)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[str]:
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> Optional[str]:
        return pulumi.get(self, "license_model")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetExternalExadataInfrastructuresExternalExadataInfrastructureCollectionItemStorageGridResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 internal_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 server_count: Optional[float] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if server_count is not None:
            pulumi.set(__self__, "server_count", server_count)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[str]:
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="serverCount")
    def server_count(self) -> Optional[float]:
        return pulumi.get(self, "server_count")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetExternalExadataInfrastructuresFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalExadataStorageConnectorCredentialInfoResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 ssl_trust_store_location: Optional[str] = None,
                 ssl_trust_store_password: Optional[str] = None,
                 ssl_trust_store_type: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssl_trust_store_location is not None:
            pulumi.set(__self__, "ssl_trust_store_location", ssl_trust_store_location)
        if ssl_trust_store_password is not None:
            pulumi.set(__self__, "ssl_trust_store_password", ssl_trust_store_password)
        if ssl_trust_store_type is not None:
            pulumi.set(__self__, "ssl_trust_store_type", ssl_trust_store_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sslTrustStoreLocation")
    def ssl_trust_store_location(self) -> Optional[str]:
        return pulumi.get(self, "ssl_trust_store_location")

    @property
    @pulumi.getter(name="sslTrustStorePassword")
    def ssl_trust_store_password(self) -> Optional[str]:
        return pulumi.get(self, "ssl_trust_store_password")

    @property
    @pulumi.getter(name="sslTrustStoreType")
    def ssl_trust_store_type(self) -> Optional[str]:
        return pulumi.get(self, "ssl_trust_store_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 agent_id: Optional[str] = None,
                 connection_uri: Optional[str] = None,
                 connector_name: Optional[str] = None,
                 credential_infos: Optional[Sequence['outputs.GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfoResult']] = None,
                 display_name: Optional[str] = None,
                 exadata_infrastructure_id: Optional[str] = None,
                 id: Optional[str] = None,
                 internal_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 storage_server_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if connection_uri is not None:
            pulumi.set(__self__, "connection_uri", connection_uri)
        if connector_name is not None:
            pulumi.set(__self__, "connector_name", connector_name)
        if credential_infos is not None:
            pulumi.set(__self__, "credential_infos", credential_infos)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if exadata_infrastructure_id is not None:
            pulumi.set(__self__, "exadata_infrastructure_id", exadata_infrastructure_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage_server_id is not None:
            pulumi.set(__self__, "storage_server_id", storage_server_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectionUri")
    def connection_uri(self) -> Optional[str]:
        return pulumi.get(self, "connection_uri")

    @property
    @pulumi.getter(name="connectorName")
    def connector_name(self) -> Optional[str]:
        return pulumi.get(self, "connector_name")

    @property
    @pulumi.getter(name="credentialInfos")
    def credential_infos(self) -> Optional[Sequence['outputs.GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfoResult']]:
        return pulumi.get(self, "credential_infos")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="exadataInfrastructureId")
    def exadata_infrastructure_id(self) -> Optional[str]:
        return pulumi.get(self, "exadata_infrastructure_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[str]:
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageServerId")
    def storage_server_id(self) -> Optional[str]:
        return pulumi.get(self, "storage_server_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetExternalExadataStorageConnectorsExternalExadataStorageConnectorCollectionItemCredentialInfoResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 ssl_trust_store_location: Optional[str] = None,
                 ssl_trust_store_password: Optional[str] = None,
                 ssl_trust_store_type: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssl_trust_store_location is not None:
            pulumi.set(__self__, "ssl_trust_store_location", ssl_trust_store_location)
        if ssl_trust_store_password is not None:
            pulumi.set(__self__, "ssl_trust_store_password", ssl_trust_store_password)
        if ssl_trust_store_type is not None:
            pulumi.set(__self__, "ssl_trust_store_type", ssl_trust_store_type)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sslTrustStoreLocation")
    def ssl_trust_store_location(self) -> Optional[str]:
        return pulumi.get(self, "ssl_trust_store_location")

    @property
    @pulumi.getter(name="sslTrustStorePassword")
    def ssl_trust_store_password(self) -> Optional[str]:
        return pulumi.get(self, "ssl_trust_store_password")

    @property
    @pulumi.getter(name="sslTrustStoreType")
    def ssl_trust_store_type(self) -> Optional[str]:
        return pulumi.get(self, "ssl_trust_store_type")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetExternalExadataStorageConnectorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalExadataStorageGridStorageServerResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 connector_id: Optional[str] = None,
                 cpu_count: Optional[float] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 internal_id: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 make_model: Optional[str] = None,
                 max_flash_disk_iops: Optional[int] = None,
                 max_flash_disk_throughput: Optional[int] = None,
                 max_hard_disk_iops: Optional[int] = None,
                 max_hard_disk_throughput: Optional[int] = None,
                 memory_gb: Optional[float] = None,
                 resource_type: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if cpu_count is not None:
            pulumi.set(__self__, "cpu_count", cpu_count)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if make_model is not None:
            pulumi.set(__self__, "make_model", make_model)
        if max_flash_disk_iops is not None:
            pulumi.set(__self__, "max_flash_disk_iops", max_flash_disk_iops)
        if max_flash_disk_throughput is not None:
            pulumi.set(__self__, "max_flash_disk_throughput", max_flash_disk_throughput)
        if max_hard_disk_iops is not None:
            pulumi.set(__self__, "max_hard_disk_iops", max_hard_disk_iops)
        if max_hard_disk_throughput is not None:
            pulumi.set(__self__, "max_hard_disk_throughput", max_hard_disk_throughput)
        if memory_gb is not None:
            pulumi.set(__self__, "memory_gb", memory_gb)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[str]:
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[float]:
        return pulumi.get(self, "cpu_count")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[str]:
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="makeModel")
    def make_model(self) -> Optional[str]:
        return pulumi.get(self, "make_model")

    @property
    @pulumi.getter(name="maxFlashDiskIops")
    def max_flash_disk_iops(self) -> Optional[int]:
        return pulumi.get(self, "max_flash_disk_iops")

    @property
    @pulumi.getter(name="maxFlashDiskThroughput")
    def max_flash_disk_throughput(self) -> Optional[int]:
        return pulumi.get(self, "max_flash_disk_throughput")

    @property
    @pulumi.getter(name="maxHardDiskIops")
    def max_hard_disk_iops(self) -> Optional[int]:
        return pulumi.get(self, "max_hard_disk_iops")

    @property
    @pulumi.getter(name="maxHardDiskThroughput")
    def max_hard_disk_throughput(self) -> Optional[int]:
        return pulumi.get(self, "max_hard_disk_throughput")

    @property
    @pulumi.getter(name="memoryGb")
    def memory_gb(self) -> Optional[float]:
        return pulumi.get(self, "memory_gb")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetExternalExadataStorageServerConnectorResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 agent_id: Optional[str] = None,
                 connection_uri: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 internal_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 storage_server_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if connection_uri is not None:
            pulumi.set(__self__, "connection_uri", connection_uri)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage_server_id is not None:
            pulumi.set(__self__, "storage_server_id", storage_server_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectionUri")
    def connection_uri(self) -> Optional[str]:
        return pulumi.get(self, "connection_uri")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[str]:
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageServerId")
    def storage_server_id(self) -> Optional[str]:
        return pulumi.get(self, "storage_server_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetExternalExadataStorageServerIormPlanDbPlanResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalExadataStorageServerIormPlanDbPlanItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalExadataStorageServerIormPlanDbPlanItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalExadataStorageServerIormPlanDbPlanItemResult(dict):
    def __init__(__self__, *,
                 allocation: Optional[int] = None,
                 asm_cluster: Optional[str] = None,
                 flash_cache_limit: Optional[str] = None,
                 flash_cache_min: Optional[str] = None,
                 flash_cache_size: Optional[str] = None,
                 is_flash_cache_on: Optional[bool] = None,
                 is_flash_log_on: Optional[bool] = None,
                 is_pmem_cache_on: Optional[bool] = None,
                 is_pmem_log_on: Optional[bool] = None,
                 level: Optional[int] = None,
                 limit: Optional[int] = None,
                 name: Optional[str] = None,
                 pmem_cache_limit: Optional[str] = None,
                 pmem_cache_min: Optional[str] = None,
                 pmem_cache_size: Optional[str] = None,
                 role: Optional[str] = None,
                 share: Optional[int] = None,
                 type: Optional[str] = None):
        if allocation is not None:
            pulumi.set(__self__, "allocation", allocation)
        if asm_cluster is not None:
            pulumi.set(__self__, "asm_cluster", asm_cluster)
        if flash_cache_limit is not None:
            pulumi.set(__self__, "flash_cache_limit", flash_cache_limit)
        if flash_cache_min is not None:
            pulumi.set(__self__, "flash_cache_min", flash_cache_min)
        if flash_cache_size is not None:
            pulumi.set(__self__, "flash_cache_size", flash_cache_size)
        if is_flash_cache_on is not None:
            pulumi.set(__self__, "is_flash_cache_on", is_flash_cache_on)
        if is_flash_log_on is not None:
            pulumi.set(__self__, "is_flash_log_on", is_flash_log_on)
        if is_pmem_cache_on is not None:
            pulumi.set(__self__, "is_pmem_cache_on", is_pmem_cache_on)
        if is_pmem_log_on is not None:
            pulumi.set(__self__, "is_pmem_log_on", is_pmem_log_on)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pmem_cache_limit is not None:
            pulumi.set(__self__, "pmem_cache_limit", pmem_cache_limit)
        if pmem_cache_min is not None:
            pulumi.set(__self__, "pmem_cache_min", pmem_cache_min)
        if pmem_cache_size is not None:
            pulumi.set(__self__, "pmem_cache_size", pmem_cache_size)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if share is not None:
            pulumi.set(__self__, "share", share)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def allocation(self) -> Optional[int]:
        return pulumi.get(self, "allocation")

    @property
    @pulumi.getter(name="asmCluster")
    def asm_cluster(self) -> Optional[str]:
        return pulumi.get(self, "asm_cluster")

    @property
    @pulumi.getter(name="flashCacheLimit")
    def flash_cache_limit(self) -> Optional[str]:
        return pulumi.get(self, "flash_cache_limit")

    @property
    @pulumi.getter(name="flashCacheMin")
    def flash_cache_min(self) -> Optional[str]:
        return pulumi.get(self, "flash_cache_min")

    @property
    @pulumi.getter(name="flashCacheSize")
    def flash_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "flash_cache_size")

    @property
    @pulumi.getter(name="isFlashCacheOn")
    def is_flash_cache_on(self) -> Optional[bool]:
        return pulumi.get(self, "is_flash_cache_on")

    @property
    @pulumi.getter(name="isFlashLogOn")
    def is_flash_log_on(self) -> Optional[bool]:
        return pulumi.get(self, "is_flash_log_on")

    @property
    @pulumi.getter(name="isPmemCacheOn")
    def is_pmem_cache_on(self) -> Optional[bool]:
        return pulumi.get(self, "is_pmem_cache_on")

    @property
    @pulumi.getter(name="isPmemLogOn")
    def is_pmem_log_on(self) -> Optional[bool]:
        return pulumi.get(self, "is_pmem_log_on")

    @property
    @pulumi.getter
    def level(self) -> Optional[int]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pmemCacheLimit")
    def pmem_cache_limit(self) -> Optional[str]:
        return pulumi.get(self, "pmem_cache_limit")

    @property
    @pulumi.getter(name="pmemCacheMin")
    def pmem_cache_min(self) -> Optional[str]:
        return pulumi.get(self, "pmem_cache_min")

    @property
    @pulumi.getter(name="pmemCacheSize")
    def pmem_cache_size(self) -> Optional[str]:
        return pulumi.get(self, "pmem_cache_size")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def share(self) -> Optional[int]:
        return pulumi.get(self, "share")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetExternalExadataStorageServerOpenAlertHistoryAlertResult(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 severity: Optional[str] = None,
                 time_start_at: Optional[str] = None,
                 type: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if time_start_at is not None:
            pulumi.set(__self__, "time_start_at", time_start_at)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="timeStartAt")
    def time_start_at(self) -> Optional[str]:
        return pulumi.get(self, "time_start_at")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetExternalExadataStorageServerTopSqlCpuActivityActivityResult(dict):
    def __init__(__self__, *,
                 cpu_activity: Optional[float] = None,
                 database_name: Optional[str] = None,
                 sql_id: Optional[str] = None):
        if cpu_activity is not None:
            pulumi.set(__self__, "cpu_activity", cpu_activity)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if sql_id is not None:
            pulumi.set(__self__, "sql_id", sql_id)

    @property
    @pulumi.getter(name="cpuActivity")
    def cpu_activity(self) -> Optional[float]:
        return pulumi.get(self, "cpu_activity")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="sqlId")
    def sql_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_id")


@pulumi.output_type
class GetExternalExadataStorageServersExternalExadataStorageServerCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalExadataStorageServersExternalExadataStorageServerCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalExadataStorageServersExternalExadataStorageServerCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalExadataStorageServersExternalExadataStorageServerCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 connector_id: Optional[str] = None,
                 cpu_count: Optional[float] = None,
                 display_name: Optional[str] = None,
                 exadata_infrastructure_id: Optional[str] = None,
                 id: Optional[str] = None,
                 internal_id: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 make_model: Optional[str] = None,
                 max_flash_disk_iops: Optional[int] = None,
                 max_flash_disk_throughput: Optional[int] = None,
                 max_hard_disk_iops: Optional[int] = None,
                 max_hard_disk_throughput: Optional[int] = None,
                 memory_gb: Optional[float] = None,
                 resource_type: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 storage_grid_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if cpu_count is not None:
            pulumi.set(__self__, "cpu_count", cpu_count)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if exadata_infrastructure_id is not None:
            pulumi.set(__self__, "exadata_infrastructure_id", exadata_infrastructure_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if make_model is not None:
            pulumi.set(__self__, "make_model", make_model)
        if max_flash_disk_iops is not None:
            pulumi.set(__self__, "max_flash_disk_iops", max_flash_disk_iops)
        if max_flash_disk_throughput is not None:
            pulumi.set(__self__, "max_flash_disk_throughput", max_flash_disk_throughput)
        if max_hard_disk_iops is not None:
            pulumi.set(__self__, "max_hard_disk_iops", max_hard_disk_iops)
        if max_hard_disk_throughput is not None:
            pulumi.set(__self__, "max_hard_disk_throughput", max_hard_disk_throughput)
        if memory_gb is not None:
            pulumi.set(__self__, "memory_gb", memory_gb)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage_grid_id is not None:
            pulumi.set(__self__, "storage_grid_id", storage_grid_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[str]:
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[float]:
        return pulumi.get(self, "cpu_count")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="exadataInfrastructureId")
    def exadata_infrastructure_id(self) -> Optional[str]:
        return pulumi.get(self, "exadata_infrastructure_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[str]:
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="makeModel")
    def make_model(self) -> Optional[str]:
        return pulumi.get(self, "make_model")

    @property
    @pulumi.getter(name="maxFlashDiskIops")
    def max_flash_disk_iops(self) -> Optional[int]:
        return pulumi.get(self, "max_flash_disk_iops")

    @property
    @pulumi.getter(name="maxFlashDiskThroughput")
    def max_flash_disk_throughput(self) -> Optional[int]:
        return pulumi.get(self, "max_flash_disk_throughput")

    @property
    @pulumi.getter(name="maxHardDiskIops")
    def max_hard_disk_iops(self) -> Optional[int]:
        return pulumi.get(self, "max_hard_disk_iops")

    @property
    @pulumi.getter(name="maxHardDiskThroughput")
    def max_hard_disk_throughput(self) -> Optional[int]:
        return pulumi.get(self, "max_hard_disk_throughput")

    @property
    @pulumi.getter(name="memoryGb")
    def memory_gb(self) -> Optional[float]:
        return pulumi.get(self, "memory_gb")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageGridId")
    def storage_grid_id(self) -> Optional[str]:
        return pulumi.get(self, "storage_grid_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetExternalExadataStorageServersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalListenerEndpointResult(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 key: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 services: Optional[Sequence[str]] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if services is not None:
            pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "services")


@pulumi.output_type
class GetExternalListenerServicedAsmResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetExternalListenerServicedDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 database_sub_type: Optional[str] = None,
                 database_type: Optional[str] = None,
                 db_unique_name: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_managed: Optional[bool] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_sub_type is not None:
            pulumi.set(__self__, "database_sub_type", database_sub_type)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if db_unique_name is not None:
            pulumi.set(__self__, "db_unique_name", db_unique_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_managed is not None:
            pulumi.set(__self__, "is_managed", is_managed)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dbUniqueName")
    def db_unique_name(self) -> Optional[str]:
        return pulumi.get(self, "db_unique_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isManaged")
    def is_managed(self) -> Optional[bool]:
        return pulumi.get(self, "is_managed")


@pulumi.output_type
class GetExternalListenerServicesExternalListenerServiceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalListenerServicesExternalListenerServiceCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalListenerServicesExternalListenerServiceCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalListenerServicesExternalListenerServiceCollectionItemResult(dict):
    def __init__(__self__, *,
                 listener_id: Optional[str] = None,
                 managed_database_id: Optional[str] = None,
                 name: Optional[str] = None):
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if managed_database_id is not None:
            pulumi.set(__self__, "managed_database_id", managed_database_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[str]:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="managedDatabaseId")
    def managed_database_id(self) -> Optional[str]:
        return pulumi.get(self, "managed_database_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetExternalListenerServicesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExternalListenersExternalListenerCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetExternalListenersExternalListenerCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetExternalListenersExternalListenerCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetExternalListenersExternalListenerCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 adr_home_directory: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 component_name: Optional[str] = None,
                 display_name: Optional[str] = None,
                 endpoints: Optional[Sequence['outputs.GetExternalListenersExternalListenerCollectionItemEndpointResult']] = None,
                 external_connector_id: Optional[str] = None,
                 external_db_home_id: Optional[str] = None,
                 external_db_node_id: Optional[str] = None,
                 external_db_system_id: Optional[str] = None,
                 external_listener_id: Optional[str] = None,
                 host_name: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 listener_alias: Optional[str] = None,
                 listener_ora_location: Optional[str] = None,
                 listener_type: Optional[str] = None,
                 log_directory: Optional[str] = None,
                 oracle_home: Optional[str] = None,
                 serviced_asms: Optional[Sequence['outputs.GetExternalListenersExternalListenerCollectionItemServicedAsmResult']] = None,
                 serviced_databases: Optional[Sequence['outputs.GetExternalListenersExternalListenerCollectionItemServicedDatabaseResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 trace_directory: Optional[str] = None,
                 version: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if adr_home_directory is not None:
            pulumi.set(__self__, "adr_home_directory", adr_home_directory)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if external_connector_id is not None:
            pulumi.set(__self__, "external_connector_id", external_connector_id)
        if external_db_home_id is not None:
            pulumi.set(__self__, "external_db_home_id", external_db_home_id)
        if external_db_node_id is not None:
            pulumi.set(__self__, "external_db_node_id", external_db_node_id)
        if external_db_system_id is not None:
            pulumi.set(__self__, "external_db_system_id", external_db_system_id)
        if external_listener_id is not None:
            pulumi.set(__self__, "external_listener_id", external_listener_id)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if listener_alias is not None:
            pulumi.set(__self__, "listener_alias", listener_alias)
        if listener_ora_location is not None:
            pulumi.set(__self__, "listener_ora_location", listener_ora_location)
        if listener_type is not None:
            pulumi.set(__self__, "listener_type", listener_type)
        if log_directory is not None:
            pulumi.set(__self__, "log_directory", log_directory)
        if oracle_home is not None:
            pulumi.set(__self__, "oracle_home", oracle_home)
        if serviced_asms is not None:
            pulumi.set(__self__, "serviced_asms", serviced_asms)
        if serviced_databases is not None:
            pulumi.set(__self__, "serviced_databases", serviced_databases)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if trace_directory is not None:
            pulumi.set(__self__, "trace_directory", trace_directory)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="adrHomeDirectory")
    def adr_home_directory(self) -> Optional[str]:
        return pulumi.get(self, "adr_home_directory")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[str]:
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence['outputs.GetExternalListenersExternalListenerCollectionItemEndpointResult']]:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="externalConnectorId")
    def external_connector_id(self) -> Optional[str]:
        return pulumi.get(self, "external_connector_id")

    @property
    @pulumi.getter(name="externalDbHomeId")
    def external_db_home_id(self) -> Optional[str]:
        return pulumi.get(self, "external_db_home_id")

    @property
    @pulumi.getter(name="externalDbNodeId")
    def external_db_node_id(self) -> Optional[str]:
        return pulumi.get(self, "external_db_node_id")

    @property
    @pulumi.getter(name="externalDbSystemId")
    def external_db_system_id(self) -> Optional[str]:
        return pulumi.get(self, "external_db_system_id")

    @property
    @pulumi.getter(name="externalListenerId")
    def external_listener_id(self) -> Optional[str]:
        return pulumi.get(self, "external_listener_id")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[str]:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="listenerAlias")
    def listener_alias(self) -> Optional[str]:
        return pulumi.get(self, "listener_alias")

    @property
    @pulumi.getter(name="listenerOraLocation")
    def listener_ora_location(self) -> Optional[str]:
        return pulumi.get(self, "listener_ora_location")

    @property
    @pulumi.getter(name="listenerType")
    def listener_type(self) -> Optional[str]:
        return pulumi.get(self, "listener_type")

    @property
    @pulumi.getter(name="logDirectory")
    def log_directory(self) -> Optional[str]:
        return pulumi.get(self, "log_directory")

    @property
    @pulumi.getter(name="oracleHome")
    def oracle_home(self) -> Optional[str]:
        return pulumi.get(self, "oracle_home")

    @property
    @pulumi.getter(name="servicedAsms")
    def serviced_asms(self) -> Optional[Sequence['outputs.GetExternalListenersExternalListenerCollectionItemServicedAsmResult']]:
        return pulumi.get(self, "serviced_asms")

    @property
    @pulumi.getter(name="servicedDatabases")
    def serviced_databases(self) -> Optional[Sequence['outputs.GetExternalListenersExternalListenerCollectionItemServicedDatabaseResult']]:
        return pulumi.get(self, "serviced_databases")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="traceDirectory")
    def trace_directory(self) -> Optional[str]:
        return pulumi.get(self, "trace_directory")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetExternalListenersExternalListenerCollectionItemEndpointResult(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 key: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 services: Optional[Sequence[str]] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if services is not None:
            pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "services")


@pulumi.output_type
class GetExternalListenersExternalListenerCollectionItemServicedAsmResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetExternalListenersExternalListenerCollectionItemServicedDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 database_sub_type: Optional[str] = None,
                 database_type: Optional[str] = None,
                 db_unique_name: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 is_managed: Optional[bool] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_sub_type is not None:
            pulumi.set(__self__, "database_sub_type", database_sub_type)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if db_unique_name is not None:
            pulumi.set(__self__, "db_unique_name", db_unique_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_managed is not None:
            pulumi.set(__self__, "is_managed", is_managed)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dbUniqueName")
    def db_unique_name(self) -> Optional[str]:
        return pulumi.get(self, "db_unique_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isManaged")
    def is_managed(self) -> Optional[bool]:
        return pulumi.get(self, "is_managed")


@pulumi.output_type
class GetExternalListenersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobExecutionsStatusItemResult(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 status: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetJobExecutionsStatusesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobExecutionsStatusesJobExecutionsStatusSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetJobExecutionsStatusesJobExecutionsStatusSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetJobExecutionsStatusesJobExecutionsStatusSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetJobExecutionsStatusesJobExecutionsStatusSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 status: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetManagedDatabaseAddmTaskItemResult(dict):
    def __init__(__self__, *,
                 begin_snapshot_id: Optional[str] = None,
                 db_user: Optional[str] = None,
                 description: Optional[str] = None,
                 end_snapshot_id: Optional[str] = None,
                 end_snapshot_time: Optional[str] = None,
                 findings: Optional[str] = None,
                 how_created: Optional[str] = None,
                 start_snapshot_time: Optional[str] = None,
                 status: Optional[str] = None,
                 task_id: Optional[str] = None,
                 task_name: Optional[str] = None,
                 time_created: Optional[str] = None):
        if begin_snapshot_id is not None:
            pulumi.set(__self__, "begin_snapshot_id", begin_snapshot_id)
        if db_user is not None:
            pulumi.set(__self__, "db_user", db_user)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_snapshot_id is not None:
            pulumi.set(__self__, "end_snapshot_id", end_snapshot_id)
        if end_snapshot_time is not None:
            pulumi.set(__self__, "end_snapshot_time", end_snapshot_time)
        if findings is not None:
            pulumi.set(__self__, "findings", findings)
        if how_created is not None:
            pulumi.set(__self__, "how_created", how_created)
        if start_snapshot_time is not None:
            pulumi.set(__self__, "start_snapshot_time", start_snapshot_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="beginSnapshotId")
    def begin_snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "begin_snapshot_id")

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> Optional[str]:
        return pulumi.get(self, "db_user")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endSnapshotId")
    def end_snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "end_snapshot_id")

    @property
    @pulumi.getter(name="endSnapshotTime")
    def end_snapshot_time(self) -> Optional[str]:
        return pulumi.get(self, "end_snapshot_time")

    @property
    @pulumi.getter
    def findings(self) -> Optional[str]:
        return pulumi.get(self, "findings")

    @property
    @pulumi.getter(name="howCreated")
    def how_created(self) -> Optional[str]:
        return pulumi.get(self, "how_created")

    @property
    @pulumi.getter(name="startSnapshotTime")
    def start_snapshot_time(self) -> Optional[str]:
        return pulumi.get(self, "start_snapshot_time")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[str]:
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[str]:
        return pulumi.get(self, "task_name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetManagedDatabaseAddmTasksAddmTasksCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseAddmTasksAddmTasksCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseAddmTasksAddmTasksCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseAddmTasksAddmTasksCollectionItemResult(dict):
    def __init__(__self__, *,
                 begin_snapshot_id: Optional[str] = None,
                 db_user: Optional[str] = None,
                 description: Optional[str] = None,
                 end_snapshot_id: Optional[str] = None,
                 end_snapshot_time: Optional[str] = None,
                 findings: Optional[str] = None,
                 how_created: Optional[str] = None,
                 start_snapshot_time: Optional[str] = None,
                 status: Optional[str] = None,
                 task_id: Optional[str] = None,
                 task_name: Optional[str] = None,
                 time_created: Optional[str] = None):
        if begin_snapshot_id is not None:
            pulumi.set(__self__, "begin_snapshot_id", begin_snapshot_id)
        if db_user is not None:
            pulumi.set(__self__, "db_user", db_user)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_snapshot_id is not None:
            pulumi.set(__self__, "end_snapshot_id", end_snapshot_id)
        if end_snapshot_time is not None:
            pulumi.set(__self__, "end_snapshot_time", end_snapshot_time)
        if findings is not None:
            pulumi.set(__self__, "findings", findings)
        if how_created is not None:
            pulumi.set(__self__, "how_created", how_created)
        if start_snapshot_time is not None:
            pulumi.set(__self__, "start_snapshot_time", start_snapshot_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="beginSnapshotId")
    def begin_snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "begin_snapshot_id")

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> Optional[str]:
        return pulumi.get(self, "db_user")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endSnapshotId")
    def end_snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "end_snapshot_id")

    @property
    @pulumi.getter(name="endSnapshotTime")
    def end_snapshot_time(self) -> Optional[str]:
        return pulumi.get(self, "end_snapshot_time")

    @property
    @pulumi.getter
    def findings(self) -> Optional[str]:
        return pulumi.get(self, "findings")

    @property
    @pulumi.getter(name="howCreated")
    def how_created(self) -> Optional[str]:
        return pulumi.get(self, "how_created")

    @property
    @pulumi.getter(name="startSnapshotTime")
    def start_snapshot_time(self) -> Optional[str]:
        return pulumi.get(self, "start_snapshot_time")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[str]:
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[str]:
        return pulumi.get(self, "task_name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetManagedDatabaseAddmTasksFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseAlertLogCountItemResult(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 count: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")


@pulumi.output_type
class GetManagedDatabaseAlertLogCountsAlertLogCountsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseAlertLogCountsAlertLogCountsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseAlertLogCountsAlertLogCountsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseAlertLogCountsAlertLogCountsCollectionItemResult(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 count: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")


@pulumi.output_type
class GetManagedDatabaseAlertLogCountsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseAttentionLogCountItemResult(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 count: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")


@pulumi.output_type
class GetManagedDatabaseAttentionLogCountsAttentionLogCountsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseAttentionLogCountsAttentionLogCountsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseAttentionLogCountsAttentionLogCountsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseAttentionLogCountsAttentionLogCountsCollectionItemResult(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 count: Optional[int] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")


@pulumi.output_type
class GetManagedDatabaseAttentionLogCountsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseCursorCacheStatementsCursorCacheStatementCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseCursorCacheStatementsCursorCacheStatementCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseCursorCacheStatementsCursorCacheStatementCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseCursorCacheStatementsCursorCacheStatementCollectionItemResult(dict):
    def __init__(__self__, *,
                 schema: Optional[str] = None,
                 sql_id: Optional[str] = None,
                 sql_text: Optional[str] = None):
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if sql_id is not None:
            pulumi.set(__self__, "sql_id", sql_id)
        if sql_text is not None:
            pulumi.set(__self__, "sql_text", sql_text)

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="sqlId")
    def sql_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_id")

    @property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> Optional[str]:
        return pulumi.get(self, "sql_text")


@pulumi.output_type
class GetManagedDatabaseCursorCacheStatementsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseGroupManagedDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 database_sub_type: Optional[str] = None,
                 database_type: Optional[str] = None,
                 deployment_type: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 time_added: Optional[str] = None,
                 workload_type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_sub_type is not None:
            pulumi.set(__self__, "database_sub_type", database_sub_type)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_added is not None:
            pulumi.set(__self__, "time_added", time_added)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeAdded")
    def time_added(self) -> Optional[str]:
        return pulumi.get(self, "time_added")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[str]:
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetManagedDatabaseGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseGroupsManagedDatabaseGroupCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 managed_databases: Optional[Sequence['outputs.GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabaseResult']] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if managed_databases is not None:
            pulumi.set(__self__, "managed_databases", managed_databases)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedDatabases")
    def managed_databases(self) -> Optional[Sequence['outputs.GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabaseResult']]:
        return pulumi.get(self, "managed_databases")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 database_sub_type: Optional[str] = None,
                 database_type: Optional[str] = None,
                 deployment_type: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 time_added: Optional[str] = None,
                 workload_type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_sub_type is not None:
            pulumi.set(__self__, "database_sub_type", database_sub_type)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_added is not None:
            pulumi.set(__self__, "time_added", time_added)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeAdded")
    def time_added(self) -> Optional[str]:
        return pulumi.get(self, "time_added")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[str]:
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetManagedDatabaseManagedDatabaseGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 db_deployment_type: Optional[str] = None,
                 db_sub_type: Optional[str] = None,
                 db_type: Optional[str] = None,
                 db_version: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if db_deployment_type is not None:
            pulumi.set(__self__, "db_deployment_type", db_deployment_type)
        if db_sub_type is not None:
            pulumi.set(__self__, "db_sub_type", db_sub_type)
        if db_type is not None:
            pulumi.set(__self__, "db_type", db_type)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbDeploymentType")
    def db_deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "db_deployment_type")

    @property
    @pulumi.getter(name="dbSubType")
    def db_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "db_sub_type")

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> Optional[str]:
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportResult(dict):
    def __init__(__self__, *,
                 rules: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleResult']] = None,
                 summary: Optional[str] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleResult']]:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 findings: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingResult']] = None,
                 name: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if findings is not None:
            pulumi.set(__self__, "findings", findings)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def findings(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingResult']]:
        return pulumi.get(self, "findings")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingDetailResult']] = None,
                 message: Optional[str] = None,
                 recommendations: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationResult']] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if recommendations is not None:
            pulumi.set(__self__, "recommendations", recommendations)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def recommendations(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationResult']]:
        return pulumi.get(self, "recommendations")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingDetailResult(dict):
    def __init__(__self__, *,
                 operations: Optional[Sequence[str]] = None,
                 schemas: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingDetailSchemaResult']] = None):
        if operations is not None:
            pulumi.set(__self__, "operations", operations)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)

    @property
    @pulumi.getter
    def operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingDetailSchemaResult']]:
        return pulumi.get(self, "schemas")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingDetailSchemaResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 objects: Optional[Sequence[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if objects is not None:
            pulumi.set(__self__, "objects", objects)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def objects(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "objects")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationResult(dict):
    def __init__(__self__, *,
                 examples: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationExampleResult']] = None,
                 message: Optional[str] = None,
                 rationales: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationRationaleResult']] = None):
        if examples is not None:
            pulumi.set(__self__, "examples", examples)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if rationales is not None:
            pulumi.set(__self__, "rationales", rationales)

    @property
    @pulumi.getter
    def examples(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationExampleResult']]:
        return pulumi.get(self, "examples")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def rationales(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationRationaleResult']]:
        return pulumi.get(self, "rationales")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationExampleResult(dict):
    def __init__(__self__, *,
                 lines: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationExampleLineResult']] = None):
        if lines is not None:
            pulumi.set(__self__, "lines", lines)

    @property
    @pulumi.getter
    def lines(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationExampleLineResult']]:
        return pulumi.get(self, "lines")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationExampleLineResult(dict):
    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 operation: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def operation(self) -> Optional[str]:
        return pulumi.get(self, "operation")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionReportRuleFindingRecommendationRationaleResult(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemResult(dict):
    def __init__(__self__, *,
                 databases: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemDatabaseResult']] = None,
                 error_message: Optional[str] = None,
                 execution_name: Optional[str] = None,
                 findings: Optional[int] = None,
                 reports: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportResult']] = None,
                 status: Optional[str] = None,
                 status_message: Optional[str] = None,
                 task_name: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None):
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if execution_name is not None:
            pulumi.set(__self__, "execution_name", execution_name)
        if findings is not None:
            pulumi.set(__self__, "findings", findings)
        if reports is not None:
            pulumi.set(__self__, "reports", reports)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter
    def databases(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemDatabaseResult']]:
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="executionName")
    def execution_name(self) -> Optional[str]:
        return pulumi.get(self, "execution_name")

    @property
    @pulumi.getter
    def findings(self) -> Optional[int]:
        return pulumi.get(self, "findings")

    @property
    @pulumi.getter
    def reports(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportResult']]:
        return pulumi.get(self, "reports")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[str]:
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[str]:
        return pulumi.get(self, "task_name")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 db_deployment_type: Optional[str] = None,
                 db_sub_type: Optional[str] = None,
                 db_type: Optional[str] = None,
                 db_version: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if db_deployment_type is not None:
            pulumi.set(__self__, "db_deployment_type", db_deployment_type)
        if db_sub_type is not None:
            pulumi.set(__self__, "db_sub_type", db_sub_type)
        if db_type is not None:
            pulumi.set(__self__, "db_type", db_type)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbDeploymentType")
    def db_deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "db_deployment_type")

    @property
    @pulumi.getter(name="dbSubType")
    def db_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "db_sub_type")

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> Optional[str]:
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportResult(dict):
    def __init__(__self__, *,
                 rules: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleResult']] = None,
                 summary: Optional[str] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleResult']]:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 findings: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingResult']] = None,
                 name: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if findings is not None:
            pulumi.set(__self__, "findings", findings)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def findings(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingResult']]:
        return pulumi.get(self, "findings")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingDetailResult']] = None,
                 message: Optional[str] = None,
                 recommendations: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationResult']] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if recommendations is not None:
            pulumi.set(__self__, "recommendations", recommendations)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingDetailResult']]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def recommendations(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationResult']]:
        return pulumi.get(self, "recommendations")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingDetailResult(dict):
    def __init__(__self__, *,
                 operations: Optional[Sequence[str]] = None,
                 schemas: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingDetailSchemaResult']] = None):
        if operations is not None:
            pulumi.set(__self__, "operations", operations)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)

    @property
    @pulumi.getter
    def operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingDetailSchemaResult']]:
        return pulumi.get(self, "schemas")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingDetailSchemaResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 objects: Optional[Sequence[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if objects is not None:
            pulumi.set(__self__, "objects", objects)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def objects(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "objects")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationResult(dict):
    def __init__(__self__, *,
                 examples: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationExampleResult']] = None,
                 message: Optional[str] = None,
                 rationales: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationRationaleResult']] = None):
        if examples is not None:
            pulumi.set(__self__, "examples", examples)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if rationales is not None:
            pulumi.set(__self__, "rationales", rationales)

    @property
    @pulumi.getter
    def examples(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationExampleResult']]:
        return pulumi.get(self, "examples")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def rationales(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationRationaleResult']]:
        return pulumi.get(self, "rationales")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationExampleResult(dict):
    def __init__(__self__, *,
                 lines: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationExampleLineResult']] = None):
        if lines is not None:
            pulumi.set(__self__, "lines", lines)

    @property
    @pulumi.getter
    def lines(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationExampleLineResult']]:
        return pulumi.get(self, "lines")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationExampleLineResult(dict):
    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 operation: Optional[str] = None):
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def operation(self) -> Optional[str]:
        return pulumi.get(self, "operation")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsAdvisorExecutionsOptimizerStatisticsAdvisorExecutionsCollectionItemReportRuleFindingRecommendationRationaleResult(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsCollectionAggregationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsCollectionAggregationsOptimizerStatisticsCollectionAggregationsCollectionItemResult(dict):
    def __init__(__self__, *,
                 completed: Optional[int] = None,
                 failed: Optional[int] = None,
                 group_by: Optional[str] = None,
                 in_progress: Optional[int] = None,
                 pending: Optional[int] = None,
                 skipped: Optional[int] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None,
                 timed_out: Optional[int] = None,
                 total: Optional[int] = None,
                 unknown: Optional[int] = None):
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if group_by is not None:
            pulumi.set(__self__, "group_by", group_by)
        if in_progress is not None:
            pulumi.set(__self__, "in_progress", in_progress)
        if pending is not None:
            pulumi.set(__self__, "pending", pending)
        if skipped is not None:
            pulumi.set(__self__, "skipped", skipped)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)
        if timed_out is not None:
            pulumi.set(__self__, "timed_out", timed_out)
        if total is not None:
            pulumi.set(__self__, "total", total)
        if unknown is not None:
            pulumi.set(__self__, "unknown", unknown)

    @property
    @pulumi.getter
    def completed(self) -> Optional[int]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter
    def failed(self) -> Optional[int]:
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[str]:
        return pulumi.get(self, "group_by")

    @property
    @pulumi.getter(name="inProgress")
    def in_progress(self) -> Optional[int]:
        return pulumi.get(self, "in_progress")

    @property
    @pulumi.getter
    def pending(self) -> Optional[int]:
        return pulumi.get(self, "pending")

    @property
    @pulumi.getter
    def skipped(self) -> Optional[int]:
        return pulumi.get(self, "skipped")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter(name="timedOut")
    def timed_out(self) -> Optional[int]:
        return pulumi.get(self, "timed_out")

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def unknown(self) -> Optional[int]:
        return pulumi.get(self, "unknown")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsCollectionOperationDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 db_deployment_type: Optional[str] = None,
                 db_sub_type: Optional[str] = None,
                 db_type: Optional[str] = None,
                 db_version: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if db_deployment_type is not None:
            pulumi.set(__self__, "db_deployment_type", db_deployment_type)
        if db_sub_type is not None:
            pulumi.set(__self__, "db_sub_type", db_sub_type)
        if db_type is not None:
            pulumi.set(__self__, "db_type", db_type)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbDeploymentType")
    def db_deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "db_deployment_type")

    @property
    @pulumi.getter(name="dbSubType")
    def db_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "db_sub_type")

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> Optional[str]:
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsCollectionOperationTaskResult(dict):
    def __init__(__self__, *,
                 status: Optional[str] = None,
                 target: Optional[str] = None,
                 target_type: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None):
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[str]:
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsCollectionOperationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemResult(dict):
    def __init__(__self__, *,
                 completed_count: Optional[int] = None,
                 databases: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemDatabaseResult']] = None,
                 duration_in_seconds: Optional[float] = None,
                 end_time: Optional[str] = None,
                 failed_count: Optional[int] = None,
                 id: Optional[int] = None,
                 in_progress_count: Optional[int] = None,
                 job_name: Optional[str] = None,
                 operation_name: Optional[str] = None,
                 start_time: Optional[str] = None,
                 status: Optional[str] = None,
                 target: Optional[str] = None,
                 tasks: Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemTaskResult']] = None,
                 timed_out_count: Optional[int] = None,
                 total_objects_count: Optional[int] = None):
        if completed_count is not None:
            pulumi.set(__self__, "completed_count", completed_count)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if duration_in_seconds is not None:
            pulumi.set(__self__, "duration_in_seconds", duration_in_seconds)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if failed_count is not None:
            pulumi.set(__self__, "failed_count", failed_count)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if in_progress_count is not None:
            pulumi.set(__self__, "in_progress_count", in_progress_count)
        if job_name is not None:
            pulumi.set(__self__, "job_name", job_name)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if tasks is not None:
            pulumi.set(__self__, "tasks", tasks)
        if timed_out_count is not None:
            pulumi.set(__self__, "timed_out_count", timed_out_count)
        if total_objects_count is not None:
            pulumi.set(__self__, "total_objects_count", total_objects_count)

    @property
    @pulumi.getter(name="completedCount")
    def completed_count(self) -> Optional[int]:
        return pulumi.get(self, "completed_count")

    @property
    @pulumi.getter
    def databases(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemDatabaseResult']]:
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="durationInSeconds")
    def duration_in_seconds(self) -> Optional[float]:
        return pulumi.get(self, "duration_in_seconds")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> Optional[int]:
        return pulumi.get(self, "failed_count")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inProgressCount")
    def in_progress_count(self) -> Optional[int]:
        return pulumi.get(self, "in_progress_count")

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[str]:
        return pulumi.get(self, "job_name")

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[str]:
        return pulumi.get(self, "operation_name")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def tasks(self) -> Optional[Sequence['outputs.GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemTaskResult']]:
        return pulumi.get(self, "tasks")

    @property
    @pulumi.getter(name="timedOutCount")
    def timed_out_count(self) -> Optional[int]:
        return pulumi.get(self, "timed_out_count")

    @property
    @pulumi.getter(name="totalObjectsCount")
    def total_objects_count(self) -> Optional[int]:
        return pulumi.get(self, "total_objects_count")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 db_deployment_type: Optional[str] = None,
                 db_sub_type: Optional[str] = None,
                 db_type: Optional[str] = None,
                 db_version: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if db_deployment_type is not None:
            pulumi.set(__self__, "db_deployment_type", db_deployment_type)
        if db_sub_type is not None:
            pulumi.set(__self__, "db_sub_type", db_sub_type)
        if db_type is not None:
            pulumi.set(__self__, "db_type", db_type)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbDeploymentType")
    def db_deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "db_deployment_type")

    @property
    @pulumi.getter(name="dbSubType")
    def db_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "db_sub_type")

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> Optional[str]:
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseOptimizerStatisticsCollectionOperationsOptimizerStatisticsCollectionOperationsCollectionItemTaskResult(dict):
    def __init__(__self__, *,
                 status: Optional[str] = None,
                 target: Optional[str] = None,
                 target_type: Optional[str] = None,
                 time_end: Optional[str] = None,
                 time_start: Optional[str] = None):
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[str]:
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[str]:
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[str]:
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetManagedDatabaseSqlPlanBaselineConfigurationAutoCaptureFilterResult(dict):
    def __init__(__self__, *,
                 modified_by: Optional[str] = None,
                 name: Optional[str] = None,
                 time_last_modified: Optional[str] = None,
                 values_to_excludes: Optional[Sequence[str]] = None,
                 values_to_includes: Optional[Sequence[str]] = None):
        if modified_by is not None:
            pulumi.set(__self__, "modified_by", modified_by)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_last_modified is not None:
            pulumi.set(__self__, "time_last_modified", time_last_modified)
        if values_to_excludes is not None:
            pulumi.set(__self__, "values_to_excludes", values_to_excludes)
        if values_to_includes is not None:
            pulumi.set(__self__, "values_to_includes", values_to_includes)

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> Optional[str]:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeLastModified")
    def time_last_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_last_modified")

    @property
    @pulumi.getter(name="valuesToExcludes")
    def values_to_excludes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values_to_excludes")

    @property
    @pulumi.getter(name="valuesToIncludes")
    def values_to_includes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values_to_includes")


@pulumi.output_type
class GetManagedDatabaseSqlPlanBaselineConfigurationAutoSpmEvolveTaskParameterResult(dict):
    def __init__(__self__, *,
                 allowed_time_limit: Optional[int] = None,
                 alternate_plan_baselines: Optional[Sequence[str]] = None,
                 alternate_plan_limit: Optional[int] = None,
                 alternate_plan_sources: Optional[Sequence[str]] = None,
                 are_plans_auto_accepted: Optional[bool] = None):
        if allowed_time_limit is not None:
            pulumi.set(__self__, "allowed_time_limit", allowed_time_limit)
        if alternate_plan_baselines is not None:
            pulumi.set(__self__, "alternate_plan_baselines", alternate_plan_baselines)
        if alternate_plan_limit is not None:
            pulumi.set(__self__, "alternate_plan_limit", alternate_plan_limit)
        if alternate_plan_sources is not None:
            pulumi.set(__self__, "alternate_plan_sources", alternate_plan_sources)
        if are_plans_auto_accepted is not None:
            pulumi.set(__self__, "are_plans_auto_accepted", are_plans_auto_accepted)

    @property
    @pulumi.getter(name="allowedTimeLimit")
    def allowed_time_limit(self) -> Optional[int]:
        return pulumi.get(self, "allowed_time_limit")

    @property
    @pulumi.getter(name="alternatePlanBaselines")
    def alternate_plan_baselines(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "alternate_plan_baselines")

    @property
    @pulumi.getter(name="alternatePlanLimit")
    def alternate_plan_limit(self) -> Optional[int]:
        return pulumi.get(self, "alternate_plan_limit")

    @property
    @pulumi.getter(name="alternatePlanSources")
    def alternate_plan_sources(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "alternate_plan_sources")

    @property
    @pulumi.getter(name="arePlansAutoAccepted")
    def are_plans_auto_accepted(self) -> Optional[bool]:
        return pulumi.get(self, "are_plans_auto_accepted")


@pulumi.output_type
class GetManagedDatabaseSqlPlanBaselineJobsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseSqlPlanBaselineJobsSqlPlanBaselineJobCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseSqlPlanBaselineJobsSqlPlanBaselineJobCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseSqlPlanBaselineJobsSqlPlanBaselineJobCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseSqlPlanBaselineJobsSqlPlanBaselineJobCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None,
                 type: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetManagedDatabaseSqlPlanBaselinesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseSqlPlanBaselinesSqlPlanBaselineCollectionItemResult(dict):
    def __init__(__self__, *,
                 accepted: Optional[str] = None,
                 action: Optional[str] = None,
                 adaptive: Optional[str] = None,
                 auto_purge: Optional[str] = None,
                 enabled: Optional[str] = None,
                 execution_plan: Optional[str] = None,
                 fixed: Optional[str] = None,
                 module: Optional[str] = None,
                 origin: Optional[str] = None,
                 plan_name: Optional[str] = None,
                 reproduced: Optional[str] = None,
                 sql_handle: Optional[str] = None,
                 sql_text: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_executed: Optional[str] = None,
                 time_last_modified: Optional[str] = None):
        if accepted is not None:
            pulumi.set(__self__, "accepted", accepted)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if adaptive is not None:
            pulumi.set(__self__, "adaptive", adaptive)
        if auto_purge is not None:
            pulumi.set(__self__, "auto_purge", auto_purge)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if execution_plan is not None:
            pulumi.set(__self__, "execution_plan", execution_plan)
        if fixed is not None:
            pulumi.set(__self__, "fixed", fixed)
        if module is not None:
            pulumi.set(__self__, "module", module)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if plan_name is not None:
            pulumi.set(__self__, "plan_name", plan_name)
        if reproduced is not None:
            pulumi.set(__self__, "reproduced", reproduced)
        if sql_handle is not None:
            pulumi.set(__self__, "sql_handle", sql_handle)
        if sql_text is not None:
            pulumi.set(__self__, "sql_text", sql_text)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_executed is not None:
            pulumi.set(__self__, "time_last_executed", time_last_executed)
        if time_last_modified is not None:
            pulumi.set(__self__, "time_last_modified", time_last_modified)

    @property
    @pulumi.getter
    def accepted(self) -> Optional[str]:
        return pulumi.get(self, "accepted")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def adaptive(self) -> Optional[str]:
        return pulumi.get(self, "adaptive")

    @property
    @pulumi.getter(name="autoPurge")
    def auto_purge(self) -> Optional[str]:
        return pulumi.get(self, "auto_purge")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="executionPlan")
    def execution_plan(self) -> Optional[str]:
        return pulumi.get(self, "execution_plan")

    @property
    @pulumi.getter
    def fixed(self) -> Optional[str]:
        return pulumi.get(self, "fixed")

    @property
    @pulumi.getter
    def module(self) -> Optional[str]:
        return pulumi.get(self, "module")

    @property
    @pulumi.getter
    def origin(self) -> Optional[str]:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> Optional[str]:
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter
    def reproduced(self) -> Optional[str]:
        return pulumi.get(self, "reproduced")

    @property
    @pulumi.getter(name="sqlHandle")
    def sql_handle(self) -> Optional[str]:
        return pulumi.get(self, "sql_handle")

    @property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> Optional[str]:
        return pulumi.get(self, "sql_text")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastExecuted")
    def time_last_executed(self) -> Optional[str]:
        return pulumi.get(self, "time_last_executed")

    @property
    @pulumi.getter(name="timeLastModified")
    def time_last_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_last_modified")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTaskItemResult(dict):
    def __init__(__self__, *,
                 days_to_expire: Optional[int] = None,
                 description: Optional[str] = None,
                 instance_id: Optional[int] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 recommendation_count: Optional[int] = None,
                 sql_tuning_advisor_task_id: Optional[str] = None,
                 task_status: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_execution_ended: Optional[str] = None,
                 time_execution_started: Optional[str] = None,
                 total_sql_statements: Optional[int] = None):
        if days_to_expire is not None:
            pulumi.set(__self__, "days_to_expire", days_to_expire)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if recommendation_count is not None:
            pulumi.set(__self__, "recommendation_count", recommendation_count)
        if sql_tuning_advisor_task_id is not None:
            pulumi.set(__self__, "sql_tuning_advisor_task_id", sql_tuning_advisor_task_id)
        if task_status is not None:
            pulumi.set(__self__, "task_status", task_status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_execution_ended is not None:
            pulumi.set(__self__, "time_execution_ended", time_execution_ended)
        if time_execution_started is not None:
            pulumi.set(__self__, "time_execution_started", time_execution_started)
        if total_sql_statements is not None:
            pulumi.set(__self__, "total_sql_statements", total_sql_statements)

    @property
    @pulumi.getter(name="daysToExpire")
    def days_to_expire(self) -> Optional[int]:
        return pulumi.get(self, "days_to_expire")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[int]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="recommendationCount")
    def recommendation_count(self) -> Optional[int]:
        return pulumi.get(self, "recommendation_count")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskId")
    def sql_tuning_advisor_task_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_tuning_advisor_task_id")

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> Optional[str]:
        return pulumi.get(self, "task_status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExecutionEnded")
    def time_execution_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_execution_ended")

    @property
    @pulumi.getter(name="timeExecutionStarted")
    def time_execution_started(self) -> Optional[str]:
        return pulumi.get(self, "time_execution_started")

    @property
    @pulumi.getter(name="totalSqlStatements")
    def total_sql_statements(self) -> Optional[int]:
        return pulumi.get(self, "total_sql_statements")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisonModifiedResult(dict):
    def __init__(__self__, *,
                 plan_stats: Optional[Mapping[str, Any]] = None,
                 plan_status: Optional[str] = None,
                 plan_type: Optional[str] = None):
        if plan_stats is not None:
            pulumi.set(__self__, "plan_stats", plan_stats)
        if plan_status is not None:
            pulumi.set(__self__, "plan_status", plan_status)
        if plan_type is not None:
            pulumi.set(__self__, "plan_type", plan_type)

    @property
    @pulumi.getter(name="planStats")
    def plan_stats(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "plan_stats")

    @property
    @pulumi.getter(name="planStatus")
    def plan_status(self) -> Optional[str]:
        return pulumi.get(self, "plan_status")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> Optional[str]:
        return pulumi.get(self, "plan_type")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisonOriginalResult(dict):
    def __init__(__self__, *,
                 plan_stats: Optional[Mapping[str, Any]] = None,
                 plan_status: Optional[str] = None,
                 plan_type: Optional[str] = None):
        if plan_stats is not None:
            pulumi.set(__self__, "plan_stats", plan_stats)
        if plan_status is not None:
            pulumi.set(__self__, "plan_status", plan_status)
        if plan_type is not None:
            pulumi.set(__self__, "plan_type", plan_type)

    @property
    @pulumi.getter(name="planStats")
    def plan_stats(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "plan_stats")

    @property
    @pulumi.getter(name="planStatus")
    def plan_status(self) -> Optional[str]:
        return pulumi.get(self, "plan_status")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> Optional[str]:
        return pulumi.get(self, "plan_type")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksFindingItemResult(dict):
    def __init__(__self__, *,
                 db_time_benefit: Optional[float] = None,
                 is_alternative_plan_finding_present: Optional[bool] = None,
                 is_error_finding_present: Optional[bool] = None,
                 is_index_finding_present: Optional[bool] = None,
                 is_miscellaneous_finding_present: Optional[bool] = None,
                 is_restructure_sql_finding_present: Optional[bool] = None,
                 is_sql_profile_finding_implemented: Optional[bool] = None,
                 is_sql_profile_finding_present: Optional[bool] = None,
                 is_stats_finding_present: Optional[bool] = None,
                 is_timeout_finding_present: Optional[bool] = None,
                 parsing_schema: Optional[str] = None,
                 per_execution_percentage: Optional[int] = None,
                 sql_key: Optional[str] = None,
                 sql_text: Optional[str] = None,
                 sql_tuning_advisor_task_id: Optional[str] = None,
                 sql_tuning_advisor_task_object_execution_id: Optional[str] = None,
                 sql_tuning_advisor_task_object_id: Optional[str] = None):
        if db_time_benefit is not None:
            pulumi.set(__self__, "db_time_benefit", db_time_benefit)
        if is_alternative_plan_finding_present is not None:
            pulumi.set(__self__, "is_alternative_plan_finding_present", is_alternative_plan_finding_present)
        if is_error_finding_present is not None:
            pulumi.set(__self__, "is_error_finding_present", is_error_finding_present)
        if is_index_finding_present is not None:
            pulumi.set(__self__, "is_index_finding_present", is_index_finding_present)
        if is_miscellaneous_finding_present is not None:
            pulumi.set(__self__, "is_miscellaneous_finding_present", is_miscellaneous_finding_present)
        if is_restructure_sql_finding_present is not None:
            pulumi.set(__self__, "is_restructure_sql_finding_present", is_restructure_sql_finding_present)
        if is_sql_profile_finding_implemented is not None:
            pulumi.set(__self__, "is_sql_profile_finding_implemented", is_sql_profile_finding_implemented)
        if is_sql_profile_finding_present is not None:
            pulumi.set(__self__, "is_sql_profile_finding_present", is_sql_profile_finding_present)
        if is_stats_finding_present is not None:
            pulumi.set(__self__, "is_stats_finding_present", is_stats_finding_present)
        if is_timeout_finding_present is not None:
            pulumi.set(__self__, "is_timeout_finding_present", is_timeout_finding_present)
        if parsing_schema is not None:
            pulumi.set(__self__, "parsing_schema", parsing_schema)
        if per_execution_percentage is not None:
            pulumi.set(__self__, "per_execution_percentage", per_execution_percentage)
        if sql_key is not None:
            pulumi.set(__self__, "sql_key", sql_key)
        if sql_text is not None:
            pulumi.set(__self__, "sql_text", sql_text)
        if sql_tuning_advisor_task_id is not None:
            pulumi.set(__self__, "sql_tuning_advisor_task_id", sql_tuning_advisor_task_id)
        if sql_tuning_advisor_task_object_execution_id is not None:
            pulumi.set(__self__, "sql_tuning_advisor_task_object_execution_id", sql_tuning_advisor_task_object_execution_id)
        if sql_tuning_advisor_task_object_id is not None:
            pulumi.set(__self__, "sql_tuning_advisor_task_object_id", sql_tuning_advisor_task_object_id)

    @property
    @pulumi.getter(name="dbTimeBenefit")
    def db_time_benefit(self) -> Optional[float]:
        return pulumi.get(self, "db_time_benefit")

    @property
    @pulumi.getter(name="isAlternativePlanFindingPresent")
    def is_alternative_plan_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_alternative_plan_finding_present")

    @property
    @pulumi.getter(name="isErrorFindingPresent")
    def is_error_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_error_finding_present")

    @property
    @pulumi.getter(name="isIndexFindingPresent")
    def is_index_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_index_finding_present")

    @property
    @pulumi.getter(name="isMiscellaneousFindingPresent")
    def is_miscellaneous_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_miscellaneous_finding_present")

    @property
    @pulumi.getter(name="isRestructureSqlFindingPresent")
    def is_restructure_sql_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_restructure_sql_finding_present")

    @property
    @pulumi.getter(name="isSqlProfileFindingImplemented")
    def is_sql_profile_finding_implemented(self) -> Optional[bool]:
        return pulumi.get(self, "is_sql_profile_finding_implemented")

    @property
    @pulumi.getter(name="isSqlProfileFindingPresent")
    def is_sql_profile_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_sql_profile_finding_present")

    @property
    @pulumi.getter(name="isStatsFindingPresent")
    def is_stats_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_stats_finding_present")

    @property
    @pulumi.getter(name="isTimeoutFindingPresent")
    def is_timeout_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_timeout_finding_present")

    @property
    @pulumi.getter(name="parsingSchema")
    def parsing_schema(self) -> Optional[str]:
        return pulumi.get(self, "parsing_schema")

    @property
    @pulumi.getter(name="perExecutionPercentage")
    def per_execution_percentage(self) -> Optional[int]:
        return pulumi.get(self, "per_execution_percentage")

    @property
    @pulumi.getter(name="sqlKey")
    def sql_key(self) -> Optional[str]:
        return pulumi.get(self, "sql_key")

    @property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> Optional[str]:
        return pulumi.get(self, "sql_text")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskId")
    def sql_tuning_advisor_task_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_tuning_advisor_task_id")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskObjectExecutionId")
    def sql_tuning_advisor_task_object_execution_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_tuning_advisor_task_object_execution_id")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskObjectId")
    def sql_tuning_advisor_task_object_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_tuning_advisor_task_object_id")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksFindingsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItemResult(dict):
    def __init__(__self__, *,
                 db_time_benefit: Optional[float] = None,
                 is_alternative_plan_finding_present: Optional[bool] = None,
                 is_error_finding_present: Optional[bool] = None,
                 is_index_finding_present: Optional[bool] = None,
                 is_miscellaneous_finding_present: Optional[bool] = None,
                 is_restructure_sql_finding_present: Optional[bool] = None,
                 is_sql_profile_finding_implemented: Optional[bool] = None,
                 is_sql_profile_finding_present: Optional[bool] = None,
                 is_stats_finding_present: Optional[bool] = None,
                 is_timeout_finding_present: Optional[bool] = None,
                 parsing_schema: Optional[str] = None,
                 per_execution_percentage: Optional[int] = None,
                 sql_key: Optional[str] = None,
                 sql_text: Optional[str] = None,
                 sql_tuning_advisor_task_id: Optional[str] = None,
                 sql_tuning_advisor_task_object_execution_id: Optional[str] = None,
                 sql_tuning_advisor_task_object_id: Optional[str] = None):
        if db_time_benefit is not None:
            pulumi.set(__self__, "db_time_benefit", db_time_benefit)
        if is_alternative_plan_finding_present is not None:
            pulumi.set(__self__, "is_alternative_plan_finding_present", is_alternative_plan_finding_present)
        if is_error_finding_present is not None:
            pulumi.set(__self__, "is_error_finding_present", is_error_finding_present)
        if is_index_finding_present is not None:
            pulumi.set(__self__, "is_index_finding_present", is_index_finding_present)
        if is_miscellaneous_finding_present is not None:
            pulumi.set(__self__, "is_miscellaneous_finding_present", is_miscellaneous_finding_present)
        if is_restructure_sql_finding_present is not None:
            pulumi.set(__self__, "is_restructure_sql_finding_present", is_restructure_sql_finding_present)
        if is_sql_profile_finding_implemented is not None:
            pulumi.set(__self__, "is_sql_profile_finding_implemented", is_sql_profile_finding_implemented)
        if is_sql_profile_finding_present is not None:
            pulumi.set(__self__, "is_sql_profile_finding_present", is_sql_profile_finding_present)
        if is_stats_finding_present is not None:
            pulumi.set(__self__, "is_stats_finding_present", is_stats_finding_present)
        if is_timeout_finding_present is not None:
            pulumi.set(__self__, "is_timeout_finding_present", is_timeout_finding_present)
        if parsing_schema is not None:
            pulumi.set(__self__, "parsing_schema", parsing_schema)
        if per_execution_percentage is not None:
            pulumi.set(__self__, "per_execution_percentage", per_execution_percentage)
        if sql_key is not None:
            pulumi.set(__self__, "sql_key", sql_key)
        if sql_text is not None:
            pulumi.set(__self__, "sql_text", sql_text)
        if sql_tuning_advisor_task_id is not None:
            pulumi.set(__self__, "sql_tuning_advisor_task_id", sql_tuning_advisor_task_id)
        if sql_tuning_advisor_task_object_execution_id is not None:
            pulumi.set(__self__, "sql_tuning_advisor_task_object_execution_id", sql_tuning_advisor_task_object_execution_id)
        if sql_tuning_advisor_task_object_id is not None:
            pulumi.set(__self__, "sql_tuning_advisor_task_object_id", sql_tuning_advisor_task_object_id)

    @property
    @pulumi.getter(name="dbTimeBenefit")
    def db_time_benefit(self) -> Optional[float]:
        return pulumi.get(self, "db_time_benefit")

    @property
    @pulumi.getter(name="isAlternativePlanFindingPresent")
    def is_alternative_plan_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_alternative_plan_finding_present")

    @property
    @pulumi.getter(name="isErrorFindingPresent")
    def is_error_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_error_finding_present")

    @property
    @pulumi.getter(name="isIndexFindingPresent")
    def is_index_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_index_finding_present")

    @property
    @pulumi.getter(name="isMiscellaneousFindingPresent")
    def is_miscellaneous_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_miscellaneous_finding_present")

    @property
    @pulumi.getter(name="isRestructureSqlFindingPresent")
    def is_restructure_sql_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_restructure_sql_finding_present")

    @property
    @pulumi.getter(name="isSqlProfileFindingImplemented")
    def is_sql_profile_finding_implemented(self) -> Optional[bool]:
        return pulumi.get(self, "is_sql_profile_finding_implemented")

    @property
    @pulumi.getter(name="isSqlProfileFindingPresent")
    def is_sql_profile_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_sql_profile_finding_present")

    @property
    @pulumi.getter(name="isStatsFindingPresent")
    def is_stats_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_stats_finding_present")

    @property
    @pulumi.getter(name="isTimeoutFindingPresent")
    def is_timeout_finding_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_timeout_finding_present")

    @property
    @pulumi.getter(name="parsingSchema")
    def parsing_schema(self) -> Optional[str]:
        return pulumi.get(self, "parsing_schema")

    @property
    @pulumi.getter(name="perExecutionPercentage")
    def per_execution_percentage(self) -> Optional[int]:
        return pulumi.get(self, "per_execution_percentage")

    @property
    @pulumi.getter(name="sqlKey")
    def sql_key(self) -> Optional[str]:
        return pulumi.get(self, "sql_key")

    @property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> Optional[str]:
        return pulumi.get(self, "sql_text")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskId")
    def sql_tuning_advisor_task_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_tuning_advisor_task_id")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskObjectExecutionId")
    def sql_tuning_advisor_task_object_execution_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_tuning_advisor_task_object_execution_id")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskObjectId")
    def sql_tuning_advisor_task_object_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_tuning_advisor_task_object_id")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksRecommendationItemResult(dict):
    def __init__(__self__, *,
                 benefit: Optional[float] = None,
                 finding: Optional[str] = None,
                 implement_action_sql: Optional[str] = None,
                 is_parallel_execution: Optional[bool] = None,
                 rationale: Optional[str] = None,
                 recommendation: Optional[str] = None,
                 recommendation_key: Optional[int] = None,
                 recommendation_type: Optional[str] = None,
                 sql_tuning_advisor_task_id: Optional[str] = None,
                 sql_tuning_advisor_task_object_id: Optional[str] = None):
        if benefit is not None:
            pulumi.set(__self__, "benefit", benefit)
        if finding is not None:
            pulumi.set(__self__, "finding", finding)
        if implement_action_sql is not None:
            pulumi.set(__self__, "implement_action_sql", implement_action_sql)
        if is_parallel_execution is not None:
            pulumi.set(__self__, "is_parallel_execution", is_parallel_execution)
        if rationale is not None:
            pulumi.set(__self__, "rationale", rationale)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if recommendation_key is not None:
            pulumi.set(__self__, "recommendation_key", recommendation_key)
        if recommendation_type is not None:
            pulumi.set(__self__, "recommendation_type", recommendation_type)
        if sql_tuning_advisor_task_id is not None:
            pulumi.set(__self__, "sql_tuning_advisor_task_id", sql_tuning_advisor_task_id)
        if sql_tuning_advisor_task_object_id is not None:
            pulumi.set(__self__, "sql_tuning_advisor_task_object_id", sql_tuning_advisor_task_object_id)

    @property
    @pulumi.getter
    def benefit(self) -> Optional[float]:
        return pulumi.get(self, "benefit")

    @property
    @pulumi.getter
    def finding(self) -> Optional[str]:
        return pulumi.get(self, "finding")

    @property
    @pulumi.getter(name="implementActionSql")
    def implement_action_sql(self) -> Optional[str]:
        return pulumi.get(self, "implement_action_sql")

    @property
    @pulumi.getter(name="isParallelExecution")
    def is_parallel_execution(self) -> Optional[bool]:
        return pulumi.get(self, "is_parallel_execution")

    @property
    @pulumi.getter
    def rationale(self) -> Optional[str]:
        return pulumi.get(self, "rationale")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="recommendationKey")
    def recommendation_key(self) -> Optional[int]:
        return pulumi.get(self, "recommendation_key")

    @property
    @pulumi.getter(name="recommendationType")
    def recommendation_type(self) -> Optional[str]:
        return pulumi.get(self, "recommendation_type")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskId")
    def sql_tuning_advisor_task_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_tuning_advisor_task_id")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskObjectId")
    def sql_tuning_advisor_task_object_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_tuning_advisor_task_object_id")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItemResult(dict):
    def __init__(__self__, *,
                 benefit: Optional[float] = None,
                 finding: Optional[str] = None,
                 implement_action_sql: Optional[str] = None,
                 is_parallel_execution: Optional[bool] = None,
                 rationale: Optional[str] = None,
                 recommendation: Optional[str] = None,
                 recommendation_key: Optional[int] = None,
                 recommendation_type: Optional[str] = None,
                 sql_tuning_advisor_task_id: Optional[str] = None,
                 sql_tuning_advisor_task_object_id: Optional[str] = None):
        if benefit is not None:
            pulumi.set(__self__, "benefit", benefit)
        if finding is not None:
            pulumi.set(__self__, "finding", finding)
        if implement_action_sql is not None:
            pulumi.set(__self__, "implement_action_sql", implement_action_sql)
        if is_parallel_execution is not None:
            pulumi.set(__self__, "is_parallel_execution", is_parallel_execution)
        if rationale is not None:
            pulumi.set(__self__, "rationale", rationale)
        if recommendation is not None:
            pulumi.set(__self__, "recommendation", recommendation)
        if recommendation_key is not None:
            pulumi.set(__self__, "recommendation_key", recommendation_key)
        if recommendation_type is not None:
            pulumi.set(__self__, "recommendation_type", recommendation_type)
        if sql_tuning_advisor_task_id is not None:
            pulumi.set(__self__, "sql_tuning_advisor_task_id", sql_tuning_advisor_task_id)
        if sql_tuning_advisor_task_object_id is not None:
            pulumi.set(__self__, "sql_tuning_advisor_task_object_id", sql_tuning_advisor_task_object_id)

    @property
    @pulumi.getter
    def benefit(self) -> Optional[float]:
        return pulumi.get(self, "benefit")

    @property
    @pulumi.getter
    def finding(self) -> Optional[str]:
        return pulumi.get(self, "finding")

    @property
    @pulumi.getter(name="implementActionSql")
    def implement_action_sql(self) -> Optional[str]:
        return pulumi.get(self, "implement_action_sql")

    @property
    @pulumi.getter(name="isParallelExecution")
    def is_parallel_execution(self) -> Optional[bool]:
        return pulumi.get(self, "is_parallel_execution")

    @property
    @pulumi.getter
    def rationale(self) -> Optional[str]:
        return pulumi.get(self, "rationale")

    @property
    @pulumi.getter
    def recommendation(self) -> Optional[str]:
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="recommendationKey")
    def recommendation_key(self) -> Optional[int]:
        return pulumi.get(self, "recommendation_key")

    @property
    @pulumi.getter(name="recommendationType")
    def recommendation_type(self) -> Optional[str]:
        return pulumi.get(self, "recommendation_type")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskId")
    def sql_tuning_advisor_task_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_tuning_advisor_task_id")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskObjectId")
    def sql_tuning_advisor_task_object_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_tuning_advisor_task_object_id")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanPlanResult(dict):
    def __init__(__self__, *,
                 access_predicates: Optional[str] = None,
                 attribute: Optional[str] = None,
                 bytes: Optional[str] = None,
                 cardinality: Optional[str] = None,
                 cost: Optional[float] = None,
                 cpu_cost: Optional[float] = None,
                 filter_predicates: Optional[str] = None,
                 io_cost: Optional[float] = None,
                 number_of_search_column: Optional[int] = None,
                 object: Optional[str] = None,
                 object_node: Optional[str] = None,
                 object_owner: Optional[str] = None,
                 object_position: Optional[int] = None,
                 object_type: Optional[str] = None,
                 operation: Optional[str] = None,
                 optimizer_mode: Optional[str] = None,
                 options: Optional[str] = None,
                 other: Optional[str] = None,
                 other_tag: Optional[str] = None,
                 parent_step_id: Optional[int] = None,
                 partition_id: Optional[int] = None,
                 partition_start: Optional[str] = None,
                 partition_stop: Optional[str] = None,
                 plan_hash_value: Optional[str] = None,
                 position: Optional[int] = None,
                 remarks: Optional[str] = None,
                 step_id: Optional[int] = None,
                 temp_space: Optional[str] = None,
                 time: Optional[str] = None):
        if access_predicates is not None:
            pulumi.set(__self__, "access_predicates", access_predicates)
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if bytes is not None:
            pulumi.set(__self__, "bytes", bytes)
        if cardinality is not None:
            pulumi.set(__self__, "cardinality", cardinality)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cpu_cost is not None:
            pulumi.set(__self__, "cpu_cost", cpu_cost)
        if filter_predicates is not None:
            pulumi.set(__self__, "filter_predicates", filter_predicates)
        if io_cost is not None:
            pulumi.set(__self__, "io_cost", io_cost)
        if number_of_search_column is not None:
            pulumi.set(__self__, "number_of_search_column", number_of_search_column)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if object_node is not None:
            pulumi.set(__self__, "object_node", object_node)
        if object_owner is not None:
            pulumi.set(__self__, "object_owner", object_owner)
        if object_position is not None:
            pulumi.set(__self__, "object_position", object_position)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if optimizer_mode is not None:
            pulumi.set(__self__, "optimizer_mode", optimizer_mode)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if other is not None:
            pulumi.set(__self__, "other", other)
        if other_tag is not None:
            pulumi.set(__self__, "other_tag", other_tag)
        if parent_step_id is not None:
            pulumi.set(__self__, "parent_step_id", parent_step_id)
        if partition_id is not None:
            pulumi.set(__self__, "partition_id", partition_id)
        if partition_start is not None:
            pulumi.set(__self__, "partition_start", partition_start)
        if partition_stop is not None:
            pulumi.set(__self__, "partition_stop", partition_stop)
        if plan_hash_value is not None:
            pulumi.set(__self__, "plan_hash_value", plan_hash_value)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if step_id is not None:
            pulumi.set(__self__, "step_id", step_id)
        if temp_space is not None:
            pulumi.set(__self__, "temp_space", temp_space)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="accessPredicates")
    def access_predicates(self) -> Optional[str]:
        return pulumi.get(self, "access_predicates")

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def bytes(self) -> Optional[str]:
        return pulumi.get(self, "bytes")

    @property
    @pulumi.getter
    def cardinality(self) -> Optional[str]:
        return pulumi.get(self, "cardinality")

    @property
    @pulumi.getter
    def cost(self) -> Optional[float]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="cpuCost")
    def cpu_cost(self) -> Optional[float]:
        return pulumi.get(self, "cpu_cost")

    @property
    @pulumi.getter(name="filterPredicates")
    def filter_predicates(self) -> Optional[str]:
        return pulumi.get(self, "filter_predicates")

    @property
    @pulumi.getter(name="ioCost")
    def io_cost(self) -> Optional[float]:
        return pulumi.get(self, "io_cost")

    @property
    @pulumi.getter(name="numberOfSearchColumn")
    def number_of_search_column(self) -> Optional[int]:
        return pulumi.get(self, "number_of_search_column")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectNode")
    def object_node(self) -> Optional[str]:
        return pulumi.get(self, "object_node")

    @property
    @pulumi.getter(name="objectOwner")
    def object_owner(self) -> Optional[str]:
        return pulumi.get(self, "object_owner")

    @property
    @pulumi.getter(name="objectPosition")
    def object_position(self) -> Optional[int]:
        return pulumi.get(self, "object_position")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter
    def operation(self) -> Optional[str]:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="optimizerMode")
    def optimizer_mode(self) -> Optional[str]:
        return pulumi.get(self, "optimizer_mode")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def other(self) -> Optional[str]:
        return pulumi.get(self, "other")

    @property
    @pulumi.getter(name="otherTag")
    def other_tag(self) -> Optional[str]:
        return pulumi.get(self, "other_tag")

    @property
    @pulumi.getter(name="parentStepId")
    def parent_step_id(self) -> Optional[int]:
        return pulumi.get(self, "parent_step_id")

    @property
    @pulumi.getter(name="partitionId")
    def partition_id(self) -> Optional[int]:
        return pulumi.get(self, "partition_id")

    @property
    @pulumi.getter(name="partitionStart")
    def partition_start(self) -> Optional[str]:
        return pulumi.get(self, "partition_start")

    @property
    @pulumi.getter(name="partitionStop")
    def partition_stop(self) -> Optional[str]:
        return pulumi.get(self, "partition_stop")

    @property
    @pulumi.getter(name="planHashValue")
    def plan_hash_value(self) -> Optional[str]:
        return pulumi.get(self, "plan_hash_value")

    @property
    @pulumi.getter
    def position(self) -> Optional[int]:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> Optional[int]:
        return pulumi.get(self, "step_id")

    @property
    @pulumi.getter(name="tempSpace")
    def temp_space(self) -> Optional[str]:
        return pulumi.get(self, "temp_space")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollectionItemResult(dict):
    def __init__(__self__, *,
                 days_to_expire: Optional[int] = None,
                 description: Optional[str] = None,
                 instance_id: Optional[int] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 recommendation_count: Optional[int] = None,
                 sql_tuning_advisor_task_id: Optional[str] = None,
                 task_status: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_execution_ended: Optional[str] = None,
                 time_execution_started: Optional[str] = None,
                 total_sql_statements: Optional[int] = None):
        if days_to_expire is not None:
            pulumi.set(__self__, "days_to_expire", days_to_expire)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if recommendation_count is not None:
            pulumi.set(__self__, "recommendation_count", recommendation_count)
        if sql_tuning_advisor_task_id is not None:
            pulumi.set(__self__, "sql_tuning_advisor_task_id", sql_tuning_advisor_task_id)
        if task_status is not None:
            pulumi.set(__self__, "task_status", task_status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_execution_ended is not None:
            pulumi.set(__self__, "time_execution_ended", time_execution_ended)
        if time_execution_started is not None:
            pulumi.set(__self__, "time_execution_started", time_execution_started)
        if total_sql_statements is not None:
            pulumi.set(__self__, "total_sql_statements", total_sql_statements)

    @property
    @pulumi.getter(name="daysToExpire")
    def days_to_expire(self) -> Optional[int]:
        return pulumi.get(self, "days_to_expire")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[int]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="recommendationCount")
    def recommendation_count(self) -> Optional[int]:
        return pulumi.get(self, "recommendation_count")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskId")
    def sql_tuning_advisor_task_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_tuning_advisor_task_id")

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> Optional[str]:
        return pulumi.get(self, "task_status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExecutionEnded")
    def time_execution_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_execution_ended")

    @property
    @pulumi.getter(name="timeExecutionStarted")
    def time_execution_started(self) -> Optional[str]:
        return pulumi.get(self, "time_execution_started")

    @property
    @pulumi.getter(name="totalSqlStatements")
    def total_sql_statements(self) -> Optional[int]:
        return pulumi.get(self, "total_sql_statements")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportIndexFindingResult(dict):
    def __init__(__self__, *,
                 index_columns: Optional[Sequence[str]] = None,
                 index_hash_value: Optional[str] = None,
                 index_name: Optional[str] = None,
                 reference_count: Optional[int] = None,
                 schema: Optional[str] = None,
                 table_name: Optional[str] = None):
        if index_columns is not None:
            pulumi.set(__self__, "index_columns", index_columns)
        if index_hash_value is not None:
            pulumi.set(__self__, "index_hash_value", index_hash_value)
        if index_name is not None:
            pulumi.set(__self__, "index_name", index_name)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="indexColumns")
    def index_columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "index_columns")

    @property
    @pulumi.getter(name="indexHashValue")
    def index_hash_value(self) -> Optional[str]:
        return pulumi.get(self, "index_hash_value")

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> Optional[str]:
        return pulumi.get(self, "index_name")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[int]:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportObjectStatFindingResult(dict):
    def __init__(__self__, *,
                 object: Optional[str] = None,
                 object_hash_value: Optional[str] = None,
                 object_type: Optional[str] = None,
                 problem_type: Optional[str] = None,
                 reference_count: Optional[int] = None,
                 schema: Optional[str] = None):
        if object is not None:
            pulumi.set(__self__, "object", object)
        if object_hash_value is not None:
            pulumi.set(__self__, "object_hash_value", object_hash_value)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if problem_type is not None:
            pulumi.set(__self__, "problem_type", problem_type)
        if reference_count is not None:
            pulumi.set(__self__, "reference_count", reference_count)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectHashValue")
    def object_hash_value(self) -> Optional[str]:
        return pulumi.get(self, "object_hash_value")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="problemType")
    def problem_type(self) -> Optional[str]:
        return pulumi.get(self, "problem_type")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> Optional[int]:
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticResult(dict):
    def __init__(__self__, *,
                 finding_benefits: Optional[Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefitResult']] = None,
                 finding_counts: Optional[Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingCountResult']] = None,
                 statement_counts: Optional[Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticStatementCountResult']] = None):
        if finding_benefits is not None:
            pulumi.set(__self__, "finding_benefits", finding_benefits)
        if finding_counts is not None:
            pulumi.set(__self__, "finding_counts", finding_counts)
        if statement_counts is not None:
            pulumi.set(__self__, "statement_counts", statement_counts)

    @property
    @pulumi.getter(name="findingBenefits")
    def finding_benefits(self) -> Optional[Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefitResult']]:
        return pulumi.get(self, "finding_benefits")

    @property
    @pulumi.getter(name="findingCounts")
    def finding_counts(self) -> Optional[Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingCountResult']]:
        return pulumi.get(self, "finding_counts")

    @property
    @pulumi.getter(name="statementCounts")
    def statement_counts(self) -> Optional[Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticStatementCountResult']]:
        return pulumi.get(self, "statement_counts")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefitResult(dict):
    def __init__(__self__, *,
                 db_time_after_implemented: Optional[int] = None,
                 db_time_after_recommended: Optional[int] = None,
                 db_time_before_implemented: Optional[int] = None,
                 db_time_before_recommended: Optional[int] = None):
        if db_time_after_implemented is not None:
            pulumi.set(__self__, "db_time_after_implemented", db_time_after_implemented)
        if db_time_after_recommended is not None:
            pulumi.set(__self__, "db_time_after_recommended", db_time_after_recommended)
        if db_time_before_implemented is not None:
            pulumi.set(__self__, "db_time_before_implemented", db_time_before_implemented)
        if db_time_before_recommended is not None:
            pulumi.set(__self__, "db_time_before_recommended", db_time_before_recommended)

    @property
    @pulumi.getter(name="dbTimeAfterImplemented")
    def db_time_after_implemented(self) -> Optional[int]:
        return pulumi.get(self, "db_time_after_implemented")

    @property
    @pulumi.getter(name="dbTimeAfterRecommended")
    def db_time_after_recommended(self) -> Optional[int]:
        return pulumi.get(self, "db_time_after_recommended")

    @property
    @pulumi.getter(name="dbTimeBeforeImplemented")
    def db_time_before_implemented(self) -> Optional[int]:
        return pulumi.get(self, "db_time_before_implemented")

    @property
    @pulumi.getter(name="dbTimeBeforeRecommended")
    def db_time_before_recommended(self) -> Optional[int]:
        return pulumi.get(self, "db_time_before_recommended")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingCountResult(dict):
    def __init__(__self__, *,
                 alternate_plan: Optional[int] = None,
                 implemented_sql_profile: Optional[int] = None,
                 index: Optional[int] = None,
                 recommended_sql_profile: Optional[int] = None,
                 restructure: Optional[int] = None,
                 statistics: Optional[int] = None):
        if alternate_plan is not None:
            pulumi.set(__self__, "alternate_plan", alternate_plan)
        if implemented_sql_profile is not None:
            pulumi.set(__self__, "implemented_sql_profile", implemented_sql_profile)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if recommended_sql_profile is not None:
            pulumi.set(__self__, "recommended_sql_profile", recommended_sql_profile)
        if restructure is not None:
            pulumi.set(__self__, "restructure", restructure)
        if statistics is not None:
            pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter(name="alternatePlan")
    def alternate_plan(self) -> Optional[int]:
        return pulumi.get(self, "alternate_plan")

    @property
    @pulumi.getter(name="implementedSqlProfile")
    def implemented_sql_profile(self) -> Optional[int]:
        return pulumi.get(self, "implemented_sql_profile")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="recommendedSqlProfile")
    def recommended_sql_profile(self) -> Optional[int]:
        return pulumi.get(self, "recommended_sql_profile")

    @property
    @pulumi.getter
    def restructure(self) -> Optional[int]:
        return pulumi.get(self, "restructure")

    @property
    @pulumi.getter
    def statistics(self) -> Optional[int]:
        return pulumi.get(self, "statistics")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticStatementCountResult(dict):
    def __init__(__self__, *,
                 distinct_sql: Optional[int] = None,
                 error_count: Optional[int] = None,
                 finding_count: Optional[int] = None,
                 total_sql: Optional[int] = None):
        if distinct_sql is not None:
            pulumi.set(__self__, "distinct_sql", distinct_sql)
        if error_count is not None:
            pulumi.set(__self__, "error_count", error_count)
        if finding_count is not None:
            pulumi.set(__self__, "finding_count", finding_count)
        if total_sql is not None:
            pulumi.set(__self__, "total_sql", total_sql)

    @property
    @pulumi.getter(name="distinctSql")
    def distinct_sql(self) -> Optional[int]:
        return pulumi.get(self, "distinct_sql")

    @property
    @pulumi.getter(name="errorCount")
    def error_count(self) -> Optional[int]:
        return pulumi.get(self, "error_count")

    @property
    @pulumi.getter(name="findingCount")
    def finding_count(self) -> Optional[int]:
        return pulumi.get(self, "finding_count")

    @property
    @pulumi.getter(name="totalSql")
    def total_sql(self) -> Optional[int]:
        return pulumi.get(self, "total_sql")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportTaskInfoResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 running_time: Optional[int] = None,
                 status: Optional[str] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if running_time is not None:
            pulumi.set(__self__, "running_time", running_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="runningTime")
    def running_time(self) -> Optional[int]:
        return pulumi.get(self, "running_time")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetManagedDatabaseSqlTuningSetItemResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 statement_counts: Optional[int] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if statement_counts is not None:
            pulumi.set(__self__, "statement_counts", statement_counts)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="statementCounts")
    def statement_counts(self) -> Optional[int]:
        return pulumi.get(self, "statement_counts")


@pulumi.output_type
class GetManagedDatabaseSqlTuningSetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseSqlTuningSetsSqlTuningSetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseSqlTuningSetsSqlTuningSetCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseSqlTuningSetsSqlTuningSetCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseSqlTuningSetsSqlTuningSetCollectionItemResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 error_message: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 owner: Optional[str] = None,
                 scheduled_job_name: Optional[str] = None,
                 statement_counts: Optional[int] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_modified: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if scheduled_job_name is not None:
            pulumi.set(__self__, "scheduled_job_name", scheduled_job_name)
        if statement_counts is not None:
            pulumi.set(__self__, "statement_counts", statement_counts)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_modified is not None:
            pulumi.set(__self__, "time_last_modified", time_last_modified)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="scheduledJobName")
    def scheduled_job_name(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_job_name")

    @property
    @pulumi.getter(name="statementCounts")
    def statement_counts(self) -> Optional[int]:
        return pulumi.get(self, "statement_counts")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastModified")
    def time_last_modified(self) -> Optional[str]:
        return pulumi.get(self, "time_last_modified")


@pulumi.output_type
class GetManagedDatabaseTableStatisticsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseTableStatisticsTableStatisticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseTableStatisticsTableStatisticsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseTableStatisticsTableStatisticsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseTableStatisticsTableStatisticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 count: Optional[int] = None,
                 percentage: Optional[float] = None,
                 type: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def percentage(self) -> Optional[float]:
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetManagedDatabaseUserConsumerGroupPrivilegeItemResult(dict):
    def __init__(__self__, *,
                 grant_option: Optional[str] = None,
                 initial_group: Optional[str] = None,
                 name: Optional[str] = None):
        if grant_option is not None:
            pulumi.set(__self__, "grant_option", grant_option)
        if initial_group is not None:
            pulumi.set(__self__, "initial_group", initial_group)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="grantOption")
    def grant_option(self) -> Optional[str]:
        return pulumi.get(self, "grant_option")

    @property
    @pulumi.getter(name="initialGroup")
    def initial_group(self) -> Optional[str]:
        return pulumi.get(self, "initial_group")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollectionItemResult(dict):
    def __init__(__self__, *,
                 grant_option: Optional[str] = None,
                 initial_group: Optional[str] = None,
                 name: Optional[str] = None):
        if grant_option is not None:
            pulumi.set(__self__, "grant_option", grant_option)
        if initial_group is not None:
            pulumi.set(__self__, "initial_group", initial_group)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="grantOption")
    def grant_option(self) -> Optional[str]:
        return pulumi.get(self, "grant_option")

    @property
    @pulumi.getter(name="initialGroup")
    def initial_group(self) -> Optional[str]:
        return pulumi.get(self, "initial_group")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUserConsumerGroupPrivilegesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseUserDataAccessContainerItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUserDataAccessContainersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseUserObjectPrivilegeItemResult(dict):
    def __init__(__self__, *,
                 common: Optional[str] = None,
                 grant_option: Optional[str] = None,
                 grantor: Optional[str] = None,
                 hierarchy: Optional[str] = None,
                 inherited: Optional[str] = None,
                 name: Optional[str] = None,
                 object: Optional[str] = None,
                 owner: Optional[str] = None,
                 schema_type: Optional[str] = None):
        if common is not None:
            pulumi.set(__self__, "common", common)
        if grant_option is not None:
            pulumi.set(__self__, "grant_option", grant_option)
        if grantor is not None:
            pulumi.set(__self__, "grantor", grantor)
        if hierarchy is not None:
            pulumi.set(__self__, "hierarchy", hierarchy)
        if inherited is not None:
            pulumi.set(__self__, "inherited", inherited)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if schema_type is not None:
            pulumi.set(__self__, "schema_type", schema_type)

    @property
    @pulumi.getter
    def common(self) -> Optional[str]:
        return pulumi.get(self, "common")

    @property
    @pulumi.getter(name="grantOption")
    def grant_option(self) -> Optional[str]:
        return pulumi.get(self, "grant_option")

    @property
    @pulumi.getter
    def grantor(self) -> Optional[str]:
        return pulumi.get(self, "grantor")

    @property
    @pulumi.getter
    def hierarchy(self) -> Optional[str]:
        return pulumi.get(self, "hierarchy")

    @property
    @pulumi.getter
    def inherited(self) -> Optional[str]:
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="schemaType")
    def schema_type(self) -> Optional[str]:
        return pulumi.get(self, "schema_type")


@pulumi.output_type
class GetManagedDatabaseUserObjectPrivilegesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItemResult(dict):
    def __init__(__self__, *,
                 common: Optional[str] = None,
                 grant_option: Optional[str] = None,
                 grantor: Optional[str] = None,
                 hierarchy: Optional[str] = None,
                 inherited: Optional[str] = None,
                 name: Optional[str] = None,
                 object: Optional[str] = None,
                 owner: Optional[str] = None,
                 schema_type: Optional[str] = None):
        if common is not None:
            pulumi.set(__self__, "common", common)
        if grant_option is not None:
            pulumi.set(__self__, "grant_option", grant_option)
        if grantor is not None:
            pulumi.set(__self__, "grantor", grantor)
        if hierarchy is not None:
            pulumi.set(__self__, "hierarchy", hierarchy)
        if inherited is not None:
            pulumi.set(__self__, "inherited", inherited)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if schema_type is not None:
            pulumi.set(__self__, "schema_type", schema_type)

    @property
    @pulumi.getter
    def common(self) -> Optional[str]:
        return pulumi.get(self, "common")

    @property
    @pulumi.getter(name="grantOption")
    def grant_option(self) -> Optional[str]:
        return pulumi.get(self, "grant_option")

    @property
    @pulumi.getter
    def grantor(self) -> Optional[str]:
        return pulumi.get(self, "grantor")

    @property
    @pulumi.getter
    def hierarchy(self) -> Optional[str]:
        return pulumi.get(self, "hierarchy")

    @property
    @pulumi.getter
    def inherited(self) -> Optional[str]:
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="schemaType")
    def schema_type(self) -> Optional[str]:
        return pulumi.get(self, "schema_type")


@pulumi.output_type
class GetManagedDatabaseUserProxiedForUserItemResult(dict):
    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 flags: Optional[str] = None,
                 name: Optional[str] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def flags(self) -> Optional[str]:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUserProxiedForUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseUserProxiedForUsersProxiedForUserCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseUserProxiedForUsersProxiedForUserCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseUserProxiedForUsersProxiedForUserCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseUserProxiedForUsersProxiedForUserCollectionItemResult(dict):
    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 flags: Optional[str] = None,
                 name: Optional[str] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def flags(self) -> Optional[str]:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUserRoleItemResult(dict):
    def __init__(__self__, *,
                 admin_option: Optional[str] = None,
                 common: Optional[str] = None,
                 default_role: Optional[str] = None,
                 delegate_option: Optional[str] = None,
                 inherited: Optional[str] = None,
                 name: Optional[str] = None):
        if admin_option is not None:
            pulumi.set(__self__, "admin_option", admin_option)
        if common is not None:
            pulumi.set(__self__, "common", common)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if delegate_option is not None:
            pulumi.set(__self__, "delegate_option", delegate_option)
        if inherited is not None:
            pulumi.set(__self__, "inherited", inherited)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="adminOption")
    def admin_option(self) -> Optional[str]:
        return pulumi.get(self, "admin_option")

    @property
    @pulumi.getter
    def common(self) -> Optional[str]:
        return pulumi.get(self, "common")

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[str]:
        return pulumi.get(self, "default_role")

    @property
    @pulumi.getter(name="delegateOption")
    def delegate_option(self) -> Optional[str]:
        return pulumi.get(self, "delegate_option")

    @property
    @pulumi.getter
    def inherited(self) -> Optional[str]:
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUserRolesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseUserRolesRoleCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseUserRolesRoleCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseUserRolesRoleCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseUserRolesRoleCollectionItemResult(dict):
    def __init__(__self__, *,
                 admin_option: Optional[str] = None,
                 common: Optional[str] = None,
                 default_role: Optional[str] = None,
                 delegate_option: Optional[str] = None,
                 inherited: Optional[str] = None,
                 name: Optional[str] = None):
        if admin_option is not None:
            pulumi.set(__self__, "admin_option", admin_option)
        if common is not None:
            pulumi.set(__self__, "common", common)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if delegate_option is not None:
            pulumi.set(__self__, "delegate_option", delegate_option)
        if inherited is not None:
            pulumi.set(__self__, "inherited", inherited)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="adminOption")
    def admin_option(self) -> Optional[str]:
        return pulumi.get(self, "admin_option")

    @property
    @pulumi.getter
    def common(self) -> Optional[str]:
        return pulumi.get(self, "common")

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[str]:
        return pulumi.get(self, "default_role")

    @property
    @pulumi.getter(name="delegateOption")
    def delegate_option(self) -> Optional[str]:
        return pulumi.get(self, "delegate_option")

    @property
    @pulumi.getter
    def inherited(self) -> Optional[str]:
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseUsersUserCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabaseUsersUserCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabaseUsersUserCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseUsersUserCollectionItemResult(dict):
    def __init__(__self__, *,
                 all_shared: Optional[str] = None,
                 authentication: Optional[str] = None,
                 common: Optional[str] = None,
                 consumer_group: Optional[str] = None,
                 default_collation: Optional[str] = None,
                 default_tablespace: Optional[str] = None,
                 editions_enabled: Optional[str] = None,
                 external_name: Optional[str] = None,
                 external_shared: Optional[str] = None,
                 implicit: Optional[str] = None,
                 inherited: Optional[str] = None,
                 local_temp_tablespace: Optional[str] = None,
                 name: Optional[str] = None,
                 oracle_maintained: Optional[str] = None,
                 password_versions: Optional[str] = None,
                 profile: Optional[str] = None,
                 proxy_connect: Optional[str] = None,
                 status: Optional[str] = None,
                 temp_tablespace: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_expiring: Optional[str] = None,
                 time_last_login: Optional[str] = None,
                 time_locked: Optional[str] = None,
                 time_password_changed: Optional[str] = None):
        if all_shared is not None:
            pulumi.set(__self__, "all_shared", all_shared)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if common is not None:
            pulumi.set(__self__, "common", common)
        if consumer_group is not None:
            pulumi.set(__self__, "consumer_group", consumer_group)
        if default_collation is not None:
            pulumi.set(__self__, "default_collation", default_collation)
        if default_tablespace is not None:
            pulumi.set(__self__, "default_tablespace", default_tablespace)
        if editions_enabled is not None:
            pulumi.set(__self__, "editions_enabled", editions_enabled)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if external_shared is not None:
            pulumi.set(__self__, "external_shared", external_shared)
        if implicit is not None:
            pulumi.set(__self__, "implicit", implicit)
        if inherited is not None:
            pulumi.set(__self__, "inherited", inherited)
        if local_temp_tablespace is not None:
            pulumi.set(__self__, "local_temp_tablespace", local_temp_tablespace)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oracle_maintained is not None:
            pulumi.set(__self__, "oracle_maintained", oracle_maintained)
        if password_versions is not None:
            pulumi.set(__self__, "password_versions", password_versions)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if proxy_connect is not None:
            pulumi.set(__self__, "proxy_connect", proxy_connect)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if temp_tablespace is not None:
            pulumi.set(__self__, "temp_tablespace", temp_tablespace)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_expiring is not None:
            pulumi.set(__self__, "time_expiring", time_expiring)
        if time_last_login is not None:
            pulumi.set(__self__, "time_last_login", time_last_login)
        if time_locked is not None:
            pulumi.set(__self__, "time_locked", time_locked)
        if time_password_changed is not None:
            pulumi.set(__self__, "time_password_changed", time_password_changed)

    @property
    @pulumi.getter(name="allShared")
    def all_shared(self) -> Optional[str]:
        return pulumi.get(self, "all_shared")

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def common(self) -> Optional[str]:
        return pulumi.get(self, "common")

    @property
    @pulumi.getter(name="consumerGroup")
    def consumer_group(self) -> Optional[str]:
        return pulumi.get(self, "consumer_group")

    @property
    @pulumi.getter(name="defaultCollation")
    def default_collation(self) -> Optional[str]:
        return pulumi.get(self, "default_collation")

    @property
    @pulumi.getter(name="defaultTablespace")
    def default_tablespace(self) -> Optional[str]:
        return pulumi.get(self, "default_tablespace")

    @property
    @pulumi.getter(name="editionsEnabled")
    def editions_enabled(self) -> Optional[str]:
        return pulumi.get(self, "editions_enabled")

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[str]:
        return pulumi.get(self, "external_name")

    @property
    @pulumi.getter(name="externalShared")
    def external_shared(self) -> Optional[str]:
        return pulumi.get(self, "external_shared")

    @property
    @pulumi.getter
    def implicit(self) -> Optional[str]:
        return pulumi.get(self, "implicit")

    @property
    @pulumi.getter
    def inherited(self) -> Optional[str]:
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter(name="localTempTablespace")
    def local_temp_tablespace(self) -> Optional[str]:
        return pulumi.get(self, "local_temp_tablespace")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oracleMaintained")
    def oracle_maintained(self) -> Optional[str]:
        return pulumi.get(self, "oracle_maintained")

    @property
    @pulumi.getter(name="passwordVersions")
    def password_versions(self) -> Optional[str]:
        return pulumi.get(self, "password_versions")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="proxyConnect")
    def proxy_connect(self) -> Optional[str]:
        return pulumi.get(self, "proxy_connect")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tempTablespace")
    def temp_tablespace(self) -> Optional[str]:
        return pulumi.get(self, "temp_tablespace")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpiring")
    def time_expiring(self) -> Optional[str]:
        return pulumi.get(self, "time_expiring")

    @property
    @pulumi.getter(name="timeLastLogin")
    def time_last_login(self) -> Optional[str]:
        return pulumi.get(self, "time_last_login")

    @property
    @pulumi.getter(name="timeLocked")
    def time_locked(self) -> Optional[str]:
        return pulumi.get(self, "time_locked")

    @property
    @pulumi.getter(name="timePasswordChanged")
    def time_password_changed(self) -> Optional[str]:
        return pulumi.get(self, "time_password_changed")


@pulumi.output_type
class GetManagedDatabasesAsmPropertiesAsmPropertyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabasesAsmPropertiesAsmPropertyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabasesAsmPropertiesAsmPropertyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabasesAsmPropertiesAsmPropertyCollectionItemResult(dict):
    def __init__(__self__, *,
                 disk_group: Optional[str] = None):
        if disk_group is not None:
            pulumi.set(__self__, "disk_group", disk_group)

    @property
    @pulumi.getter(name="diskGroup")
    def disk_group(self) -> Optional[str]:
        return pulumi.get(self, "disk_group")


@pulumi.output_type
class GetManagedDatabasesAsmPropertiesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabasesAsmPropertyItemResult(dict):
    def __init__(__self__, *,
                 disk_group: Optional[str] = None):
        if disk_group is not None:
            pulumi.set(__self__, "disk_group", disk_group)

    @property
    @pulumi.getter(name="diskGroup")
    def disk_group(self) -> Optional[str]:
        return pulumi.get(self, "disk_group")


@pulumi.output_type
class GetManagedDatabasesDatabaseParameterItemResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence['outputs.GetManagedDatabasesDatabaseParameterItemAllowedValueResult']] = None,
                 category: Optional[str] = None,
                 constraint: Optional[str] = None,
                 container_id: Optional[float] = None,
                 description: Optional[str] = None,
                 display_value: Optional[str] = None,
                 is_adjusted: Optional[bool] = None,
                 is_basic: Optional[bool] = None,
                 is_default: Optional[bool] = None,
                 is_deprecated: Optional[bool] = None,
                 is_instance_modifiable: Optional[bool] = None,
                 is_modified: Optional[str] = None,
                 is_pdb_modifiable: Optional[bool] = None,
                 is_session_modifiable: Optional[bool] = None,
                 is_specified: Optional[bool] = None,
                 is_system_modifiable: Optional[str] = None,
                 name: Optional[str] = None,
                 number: Optional[float] = None,
                 ordinal: Optional[float] = None,
                 sid: Optional[str] = None,
                 type: Optional[str] = None,
                 update_comment: Optional[str] = None,
                 value: Optional[str] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if constraint is not None:
            pulumi.set(__self__, "constraint", constraint)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_value is not None:
            pulumi.set(__self__, "display_value", display_value)
        if is_adjusted is not None:
            pulumi.set(__self__, "is_adjusted", is_adjusted)
        if is_basic is not None:
            pulumi.set(__self__, "is_basic", is_basic)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_deprecated is not None:
            pulumi.set(__self__, "is_deprecated", is_deprecated)
        if is_instance_modifiable is not None:
            pulumi.set(__self__, "is_instance_modifiable", is_instance_modifiable)
        if is_modified is not None:
            pulumi.set(__self__, "is_modified", is_modified)
        if is_pdb_modifiable is not None:
            pulumi.set(__self__, "is_pdb_modifiable", is_pdb_modifiable)
        if is_session_modifiable is not None:
            pulumi.set(__self__, "is_session_modifiable", is_session_modifiable)
        if is_specified is not None:
            pulumi.set(__self__, "is_specified", is_specified)
        if is_system_modifiable is not None:
            pulumi.set(__self__, "is_system_modifiable", is_system_modifiable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if number is not None:
            pulumi.set(__self__, "number", number)
        if ordinal is not None:
            pulumi.set(__self__, "ordinal", ordinal)
        if sid is not None:
            pulumi.set(__self__, "sid", sid)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if update_comment is not None:
            pulumi.set(__self__, "update_comment", update_comment)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence['outputs.GetManagedDatabasesDatabaseParameterItemAllowedValueResult']]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def constraint(self) -> Optional[str]:
        return pulumi.get(self, "constraint")

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> Optional[float]:
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayValue")
    def display_value(self) -> Optional[str]:
        return pulumi.get(self, "display_value")

    @property
    @pulumi.getter(name="isAdjusted")
    def is_adjusted(self) -> Optional[bool]:
        return pulumi.get(self, "is_adjusted")

    @property
    @pulumi.getter(name="isBasic")
    def is_basic(self) -> Optional[bool]:
        return pulumi.get(self, "is_basic")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isDeprecated")
    def is_deprecated(self) -> Optional[bool]:
        return pulumi.get(self, "is_deprecated")

    @property
    @pulumi.getter(name="isInstanceModifiable")
    def is_instance_modifiable(self) -> Optional[bool]:
        return pulumi.get(self, "is_instance_modifiable")

    @property
    @pulumi.getter(name="isModified")
    def is_modified(self) -> Optional[str]:
        return pulumi.get(self, "is_modified")

    @property
    @pulumi.getter(name="isPdbModifiable")
    def is_pdb_modifiable(self) -> Optional[bool]:
        return pulumi.get(self, "is_pdb_modifiable")

    @property
    @pulumi.getter(name="isSessionModifiable")
    def is_session_modifiable(self) -> Optional[bool]:
        return pulumi.get(self, "is_session_modifiable")

    @property
    @pulumi.getter(name="isSpecified")
    def is_specified(self) -> Optional[bool]:
        return pulumi.get(self, "is_specified")

    @property
    @pulumi.getter(name="isSystemModifiable")
    def is_system_modifiable(self) -> Optional[str]:
        return pulumi.get(self, "is_system_modifiable")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def number(self) -> Optional[float]:
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def ordinal(self) -> Optional[float]:
        return pulumi.get(self, "ordinal")

    @property
    @pulumi.getter
    def sid(self) -> Optional[str]:
        return pulumi.get(self, "sid")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateComment")
    def update_comment(self) -> Optional[str]:
        return pulumi.get(self, "update_comment")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetManagedDatabasesDatabaseParameterItemAllowedValueResult(dict):
    def __init__(__self__, *,
                 is_default: Optional[bool] = None,
                 ordinal: Optional[float] = None,
                 value: Optional[str] = None):
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if ordinal is not None:
            pulumi.set(__self__, "ordinal", ordinal)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def ordinal(self) -> Optional[float]:
        return pulumi.get(self, "ordinal")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionResult(dict):
    def __init__(__self__, *,
                 database_name: Optional[str] = None,
                 database_sub_type: Optional[str] = None,
                 database_type: Optional[str] = None,
                 database_version: Optional[str] = None,
                 items: Optional[Sequence['outputs.GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemResult']] = None):
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_sub_type is not None:
            pulumi.set(__self__, "database_sub_type", database_sub_type)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if database_version is not None:
            pulumi.set(__self__, "database_version", database_version)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> Optional[str]:
        return pulumi.get(self, "database_version")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemResult(dict):
    def __init__(__self__, *,
                 allowed_values: Optional[Sequence['outputs.GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValueResult']] = None,
                 category: Optional[str] = None,
                 constraint: Optional[str] = None,
                 container_id: Optional[float] = None,
                 description: Optional[str] = None,
                 display_value: Optional[str] = None,
                 is_adjusted: Optional[bool] = None,
                 is_basic: Optional[bool] = None,
                 is_default: Optional[bool] = None,
                 is_deprecated: Optional[bool] = None,
                 is_instance_modifiable: Optional[bool] = None,
                 is_modified: Optional[str] = None,
                 is_pdb_modifiable: Optional[bool] = None,
                 is_session_modifiable: Optional[bool] = None,
                 is_specified: Optional[bool] = None,
                 is_system_modifiable: Optional[str] = None,
                 name: Optional[str] = None,
                 number: Optional[float] = None,
                 ordinal: Optional[float] = None,
                 sid: Optional[str] = None,
                 type: Optional[str] = None,
                 update_comment: Optional[str] = None,
                 value: Optional[str] = None):
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if constraint is not None:
            pulumi.set(__self__, "constraint", constraint)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_value is not None:
            pulumi.set(__self__, "display_value", display_value)
        if is_adjusted is not None:
            pulumi.set(__self__, "is_adjusted", is_adjusted)
        if is_basic is not None:
            pulumi.set(__self__, "is_basic", is_basic)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_deprecated is not None:
            pulumi.set(__self__, "is_deprecated", is_deprecated)
        if is_instance_modifiable is not None:
            pulumi.set(__self__, "is_instance_modifiable", is_instance_modifiable)
        if is_modified is not None:
            pulumi.set(__self__, "is_modified", is_modified)
        if is_pdb_modifiable is not None:
            pulumi.set(__self__, "is_pdb_modifiable", is_pdb_modifiable)
        if is_session_modifiable is not None:
            pulumi.set(__self__, "is_session_modifiable", is_session_modifiable)
        if is_specified is not None:
            pulumi.set(__self__, "is_specified", is_specified)
        if is_system_modifiable is not None:
            pulumi.set(__self__, "is_system_modifiable", is_system_modifiable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if number is not None:
            pulumi.set(__self__, "number", number)
        if ordinal is not None:
            pulumi.set(__self__, "ordinal", ordinal)
        if sid is not None:
            pulumi.set(__self__, "sid", sid)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if update_comment is not None:
            pulumi.set(__self__, "update_comment", update_comment)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[Sequence['outputs.GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValueResult']]:
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def constraint(self) -> Optional[str]:
        return pulumi.get(self, "constraint")

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> Optional[float]:
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayValue")
    def display_value(self) -> Optional[str]:
        return pulumi.get(self, "display_value")

    @property
    @pulumi.getter(name="isAdjusted")
    def is_adjusted(self) -> Optional[bool]:
        return pulumi.get(self, "is_adjusted")

    @property
    @pulumi.getter(name="isBasic")
    def is_basic(self) -> Optional[bool]:
        return pulumi.get(self, "is_basic")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isDeprecated")
    def is_deprecated(self) -> Optional[bool]:
        return pulumi.get(self, "is_deprecated")

    @property
    @pulumi.getter(name="isInstanceModifiable")
    def is_instance_modifiable(self) -> Optional[bool]:
        return pulumi.get(self, "is_instance_modifiable")

    @property
    @pulumi.getter(name="isModified")
    def is_modified(self) -> Optional[str]:
        return pulumi.get(self, "is_modified")

    @property
    @pulumi.getter(name="isPdbModifiable")
    def is_pdb_modifiable(self) -> Optional[bool]:
        return pulumi.get(self, "is_pdb_modifiable")

    @property
    @pulumi.getter(name="isSessionModifiable")
    def is_session_modifiable(self) -> Optional[bool]:
        return pulumi.get(self, "is_session_modifiable")

    @property
    @pulumi.getter(name="isSpecified")
    def is_specified(self) -> Optional[bool]:
        return pulumi.get(self, "is_specified")

    @property
    @pulumi.getter(name="isSystemModifiable")
    def is_system_modifiable(self) -> Optional[str]:
        return pulumi.get(self, "is_system_modifiable")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def number(self) -> Optional[float]:
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def ordinal(self) -> Optional[float]:
        return pulumi.get(self, "ordinal")

    @property
    @pulumi.getter
    def sid(self) -> Optional[str]:
        return pulumi.get(self, "sid")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateComment")
    def update_comment(self) -> Optional[str]:
        return pulumi.get(self, "update_comment")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValueResult(dict):
    def __init__(__self__, *,
                 is_default: Optional[bool] = None,
                 ordinal: Optional[float] = None,
                 value: Optional[str] = None):
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if ordinal is not None:
            pulumi.set(__self__, "ordinal", ordinal)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def ordinal(self) -> Optional[float]:
        return pulumi.get(self, "ordinal")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetManagedDatabasesDatabaseParametersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabasesManagedDatabaseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabasesManagedDatabaseCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabasesManagedDatabaseCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabasesManagedDatabaseCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_details: Optional[Mapping[str, Any]] = None,
                 compartment_id: Optional[str] = None,
                 database_status: Optional[str] = None,
                 database_sub_type: Optional[str] = None,
                 database_type: Optional[str] = None,
                 db_system_id: Optional[str] = None,
                 deployment_type: Optional[str] = None,
                 id: Optional[str] = None,
                 is_cluster: Optional[bool] = None,
                 managed_database_groups: Optional[Sequence['outputs.GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroupResult']] = None,
                 management_option: Optional[str] = None,
                 name: Optional[str] = None,
                 parent_container_id: Optional[str] = None,
                 storage_system_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 workload_type: Optional[str] = None):
        if additional_details is not None:
            pulumi.set(__self__, "additional_details", additional_details)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_status is not None:
            pulumi.set(__self__, "database_status", database_status)
        if database_sub_type is not None:
            pulumi.set(__self__, "database_sub_type", database_sub_type)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if db_system_id is not None:
            pulumi.set(__self__, "db_system_id", db_system_id)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_cluster is not None:
            pulumi.set(__self__, "is_cluster", is_cluster)
        if managed_database_groups is not None:
            pulumi.set(__self__, "managed_database_groups", managed_database_groups)
        if management_option is not None:
            pulumi.set(__self__, "management_option", management_option)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_container_id is not None:
            pulumi.set(__self__, "parent_container_id", parent_container_id)
        if storage_system_id is not None:
            pulumi.set(__self__, "storage_system_id", storage_system_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> Optional[str]:
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> Optional[str]:
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> Optional[str]:
        return pulumi.get(self, "db_system_id")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter(name="managedDatabaseGroups")
    def managed_database_groups(self) -> Optional[Sequence['outputs.GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroupResult']]:
        return pulumi.get(self, "managed_database_groups")

    @property
    @pulumi.getter(name="managementOption")
    def management_option(self) -> Optional[str]:
        return pulumi.get(self, "management_option")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentContainerId")
    def parent_container_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_container_id")

    @property
    @pulumi.getter(name="storageSystemId")
    def storage_system_id(self) -> Optional[str]:
        return pulumi.get(self, "storage_system_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[str]:
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabasesUserProxyUserItemResult(dict):
    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 flags: Optional[str] = None,
                 name: Optional[str] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def flags(self) -> Optional[str]:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabasesUserProxyUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabasesUserProxyUsersProxyUserCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabasesUserProxyUsersProxyUserCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabasesUserProxyUsersProxyUserCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabasesUserProxyUsersProxyUserCollectionItemResult(dict):
    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 flags: Optional[str] = None,
                 name: Optional[str] = None):
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def flags(self) -> Optional[str]:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabasesUserSystemPrivilegeItemResult(dict):
    def __init__(__self__, *,
                 admin_option: Optional[str] = None,
                 common: Optional[str] = None,
                 inherited: Optional[str] = None,
                 name: Optional[str] = None):
        if admin_option is not None:
            pulumi.set(__self__, "admin_option", admin_option)
        if common is not None:
            pulumi.set(__self__, "common", common)
        if inherited is not None:
            pulumi.set(__self__, "inherited", inherited)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="adminOption")
    def admin_option(self) -> Optional[str]:
        return pulumi.get(self, "admin_option")

    @property
    @pulumi.getter
    def common(self) -> Optional[str]:
        return pulumi.get(self, "common")

    @property
    @pulumi.getter
    def inherited(self) -> Optional[str]:
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabasesUserSystemPrivilegesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollectionItemResult(dict):
    def __init__(__self__, *,
                 admin_option: Optional[str] = None,
                 common: Optional[str] = None,
                 inherited: Optional[str] = None,
                 name: Optional[str] = None):
        if admin_option is not None:
            pulumi.set(__self__, "admin_option", admin_option)
        if common is not None:
            pulumi.set(__self__, "common", common)
        if inherited is not None:
            pulumi.set(__self__, "inherited", inherited)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="adminOption")
    def admin_option(self) -> Optional[str]:
        return pulumi.get(self, "admin_option")

    @property
    @pulumi.getter
    def common(self) -> Optional[str]:
        return pulumi.get(self, "common")

    @property
    @pulumi.getter
    def inherited(self) -> Optional[str]:
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedMySqlDatabaseConfigurationDataFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedMySqlDatabaseConfigurationDataMySqlConfigurationDataCollectionItemResult(dict):
    def __init__(__self__, *,
                 default_value: Optional[str] = None,
                 description: Optional[str] = None,
                 host_set: Optional[str] = None,
                 is_configurable: Optional[bool] = None,
                 is_dynamic: Optional[bool] = None,
                 is_init: Optional[bool] = None,
                 max_value: Optional[float] = None,
                 min_value: Optional[float] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 possible_values: Optional[str] = None,
                 source: Optional[str] = None,
                 supported_versions: Optional[str] = None,
                 time_set: Optional[str] = None,
                 type: Optional[str] = None,
                 user_set: Optional[str] = None,
                 value: Optional[str] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if host_set is not None:
            pulumi.set(__self__, "host_set", host_set)
        if is_configurable is not None:
            pulumi.set(__self__, "is_configurable", is_configurable)
        if is_dynamic is not None:
            pulumi.set(__self__, "is_dynamic", is_dynamic)
        if is_init is not None:
            pulumi.set(__self__, "is_init", is_init)
        if max_value is not None:
            pulumi.set(__self__, "max_value", max_value)
        if min_value is not None:
            pulumi.set(__self__, "min_value", min_value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if possible_values is not None:
            pulumi.set(__self__, "possible_values", possible_values)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if supported_versions is not None:
            pulumi.set(__self__, "supported_versions", supported_versions)
        if time_set is not None:
            pulumi.set(__self__, "time_set", time_set)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_set is not None:
            pulumi.set(__self__, "user_set", user_set)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hostSet")
    def host_set(self) -> Optional[str]:
        return pulumi.get(self, "host_set")

    @property
    @pulumi.getter(name="isConfigurable")
    def is_configurable(self) -> Optional[bool]:
        return pulumi.get(self, "is_configurable")

    @property
    @pulumi.getter(name="isDynamic")
    def is_dynamic(self) -> Optional[bool]:
        return pulumi.get(self, "is_dynamic")

    @property
    @pulumi.getter(name="isInit")
    def is_init(self) -> Optional[bool]:
        return pulumi.get(self, "is_init")

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[float]:
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[float]:
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Optional[str]:
        return pulumi.get(self, "possible_values")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="supportedVersions")
    def supported_versions(self) -> Optional[str]:
        return pulumi.get(self, "supported_versions")

    @property
    @pulumi.getter(name="timeSet")
    def time_set(self) -> Optional[str]:
        return pulumi.get(self, "time_set")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userSet")
    def user_set(self) -> Optional[str]:
        return pulumi.get(self, "user_set")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetManagedMySqlDatabaseSqlDataFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedMySqlDatabaseSqlDataMySqlDataCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedMySqlDatabaseSqlDataMySqlDataCollectionItemResult(dict):
    def __init__(__self__, *,
                 avg_timer_wait: Optional[float] = None,
                 count_star: Optional[float] = None,
                 digest: Optional[str] = None,
                 digest_text: Optional[str] = None,
                 first_seen: Optional[str] = None,
                 last_seen: Optional[str] = None,
                 max_timer_wait: Optional[float] = None,
                 min_timer_wait: Optional[float] = None,
                 quantile95: Optional[float] = None,
                 quantile99: Optional[float] = None,
                 quantile999: Optional[float] = None,
                 schema_name: Optional[str] = None,
                 sum_created_temp_disk_tables: Optional[float] = None,
                 sum_created_temp_tables: Optional[float] = None,
                 sum_errors: Optional[float] = None,
                 sum_lock_time: Optional[float] = None,
                 sum_no_good_index_used: Optional[float] = None,
                 sum_no_index_used: Optional[float] = None,
                 sum_rows_affected: Optional[float] = None,
                 sum_rows_examined: Optional[float] = None,
                 sum_rows_sent: Optional[float] = None,
                 sum_select_full_join: Optional[float] = None,
                 sum_select_full_range_join: Optional[float] = None,
                 sum_select_range: Optional[float] = None,
                 sum_select_range_check: Optional[float] = None,
                 sum_select_scan: Optional[float] = None,
                 sum_sort_merge_passes: Optional[float] = None,
                 sum_sort_range: Optional[float] = None,
                 sum_sort_rows: Optional[float] = None,
                 sum_sort_scan: Optional[float] = None,
                 sum_timer_wait: Optional[float] = None,
                 sum_warnings: Optional[float] = None):
        if avg_timer_wait is not None:
            pulumi.set(__self__, "avg_timer_wait", avg_timer_wait)
        if count_star is not None:
            pulumi.set(__self__, "count_star", count_star)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if digest_text is not None:
            pulumi.set(__self__, "digest_text", digest_text)
        if first_seen is not None:
            pulumi.set(__self__, "first_seen", first_seen)
        if last_seen is not None:
            pulumi.set(__self__, "last_seen", last_seen)
        if max_timer_wait is not None:
            pulumi.set(__self__, "max_timer_wait", max_timer_wait)
        if min_timer_wait is not None:
            pulumi.set(__self__, "min_timer_wait", min_timer_wait)
        if quantile95 is not None:
            pulumi.set(__self__, "quantile95", quantile95)
        if quantile99 is not None:
            pulumi.set(__self__, "quantile99", quantile99)
        if quantile999 is not None:
            pulumi.set(__self__, "quantile999", quantile999)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if sum_created_temp_disk_tables is not None:
            pulumi.set(__self__, "sum_created_temp_disk_tables", sum_created_temp_disk_tables)
        if sum_created_temp_tables is not None:
            pulumi.set(__self__, "sum_created_temp_tables", sum_created_temp_tables)
        if sum_errors is not None:
            pulumi.set(__self__, "sum_errors", sum_errors)
        if sum_lock_time is not None:
            pulumi.set(__self__, "sum_lock_time", sum_lock_time)
        if sum_no_good_index_used is not None:
            pulumi.set(__self__, "sum_no_good_index_used", sum_no_good_index_used)
        if sum_no_index_used is not None:
            pulumi.set(__self__, "sum_no_index_used", sum_no_index_used)
        if sum_rows_affected is not None:
            pulumi.set(__self__, "sum_rows_affected", sum_rows_affected)
        if sum_rows_examined is not None:
            pulumi.set(__self__, "sum_rows_examined", sum_rows_examined)
        if sum_rows_sent is not None:
            pulumi.set(__self__, "sum_rows_sent", sum_rows_sent)
        if sum_select_full_join is not None:
            pulumi.set(__self__, "sum_select_full_join", sum_select_full_join)
        if sum_select_full_range_join is not None:
            pulumi.set(__self__, "sum_select_full_range_join", sum_select_full_range_join)
        if sum_select_range is not None:
            pulumi.set(__self__, "sum_select_range", sum_select_range)
        if sum_select_range_check is not None:
            pulumi.set(__self__, "sum_select_range_check", sum_select_range_check)
        if sum_select_scan is not None:
            pulumi.set(__self__, "sum_select_scan", sum_select_scan)
        if sum_sort_merge_passes is not None:
            pulumi.set(__self__, "sum_sort_merge_passes", sum_sort_merge_passes)
        if sum_sort_range is not None:
            pulumi.set(__self__, "sum_sort_range", sum_sort_range)
        if sum_sort_rows is not None:
            pulumi.set(__self__, "sum_sort_rows", sum_sort_rows)
        if sum_sort_scan is not None:
            pulumi.set(__self__, "sum_sort_scan", sum_sort_scan)
        if sum_timer_wait is not None:
            pulumi.set(__self__, "sum_timer_wait", sum_timer_wait)
        if sum_warnings is not None:
            pulumi.set(__self__, "sum_warnings", sum_warnings)

    @property
    @pulumi.getter(name="avgTimerWait")
    def avg_timer_wait(self) -> Optional[float]:
        return pulumi.get(self, "avg_timer_wait")

    @property
    @pulumi.getter(name="countStar")
    def count_star(self) -> Optional[float]:
        return pulumi.get(self, "count_star")

    @property
    @pulumi.getter
    def digest(self) -> Optional[str]:
        return pulumi.get(self, "digest")

    @property
    @pulumi.getter(name="digestText")
    def digest_text(self) -> Optional[str]:
        return pulumi.get(self, "digest_text")

    @property
    @pulumi.getter(name="firstSeen")
    def first_seen(self) -> Optional[str]:
        return pulumi.get(self, "first_seen")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> Optional[str]:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter(name="maxTimerWait")
    def max_timer_wait(self) -> Optional[float]:
        return pulumi.get(self, "max_timer_wait")

    @property
    @pulumi.getter(name="minTimerWait")
    def min_timer_wait(self) -> Optional[float]:
        return pulumi.get(self, "min_timer_wait")

    @property
    @pulumi.getter
    def quantile95(self) -> Optional[float]:
        return pulumi.get(self, "quantile95")

    @property
    @pulumi.getter
    def quantile99(self) -> Optional[float]:
        return pulumi.get(self, "quantile99")

    @property
    @pulumi.getter
    def quantile999(self) -> Optional[float]:
        return pulumi.get(self, "quantile999")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sumCreatedTempDiskTables")
    def sum_created_temp_disk_tables(self) -> Optional[float]:
        return pulumi.get(self, "sum_created_temp_disk_tables")

    @property
    @pulumi.getter(name="sumCreatedTempTables")
    def sum_created_temp_tables(self) -> Optional[float]:
        return pulumi.get(self, "sum_created_temp_tables")

    @property
    @pulumi.getter(name="sumErrors")
    def sum_errors(self) -> Optional[float]:
        return pulumi.get(self, "sum_errors")

    @property
    @pulumi.getter(name="sumLockTime")
    def sum_lock_time(self) -> Optional[float]:
        return pulumi.get(self, "sum_lock_time")

    @property
    @pulumi.getter(name="sumNoGoodIndexUsed")
    def sum_no_good_index_used(self) -> Optional[float]:
        return pulumi.get(self, "sum_no_good_index_used")

    @property
    @pulumi.getter(name="sumNoIndexUsed")
    def sum_no_index_used(self) -> Optional[float]:
        return pulumi.get(self, "sum_no_index_used")

    @property
    @pulumi.getter(name="sumRowsAffected")
    def sum_rows_affected(self) -> Optional[float]:
        return pulumi.get(self, "sum_rows_affected")

    @property
    @pulumi.getter(name="sumRowsExamined")
    def sum_rows_examined(self) -> Optional[float]:
        return pulumi.get(self, "sum_rows_examined")

    @property
    @pulumi.getter(name="sumRowsSent")
    def sum_rows_sent(self) -> Optional[float]:
        return pulumi.get(self, "sum_rows_sent")

    @property
    @pulumi.getter(name="sumSelectFullJoin")
    def sum_select_full_join(self) -> Optional[float]:
        return pulumi.get(self, "sum_select_full_join")

    @property
    @pulumi.getter(name="sumSelectFullRangeJoin")
    def sum_select_full_range_join(self) -> Optional[float]:
        return pulumi.get(self, "sum_select_full_range_join")

    @property
    @pulumi.getter(name="sumSelectRange")
    def sum_select_range(self) -> Optional[float]:
        return pulumi.get(self, "sum_select_range")

    @property
    @pulumi.getter(name="sumSelectRangeCheck")
    def sum_select_range_check(self) -> Optional[float]:
        return pulumi.get(self, "sum_select_range_check")

    @property
    @pulumi.getter(name="sumSelectScan")
    def sum_select_scan(self) -> Optional[float]:
        return pulumi.get(self, "sum_select_scan")

    @property
    @pulumi.getter(name="sumSortMergePasses")
    def sum_sort_merge_passes(self) -> Optional[float]:
        return pulumi.get(self, "sum_sort_merge_passes")

    @property
    @pulumi.getter(name="sumSortRange")
    def sum_sort_range(self) -> Optional[float]:
        return pulumi.get(self, "sum_sort_range")

    @property
    @pulumi.getter(name="sumSortRows")
    def sum_sort_rows(self) -> Optional[float]:
        return pulumi.get(self, "sum_sort_rows")

    @property
    @pulumi.getter(name="sumSortScan")
    def sum_sort_scan(self) -> Optional[float]:
        return pulumi.get(self, "sum_sort_scan")

    @property
    @pulumi.getter(name="sumTimerWait")
    def sum_timer_wait(self) -> Optional[float]:
        return pulumi.get(self, "sum_timer_wait")

    @property
    @pulumi.getter(name="sumWarnings")
    def sum_warnings(self) -> Optional[float]:
        return pulumi.get(self, "sum_warnings")


@pulumi.output_type
class GetManagedMySqlDatabasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedMySqlDatabasesManagedMySqlDatabaseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetManagedMySqlDatabasesManagedMySqlDatabaseCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetManagedMySqlDatabasesManagedMySqlDatabaseCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedMySqlDatabasesManagedMySqlDatabaseCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 db_name: Optional[str] = None,
                 db_version: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


